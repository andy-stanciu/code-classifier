class Solution {

    public double solve(double x, long n) {
        if (n == 0) {
            // base case i.e anything raise to power 0 is 1
            return 1;
        }
        if (n < 0) {
            // if the power is in negative, convert it into reciprocal
            return solve(1 / x, -n);
        }
        if (n % 2 == 0) {
            // if the power is even - it reduces the number of multiplication (Binary exponents)
            return solve(x * x, n / 2);
        } else // the both even and odd are written in that way because if we multiply directly it would require more steps and may throw an error.
        {
            // if the power is odd - an additional x will get multiplied to the even solution
            return x * solve(x * x, n / 2);
        }
    }

    public double myPow(double x, int n) {
        // main function will return accordingly!
        return solve(x, (long) n);
    }
    // ----no loop used, done using recursion! ----
}
// PLEASE UPVOTE IF YOU LIKE IT
