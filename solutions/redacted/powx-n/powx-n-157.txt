class Solution {

    public double myPow(double x, int n) {
        // Convert n to long to handle edge case for Integer.MIN_VALUE
        long power = n;
        // If the power is negative, invert the base and make the power positive
        if (power < 0) {
            // Invert x
            x = 1 / x;
            // Make power positive
            power = -power;
        }
        // Call the helper function to compute the power
        return solve(x, power);
    }

    // Helper function that recursively calculates x^pow using exponentiation by squaring
    public static double solve(double x, long pow) {
        // Base case: any number raised to the power of 0 is 1
        if (pow == 0)
            return 1;
        // Base case: any number raised to the power of 1 is the number itself
        if (pow == 1)
            return x;
        // Recursively compute x^(pow / 2)
        double ans = solve(x, pow / 2);
        // If the power is even, just square the result
        if (pow % 2 == 0) {
            ans = ans * ans;
        } else {
            // If the power is odd, square the result and multiply by x
            ans = ans * ans * x;
        }
        // Return the final result
        return ans;
    }
}
