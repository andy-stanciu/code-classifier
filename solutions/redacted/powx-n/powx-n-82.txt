class Solution {

    public double myPow(double x, int n) {
        if (n == 0)
            return 1;
        if (n < 0) {
            n = -n;
            x = 1 / x;
        }
        double ans = (n % 2 == 0) ? myPow(x * x, n / 2) : x * myPow(x * x, n / 2);
        // according to constraints mentioned
        return ans > 100000 ? 0.0 : ans;
    }
}
// Conditions of binary Exponentiation
// if
//     n is even - x(n/2) * x(n/2)
//     n is odd - x * x(n/2) * x(n/2)
//     0 is base cond -  return 1
// eg: 2(5)
//     5 is odd ( 2(5) ) - 2 * 2(2) * 2(2)
//     2 is eve ( 2(2) ) - 2(1) * 2(1)
//     1 is base cond ( 2(1) ) - 2
//     backtracking....
//     2 is eve ( 2(2) ) - 2 * 2 = 4
//     5 is odd ( 2(5) ) - 2 * 2(2) * 2(2) = 2 * 4 * 4 = 32
