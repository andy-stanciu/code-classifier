class Solution {

    public double myPow(double x, int n) {
        if (x == 0) {
            return 0;
        }
        // Use long to avoid overflow when n = Integer.MIN_VALUE (-2147483648)
        long N = n;
        // Handle negative exponents by inverting x and making N positive
        if (N < 0) {
            x = 1 / x;
            N = -N;
        }
        return power(x, N);
    }

    // Helper function to compute power using long for n
    private double power(double x, long n) {
        if (n == 0) {
            return 1;
        }
        double halfPower = power(x, n / 2);
        double halfPowSqr = halfPower * halfPower;
        //if n is odd
        if (n % 2 != 0) {
            halfPowSqr = x * halfPowSqr;
        }
        return halfPowSqr;
    }
}
