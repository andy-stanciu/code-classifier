class Solution {

    public double myPow(double x, int n) {
        if (n == 0)
            return 1;
        if (n == 1)
            return x;
        if (n == -1)
            return 1 / x;
        int half = n / 2;
        //use halfpow to reduce replicate computation, and reduce the stack depth
        double halfPow = myPow(x, half);
        if (n % 2 == 0) {
            // n is even
            return halfPow * halfPow;
        } else {
            //n is odd
            if (n > 0)
                return halfPow * halfPow * myPow(x, 1);
            else
                return halfPow * halfPow * myPow(x, -1);
        }
    }
}
