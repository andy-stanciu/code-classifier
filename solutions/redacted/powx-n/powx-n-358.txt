class Solution {

    public double myPow(double x, int n) {
        //Base condition if n is zero we return 0
        if (n == 0)
            return 1;
        // Now we consider the case where n might be lowest possible integer.
        // To avoud out of range exception in the next step when *= -1
        if (n == Integer.MIN_VALUE) {
            x = x * x;
            n /= 2;
        }
        //In this step we take care of negative values
        //We\'re converting 2^-2 to (1/2)^2
        if (n < 0) {
            n *= -1;
            x = 1 / x;
        }
        //Now we divide our problems into subproblems
        //If we want to find 2^4
        //we break it into 2^2 and store it in a temp variable
        //Later we check in n is even then we return (2^2)*(2^2).i.e temp*temp
        //Because (2^2)*(2^2) == (2^4)
        //Else if it is odd like 2^5 then we take one two aside and then divide 2^4
        //Into (2^2)*(2^2) and multiply it by remaining one two.
        double temp = myPow(x, n / 2);
        //System.out.println("X: " + x + " temp: " + temp + " n: " + n);
        return (n % 2 == 0) ? temp * temp : x * temp * temp;
    }
}
