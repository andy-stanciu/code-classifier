// You can improve this to O(log n) using the "exponentiation by squaring" method.
class Solution {

    public double myPow(double x, int n) {
        if (x == 0 || x == 1)
            return x;
        if (x == -1) {
            if (n % 2 == 0)
                return 1.0;
            return -1.0;
        }
        if (n == Integer.MIN_VALUE) {
            // Math.abs doesn\'t work here, so square x and half n, so that the result will be correct without overflow issue
            x *= x;
            n /= 2;
        }
        double result = 1.0;
        boolean isNegative = n < 0;
        n = Math.abs(n);
        while (n > 0) {
            if (n % 2 == 1) {
                result *= x;
            }
            x *= x;
            n /= 2;
        }
        return isNegative ? 1 / result : result;
    }
}
