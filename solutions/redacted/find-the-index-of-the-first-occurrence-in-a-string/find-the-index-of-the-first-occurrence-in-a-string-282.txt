class Solution {

    public int[] buildLPS(String needle) {
        int m = needle.length();
        int[] lps = new int[m];
        lps[0] = 0;
        int i = 1;
        int len = 0;
        while (i < m) {
            if (needle.charAt(len) == needle.charAt(i)) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];
                } else {
                    lps[i] = 0;
                    len = 0;
                    i++;
                }
            }
        }
        return lps;
    }

    public int method1(String haystack, String needle) {
        int n = haystack.length();
        int m = needle.length();
        int[] lps = buildLPS(needle);
        int i = 0;
        int j = 0;
        while (i < n) {
            if (needle.charAt(j) == haystack.charAt(i)) {
                i++;
                j++;
            }
            if (j == m) {
                return (i - j);
            } else if (i < n && needle.charAt(j) != haystack.charAt(i)) {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    j = 0;
                    i++;
                }
            }
        }
        return -1;
    }

    public int strStr(String haystack, String needle) {
        return method1(haystack, needle);
    }
}
