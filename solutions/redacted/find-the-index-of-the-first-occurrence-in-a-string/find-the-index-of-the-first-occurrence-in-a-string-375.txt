class Solution {

    public int strStr(String haystack, String needle) {
        // Edge case: If needle is empty, return 0 as per problem definition
        if (needle.length() == 0) {
            return 0;
        }
        // Edge case: If haystack and needle are the same
        if (haystack.length() == needle.length()) {
            if (needle.equals(haystack)) {
                return 0;
            }
            return -1;
        }
        // Loop through haystack, but only until there\'s enough room for needle
        for (int j = 0; j <= haystack.length() - needle.length(); j++) {
            // If first character matches, check the substring
            if (needle.charAt(0) == haystack.charAt(j)) {
                if (needle.equals(haystack.substring(j, j + needle.length()))) {
                    // Found, return the index
                    return j;
                }
            }
        }
        // Not found
        return -1;
    }
}
