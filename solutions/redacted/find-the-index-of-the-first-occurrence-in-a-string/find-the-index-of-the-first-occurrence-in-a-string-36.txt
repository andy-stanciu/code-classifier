class Solution {

    public int strStr(String haystack, String needle) {
        // Checks if needle is in haystack, return -1 automatically if not
        if (!haystack.contains(needle)) {
            return -1;
        }
        // Iterates through each possible substring of length needle.length()
        // Should not throw NullPointerException because we already know that the needle is in the haystack
        //   so it should return an index before it reaches the end
        for (int i = 0; i < haystack.length(); i++) {
            System.out.println((haystack.substring(i, i + needle.length())));
            if ((haystack.substring(i, i + needle.length())).equals(needle)) {
                return i;
            }
        }
        // Returns arbitrary number to satisfy processor
        return 0;
    }
}
