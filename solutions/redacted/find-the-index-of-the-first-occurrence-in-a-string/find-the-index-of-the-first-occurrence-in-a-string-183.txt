class Solution {

    public int strStr(String haystack, String needle) {
        //in first method,we can find that we need match all the substring if it\'s not match.
        //some message have been lost: the prefix of the last string we have compared.
        //we can start with the same prefix string to match,so that the time can be saved
        // we can store the same prefix in a array or list, so we called kmp algorithm
        int length = haystack.length();
        int length1 = needle.length();
        int i = 0;
        int j = 0;
        int[] next = new int[length1 + 1];
        getNext(needle, next);
        while (i < length && j < length1) {
            if (j == -1 || haystack.charAt(i) == needle.charAt(j)) {
                i++;
                j++;
            } else {
                j = next[j];
            }
        }
        if (j == length1) {
            return i - j;
        } else {
            return -1;
        }
    }

    void getNext(String p, int[] next) {
        next[0] = -1;
        int i = 0, j = -1;
        while (i < (p.length())) {
            if (j == -1 || p.charAt(i) == p.charAt(j)) {
                ++i;
                ++j;
                next[i] = j;
            } else {
                j = next[j];
            }
        }
    }
}
