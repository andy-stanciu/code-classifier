class Solution {

    // public int firstMissingPositive(int[] nums) {
    //     //1st approach O(n) time and O(n) space
    //     Set<Integer> set=new HashSet<>();
    //     for(int i:nums){
    //         set.add(i);
    //     }
    //     for(int i=1;i<=nums.length;i++){
    //         if(!set.contains(i)){
    //             return i;
    //         }
    //     }
    //     return nums.length+1;
    // }
    public int method1(int[] nums) {
        //2nd approach O(n) time and O(1) space
        boolean oneExist = false;
        for (int i : nums) {
            if (i == 1) {
                oneExist = true;
            }
        }
        if (!oneExist) {
            return 1;
        }
        //making sure we will never see a number in the array apart from 1...n
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] <= 0 || nums[i] > nums.length) {
                //make those numbers 1
                nums[i] = 1;
            }
        }
        //Numbers which we are found in the array mark its corresponding indices visited by making them -ve
        for (int i = 0; i < nums.length; i++) {
            int n = Math.abs(nums[i]);
            if (n == nums.length) {
                nums[0] = -1 * Math.abs(nums[0]);
            } else {
                nums[n] = -1 * Math.abs(nums[n]);
            }
        }
        //now 1st +ve number we get in array that corresponding index is our required answer
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > 0) {
                return i;
            }
        }
        if (nums[0] > 0)
            return nums.length;
        return nums.length + 1;
    }
}
