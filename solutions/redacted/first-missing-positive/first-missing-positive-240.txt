class Solution {

    public static int method1(int[] arr) {
        int i = 0;
        // \uD83D\uDEE0\uFE0F Cycle Sort Logic: Place each number at its correct index if it falls within the valid range.
        while (i < arr.length) {
            int correct = arr[i] - 1;
            // Check if the number is within the correct range and needs to be swapped to the correct index
            if (arr[i] > 0 && arr[i] <= arr.length && arr[i] != arr[correct]) {
                // Swap the number to its correct index
                swap(arr, i, correct);
            } else {
                // Move to the next element if no swap is needed
                i++;
            }
        }
        // \uD83D\uDD0D # Searching for the first missing positive:
        // Now, we check the array to find the first index where the number isn\'t in its correct place.
        for (int index = 0; index < arr.length; index++) {
            if (arr[index] != index + 1) {
                // Return the first missing positive number
                return index + 1;
            }
        }
        // Case when all numbers are in place, return the next positive number (length + 1)
        return arr.length + 1;
    }

    // \uD83D\uDD04 Helper function to swap two elements in the array
    static void swap(int[] arr, int param1, int second) {
        int temp = arr[param1];
        arr[param1] = arr[second];
        arr[second] = temp;
    }
}
