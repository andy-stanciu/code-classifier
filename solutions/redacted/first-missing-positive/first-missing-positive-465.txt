class Solution {

    public int method1(int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] <= 0) {
                nums[i] = nums.length + 1;
            }
        }
        //         // after this loop we will iterate second time to make the vaule but first checking
        //         // number - 1 th index and mark it as negative
        for (int i = 0; i < nums.length; i++) {
            int val = Math.abs(nums[i]);
            if (1 <= val && val <= nums.length) {
                if (nums[val - 1] > 0)
                    nums[val - 1] *= -1;
                if (nums[val - 1] == 0)
                    nums[val - 1] = -(nums[val - 1]);
                else if (nums[val - 1] == nums.length + 1) {
                    nums[val - 1] = -(nums.length + 1);
                }
            }
        }
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > 0) {
                return i + 1;
            }
        }
        return nums.length + 1;
    }
}
// class Solution {
//     public int firstMissingPositive(int[] nums) {
//         // Step 1: Replace negative values and zeros with a number larger than the length of the array
//         for (int i = 0; i < nums.length; i++) {
//             if (nums[i] <= 0) {
//                 nums[i] = nums.length + 1;
//             }
//         }
//         // Step 2: Mark the presence of numbers by negating the value at the corresponding index
//         for (int i = 0; i < nums.length; i++) {
//             int val = Math.abs(nums[i]);
//             if (1 <= val && val <= nums.length) {
//                 if (nums[val - 1] > 0) {
//                     nums[val - 1] = -nums[val - 1];
//                 } else if (nums[val - 1] == nums.length + 1) {
//                     nums[val - 1] = -(nums.length + 1);
//                 }
//             }
//         }
//         // Step 3: Find the first positive number\'s index
//         for (int i = 0; i < nums.length; i++) {
//             if (nums[i] > 0) {
//                 return i + 1;
//             }
//         }
//         // If all numbers from 1 to nums.length are present, the answer is nums.length + 1
//         return nums.length + 1;
//     }
// }
