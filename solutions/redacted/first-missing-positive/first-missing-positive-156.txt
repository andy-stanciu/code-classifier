class Solution {

    public static int method1(int[] nums) {
        /*
			    NOTE: Ignore elements that are negative and greater than N (obviously)
				
		
			   let\'s consider an example :
			   nums = [3, 4, -1, 1]
			   index: {0, 1, 2, 3}   length of nums = 4
	   
				   first sort the array so, 
			   After sorting :   index: [1, -1, 3,  4]
	   
			   Now look diagonally ,
												   index: {0, 1, 2, 3}
														    /  /  /  
												   nums = [1, -1, 3, 4]
												   
				So, we can see that at index  1 we are getting wrong value i.e the answer of the problem
				Now, we will return the first missing positive element ,
				A.T.Q. 
							first missing positive value = index + 1
				Therefore, in this example, first missing positive value is 2 at index 1
				
		*/
        int i = 0;
        while (i < nums.length) {
            int correct = nums[i] - 1;
            if (nums[i] > 0 && nums[i] <= nums.length && nums[i] != nums[correct]) {
                swap(nums, i, correct);
            } else {
                i++;
            }
        }
        for (int index = 0; index < nums.length; index++) {
            if (nums[index] != index + 1) {
                return index + 1;
            }
        }
        // if N i.e. the length of the array is not an element in the array so this means array is sorted, therefore return N+1 value
        return nums.length + 1;
    }

    // Swap Function
    static void swap(int[] arr, int i, int correct) {
        int temp = arr[i];
        arr[i] = arr[correct];
        arr[correct] = temp;
    }
}
