class Solution {

    public int method1(int[] nums) {
        // #Approach-1 with timecomplexity = O(N) && spacecomplexity =O(1).
        int i = 0;
        while (i < nums.length) {
            // finding the correct index for the current element.
            int correctIndex = nums[i] - 1;
            if (// check if the index is in the array indexs or not.
            correctIndex < 0 || correctIndex > nums.length - 1) {
                // if not then skip the element otherwise it\'s give ArrayIndexOutOfBoundsException.
                i++;
                continue;
            }
            if (//check if the element is at right index or not.
            nums[i] != nums[correctIndex]) {
                //if not then swap with the correct Index.
                int temp = nums[i];
                nums[i] = nums[correctIndex];
                nums[correctIndex] = temp;
            } else {
                i++;
            }
        }
        int k = 0;
        while (k < nums.length) {
            if (nums[k] != k + 1) {
                return k + 1;
            }
            k++;
        }
        return k + 1;
        // #Approach-2.
        // HashMap<Integer,Integer> mp = new HashMap<>();
        // for(int i= 0 ; i<nums.length;i++)
        // {
        //     mp.put(nums[i],0);
        // }
        // int i =1;
        // while(mp.containsKey(i))
        // {
        //     i++;
        // }
        // return i;
    }
}
