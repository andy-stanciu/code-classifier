class Solution {

    public ListNode method1(ListNode head) {
        // Two pointers {curr} and {prev} which will be pointing to the node
        // which needs to be reversed and the node which was last reversed.
        return method2(head, null);
    }

    public ListNode method2(ListNode curr, ListNode prev) {
        // When the complete list is reversed, current will be pointing to null
        // and  previous will point to the new head node.
        if (curr == null) {
            return prev;
        }
        // Backup of current\'s next node, as current will no longer
        // point to the next node once it will be reversed.
        ListNode next = curr.next;
        // Reverse the current node by making current\'s next point
        // to the previous node.
        curr.next = prev;
        // Current node will become new previous and next node
        // will become new current node.
        return method2(next, curr);
    }
}
