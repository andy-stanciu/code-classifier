/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public static ListNode method1(ListNode head) {
        if (head == null) {
            return head;
        }
        //hold the new head inside
        ListNode[] arr = new ListNode[1];
        Helper(null, head, arr);
        return arr[0];
    }

    public static void Helper(ListNode before, ListNode current, ListNode[] arr) {
        if (current.next == null) {
            //base case for new head
            arr[0] = current;
            //link to element before it
            current.next = before;
            return;
        }
        //recursive call
        Helper(current, current.next, arr);
        //backtracking to get the node to point to the one previous to it recursively
        current.next = before;
    }
}
