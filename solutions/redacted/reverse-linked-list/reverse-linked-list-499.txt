/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        // Initialize the previous node to null
        ListNode previous = null;
        // Start with the head of the list
        ListNode current = head;
        // Temporary pointer to store the next node
        ListNode next = null;
        while (current != null) {
            // Traverse the list until the end
            // Store the next node
            next = current.next;
            // Reverse the link
            current.next = previous;
            // Move the previous pointer forward
            previous = current;
            // Move the current pointer forward
            current = next;
        }
        // Return the new head of the reversed list
        return previous;
    }
}
