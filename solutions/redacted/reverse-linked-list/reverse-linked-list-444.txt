/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    // 1 -> 2 -> 3
    public ListNode method1(ListNode head) {
        ListNode prev = null;
        ListNode temp = null;
        while (head != null) {
            temp = head.next;
            head.next = prev;
            prev = head;
            head = temp;
        }
        return prev;
        /*
        List<Integer> newList = new LinkedList();
        while (head != null) {
            newList.add(0, head.val);
            head = head.next;
        } 
        if (newList.size() == 0) return head;

        Iterator<Integer> iterator = newList.iterator();
        ListNode currentNode = new ListNode(iterator.next());       
        ListNode firstNode = currentNode;
        while (iterator.hasNext()) {            
            ListNode newNode = new ListNode(iterator.next());
            currentNode.next = newNode;
            currentNode = newNode;
        }
        return firstNode;
        */
    }
}
