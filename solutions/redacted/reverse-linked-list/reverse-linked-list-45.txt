public class Solution {

    // Iterative Approach
    public ListNode method1(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        while (curr != null) {
            // Save the next node
            ListNode next = curr.next;
            // Reverse the current node\'s pointer
            curr.next = prev;
            // Move prev and curr one step forward
            prev = curr;
            curr = next;
        }
        // prev will be the new head
        return prev;
    }

    // Recursive Approach
    public ListNode method2(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode newHead = method2(head.next);
        head.next.next = head;
        head.next = null;
        return newHead;
    }
}
