/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        // Initialize the current node as head and previous node as null.
        ListNode curr = head;
        ListNode prev = null;
        // Traverse through the list until the current node is null.
        while (curr != null) {
            // Save the next node to avoid losing reference.
            ListNode next = curr.next;
            // Reverse the pointer of the current node to the previous node.
            curr.next = prev;
            // Move the previous and current pointers one step forward.
            prev = curr;
            curr = next;
        }
        // At the end, prev will point to the new head of the reversed list.
        return prev;
    }
}
