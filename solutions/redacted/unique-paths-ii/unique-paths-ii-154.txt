class Solution {

    public int method1(int[][] arr) {
        // return recursive(arr, arr.length - 1, arr[0].length - 1);
        int m = arr.length, n = arr[0].length;
        if (arr[m - 1][n - 1] == 1)
            return 0;
        /**
         *        // tabulation approach
         *        int[][] dp = new int[m + 1][n + 1];
         *        for (int row = m; row >= 0; row --) {
         *            for (int col = n; col >= 0; col --) {
         *                if (row == m || col == n) {
         *                    dp[row][col] = 0;
         *                } else if (row == m - 1 && col == n - 1) {
         *                    dp[row][col] = 1;
         *                } else if (arr[row][col] == 1) {
         *                    dp[row][col] = 0;
         *                } else {
         *                    dp[row][col] = dp[row + 1][col] + dp[row][col + 1];
         *                }
         *            }
         *        }
         *
         *        return dp[0][0];
         */
        int[] next = new int[n + 1];
        int[] cur = new int[n + 1];
        for (int row = m; row >= 0; row--) {
            cur = new int[n + 1];
            for (int col = n; col >= 0; col--) {
                if (row == m || col == n) {
                    cur[col] = 0;
                } else if (row == m - 1 && col == n - 1) {
                    cur[col] = 1;
                } else if (arr[row][col] == 1) {
                    cur[col] = 0;
                } else {
                    cur[col] = next[col] + cur[col + 1];
                }
            }
            next = cur;
        }
        return cur[0];
    }

    HashMap<String, Integer> map = new HashMap<>();

    private int recursive(int[][] arr, int row, int col) {
        if (row < 0 || col < 0)
            return 0;
        if (arr[row][col] == 1)
            return 0;
        if (row == 0 && col == 0) {
            return 1;
        }
        String key = row + "-" + col;
        if (map.containsKey(key))
            return map.get(key);
        int ans = recursive(arr, row - 1, col) + recursive(arr, row, col - 1);
        map.put(key, ans);
        return ans;
    }
}
