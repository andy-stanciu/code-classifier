class Solution {

    public int method1(int[][] obstacleGrid) {
        int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
        for (int[] c : dp) {
            Arrays.fill(c, -1);
        }
        return helper(obstacleGrid, 0, 0, dp);
    }

    int helper(int[][] obstacleGrid, int i, int j, int[][] dp) {
        if (i == obstacleGrid.length - 1 && j == obstacleGrid[0].length - 1) {
            if (obstacleGrid[i][j] != 1) {
                return 1;
            } else {
                return 0;
            }
        }
        if (i >= obstacleGrid.length || j >= obstacleGrid[0].length) {
            return 0;
        }
        if (obstacleGrid[i][j] == 1) {
            return 0;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        int ways = dp[i][j] = helper(obstacleGrid, i, j + 1, dp) + helper(obstacleGrid, i + 1, j, dp);
        return ways;
    }
}
