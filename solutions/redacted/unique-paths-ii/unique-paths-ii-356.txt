class Solution {

    public static int method1(int[][] grid, int[][] dp) {
        int N = grid.length;
        int M = grid[0].length;
        int base = 0;
        dp[0][0] = 1;
        for (int i = 0; i < N; i++) {
            int rcall = 0;
            int dcall = 0;
            for (int j = 0; j < M; j++) {
                if (i == 0 && j == 0 && grid[i][j] != 1) {
                    dp[i][j] = 1;
                } else if (i == 0 && j == 0 && grid[i][j] == 1) {
                    dp[i][j] = 0;
                } else if (grid[i][j] == 1) {
                    base = -1;
                    dp[i][j] = 0;
                } else {
                    if (j >= 1) {
                        rcall = dp[i][j - 1];
                    }
                    if (i >= 1) {
                        dcall = dp[i - 1][j];
                    }
                    dp[i][j] = rcall + dcall;
                }
            }
        }
        return dp[N - 1][M - 1];
    }

    public int method2(int[][] obstacleGrid) {
        int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
        int var1 = method1(obstacleGrid, dp);
        return var1;
    }
}
