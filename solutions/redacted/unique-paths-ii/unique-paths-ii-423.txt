class Solution {

    public int method1(int[][] obstacleGrid) {
        int row = obstacleGrid.length;
        int col = obstacleGrid[0].length;
        if (obstacleGrid[0][0] == 1)
            return 0;
        int[][] dp = new int[row][col];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (i == 0 && j == 0)
                    dp[0][0] = 1;
                else if (obstacleGrid[i][j] == 1)
                    dp[i][j] = 0;
                else {
                    int temp = 0;
                    if (i > 0)
                        temp += dp[i - 1][j];
                    if (j > 0)
                        temp += dp[i][j - 1];
                    dp[i][j] = temp;
                }
            }
        }
        return dp[row - 1][col - 1];
    }

    public int helper(int[][] obstacleGrid, int row, int col, int[][] dp) {
        if (row < 0 || col < 0 || obstacleGrid[row][col] == 1)
            return 0;
        else if (row == 0 && col == 0)
            return 1;
        if (dp[row][col] != -1)
            return dp[row][col];
        int count = 0;
        count += helper(obstacleGrid, row - 1, col, dp);
        count += helper(obstacleGrid, row, col - 1, dp);
        dp[row][col] = count;
        return count;
    }
}
