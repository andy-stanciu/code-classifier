class Solution {

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        if (obstacleGrid[0][0] == 1)
            return 0;
        int[][] dP = new int[m][n];
        for (int i = 0; i < m; i++) {
            if (obstacleGrid[i][0] == 1) {
                //blocked cell
                while (i < m) {
                    dP[i][0] = 0;
                    i++;
                }
            } else {
                dP[i][0] = 1;
            }
        }
        for (int j = 0; j < n; j++) {
            if (obstacleGrid[0][j] == 1) {
                //blocked cell
                while (j < n) {
                    dP[0][j] = 0;
                    j++;
                }
            } else {
                dP[0][j] = 1;
            }
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (obstacleGrid[i][j] == 1) {
                    dP[i][j] = 0;
                } else {
                    dP[i][j] = dP[i - 1][j] + dP[i][j - 1];
                }
            }
        }
        return dP[m - 1][n - 1];
    }
}
