class Solution {

    public int method1(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        //if first or last cell has obstacle, then no path possible
        if (grid[m - 1][n - 1] == 1 || grid[0][0] == 1)
            return 0;
        int[][] dp = new int[m][n];
        dp[0][0] = 1;
        //first column
        for (int i = 1; i < m; i++) {
            //if this cell has no obstacle (grid[i][0] == 0)
            //and the cell above has path (dp[i-1][0] == 1)
            //then this cell has path too
            dp[i][0] = (dp[i - 1][0] == 1 && grid[i][0] == 0) ? 1 : 0;
        }
        //first row
        for (int j = 1; j < n; j++) {
            //if this cell has no obstacle (grid[0][j] == 0)
            //and the cell at left has path (dp[0][j-1] == 1)
            //then this cell has path too
            dp[0][j] = (dp[0][j - 1] == 1 && grid[0][j] == 0) ? 1 : 0;
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (grid[i][j] == 0)
                    //number of path to a cell = sum (""no. of path to above cell" and "no. of path to left cell"  )
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        return dp[m - 1][n - 1];
    }
}
