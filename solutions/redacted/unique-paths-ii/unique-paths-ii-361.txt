class Solution {

    public int solve(int[][] grid, int i, int j, int[][] dp) {
        if (i == grid.length - 1 && j == grid[0].length - 1) {
            return grid[i][j] == 0 ? 1 : 0;
        }
        if (i >= grid.length || j >= grid[0].length || grid[i][j] == 1) {
            return 0;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        int down = solve(grid, i + 1, j, dp);
        int right = solve(grid, i, j + 1, dp);
        return dp[i][j] = down + right;
    }

    public int method1(int[][] obstacleGrid) {
        int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
        for (int i = 0; i < dp.length; i++) {
            Arrays.fill(dp[i], -1);
        }
        return solve(obstacleGrid, 0, 0, dp);
    }
}
