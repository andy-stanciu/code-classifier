class Solution {

    public int helper(int[][] matrix, int n, int m, int[][] dp) {
        // if we reached at start then there exists the path
        if (n == 0 && m == 0 && matrix[n][m] == 0) {
            return 1;
        }
        // Boundary check conditions and obstacle check
        if (n < 0 || m < 0 || matrix[n][m] == 1) {
            return 0;
        }
        // If already computed then return that solution
        if (dp[n][m] != -1) {
            return dp[n][m];
        }
        int up = 0, left = 0;
        // Calculate up and left ways only if there is no obstacle
        if (matrix[n][m] == 0) {
            up = helper(matrix, n - 1, m, dp);
            left = helper(matrix, n, m - 1, dp);
        }
        // Store the total no of ways till that indices in dp[][]
        return dp[n][m] = up + left;
    }

    public int method1(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        if (matrix[n - 1][m - 1] == 1) {
            return 0;
        }
        int[][] dp = new int[n + 1][m + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return helper(matrix, n - 1, m - 1, dp);
    }
}
