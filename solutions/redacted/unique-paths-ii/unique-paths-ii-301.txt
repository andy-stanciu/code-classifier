class Solution {

    public int method1(int[][] obstacleGrid) {
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        int[][] dp = new int[n][m];
        // initializing first row and column with one as there is only one
        // way to reach them but if we reach an obstucle we stop as we can\'t
        // move in that direction
        for (int i = 0; i < n; i++) if (obstacleGrid[i][0] == 0)
            dp[i][0] = 1;
        else
            break;
        for (int i = 0; i < m; i++) if (obstacleGrid[0][i] == 0)
            dp[0][i] = 1;
        else
            break;
        // if the grid is obstucle we mark zero or else sum of top and left
        // grids is the current the no.of ways we can reach current grid
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                if (obstacleGrid[i][j] == 1)
                    dp[i][j] = 0;
                else
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        return dp[n - 1][m - 1];
    }
}
