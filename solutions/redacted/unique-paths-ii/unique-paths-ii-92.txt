class Solution {

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        for (int[] i : dp) {
            Arrays.fill(i, -1);
        }
        return helper(m - 1, n - 1, obstacleGrid, dp);
    }

    public int helper(int m, int n, int[][] obstacleGrid, int[][] dp) {
        if (m < 0 || n < 0)
            return 0;
        if (obstacleGrid[m][n] == 1)
            return 0;
        if (m == 0 && n == 0)
            return 1;
        if (dp[m][n] != -1)
            return dp[m][n];
        int x = helper(m - 1, n, obstacleGrid, dp);
        int y = helper(m, n - 1, obstacleGrid, dp);
        dp[m][n] = x + y;
        return x + y;
    }
}
