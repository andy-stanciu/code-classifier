class Solution {

    public int method1(int[][] Grid) {
        int[][] dp = new int[Grid.length][Grid[0].length];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        if (Grid[0][0] == 1) {
            return 0;
        }
        return getResult(0, 0, Grid.length, Grid[0].length, dp, Grid);
    }

    public int getResult(int x, int y, int m, int n, int[][] dp, int[][] Grid) {
        if (x == m - 1 && y == n - 1 && Grid[x][y] == 0) {
            return 1;
        }
        if (dp[x][y] != -1) {
            return dp[x][y];
        }
        int path = 0;
        if (y + 1 < n && Grid[x][y + 1] == 0) {
            path += getResult(x, y + 1, m, n, dp, Grid);
        }
        if (x + 1 < m && Grid[x + 1][y] == 0) {
            path += getResult(x + 1, y, m, n, dp, Grid);
        }
        dp[x][y] = path;
        return path;
    }
}
