class Solution {

    static int method1(int m, int n, int[][] dp, int[][] a) {
        if (m >= 0 && n >= 0 && a[m][n] == 1)
            return 0;
        if (m == 0 && n == 0)
            return 1;
        if (m < 0 || n < 0)
            return 0;
        if (dp[m][n] != -1)
            return dp[m][n];
        int up = method1(m - 1, n, dp, a);
        int down = method1(m, n - 1, dp, a);
        return dp[m][n] = up + down;
    }

    public int method2(int[][] obstacleGrid) {
        int m = obstacleGrid.length, n = obstacleGrid[0].length;
        // if(obstacleGrid[0][0]==1) return 0;
        int[][] dp = new int[m][n];
        for (int[] row : dp) Arrays.fill(row, -1);
        return method1(m - 1, n - 1, dp, obstacleGrid);
    }
}
