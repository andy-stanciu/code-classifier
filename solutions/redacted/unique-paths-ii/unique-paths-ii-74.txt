class Solution {

    int solve(int i, int j, int[][] obstacleGrid, int[][] dp) {
        int rows = obstacleGrid.length;
        int cols = obstacleGrid[0].length;
        if (i >= rows || j >= cols) {
            return 0;
        }
        if (obstacleGrid[i][j] == 1) {
            return 0;
        }
        if (i == rows - 1 && j == cols - 1) {
            return 1;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        int ans = 0;
        ans += solve(i + 1, j, obstacleGrid, dp) + solve(i, j + 1, obstacleGrid, dp);
        return dp[i][j] = ans;
    }

    public int method1(int[][] obstacleGrid) {
        int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
        for (int i = 0; i < obstacleGrid.length; i++) {
            Arrays.fill(dp[i], -1);
        }
        return solve(0, 0, obstacleGrid, dp);
    }
}
