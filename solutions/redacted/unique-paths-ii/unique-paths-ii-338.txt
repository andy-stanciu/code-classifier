class Solution {

    Integer[][] memo;

    int m, n;

    public int method1(int[][] obstacleGrid) {
        m = obstacleGrid.length;
        n = obstacleGrid[0].length;
        memo = new Integer[m + 1][n + 1];
        return method2(obstacleGrid, 0, 0);
    }

    public int method2(int[][] obstacleGrid, int row, int col) {
        if (row >= m || col >= n) {
            // if out of bounds, 0 ways.
            return 0;
        }
        if (obstacleGrid[row][col] == 1) {
            // if obstacle, 0 ways.
            return 0;
        }
        if (memo[row][col] != null) {
            return memo[row][col];
        }
        if (row == m - 1 && col == n - 1) {
            // if reached the last cell, found 1 way.
            return 1;
        }
        int totalWays = 0;
        int ifWeGoRight = method2(obstacleGrid, row, (col + 1));
        int ifWeGoDown = method2(obstacleGrid, (row + 1), col);
        totalWays += (ifWeGoRight + ifWeGoDown);
        memo[row][col] = totalWays;
        return memo[row][col];
    }
}
