class Solution {

    public int solve(int[][] obstacleGrid, int i, int j, int[][] dp) {
        if (i >= obstacleGrid.length || j >= obstacleGrid[0].length || obstacleGrid[i][j] == 1) {
            return 0;
        } else if (i == obstacleGrid.length - 1 && j == obstacleGrid[0].length - 1) {
            return 1;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        //int sum=0;
        int right = solve(obstacleGrid, i + 1, j, dp);
        int down = solve(obstacleGrid, i, j + 1, dp);
        dp[i][j] = right + down;
        return dp[i][j];
    }

    public int method1(int[][] obstacleGrid) {
        int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
        for (int i = 0; i < obstacleGrid.length; i++) {
            Arrays.fill(dp[i], -1);
        }
        return solve(obstacleGrid, 0, 0, dp);
    }
}
