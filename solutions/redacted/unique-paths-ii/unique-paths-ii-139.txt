class Solution {

    public int method1(int[][] obstacleGrid) {
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        int[][] dp = new int[n][m];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return method2(dp, obstacleGrid, n - 1, m - 1);
    }

    private int method2(int[][] dp, int[][] grid, int i, int j) {
        if (i >= 0 && j >= 0 && grid[i][j] == 1)
            return 0;
        if (i == 0 && j == 0)
            return 1;
        if (i < 0 || j < 0)
            return 0;
        if (dp[i][j] != -1)
            return dp[i][j];
        int up = method2(dp, grid, i - 1, j);
        int left = method2(dp, grid, i, j - 1);
        return dp[i][j] = up + left;
    }
}
