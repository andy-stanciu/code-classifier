class Solution {

    public int method1(int[][] obstacleGrid) {
        int[][] memo = new int[obstacleGrid.length][obstacleGrid[0].length];
        for (int[] m : memo) Arrays.fill(m, -1);
        return dfs(0, 0, obstacleGrid, memo);
    }

    public int dfs(int row, int col, int[][] obstacleGrid, int[][] memo) {
        boolean inbound = row >= 0 && row < obstacleGrid.length && col >= 0 && col < obstacleGrid[0].length;
        if (!inbound || obstacleGrid[row][col] == 1)
            return 0;
        // target
        if (row == obstacleGrid.length - 1 && col == obstacleGrid[0].length - 1)
            return 1;
        if (memo[row][col] != -1)
            return memo[row][col];
        int count = 0;
        for (int[] dir : new int[][] { { 0, 1 }, { 1, 0 } }) {
            count += dfs(row + dir[0], col + dir[1], obstacleGrid, memo);
        }
        memo[row][col] = count;
        return count;
    }
}
