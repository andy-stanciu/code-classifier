class Solution {

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        for (int[] rows : dp) Arrays.fill(rows, -1);
        return method2(m - 1, n - 1, dp, obstacleGrid);
    }

    private int method2(int m, int n, int[][] dp, int[][] obstacleGrid) {
        if (m == 0 && n == 0 && obstacleGrid[m][n] == 0)
            return 1;
        if (m < 0 || n < 0 || obstacleGrid[m][n] == 1)
            return 0;
        if (dp[m][n] != -1)
            return dp[m][n];
        return dp[m][n] = method2(m, n - 1, dp, obstacleGrid) + method2(m - 1, n, dp, obstacleGrid);
    }
}
