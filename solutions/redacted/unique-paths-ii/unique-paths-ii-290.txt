class Solution {

    public int method1(int[][] obstacleGrid) {
        int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return helper(obstacleGrid.length - 1, obstacleGrid[0].length - 1, obstacleGrid, dp);
    }

    private static int helper(int i, int j, int[][] Grid, int[][] dp) {
        if ((i >= 0 && j >= 0) && Grid[i][j] == 1) {
            return 0;
        } else {
            if (i == 0 && j == 0) {
                return 1;
            }
            if (i < 0 || j < 0) {
                return 0;
            }
            if (dp[i][j] != -1) {
                return dp[i][j];
            }
            int up = helper(i - 1, j, Grid, dp);
            int left = helper(i, j - 1, Grid, dp);
            dp[i][j] = up + left;
            return up + left;
        }
    }
}
