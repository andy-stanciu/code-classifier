class Solution {

    int n;

    int m;

    int[][] t = new int[101][101];

    public int solve(int i, int j, int[][] obstacleGrid) {
        if (i < 0 || i >= m || j < 0 || j >= n || obstacleGrid[i][j] == 1) {
            return 0;
        }
        if (t[i][j] != -1) {
            return t[i][j];
        }
        if (i == m - 1 && j == n - 1) {
            return 1;
        }
        int right = solve(i, j + 1, obstacleGrid);
        int down = solve(i + 1, j, obstacleGrid);
        return t[i][j] = right + down;
    }

    public int method1(int[][] obstacleGrid) {
        for (int[] row : t) {
            Arrays.fill(row, -1);
        }
        n = obstacleGrid[0].length;
        m = obstacleGrid.length;
        return solve(0, 0, obstacleGrid);
    }
}
