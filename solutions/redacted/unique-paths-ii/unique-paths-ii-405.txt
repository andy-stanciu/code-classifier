class Solution {

    public int method1(int[][] obstacleGrid) {
        int rows = obstacleGrid.length;
        int columns = obstacleGrid[0].length;
        if (obstacleGrid[rows - 1][columns - 1] == 1)
            return 0;
        int[][] dp = new int[rows][columns];
        for (int i = 0; i < dp.length; i++) {
            Arrays.fill(dp[i], -1);
        }
        return helper(0, 0, rows - 1, columns - 1, obstacleGrid, dp);
    }

    int helper(int startRow, int startCol, int endRow, int endCol, int[][] grid, int[][] dp) {
        if (startRow == endRow && startCol == endCol)
            return 1;
        if (startRow < 0 || startCol < 0 || startRow > endRow || startCol > endCol || grid[startRow][startCol] == 1)
            return 0;
        if (dp[startRow][startCol] != -1)
            return dp[startRow][startCol];
        //down
        int down = helper(startRow + 1, startCol, endRow, endCol, grid, dp);
        //right
        int right = helper(startRow, startCol + 1, endRow, endCol, grid, dp);
        return dp[startRow][startCol] = down + right;
    }
}
