class Solution {

    public int method1(int[][] obstacleGrid) {
        int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
        for (int i = 0; i < obstacleGrid.length; i++) Arrays.fill(dp[i], -1);
        return operations(0, 0, obstacleGrid, dp);
    }

    public static int operations(int row, int col, int[][] obstacleGrid, int[][] dp) {
        // base condition
        if (row >= obstacleGrid.length || col >= obstacleGrid[0].length || obstacleGrid[row][col] == 1)
            return 0;
        if (row == obstacleGrid.length - 1 && col == obstacleGrid[0].length - 1)
            return 1;
        if (dp[row][col] != -1)
            return dp[row][col];
        return dp[row][col] = operations(row + 1, col, obstacleGrid, dp) + operations(row, col + 1, obstacleGrid, dp);
    }
}
