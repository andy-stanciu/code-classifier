class Solution {

    public int dfs(int[][] arr, int i, int j, int[][] dp) {
        if (i >= arr.length || j >= arr[0].length || i < 0 || j < 0 || arr[i][j] == 1)
            return 0;
        if (i == arr.length - 1 && j == arr[0].length - 1) {
            return 1;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        int cal = 0;
        if (i < arr.length - 1 && arr[i + 1][j] != 1) {
            cal += dfs(arr, i + 1, j, dp);
        }
        if (j < arr[0].length - 1 && arr[i][j + 1] != 1) {
            cal += dfs(arr, i, j + 1, dp);
        }
        return dp[i][j] = cal;
    }

    public int method1(int[][] arr) {
        if (arr.length == 1 && arr[0].length == 1) {
            return arr[0][0] == 1 ? 0 : 1;
        }
        int[][] dp = new int[arr.length][arr[0].length];
        for (int[] i : dp) {
            Arrays.fill(i, -1);
        }
        return dfs(arr, 0, 0, dp);
    }
}
