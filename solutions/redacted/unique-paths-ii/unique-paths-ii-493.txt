class Solution {

    public int[][] memo;

    public int m;

    public int n;

    public int[][] dirs = new int[][] { { 0, 1 }, { 1, 0 } };

    public int method1(int[][] obstacleGrid) {
        m = obstacleGrid.length;
        n = obstacleGrid[0].length;
        memo = new int[m][n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(memo[i], -1);
        }
        return method2(obstacleGrid, 0, 0);
    }

    public int method2(int[][] grid, int i, int j) {
        if (grid[i][j] == 1) {
            return 0;
        }
        if (i == m - 1 && j == n - 1) {
            return 1;
        }
        if (i >= m || j >= n) {
            return 0;
        }
        if (memo[i][j] != -1) {
            return memo[i][j];
        }
        int res = 0;
        for (int[] dir : dirs) {
            int nextR = dir[0] + i;
            int nextC = dir[1] + j;
            if (nextR >= m || nextC >= n) {
                continue;
            }
            if (grid[nextR][nextC] == 1) {
                continue;
            }
            res += method2(grid, nextR, nextC);
        }
        memo[i][j] = res;
        return res;
    }
}
