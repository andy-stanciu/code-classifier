class Solution {

    public int method1(int[][] obstacleGrid) {
        int r = obstacleGrid.length;
        int c = obstacleGrid[0].length;
        if (c == 0 || r == 0)
            return 0;
        int[][] dp = new int[r][c];
        if (obstacleGrid[0][0] == 1) {
            // If the start has an obstacle, there\'s no way to start
            return 0;
        }
        dp[0][0] = 1;
        for (int i = 1; i < c; i++) {
            if (obstacleGrid[0][i] == 1) {
                // Obstacle found, no path can go through
                dp[0][i] = 0;
            } else {
                // Carry over the number of paths from the left
                dp[0][i] = dp[0][i - 1];
            }
        }
        for (int j = 1; j < r; j++) {
            if (obstacleGrid[j][0] == 1) {
                // Obstacle found, no path can go through
                dp[j][0] = 0;
            } else {
                // Carry over the number of paths from the left
                dp[j][0] = dp[j - 1][0];
            }
        }
        for (int i = 1; i < r; i++) {
            for (int j = 1; j < c; j++) {
                if (obstacleGrid[i][j] != 1) {
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                }
            }
        }
        return dp[r - 1][c - 1];
    }
}
