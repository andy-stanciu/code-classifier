class Solution {

    int m, n;

    int[][] dp;

    private int helper(int[][] grid, int row, int col) {
        if (row == m - 1 && col == n - 1 && grid[row][col] == 0) {
            return dp[row][col] = 1;
        }
        if (row >= m || col >= n || grid[row][col] == 1)
            return dp[row][col] = 0;
        if (dp[row][col] != -1)
            return dp[row][col];
        return dp[row][col] = helper(grid, row + 1, col) + helper(grid, row, col + 1);
    }

    public int method1(int[][] grid) {
        m = grid.length;
        n = grid[0].length;
        dp = new int[m + 1][n + 1];
        for (int i = 0; i <= m; i++) {
            Arrays.fill(dp[i], -1);
        }
        return helper(grid, 0, 0);
    }
}
