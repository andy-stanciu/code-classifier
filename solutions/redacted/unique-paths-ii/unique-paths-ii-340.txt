class Solution {

    //memoisation
    /* public int unique(int[][] arr, int i, int j, int[][] dp){
        if(i<0 || j<0) return 0;
        if(arr[i][j]==1) return 0;
        if(i==0 && j==0) return 1;
        if(dp[i][j]!=0){
            return dp[i][j];
        }
         int pick=unique(arr, i-1, j, dp);
           int notpick=unique(arr, i, j-1, dp);
        return dp[i][j]=pick+notpick;
    }
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int n=obstacleGrid.length;
        int m=obstacleGrid[0].length;
         if (obstacleGrid[0][0] == 1 || obstacleGrid[n - 1][m - 1] == 1) {
            return 0; 
        }
        
        int[][] dp = new int[n][m]; 
        return unique(obstacleGrid, n - 1, m - 1, dp);
    }*/
    //Tabulation
    public int method1(int[][] obstacleGrid) {
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        if (obstacleGrid[0][0] == 1 || obstacleGrid[n - 1][m - 1] == 1) {
            return 0;
        }
        int[][] dp = new int[n][m];
        dp[0][0] = 1;
        for (int j = 1; j < m; j++) {
            if (obstacleGrid[0][j] == 0) {
                dp[0][j] = dp[0][j - 1];
            }
        }
        for (int i = 1; i < n; i++) {
            if (obstacleGrid[i][0] == 0) {
                dp[i][0] = dp[i - 1][0];
            }
        }
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                if (obstacleGrid[i][j] == 0) {
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                }
            }
        }
        return dp[n - 1][m - 1];
    }
}
