class Solution {

    public int method1(int[][] obstacleGrid) {
        return findMem(obstacleGrid);
    }

    public int findMem(int[][] obs) {
        int[][] dp = new int[obs.length][obs[0].length];
        for (int[] ar : dp) {
            Arrays.fill(ar, -1);
        }
        return findSol(obs, 0, 0, dp);
    }

    public int findSol(int[][] obs, int row, int col, int[][] dp) {
        if (row >= obs.length || col >= obs[0].length)
            return 0;
        if (obs[row][col] == 1)
            return 0;
        if (row == obs.length - 1 && col == obs[0].length - 1) {
            return 1;
        }
        if (dp[row][col] != -1)
            return dp[row][col];
        int down = 0;
        int right = 0;
        down = findSol(obs, row + 1, col, dp);
        right = findSol(obs, row, col + 1, dp);
        return dp[row][col] = down + right;
    }
}
