class Solution {

    public int method1(int[][] obstacleGrid) {
        //Some comments to help understand the solution by Oussama :)
        int m = obstacleGrid.length, n = obstacleGrid[0].length;
        //if bottom right cell is an obstacle return 0
        if (obstacleGrid[m - 1][n - 1] == 1)
            return 0;
        int[] prevRow = new int[n];
        for (int i = m - 1; i >= 0; i--) {
            int[] curRow = new int[n];
            if (//No possible path from this cell
            obstacleGrid[i][n - 1] == 1 || (i < m - 1 && prevRow[n - 1] == 0))
                curRow[n - 1] = 0;
            else
                curRow[n - 1] = 1;
            for (int j = n - 2; j >= 0; j--) {
                if (//if current cell is not an obstacle
                obstacleGrid[i][j] != 1)
                    curRow[j] = curRow[j + 1] + prevRow[j];
            }
            prevRow = curRow;
        }
        return prevRow[0];
    }
}
