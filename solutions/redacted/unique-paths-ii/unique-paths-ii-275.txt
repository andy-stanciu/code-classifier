class Solution {

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m + 1][n + 1];
        for (int i = 0; i < dp.length; i++) {
            Arrays.fill(dp[i], -1);
        }
        return rec(obstacleGrid, 0, 0, m, n, dp);
    }

    public int rec(int[][] grid, int i, int j, int m, int n, int[][] dp) {
        if (i < 0 || j < 0 || i > m - 1 || j > n - 1 || grid[i][j] == 1) {
            return 0;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        if (i == m - 1 && j == n - 1) {
            dp[i][j] = 1;
            return dp[i][j];
        }
        int down = rec(grid, i + 1, j, m, n, dp);
        int right = rec(grid, i, j + 1, m, n, dp);
        dp[i][j] = down + right;
        return dp[i][j];
    }
}
