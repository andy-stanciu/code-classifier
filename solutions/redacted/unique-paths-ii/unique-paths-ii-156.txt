//better approch using dynamic Programming
class Solution {

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        if (obstacleGrid[0][0] == 1)
            return 0;
        obstacleGrid[0][0] = 1;
        //filling first row with the previous element ..ie if coorect path then 1 else 0
        for (int i = 1; i < m; i++) {
            if (obstacleGrid[i][0] == 1)
                obstacleGrid[i][0] = 0;
            else
                obstacleGrid[i][0] = obstacleGrid[i - 1][0];
        }
        //filling first column with the previous element ..ie if coorect path then 1 else 0
        for (int i = 1; i < n; i++) {
            if (obstacleGrid[0][i] == 1)
                obstacleGrid[0][i] = 0;
            else
                obstacleGrid[0][i] = obstacleGrid[0][i - 1];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (obstacleGrid[i][j] == 1)
                    obstacleGrid[i][j] = 0;
                else
                    obstacleGrid[i][j] = obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1];
            }
        }
        return obstacleGrid[m - 1][n - 1];
    }
}
//using backtracking
// class Solution {
//     public int uniquePathsWithObstacles(int[][] obstacleGrid) {
//         int m= obstacleGrid.length-1;
//         int n= obstacleGrid[0].length-1;
//         return count(obstacleGrid,0,0,m,n);
//     }
//     public static int count(int[][]obstacleGrid,int sr,int sc, int m, int n){
//         if(sr>m||sc>n||obstacleGrid[sr][sc]==1)return 0;
//         if (sr==m&&sc==n)return 1;
//         return count(obstacleGrid, sr+1,sc,m,n)+count(obstacleGrid, sr,sc+1,m,n);
//     }
// }
