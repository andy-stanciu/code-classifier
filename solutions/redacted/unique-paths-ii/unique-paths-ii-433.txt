class Solution {

    public int method1(int[][] obstacleGrid) {
        int row = obstacleGrid.length, col = obstacleGrid[0].length;
        // 2D dp defined...
        int[][] dp = new int[row][col];
        if (// If start index has an obstacle...
        obstacleGrid[0][0] == 1)
            return 0;
        // base case...
        dp[0][0] = 1;
        for (// setting the first row...
        // setting the first row...
        // setting the first row...
        int i = 1; i < row; i++) dp[i][0] = (obstacleGrid[i][0] == 0 && dp[i - 1][0] != 0) ? 1 : 0;
        for (// setting the first column...
        // setting the first column...
        // setting the first column...
        int j = 1; j < col; j++) dp[0][j] = (obstacleGrid[0][j] == 0 && dp[0][j - 1] != 0) ? 1 : 0;
        for (int i = 1; i < row; i++) {
            // Evaluating states of the grid via Tabulation...
            for (int j = 1; j < col; j++) {
                if (// If state is not obstacle...
                obstacleGrid[i][j] == 0)
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                else
                    // Otherwise, set the paths as zero, because we cannot reach the state...
                    dp[i][j] = 0;
            }
        }
        // The bottom right state stores the result...
        return dp[row - 1][col - 1];
    }
}
