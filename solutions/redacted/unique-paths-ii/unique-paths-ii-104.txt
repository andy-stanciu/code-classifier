class Solution {

    public static int memo(int[][] arr, int n, int m, int[][] dp) {
        if (n < 0 || m < 0 || arr[n][m] == 1)
            return 0;
        if (n == 0 && m == 0)
            return 1;
        if (dp[n][m] != -1)
            return dp[n][m];
        int up = memo(arr, n - 1, m, dp);
        int left = memo(arr, n, m - 1, dp);
        dp[n][m] = up + left;
        return dp[n][m];
    }

    public int method1(int[][] arr) {
        int n = arr.length;
        int m = arr[0].length;
        int[][] dp = new int[n][m];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        //return memo(arr,n-1,m-1,dp);
        dp[0][0] = (arr[0][0] == 1) ? 0 : 1;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (i == 0 && j == 0)
                    continue;
                if (arr[i][j] == 1) {
                    dp[i][j] = 0;
                } else {
                    int up = (i > 0) ? dp[i - 1][j] : 0;
                    int left = (j > 0) ? dp[i][j - 1] : 0;
                    dp[i][j] = up + left;
                }
            }
        }
        return dp[n - 1][m - 1];
    }
}
