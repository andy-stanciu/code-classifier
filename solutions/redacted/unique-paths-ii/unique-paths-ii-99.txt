class Solution {

    public int method1(int[][] obstacleGrid) {
        if (obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1] == 1) {
            return 0;
        }
        int[][] cache = createCache(obstacleGrid.length, obstacleGrid[0].length, -1);
        return visit(obstacleGrid, 0, 0, cache);
    }

    private int[][] createCache(int n, int m, int defaultValue) {
        int[][] cache = new int[n][m];
        for (int i = 0; i < cache.length; i++) {
            for (int j = 0; j < cache[i].length; j++) {
                cache[i][j] = defaultValue;
            }
        }
        return cache;
    }

    private int visit(int[][] obstacleGrid, int i, int j, int[][] cache) {
        if (i >= obstacleGrid.length || j >= obstacleGrid[0].length) {
            return 0;
        }
        if (cache[i][j] >= 0) {
            return cache[i][j];
        }
        if (i == obstacleGrid.length - 1 && j == obstacleGrid[i].length - 1) {
            return 1;
        }
        if (obstacleGrid[i][j] == 1) {
            return 0;
        }
        int result = visit(obstacleGrid, i + 1, j, cache) + visit(obstacleGrid, i, j + 1, cache);
        cache[i][j] = result;
        return result;
    }
}
