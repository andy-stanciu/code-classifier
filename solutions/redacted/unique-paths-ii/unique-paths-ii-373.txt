class Solution {

    public int method1(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[] memo = new int[m * n];
        Arrays.fill(memo, -1);
        return method2(grid, memo, m, n, m - 1, n - 1);
    }

    private static int method2(int[][] grid, int[] memo, int m, int n, int y, int x) {
        if (x == 0 && y == 0) {
            if (grid[0][0] == 1) {
                return 0;
            } else {
                return 1;
            }
        }
        if (grid[y][x] == 1) {
            return 0;
        }
        int memoIdx = y * n + x;
        int memoVal = memo[memoIdx];
        if (memoVal != -1) {
            return memoVal;
        }
        int result = 0;
        if (x > 0) {
            result += method2(grid, memo, m, n, y, x - 1);
        }
        if (y > 0) {
            result += method2(grid, memo, m, n, y - 1, x);
        }
        memo[memoIdx] = result;
        return result;
    }
}
