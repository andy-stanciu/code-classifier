class Solution {

    public int method1(int[][] obstacleGrid, int i, int j, int[][] dp) {
        // int mod=(int) (1e9+7);
        if (i < 0 || j < 0 || obstacleGrid[i][j] == 1) {
            return 0;
        }
        if (i == 0 && j == 0)
            return 1;
        if (dp[i][j] != -1)
            return dp[i][j];
        int up = method1(obstacleGrid, i - 1, j, dp);
        int left = method1(obstacleGrid, i, j - 1, dp);
        return dp[i][j] = (up + left);
    }

    public int method2(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        for (int[] i : dp) Arrays.fill(i, -1);
        return method1(obstacleGrid, m - 1, n - 1, dp);
    }
}
