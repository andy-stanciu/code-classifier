class Solution {

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        return method2(m, n, obstacleGrid);
    }

    public int method2(int m, int n, int[][] obstacleGrid) {
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(dp[i], -1);
        }
        return method3(0, 0, m, n, dp, obstacleGrid);
    }

    static int method3(int i, int j, int m, int n, int[][] dp, int[][] obstacleGrid) {
        if (i == m - 1 && j == n - 1 && obstacleGrid[i][j] != 1) {
            return 1;
        }
        if (i >= m || j >= n || obstacleGrid[i][j] == 1) {
            return 0;
        }
        if (dp[i][j] == -1) {
            int right = method3(i, j + 1, m, n, dp, obstacleGrid);
            int bottom = method3(i + 1, j, m, n, dp, obstacleGrid);
            dp[i][j] = bottom + right;
            return bottom + right;
        }
        return dp[i][j];
    }
}
