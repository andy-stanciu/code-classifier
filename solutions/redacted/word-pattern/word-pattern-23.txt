class Solution {

    public boolean method1(String param1, String s) {
        String[] var1 = s.split(" ");
        // base condition, if words length not equals to pattern length
        if (var1.length != param1.length())
            return false;
        // eg :- aaa != aa aa aa aa
        // this hashmap assign the characters with words
        Map<Character, String> map1 = new HashMap<>();
        // in this map we will mark the words as used
        Map<String, Boolean> map2 = new HashMap<>();
        for (int i = 0; i < param1.length(); i++) {
            char ch = param1.charAt(i);
            if (map1.containsKey(ch) == false) {
                // if the pattern character has not been mapped
                if (map2.containsKey(var1[i]) == true) {
                    // but the word which we will assign to i character has been used
                    // eg :- dog = a & now dog = b;
                    return false;
                } else {
                    // if the word has not been used;
                    // now mark it as used
                    map2.put(var1[i], true);
                    // and put that word infront of character
                    map1.put(ch, var1[i]);
                }
            } else {
                // if that character has already been mapped, now check with whom it has been mapped
                String mwith = map1.get(ch);
                // if mwith word is not equals to words[i], means already mapped with someone, then return false;
                // eg :- a = dog & now a = cat
                if (mwith.equals(var1[i]) == false)
                    return false;
            }
        }
        return true;
    }
}
