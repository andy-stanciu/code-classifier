class Solution {

    public boolean method1(String param1, String s) {
        String[] var1 = s.split(" ");
        // Check if pattern length matches the number of words in the string
        if (param1.length() != var1.length)
            return false;
        HashMap<Character, String> var2 = new HashMap<>();
        HashMap<String, Character> var3 = new HashMap<>();
        for (int i = 0; i < var1.length; i++) {
            char c = param1.charAt(i);
            String var4 = var1[i];
            // Check if there\'s a different word mapped to the current pattern character
            if (var2.containsKey(c) && !var2.get(c).equals(var4))
                return false;
            // Check if there\'s a different pattern character mapped to the current word
            if (var3.containsKey(var4) && var3.get(var4) != c)
                return false;
            // Map the pattern character to the word and the word to the character
            var2.put(c, var4);
            var3.put(var4, c);
        }
        return true;
    }
}
