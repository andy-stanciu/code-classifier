class Solution {

    public boolean method1(String param1, String s) {
        String[] newString = s.split(" ");
        HashMap<Character, String> map = new HashMap<Character, String>();
        //if string\'s word length is not equal to pattern length then return false
        if (newString.length != param1.length()) {
            return false;
        }
        //map a,b,c with newly created string "newString"
        for (int i = 0; i < param1.length(); i++) {
            char c = param1.charAt(i);
            if (map.containsKey(c)) {
                //if found equal in map and newString return false
                if (!map.get(c).equals(newString[i]))
                    return false;
            } else {
                // if it previously associated with any char in pattern return false
                if (map.containsValue(newString[i]))
                    return false;
                map.put(c, newString[i]);
            }
        }
        //if not then return true;
        return true;
    }
}
