class Solution {

    public boolean method1(String param1, String s) {
        HashMap<Character, String> ctos = new HashMap<>();
        HashMap<String, Character> stoc = new HashMap<>();
        String[] str = s.split(" ");
        if (str.length != param1.length())
            return false;
        for (int i = 0; i < str.length; i++) {
            String var1 = str[i];
            char ch = param1.charAt(i);
            if (!ctos.containsKey(ch)) {
                if (!stoc.containsKey(var1)) {
                    ctos.put(ch, var1);
                    stoc.put(var1, ch);
                } else
                    return false;
            } else {
                if (!stoc.containsKey(var1)) {
                    return false;
                }
                if (!var1.equals(ctos.get(ch)))
                    return false;
            }
        }
        return true;
    }
}
// class Solution {
//     public boolean wordPattern(String pattern, String s) {
//         HashMap<Character,String> hm = new HashMap<>();
//         HashMap<String,Character> mh = new HashMap<>();
//         String[] word = s.split(" ");
//         if(pattern.length()!=word.length)
//         return false;
//         for(int i=0;i<pattern.length();i++){
//             char ch = pattern.charAt(i);
//             String sub = word[i];
//             if(hm.containsKey(ch)){
//                 if(!sub.equals(hm.get(ch)))
//                 return false;
//             }
//             else if(mh.containsKey(sub)){
//                 if(ch != mh.get(sub))
//                 return false;
//             }
//             else
//             hm.put(ch,sub);
//             mh.put(sub,ch);
//         }
//         return true;
//     }
// }
