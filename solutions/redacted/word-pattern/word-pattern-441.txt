class Solution {

    public boolean method1(String param1, String s) {
        String[] var1 = s.split(" ");
        if (param1.length() != var1.length)
            return false;
        Map<Character, String> map = new HashMap<>();
        Set<String> seen = new HashSet<>();
        for (int i = 0; i < param1.length(); i++) {
            char c = param1.charAt(i);
            // Check if map contains the Character
            if (!map.containsKey(c)) {
                // if not contains check if current word is already mapped to another character
                if (seen.contains(var1[i]))
                    return false;
                // return false because the same word cannot be mapped to different characters in the pattern.
                // map the character to the word
                map.put(c, var1[i]);
                // add the word to set
                seen.add(var1[i]);
            } else {
                // if already present check if there is a existing mapping for the character is different from the current word at index i. If they are not equal, the method returns false.
                if (!map.get(c).equals(var1[i]))
                    return false;
            }
        }
        return true;
    }
}
