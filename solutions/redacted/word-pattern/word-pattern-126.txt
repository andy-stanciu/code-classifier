class Solution {

    public boolean method1(String param1, String s) {
        // Split the string into words
        String[] var1 = s.split(" ");
        // Check if the length of the pattern matches the number of words
        if (param1.length() != var1.length) {
            // Return false if lengths do not match
            return false;
        }
        // Map for pattern characters to words
        HashMap<Character, String> map1 = new HashMap<>();
        // Map for words to ensure uniqueness
        HashMap<String, Boolean> map2 = new HashMap<>();
        // Iterate through each character in the pattern
        for (int i = 0; i < param1.length(); i++) {
            // Get the current character from the pattern
            char ch = param1.charAt(i);
            // Get the corresponding word
            String sh = var1[i];
            // Check if the character is already mapped
            if (map1.containsKey(ch)) {
                // If it is, check if it maps to the same word
                if (!map1.get(ch).equals(sh)) {
                    // Return false if there is a mismatch
                    return false;
                }
            } else {
                // If the character is not mapped, check if the word is already used
                if (map2.containsKey(sh) && map2.get(sh)) {
                    // Return false if the word is already mapped to another character
                    return false;
                }
            }
            // Map the character to the word and mark the word as used
            map1.put(ch, sh);
            map2.put(sh, true);
        }
        // Return true if the pattern matches the string
        return true;
    }
}
