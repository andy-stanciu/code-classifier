class Solution {

    public boolean method1(String param1, String s) {
        // HashMap to map pattern characters to words
        HashMap<Character, String> hm = new HashMap<>();
        // Reverse HashMap to map words to pattern characters
        HashMap<String, Character> hmRev = new HashMap<>();
        // Split the string s into words
        String[] var1 = s.split(" ");
        // If the length of the pattern and the number of words don\'t match, return false
        if (var1.length != param1.length()) {
            return false;
        }
        // Iterate over the characters in the pattern and words in the string
        for (int i = 0; i < var1.length; i++) {
            char currentChar = param1.charAt(i);
            String var2 = var1[i];
            // If the character exists in the HashMap, check if it matches the current word
            if (hm.containsKey(currentChar)) {
                if (!hm.get(currentChar).equals(var2)) {
                    // If it doesn\'t match, return false
                    return false;
                }
            } else {
                // If the word is already mapped to another character, return false
                if (hmRev.containsKey(var2)) {
                    return false;
                }
                // Create new mappings in both hashmaps
                hm.put(currentChar, var2);
                hmRev.put(var2, currentChar);
            }
        }
        // If no conflicts were found, the pattern matches the string
        return true;
    }
}
