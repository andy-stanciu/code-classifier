/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int method1(TreeNode root) {
        // This function starts the recursion from the root node
        return method1(root, false);
    }

    private int method1(TreeNode node, boolean param1) {
        if (node == null) {
            // If the node is null, return 0 as there are no leaves
            return 0;
        }
        if (node.left == null && node.right == null) {
            // Check if the node is a leaf node
            if (param1) {
                // If it\'s a left leaf, return its value
                return node.val;
            } else {
                // If it\'s not a left leaf, return 0
                return 0;
            }
        }
        // Recursively call for both children
        // For the left child, pass true because it\'s a left node
        // For the right child, pass false because it\'s a right node
        return method1(node.left, true) + method1(node.right, false);
    }
}
