//Brute Force
//TC - O(n) where n is the total number of nodes in tree.
//SC - O(n) where n number of nodes in each level.
class Solution {

    public int method1(TreeNode root) {
        int var1 = helper(root);
        return var1;
    }

    public int helper(TreeNode node) {
        //Breadth First Traversal
        //To store each level
        Queue<TreeNode> q = new LinkedList<>();
        //pushing the left and right nodes of the root node.
        q.offer(node.left);
        q.offer(node.right);
        int var1 = 0;
        //Iteration till the queue becomes empty.
        while (!q.isEmpty()) {
            TreeNode var2 = q.poll();
            TreeNode rightN = q.poll();
            //If both the nodes are null, then skip the iteration.
            if (var2 == null && rightN == null) {
                // System.out.println("continue");
                continue;
            }
            // System.out.println("leftN " + leftN.val + " RightN " + rightN.val);
            //Check if the left node if the leaf node. If yes, then add it into the sum variable.
            if (var2 != null && var2.left == null && var2.right == null) {
                var1 += var2.val;
                // System.out.println("sum " + sum);
            }
            //Pushing nodes into the queue in the below order.
            if (var2 != null) {
                q.offer(var2.left);
                q.offer(var2.right);
            }
            if (rightN != null) {
                q.offer(rightN.left);
                q.offer(rightN.right);
            }
            // System.out.println(q.toString());
        }
        return var1;
    }
}
