/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int method1(TreeNode root) {
        if (// If the root is null, there are no left leaves, so return 0.
        root == null)
            return 0;
        int var1 = 0;
        // Check if the left child of the current node is a leaf node.
        if (root.left != null && root.left.left == null && root.left.right == null) {
            // If the left child is a leaf, add its value to the sum.
            var1 += root.left.val;
        }
        // Recursively traverse the left and right subtrees.
        // Traverse left subtree
        var1 += method1(root.left);
        // Traverse right subtree
        var1 += method1(root.right);
        return var1;
    }
}
