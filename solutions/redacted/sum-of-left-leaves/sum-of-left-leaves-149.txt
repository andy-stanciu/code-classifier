/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//Optimized
//TC - O(n); n - Number of nodes in the tree.
//SC - O(h); h - height of the tree.
class Solution {

    public int method1(TreeNode root) {
        int var1 = helper(root);
        return var1;
    }

    public int helper(TreeNode node) {
        int var1 = 0;
        //Base Case
        if (node == null || (node.left == null && node.right == null)) {
            return var1;
        }
        //Adding the left leaf node value to the sum if the below condition satisfies.
        if (node.left != null && node.left.left == null && node.left.right == null) {
            var1 = var1 + node.left.val;
        }
        //Performing the Post Order Traversal.
        // Asking the recursion to find the left leaf node values and adding them into my overall sum.
        var1 = var1 + helper(node.left);
        // Asking Recursion to find more left leaf node and return the values.
        var1 = var1 + helper(node.right);
        return var1;
    }
}
