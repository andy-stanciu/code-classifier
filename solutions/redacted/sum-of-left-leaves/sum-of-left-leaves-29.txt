/**
 * BFS Iterative
 *
 * Time Complexity: O(N). All nodes will be visited.
 *
 * Space Complexity: O(Width of the tree)
 * In case of a complete tree the width can be N/2. Thus worst case complexity = O(N)
 *
 * N = Number of nodes.
 */
class Solution {

    public int method1(TreeNode root) {
        if (root == null) {
            return 0;
        }
        // In this solution we will also save if the node is a left node or not.
        Queue<Pair<TreeNode, Boolean>> queue = new LinkedList<>();
        queue.offer(new Pair<>(root, false));
        int result = 0;
        while (!queue.isEmpty()) {
            Pair<TreeNode, Boolean> cur = queue.poll();
            TreeNode node = cur.getKey();
            boolean var1 = cur.getValue();
            if (var1 && node.left == null && node.right == null) {
                result += node.val;
                continue;
            }
            if (node.left != null) {
                queue.offer(new Pair<>(node.left, true));
            }
            if (node.right != null) {
                queue.offer(new Pair<>(node.right, false));
            }
        }
        return result;
    }
}
