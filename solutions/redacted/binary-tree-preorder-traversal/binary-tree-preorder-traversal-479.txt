class Solution {

    public List<Integer> method1(TreeNode root) {
        //Recursive
        return method3(root);
        //Iterative
        //return callPreOrderIterative(root);
    }

    private List<Integer> method2(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        if (root == null)
            return result;
        stack.push(root);
        while (!stack.isEmpty()) {
            TreeNode current = stack.pop();
            if (current.right != null)
                stack.push(current.right);
            if (current.left != null)
                stack.push(current.left);
            result.add(current.val);
        }
        return result;
    }

    //Recursive
    private List<Integer> method3(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        method4(root, list);
        return list;
    }

    //preorder Root->Left->Right Recursive
    private void method4(TreeNode root, List<Integer> list) {
        if (root == null)
            return;
        list.add(root.val);
        method4(root.left, list);
        method4(root.right, list);
    }
    //Iterative
}
