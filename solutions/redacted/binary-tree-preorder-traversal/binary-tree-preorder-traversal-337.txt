/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    // List<Integer> result = new ArrayList<>();
    public List<Integer> method1(TreeNode root) {
        // Using Stack-----------------------------
        List<Integer> result = new ArrayList<>();
        if (root == null)
            return result;
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while (!stack.isEmpty()) {
            root = stack.peek();
            result.add(root.val);
            stack.pop();
            if (root.right != null) {
                stack.push(root.right);
            }
            if (root.left != null) {
                stack.push(root.left);
            }
        }
        return result;
        // ---------------------------------------STACK --------------------
        // preOrder(root);
        // return result;
    }
    // Using recursion
    // Root->Left->Right
    // public void preOrder(TreeNode node) {
    // if (node == null)
    // return;
    // result.add(node.val);
    // preOrder(node.left);
    // preOrder(node.right);
    // }
}
