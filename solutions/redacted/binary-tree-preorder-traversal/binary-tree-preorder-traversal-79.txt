class Solution {

    public List<Integer> method1(TreeNode root) {
        // METHOD 1 - Recursive Solution
        // List<Integer> list = new ArrayList<>();
        // if(root == null){
        //     return list;
        // }
        // list.add(root.val);
        // List<Integer> list_left = preorderTraversal(root.left);
        // list.addAll(list_left);
        // List<Integer> list_right = preorderTraversal(root.right);
        // list.addAll(list_right);
        // return list;
        //METHOD 2 - Iterative solution (using a Stack -> LIFO)
        //a new stack is created
        Stack<TreeNode> st = new Stack<>();
        //this is the ans list
        List<Integer> list = new ArrayList<>();
        if (root == null) {
            return list;
        }
        //now we have pushed the root node in the stack
        st.push(root);
        while (!st.isEmpty()) {
            //we just have to pop the peek element each time in the stack and we first push its right node and then its left node in the stack.Then again pop the peek element in the next iteration
            TreeNode node = new TreeNode();
            node = st.pop();
            list.add(node.val);
            if (node.right != null) {
                st.push(node.right);
            }
            if (node.left != null) {
                st.push(node.left);
            }
        }
        return list;
    }
}
