/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Integer> method1(TreeNode root) {
        //method 1 USING RECURSION
        /*
        List<Integer> ans = new ArrayList<>();
        preorder(root,ans);
        return ans;
        */
        //METHOD 2 iterative way using stack
        Stack<TreeNode> var1 = new Stack<>();
        List<Integer> res = new ArrayList<>();
        var1.add(root);
        if (root == null)
            return res;
        while (!var1.isEmpty()) {
            TreeNode top = var1.pop();
            if (top != null)
                res.add(top.val);
            if (top.right != null)
                var1.add(top.right);
            if (top.left != null)
                var1.add(top.left);
        }
        return res;
    }
    /*
    private static void preorder(TreeNode root,List<Integer> ans)
    {
        if(root == null)
            return ;
        ans.add(root.val);
        preorder(root.left,ans);
        preorder(root.right,ans);
    }
    */
}
