/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean method1(TreeNode root, int param1) {
        // corner case:
        if (root == null) {
            return false;
        }
        // solution: recursion, find path sum from root to child,
        // if == targetSum return true
        int var1 = root.val;
        return method2(root, param1, var1);
    }

    private boolean method2(TreeNode root, int param1, int var1) {
        if (root.left == null && root.right == null && var1 == param1) {
            return true;
        }
        // return if root has a path that the sum == targetSum
        if (root.left != null) {
            var1 = var1 + root.left.val;
            if (method2(root.left, param1, var1)) {
                return true;
            }
            var1 = var1 - root.left.val;
        }
        if (root.right != null) {
            var1 = var1 + root.right.val;
            if (method2(root.right, param1, var1)) {
                return true;
            }
        }
        return false;
    }
}
