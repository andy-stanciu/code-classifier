/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean method1(TreeNode root, int param1) {
        if (root == null)
            return false;
        return dfs(root, param1);
    }

    public boolean dfs(TreeNode node, int param1) {
        // Subtract the current node\'s value from targetSum
        param1 -= node.val;
        // If it\'s a leaf node, check if the remaining targetSum is zero
        if (node.left == null && node.right == null) {
            return param1 == 0;
        }
        // Recursively check the left and right subtrees
        if (node.left != null && dfs(node.left, param1)) {
            // Found a valid path in the left subtree
            return true;
        }
        if (node.right != null && dfs(node.right, param1)) {
            // Found a valid path in the right subtree
            return true;
        }
        // If no valid path is found in either subtree
        return false;
    }
}
