/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean method1(TreeNode root, int param1) {
        if (root == null) {
            return false;
        } else {
            return depthFirstSearch(root, 0, param1);
        }
    }

    public boolean depthFirstSearch(TreeNode node, int param2, int param1) {
        //add treenode value to cumulativeSum
        param2 += node.val;
        //if we reach an end node return true if targetSum has been reached after cumulativley adding sums otherwise return false
        if (node.left == null && node.right == null) {
            return param2 == param1;
        } else {
            boolean var1 = false;
            boolean var2 = false;
            //check left subtree if targetSum is found
            if (node.left != null) {
                var1 = depthFirstSearch(node.left, param2, param1);
            }
            //check right subtree if targetSum is found
            if (node.right != null) {
                var2 = depthFirstSearch(node.right, param2, param1);
            }
            //if targetSum was found in either tree return true, otherwise return false
            return var1 || var2;
        }
    }
}
