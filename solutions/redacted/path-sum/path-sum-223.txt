/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean method1(TreeNode root, int param1) {
        if (root == null) {
            return false;
        }
        param1 = param1 - root.val;
        if (root.left == null && root.right == null) {
            return param1 == 0;
        }
        return method1(root.left, param1) || method1(root.right, param1);
        // if(root == null){
        //     return false;
        // }
        // Stack<TreeNode> nodes = new Stack<>();
        // Stack<Integer> sum = new Stack<>();
        // nodes.push(root);
        // sum.push(root.val);
        // while(!nodes.isEmpty()){
        //     TreeNode tempNode = nodes.pop();
        //     int tempSum = sum.pop();
        //     if(tempNode.left == null && tempNode.right == null && tempSum == targetSum){
        //         return true;
        //     }
        //     if(tempNode.right != null){
        //         nodes.push(tempNode.right);
        //         sum.push(tempNode.right.val + tempSum );
        //     }
        //     if(tempNode.left != null){
        //         nodes.push(tempNode.left);
        //         sum.push(tempNode.left.val + tempSum);
        //     }
        // }
        // return false;
    }
}
