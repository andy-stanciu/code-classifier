/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean method1(TreeNode root, int param1) {
        if (//base case
        root == null)
            return false;
        //storing nodes
        Stack<TreeNode> var1 = new Stack<>();
        //storing cumulative sum of values from root to the current node
        Stack<Integer> var2 = new Stack<>();
        var1.add(root);
        var2.add(root.val);
        while (!var1.isEmpty()) {
            TreeNode curr = var1.pop();
            int currVal = var2.pop();
            if (//if the current node is a leaf and the path sum equals the target sum, return true
            curr.left == null && curr.right == null && currVal == param1)
                return true;
            if (curr.left != null) {
                //add left chid and its path sum
                var1.add(curr.left);
                var2.add(currVal + curr.left.val);
            }
            if (curr.right != null) {
                //add right chid and its path sum
                var1.add(curr.right);
                var2.add(currVal + curr.right.val);
            }
        }
        //if no path is found whose sum matches the targetSum, return false
        return false;
    }
}
