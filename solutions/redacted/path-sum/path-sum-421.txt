/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean method1(TreeNode node, int param1) {
        if (node == null)
            return false;
        boolean ans = false;
        int var1 = param1 - node.val;
        if (var1 == 0 && node.left == null && node.right == null)
            return (ans = true);
        if (node.left != null)
            // ans || hasPathSum... has no utility if the
            // ans is false
            ans = ans || method1(node.left, var1);
        if (node.right != null)
            // But if it is true then we can avoid calling
            // hasPathSum here as answer has already been
            // found
            ans = ans || method1(node.right, var1);
        return (ans);
    }
}
