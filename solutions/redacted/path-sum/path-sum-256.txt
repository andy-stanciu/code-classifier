/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean method1(TreeNode root, int param1) {
        return usignLevelOrder(root, param1);
    }

    boolean usignLevelOrder(TreeNode root, int param1) {
        if (root == null) {
            return false;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        Queue<Integer> var1 = new LinkedList<>();
        queue.add(root);
        var1.add(root.val);
        while (!queue.isEmpty()) {
            TreeNode currNode = queue.remove();
            Integer var2 = var1.remove();
            if (currNode.left == null && currNode.right == null) {
                if (var2 == param1) {
                    return true;
                }
            }
            if (currNode.left != null) {
                queue.add(currNode.left);
                var1.add(var2 + currNode.left.val);
            }
            if (currNode.right != null) {
                queue.add(currNode.right);
                var1.add(var2 + currNode.right.val);
            }
        }
        return false;
    }
}
