/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean method1(TreeNode root, int param1) {
        if (root == null)
            return false;
        return method2(root, 0, param1);
    }

    private boolean method2(TreeNode node, int param2, int param1) {
        // If the current node is null, we return false
        if (node == null)
            return false;
        // Calculate the sum up to this node
        param2 += node.val;
        // If we\'ve reached a leaf node, check if the current sum equals the target sum
        if (node.left == null && node.right == null) {
            return param2 == param1;
        }
        // Recursively check the left and right subtrees
        return method2(node.left, param2, param1) || method2(node.right, param2, param1);
    }
}
