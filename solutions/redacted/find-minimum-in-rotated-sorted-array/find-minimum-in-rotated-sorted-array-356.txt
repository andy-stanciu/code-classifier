//so initially i read the question so i found that it is atleast rotated for one time
//so therefore i got thought that so the minimum lies in the right side of the array of the sorted part
//therefore i took the binarysearch mid compared with high\'s if sorted not found i incremented the low pointer towards mid\'s
// after finding the sorted array the mid may not be the optimal solution
//so i decremented the high in left side . till the initial of the sorted array (that will be the minimum)
// but in this apporach the mid may point to the right sorted part therefore i took the minimum if the mid and high equal in right sorted the ans should always took the minimum of the array.
class Solution {

    public int method1(int[] nums) {
        int low = 0;
        int high = nums.length - 1;
        int ans = Integer.MAX_VALUE;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] > nums[high]) {
                low = mid + 1;
            } else if (nums[mid] <= nums[high]) {
                ans = Math.min(ans, nums[mid]);
                high = mid - 1;
            }
        }
        return ans;
    }
}
