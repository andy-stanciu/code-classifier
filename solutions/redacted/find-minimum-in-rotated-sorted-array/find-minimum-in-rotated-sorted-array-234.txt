class Solution {

    public int method1(int[] nums) {
        if (nums == null || nums.length == 0)
            return -1;
        int left = 0;
        int right = nums.length - 1;
        int ans = Integer.MAX_VALUE;
        while (left <= right) {
            // Check if the array is already sorted (non-rotated portion)
            if (nums[left] <= nums[right]) {
                ans = Math.min(ans, nums[left]);
                break;
            }
            int mid = left + (right - left) / 2;
            // Left side is sorted
            if (nums[left] <= nums[mid]) {
                ans = Math.min(ans, nums[left]);
                // The minimum is in the right half
                left = mid + 1;
            } else // Right side is sorted
            {
                ans = Math.min(ans, nums[mid]);
                // The minimum is in the left half
                right = mid - 1;
            }
        }
        // Return the minimum value found
        return ans;
    }
}
