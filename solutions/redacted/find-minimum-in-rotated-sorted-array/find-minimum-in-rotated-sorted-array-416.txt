class Solution {

    public int method1(int[] nums) {
        //obv this question can be solved by simple for loop
        //but using binary search method for O(log n) time complexity
        int n = nums.length;
        int low = 0;
        int high = n - 1;
        int ans = Integer.MAX_VALUE;
        while (low <= high) {
            int mid = (low + high) / 2;
            // checking if left half is sorted
            if (nums[low] <= nums[mid]) {
                // if the left half is sorted then lowest elem will be at first idx
                ans = Math.min(ans, nums[low]);
                // took the lowest and now removing the left half
                low = mid + 1;
            } else // if right half is sorted then...
            {
                // lowest elem in the sorted right half will me first elem that is mid
                ans = Math.min(ans, nums[mid]);
                // took the lowest element and now removing the right half
                high = mid - 1;
            }
        }
        return ans;
    }
}
