class Solution {

    public int method1(int[] nums) {
        /*
        //Approach1: Using sorting
        Arrays.sort(nums);
        return nums[0];
        */
        //Approach2
        int var1 = nums[0];
        for (int i = 1; i < nums.length; i++) {
            var1 = Math.var1(var1, nums[i]);
        }
        return var1;
        //Approach3(Optimized)
        // Using Binary Search Algorithm, T.C: O(logn), S.C: O(1)
        int res = nums[0];
        int left = 0, right = nums.length - 1;
        //traverse
        while (left <= right) {
            //how we know the res
            if (nums[left] < nums[right]) {
                res = Math.var1(res, nums[left]);
                break;
            }
            int mid = (left + right) / 2;
            res = Math.var1(res, nums[mid]);
            if (nums[mid] >= nums[left]) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return res;
    }
}
