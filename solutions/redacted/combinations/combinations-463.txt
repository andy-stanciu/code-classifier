class Solution {

    public List<List<Integer>> combine(int n, int k) {
        //Using recursion TC-O(n ^ 2).SC-O(n)
        List<List<Integer>> list = new ArrayList<>();
        //wanted 1 to n
        helperCombine(1, n, k, list, new ArrayList<>());
        return list;
    }

    private void helperCombine(int i, int n, int k, List<List<Integer>> list, List<Integer> temp) {
        if (k == 0) {
            //add in the main list
            list.add(new ArrayList<>(temp));
            return;
        }
        if (k > n - i + 1) {
            //if my remainig elements are less then k then there is no chnace of generating k size subset so return.
            return;
        }
        if (i > n) {
            return;
        }
        //for taking the number
        temp.add(i);
        helperCombine(i + 1, n, k - 1, list, temp);
        //for not taking the number
        temp.remove(temp.size() - 1);
        helperCombine(i + 1, n, k, list, temp);
    }
}
