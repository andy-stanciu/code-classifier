class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> curr = new ArrayList<>();
        helper(n, k, 1, res, curr);
        return res;
    }

    void helper(int n, int k, int index, List<List<Integer>> res, List<Integer> curr) {
        // so now here
        if (k == 0) {
            // so now here we have to add it in the new list here
            res.add(new ArrayList<>(curr));
            return;
        }
        if (k < 0) {
            return;
        }
        // so now here otherwise we have to run the recursion call here
        for (int i = index; i <= n; i++) {
            // so now her we have to add the number in the list here
            curr.add(i);
            // so now here calling the helper here
            helper(n, k - 1, i + 1, res, curr);
            // so now here the backtraking here
            curr.remove(curr.size() - 1);
        }
    }
}
