class Solution {

    private void solveRecBacktracking(int n, int k, int idx, List<List<Integer>> ans, List<Integer> list) {
        // Base or Cornor Case
        if (k == 0) {
            ans.add(new ArrayList<>(list));
            return;
        }
        if (idx > n)
            return;
        // Not Including the Number...
        solveRecBacktracking(n, k, idx + 1, ans, list);
        // Including the Number...
        list.add(idx);
        solveRecBacktracking(n, k - 1, idx + 1, ans, list);
        list.remove(list.size() - 1);
    }

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> ans = new ArrayList<>();
        solveRecBacktracking(n, k, 1, ans, new ArrayList<>());
        return ans;
    }
}
