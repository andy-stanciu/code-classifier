class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> outer = new ArrayList<>();
        List<Integer> inner = new ArrayList<>();
        solve(1, n, k, outer, inner);
        return outer;
    }

    private void solve(int n1, int n, int k, List<List<Integer>> outer, List<Integer> inner) {
        if (n1 > n + 1) {
            // Base condition
            return;
        }
        if (inner.size() == k) {
            //check if inner list is equal to size k=2 ex[1,2] which is size of 2.
            //add the innre arrayList in outer
            outer.add(new ArrayList(inner));
            return;
        }
        inner.add(n1);
        solve(n1 + 1, n, k, outer, inner);
        // this is a backtrack line
        inner.remove(inner.size() - 1);
        solve(n1 + 1, n, k, outer, inner);
    }
}
