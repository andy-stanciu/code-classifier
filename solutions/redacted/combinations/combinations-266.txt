class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<>(), 1, n, k);
        return result;
    }

    public void backtrack(List<List<Integer>> result, List<Integer> comb, int start, int n, int k) {
        if (comb.size() == k) {
            // Add the valid combination to the result
            result.add(new ArrayList<>(comb));
            return;
        }
        for (int i = start; i <= n; i++) {
            // Include the current element in the combination
            comb.add(i);
            // Recur with the next index
            backtrack(result, comb, i + 1, n, k);
            // Backtrack by removing the last element
            comb.remove(comb.size() - 1);
        }
    }
}
