class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<>();
        recurse(n, k, 1, new LinkedList<>(), new boolean[n + 1], result);
        return result;
    }

    private void recurse(int n, int k, int start, List<Integer> combination, boolean[] chosen, List<List<Integer>> result) {
        if (k == 0) {
            result.add(new ArrayList<>(combination));
            return;
        }
        if (start > n)
            return;
        for (int i = start; i <= n; i++) {
            if (chosen[i])
                continue;
            combination.add(i);
            chosen[i] = true;
            recurse(n, k - 1, i + 1, combination, chosen, result);
            chosen[i] = false;
            combination.remove(combination.size() - 1);
        }
    }
}
