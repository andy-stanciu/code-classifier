class Solution {

    public List<List<Integer>> combine(int n, int k) {
        Set<List<Integer>> ans = new HashSet<>();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = i + 1;
        }
        List<Integer> temp = new ArrayList<>();
        backtrack(nums, temp, 0, ans, k);
        return new ArrayList<>(ans);
    }

    public void backtrack(int[] nums, List<Integer> temp, int index, Set<List<Integer>> ans, int k) {
        for (int i = index; i < nums.length; i++) {
            temp.add(nums[i]);
            backtrack(nums, temp, i + 1, ans, k);
            if (temp.size() == k) {
                ans.add(new ArrayList<>(temp));
            }
            temp.remove(temp.size() - 1);
        }
    }
}
