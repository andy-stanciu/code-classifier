class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<>(), 1, n, k);
        return result;
    }

    private void backtrack(List<List<Integer>> result, List<Integer> combination, int start, int n, int k) {
        // If the combination is complete, add it to the result list
        if (combination.size() == k) {
            result.add(new ArrayList<>(combination));
            return;
        }
        // Explore each possible number to be added to the combination
        for (int i = start; i <= n; i++) {
            // Add number to the current combination
            combination.add(i);
            // Recur with the next number
            backtrack(result, combination, i + 1, n, k);
            // Backtrack to explore other possibilities
            combination.remove(combination.size() - 1);
        }
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        System.out.println(solution.combine(4, 2));
        // Output: [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]
    }
}
