class Solution {

    public List<List<Integer>> combine(int n, int k) {
        ArrayList<Integer> ds = new ArrayList<>();
        List<List<Integer>> ans = new ArrayList<>();
        // start from 1 instead of 0
        helper(n, k, 1, ds, ans);
        return ans;
    }

    public void helper(int n, int k, int start, ArrayList<Integer> ds, List<List<Integer>> ans) {
        if (ds.size() == k) {
            // add a base case to terminate recursion when the list size reaches k
            ans.add(new ArrayList<>(ds));
            return;
        }
        for (int i = start; i <= n; i++) {
            // add the actual value i to the list instead of the index
            ds.add(i);
            // increment start to i + 1 to avoid duplicates
            helper(n, k, i + 1, ds, ans);
            // remove the last element to backtrack
            ds.remove(ds.size() - 1);
        }
    }
}
