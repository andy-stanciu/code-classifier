class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> comb = new ArrayList<>();
        backTrack(res, comb, 1, k, n);
        return res;
    }

    private void backTrack(List<List<Integer>> res, List<Integer> comb, int start, int k, int n) {
        if (comb.size() == k) {
            res.add(new ArrayList<>(comb));
            return;
        }
        for (int i = start; i <= n; i++) {
            comb.add(i);
            backTrack(res, comb, i + 1, k, n);
            comb.remove(comb.size() - 1);
        }
    }
}
