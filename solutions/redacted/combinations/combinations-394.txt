class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> ans = new LinkedList<List<Integer>>();
        // Base case: If k is 0, add an empty combination to the result and return
        if (k == 0) {
            ans.add(new LinkedList<Integer>());
            return ans;
        }
        // Iterate from n to 1, generating combinations recursively
        for (int i = n; i > 0; --i) {
            // Recursively generate combinations of size k-1 from remaining numbers [1, i-1]
            for (var x : combine(i - 1, k - 1)) {
                // Append \'i\' to the generated combination and add it to the result
                x.add(i);
                ans.add(x);
            }
        }
        // Return the list of all combinations
        return ans;
    }
}
