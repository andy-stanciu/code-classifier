class Solution {

    List<List<Integer>> result = new ArrayList<>();

    public List<List<Integer>> combine(int n, int k) {
        backtrack(new ArrayList<>(), 1, n, k);
        return result;
    }

    private void backtrack(List<Integer> currComb, int start, int n, int k) {
        if (currComb.size() == k) {
            result.add(new ArrayList<>(currComb));
            return;
        }
        for (int i = start; i <= n; i++) {
            currComb.add(i);
            backtrack(currComb, i + 1, n, k);
            // removes the last element
            currComb.remove(currComb.size() - 1);
            // to backtrack to previous state
            // & continue the loop
        }
    }
}
