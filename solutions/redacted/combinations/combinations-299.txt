class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> currCombines = new ArrayList<>();
        backtrack(1, n, k, ans, currCombines);
        return ans;
    }

    private void backtrack(int start, int end, int k, List<List<Integer>> ans, List<Integer> currCombines) {
        if (currCombines.size() == k) {
            ans.add(new ArrayList<Integer>(currCombines));
            return;
        }
        for (int i = start; i <= end; i++) {
            currCombines.add(i);
            backtrack(i + 1, end, k, ans, currCombines);
            currCombines.remove(currCombines.size() - 1);
        }
    }
}
