class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<>();
        // Start generating combinations from 1
        method1(1, k, new ArrayList<>(), result, n);
        return result;
    }

    private void method1(int start, int count, List<Integer> current, List<List<Integer>> result, int n) {
        // Base case: if count becomes 0, add the current combination to the result
        if (count == 0) {
            result.add(new ArrayList<>(current));
            return;
        }
        // Recursive case: generate combinations starting from \'start\'
        for (int i = start; i <= n; i++) {
            // Add current number to the combination
            current.add(i);
            // Recursively generate combinations with next number and one less count
            method1(i + 1, count - 1, current, result, n);
            // Backtrack: remove last added number to try other possibilities
            current.remove(current.size() - 1);
        }
    }
}
