class Solution {

    public List<List<Integer>> combine(int n, int k) {
        // transform from https://leetcode.com/problems/combination-sum/solutions/16502/a-general-approach-to-backtracking-questions-in-java-subsets-permutations-combination-sum-palindrome-partitioning/
        List<List<Integer>> result = new ArrayList<>();
        helper(1, n, k, new ArrayList<>(), result);
        return result;
    }

    private void helper(int start, int n, int k, List<Integer> tempList, List<List<Integer>> result) {
        if (tempList.size() == k) {
            result.add(new ArrayList<>(tempList));
            return;
        }
        if (start > n)
            return;
        // use the template
        // bracktrace
        for (int i = start; i <= n; i++) {
            tempList.add(i);
            helper(i + 1, n, k, tempList, result);
            tempList.remove(tempList.size() - 1);
        }
    }
}
