//// Define the Solution class
class Solution {

    // Public method to find all possible combinations of k numbers from 1 to n
    public List<List<Integer>> combine(int n, int k) {
        // Initialize the result list to store all combinations
        List<List<Integer>> result = new ArrayList<>();
        // Start the recursive backtracking process from 1, with an empty path
        solve(n, k, 1, new ArrayList<>(), result);
        // Return the list of combinations
        return result;
    }

    // Private recursive method to find combinations using backtracking
    void solve(int n, int k, int start, List<Integer> path, List<List<Integer>> result) {
        // Base case: If we have selected k elements or the path size is equal to k
        if (k == 0 || path.size() == k) {
            // Add the current combination (path) to the result list
            result.add(new ArrayList<>(path));
            // Return from the current call to backtrack
            return;
        }
        // Try adding each element from \'start\' to \'n\' to the current path
        for (int i = start; i <= n; i++) {
            // Add the current element to the path
            path.add(i);
            // Recursively explore all combinations with the next index \'i+1\'
            solve(n, k, i + 1, path, result);
            // Backtrack by removing the last element from the path
            path.remove(path.size() - 1);
        }
    }
}
