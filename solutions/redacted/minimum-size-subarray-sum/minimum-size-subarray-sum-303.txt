class Solution {

    public int method1(int target, int[] nums) {
        int n = nums.length;
        int[] pnums = new int[n];
        int element = 0;
        int i;
        int l = 0;
        int r = 0;
        int count = 0;
        for (i = 0; i < n; i++) {
            if (target == nums[i]) {
                element = 1;
                return element;
            } else if (i == 0) {
                pnums[i] = nums[i];
            } else {
                pnums[i] = pnums[i - 1] + nums[i];
            }
        }
        //prefix sum created
        for (int ele : pnums) {
            System.out.println(ele);
        }
        //prefix sum printed
        for (i = 0; i < n; i++) {
            if (target == pnums[i]) {
                element = i + 1;
            }
            if (pnums[i] > target) {
                r = i;
                System.out.println("r =" + r);
                break;
            }
        }
        if (l == 0 && pnums[l] >= target) {
            element = 1;
            System.out.println("l==0");
        }
        if (r == n - 1 && pnums[r] >= target) {
            if (element != 0 && element > n) {
                element = n;
                System.out.println("element decresing" + element);
            } else {
                element = r + 1;
                System.out.println("element" + element);
            }
        }
        for (i = 1; i < n - 1; i++) {
            l = i;
            if ((pnums[r] - pnums[l - 1]) < target && r < n) {
                if (r < (n - 1))
                    r++;
                System.out.println("r value" + r);
            } else if (pnums[r] - pnums[l - 1] >= target) {
                if (element != 0 && element > r - (l - 1)) {
                    element = r - (l - 1);
                    System.out.println("element decresing" + element);
                } else {
                    element = r - (l - 1);
                    System.out.println("element" + element);
                }
                l++;
                System.out.println("a block");
                System.out.println("l value" + l);
                System.out.println("r value" + r);
            }
        }
        return element;
    }
}
