// Approach-1: Using 2 pointers..
class Solution {

    public int method1(int target, int[] nums) {
        int l = 0;
        int r = 0;
        int res = Integer.MAX_VALUE;
        int temp = nums[0];
        while (l <= r && l < nums.length && r < nums.length) {
            if (temp >= target) {
                res = Math.min(res, r - l + 1);
                temp -= nums[l];
                if (l != r)
                    l++;
                else {
                    l++;
                    r++;
                    if (r < nums.length)
                        temp += nums[r];
                }
            } else {
                r++;
                if (r < nums.length)
                    temp += nums[r];
            }
        }
        return (res != Integer.MAX_VALUE) ? res : 0;
    }
}

// Approach-2: Using one pointer
class Solution {

    public int method1(int target, int[] nums) {
        int res = Integer.MAX_VALUE;
        int var1 = 0;
        int l = 0;
        for (int i = 0; i < nums.length; i++) {
            var1 += nums[i];
            while (var1 >= target) {
                res = Math.min(res, i - l + 1);
                var1 -= nums[l];
                l++;
            }
        }
        return (res != Integer.MAX_VALUE) ? res : 0;
    }
}
