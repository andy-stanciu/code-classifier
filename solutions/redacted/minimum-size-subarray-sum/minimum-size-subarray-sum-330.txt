class Solution {

    public int method1(int target, int[] nums) {
        /**
         *        Below is the two pointer solution to find the minimum sub array whose sum is greater than or equal to the target.
         */
        int startIndex = 0;
        int minLength = Integer.MAX_VALUE;
        int var1 = 0;
        for (int i = 0; i < nums.length; i++) {
            var1 += nums[i];
            while (var1 >= target) {
                minLength = minLength > i - startIndex + 1 ? i - startIndex + 1 : minLength;
                //minLength = Math.min(minLength, i - startIndex + 1);
                var1 -= nums[startIndex];
                startIndex += 1;
            }
        }
        if (minLength >= Integer.MAX_VALUE) {
            return 0;
        }
        return minLength;
        /**
         *        Below is the iterative approach to solve this question
         *
         *        int minimumLength = Integer.MAX_VALUE;
         *
         *        for(int i = 0; i < nums.length; i++){
         *            int sum = nums[i];
         *            if(sum >= target){
         *                    minimumLength = 1;
         *                }
         *
         *            for(int j = i+1; j < nums.length; j++){
         *                sum += nums[j];
         *                if(sum >= target && minimumLength > j - i + 1){
         *                    minimumLength = j - i + 1;
         *                }
         *
         *            }
         *
         *           // System.out.println()
         *        }
         *
         *        if(minimumLength >= Integer.MAX_VALUE){
         *            return 0;
         *        }
         *        return minimumLength;
         */
    }
}
