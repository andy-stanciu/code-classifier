class Solution {

    public int method1(int target, int[] nums) {
        //Initialize the minimum length to a large value
        int minLength = Integer.MAX_VALUE;
        //Initialize the left pointer and the sum of the window
        int left = 0;
        int var1 = 0;
        //Keep moving the right pointer till end
        for (int right = 0; right < nums.length; right++) {
            //In case a single element meets the target requirement return immediately
            if (nums[right] == target) {
                return 1;
            }
            var1 += nums[right];
            if (var1 >= target) {
                //Reduce the window size till the sum is less than the target and left pointer is less than the right pointer
                while (var1 >= target && left <= right) {
                    var1 -= nums[left];
                    minLength = Math.min(minLength, right - left + 1);
                    left++;
                }
            }
        }
        if (minLength == Integer.MAX_VALUE) {
            minLength = 0;
        }
        return minLength;
    }
}
