class Solution {

    public boolean method1(int[] nums, int k) {
        HashSet hsObj = new HashSet<Integer>();
        // The window size \'j\' would be equal to k+1 as per the conditions specified in the problem
        int j = k + 1;
        // Iterate through the first window and check for duplicates
        for (int i = 0; i < j; i++) {
            // Window size is same as size of array nums[] and no duplicates exist
            if (i == nums.length)
                return false;
            if (!hsObj.contains(nums[i]))
                hsObj.add(nums[i]);
            else
                return true;
        }
        // Iterate through the remaining elements by sliding the window and checking for duplicates
        for (int i = j; i < nums.length; i++) {
            hsObj.remove(nums[i - j]);
            if (!hsObj.contains(nums[i]))
                hsObj.add(nums[i]);
            else
                return true;
        }
        // No duplicates exist in the array nums[]
        return false;
    }
}
