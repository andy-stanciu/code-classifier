class Solution {

    public boolean method1(int[] nums, int k) {
        //Solution 1
        // int[] dup = new int[nums.length];
        //     HashSet<Integer> set = new HashSet<Integer>();
        // int t = 0;
        // for(int num: nums)
        //     if(!set.add(num))
        //         dup[t++] = num;
        // int tmp = 0;
        // while(tmp < t){
        //     for(int i = 0;i < nums.length - 1;i++){
        //         if(nums[i] == dup[tmp]){
        //             for(int j = i + 1;j < nums.length;j++){
        //                 if(nums[j] == dup[tmp] && Math.abs(j - i) <= k)
        //                     return true;
        //             }
        //         }
        //     }
        //     tmp++;
        // }
        // return false;
        //Solution 2
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            if (map.containsKey(num)) {
                if (Math.abs(i - map.get(num)) <= k)
                    return true;
                map.put(num, i);
            }
            map.put(num, i);
        }
        return false;
    }
}
