/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    // Function to check if two subtrees are symmetric
    private boolean method1(TreeNode root1, TreeNode root2) {
        // Check if either subtree is null
        if (root1 == null || root2 == null) {
            // If one subtree is null, the other must also be null for symmetry
            return root1 == root2;
        }
        // Check if the data in the current nodes is equal
        // and recursively check for symmetry in subtrees
        return (root1.val == root2.val) && method1(root1.left, root2.right) && method1(root1.right, root2.left);
    }

    // Public function to check if the entire binary tree is symmetric
    public boolean method2(TreeNode root) {
        // Check if the tree is empty
        if (root == null) {
            // An empty tree is considered symmetric
            return true;
        }
        // Call the utility function to check symmetry of subtrees
        return method1(root.left, root.right);
    }
}
