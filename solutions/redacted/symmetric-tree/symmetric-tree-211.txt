/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean method1(TreeNode root) {
        //ensure root is valid
        if (root == null) {
            return false;
        }
        //Traverse the left and right subtrees
        TreeNode left = root.left;
        TreeNode right = root.right;
        return compareNodes(left, right);
    }

    public boolean compareNodes(TreeNode a, TreeNode b) {
        //ensure these are symmetrical trees (compare left nodes with right nodes).
        // if both are null, we have symmetrical trees
        if (a == null && b == null) {
            return true;
        }
        // if one is present, but one is null we can immediately return false
        if (a == null || b == null) {
            return false;
        }
        // otherwise, ensure the values are equal else return false
        if (a.val != b.val) {
            return false;
        }
        // continue to traverse the tree comparing the (left, right) and (right,left) nodes from the subtrees.
        return compareNodes(a.left, b.right) && compareNodes(a.right, b.left);
    }
}
