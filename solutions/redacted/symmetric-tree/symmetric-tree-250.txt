/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// Solution 1 - Recursive approach
class Solution {

    public boolean method1(TreeNode root) {
        if (root == null) {
            return true;
        }
        return isMirror(root.left, root.right);
    }

    private boolean isMirror(TreeNode left, TreeNode right) {
        if (left == null && right == null) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return left.val == right.val && isMirror(left.left, right.right) && isMirror(left.right, right.left);
    }
}
//solution 2 - using queue
/*class Solution{
    public boolean isSymmetric(TreeNode root){
        Queue<TreeNode> q=new LinkedList<>();
        //starting the queue from left and right since root is obviously same
        q.add(root.left);  
        q.add(root.right);

        while(!q.isEmpty()){
            TreeNode left=q.poll(); 
            TreeNode right=q.poll();

            if(left==null && right==null)
                continue;
            if(left==null || right==null)
                return false;
            if(left.val != right.val)
                return false;
            //adding in queue in this way since mirror image condition has to be checked 
            //left of left has to be compared with right of right
            //and right of left has to be compared with left of right. 
            q.add(left.left); 
            q.add(right.right);
            q.add(left.right);
            q.add(right.left);

        }
        return true;
    }
}*/
