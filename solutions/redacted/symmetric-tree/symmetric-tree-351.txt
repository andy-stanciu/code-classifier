/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean method1(TreeNode root) {
        if (root == null)
            return true;
        // for left subtree
        Queue<TreeNode> left = new LinkedList<>();
        // for right subtree
        Queue<TreeNode> right = new LinkedList<>();
        left.offer(root.left);
        right.offer(root.right);
        while (!left.isEmpty() && !right.isEmpty()) {
            TreeNode leftNode = left.poll();
            TreeNode rightNode = right.poll();
            if (leftNode == null && rightNode == null)
                continue;
            if (leftNode == null || rightNode == null || leftNode.val != rightNode.val)
                return false;
            left.offer(leftNode.left);
            left.offer(leftNode.right);
            right.offer(rightNode.right);
            right.offer(rightNode.left);
        }
        return left.isEmpty() && right.isEmpty();
    }
}
// class Solution {
//     public boolean isSymmetric(TreeNode root) {
//         if (root == null) return true;
//         return isSymmetric(root.left, root.right);
//     }
//     private boolean isSymmetric(TreeNode left, TreeNode right) {
//         if (left == null && right == null) return true;
//         if (left == null || right == null) return false;
//         // Check if values of current nodes are equal
//         if (left.val != right.val) return false;
//         // Recursively check the symmetry of subtrees
//         return isSymmetric(left.left, right.right) && isSymmetric(left.right, right.left);
//     }
// }
