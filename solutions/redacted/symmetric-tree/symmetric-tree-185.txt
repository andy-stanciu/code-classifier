class Solution {

    // Helper function to check if two subtrees are mirrors of each other
    private boolean isMirror(TreeNode root1, TreeNode root2) {
        // If both nodes are null, the subtrees are symmetric
        if (root1 == null && root2 == null) {
            return true;
        }
        // If one is null and the other isn\'t, the subtrees are not symmetric
        if (root1 == null || root2 == null) {
            return false;
        }
        // Check if the current nodes have the same value, and
        // recursively check if the left subtree of root1 is a mirror of the right subtree of root2, and vice versa
        return root1.val == root2.val && isMirror(root1.left, root2.right) && isMirror(root1.right, root2.left);
    }

    // Main function to check if the tree is symmetric around its center
    public boolean method1(TreeNode root) {
        // Start the recursion to check the left and right subtree of the root
        return isMirror(root.left, root.right);
    }
}
