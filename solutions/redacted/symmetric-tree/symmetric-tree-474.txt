/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    boolean helper(TreeNode root1, TreeNode root2) {
        if (root1 == null && root2 == null)
            return true;
        else if (root1 == null && root2 != null)
            return false;
        else if (root1 != null && root2 == null)
            return false;
        if (root1.val != root2.val)
            return false;
        return helper(root1.left, root2.right) && helper(root1.right, root2.left);
    }

    public boolean method1(TreeNode root) {
        if (root == null)
            return true;
        return helper(root.left, root.right);
    }
}
// class Solution {
//     void helper(TreeNode root)
//     {
//         if(root==null)
//         return;
//         helper(root.left);
//         helper(root.right);
//         TreeNode temp = root.left;
//         root.left = root.right;
//         root.right = temp;
//     }
//     boolean check(TreeNode left , TreeNode right)
//     {   if(left==null&&right==null)
//     return true;
//         if(left==null&&right!=null)
//         return false;
//         else if(left!=null&&right==null)
//         return false;
//         if(left.val!=right.val)
//         return false;
//         return check(left.left,right.left)&&check(left.right,right.right);
//     }
//     public boolean isSymmetric(TreeNode root) {
//         TreeNode temp = root.left;
//         helper(temp);
//         return check(temp,root.right);
//     }
// }
