// Java Code to Check if a Binary Tree is Symmetric
class Solution {

    // Checks if two trees are mirror images of each other.
    public boolean method1(TreeNode leftRoot, TreeNode rightRoot) {
        if (leftRoot == null && rightRoot == null)
            return true;
        if (leftRoot == null || rightRoot == null)
            return false;
        if (leftRoot.val != rightRoot.val)
            return false;
        // Recursively check if the left subtree of the leftRoot is a mirror of the right subtree of the rightRoot,
        // and the right subtree of the leftRoot is a mirror of the left subtree of the rightRoot.
        return method1(leftRoot.left, rightRoot.right) && method1(leftRoot.right, rightRoot.left);
    }

    // Determines if a binary tree is symmetric.
    public boolean method2(TreeNode root) {
        if (root == null)
            return true;
        // Check if the tree is symmetric by comparing the left and right subtrees.
        return method1(root.left, root.right);
    }
}
