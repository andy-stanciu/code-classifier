/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    // The main function that checks if the given binary tree is symmetric
    public boolean method1(TreeNode root) {
        // If the root node is null, the tree is symmetric
        // If the root node is not null, check if the left and right subtrees are symmetric
        return root == null || method2(root.left, root.right);
    }

    // A helper function to check if two subtrees are symmetric
    private boolean method2(TreeNode left, TreeNode right) {
        // If either the left or the right subtree is null, they are symmetric only if both are null
        if (left == null || right == null)
            return left == right;
        // If the values of the left and right nodes are not equal, the subtrees are not symmetric
        if (left.val != right.val)
            return false;
        // Recursively check if the left subtree of the left node is symmetric with the right subtree of the right node
        // And if the right subtree of the left node is symmetric with the left subtree of the right node
        return method2(left.left, right.right) && method2(left.right, right.left);
    }
}
