class Solution {

    public boolean method1(TreeNode root) {
        // here we have divided 1 tree into 2 tree\'s and check their mirror elements simaltaneously
        return method1(root.left, root.right);
    }

    public boolean method1(TreeNode node1, TreeNode node2) {
        TreeNode p = node1;
        TreeNode q = node2;
        if (// base case;
        (p == null) && (q == null)) {
            return true;
        } else if (// base  case;
        p == null || q == null) {
            return false;
        } else if (// base case;
        p.val != q.val) {
            return false;
        } else // recursive logic;
        {
            // Mirror symmetry mai left right kai
            boolean leftAns = method1(p.left, q.right);
            // equal hota hai aur right left kai;
            boolean rightAns = method1(p.right, q.left);
            return leftAns && rightAns;
        }
    }
}
// yeah story yaha kam nahi karege, as kayion ka sum same hota hai structure nahi mirror image mai;
/* STORY: If both left and right side sum of tree is equal, than we can say it is symmetric.

class Solution
{
    public boolean isSymmetric(TreeNode root) 
    {
        int leftSum = sumLeftSide(root.left);
        int rightSum = sumRightSide(root.right);

        if(leftSum == rightSum)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public int sumLeftSide(TreeNode root)
    {
        TreeNode t = root;

        if(t == null)
        {
            return 0;  
        }
        else
        {
            return sumLeftSide(t.left) + sumLeftSide(t.right);
        }
    }

    public int sumRightSide(TreeNode root)
    {
        TreeNode t = root;
        if(t == null)
        {
            return 0;
        }
        else
        {
            return sumRightSide(t.left) + sumRightSide(t.right);
        }
    }
}

 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
