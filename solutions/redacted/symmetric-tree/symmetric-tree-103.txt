class Solution {

    public static boolean helper(TreeNode root1, TreeNode root2) {
        //If both the nodes(i.e root.left and root.right) then we can return True
        if (root1 == null && root2 == null) {
            return true;
        }
        //If neither of the nodes are null, or root.left.val not equals root.right.val, then it is not Symmetric Tree
        if ((root1 == null || root2 == null) || (root1.val != root2.val)) {
            return false;
        }
        /*
         *) If a tree is symmetric, then the root.left.val must be equal to root.right.val .
         *) So for the left SubTree then, For each node will be calling node.left and node.right . 
         *) So for the right SubTree then, For each node we will be calling node.right and node.left . 
         */
        //Left Sub Tree
        boolean var1 = helper(root1.left, root2.right);
        //Right Sub Tree
        boolean var2 = helper(root1.right, root2.left);
        return var1 && var2;
    }

    public boolean method1(TreeNode root) {
        return helper(root.left, root.right);
    }
}
