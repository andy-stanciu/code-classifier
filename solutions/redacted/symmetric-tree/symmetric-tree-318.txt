/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean method1(TreeNode root) {
        TreeNode leftNode = root;
        TreeNode rightNode = root;
        Stack<TreeNode> leftStack = new Stack<>();
        Stack<TreeNode> rightStack = new Stack<>();
        while (!((leftNode != null) ^ (rightNode != null))) {
            if (leftNode != null && rightNode != null) {
                leftStack.add(leftNode);
                leftNode = leftNode.left;
                rightStack.add(rightNode);
                rightNode = rightNode.right;
                if (leftStack.peek().val != rightStack.peek().val) {
                    return false;
                }
            } else if (leftNode == null && rightNode == null) {
                leftNode = leftStack.pop();
                rightNode = rightStack.pop();
                if (leftNode == rightNode) {
                    return true;
                }
                leftNode = leftNode.right;
                rightNode = rightNode.left;
            }
        }
        return !((leftNode != null) ^ (rightNode != null));
    }
}
