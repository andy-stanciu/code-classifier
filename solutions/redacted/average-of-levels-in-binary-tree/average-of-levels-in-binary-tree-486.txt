class Solution {

    public List<Double> method1(TreeNode root) {
        Queue<TreeNode> q = new ArrayDeque<>();
        //appending the root node
        q.offer(root);
        //storing the average of each level
        List<Double> avg = new ArrayList<>();
        while (!q.isEmpty()) {
            //popping constrain
            int size = q.size();
            //local sum
            double sum = 0.0;
            //local count //number of node in that particular level
            double count = 0.0;
            for (//number element or the parent popping at a particular leve;
            //number element or the parent popping at a particular leve;
            //number element or the parent popping at a particular leve;
            int i = 0; i < size; i++) {
                TreeNode temp = q.peek();
                //adding the corresponding node at the same level
                sum += temp.val;
                if (//if root->left present enqueue it to the Queue
                temp.left != null)
                    q.offer(temp.left);
                if (//if root->right present enqueue it to the Queue
                temp.right != null)
                    q.offer(temp.right);
                //dequeue the level node
                q.poll();
                count += 1.0;
            }
            //average
            sum /= count;
            //pushing the level wise average to the ArrayList
            avg.add(sum);
        }
        //retuning the ArrayList
        return avg;
    }
}
//Please Do Upvote, It helps a lot
