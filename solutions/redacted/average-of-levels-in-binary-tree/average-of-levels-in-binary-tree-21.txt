/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> method1(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();
        List<Double> l = new ArrayList<>();
        q.add(root);
        bfs(root, q, l);
        return l;
    }

    void bfs(TreeNode root, Queue<TreeNode> q, List<Double> l) {
        while (!q.isEmpty()) {
            long size = q.size();
            long div = size;
            long count = 0;
            while (size > 0) {
                TreeNode node = q.poll();
                count += (long) node.val;
                if (node.left != null)
                    q.add(node.left);
                if (node.right != null)
                    q.add(node.right);
                size--;
            }
            l.add((double) count / div);
        }
    }
}
