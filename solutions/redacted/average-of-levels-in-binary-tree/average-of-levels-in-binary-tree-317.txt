/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> method1(TreeNode root) {
        ArrayList<ArrayList<Integer>> arr = new ArrayList<>();
        int maxDepth = maxDepth(root);
        for (int i = 0; i < maxDepth; i++) {
            arr.add(new ArrayList<>());
        }
        collect(root, arr, 0);
        List<Double> var1 = new ArrayList<>();
        for (int i = 0; i < arr.size(); i++) {
            double avg = 0;
            for (int j = 0; j < arr.get(i).size(); j++) {
                avg += arr.get(i).get(j);
                //System.out.print(arr.get(i).get(j) + " ");
            }
            var1.add(avg / arr.get(i).size());
            //System.out.println();
        }
        return var1;
    }

    public int maxDepth(TreeNode t) {
        if (t == null) {
            return 0;
        } else {
            return Math.max(1 + maxDepth(t.left), 1 + maxDepth(t.right));
        }
    }

    public void collect(TreeNode t, ArrayList<ArrayList<Integer>> arr, int level) {
        if (t == null) {
            return;
        } else {
            arr.get(level).add(t.val);
            collect(t.left, arr, level + 1);
            collect(t.right, arr, level + 1);
        }
    }
}
