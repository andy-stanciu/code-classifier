/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> method1(TreeNode root) {
        List<Double> l = new ArrayList<Double>();
        Stack<TreeNode> a = new Stack<TreeNode>();
        Stack<TreeNode> b = new Stack<TreeNode>();
        if (root == null) {
            return l;
        }
        a.push(root);
        while (a.isEmpty() == false || b.isEmpty() == false) {
            double sum = 0.0, sum1 = 0.0;
            double m = a.size();
            while (a.isEmpty() == false) {
                TreeNode curr = a.pop();
                sum = sum + curr.val;
                if (curr.left != null) {
                    b.push(curr.left);
                }
                if (curr.right != null) {
                    b.push(curr.right);
                }
            }
            if (m != 0) {
                l.add(sum / m);
            }
            double n = b.size();
            while (b.isEmpty() == false) {
                TreeNode c = b.pop();
                sum1 = sum1 + c.val;
                if (c.left != null) {
                    a.push(c.left);
                }
                if (c.right != null) {
                    a.push(c.right);
                }
            }
            if (n != 0) {
                l.add(sum1 / n);
            }
        }
        return l;
    }
}
