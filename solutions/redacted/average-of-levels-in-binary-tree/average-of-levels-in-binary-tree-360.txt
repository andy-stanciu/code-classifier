/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    class Class1 {

        double sum;

        int count;

        Class1(int sum, int count) {
            this.sum = sum;
            this.count = count;
        }

        public double getSum() {
            return sum;
        }

        public void setSum(double sum) {
            this.sum = sum;
        }

        public int getCount() {
            return count;
        }

        public void setCount(int count) {
            this.count = count;
        }
    }

    public List<Double> method1(TreeNode root) {
        Map<Integer, Class1> map = new HashMap<>();
        List<Double> result = new ArrayList<>();
        search(root, 0, map);
        for (int i = 0; i < map.size(); i++) {
            result.add((map.get(i).getSum() / map.get(i).getCount()));
        }
        return result;
    }

    public void search(TreeNode root, int level, Map<Integer, Class1> map) {
        if (root == null) {
            return;
        }
        if (!map.containsKey(level)) {
            map.put(level, new Class1(root.val, 1));
        } else {
            Class1 Class1 = map.get(level);
            Class1.setCount(Class1.getCount() + 1);
            Class1.setSum(Class1.getSum() + root.val);
            map.put(level, Class1);
        }
        search(root.left, level + 1, map);
        search(root.right, level + 1, map);
    }
}
