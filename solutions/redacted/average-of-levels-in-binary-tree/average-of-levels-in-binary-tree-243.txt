/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> method1(TreeNode root) {
        List<Double> result = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while (!q.isEmpty()) {
            int var1 = q.size();
            double sum = 0;
            for (int i = 0; i < var1; i++) {
                TreeNode node = q.remove();
                sum += node.val;
                if (node.left != null) {
                    q.add(node.left);
                }
                if (node.right != null) {
                    q.add(node.right);
                }
            }
            result.add(sum / var1);
        }
        return result;
    }
}
/**
 *    q = new Queue()
 *    result = new List()
 *    q.push(root)
 *    while !q.empty():
 *        levels = q.size();
 *        sum = 0;
 *        for i from 0 to levels-1:
 *            node = q.pop()
 *            sum += node.val;
 *            if node.left != null:
 *                q.push(node.left);
 *            if node.right != null:
 *                q.push(node.right);
 *
 *        avg = (double)sum / levels
 *        result.push(avg)
 *    return result
 */
