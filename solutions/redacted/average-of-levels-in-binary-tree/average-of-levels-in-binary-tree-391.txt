class Solution {

    private static int depth(TreeNode root) {
        if (root == null)
            return 0;
        else {
            int l = depth(root.left);
            int r = depth(root.right);
            return 1 + ((l > r) ? l : r);
        }
    }

    private static double[][] method1(TreeNode root, double[][] arr, int depth) {
        if (root != null) {
            arr[depth][0] += (double) root.val;
            arr[depth][1]++;
            arr = method1(root.left, arr, depth + 1);
            arr = method1(root.right, arr, depth + 1);
        }
        return arr;
    }

    public List<Double> method2(TreeNode root) {
        int n = depth(root);
        double[][] arr = new double[n][2];
        arr = method1(root, arr, 0);
        List<Double> ret = new ArrayList<Double>();
        for (int i = 0; i < n; i++) {
            double temp = arr[i][0] / arr[i][1];
            ret.add(temp);
        }
        return ret;
    }
}
