/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<Double> result = new ArrayList<>();

    HashMap<Integer, List<Integer>> map = new HashMap<>();

    public List<Double> method1(TreeNode root) {
        calc(root, 0);
        for (int i = 0; i < map.size(); i++) {
            List<Integer> temp = map.get(i);
            Double sum = 0.0;
            for (Integer d : temp) {
                sum = sum + Double.valueOf(d);
            }
            result.add(sum / temp.size());
        }
        return result;
    }

    public void calc(TreeNode current, int level) {
        if (current == null)
            return;
        // if(level==result.size()){
        //     result.add(Double.valueOf(current.val));
        // }else{
        //         result.set(level,(result.get(level)+Double.valueOf(current.val))/2);
        // }
        List<Integer> temp;
        if (!map.containsKey(level)) {
            temp = new ArrayList<>();
        } else {
            temp = map.get(level);
        }
        temp.add(current.val);
        map.put(level, temp);
        System.out.println("level" + level);
        for (Double d : result) {
            System.out.print("," + d);
        }
        System.out.println();
        calc(current.right, level + 1);
        calc(current.left, level + 1);
    }
}
