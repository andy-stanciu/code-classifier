/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> method1(TreeNode root) {
        // Create an empty list to store the average values.
        List<Double> var1 = new ArrayList<Double>();
        // If the binary tree is empty, return an empty list.
        if (root == null)
            return var1;
        // Initialize a queue for a level-order traversal starting with the root.
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while (!queue.isEmpty()) {
            // Calculate the number of nodes in the current level.
            int var2 = queue.size();
            // Initialize a variable to accumulate the sum of node values at this level.
            double sum = 0.0;
            // Process all nodes in the current level.
            for (int i = 0; i < var2; i++) {
                // Dequeue a node from the front of the queue.
                TreeNode node = queue.poll();
                // Add the value of the current node to the sum.
                sum += node.val;
                // Enqueue the left and right children if they exist.
                if (node.left != null)
                    queue.add(node.left);
                if (node.right != null)
                    queue.add(node.right);
            }
            // Calculate the average value of the current level and add it to the list.
            var1.add(sum / var2);
        }
        // Return the list containing the average values for each level.
        return var1;
    }
}
