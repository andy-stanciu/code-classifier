/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> method1(TreeNode root) {
        ArrayList<Double> list = new ArrayList<>();
        levelOrderTraversal(root, list);
        return list;
    }

    void levelOrderTraversal(TreeNode root, ArrayList<Double> list) {
        Queue<TreeNode> q = new LinkedList<>();
        if (root == null) {
            return;
        }
        q.add(root);
        while (!q.isEmpty()) {
            int var1 = q.size();
            // ArrayList<Integer> level = new ArrayList<>();
            long sum = 0;
            for (int i = 0; i < var1; i++) {
                TreeNode node = q.poll();
                if (node.left != null) {
                    q.add(node.left);
                }
                if (node.right != null) {
                    q.add(node.right);
                }
                // level.add(node.val);
                sum += node.val;
            }
            double avg = (double) sum / var1;
            list.add(avg);
            // list.add(avg(level));
        }
    }
    // double avg(ArrayList<Integer>list){
    //     long sum=0;
    //     for(int i =0;i<list.size();i++){
    //         sum += list.get(i);
    //     }
    //     return (double)sum/list.size();
    // }
}
