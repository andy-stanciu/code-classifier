/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> method1(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();
        List<Double> ans = new ArrayList<>();
        if (root == null) {
            //return empty list
            return ans;
        }
        //intially queue is empty add the root node to it
        q.offer(root);
        while (!q.isEmpty()) {
            int var1 = q.size();
            double levelAvg = 0;
            for (int i = 0; i < var1; i++) {
                //removing current level element from q and store it in the current level list
                TreeNode currentNode = q.poll();
                levelAvg += currentNode.val;
                //after removing and adding to the list add the left and right node to the q
                //make left and right is not null also
                if (currentNode.left != null) {
                    q.offer(currentNode.left);
                }
                if (currentNode.right != null) {
                    q.offer(currentNode.right);
                }
            }
            //do not divide by 2 ,divide by levelSize
            levelAvg = levelAvg / var1;
            //add the currentNode to the main list
            ans.add(levelAvg);
        }
        return ans;
    }
}
