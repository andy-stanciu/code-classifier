/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> method1(TreeNode root) {
        var ans = new ArrayList<Double>();
        HashMap<Integer, List<Integer>> aman = new HashMap<>();
        helper(aman, root, 0);
        System.out.println(aman);
        for (int i = 0; i < aman.size(); i++) {
            var arr = aman.get(i);
            double avg = 0.0;
            int n = 0;
            for (int a : arr) {
                avg += a;
                n++;
            }
            ans.add(avg / n);
        }
        return ans;
    }

    static void helper(HashMap<Integer, List<Integer>> arr, TreeNode root, int level) {
        if (root == null) {
            return;
        }
        if (!arr.containsKey(level)) {
            arr.put(level, new ArrayList<Integer>());
        }
        arr.get(level).add(root.val);
        helper(arr, root.left, level + 1);
        helper(arr, root.right, level + 1);
    }
}
