/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> method1(TreeNode root) {
        List<Double> ls = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        if (root == null) {
            return ls;
        }
        q.add(root);
        recursive(q, ls);
        return ls;
    }

    public void recursive(Queue<TreeNode> q, List<Double> ls) {
        if (q.isEmpty()) {
            return;
        }
        int count = q.size();
        Double sum = 0.0;
        int trav = count;
        while (trav != 0) {
            TreeNode temp = q.poll();
            if (temp.left != null) {
                q.add(temp.left);
            }
            if (temp.right != null) {
                q.add(temp.right);
            }
            sum = sum + temp.val;
            trav--;
        }
        Double avg = (double) sum / count;
        ls.add(avg);
        recursive(q, ls);
    }
}
