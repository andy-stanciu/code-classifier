/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    class Class1 {

        TreeNode n;

        int depth;

        public Class1(TreeNode n, int depth) {
            this.n = n;
            this.depth = depth;
        }

        @Override
        public String method1() {
            return "{n: " + n.val + ", depth: " + depth + "}";
        }
    }

    public List<Double> method2(TreeNode root) {
        Queue<Class1> q = new LinkedList<>();
        //List of vals where index = depth of the tree
        List<List<Double>> l = new ArrayList<>();
        q.add(new Class1(root, 0));
        while (!q.isEmpty()) {
            Class1 nd = q.remove();
            if (nd.depth < l.size()) {
                List<Double> var1 = l.get(nd.depth);
                var1.add((double) nd.n.val);
            } else {
                List<Double> var1 = new ArrayList<>();
                var1.add((double) nd.n.val);
                l.add(var1);
            }
            if (nd.n.left != null) {
                q.add(new Class1(nd.n.left, nd.depth + 1));
            }
            if (nd.n.right != null) {
                q.add(new Class1(nd.n.right, nd.depth + 1));
            }
        }
        //Iterate over each depth and average all values in avgResult data-structure.
        List<Double> avgResult = new ArrayList<>();
        for (int i = 0; i < l.size(); i++) {
            List<Double> var1 = l.get(i);
            Double sum = 0.0d;
            for (int j = 0; j < var1.size(); j++) {
                sum += var1.get(j);
            }
            avgResult.add(sum / var1.size());
        }
        return avgResult;
    }
}
