class Solution {

    public List<Double> method1(TreeNode root) {
        List<Double> list = new ArrayList<>();
        return levelOrderTraversal(root, list);
    }

    public static List<Double> levelOrderTraversal(TreeNode root, List<Double> list) {
        if (root == null)
            return new ArrayList<>();
        double sum = 0, counter = 0;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        q.add(null);
        while (!q.isEmpty()) {
            TreeNode currNode = q.remove();
            if (currNode != null) {
                sum = sum + currNode.val;
                counter++;
                if (currNode.left != null) {
                    q.add(currNode.left);
                }
                if (currNode.right != null) {
                    q.add(currNode.right);
                }
            } else {
                if (!q.isEmpty()) {
                    q.add(null);
                }
                double ans = sum / counter;
                counter = 0;
                sum = 0;
                list.add(ans);
            }
        }
        return list;
    }
}
