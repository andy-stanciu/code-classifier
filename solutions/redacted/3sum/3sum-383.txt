// class Solution {
//     public List<List<Integer>> threeSum(int[] nums) {
//         //better
//         //tc: o(n^2)+o(logn)
//         //sc:o(n)+2*o {no of unique triplets)
//         Set<List<Integer>> st = new HashSet<>();
//         int n = nums.length;
//         for (int i = 0; i < n; i++) {
//             Set<Integer> hashset = new HashSet<>();
//             for (int j = i + 1; j < n; j++) {
//                 int third = -(nums[i] + nums[j]);
//                 if (hashset.contains(third)) {
//                     List<Integer> temp = Arrays.asList(nums[i], nums[j], third);
//                     Collections.sort(temp);
//                     st.add(temp);
//                 }
//                 hashset.add(nums[j]);
//             }
//         }
//         return new ArrayList<>(st);
//     }
// }
//optimal
class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        // Sort the array
        Arrays.sort(nums);
        // Traverse the array
        for (int i = 0; i < nums.length; i++) {
            // Avoid duplicates for the first element
            if (i > 0 && nums[i] == nums[i - 1])
                continue;
            int j = i + 1;
            int k = nums.length - 1;
            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if (sum < 0) {
                    j++;
                } else if (sum > 0) {
                    k--;
                } else {
                    // Found a triplet
                    List<Integer> temp = Arrays.asList(nums[i], nums[j], nums[k]);
                    ans.add(temp);
                    // Move the pointers to avoid duplicates
                    j++;
                    k--;
                    while (j < k && nums[j] == nums[j - 1]) j++;
                    while (j < k && nums[k] == nums[k + 1]) k--;
                }
            }
        }
        return ans;
    }
}
