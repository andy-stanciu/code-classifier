class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        // Applied HashSet to remove duplicates from the list
        Set<List<Integer>> triplets = new HashSet<>();
        // Sort the array
        Arrays.sort(nums);
        for (int i = 0; i < nums.length - 1; i++) {
            int left = i + 1;
            int right = nums.length - 1;
            while (left < right) {
                // Two-pointer approach
                int result = nums[i] + nums[left] + nums[right];
                if (result == 0) {
                    // We got our desire triplet !!!
                    triplets.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    left++;
                    right--;
                } else if (result < 0) {
                    // If the current sum is less than zero, it indicates that the sum is too small,so left++
                    left++;
                } else if (result > 0) {
                    //If the current sum is greater than zero, it indicates that the sum is too large,so right--
                    right--;
                }
            }
        }
        // Finally return the result
        return new ArrayList<>(triplets);
    }
}
