class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        // First, sort the array
        Arrays.sort(nums);
        // Loop through the array and fix the first element
        for (int i = 0; i < nums.length; i++) {
            // Skip duplicate values for the first element
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            // Initialize two pointers
            int j = i + 1, k = nums.length - 1;
            // Two-pointer approach to find triplets
            while (j < k) {
                int total = nums[i] + nums[j] + nums[k];
                if (total > 0) {
                    // Decrease the right pointer to reduce the sum
                    k--;
                } else if (total < 0) {
                    // Increase the left pointer to increase the sum
                    j++;
                } else {
                    // Found a valid triplet
                    res.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    // Move the left pointer and skip duplicates
                    j++;
                    while (j < k && nums[j] == nums[j - 1]) {
                        j++;
                    }
                    // Move the right pointer and skip duplicates
                    k--;
                    while (j < k && nums[k] == nums[k + 1]) {
                        k--;
                    }
                }
            }
        }
        return res;
    }
}
