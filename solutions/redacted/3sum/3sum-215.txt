class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        // stp1: sort the arary to apply the two-pointer approch
        Arrays.sort(nums);
        // Stp 2: Loop through each element in the sorted array
        for (int i = 0; i < nums.length - 2; i++) {
            // skips duplicates elements
            if (i > 0 && nums[i] == nums[i - 1])
                continue;
            // Set the left and right pointers
            int left = i + 1;
            int right = nums.length - 1;
            // Step 3: Find two numbers such that their sum is zero
            while (left < right) {
                int sum = nums[i] + nums[left] + nums[right];
                // cheak sum is zero or not
                if (sum == 0) {
                    // Add the triplet to the result list
                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    // Move both pointers
                    left++;
                    right--;
                    // Move the pointers to the next different elements to avoid duplicates
                    while (left < right && nums[left] == nums[left - 1]) left++;
                    while (left < right && nums[right] == nums[right + 1]) right--;
                } else if (sum < 0) {
                    left++;
                } else {
                    right--;
                }
            }
        }
        return result;
    }
}
