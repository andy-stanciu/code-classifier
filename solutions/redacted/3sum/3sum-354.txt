class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        // Sort in asc order.
        Arrays.sort(nums);
        ArrayList<List<Integer>> output = new ArrayList<>();
        for (int i = 0; i < nums.length - 2; i++) {
            // Skip duplicates of current/fixed element.
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            int curr = nums[i];
            int start = i + 1;
            int end = nums.length - 1;
            while (start < end) {
                int numStart = nums[start];
                int numEnd = nums[end];
                int sum = curr + numStart + numEnd;
                if (sum < 0) {
                    start++;
                } else if (sum > 0) {
                    end--;
                } else {
                    output.add(List.of(curr, numStart, numEnd));
                    // Skip duplicates for the start pointer.
                    while (start < end && nums[start] == nums[start + 1]) {
                        start++;
                    }
                    // Skip duplicates for the end pointer.
                    while (start < end && nums[end] == nums[end - 1]) {
                        end--;
                    }
                    // Move both pointers.
                    start++;
                    end--;
                }
            }
        }
        return output;
    }
}
