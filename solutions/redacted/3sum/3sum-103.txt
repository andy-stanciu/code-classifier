class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> ans = new HashSet<>();
        int n = nums.length;
        Arrays.sort(nums);
        for (int i = 0; i < n; i++) {
            Set<Integer> set = new HashSet<>();
            for (int j = i + 1; j < n; j++) {
                int newTarget = 0 - nums[i] - nums[j];
                if (set.contains(newTarget)) {
                    ans.add(Arrays.asList(nums[i], newTarget, nums[j]));
                } else
                    set.add(nums[j]);
            }
        }
        return new ArrayList(ans);
    }
}
// TC: O(n * logn) + O(n^2 * logk) => O(n^2 * logk)
// SC: O(K) - k is the number of unique triplets
