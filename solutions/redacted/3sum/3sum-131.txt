class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        // List<List<Integer>> triplets = new ArrayList<>();
        Set<List<Integer>> set = new HashSet<>();
        for (int index = 0; index < nums.length; index++) {
            int target = nums[index];
            Map<Integer, Integer> map = new HashMap<>();
            for (int index_ = 0; index_ < nums.length && index_ != index; index_++) {
                int query = -target - nums[index_];
                if (map.containsKey(query) && map.get(query) != index_ && map.get(query) != index) {
                    List<Integer> triplet = new ArrayList<>();
                    triplet = Arrays.asList(nums[index], nums[index_], query);
                    // To avoid duplicate triplets
                    Collections.sort(triplet);
                    set.add(triplet);
                }
                map.put(nums[index_], index_);
            }
        }
        return new ArrayList<>(set);
    }
}
// Optimised Code
// Time ComplexitY : O(n x n)
// Space Complexity : O(3 x n)
// (x) + (a) + (b) = 0
// (a) + (b) = -x
// here target = -x
// (a) + (b) = -x
// (b) = -x - (a)
// but we dont have any clue of what x is - hence we tried for all the x possible using a for loop.
