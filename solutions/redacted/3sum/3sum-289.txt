class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        // Initialize an empty list to store the results.
        List<List<Integer>> ans = new ArrayList<>();
        // Sort the array to use the two-pointer approach.
        Arrays.sort(nums);
        int n = nums.length;
        for (int i = 0; i < n - 2; i++) {
            // Iterate through the array, stopping at n - 2.
            // Skip duplicates for \'i\'.
            if (i > 0 && nums[i] == nums[i - 1])
                continue;
            int j = i + 1;
            int k = n - 1;
            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if (sum < 0) {
                    // Move the left pointer to the right.
                    j++;
                } else if (sum > 0) {
                    // Move the right pointer to the left.
                    k--;
                } else {
                    // Found a valid triplet.
                    ans.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    // Skip duplicates for the \'j\' pointer.
                    while (j < k && nums[j] == nums[j + 1]) j++;
                    // Skip duplicates for the \'k\' pointer.
                    while (j < k && nums[k] == nums[k - 1]) k--;
                    // Move both pointers to find the next potential triplet.
                    j++;
                    k--;
                }
            }
        }
        // Return the list of triplets.
        return ans;
    }
}
