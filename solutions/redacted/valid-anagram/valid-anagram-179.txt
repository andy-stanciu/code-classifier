class Solution {

    public boolean method1(String s, String t) {
        // Create a hashmap to store character as key and value as its count
        HashMap<Character, Integer> mpCharCount = new HashMap<>();
        // Store lengths of both the strings
        int input = s.length();
        int check = t.length();
        // If the lengths are not equal, of couse they can not be anagrams
        if (input != check)
            return false;
        // Iterate through first string s, fill the hashmap
        for (int i = 0; i < input; i++) {
            // If the hashmap already contains s[i] as its key,
            if (mpCharCount.containsKey(s.charAt(i)))
                // Then increase the count corresponding value of s[i] by 1
                mpCharCount.put(s.charAt(i), (int) (mpCharCount.get(s.charAt(i)) + 1));
            else
                // else, if it is the first occurance of s[i] in ur map, addd 1 as its value
                mpCharCount.put(s.charAt(i), 1);
        }
        //System.out.println("before: "+mpCharCount);
        // Iterate through second string
        for (int i = 0; i < check; i++) {
            // Check if each of the key in t[i] has the same occurance as s[i]
            if (mpCharCount.containsKey(t.charAt(i)) && (int) (mpCharCount.get(t.charAt(i))) > 0)
                // if you find that key in hashmap, decrement its corresponding value by 1
                mpCharCount.put(t.charAt(i), (int) (mpCharCount.get(t.charAt(i))) - 1);
        }
        // If s and t are anagrams, finally all the values in hashmap should be \'0\'
        //System.out.println("after: "+mpCharCount);
        int flag = 0;
        for (Character key : mpCharCount.keySet()) {
            if ((int) (mpCharCount.get(key)) != 0)
                flag = 1;
        }
        if (flag == 0)
            return true;
        return false;
    }
}
