class Solution {

    // anagram- can rearrange and use all the origianl letters exactly once
    public boolean method1(String s, String t) {
        if (s.length() != t.length()) {
            return false;
        }
        Map<Character, Integer> stringCountMapS = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            char letter = s.charAt(i);
            if (stringCountMapS.containsKey(letter)) {
                stringCountMapS.put(letter, stringCountMapS.get(letter) + 1);
            } else {
                stringCountMapS.put(letter, 1);
            }
            // we added a letter
            // look up map.compute *if already exist then it can increment 7-12
            // just use one amp S and decrement count of letters as we see them in T
        }
        Map<Character, Integer> stringCountMapT = new HashMap<>();
        for (int i = 0; i < t.length(); i++) {
            char letter = t.charAt(i);
            if (stringCountMapT.containsKey(letter)) {
                stringCountMapT.put(letter, stringCountMapT.get(letter) + 1);
            } else {
                stringCountMapT.put(letter, 1);
            }
        }
        for (Map.Entry<Character, Integer> entry : stringCountMapS.entrySet()) {
            Character key = entry.getKey();
            Integer value = entry.getValue();
            System.out.println("key is " + key + "and value is " + value);
            if (!stringCountMapT.containsKey(key) || !stringCountMapT.get(key).equals(value)) {
                return false;
            }
        }
        return true;
    }
}
