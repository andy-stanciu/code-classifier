/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        int sum2 = l1.val + l2.val;
        int carry = 0;
        if (sum2 % 10 != 0 || sum2 == 10) {
            carry = sum2 / 10;
            sum2 = sum2 % 10;
        }
        ListNode l3 = new ListNode(sum2);
        ListNode current = l3;
        while (l1.next != null) {
            if (l2.next == null) {
                l2.next = new ListNode(0);
            }
            l1 = l1.next;
            l2 = l2.next;
            int sum = l1.val + l2.val;
            if (carry > 0) {
                sum += carry;
                carry = 0;
            }
            if (sum > 9) {
                carry = sum / 10;
                sum = sum % 10;
            }
            current.next = new ListNode(sum);
            current = current.next;
        }
        while (l2.next != null) {
            l2 = l2.next;
            int sum3 = l2.val;
            System.out.println(sum3);
            if (carry > 0) {
                sum3 += carry;
                carry = 0;
            }
            if (sum3 > 9) {
                carry = sum3 / 10;
                sum3 = sum3 % 10;
            }
            current.next = new ListNode(sum3);
            current = current.next;
        }
        if (carry > 0) {
            current.next = new ListNode(carry);
        }
        return l3;
    }
}
