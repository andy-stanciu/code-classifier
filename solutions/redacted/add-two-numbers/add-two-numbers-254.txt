/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        //initialize a place holder list
        ListNode dummy = new ListNode(0);
        //initialze a list that will progressivley point to the next node(point to the sums)
        ListNode var1 = dummy;
        int sum = 0;
        //have a variable to store the carry
        int carry = 0;
        //loop through both linkedlists
        while (l1 != null || l2 != null) {
            int x = 0;
            int y = 0;
            if (l1 != null)
                x = l1.val;
            if (l2 != null)
                y = l2.val;
            //sum the value of the first value and second value and store the caryy if any
            sum = x + y + carry;
            carry = sum / 10;
            int newValue = sum % 10;
            //add that value to a new list
            //7
            ListNode var2 = new ListNode(newValue);
            var1.next = var2;
            //move the pointer to the next available
            var1 = var1.next;
            if (l1 != null)
                l1 = l1.next;
            if (l2 != null)
                l2 = l2.next;
        }
        //if there is any left over carry
        if (carry != 0) {
            ListNode var2 = new ListNode(carry);
            var1.next = var2;
        }
        return dummy.next;
    }
}
