/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
public class Solution {

    public ListNode reverse(ListNode head) {
        ListNode n = head, curr = head, prev = null;
        while (n != null) {
            n = n.next;
            curr.next = prev;
            prev = curr;
            curr = n;
        }
        head = prev;
        return head;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        //l1=reverse(l1);
        //l2=reverse(l2);
        int carry = 0;
        ListNode res = new ListNode(0);
        ListNode curr = res;
        while (l1 != null || l2 != null || carry != 0) {
            int sum = (l1 != null ? l1.val : 0) + (l2 != null ? l2.val : 0) + carry;
            carry = sum / 10;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;
            if (l1 != null)
                l1 = l1.next;
            if (l2 != null)
                l2 = l2.next;
        }
        return res.next;
    }
}
