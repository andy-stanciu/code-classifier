/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode Dummy = new ListNode(0);
        ListNode l3 = Dummy;
        int carry = 0;
        while (l1 != null || l2 != null) {
            // Use ternary operation to get values from l1 and l2 or default to 0
            int l1_val = (l1 != null) ? l1.val : 0;
            int l2_val = (l2 != null) ? l2.val : 0;
            int current_sum = l1_val + l2_val + carry;
            carry = current_sum / 10;
            int last_digit = current_sum % 10;
            ListNode newNode = new ListNode(last_digit);
            l3.next = newNode;
            // Move to the next nodes in l1, l2, and l3
            if (l1 != null)
                l1 = l1.next;
            if (l2 != null)
                l2 = l2.next;
            l3 = l3.next;
        }
        // If there\'s any remaining carry, add a new node with the carry value
        if (carry > 0) {
            ListNode new_node = new ListNode(carry);
            l3.next = new_node;
        }
        return Dummy.next;
    }
}
