class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        // Starting with a node having value 0
        ListNode l3 = new ListNode(0);
        // will perform operations on temp bcoz later we need to return l3.next so not modifying it
        ListNode temp = l3;
        int carry = 0;
        while (l1 != null || l2 != null) {
            int x = (l1 != null) ? l1.val : 0;
            int y = (l2 != null) ? l2.val : 0;
            int sum = (x + y + carry) % 10;
            carry = (x + y + carry) / 10;
            // Adding a node to the temp with value as sum
            temp.next = new ListNode(sum);
            // now pointing to the next node
            temp = temp.next;
            // stop incrementing where the list ends
            if (l1 != null)
                l1 = l1.next;
            // stop incrementing where the list ends
            if (l2 != null)
                l2 = l2.next;
        }
        // Important step: there will be cases when only carry will be remaining at the end hence add it as a new node
        if (carry > 0)
            temp.next = new ListNode(carry);
        return l3.next;
    }
}
