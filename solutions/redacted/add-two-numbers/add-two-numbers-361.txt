/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        // Create a dummy node l3 to serve as the start of the result list
        ListNode l3 = new ListNode(0);
        // p will be used to build the new list
        ListNode p = l3;
        int carry = 0;
        // Loop until all nodes are processed and there are no more carry values
        while (l1 != null || l2 != null || carry != 0) {
            int sum = carry;
            // Add value from l1 if available
            if (l1 != null) {
                sum += l1.val;
                l1 = l1.next;
            }
            // Add value from l2 if available
            if (l2 != null) {
                sum += l2.val;
                l2 = l2.next;
            }
            // Calculate new carry and value for the current node
            carry = sum / 10;
            p.next = new ListNode(sum % 10);
            // Move p to the next node
            p = p.next;
        }
        // Return the next of dummy node l3, which points to the start of the result list
        return l3.next;
    }
}
