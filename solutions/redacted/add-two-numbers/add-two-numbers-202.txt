class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        // new list extra space (assigning a random value)
        ListNode itr = new ListNode(-1);
        // just to represent head node
        ListNode head = itr;
        int sum = 0;
        int carry = 0;
        while (// unitl any of linked list is not completed
        l1 != null && l2 != null) {
            // stores only unit(ones) place value
            sum = (l1.val + l2.val + carry) % 10;
            // As we can store only a single digit, due to that we  carry is just to hold the previous value
            // storing in new linked list(box)
            ListNode temp = new ListNode(sum);
            // refrencing to previous node
            itr.next = temp;
            //  assigning for further iterations
            itr = temp;
            // stores only carry or the tens place value
            carry = (l1.val + l2.val + carry) / 10;
            // incrementing the list1
            l1 = l1.next;
            // incrementing the list2
            l2 = l2.next;
        }
        while (l1 != null) {
            sum = (l1.val + carry) % 10;
            // storing in new linked list(box)
            ListNode temp = new ListNode(sum);
            // refrencing to previuos node
            itr.next = temp;
            //  assigning for further iterations
            itr = temp;
            // stores only carry or the tens place value and remaining value should also add for further lists
            carry = (l1.val + carry) / 10;
            l1 = l1.next;
        }
        while (l2 != null) {
            sum = (l2.val + carry) % 10;
            // storing in new linked list(box)
            ListNode temp = new ListNode(sum);
            // refrencing to previuos node
            itr.next = temp;
            //  assigning for further iterations
            itr = temp;
            // stores only carry or the tens place value
            carry = (l2.val + carry) / 10;
            l2 = l2.next;
        }
        if (carry > 0) {
            // storing in new linked list(carry) for next list
            ListNode temp = new ListNode(carry);
            // refrencing to previuos node
            itr.next = temp;
            //  assigning for further iterations
            itr = temp;
            // consider the example 3 for best reference
        }
        // because we are pointing is dummy node on the just behind the iterator itr
        return head.next;
    }
}
