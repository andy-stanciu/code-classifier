/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        int carry = 0;
        ListNode temp1 = l1, temp2 = l2;
        while (temp1 != null && temp2 != null) {
            int temp = temp1.val + temp2.val + carry;
            int sum = temp % 10;
            carry = temp / 10;
            temp1.val = sum;
            temp2.val = sum;
            if (temp1.next == null && temp2.next == null && carry != 0) {
                ListNode novi = new ListNode();
                novi.next = null;
                novi.val = carry;
                temp1.next = novi;
                return l1;
            }
            temp1 = temp1.next;
            temp2 = temp2.next;
        }
        if (temp1 != null) {
            while (temp1 != null) {
                int temp = temp1.val + carry;
                int sum = temp % 10;
                carry = temp / 10;
                temp1.val = sum;
                if (temp1.next == null && carry != 0) {
                    ListNode novi = new ListNode();
                    novi.next = null;
                    novi.val = carry;
                    temp1.next = novi;
                    return l1;
                }
                temp1 = temp1.next;
            }
            return l1;
        } else if (temp2 != null) {
            while (temp2 != null) {
                int temp = temp2.val + carry;
                int sum = temp % 10;
                carry = temp / 10;
                temp2.val = sum;
                if (temp2.next == null && carry != 0) {
                    ListNode novi = new ListNode();
                    novi.next = null;
                    novi.val = carry;
                    temp2.next = novi;
                    return l2;
                }
                temp2 = temp2.next;
            }
            return l2;
        }
        return l1;
    }
}
