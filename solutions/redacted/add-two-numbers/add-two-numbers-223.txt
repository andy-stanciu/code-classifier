/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode n1 = l1, n2 = l2;
        int carry = 0;
        ListNode first = null, last = null;
        while (n1 != null || n2 != null || carry != 0) {
            int sum = 0;
            // If n1 is null means list1 reachs end
            if (n1 != null) {
                sum = sum + n1.val;
                n1 = n1.next;
            }
            // If n2 is null means list2 reachs end
            if (n2 != null) {
                sum = sum + n2.val;
                n2 = n2.next;
            }
            sum += carry;
            carry = sum / 10;
            if (sum >= 10) {
                if (first == null) {
                    last = new ListNode(sum % 10);
                    first = last;
                } else {
                    last.next = new ListNode(sum % 10);
                    last = last.next;
                }
            } else {
                if (first == null) {
                    last = new ListNode(sum % 10);
                    first = last;
                } else {
                    last.next = new ListNode(sum % 10);
                    last = last.next;
                }
            }
        }
        return first;
    }
}
