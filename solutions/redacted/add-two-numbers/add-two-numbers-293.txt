class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        // Create a dummy head for the result list
        ListNode dummyHead = new ListNode(0);
        // Pointer to build the new list
        ListNode tail = dummyHead;
        // Initialize carry to 0
        int carry = 0;
        // Loop until both lists are exhausted and no carry remains
        while (l1 != null || l2 != null || carry != 0) {
            // Get the current values from the lists, defaulting to 0 if the list is exhausted
            int digit1 = (l1 != null) ? l1.val : 0;
            int digit2 = (l2 != null) ? l2.val : 0;
            // Calculate the sum of the two digits and the carry
            int sum = digit1 + digit2 + carry;
            // The digit to store in the new list
            int digit = sum % 10;
            // Update carry for the next iteration
            carry = sum / 10;
            // Create a new node with the calculated digit and attach it to the result list
            ListNode newNode = new ListNode(digit);
            tail.next = newNode;
            // Move the tail pointer forward
            tail = tail.next;
            // Move to the next nodes in the input lists
            l1 = (l1 != null) ? l1.next : null;
            l2 = (l2 != null) ? l2.next : null;
        }
        // Return the next node of dummyHead, which is the head of the result list
        ListNode result = dummyHead.next;
        // Clean up the dummy node
        dummyHead.next = null;
        return result;
    }
}
