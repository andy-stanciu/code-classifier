/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode head = new ListNode();
        int sum = 0;
        int carry = 0;
        if (l1 != null) {
            sum = sum + l1.val;
        }
        if (l2 != null) {
            sum = sum + l2.val;
        }
        if (sum > 9) {
            carry = 1;
        }
        ListNode nn = new ListNode(sum % 10);
        head = nn;
        ListNode temp = head;
        l1 = l1.next;
        l2 = l2.next;
        while (l1 != null || l2 != null) {
            sum = 0;
            if (l1 != null) {
                sum = sum + l1.val;
            }
            if (l2 != null) {
                sum = sum + l2.val;
            }
            sum = sum + carry;
            if (sum > 9) {
                carry = 1;
            } else {
                carry = 0;
            }
            nn = new ListNode(sum % 10);
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = nn;
            if (l1 != null) {
                l1 = l1.next;
            }
            if (l2 != null) {
                l2 = l2.next;
            }
        }
        if (carry == 1) {
            nn = new ListNode(carry);
            temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = nn;
        }
        return head;
    }
}
