class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        // creating an dummy list
        ListNode dummy = new ListNode(0);
        // intialising an pointer
        ListNode curr = dummy;
        // intialising our carry with 0 intiall
        int carry = 0;
        // while loop will run, until l1 OR l2 not reaches null OR if they both reaches null. But our carry has some value in it.
        // We will add that as well into our list
        while (l1 != null || l2 != null || carry == 1) {
            // intialising our sum
            int sum = 0;
            if (l1 != null) {
                // adding l1 to our sum & moving l1
                sum += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                // adding l2 to our sum & moving l2
                sum += l2.val;
                l2 = l2.next;
            }
            // if we have carry then add it into our sum
            sum += carry;
            // if we get carry, then divide it by 10 to get the carry
            carry = sum / 10;
            // the value we\'ll get by moduloing it, will become as new node so. add it to our list
            ListNode node = new ListNode(sum % 10);
            // curr will point to that new node if we get
            curr.next = node;
            // update the current every time
            curr = curr.next;
        }
        // return dummy.next bcz, we don\'t want the value we have consider in it intially!!
        return dummy.next;
    }
}
