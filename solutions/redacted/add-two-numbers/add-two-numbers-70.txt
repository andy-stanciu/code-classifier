/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        int carry = 0;
        //taken head to put this pointer on l1
        ListNode head = l1;
        //prev is used  for case when l1!=l2
        ListNode prev = null;
        /*this loop add the numbers from both the list 
            and work until one of the  list is exhausted */
        while (l1 != null && l2 != null) {
            int sum = l1.val + l2.val + carry;
            l1.val = sum % 10;
            carry = sum / 10;
            prev = l1;
            l1 = l1.next;
            l2 = l2.next;
        }
        //Below Loop is to add the remaining node of l1 CASE:(l2<l1)
        while (l1 != null) {
            int sum = l1.val + carry;
            l1.val = sum % 10;
            carry = sum / 10;
            prev = l1;
            l1 = l1.next;
        }
        //Below Loop is to add the remaining node of l2 CASE:(l2>l1)
        while (l2 != null) {
            int sum = l2.val + carry;
            l2.val = sum % 10;
            prev.next = l2;
            prev = l2;
            l2 = l2.next;
            carry = sum / 10;
        }
        //below if is used for if there is carry left to be added
        if (carry > 0) {
            ListNode temp = new ListNode();
            temp.val = carry;
            prev.next = temp;
            temp.next = null;
        }
        return head;
    }
}
