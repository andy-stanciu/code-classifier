/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        //head node of ans linked list
        ListNode h = l1;
        //previous node
        ListNode prev = null;
        int carry = 0;
        int sum = 0;
        while (l1 != null && l2 != null) {
            //adding values of two linked list and carry
            sum = l1.val + l2.val + carry;
            //storing unit place value in linked list 1
            l1.val = sum % 10;
            //calcualting carry
            carry = sum / 10;
            //moving previous forward
            prev = l1;
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            sum = l1.val + carry;
            l1.val = sum % 10;
            carry = sum / 10;
            prev = l1;
            l1 = l1.next;
        }
        if (l2 != null) {
            //if list 2 is not empty linke list1 to list 2 remaing node
            prev.next = l2;
        }
        while (l2 != null) {
            sum = l2.val + carry;
            l2.val = sum % 10;
            carry = sum / 10;
            prev = l2;
            l2 = l2.next;
        }
        if (carry == 1) {
            //if carry is 1 after processing both lists create a new node with val 1
            ListNode n = new ListNode(1);
            prev.next = n;
        }
        return h;
    }
}
