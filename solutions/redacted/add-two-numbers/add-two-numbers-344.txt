/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        // dummy head to simplify result construction
        ListNode dummyHead = new ListNode(0);
        // Pointer to construct the new list
        ListNode current = dummyHead;
        int carry = 0;
        // Loop until both l1 and l2 are fully traversed, and there\'s no carry left
        while (l1 != null || l2 != null || carry != 0) {
            // Start with carry from previous iteration
            int sum = carry;
            // Add l1\'s value if present
            if (l1 != null) {
                sum += l1.val;
                l1 = l1.next;
            }
            // Add l2\'s value if present
            if (l2 != null) {
                sum += l2.val;
                l2 = l2.next;
            }
            // Update carry (e.g., if sum is 15, carry becomes 1)
            carry = sum / 10;
            // Create a new node with the digit (sum % 10) and move the pointer
            current.next = new ListNode(sum % 10);
            current = current.next;
        }
        // Return the result list, starting from the node after dummyHead
        return dummyHead.next;
    }
}
