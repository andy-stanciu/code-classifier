/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        int carryOver = 0;
        int sum = 0;
        ListNode output = new ListNode();
        ListNode temp = output;
        do {
            sum = l1.val + l2.val + carryOver;
            if (sum > 9) {
                sum -= 10;
                carryOver = 1;
            } else {
                carryOver = 0;
            }
            temp.val = sum;
            l1 = l1.next;
            l2 = l2.next;
            if (l1 != null || l2 != null) {
                temp.next = new ListNode();
                temp = temp.next;
            }
        } while (l1 != null && l2 != null);
        if (l1 != null) {
            do {
                sum = l1.val + carryOver;
                if (sum > 9) {
                    sum -= 10;
                    carryOver = 1;
                } else {
                    carryOver = 0;
                }
                temp.val = sum;
                l1 = l1.next;
                if (l1 != null) {
                    temp.next = new ListNode();
                    temp = temp.next;
                }
            } while (l1 != null);
        } else if (l2 != null) {
            do {
                sum = l2.val + carryOver;
                if (sum > 9) {
                    sum -= 10;
                    carryOver = 1;
                } else {
                    carryOver = 0;
                }
                temp.val = sum;
                l2 = l2.next;
                if (l2 != null) {
                    temp.next = new ListNode();
                    temp = temp.next;
                }
            } while (l2 != null);
        }
        if (carryOver > 0) {
            temp.next = new ListNode(carryOver);
        }
        return output;
    }
}
