/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        int total = 0;
        ListNode head = null;
        ListNode nextnode = null;
        boolean needcarry = false;
        while (l1 != null || l2 != null) {
            int val1 = (l1 != null) ? l1.val : 0;
            int val2 = (l2 != null) ? l2.val : 0;
            total = val1 + val2;
            if (needcarry == true) {
                total = total + 1;
                needcarry = false;
            }
            if (total > 9) {
                total = total - 10;
                needcarry = true;
            }
            ListNode newNode = new ListNode(total);
            if (head == null) {
                head = newNode;
                nextnode = newNode;
            } else {
                nextnode.next = newNode;
                nextnode = newNode;
            }
            total = 0;
            if (l1 != null)
                l1 = l1.next;
            if (l2 != null)
                l2 = l2.next;
        }
        if (needcarry) {
            ListNode newNode = new ListNode(1);
            nextnode.next = newNode;
            nextnode = newNode;
        }
        return head;
    }
}
