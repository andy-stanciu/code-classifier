/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        // Initialize a dummy node to build the result list.
        ListNode temp = new ListNode(0);
        ListNode currentNode = temp;
        // Initialize pointers for the input lists.
        ListNode ptrL1 = l1;
        ListNode ptrL2 = l2;
        // Initialize the carry variable.
        int carry = 0;
        // Iterate through both lists until the end of both.
        while (ptrL1 != null || ptrL2 != null) {
            // Start with the carry from the previous iteration.
            int sum = carry;
            // Add the value from the first list if available.
            if (ptrL1 != null) {
                sum += ptrL1.val;
                ptrL1 = ptrL1.next;
            }
            // Add the value from the second list if available.
            if (ptrL2 != null) {
                sum += ptrL2.val;
                ptrL2 = ptrL2.next;
            }
            // Update the carry for the next iteration.
            carry = sum / 10;
            // Create a new node with the digit and move the result list pointer.
            currentNode.next = new ListNode(sum % 10);
            currentNode = currentNode.next;
        }
        // If there is a carry left after the loop, add a new node for it.
        if (carry > 0) {
            currentNode.next = new ListNode(carry);
        }
        // Return the next node of the dummy node, which is the actual result list.
        return temp.next;
    }
}
