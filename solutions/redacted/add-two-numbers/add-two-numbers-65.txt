/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        boolean carry = false;
        ListNode news = new ListNode();
        ListNode temp = news;
        while (l1 != null && l2 != null) {
            int a = l1.val;
            int b = l2.val;
            int c = 0;
            if (carry) {
                c = 1;
            }
            c += (a + b);
            carry = false;
            if ((int) (c / 10) != 0) {
                carry = true;
                c %= 10;
            }
            ListNode temp1 = new ListNode(c);
            temp.next = temp1;
            temp = temp1;
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            int c = 0;
            if (carry) {
                c = 1;
            }
            c += l1.val;
            carry = false;
            if ((int) (c / 10) != 0) {
                carry = true;
                c %= 10;
            }
            ListNode temp1 = new ListNode(c);
            temp.next = temp1;
            temp = temp1;
            l1 = l1.next;
        }
        while (l2 != null) {
            int c = 0;
            if (carry) {
                c = 1;
            }
            c += l2.val;
            carry = false;
            if ((int) (c / 10) != 0) {
                carry = true;
                c %= 10;
            }
            ListNode temp1 = new ListNode(c);
            temp.next = temp1;
            temp = temp1;
            l2 = l2.next;
        }
        if (carry) {
            ListNode temp1 = new ListNode(1);
            temp.next = temp1;
            temp = temp1;
        }
        return news.next;
    }
}
