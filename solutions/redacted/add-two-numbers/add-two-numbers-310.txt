class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        // Create a dummy head node to simplify handling the result list
        ListNode dummyHead = new ListNode(-1);
        // Pointer to build the result list
        ListNode curr = dummyHead;
        // Store the carry from each sum operation
        int carry = 0;
        // Iterate until both lists are exhausted and no carry is left
        while (l1 != null || l2 != null) {
            // Start with the carry from the previous operation
            int sum = carry;
            // Add values from l1 and l2 if available
            if (l1 != null) {
                sum += l1.val;
                // Move to the next node in l1
                l1 = l1.next;
            }
            if (l2 != null) {
                sum += l2.val;
                // Move to the next node in l2
                l2 = l2.next;
            }
            // Create a new node with the digit value (sum % 10)
            curr.next = new ListNode(sum % 10);
            // Move the pointer to the newly created node
            curr = curr.next;
            // Update the carry for the next iteration (sum / 10)
            carry = sum / 10;
        }
        // If there is any carry left, create a new node for it
        if (carry > 0) {
            curr.next = new ListNode(carry);
        }
        // Return the result list starting from the first real node (after dummyHead)
        return dummyHead.next;
    }
}
