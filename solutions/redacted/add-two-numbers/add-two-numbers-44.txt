/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        //First we created a dummy node to store ans
        ListNode dummy = new ListNode();
        // we have created temp to traverse in dummy node and at last return dummy
        ListNode temp = dummy;
        int carry = 0;
        // Run a loop till atleast one of them is true
        while (l1 != null || l2 != null || carry == 1) {
            int sum = 0;
            // we are checking l1!=null and l2 != null because in while loop we have used OR operation(Any one condition true, it will return true) , So we need to check again internally
            if (l1 != null) {
                //add the data in l1
                sum += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                //add the data in l2
                sum += l2.val;
                l2 = l2.next;
            }
            //add the carry to sum
            sum += carry;
            // calculate the new carry
            carry = sum / 10;
            //create a node to store the value os sum % 10
            ListNode node = new ListNode(sum % 10);
            // add node value in temp.next
            temp.next = node;
            temp = temp.next;
        }
        return dummy.next;
    }
}
