/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        int mind = 0;
        ListNode newNode = null;
        do {
            int val1 = (l1 != null) ? l1.val : 0;
            int val2 = (l2 != null) ? l2.val : 0;
            int val = 0;
            int sum = val1 + val2 + mind;
            if (sum > 9) {
                mind = 1;
                val = sum - 10;
                ;
            } else {
                val = sum;
                mind = 0;
            }
            l1 = (l1 == null) ? null : l1.next;
            l2 = (l2 == null) ? null : l2.next;
            if (newNode == null) {
                newNode = new ListNode(val);
            } else {
                getLastNode(newNode).next = new ListNode(val);
            }
        } while (l1 != null || l2 != null);
        if (mind != 0)
            getLastNode(newNode).next = new ListNode(mind);
        return newNode;
    }

    public static ListNode getLastNode(ListNode l1) {
        if (l1.next == null)
            return l1;
        return getLastNode(l1.next);
    }
}
