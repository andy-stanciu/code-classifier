/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode l3 = new ListNode();
        ListNode head = l3;
        int carry = 0;
        while (l1 != null || l2 != null || carry != 0) {
            if (l1 == null && l2 != null) {
                int current = l2.val + carry;
                carry = current / 10;
                head.next = new ListNode(current % 10);
                head = head.next;
                l2 = l2.next;
            } else if (l2 == null && l1 != null) {
                int current = l1.val + carry;
                carry = current / 10;
                head.next = new ListNode(current % 10);
                head = head.next;
                l1 = l1.next;
            } else if (l2 != null && l1 != null) {
                int current = l1.val + l2.val + carry;
                carry = current / 10;
                head.next = new ListNode(current % 10);
                head = head.next;
                l1 = l1.next;
                l2 = l2.next;
            } else {
                head.next = new ListNode(carry);
                carry = 0;
                head = head.next;
            }
        }
        return l3.next;
    }
}
