/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        int carry = 0;
        ListNode l3;
        ListNode head = null;
        ListNode tail = null;
        ListNode result = null;
        if ((l1.val == 0 && l1.next == null) && (l2.val == 0 && l2.next == null)) {
            return new ListNode(l1.val + l2.val);
        }
        while (l1.next != null || l2.next != null || carry != 0 || ((l1.val != 0) || (l2.val != 0))) {
            int sum = l1.val + l2.val + carry;
            int digit = sum % 10;
            carry = sum / 10;
            if (head == null) {
                result = new ListNode(digit);
                head = result;
                tail = result;
            } else {
                tail.next = new ListNode(digit);
                tail = tail.next;
            }
            l1 = (l1.next != null) ? l1.next : new ListNode(0);
            l2 = (l2.next != null) ? l2.next : new ListNode(0);
        }
        return result;
    }
}
