/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        // Dummy head to simplify list creation
        ListNode dummyHead = new ListNode(0);
        // Pointer to create new nodes in the result list
        ListNode current = dummyHead;
        int carry = 0;
        while (l1 != null || l2 != null) {
            // Use l1\u2019s value or 0 if l1 is exhausted
            int x = (l1 != null) ? l1.val : 0;
            // Use l2\u2019s value or 0 if l2 is exhausted
            int y = (l2 != null) ? l2.val : 0;
            int sum = x + y + carry;
            // Update carry
            carry = sum / 10;
            // Create a new node with the current digit
            current.next = new ListNode(sum % 10);
            // Move to the next node in the result list
            current = current.next;
            // Move to the next node in l1, if available
            if (l1 != null)
                l1 = l1.next;
            // Move to the next node in l2, if available
            if (l2 != null)
                l2 = l2.next;
        }
        // If there is a carry left, add a new node with the carry value
        if (carry > 0) {
            current.next = new ListNode(carry);
        }
        // Return the next node of dummyHead, which is the actual head of the result list
        return dummyHead.next;
    }
}
