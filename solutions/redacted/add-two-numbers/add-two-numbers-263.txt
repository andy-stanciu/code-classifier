/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    /*
    public ListNode reverse(ListNode head){
        ListNode prev=null;
        ListNode cur=head;
        while(cur!=null){
            ListNode temp=cur.next;
            cur.next=prev;
            prev=cur;
            cur=temp;
        }
        return prev;
    }
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head1=l1;
        ListNode head2=l2;
        ListNode head3=new ListNode((head1.val+head2.val)%10);
        
        int carry=(head1.val+head2.val)/10;
        ListNode cur1=head1.next;
        ListNode cur2=head2.next;
        ListNode cur3=head3;
        while(cur1!=null && cur2!=null){
            ListNode temp=new ListNode((cur1.val+cur2.val+carry)%10);
            cur3.next=temp;
            carry=(cur1.val+cur2.val+carry)/10;
            cur1=cur1.next; cur2=cur2.next; cur3=cur3.next;
        }
        
            while(cur1!=null){
                ListNode temp=new ListNode((cur1.val+carry)%10);
                carry=(cur1.val+carry)/10;
                cur3.next=temp;
                cur1=cur1.next;
                cur3=cur3.next;
            }
            
    
            while(cur2!=null){
                ListNode temp=new ListNode((cur2.val+carry)%10);
                carry=(cur2.val+carry)/10;
                cur3.next=temp;
                cur2=cur2.next;
                cur3=cur3.next;
            }
            if(carry>0){
                cur3.next=new ListNode(carry);
            }
        
        //head3=reverse(head3);
        return head3;
        
    }


    */
    public ListNode reverse(ListNode head) {
        ListNode cur = head;
        ListNode prev = null;
        ListNode nextnode = null;
        while (cur != null) {
            nextnode = cur.next;
            cur.next = prev;
            prev = cur;
            cur = nextnode;
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        int carry = 0;
        // l1=reverse(l1);
        //l2=reverse(l2);
        ListNode cur1 = l1;
        ListNode cur2 = l2;
        ListNode newhead = new ListNode(-1);
        ListNode newcur = newhead;
        while (cur1 != null && cur2 != null) {
            int sum = cur1.val + cur2.val + carry;
            carry = sum / 10;
            sum = sum % 10;
            newcur.next = new ListNode(sum);
            newcur = newcur.next;
            cur1 = cur1.next;
            cur2 = cur2.next;
        }
        while (cur1 != null) {
            int sum = cur1.val + carry;
            carry = sum / 10;
            sum = sum % 10;
            newcur.next = new ListNode(sum);
            newcur = newcur.next;
            cur1 = cur1.next;
        }
        while (cur2 != null) {
            int sum = cur2.val + carry;
            carry = sum / 10;
            sum = sum % 10;
            newcur.next = new ListNode(sum);
            newcur = newcur.next;
            cur2 = cur2.next;
        }
        if (carry > 0) {
            newcur.next = new ListNode(carry);
        }
        newhead = newhead.next;
        //newhead=reverse(newhead);
        return newhead;
    }
}
