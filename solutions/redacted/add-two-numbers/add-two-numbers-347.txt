/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode sollutionNode = new ListNode(0);
        sollution(0, l1, l2, sollutionNode);
        return sollutionNode.next;
    }

    private void sollution(int remainder, ListNode node1, ListNode node2, ListNode temp) {
        //		base case
        if (node1 == null && node2 == null) {
            if (remainder != 0)
                temp.next = new ListNode(remainder);
            return;
        }
        int sum = remainder + (node1 == null ? 0 : node1.val) + (node2 == null ? 0 : node2.val);
        if (sum > 9) {
            temp.next = new ListNode(sum % 10);
            sollution(1, (node1 == null ? null : node1.next), (node2 == null ? null : node2.next), temp.next);
        } else {
            temp.next = new ListNode(sum);
            sollution(0, (node1 == null ? null : node1.next), (node2 == null ? null : node2.next), temp.next);
        }
        return;
    }
}
