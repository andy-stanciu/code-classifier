class Solution {

    public boolean method1(int n) {
        //set the slow pointer to n
        int slow = n;
        //and also fast to n
        int fast = n;
        do {
            //increase slow by one step
            slow = square(slow);
            //but increase fast by two step so that if there if loop the fast will catch up to slow
            fast = square(square(fast));
        } while (//if they come equal than loop end
        slow != fast);
        if (slow == 1) {
            //if slow become 1 than return true
            return true;
        }
        //if loop is there than return false
        return false;
    }

    //function to find square addition of digits
    public int square(int num) {
        //to store the result
        int ans = 0;
        while (num > 0) {
            //take the remender from num
            int rem = num % 10;
            //take the square of remender and add to ans
            ans += rem * rem;
            //decrease the num
            num /= 10;
        }
        //repeat the process till num is zero
        return ans;
    }
}
