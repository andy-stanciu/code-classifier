class Solution {

    private int getSquareSum(int n) {
        int currSum = 0;
        while (n != 0) {
            int remainder = (n % 10);
            currSum += remainder * remainder;
            n /= 10;
        }
        return currSum;
    }

    public boolean method1(int n) {
        int slow = getSquareSum(n);
        int fast = getSquareSum(getSquareSum(n));
        while ((slow != fast) && (fast != 1)) {
            slow = getSquareSum(slow);
            fast = getSquareSum(getSquareSum(fast));
        }
        return fast == 1;
    }
}
/*
 Faster Detection of 1: Since the fast pointer moves at twice the speed of slow, it can reach 1 faster if the number is a happy number. If fast reaches 1, it means the sequence will eventually converge to 1, so you can confidently return true immediately.
*/
