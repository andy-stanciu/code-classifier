/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode method1(ListNode head) {
        if (head == null) {
            return null;
        }
        // Initialize slow and fast pointers
        ListNode slowPtr = head;
        ListNode fastPtr = head;
        // Phase 1: Detect if a cycle exists
        while (fastPtr != null && fastPtr.next != null) {
            slowPtr = slowPtr.next;
            fastPtr = fastPtr.next.next;
            if (slowPtr == fastPtr) {
                // Cycle detected, find the start of the cycle
                ListNode startPtr = head;
                while (startPtr != slowPtr) {
                    startPtr = startPtr.next;
                    slowPtr = slowPtr.next;
                }
                // The start of the cycle
                return startPtr;
            }
        }
        // No cycle detected
        return null;
    }
}
