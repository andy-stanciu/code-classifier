/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode method1(ListNode head) {
        // Base case: empty or single node list
        if (head == null || head.next == null)
            return null;
        // Initialize slow and fast pointers
        ListNode slow = head;
        ListNode fast = head;
        // Traverse the list with two pointers
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            // If slow and fast meet, find the start of the cycle
            if (fast == slow)
                return firstNode(head, fast);
        }
        // If no cycle is detected, return null
        return null;
    }

    // Helper function to find the start of the cycle
    private ListNode firstNode(ListNode head, ListNode fast) {
        // Move both pointers one step at a time until they meet
        while (head != fast) {
            head = head.next;
            fast = fast.next;
        }
        return head;
    }
}
