/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode method1(ListNode head) {
        if (head == null || head.next == null) {
            // No cycle if list is empty or has only one node
            return null;
        }
        ListNode hare = head;
        ListNode turtle = head;
        // First step: Detect if there is a cycle
        while (hare != null && hare.next != null) {
            hare = hare.next.next;
            turtle = turtle.next;
            // Cycle detected
            if (turtle == hare) {
                // Second step: Find the entry point of the cycle
                // Reset turtle to head
                turtle = head;
                while (turtle != hare) {
                    turtle = turtle.next;
                    hare = hare.next;
                }
                // This is the start of the cycle
                return turtle;
            }
        }
        // No cycle
        return null;
    }
}
