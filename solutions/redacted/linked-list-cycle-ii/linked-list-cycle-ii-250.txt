/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode method1(ListNode head) {
        if (head == null || head.next == null)
            return null;
        // Solution using extra space
        // List<ListNode> list = new ArrayList<>();
        // ListNode temp = head;
        // while(temp != null){
        //     if(list.contains(temp)) return temp;
        //     list.add(temp);
        //     temp = temp.next;
        // }
        // return null;
        // Solution without using extra space
        ListNode slow = head;
        ListNode fast = head;
        boolean var1 = false;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                var1 = true;
                break;
            }
        }
        if (var1 == false) {
            return null;
        }
        slow = head;
        while (slow != fast) {
            slow = slow.next;
            fast = fast.next;
        }
        return slow;
    }
}
