/**
 * Definition for singly-linked list.
 * class ListNode {
 * int val;
 * ListNode next;
 * ListNode(int x) {
 * val = x;
 * next = null;
 * }
 * }
 */
public class Solution {

    public ListNode method1(ListNode head) {
        if (head == null || head.next == null) {
            return null;
        }
        ListNode slow = head;
        ListNode fast = head;
        // First step: determine if there is a cycle
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                // Cycle detected
                ListNode s1 = head;
                while (s1 != slow) {
                    s1 = s1.next;
                    slow = slow.next;
                }
                return s1;
            }
        }
        //  // If no cycle is detected
        // if (fast == null || fast.next == null) {
        //     return null;
        // }
        // // Second step: find the start of the cycle
        // ListNode s1 = head;
        // ListNode s2 = slow;
        // while (s1 != s2) {
        //     s1 = s1.next;
        //     s2 = s2.next;
        // }
        // The start of the cycle
        return null;
    }
}
