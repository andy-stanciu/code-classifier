/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode method1(ListNode head) {
        //Initializing the pointer to head node.
        ListNode slow = head;
        ListNode fast = head;
        //Moving the slow pointer 1 node ahead and fast pointer 2
        //node ahead untill the fast pointer reaches the end.
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                //if pointer meet there exists a cycle
                //Reset the slow pointer to head again and now moving
                //both pointer 1 node ahead unless the meet again.
                slow = head;
                while (fast != slow) {
                    fast = fast.next;
                    slow = slow.next;
                }
                //Return the node where they meet again and the cycle begins
                return slow;
            }
        }
        //No cycle found just return null
        return null;
    }
}
