/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode method1(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        int len = 0;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                len = calculateLen(slow);
                System.out.println(len);
                break;
            }
        }
        if (len == 0) {
            return null;
        }
        return findStart(len, head);
    }

    public int calculateLen(ListNode slow) {
        ListNode curr = slow.next;
        int len = 1;
        while (curr != slow) {
            curr = curr.next;
            len++;
        }
        return len;
    }

    public ListNode findStart(int len, ListNode head) {
        ListNode p1 = head;
        ListNode p2 = head;
        while (len > 0) {
            p2 = p2.next;
            len--;
        }
        while (p1 != p2) {
            p1 = p1.next;
            p2 = p2.next;
        }
        return p1;
    }
}
