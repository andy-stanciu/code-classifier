public class Solution {

    public ListNode method1(ListNode head) {
        // Handle edge cases
        if (head == null || head.next == null) {
            return null;
        }
        ListNode slow = head;
        ListNode fast = head;
        // Step 1: Detect if there is a cycle using Floyd\'s Tortoise and Hare algorithm
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                // Step 2: Find the start node of the cycle
                ListNode var1 = head;
                while (var1 != slow) {
                    var1 = var1.next;
                    slow = slow.next;
                }
                return var1;
            }
        }
        // No cycle detected
        return null;
    }
}
