public class Solution {

    public ListNode method1(ListNode head) {
        if (head == null || head.next == null) {
            // No cycle if the list is empty or has only one node
            return null;
        }
        ListNode slow = head;
        ListNode fast = head;
        // Detect cycle using Floyd\'s Tortoise and Hare algorithm
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                // Cycle detected
                break;
            }
        }
        // If there\'s no cycle, return null
        if (fast == null || fast.next == null) {
            return null;
        }
        // Reset one pointer to head and move both pointers at the same pace
        slow = head;
        while (slow != fast) {
            slow = slow.next;
            fast = fast.next;
        }
        // The meeting point is the start of the cycle
        return slow;
    }
}
