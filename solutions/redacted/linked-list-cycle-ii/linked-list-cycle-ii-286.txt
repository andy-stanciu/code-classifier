/**
 * Definition for singly-linked list.
 * class ListNode {
 * int val;
 * ListNode next;
 * ListNode(int x) {
 * val = x;
 * next = null;
 * }
 * }.
 */
public class Solution {

    public ListNode method1(ListNode head) {
        if (head == null || head.next == null)
            return null;
        ListNode slow = head;
        ListNode fast = head;
        // we alway put condition for fast node in while because it also considers slow
        // inside it
        // so if fast is not null, slow will definetly not be null
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast)
                break;
        }
        if (slow != fast)
            return null;
        ListNode headStarter = head;
        while (headStarter != fast) {
            fast = fast.next;
            headStarter = headStarter.next;
        }
        return headStarter;
    }
}
