/**
 * Definition for singly-linked list.
 * class ListNode {
 * int val;
 * ListNode next;
 * ListNode(int x) {
 * val = x;
 * next = null;
 * }
 * }
 */
public class Solution {

    /**
     * @param head The head of the linked list.
     * @return The node where the cycle begins, or null if there is no cycle.
     *
     * Time Complexity: O(n)
     * Space Complexity: O(1)
     */
    public ListNode method1(ListNode head) {
        if (head == null || head.next == null) {
            return null;
        }
        // Initialize slow and fast pointers
        ListNode slow = head;
        ListNode fast = head;
        boolean var1 = false;
        // Move slow pointer one step and fast pointer two steps
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            // If they meet, there is a cycle
            if (fast == slow) {
                var1 = true;
                break;
            }
        }
        // If there is a cycle, find the start of the cycle
        if (var1) {
            slow = head;
            while (slow != fast) {
                slow = slow.next;
                fast = fast.next;
            }
            return slow;
        }
        // No cycle found
        return null;
    }
}
