/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode method1(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                //take fast pointer to head
                fast = head;
                while (slow != fast) {
                    //until they become equal so we can find entry point
                    //move fast pointer only one step
                    fast = fast.next;
                    //move slow pointer as same rate
                    slow = slow.next;
                    //loop will break if they become equal and then return fast or slow that will be entry point of loop
                }
                return fast;
            }
        }
        //if fast or fast.next is null then no loop
        return null;
    }
}
