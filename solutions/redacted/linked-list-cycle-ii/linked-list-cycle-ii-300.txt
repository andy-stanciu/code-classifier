/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode method1(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        //first detect the loop in given linked list
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (fast == slow) {
                break;
            }
        }
        //check if the we reached the end of the linked list
        //id yes return null;
        if (fast == null || fast.next == null) {
            return null;
        }
        //if no return the first element;
        slow = head;
        while (slow != fast) {
            slow = slow.next;
            fast = fast.next;
        }
        // here you can return any one because both will be at same point
        return fast;
    }
}
