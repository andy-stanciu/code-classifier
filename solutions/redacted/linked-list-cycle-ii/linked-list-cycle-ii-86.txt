/**
 * Definition for singly-linked list.
 * class ListNode {
 * int val;
 * ListNode next;
 * ListNode(int x) {
 * val = x;
 * next = null;
 * }
 * }
 */
public class Solution {

    public ListNode method1(ListNode head) {
        //If head equal null
        // the do nothing
        if (head == null)
            return null;
        //create slow and fast pointer
        ListNode slow = head;
        ListNode fast = head;
        boolean var1 = false;
        // If there will be a cycle then fast.next.next never be null
        // So, Do not confuse with the condition
        // if there\'s no cycle then, fast.next will be null
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            // if cycleDetected detected move one step forword for fast pointer as well
            if (var1)
                fast = fast.next;
            else
                // else move 2 steps forword.
                fast = fast.next.next;
            if (slow == fast && !var1) {
                // if slow == fast first time that time, toggle the cycleDetected
                // i.e : cycleDetected  = true
                slow = head;
                var1 = true;
            }
            if (slow == fast && var1)
                // Second time return
                return slow;
        }
        // not found cycle
        return null;
    }
}
