public class Solution {

    public ListNode method1(ListNode head) {
        if (!method2(head))
            return null;
        int s = method3(head);
        ListNode back = head;
        ListNode ahead = head;
        for (int i = 0; i < s; i++) {
            ahead = ahead.next;
        }
        while (ahead != back) {
            ahead = ahead.next;
            back = back.next;
        }
        return ahead;
    }

    //detect cycle
    private Boolean method2(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow)
                return true;
        }
        return false;
    }

    //cycle length
    private int method3(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow) {
                ListNode temp = slow;
                int count = 0;
                do {
                    temp = temp.next;
                    count++;
                } while (temp != slow);
                return count;
            }
            ;
        }
        return -1;
    }
}
