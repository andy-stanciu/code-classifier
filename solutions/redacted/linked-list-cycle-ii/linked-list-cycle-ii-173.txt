/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode method1(ListNode head) {
        // Map<ListNode , Integer> map = new HashMap<>();
        // ListNode temp = head ;
        // while(temp != null)
        // {
        //     if(map.containsKey(temp))
        //     {
        //         return temp ;
        //     }
        //     map.put(temp , 1);
        //     temp = temp.next ;
        // }
        // return null ;
        ListNode slow = head, fast = head, temp = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast)
                return meetingNode(slow, temp);
        }
        return null;
    }

    public ListNode meetingNode(ListNode slow, ListNode temp) {
        while (temp != slow) {
            temp = temp.next;
            slow = slow.next;
        }
        return temp;
    }
}
