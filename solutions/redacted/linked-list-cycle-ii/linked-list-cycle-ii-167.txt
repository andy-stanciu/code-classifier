/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode method1(ListNode head) {
        if (head == null)
            return null;
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                //cycle detected
                break;
            }
        }
        // if no cycle are found then return null
        while (fast == null || fast.next == null) {
            return null;
        }
        //reset the slow pointe
        slow = head;
        while (slow != fast) {
            slow = slow.next;
            // Move both pointers one step at a time
            fast = fast.next;
        }
        // Both pointers meet at the start of the cycle
        return slow;
    }
}
