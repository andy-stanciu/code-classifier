class Solution {

    public void method1(int[] nums1, int m, int[] nums2, int n) {
        // We have two sorted arrays:
        // nums1 = [1,2,3,0,0,0], m = 3 (the first m elements are the actual values)
        // nums2 = [2,5,6], n = 3 (n elements are actual values)
        // The goal is to merge nums2 into nums1 and sort in-place without extra sorting steps.
        // Initialize pointers for the last elements of nums1 and nums2
        // Pointer for the last valid element in nums1 (ignores trailing zeros)
        int i = m - 1;
        // Pointer for the last element in nums2
        int j = n - 1;
        // Pointer for the last position in nums1 (end of the array)
        int k = m + n - 1;
        // Merge nums1 and nums2 from the end to the beginning to avoid overwriting elements in nums1
        while (i >= 0 && j >= 0) {
            // Continue until one of the arrays is exhausted
            if (nums1[i] > nums2[j]) {
                // If the current element in nums1 is larger, place it at the end of nums1
                // Place nums1[i] at index k
                nums1[k] = nums1[i];
                // Move pointer i one step to the left
                i--;
            } else {
                // If the current element in nums2 is larger or equal, place it at the end of nums1
                // Place nums2[j] at index k
                nums1[k] = nums2[j];
                // Move pointer j one step to the left
                j--;
            }
            // Move pointer k one step to the left after placing the element
            k--;
        }
        // If there are remaining elements in nums2, copy them into nums1
        // No need to copy elements from nums1, as they are already in place
        while (j >= 0) {
            // Copy remaining elements from nums2 into nums1
            nums1[k] = nums2[j];
            // Move j one step to the left
            j--;
            // Move k one step to the left
            k--;
        }
    }
}
