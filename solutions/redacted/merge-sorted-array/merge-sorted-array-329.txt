class Solution {

    public void method1(int[] nums1, int m, int[] nums2, int n) {
        // Set pointers for nums1, nums2, and the last position in nums1
        // pointer for the last element in the valid part of nums1
        int p1 = m - 1;
        // pointer for the last element in nums2
        int p2 = n - 1;
        // pointer for the last position in nums1
        int p = m + n - 1;
        // Traverse nums1 and nums2 from the back and compare their elements
        while (p1 >= 0 && p2 >= 0) {
            if (nums1[p1] <= nums2[p2]) {
                // If nums2\'s element is larger or equal, place it at the current position of nums1
                nums1[p] = nums2[p2];
                p2--;
            } else {
                // If nums1\'s element is larger, place it at the current position of nums1
                nums1[p] = nums1[p1];
                p1--;
            }
            // Move the pointer for the merged array
            p--;
        }
        // If there are remaining elements in nums2, copy them into nums1
        while (p2 >= 0) {
            nums1[p] = nums2[p2];
            p2--;
            p--;
        }
    }
}
