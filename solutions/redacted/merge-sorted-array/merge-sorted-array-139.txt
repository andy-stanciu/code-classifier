class Solution {

    public void method1(int[] nums1, int m, int[] nums2, int n) {
        if (m == 0) {
            // First check if \'m\' is 0 or not
            for (// If Yes, then run a loop that traverse \'n\' times
            // If Yes, then run a loop that traverse \'n\' times
            // If Yes, then run a loop that traverse \'n\' times
            // And add all the elements of \'nums2\' to \'nums1\'
            int i = 0; i < n; i++) nums1[i] = nums2[i];
        }
        // Else, first initialize some variables
        // A var to point the (m-1)th index of the \'nums1\' array
        int i = m - 1;
        // A var to point the last index of the \'nums2\' array
        int j = n - 1;
        // A var to point the last index of the \'nums1\' array
        int k = m + j;
        while (i >= 0 && j >= 0) {
            // Now, run a loop till both \'i\' and \'j\' is not 0
            if (nums1[i] > nums2[j]) {
                // Check, if the \'i\'th element of \'nums1\' is greater than the \'j\'th element of \'nums2\' or not
                // If Yes, then update the \'k\'th element of \'nums1\' with the \'i\'th element of \'nums1\'
                nums1[k] = nums1[i--];
            } else {
                // Else
                // Update the \'k\'th element of \'nums1\' with the \'j\'th element of \'nums2\'
                nums1[k] = nums2[j--];
            }
            // Decrease \'k\' to move to the previous index
            k--;
        }
        while (// If \'j\' is still greater than 0; then it means that not all the elements of \'nums2\' are not added to \'nums1\'
        // So, keep adding them to the \'k\'th element of \'nums1\'
        j >= 0) nums1[k--] = nums2[j--];
    }
}
