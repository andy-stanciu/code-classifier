class Solution {

    public void method1(int[] nums1, int m, int[] nums2, int n) {
        /* M-2 optimized approach-> instead of using one more array, we can point nums1 array through such an index that it isn\'t be a hurdle for nums1 array.
		i+j+1 is that index, thorugh this we can fill the nums1 array from last. 
		And hence, time-> O(n+m), space-> O(1)[no extra space].
       */
        int i = m - 1, j = n - 1;
        while (i >= 0 && j >= 0) {
            if (nums1[i] > nums2[j]) {
                nums1[i + j + 1] = nums1[i];
                i--;
            } else if (nums1[i] < nums2[j]) {
                nums1[i + j + 1] = nums2[j];
                j--;
            } else {
                nums1[i + j + 1] = nums1[i];
                i--;
                nums1[i + j + 1] = nums2[j];
                j--;
            }
        }
        while (j >= 0) {
            nums1[i + j + 1] = nums2[j];
            j--;
        }
        while (i >= 0) {
            nums1[i + j + 1] = nums1[i];
            i--;
        }
        /* M-1 Brute force approach-> using extra memory to merge and then again copying back to the nums1. Hence, time-> O(n2), space-> O(n+m).
        */
        //         int[] ans = new int[m+n];
        //         int i = 0, j = 0, k = 0;
        //         while(i < m && j < n){
        //             if(nums1[i] < nums2[j]){
        //                 ans[k] = nums1[i];
        //                 k++;
        //                 i++;
        //             }else if(nums1[i] > nums2[j]){
        //                 ans[k] = nums2[j];
        //                 k++;
        //                 j++;
        //             }else{
        //                 ans[k] = nums1[i];
        //                 k++;
        //                 ans[k] = nums2[j];
        //                 k++;
        //                 i++;
        //                 j++;
        //             }
        //         }
        //         while(j < n){
        //             ans[k] = nums2[j];
        //             j++;
        //             k++;
        //         }
        //         while(i < m){
        //             ans[k] = nums1[i];
        //             i++;
        //             k++;
        //         }
        //         for(int l = 0; l < m+n; l++){
        //             nums1[l] = ans[l];
        //         }
    }
}
