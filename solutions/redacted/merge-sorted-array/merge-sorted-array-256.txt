class Solution {

    public void method1(int[] nums1, int m, int[] nums2, int n) {
        // First Approach: Using a new array and sorting
        // int[] nums3 = new int[m + n];
        // for (int i = 0; i < m; i++) {
        //     nums3[i] = nums1[i];
        // }
        // for (int i = 0; i < n; i++) {
        //     nums3[m + i] = nums2[i];
        // }
        // Arrays.sort(nums3);
        // for (int i = 0; i < m + n; i++) {
        //     nums1[i] = nums3[i];
        // }
        // Second Approach: Two-pointer technique
        // int i = m - 1;
        // int j = n - 1;
        // int k = m + n - 1;
        // while(i>=0 && j>=0){
        //     if(nums1[i]>nums2[j]){
        //         nums1[k]=nums1[i];
        //         i--;
        //     }
        //     else{
        //         nums1[k]=nums2[j];
        //         j--;
        //     }
        //     k--;
        // }
        // while(j>=0){
        //     nums1[k]=nums2[j];
        //     j--;
        //     k--;
        // }
        // Third Approach: Using built-in functions
        System.arraycopy(nums2, 0, nums1, m, n);
        Arrays.sort(nums1);
    }
}
