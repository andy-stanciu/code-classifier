class Solution {

    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> list = new ArrayList<>();
        for (int i = 1; i <= numRows; i++) {
            ArrayList<Integer> l = new ArrayList<>();
            l = OptimalNthRow(i, l);
            list.add(l);
        }
        return list;
    }

    // public static int Generate(int row,int col){
    //     int n=row-1;
    //     int r=col-1;
    //     int res=1;
    //     for(int i=0;i<r;i++){
    //         res=res*(n-i);
    //         res=res/(i+1);
    //     }
    //     return res;
    // }
    public static ArrayList<Integer> OptimalNthRow(int n, ArrayList<Integer> list) {
        int ans = 1;
        list.add(ans);
        for (int i = 1; i < n; i++) {
            ans = ans * (n - i);
            ans = ans / (i);
            list.add(ans);
        }
        return list;
    }
    // public static ArrayList<Integer> PrintNth(int n,ArrayList<Integer> list){
    //     for(int i=1;i<=n;i++){
    //         list.add(Generate(n, i));
    //     }
    //     return list;
    // }
}
