class Solution {

    public List<List<Integer>> generate(int numRows) {
        // Initialize the list to hold all rows of Pascal\'s Triangle
        List<List<Integer>> ans = new ArrayList<>();
        // Loop through each row from 0 to numRows-1
        for (int i = 0; i < numRows; i++) {
            // Initialize a list to hold the values for the current row
            List<Integer> val = new ArrayList<>();
            // Initialize combination value to 1 (as nC0 is always 1)
            int combination = 1;
            // Loop through each column from 0 to i (inclusive)
            for (int j = 0; j <= i; j++) {
                // Correct the loop condition to j <= i
                // Add the current combination value to the row
                val.add(combination);
                // Update combination value for the next element in the row
                // Use (j + 1) to avoid division by zero
                combination = combination * (i - j) / (j + 1);
            }
            // Add the completed row to the list of rows
            ans.add(val);
        }
        return ans;
    }
}
