class Solution {

    public List<List<Integer>> generate(int numRows) {
        // O(numRows^2) time | O(numRows^2) space
        List<List<Integer>> myList = new ArrayList<>();
        // base case, first element is always [1]
        myList.add(new ArrayList<>());
        myList.get(0).add(1);
        for (int i = 1; i < numRows; i++) {
            List<Integer> row = new ArrayList<>();
            List<Integer> prev = myList.get(i - 1);
            // first element is always [1]
            row.add(1);
            // middle element = top-left + top
            for (int j = 1; j < i; j++) row.add(prev.get(j - 1) + prev.get(j));
            // last element is always [1]
            row.add(1);
            myList.add(row);
        }
        return myList;
    }
}
