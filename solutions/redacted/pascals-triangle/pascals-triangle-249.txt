class Solution {

    public List<List<Integer>> generate(int numRows) {
        // Base case: If numRows is 0, return an empty list.
        if (numRows == 0)
            // Return an empty list since no rows are needed.
            return new ArrayList<>();
        // This block is redundant and can be removed, as the base case is already
        // handled.
        if (numRows == 0) {
            if (numRows == 0) {
                List<List<Integer>> result = new ArrayList<>();
                // This handles numRows == 1 but is unnecessary here.
                result.add(Arrays.asList(1));
                return result;
            }
        }
        // Recursive call to generate the triangle up to (numRows - 1)
        List<List<Integer>> prevRows = generate(numRows - 1);
        // Create a new row for the current numRows
        List<Integer> currRow = new ArrayList<>();
        // Iterate through the current row to build it based on the previous rows
        for (int i = 0; i < numRows; i++) {
            // The first and last elements of each row are always 1
            if (i == 0 || i == numRows - 1)
                currRow.add(1);
            else {
                // Each inner element is the sum of the two elements directly above it
                currRow.add(prevRows.get(numRows - 2).get(i - 1) + prevRows.get(numRows - 2).get(i));
            }
        }
        // Add the current row to the previously generated rows
        prevRows.add(currRow);
        // Return the complete list of rows
        return prevRows;
    }
}
