/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int max = -10000;

    public int method1(TreeNode root) {
        max = -10000;
        maxFinder(root);
        return max;
    }

    public int maxFinder(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int var1 = root.left == null ? -1000 : maxFinder(root.left);
        int var2 = root.right == null ? -1000 : maxFinder(root.right);
        // System.out.println("rootval   " + root.val);
        // System.out.println("  LtreeMax  " + LTreeMax);
        // System.out.println("  rtreeMax  " + RTreeMax);
        int max1 = var1 + var2 + root.val;
        int max2 = var1 + root.val;
        int max3 = var2 + root.val;
        int var3 = Math.max(max2, Math.max(max3, root.val));
        // System.out.println("   maxSubTree  " + maxSubtree);
        max = Math.max(max, Math.max(var3, Math.max(max1, Math.max(var1, var2))));
        return var3;
    }
}
