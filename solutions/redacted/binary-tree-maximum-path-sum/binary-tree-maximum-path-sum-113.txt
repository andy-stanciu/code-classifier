/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    // Initialize maxi to the smallest possible integer value
    private int maxi = Integer.MIN_VALUE;

    private int method1(TreeNode root) {
        if (root == null)
            return 0;
        // Calculate the maximum path sum for left and right subtrees
        int var1 = Math.max(0, method1(root.left));
        int var2 = Math.max(0, method1(root.right));
        // Update the maximum path sum considering the current node as the highest point
        maxi = Math.max(maxi, var1 + var2 + root.val);
        // Return the maximum path sum including the current node
        return root.val + Math.max(var1, var2);
    }

    public int method2(TreeNode root) {
        method1(root);
        return maxi;
    }
}
