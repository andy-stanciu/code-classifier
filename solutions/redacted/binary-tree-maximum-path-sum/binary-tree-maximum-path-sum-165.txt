/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    //This variable is responsible for holding the max path sum
    private int var1;

    public Solution() {
        this.var1 = Integer.MIN_VALUE;
    }

    public int method1(TreeNode root) {
        var1(root);
        return this.var1;
    }

    private int var1(TreeNode root) {
        //Base Case - if root is null, it does not contribute to the path, hence 0
        if (root == null)
            return 0;
        //Only include - left subtree if it results in the overall gain in path sum, if negative this needs to be ignored.
        int var2 = Math.max(var1(root.left), 0);
        //Only include - right subtree if it results in the overall gain in path sum, if negative this needs to be ignored.
        int var3 = Math.max(var1(root.right), 0);
        //Re-validate the current sum including the root and its left and right subtrees
        this.var1 = Math.max(this.var1, root.val + var2 + var3);
        //Traversing up or while backtracking - only include the path with the max contribution to the overall gain.
        return root.val + Math.max(var2, var3);
    }
}
