class Solution {

    // to maintain the actual maximum sum of path
    int max = Integer.MIN_VALUE;

    public int method1(TreeNode root) {
        method2(root);
        return max;
    }

    private int method2(TreeNode node) {
        // base case
        if (node == null) {
            return 0;
        }
        // traverse left and right subtrees
        int left = method2(node.left);
        int right = method2(node.right);
        // get the best of left subtree + current node\'s val vs. right subtree + current node\'s val vs. current node\'s val
        // as this value will ensure either of the path (left, right or just from the current node itself but not both the children)
        // we return this to the parent
        int leftOrRightOrCurrent = Math.max(Math.max(left + node.val, right + node.val), node.val);
        // maximum of current node\'s val vs. all the above possibilities to see if this is actually the max path?
        // best max path upto this node is this (localMaxima)
        int localMaxima = Math.max(left + right + node.val, leftOrRightOrCurrent);
        // overall maximum
        // compare the localMaxima with overall tree\'s max value, this will be our answer
        max = Math.max(localMaxima, max);
        // return to parent as discussed earlier
        return leftOrRightOrCurrent;
    }
}
