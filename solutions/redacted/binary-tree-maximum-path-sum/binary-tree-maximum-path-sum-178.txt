class Solution {

    // global variable to store the maximum path sum
    private int var1;

    // Helper function to recursively calculate the maximum path sum starting from the current node
    private int method1(TreeNode root) {
        if (root == null) {
            return 0;
        }
        // Calculate maximum path sum for the left and right subtrees
        // max path sum starting from left child
        int var2 = Math.max(0, method1(root.left));
        // max path sum starting from right child
        int var3 = Math.max(0, method1(root.right));
        // Update the global maxSum by considering the path through the current node
        var1 = Math.max(var1, var2 + var3 + root.val);
        // Return the maximum path sum starting from the current node (either left or right subtree + current node value)
        return Math.max(var2, var3) + root.val;
    }

    // Main function to find the maximum path sum in the binary tree
    public int method2(TreeNode root) {
        // Initialize maxSum to the smallest possible integer
        var1 = Integer.MIN_VALUE;
        // Call helper function to recursively calculate maximum path sum
        method1(root);
        return var1;
    }
}
