/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    //tree can have negative values as well
    int max = Integer.MIN_VALUE;

    public int method1(TreeNode root) {
        method2(root);
        //return the max calculated path
        return max;
    }

    public int method2(TreeNode root) {
        if (root == null)
            return 0;
        int var1 = method2(root.left);
        int var2 = method2(root.right);
        //if
        // 20 current sum will be leftsum+rightsum + root.val
        //15 7
        if (var1 < 0 && var2 < 0) {
            max = Math.max(max, root.val);
            return root.val;
        } else if (var1 < 0)
            max = Math.max(max, root.val + var2);
        else if (var2 < 0)
            max = Math.max(max, root.val + var1);
        else
            max = Math.max(max, root.val + var1 + var2);
        /**
         *        for the parent return the max from left or right subtree
         *        as it can only take 1 path
         *          -10
         *              20
         *            15  7
         *            only path is -10 + 20 + max(15,7)
         */
        return root.val + Math.max(var1, var2);
    }
}
