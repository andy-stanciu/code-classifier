/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Class1 {

    int val;

    Class1 left;

    Class1 right;

    Class1(int val) {
        this.val = val;
    }
}

public class Solution {

    private int var1 = Integer.MIN_VALUE;

    public int method1(Class1 root) {
        method2(root);
        return var1;
    }

    private int method2(Class1 node) {
        if (node == null) {
            return 0;
        }
        int leftGain = Math.max(method2(node.left), 0);
        int rightGain = Math.max(method2(node.right), 0);
        int var2 = node.val + leftGain + rightGain;
        var1 = Math.max(var1, var2);
        return node.val + Math.max(leftGain, rightGain);
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        Class1 root1 = new Class1(1);
        root1.left = new Class1(2);
        root1.right = new Class1(3);
        System.out.println("Max Path Sum: " + solution.method1(root1));
        Class1 root2 = new Class1(-10);
        root2.left = new Class1(9);
        root2.right = new Class1(20);
        root2.right.left = new Class1(15);
        root2.right.right = new Class1(7);
        System.out.println("Max Path Sum: " + solution.method1(root2));
    }
}
