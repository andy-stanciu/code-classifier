/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
/*
  * Idea: At evry node, if thats to be included in the final path, 
   1. Its either a root node  =>  maxSumTillNode = Math.max(root.val, root.val+l+r);
   2. Its either at node in the path => Math.max(root.val, root.val+Math.max(l,r));
   3. Its ending of that path => above cases will cover this case

   Max SUM would be max of the above 3 cases, and checking for all the nodes.
 */
class Solution {

    int var1 = Integer.MIN_VALUE;

    public int method1(TreeNode root) {
        method2(root);
        return var1;
    }

    int method2(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int l = method2(root.left);
        int r = method2(root.right);
        int var2 = Math.max(root.val, root.val + l + r);
        int var3 = Math.max(root.val, root.val + Math.max(l, r));
        var1 = Math.max(var1, Math.max(var3, var2));
        return var3;
    }
}
