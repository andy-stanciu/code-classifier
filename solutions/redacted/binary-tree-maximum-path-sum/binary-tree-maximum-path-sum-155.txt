public class Solution {

    private int var1;

    public int method1(TreeNode root) {
        // Initialize maxSum with the smallest possible value
        var1 = Integer.MIN_VALUE;
        solve(root);
        return var1;
    }

    private int solve(TreeNode root) {
        if (root == null) {
            return 0;
        }
        // Recursively find the maximum path sum of the left and right subtrees
        int left = solve(root.left);
        int right = solve(root.right);
        // Calculate the maximum path sum including the current node
        // (1)
        int neecheHiMilGayaAnswer = left + right + root.val;
        // Calculate the maximum path sum starting from the current node to any node in its subtree
        // (2)
        int koiEkAcha = Math.max(left, right) + root.val;
        // The maximum path sum considering only the current node itself
        // (3)
        int onlyRootAcha = root.val;
        // Update the global maximum path sum
        var1 = Math.max(var1, Math.max(neecheHiMilGayaAnswer, Math.max(koiEkAcha, onlyRootAcha)));
        // Return the maximum path sum starting from the current node
        return Math.max(koiEkAcha, onlyRootAcha);
    }
}
