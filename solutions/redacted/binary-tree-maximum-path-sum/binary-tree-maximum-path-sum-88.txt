/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int var1 = Integer.MIN_VALUE;

    public int method1(TreeNode root) {
        int var2 = var1(root);
        return Math.max(root.val, Math.max(var2, var1));
    }

    int var1(TreeNode root) {
        if (root == null)
            return 0;
        if (root.left == null && root.right == null) {
            // check to see if single node is greater than the global max sum
            this.var1 = Math.max(root.val, var1);
            return root.val;
        }
        int var3 = var1(root.right);
        int var4 = var1(root.left);
        int var5 = root.val;
        if (var4 >= 0) {
            var5 = var5 + var4;
        }
        if (var3 >= 0) {
            var5 = var5 + var3;
        }
        // check to see if sum using this node as root is greater than max sum of all roots
        this.var1 = Math.max(var5, var1);
        // figure out the max sum of using this node as a node in a branch from a parent.
        int max = Math.max(var4, var3);
        if (max >= 0) {
            return max + root.val;
        } else {
            return root.val;
        }
    }
}
