class Solution {

    private int var1 = Integer.MIN_VALUE;

    private int maxStartingFromRoot(TreeNode root) {
        if (root == null) {
            return 0;
        }
        //#1 max sum \'starting\' from the left node of the root. In given example max starting from 15
        int var2 = maxStartingFromRoot(root.left);
        //#2 max sum \'starting\' from the right node of the root. Max starting from 7
        int var3 = maxStartingFromRoot(root.right);
        //#3- Max of self and self+whichever of left right is greater. 20+15
        int var4 = Math.max(root.val, root.val + Math.max(var2, var3));
        //Max of \'starting\' from self (20+15) and \'including self in path with left and right children\' (15+20+7).
        int var5 = Math.max(var4, root.val + var2 + var3);
        //Update globalMaxSum which is maintaining max for the whole tree (outside of this recursion)
        var1 = Math.max(var1, var5);
        //Return only max of \'starting\' from current node. so that the parent (-10) can form a path without repeating current node (20) twice!
        return var4;
    }

    public int method1(TreeNode root) {
        maxStartingFromRoot(root);
        return var1;
    }
}
