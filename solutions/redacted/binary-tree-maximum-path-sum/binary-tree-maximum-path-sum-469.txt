/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int var1;

    public int method1(TreeNode root) {
        var1 = Integer.MIN_VALUE;
        method2(root);
        return var1;
    }

    private int method2(TreeNode node) {
        if (node == null) {
            return 0;
        }
        //Calculate the meximum path sum starting from the left and right children
        int leftMax = Math.max(0, method2(node.left));
        int rightMax = Math.max(0, method2(node.right));
        //Return the golbel maxSum considering the current node as a part of the path
        var1 = Math.max(var1, leftMax + rightMax + node.val);
        //Return the maximun path sum including the current node for the parent calculation
        return Math.max(leftMax, rightMax) + node.val;
    }
}
