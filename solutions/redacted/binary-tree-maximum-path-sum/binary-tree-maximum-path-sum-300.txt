/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int method1(TreeNode root) {
        // recusrsive solve left path sum and right path sum and check by math.max whcih one is maximum abd return
        int[] var1 = new int[] { Integer.MIN_VALUE };
        method2(root, var1);
        return var1[0];
    }

    private int method2(TreeNode root, int[] param1) {
        if (root == null) {
            return 0;
        }
        //avoid negitive
        int var2 = Math.max(0, method2(root.left, param1));
        //avoid negitive
        int var3 = Math.max(0, method2(root.right, param1));
        // update
        param1[0] = Math.max(param1[0], var2 + var3 + root.val);
        // return the maximum path sum till current node
        return Math.max(var2, var3) + root.val;
    }
}
