/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    private int var1;

    public int method1(TreeNode root) {
        var1 = Integer.MIN_VALUE;
        solve(root);
        return var1;
    }

    private int solve(TreeNode root) {
        if (root == null) {
            return 0;
        }
        // max(0, solve(root.left)) to handle negative sums
        int l = Math.max(solve(root.left), 0);
        // max(0, solve(root.right)) to handle negative sums
        int r = Math.max(solve(root.right), 0);
        // maximum path sum including both children and root
        int neeche_hi_milgaya_answer = l + r + root.val;
        // maximum path sum including one child and root
        int koi_ek_acha = Math.max(l, r) + root.val;
        // maximum path sum including only the root node
        int only_root_acha = root.val;
        var1 = Math.max(var1, Math.max(neeche_hi_milgaya_answer, Math.max(koi_ek_acha, only_root_acha)));
        // Return the maximum path sum that can be obtained starting from the root and
        // extending downwards
        return Math.max(koi_ek_acha, only_root_acha);
    }
}
