/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    private int var1 = Integer.MIN_VALUE;

    public int method1(TreeNode root) {
        method2(root);
        return var1;
    }

    private int method2(TreeNode node) {
        if (node == null) {
            return 0;
        }
        // Calculate the maximum path sum of the left and right subtrees.
        int left = Math.max(0, method2(node.left));
        int right = Math.max(0, method2(node.right));
        // Calculate the current path sum including the current node.
        int var2 = node.val + left + right;
        // Update the global maximum path sum.
        var1 = Math.max(var1, var2);
        // Return the maximum path sum "ending" at the current node.
        return node.val + Math.max(left, right);
    }
}
