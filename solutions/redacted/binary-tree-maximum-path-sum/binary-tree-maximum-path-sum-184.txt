/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int var1 = Integer.MIN_VALUE;

    public int method1(TreeNode root) {
        maxGain(root);
        return var1;
    }

    private int maxGain(TreeNode node) {
        if (node == null) {
            return 0;
        }
        // Recursive call on the left and right children
        int leftGain = Math.max(maxGain(node.left), 0);
        int rightGain = Math.max(maxGain(node.right), 0);
        // Current path sum including the current node
        int var2 = node.val + leftGain + rightGain;
        // Update maxSum if the current path sum is greater
        var1 = Math.max(var1, var2);
        // Return the maximum gain that the current node and one of its subtrees can contribute
        return node.val + Math.max(leftGain, rightGain);
    }
}
