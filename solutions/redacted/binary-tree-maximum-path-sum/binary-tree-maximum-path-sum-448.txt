/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int var1 = Integer.MIN_VALUE;

    // so this is the golabal value here
    public int method1(TreeNode root) {
        // so this is the mix of the question diameter and the path sum here
        // so it give like at each level take the max value and update to the golabal value
        max(root);
        return var1;
    }

    public int max(TreeNode node) {
        if (node == null)
            return 0;
        // so now in the else case here
        int left = max(node.left);
        int right = max(node.right);
        // like if the value is negative then we have to just igonore that path
        // so now if it is negative then we have to take the zero value for that
        left = Math.max(0, left);
        right = Math.max(0, right);
        // so now we have to get the sum here
        int var2 = left + right + node.val;
        // so now we have to update the max value of both max sum and sum
        var1 = Math.max(var1, var2);
        // so now it is being updated here so
        // so at the end we have to return the value of
        //  so now we are returning for the recursion call here
        // as here left and right me node.val ko add kerke return karna hai and
        // in sum left + right both ko add krke return kara rahe hai ham log
        return Math.max(left, right) + node.val;
    }
}
