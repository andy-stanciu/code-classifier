/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int globalMax = Integer.MIN_VALUE;

    public int method1(TreeNode root) {
        method2(root);
        return globalMax;
    }

    public int method2(TreeNode root) {
        if (root == null) {
            return 0;
        } else {
            int left = method2(root.left);
            int right = method2(root.right);
            // Find largest value ending at the current node
            int endsHere = Math.max(left + root.val, right + root.val);
            // Largest path ending here doesn\'t necessarily need to start from root
            endsHere = Math.max(endsHere, root.val);
            // Find largest sum including paths that bends through the current node
            int bestThrough = Math.max(endsHere, left + right + root.val);
            // Update global maximum
            globalMax = Math.max(globalMax, bestThrough);
            return endsHere;
        }
    }
}
