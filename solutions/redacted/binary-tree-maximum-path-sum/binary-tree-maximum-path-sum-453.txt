/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int method1(TreeNode root) {
        AtomicInteger var1 = new AtomicInteger(Integer.MIN_VALUE);
        solve(root, var1);
        return var1.get();
    }

    public int solve(TreeNode root, AtomicInteger var1) {
        if (root == null)
            return 0;
        int l = solve(root.left, var1);
        int r = solve(root.right, var1);
        // checking inside the subtree, left and right can be negative
        // so check max(r.val, r.val+max(l,r))
        int temp = Math.max(root.val + Math.max(l, r), root.val);
        // if whole subtree contains path sum
        int ans = Math.max(temp, root.val + l + r);
        //update the max sum
        var1.set(Math.max(var1.get(), ans));
        return temp;
    }
}
