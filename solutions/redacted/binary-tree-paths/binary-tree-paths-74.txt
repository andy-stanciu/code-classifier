class Solution {

    private List<String> var1 = new ArrayList<>();

    private void helper(TreeNode root, StringBuilder sb) {
        if (root == null) {
            return;
        }
        // Store the length before appending the current node\'s value
        int len = sb.length();
        sb.append(root.val);
        // Check if the current node is a leaf node
        if (root.left == null && root.right == null) {
            // Add the path to paths list
            var1.add(sb.toString());
        } else {
            // Add the arrow for non-leaf nodes
            sb.append("->");
            // Traverse the left subtree
            helper(root.left, sb);
            // Traverse the right subtree
            helper(root.right, sb);
        }
        // Remove the last appended value and arrow(s) to backtrack
        sb.delete(len, sb.length());
    }

    public List<String> method1(TreeNode root) {
        helper(root, new StringBuilder());
        return var1;
    }
}
