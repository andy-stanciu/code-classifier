/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> method1(TreeNode root) {
        List<String> ans = new ArrayList();
        backtracking(ans, new StringBuilder(), root);
        return ans;
    }

    private void backtracking(List<String> ans, StringBuilder sb, TreeNode node) {
        if (node.left == null && node.right == null) {
            ans.add(sb.toString() + node.val);
            return;
        }
        String path = node.val + "->";
        sb.append(path);
        if (node.left != null) {
            backtracking(ans, sb, node.left);
        }
        if (node.right != null) {
            backtracking(ans, sb, node.right);
        }
        sb.delete(sb.length() - path.length(), sb.length());
    }
}
