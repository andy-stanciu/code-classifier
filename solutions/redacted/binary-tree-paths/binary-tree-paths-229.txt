/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {

    public List<String> method1(TreeNode root) {
        // Initialize a list to store the paths
        List<String> var1 = new ArrayList<>();
        // Check if the tree is not empty
        if (root != null) {
            // Start dfs traversal
            dfs(root, "", var1);
        }
        // Return the list of paths
        return var1;
    }

    // Recursive helper function for DFS traversal
    private static void dfs(TreeNode node, String path, List<String> var1) {
        // If it is a leaf, add the current path to the list
        if (node.left == null && node.right == null) {
            var1.add(path + node.val);
            return;
        }
        // If the current node has a left child, recursively call DFS for the left child
        if (node.left != null) {
            dfs(node.left, path + node.val + "->", var1);
        }
        // If the current node has a right child, recursively call DFS for the right child
        if (node.right != null) {
            dfs(node.right, path + node.val + "->", var1);
        }
    }
}
