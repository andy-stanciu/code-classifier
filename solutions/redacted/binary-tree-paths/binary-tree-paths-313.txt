/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> method1(TreeNode root) {
        List<String> result = new ArrayList<>();
        var dfs = new Object() {

            BiConsumer<Stack<Integer>, TreeNode> func = (stack, node) -> {
                if (node == null)
                    return;
                stack.add(node.val);
                if (node.left == null && node.right == null) {
                    result.add(stack.stream().map(Object::toString).collect(Collectors.joining("->")));
                }
                this.func.accept(stack, node.left);
                this.func.accept(stack, node.right);
                stack.pop();
            };
        };
        dfs.func.accept(new Stack<>(), root);
        return result;
    }
}
