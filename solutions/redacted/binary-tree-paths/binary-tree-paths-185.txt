/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    final static StringBuilder arrow = new StringBuilder("->");

    public List<String> method1(TreeNode root) {
        List<String> ans = new LinkedList<>();
        StringBuilder path = new StringBuilder();
        method2(ans, path, root);
        return ans;
    }

    static void method2(List<String> ans, StringBuilder s, TreeNode node) {
        if (node == null) {
            return;
        }
        // Note down the length of the string before adding the current element to s
        int len = s.length();
        // Append the current node\'s value
        s.append(node.val);
        // If it is a leaf node, add the string to the ans
        if (node.left == null && node.right == null) {
            ans.add(s.toString());
            s.setLength(len);
            return;
        }
        // Since it is not a leaf node, add an arrow
        s.append(arrow);
        // Pass the current string path to the left sub-tree and the right subtree
        method2(ans, s, node.left);
        method2(ans, s, node.right);
        // Remove the current element before returning
        s.setLength(len);
    }
}
