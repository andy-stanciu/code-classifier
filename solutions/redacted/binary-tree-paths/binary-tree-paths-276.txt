/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<String> list = new ArrayList<>();

    public List<String> method1(TreeNode root) {
        StringBuilder s = new StringBuilder();
        return path(root, s);
    }

    public List<String> path(TreeNode root, StringBuilder s) {
        // if(root==null){
        //     list.add(s.toString());
        // }
        // s.append(Integer.toString(root.val));
        // s.append("->");
        //  path(root.left,s);
        // path(root.right,s);
        if (root.left == null && root.right == null) {
            //   s.append("->");
            s.append(Integer.toString(root.val));
            list.add(s.toString());
            s.delete(s.length() - Integer.toString(root.val).length(), s.length());
            // return list;
        }
        s.append(Integer.toString(root.val));
        if (root.left != null) {
            s.append("->");
            path(root.left, s);
            s.delete(s.length() - 2, s.length());
        }
        if (root.right != null) {
            s.append("->");
            path(root.right, s);
            s.delete(s.length() - 2, s.length());
        }
        s.delete(s.length() - Integer.toString(root.val).length(), s.length());
        return list;
    }
}
