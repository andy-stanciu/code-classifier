/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> method1(TreeNode root) {
        List<String> ans = new ArrayList<>();
        if (root == null) {
            return ans;
        }
        // USING STRING AND ITS FEATURE OF IMMUTIBILITY....
        // String s ="";
        // solvePath(root  , ans , s);
        // return ans;
        // USING STRINGBUILDER AND BACKTRACKING............
        StringBuilder path = new StringBuilder();
        solvePath(root, ans, path);
        return ans;
    }

    // public void solvePath(TreeNode root , List<String> ans , String s){
    //     if(root == null){
    //         return;
    //     }
    //     s += root.val;
    //     if(root.left == null && root.right == null){
    //         ans.add(s);
    //     }
    //     else{
    //         s += "->";
    //         solvePath(root.left , ans , s);
    //         solvePath(root.right , ans ,s);
    //     }
    // }
    public void solvePath(TreeNode root, List<String> ans, StringBuilder s) {
        if (root == null) {
            return;
        }
        int len = s.length();
        s.append(root.val);
        if (root.left == null && root.right == null) {
            ans.add(s.toString());
        } else {
            s.append("->");
            solvePath(root.left, ans, s);
            solvePath(root.right, ans, s);
        }
        // backtrack to the original length of stringBuilder...
        s.setLength(len);
    }
}
