/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<String> res = new ArrayList<>();

    List<Integer> path = new ArrayList<>();

    public List<String> method1(TreeNode root) {
        dfs(root);
        return res;
    }

    public void dfs(TreeNode node) {
        path.add(node.val);
        if (node.left != null) {
            dfs(node.left);
            //backtrack
            path.removeLast();
        }
        if (node.right != null) {
            dfs(node.right);
            //backtrack
            path.removeLast();
        }
        if (node.right == null && node.left == null) {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < path.size() - 1; i++) {
                sb.append(path.get(i));
                sb.append("->");
            }
            sb.append(path.get(path.size() - 1));
            res.add(sb.toString());
            return;
        }
    }
}
