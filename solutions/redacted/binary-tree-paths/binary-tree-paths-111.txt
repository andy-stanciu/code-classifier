/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    public List<String> method1(TreeNode root) {
        List<String> li = new ArrayList<>();
        if (root != null) {
            method2(root, li, "");
        }
        return li;
    }

    public void method2(TreeNode root, List<String> li, String sb) {
        if (root.left == null && root.right == null) {
            li.add(sb + root.val);
        }
        if (root.left != null) {
            method2(root.left, li, sb + root.val + "->");
        }
        if (root.right != null) {
            method2(root.right, li, sb + root.val + "->");
        }
    }
}
// public class Solution {
//     public List binaryTreePaths(TreeNode root) {
//         List res = new ArrayList<>();
//         StringBuilder sb = new StringBuilder();
//         if (root == null) return res;
//         dfs(root, res, sb);
//         return res;
//     }
//     private void dfs(TreeNode root, List ls, StringBuilder accum) {
//         if (root == null) return;
//         accum.append((accum.length() == 0 ? "" : "->") + root.val);
//         int len = accum.length();
//         if (root.left == null && root.right == null) {
//             ls.add(accum.toString());
//             return;
//         }
//         dfs(root.left, ls, accum);
//         accum.setLength(len);
//         dfs(root.right, ls, accum);
//         accum.setLength(len);
//     }
// }
