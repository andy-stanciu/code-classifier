/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> method1(TreeNode root) {
        List<String> var1 = new ArrayList<>();
        if (root == null) {
            return var1;
        }
        List<Integer> path = new ArrayList<>();
        List<List<Integer>> allPath = new ArrayList<>();
        dfs(root, path, allPath);
        var1 = allPath.stream().map(x -> x.stream().map(String::valueOf).collect(Collectors.joining("->"))).collect(Collectors.toList());
        return var1;
    }

    public void dfs(TreeNode root, List<Integer> path, List<List<Integer>> allPath) {
        if (root == null) {
            return;
        }
        path.add(root.val);
        if (root.left == null && root.right == null) {
            allPath.add(new ArrayList<>(path));
        }
        dfs(root.left, path, allPath);
        dfs(root.right, path, allPath);
        path.remove(path.size() - 1);
    }
}
