/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> method1(TreeNode root) {
        List<List<Integer>> bigg = new ArrayList<>();
        List<Integer> res = new ArrayList<>();
        solve(root, bigg, res);
        List<String> ans = new ArrayList<>();
        for (List<Integer> p : bigg) {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < p.size(); i++) {
                if (i < p.size() - 1) {
                    sb.append(p.get(i) + "->");
                } else {
                    sb.append(p.get(i));
                }
            }
            ans.add(sb.toString());
        }
        return ans;
    }

    public void solve(TreeNode root, List<List<Integer>> bigg, List<Integer> res) {
        if (root == null)
            return;
        if (root.left == null && root.right == null) {
            res.add(root.val);
            List<Integer> bres = new ArrayList<>(res);
            bigg.add(bres);
            res.remove(res.size() - 1);
            return;
        }
        res.add(root.val);
        solve(root.left, bigg, res);
        solve(root.right, bigg, res);
        res.remove(res.size() - 1);
    }
}
