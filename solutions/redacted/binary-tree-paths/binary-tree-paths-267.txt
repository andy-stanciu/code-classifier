/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> method1(TreeNode root) {
        List<String> resultPathList = new ArrayList<>();
        StringBuilder var1 = new StringBuilder();
        // update resultPathList by passing it to the helper method
        method2(root, resultPathList, var1);
        return resultPathList;
    }

    // main idea: recurision and backtracking
    private void method2(TreeNode root, List<String> resultPathList, StringBuilder var1) {
        // 1. null node: termination condition for a null node
        // not just for the initial but the ending condition of the leaf node
        if (root == null) {
            return;
        }
        // 2: leaf node termination condition: leaf node
        if (root.left == null && root.right == null) {
            // append the leaf node value to pathString wthout "->"
            var1.append(root.val);
            resultPathList.add(var1.toString());
            return;
        }
        // 3: Node with at least one/two child
        // if root is not null: append its value to the pathString with "->"
        var1.append(root.val);
        var1.append("->");
        int len = var1.length();
        method2(root.left, resultPathList, var1);
        // KEY: \u56DE\u6EAF\uFF0C\u64A4\u9500\u5904\u7406\u7ED3\u679C
        var1.setLength(len);
        // \u8FD9\u91CC\u8981\u66F4\u65B0pathString
        method2(root.right, resultPathList, var1);
    }
}
