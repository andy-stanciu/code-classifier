class Solution {

    public List<String> method1(TreeNode root) {
        List<String> var1 = new ArrayList<>();
        List<TreeNode> subpath = new ArrayList<>();
        while (root != null) {
            if (root.left != null) {
                subpath.add(root);
                root = root.left;
                continue;
            }
            if (root.right != null) {
                subpath.add(root);
                root = root.right;
                continue;
            }
            final var path = Stream.concat(subpath.stream(), Stream.of(root)).map(node -> String.valueOf(node.val)).collect(Collectors.joining("->"));
            var1.add(path);
            TreeNode newRoot = null;
            while (!subpath.isEmpty()) {
                TreeNode previous = subpath.remove(subpath.size() - 1);
                TreeNode current = root;
                if (previous.right != null && previous.right != current) {
                    subpath.add(previous);
                    newRoot = previous.right;
                    break;
                } else {
                    root = previous;
                }
            }
            root = newRoot;
        }
        return var1;
    }
}
