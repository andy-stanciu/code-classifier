class Solution {

    List<String> res = new ArrayList<>();

    public List<String> method1(TreeNode root) {
        backtrack(new StringBuilder(), root);
        return res;
    }

    private void backtrack(StringBuilder sb, TreeNode root) {
        if (root == null) {
            return;
        }
        // Save current length of StringBuilder
        int len = sb.length();
        // Append current node\'s value
        sb.append(root.val);
        // If current node is leaf node, add path to result
        if (root.left == null && root.right == null) {
            res.add(sb.toString());
        } else {
            // current node has children, append "->" and explore them
            sb.append("->");
            backtrack(sb, root.left);
            backtrack(sb, root.right);
        }
        // Backtrack: restore StringBuilder to previous state
        sb.setLength(len);
    }
}
