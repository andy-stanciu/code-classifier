/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> method1(TreeNode root) {
        List<String> result = new ArrayList();
        List<Integer> slate = new ArrayList();
        dfs(root, result, slate);
        return result;
    }

    private void dfs(TreeNode node, List<String> result, List<Integer> slate) {
        if (node != null) {
            slate.add(node.val);
            if (node.left != null)
                dfs(node.left, result, slate);
            if (node.right != null)
                dfs(node.right, result, slate);
            if (node.left == null && node.right == null) {
                result.add(getString(slate));
                slate.remove(slate.size() - 1);
                return;
            }
            slate.remove(slate.size() - 1);
        }
    }

    private String getString(List<Integer> slate) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < slate.size(); i++) {
            sb.append(slate.get(i)).append(i != slate.size() - 1 ? "->" : "");
        }
        return sb.toString();
    }
}
