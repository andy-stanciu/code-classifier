/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<String> s = new ArrayList<>();

    public List<String> method1(TreeNode root) {
        if (root == null)
            return s;
        StringBuilder dummy = new StringBuilder();
        dfs(root, dummy);
        return s;
    }

    public void dfs(TreeNode node, StringBuilder last) {
        if (node.left == null && node.right == null) {
            last.append(String.valueOf(node.val));
            s.add(last.toString());
        } else {
            if (node.left == null && node.right != null) {
                last.append(String.valueOf(node.val));
                last.append("->");
                dfs(node.right, last);
            } else if (node.left != null && node.right == null) {
                last.append(String.valueOf(node.val));
                last.append("->");
                dfs(node.left, last);
            } else {
                last.append(String.valueOf(node.val));
                last.append("->");
                StringBuilder copy = new StringBuilder(last);
                dfs(node.left, copy);
                dfs(node.right, last);
            }
        }
    }
}
