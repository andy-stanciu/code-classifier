/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> method1(TreeNode root) {
        final List<String> result = new ArrayList<>();
        pathFinder(root, result, new StringBuilder());
        return result;
    }

    // Helper method to find all paths from root to leaf
    public void pathFinder(TreeNode root, final List<String> result, StringBuilder sb) {
        // Record the length of StringBuilder before appending the current node
        final int lengthBeforeAppending = sb.length();
        // If the current node is null, return immediately
        if (root == null)
            return;
        // Check if the current node is a leaf node
        if (root.left == null && root.right == null) {
            // If it\'s a leaf node, append its value and add the path to the result list
            sb.append(root.val);
            result.add(sb.toString());
        } else {
            // If it\'s not a leaf node, append its value and continue the path with an arrow
            sb.append(root.val);
            sb.append("->");
            // Recursively call pathFinder for the left child
            pathFinder(root.left, result, sb);
            // Recursively call pathFinder for the right child
            pathFinder(root.right, result, sb);
        }
        // Reset the StringBuilder to its state before the current node was appended
        sb.setLength(lengthBeforeAppending);
    }
}
