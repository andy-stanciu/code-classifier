class Solution {

    public String method1(String[] strs) {
        int minLength = strs[0].length();
        String minStr = strs[0];
        int clLength = 0;
        //find smallest String and save its\' length
        for (int i = 0; i < strs.length; i++) {
            if (strs[i].length() < minLength) {
                minLength = strs[i].length();
                minStr = strs[i];
            }
        }
        //iterate over all Strings and compare their characters at same positions
        //if characters are different, we return previously discovered "same substring"
        //else we increase `clLength` counter to increase "same substring" length
        for (int i = 0; i < minLength; i++) {
            for (int j = 0; j < strs.length; j++) {
                if (minStr.charAt(i) != strs[j].charAt(i)) {
                    //"break" if characters are different
                    return minStr.substring(0, clLength);
                }
            }
            clLength++;
        }
        //two specific cases
        if (clLength == 0) {
            return "";
        } else {
            return minStr.substring(0, clLength);
        }
    }
}
