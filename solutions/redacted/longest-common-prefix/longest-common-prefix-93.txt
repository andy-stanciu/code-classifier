/**
 * Vertical Scanning or Column Scanning. Here character at the same index is
 * compared. If the character at the same index in all input strings is same,
 * add it to the prefix. Else, return the found prefix.
 *
 * Using substring instead of string builder to save on space.
 *
 * Time Complexity: O(N * minLen)
 *
 * Space Complexity: O(1)
 *
 * N = Number of strings in strs. minLen = Length of the smallest string.
 */
class Solution {

    public String method1(String[] strs) {
        if (strs == null) {
            throw new IllegalArgumentException("Input array is null");
        }
        int numStrs = strs.length;
        if (numStrs == 0 || "".equals(strs[0]) || "".equals(strs[numStrs - 1])) {
            return "";
        }
        String firstStr = strs[0];
        if (numStrs == 1) {
            return firstStr;
        }
        int var1 = 0;
        // No need to find the minLen as this nested loop will exit when we reach the
        // end of minLen string.
        while (var1 < firstStr.length()) {
            char c = firstStr.charAt(var1);
            for (int i = 1; i < numStrs; i++) {
                if (strs[i].length() <= var1 || strs[i].charAt(var1) != c) {
                    return firstStr.substring(0, var1);
                }
            }
            var1++;
        }
        return firstStr.substring(0, var1);
    }
}
