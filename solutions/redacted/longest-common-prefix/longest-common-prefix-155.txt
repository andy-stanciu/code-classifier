class Solution {

    public String method1(String[] strs) {
        String lcp = strs[0];
        // Find the string {lcp} with the shortest length, as the longest common prefix cannot be greater than the smallest string.
        for (int j = 0; j < strs.length; j++) {
            if (strs[j].length() < lcp.length()) {
                lcp = strs[j];
            }
        }
        int i = 0;
        // For each string in the array {strs} and if current longest common prefix {lcp} has some characters.
        while (i < strs.length && lcp.length() > 0) {
            // find the lcp among current {lcp} and {strs[i]}
            lcp = method2(lcp, strs[i]);
            // increment i to the next string.
            i++;
        }
        return lcp;
    }

    private String method2(String s1, String s2) {
        // Take the smaller string among {lcp} and {strs[i]}
        String smallerStr = s1.length() < s2.length() ? s1 : s2;
        // Iterate over characters of both
        for (int i = 0; i < smallerStr.length(); i++) {
            // If a mismatch founds, return the substring before the mismatch.
            if (s1.charAt(i) != s2.charAt(i)) {
                return smallerStr.substring(0, i);
            }
        }
        return smallerStr;
    }
}
