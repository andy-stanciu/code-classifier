class Solution {

    public String method1(String[] strs) {
        //if strs has no strings, immediatley return empty string
        if (strs.length == 0) {
            return "";
        }
        String var1 = strs[0];
        //for each string in strs go along each char and the moment you find a char that doesn\'t match with common prefix clice the end off string
        for (String arrayString : strs) {
            //make a copy of arrayString to prevent mutations/side effects
            String string = String.valueOf(arrayString);
            //if string is shorter than commonPrefix slice off prefix until the commonprefix is as long as string otherwise do the same to the string and make it as long as the common prefix(we only need to check any potential similarities, not the whole string)
            if (var1.length() > string.length()) {
                var1 = var1.substring(0, string.length());
            } else if (string.length() > var1.length()) {
                string = string.substring(0, var1.length());
            }
            //continue searching through string until we find a char that doesn\'t match and if so slice off the end of commonPrefix then break
            for (int i = 0; i < string.length(); i++) {
                //if commonPrefix == 0 then break the loop immediatley
                if (var1.length() == 0) {
                    break;
                }
                //if a character of the string is the same as the common prefix continue the loop, otherwise slice commonPrefix and break this loop
                if (var1.charAt(i) == string.charAt(i)) {
                    continue;
                } else {
                    var1 = var1.substring(0, i);
                    break;
                }
            }
        }
        //return the remaining common prefix that made it through the entire array
        return var1;
    }
}
