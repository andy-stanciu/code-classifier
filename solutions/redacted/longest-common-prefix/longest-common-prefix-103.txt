//Approach 1 using string concatenation
class Solution {

    public String method1(String[] strs) {
        Arrays.sort(strs);
        String first = strs[0];
        String second = strs[strs.length - 1];
        String result = "";
        for (int i = 0; i < first.length(); i++) {
            if (first.charAt(i) == second.charAt(i))
                result += first.charAt(i);
            else
                break;
        }
        return result;
    }
}

//Approach 2 using StringBuilder | runtime 1ms
class Solution {

    public String method1(String[] strs) {
        Arrays.sort(strs);
        String first = strs[0];
        String second = strs[strs.length - 1];
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < first.length(); i++) {
            if (first.charAt(i) == second.charAt(i))
                result.append(first.charAt(i));
            else
                break;
        }
        return result.toString();
    }
}

//Approach 3 : 0ms runtime| 100% faster
class Solution {

    public String method1(String[] strs) {
        if (strs.length == 0)
            return "";
        String var1 = strs[0];
        for (int i = 1; i < strs.length; i++) {
            while (strs[i].indexOf(var1) != 0) {
                var1 = var1.substring(0, var1.length() - 1);
            }
        }
        return var1;
    }
}
