class Solution {

    public boolean method1(int[] nums) {
        int arrayLength = nums.length;
        int oneElementBeforelast = arrayLength - 1;
        if (arrayLength == 1) {
            // always return true since length 1 is always reachable
            return true;
        }
        if (nums[0] == 0) {
            return false;
        }
        // compute the maximum position the first index can jump to
        // all the position until the max position is reachable by first index
        int var1 = nums[0] + 0;
        // we start from position index=1 since first position index=0 is always reachable
        for (int i = 1; i < oneElementBeforelast; i++) {
            // before any action, i need to know whether I am reachable by previous index
            // if my current index is smaller or equal to maxJump, meaning it is reachable
            if (i <= var1) {
                // if current index is reachable, then we can compute the new maxJump position
                var1 = Math.max(i + nums[i], var1);
            }
        }
        return var1 >= oneElementBeforelast;
    }
}
