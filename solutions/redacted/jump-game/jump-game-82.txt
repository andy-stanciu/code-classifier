class Solution {

    public boolean method1(int[] nums) {
        // reachable denoting the target index where we have to reach after taking jumps
        int reachable = nums.length - 1;
        // initally max jump = 0
        int var1 = 0;
        for (// iterating till n - 1 to reach n.
        // iterating till n - 1 to reach n.
        // iterating till n - 1 to reach n.
        int i = 0; i < nums.length - 1; i++) {
            // adding current index with its jump to get max jump every time
            var1 = Math.max(nums[i] + i, var1);
            // if nums[i] == 0 and our max jump is equal to i means we can do any jump from here because current nums[i] jump is 0.
            if (nums[i] == 0 && var1 == i) {
                // returning false.
                return false;
            }
        }
        if (// if maxJump is less than reachable index means we can not jump till last index
        var1 < reachable) {
            // returning false
            return false;
        }
        // return true because either our maxJump is equal to reachable or greater than reachable
        return true;
    }
}
