class Solution {

    public boolean method1(String s) {
        //Removing all the non-Alphanumeric characters
        // "A man, a plan, a canal: Panama" ----> "AmanaplanacanalPanama"
        String temp = s.replaceAll("[^A-Za-z0-9]", "");
        //Converting All UpperCase character to lowercase
        //"AmanaplanacanalPanama" --->"amanaplanacanalpanama"
        temp = temp.toLowerCase();
        //Calling Helper Function with String temp, first index i.e. 0 and last index i.e. temp.length()-1
        return method2(temp, 0, temp.length() - 1);
    }

    //we are comparing First and last index character of string e.g "racecar" -->first index char is \'r\' and last index char is also \'r\' which is equal
    //now from first index+1 to last index-1 i.e. "aceca" recursion will handle or give us the answer
    //if the characters are not equal e.g "abcecb" first index char is \'a\' which is not equal to last index char i.e. \'b\' simply return false
    public boolean method2(String s, int firstIndex, int lastIndex) {
        //BASE CASE:- if we have only single character in string e.g. "a" it is always palindrome so return true and also return true if firstIndex > lastIndex
        //that mean we have checked all the characters that\'s why our firstIndex cross the lastIndex value
        if (firstIndex >= lastIndex)
            return true;
        //our task --> check if firstIndex character is not equal to lastindex character simply return false
        if (s.charAt(firstIndex) != s.charAt(lastIndex))
            return false;
        //if firstIndex character and lastindex character is equal recursion will handle from firstIndex+1 to lastIndex-1
        return method2(s, firstIndex + 1, lastIndex - 1);
    }
}
