class Solution {

    public boolean method1(String s) {
        // Check if the input string is empty. An empty string is considered a palindrome.
        if (s.isEmpty()) {
            return true;
        }
        // Initialize two pointers: one at the start of the string and one at the end.
        int start = 0;
        int last = s.length() - 1;
        // Loop until the two pointers meet or cross each other.
        while (start <= last) {
            // Get the characters at the current positions of the two pointers.
            char currFirst = s.charAt(start);
            char currLast = s.charAt(last);
            // If the character at the \'start\' pointer is not a letter or digit, move the \'start\' pointer to the right.
            if (!Character.isLetterOrDigit(currFirst)) {
                start++;
                // If the character at the \'last\' pointer is not a letter or digit, move the \'last\' pointer to the left.
            } else if (!Character.isLetterOrDigit(currLast)) {
                last--;
            } else {
                // If both characters are letters or digits, compare them after converting to lowercase.
                if (Character.toLowerCase(currFirst) != Character.toLowerCase(currLast)) {
                    // If the characters do not match, the string is not a palindrome.
                    return false;
                }
                // Move both pointers towards the center.
                start++;
                last--;
            }
        }
        // If the loop completes without finding any mismatches, the string is a palindrome.
        return true;
    }
}
