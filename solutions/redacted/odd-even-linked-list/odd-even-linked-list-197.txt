/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        if (head == null) {
            // If list is empty, return null
            return null;
        }
        // Odd nodes start from head
        ListNode var1 = head;
        // Even nodes start from second node
        ListNode var2 = head.next;
        // We store the head of even nodes
        ListNode var3 = var2;
        // Loop to separate the odd and even nodes
        while (var2 != null && var2.next != null) {
            // Link current odd to the next odd
            var1.next = var2.next;
            // Move odd pointer to the next odd node
            var1 = var1.next;
            // Link current even to the next even
            var2.next = var1.next;
            // Move even pointer to the next even node
            var2 = var2.next;
        }
        // Connect the last odd node to the first even node
        var1.next = var3;
        // Return the reordered list
        return head;
    }
}
