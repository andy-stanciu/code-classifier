/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        // Base/Edge Cases
        if (head == null || head.next == null)
            return head;
        // Create Two Linked Lists for Odd and Even
        ListNode[] var1 = { head.next, head };
        ListNode[] var2 = { head.next, head };
        // Track Index and Current Node
        int index = 3;
        ListNode pointer = head.next.next;
        // Prevent Cycles By Setting Next Node to Null
        var1[0].next = null;
        var1[1].next = null;
        // Loop Through Input LinkedList
        while (pointer != null) {
            int r = index++ % 2;
            var2[r].next = pointer;
            pointer = pointer.next;
            var2[r] = var2[r].next;
            // Prevent Cycles
            var2[r].next = null;
        }
        // Append Even LinkedList to Odd LinkedList
        var2[1].next = var1[0];
        return var1[1];
    }
}
