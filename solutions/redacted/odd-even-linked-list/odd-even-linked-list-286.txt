public class Solution {

    public ListNode method1(ListNode head) {
        if (head == null || head.next == null) {
            // If the list is empty or has only one node, return it as is.
            return head;
        }
        // Initialize pointers for odd and even nodes
        ListNode var1 = head;
        ListNode var2 = head.next;
        // Keep the head of the even list
        ListNode var3 = var2;
        while (var2 != null && var2.next != null) {
            // Link the next odd node
            var1.next = var2.next;
            // Move the odd pointer
            var1 = var1.next;
            // Link the next even node
            var2.next = var1.next;
            // Move the even pointer
            var2 = var2.next;
        }
        // Connect the end of the odd list to the head of the even list
        var1.next = var3;
        return head;
    }

    public static void main(String[] args) {
        // Example usage
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);
        Solution solution = new Solution();
        ListNode result = solution.method1(head);
        // Print result
        while (result != null) {
            System.out.print(result.val + " ");
            result = result.next;
        }
        // Output: 1 3 5 2 4
    }
}
