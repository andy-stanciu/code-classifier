/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode var1 = head;
        ListNode var2 = head.next;
        ListNode var3 = var2;
        while (var2 != null && var2.next != null) {
            var1.next = var2.next;
            var1 = var1.next;
            var2.next = var1.next;
            var2 = var2.next;
        }
        var1.next = var3;
        return head;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        ListNode five1 = new ListNode(5);
        ListNode four1 = new ListNode(4, five1);
        ListNode three1 = new ListNode(3, four1);
        ListNode two1 = new ListNode(2, three1);
        ListNode head1 = new ListNode(1, two1);
        System.out.println("Orginal List 1: ");
        method2(head1);
        ListNode result1 = solution.method1(head1);
        System.out.println("Reordered List 1: ");
        method2(result1);
        ListNode var4 = new ListNode(7);
        ListNode six2 = new ListNode(6, var4);
        ListNode five2 = new ListNode(5, var4);
        ListNode four2 = new ListNode(4, var4);
        ListNode three2 = new ListNode(3, var4);
        ListNode two2 = new ListNode(1, var4);
        ListNode head2 = new ListNode(2, var4);
        System.out.println("Original List 2: ");
        method2(head2);
        ListNode result2 = solution.method1(head2);
        System.out.println("Reordered List 2: ");
        method2(result1);
    }

    public static void method2(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        System.out.println();
    }
}
