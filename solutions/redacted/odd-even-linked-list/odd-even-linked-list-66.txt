/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        // If the list is empty or has only one node, return the head as it is.
        if (head == null || head.next == null) {
            return head;
        }
        // Initialize pointers for odd and even nodes
        ListNode var1 = head;
        ListNode var2 = head.next;
        // Save the start of the even nodes to connect later
        ListNode var3 = head.next;
        // Iterate through the list to rearrange nodes
        while (var1.next != null && var2.next != null) {
            // Link the current odd node to the next odd node
            var1.next = var2.next;
            var1 = var1.next;
            // Link the current even node to the next even node
            var2.next = var1.next;
            var2 = var2.next;
        }
        // Connect the last odd node to the head of even nodes
        var1.next = var3;
        // Return the restructured list
        return head;
    }
}
