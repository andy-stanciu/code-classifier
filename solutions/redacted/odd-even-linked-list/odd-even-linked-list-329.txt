/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        // If the list is empty, return null.
        if (head == null) {
            return null;
        }
        // Initialize pointers for manipulation.
        // \'odd\' points to the last node in the odd-indexed list.
        // \'even\' points to the last node in the even-indexed list.
        // \'evenHead\' points to the first node of the even-indexed list.
        ListNode var1 = head;
        ListNode var2 = head.next;
        ListNode var3 = var2;
        // Iterate over the list to rewire nodes.
        while (var2 != null && var2.next != null) {
            // Link the next odd node.
            var1.next = var2.next;
            // Move the \'odd\' pointer to the next odd node.
            var1 = var1.next;
            // Link the next even node.
            var2.next = var1.next;
            // Move the \'even\' pointer to the next even node.
            var2 = var2.next;
        }
        // After reordering, attach the even-indexed list to the end of the odd-indexed list.
        var1.next = var3;
        // Return the head of the modified list.
        return head;
    }
}
