class Solution {

    public ListNode method1(ListNode head) {
        if (head == null)
            return head;
        // this pointer start from index 2(1 based indexing )
        ListNode var1 = head.next;
        // this pointer start from index 1
        ListNode var2 = head;
        // this pointer needed to concat odd and even linked list
        ListNode var3 = head.next;
        // how do we decide our loop condition
        // the pointer on index 2 will decide loop condition  as it is 1 step ahead odd pointer
        while (var1 != null && var1.next != null) {
            // as each odd or even element present at gap of 2 step
            // put 2 step ahead element pointer into current odd index element
            var2.next = var2.next.next;
            // put 2 step ahead element pointer into current even index element
            var1.next = var1.next.next;
            // after updating move odd and even, to new element pointer inserted into its next
            var2 = var2.next;
            var1 = var1.next;
        }
        // concat odd number linked tail with , head of even number linked list
        var2.next = var3;
        return head;
    }
}
