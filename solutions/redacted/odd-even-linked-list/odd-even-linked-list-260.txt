public class Solution {

    public ListNode method1(ListNode head) {
        // Base cases: if list is empty or has only one node
        if (head == null || head.next == null) {
            return head;
        }
        // Initialize pointers for odd and even lists
        ListNode var1 = head;
        ListNode var2 = head.next;
        // Save the start of the even list
        ListNode var3 = var2;
        // Traverse the list, rearranging nodes
        while (var2 != null && var2.next != null) {
            // Skip to the next odd node
            var1.next = var1.next.next;
            // Skip to the next even node
            var2.next = var2.next.next;
            // Move to the next odd node
            var1 = var1.next;
            // Move to the next even node
            var2 = var2.next;
        }
        // Attach the even list to the end of the odd list
        var1.next = var3;
        // Return the modified list
        return head;
    }
}
