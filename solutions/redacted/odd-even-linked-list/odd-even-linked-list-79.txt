/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        // Head of odd list
        ListNode var1 = null;
        // Tail of odd list
        ListNode var2 = null;
        // Head of even list
        ListNode var3 = null;
        // Tail of even list
        ListNode var4 = null;
        // Pointer to traverse the original list
        ListNode curr = head;
        // Counter for tracking the position in the list
        int i = 1;
        while (curr != null) {
            if (i % 2 != 0) {
                // Odd position
                if (var1 == null) {
                    var1 = curr;
                    var2 = curr;
                } else {
                    var2.next = curr;
                    var2 = var2.next;
                }
            } else {
                // Even position
                if (var3 == null) {
                    var3 = curr;
                    var4 = curr;
                } else {
                    var4.next = curr;
                    var4 = var4.next;
                }
            }
            // Move to the next node
            curr = curr.next;
            // Increment the position counter
            i++;
        }
        if (var3 != null) {
            // Terminate the even list
            var4.next = null;
        }
        if (var1 == null) {
            // If there are no odd nodes, return the even list
            return var3;
        } else {
            // Connect the odd and even lists
            var2.next = var3;
            // Return the head of the odd list
            return var1;
        }
    }
}
