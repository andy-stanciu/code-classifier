/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode var1 = head;
        ListNode var2 = head.next;
        ListNode var3 = head;
        ListNode var4 = head.next;
        ListNode var5 = new ListNode();
        ListNode var6 = new ListNode();
        while (true) {
            // if(currentOddNode.next == null){
            //     oddLastNode = currentOddNode;
            //     evenLastNode = currentEvenNode;
            //     currentEvenNode.next = currentEvenNode.next.next;
            //     break;
            // }
            if (var2.next == null) {
                var6 = var2;
                var5 = var1;
                var1.next = var1.next.next;
                System.out.println(var1.val + " " + var2.val);
                break;
            } else if (var2.next.next == null) {
                var6 = var2;
                var1.next = var1.next.next;
                var1 = var1.next;
                var5 = var1;
                var2.next = var2.next.next;
                System.out.println(var1.val + " " + var2.val);
                break;
            }
            System.out.println(var1.val + " " + var2.val);
            var1.next = var1.next.next;
            var2.next = var2.next.next;
            var1 = var1.next;
            System.out.println(var1.val);
            var2 = var2.next;
        }
        var5.next = var4;
        ListNode currentNode = head;
        while (currentNode.next != null) {
            System.out.println(currentNode.val);
            currentNode = currentNode.next;
        }
        return var3;
    }
}
