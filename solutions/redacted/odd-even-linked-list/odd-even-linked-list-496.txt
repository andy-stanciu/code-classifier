/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        //Creating two dummy nodes, odd and even to point to two separate chains
        ListNode var1 = new ListNode(0);
        ListNode var2 = new ListNode(0);
        //pointers to point to the dummy nodes
        ListNode var3 = var1;
        ListNode var4 = var2;
        //Refers to the current node
        ListNode temp = head;
        //Using this as a counter to check for odd and even placement
        int i = 1;
        while (temp != null) {
            if (i % 2 == 0) {
                var4.next = temp;
                var4 = temp;
            } else {
                var3.next = temp;
                var3 = temp;
            }
            temp = temp.next;
            i++;
        }
        //Setting last pointer of even list as null, pointing the end of the odd chain to the beginning pointer of the even chain
        var4.next = null;
        var3.next = var2.next;
        //Setting the odd list\'s next pointer to head, since the first contains the value 0
        head = var1.next;
        return head;
    }
}
