class Solution {

    public ListNode method1(ListNode head) {
        // Edge case: if the list is empty or has only one node, return head
        if (head == null || head.next == null) {
            return head;
        }
        // Start with the first node (odd)
        ListNode var1 = head;
        // Start with the second node (even)
        ListNode var2 = head.next;
        // Save the head of the even list
        ListNode var3 = var2;
        while (var2 != null && var2.next != null) {
            // Connect current odd node to the next odd node
            var1.next = var2.next;
            // Move odd pointer forward
            var1 = var1.next;
            // Connect current even node to the next even node
            var2.next = var1.next;
            // Move even pointer forward
            var2 = var2.next;
        }
        // Connect the end of the odd list to the head of the even list
        var1.next = var3;
        return head;
    }
}
