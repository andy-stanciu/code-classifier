/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode var1 = null, var2 = null, var3 = null, var4 = null;
        int position = 1;
        ListNode current = head;
        while (current != null) {
            if (position % 2 == 1) {
                // Odd position
                if (var1 == null) {
                    var1 = current;
                    var3 = current;
                } else {
                    var3.next = current;
                    var3 = current;
                }
            } else {
                // Even position
                if (var2 == null) {
                    var2 = current;
                    var4 = current;
                } else {
                    var4.next = current;
                    var4 = current;
                }
            }
            current = current.next;
            position++;
        }
        // Connect the last node of the odd list to the first node of the even list
        if (var3 != null) {
            var3.next = var2;
        }
        // Set the head of the rearranged list to the head of the odd list
        head = var1;
        // Set the next of the last node of the even list to null
        if (var4 != null) {
            var4.next = null;
        }
        return var1;
    }
}
