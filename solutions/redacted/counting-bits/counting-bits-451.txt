// 0 --> 0000
// 1 --> 0001
//
// offset = 2
// 2 --> 0010 | res[2] = res[2 - offset] + 1
// 3 --> 0011 | res[3] = res[3 - offset] + 1
//
//
// offset = 4 (offset = offset * 2)
// 4 --> 0100 | res[4] = res[4 - offset] + 1
// 5 --> 0101 | res(5) = res[5 - offset] + 1
// 6 --> 0110 | res[6] = res[6 - offset] + 1
// 7 --> 0111 | res[7] = res[7 - offset] + 1
//
// offset = 8 (offset = offset * 2)
// 8 --> 1000 | res[8] = res[8 - offset] + 1
// 9 --> 1001 | res[9] = res[9 - offset] + 1
// 10 -> 1010 | res[10] = res[10 - offset] + 1
//
class Solution {

    public int[] method1(int n) {
        int[] res = new int[n + 1];
        res[0] = 0;
        if (n > 0) {
            res[1] = 1;
        }
        int offset = 2;
        int toOffsetChange = 2;
        for (int i = 2; i <= n; i++) {
            if (toOffsetChange == 0) {
                offset *= 2;
                toOffsetChange = offset;
            }
            res[i] = res[i - offset] + 1;
            toOffsetChange--;
        }
        return res;
    }
}
