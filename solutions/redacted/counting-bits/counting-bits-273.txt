class Solution {

    public int[] method1(int n) {
        // Note that all elements are intiallized with zero
        // As we will leverage ans[0] = 0 later in code
        int[] ans = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            // Say i=11 (odd number)
            boolean isOddNumber = i % 2 == 1;
            // Companion of 11 is 10 and take its half = 5
            int halfOfEvenCompanion = i / 2;
            // Number of ones in the half number is also same as of even companion
            // E.g. Number of ones in 5 and 10 are exactly same
            // So we can leverage the already saved answer for 5, to get result for 10
            // Hence called DP
            int onesCountForHalf = ans[halfOfEvenCompanion];
            // Odd number add its own 1, whereas for even number count remains same
            // So for i=11, ans[11] = ans[5] + 1
            // Whereas for i=10, ans[10] = ans[5] = ans[2] + 1 = ans[1] + 1 = ans[0] + 1 + 1 = 2
            ans[i] = isOddNumber ? onesCountForHalf + 1 : onesCountForHalf;
        }
        return ans;
    }
}
