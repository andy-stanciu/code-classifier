//Approach -2
class Solution {

    public int[] method1(int n) {
        // Initialize the result array with size n + 1 to store the count of 1\'s for each number from 0 to n.
        int[] ans = new int[n + 1];
        // Loop through all numbers from 0 to n.
        for (int i = 0; i <= n; i++) {
            // Initialize the count of 1\'s for the current number.
            int count = 0;
            // Assign the current number i to a temporary variable num.
            int num = i;
            // Count the number of 1\'s in the binary representation of num.
            while (num > 0) {
                // Check if the least significant bit (LSB) is 1.
                // The expression (num & 1) checks if the last bit is 1 (odd number) or 0 (even number).
                if ((num & 1) == 1) {
                    // Increment the count if the LSB is 1.
                    count++;
                }
                // Right shift the bits of num by 1 to process the next bit.
                // Right shifting by 1 is equivalent to dividing the number by 2.
                //ie. res = GivenNum/ 2 tothe power of k(number of shift)
                num = num >> 1;
            }
            // Store the count of 1\'s in the ans array at index i.
            ans[i] = count;
        }
        // Return the array containing the count of 1\'s for each number from 0 to n.
        return ans;
    }
}
