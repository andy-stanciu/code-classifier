class Solution {

    /* find the last number which was perfect power of 2, it will only have 1 set bit and hence i&(i-1) will be equal to zero
    no. of set bits in any number = number of bits in last perfect power (which is always 1) + number of bits in (curr number - last perfect power number)
    for eg : n = 6, last perfect power = 4,
                    => # of bits in 6 =  # of bits in 4 + #of bits in (6-4) 
                    => 1 + #of bits in 2 
                    => 1 + 1 = 2
            n = 7 => #of bits in 4 + #of bits in (7-4) => 1 + #of bits in 3 => 1 + 2 => 3
*/
    public int[] method1(int n) {
        int[] res = new int[n + 1];
        res[0] = 0;
        if (n > 0) {
            res[1] = 1;
        }
        int lastP = 0;
        for (int i = 2; i <= n; i++) {
            int bitCount = i & (i - 1);
            if (bitCount == 0) {
                res[i] = 1;
                lastP = i;
            } else {
                res[i] = 1 + res[i - lastP];
            }
        }
        return res;
    }
}
