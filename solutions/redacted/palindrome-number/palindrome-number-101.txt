class Solution {

    public boolean method1(int x) {
        /**
         *            Return false
         *            when
         *            Case 1: x is negative.
         *                    -121 -> 121- cannot be a pallindrome.
         *            Case 2: x ends with 0 but not equal to zero.
         *                    10, 20, 100, 5000 can never be a pallindrome number.
         */
        if (x < 0 || (x % 10 == 0 && x != 0)) {
            return false;
        }
        int reverse = 0;
        /**
         *            The Condition x>reverse will make sure that,
         *            we will reach only till half of the number.
         *            E.g:
         *            Case 1: When numder of digits is even: 2332
         *            Initial Value: x = 2332 and reverse = 0
         *            Iteration 1: x = 233 and reverse = 2
         *            Iteration 2: x = 23 and reverse = 23
         *            Iteration 3: Condition False
         *            will return x == reverse.
         *
         *            Case 2: When numder of digits is even: 232
         *            Initial Value: x = 232 and reverse = 0
         *            Iteration 1: x = 23 and reverse = 2
         *            Iteration 2: x = 2 and reverse = 23
         *            Iteration 3: Condition False
         *            will return x == reverse/10.
         */
        while (x > reverse) {
            reverse = reverse * 10 + (x % 10);
            x = x / 10;
        }
        return x == reverse || x == reverse / 10;
    }
}
