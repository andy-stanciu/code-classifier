class Solution {

    public boolean method1(int x) {
        // Two-Pointer Approach
        // Step1: Convert the integer into string.
        // Step2: Point two variable at first and last indices of the string.
        // Step3: Compare the characters at those indices.
        // Step4: Update the variables.
        // convert integer to string.
        String s = String.valueOf(x);
        // i will initially point to first index.
        int i = 0;
        // j will initially point to last index.
        int j = s.length() - 1;
        // i and j are opposite indices of the string.
        // 1. If \'i\' is first then \'j\' is last.
        // 2. Similarly, if \'i\' is second then \'j\' is second last index of s.
        // This is because they are updated simultaneously.
        while (// loop will break when i and j cross each other
        i <= j) {
            if (// characters at indices i and j will be compared.
            s.charAt(i) != s.charAt(j))
                // If the characters are unequal then false will be returned.
                return false;
            // i is incremented.
            i++;
            // j is decremented.
            j--;
        }
        // If loop ends without returning false, it means that every \'ith\' character
        // is equal to every \'jth\' character. Thus, the number is palindrome.
        // Hence, return true;
        return true;
    }
}
