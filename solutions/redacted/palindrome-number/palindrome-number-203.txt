class Solution {

    public boolean method1(int x) {
        // covert to String.
        String s = String.valueOf(x);
        /* find if a string is a palindrome by moving two pointers outwards. */
        // return isPalindromeOutwards(s);
        /* or moving them inwards. */
        return method3(s);
    }

    private boolean method2(String s) {
        int n = s.length();
        int m = n / 2;
        // if n is even, we compare s.charAt(i) and s.charAt(j) outwards (0 \u2264 i \u2264 m-1, m \u2264 j < n) to find if s is palindromic.
        // otherwise, we compare s.charAt(i) and s.charAt(j) inwards (0 \u2264 i \u2264 m-1, m+1 \u2264 j < n), ignoring s.chatAt(m).
        int i = m - 1;
        int j = n % 2 == 0 ? m : m + 1;
        while (0 <= i && j < n) {
            if (s.charAt(i--) == s.charAt(j++)) {
                continue;
            }
            return false;
        }
        return true;
    }

    private boolean method3(String s) {
        int n = s.length();
        int i = 0;
        int j = n - 1;
        while (i <= j) {
            if (s.charAt(i++) != s.charAt(j--)) {
                return false;
            }
        }
        return true;
    }
}
