class Solution {

    public double method1(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        if (n1 > n2)
            return method1(nums2, nums1);
        int ttl = n1 + n2;
        int mid = ttl / 2;
        int r = n1;
        int l = 0;
        while (l <= r) {
            int m1 = (l + r) / 2;
            int rem = mid - m1;
            int l1 = m1 > 0 ? nums1[m1 - 1] : Integer.MIN_VALUE;
            int l2 = rem > 0 ? nums2[rem - 1] : Integer.MIN_VALUE;
            int r2 = rem < n2 ? nums2[rem] : Integer.MAX_VALUE;
            int r1 = m1 < n1 ? nums1[m1] : Integer.MAX_VALUE;
            if (l1 <= r2 && l2 <= r1) {
                if (ttl % 2 == 0)
                    return (double) ((Math.max(l1, l2) + Math.min(r1, r2)) / (double) 2);
                else
                    return (double) Math.min(r1, r2);
            } else if (l1 > r2)
                r--;
            else
                l++;
        }
        //System.out.println("here");
        return 0;
    }
}
