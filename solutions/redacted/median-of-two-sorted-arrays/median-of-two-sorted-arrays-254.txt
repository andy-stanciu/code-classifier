class Solution {

    public double method1(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        // Ensure nums1 is the smaller array for binary search
        if (m > n) {
            return method1(nums2, nums1);
        }
        int imin = 0, imax = m, halfLen = (m + n + 1) / 2;
        while (imin <= imax) {
            int i = (imin + imax) / 2;
            int j = halfLen - i;
            if (i < m && nums1[i] < nums2[j - 1]) {
                // i is too small
                imin = i + 1;
            } else if (i > 0 && nums1[i - 1] > nums2[j]) {
                // i is too big
                imax = i - 1;
            } else {
                // i is perfect
                int var1;
                if (i == 0) {
                    var1 = nums2[j - 1];
                } else if (j == 0) {
                    var1 = nums1[i - 1];
                } else {
                    var1 = Math.max(nums1[i - 1], nums2[j - 1]);
                }
                if ((m + n) % 2 == 1) {
                    return var1;
                }
                int var2;
                if (i == m) {
                    var2 = nums2[j];
                } else if (j == n) {
                    var2 = nums1[i];
                } else {
                    var2 = Math.min(nums1[i], nums2[j]);
                }
                return (var1 + var2) / 2.0;
            }
        }
        throw new IllegalArgumentException("Input arrays are not sorted");
    }
}
