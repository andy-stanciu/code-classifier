class Solution {

    /*
    total length = x; if x is odd , we define leftbound + 1 = mid
    case 1 :
            1 3 | 4
                  i
              2 | 5 6 
                  j
    x is odd the mid will be the max value of left bound 
    x is even the mid will be the (leftmax + rightmin) / 2
    i is the first index of nums1 in right bound
    j is the first index of nums2 in right bound
    we should have nums1[i - 1] <= nums2[j] and nums2[j - 1] <= nums1[i]
    
    case 2:
            1 |           or            | 5 6
          3 4 | 5 6 7           1 2 3 4 | 7 8
    i = m; nums1LeftMax no meaning
    i = 0; nums1RightMin no meaning
    
    case 3:
           1 2 3 |         or        | 4 5 6
                 | 4 5 6       1 2 3 |  
    j = 0; nums2LeftMax no meaning
    j = n; nums2RightMin no meaning
    */
    public double method1(int[] nums1, int[] nums2) {
        //we just want to define nums1 is small than nums2
        if (nums1.length > nums2.length) {
            int[] temp = nums1;
            nums1 = nums2;
            nums2 = temp;
        }
        int m = nums1.length;
        int n = nums2.length;
        // the total numbers in left bound (m + n + 1) / 2
        // in case of over bound
        int leftTotal = m + (n - m + 1) / 2;
        int left = 0;
        int right = m;
        // we only find dividing line in nums1 and the line in num2 will move together
        // binary search here
        while (left < right) {
            int i = left + (right - left + 1) / 2;
            int j = leftTotal - i;
            if (nums1[i - 1] > nums2[j]) {
                right = i - 1;
            } else {
                left = i;
            }
        }
        int nums1Divide = left;
        int nums2Divide = leftTotal - nums1Divide;
        // case 2
        int nums1LeftMax = nums1Divide == 0 ? Integer.MIN_VALUE : nums1[nums1Divide - 1];
        int nums1RightMin = nums1Divide == m ? Integer.MAX_VALUE : nums1[nums1Divide];
        // case 3
        int nums2LeftMax = nums2Divide == 0 ? Integer.MIN_VALUE : nums2[nums2Divide - 1];
        int nums2RightMin = nums2Divide == n ? Integer.MAX_VALUE : nums2[nums2Divide];
        if ((m + n) % 2 == 1) {
            // odd number
            return Math.max(nums1LeftMax, nums2LeftMax);
        } else {
            return (double) (Math.max(nums1LeftMax, nums2LeftMax) + Math.min(nums1RightMin, nums2RightMin)) / 2;
        }
    }
}
// Time Complexity is O(log min(m,n));
