class Solution {

    public double method1(int[] nums1, int[] nums2) {
        // Ensuring that binary search happens on the smaller array
        if (nums1.length > nums2.length)
            return method1(nums2, nums1);
        int m = nums1.length;
        int n = nums2.length;
        int low = 0, high = m;
        while (low <= high) {
            int partitionX = (low + high) / 2;
            int partitionY = (m + n + 1) / 2 - partitionX;
            int maxX = (partitionX == 0) ? Integer.MIN_VALUE : nums1[partitionX - 1];
            int minX = (partitionX == m) ? Integer.MAX_VALUE : nums1[partitionX];
            int maxY = (partitionY == 0) ? Integer.MIN_VALUE : nums2[partitionY - 1];
            int minY = (partitionY == n) ? Integer.MAX_VALUE : nums2[partitionY];
            if (maxX <= minY && maxY <= minX)
                // Found the correct partition
                if ((m + n) % 2 == 0)
                    return ((double) Math.max(maxX, maxY) + Math.min(minX, minY)) / 2;
                else
                    return (double) Math.max(maxX, maxY);
            else if (maxX > minY)
                high = partitionX - 1;
            else
                low = partitionX + 1;
        }
        throw new IllegalArgumentException("Input arrays are not sorted.");
    }

    public int[] input() {
        Scanner in = new Scanner(System.in);
        System.out.print("Enter size of array: ");
        int m = in.nextInt();
        if (m < 0 || m > 1000) {
            System.out.print("Please enter a valid number");
            System.exit(0);
        }
        int[] array = new int[m];
        in.close();
        System.out.print("Enter " + m + " numbers: ");
        for (int i = 0; i < m; i++) array[i] = in.nextInt();
        return array;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] nums1 = solution.input();
        int[] nums2 = solution.input();
        double var1 = solution.method1(nums1, nums2);
        System.out.println("The median is: " + var1);
    }
}
