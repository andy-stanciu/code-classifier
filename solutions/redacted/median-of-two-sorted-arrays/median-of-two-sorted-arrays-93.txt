class Solution {

    public double method1(int[] nums1, int[] nums2) {
        int i = 0;
        int j = 0;
        int[] combArr = new int[nums1.length + nums2.length];
        //combine two sorted arrays into one sorted array
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] > nums2[j]) {
                combArr[i + j] = nums2[j];
                j++;
            } else if (nums1[i] < nums2[j]) {
                combArr[i + j] = nums1[i];
                i++;
            } else {
                combArr[i + j] = nums2[j];
                combArr[i + j + 1] = nums1[i];
                i++;
                j++;
            }
        }
        //if i or j completed before the other, fill in what was left to combArr
        while (i < nums1.length) {
            combArr[i + j] = nums1[i];
            i++;
        }
        while (j < nums2.length) {
            combArr[i + j] = nums2[j];
            j++;
        }
        //account for 1-element arrays
        if (combArr.length == 1) {
            return (double) combArr[0];
        }
        //store the median index
        int var1 = (int) Math.floor((nums1.length - 1 + nums2.length - 1) / 2);
        //if even, add the two medians and return the avg of the two
        if ((nums1.length + nums2.length) % 2 == 0) {
            return ((double) (combArr[var1] + combArr[var1 + 1]) / 2.0);
        } else {
            return (double) (combArr[var1 + 1]);
        }
    }
}
