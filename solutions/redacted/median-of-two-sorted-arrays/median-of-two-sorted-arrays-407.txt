public class Solution {

    public double method1(int[] nums1, int[] nums2) {
        int n1 = nums1.length, n2 = nums2.length;
        // Ensure nums1 is the smaller array to simplify partitioning logic
        if (n1 > n2) {
            return method1(nums2, nums1);
        }
        // Total length of combined arrays
        int totalLength = n1 + n2;
        // Left partition size
        int halfLength = (totalLength + 1) / 2;
        // We only partition nums1
        int low = 0, high = n1;
        while (low <= high) {
            // Mid index for nums1
            int mid1 = (low + high) / 2;
            // Mid index for nums2
            int mid2 = halfLength - mid1;
            // If mid1 or mid2 goes out of bounds, use extreme values
            // Left element of nums1
            int l1 = (mid1 > 0) ? nums1[mid1 - 1] : Integer.MIN_VALUE;
            // Left element of nums2
            int l2 = (mid2 > 0) ? nums2[mid2 - 1] : Integer.MIN_VALUE;
            // Right element of nums1
            int r1 = (mid1 < n1) ? nums1[mid1] : Integer.MAX_VALUE;
            // Right element of nums2
            int r2 = (mid2 < n2) ? nums2[mid2] : Integer.MAX_VALUE;
            // If l1 <= r2 and l2 <= r1, we found the correct partition
            if (l1 <= r2 && l2 <= r1) {
                // If the total length is odd, return the max of left halves
                if (totalLength % 2 == 1) {
                    return Math.max(l1, l2);
                } else {
                    // If the total length is even, return the average of the max of the left halves
                    // and min of the right halves
                    return (Math.max(l1, l2) + Math.min(r1, r2)) / 2.0;
                }
            } else if (l1 > r2) {
                // If l1 is too big, move the high pointer left
                high = mid1 - 1;
            } else {
                // If l2 is too big, move the low pointer right
                low = mid1 + 1;
            }
        }
        // If we can\'t find the median (shouldn\'t happen with valid input)
        return 0.0;
    }
}
