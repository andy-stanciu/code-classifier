class Solution {

    public double method1(int[] nums1, int[] nums2) {
        //         find elements in right half
        int n = nums1.length, m = nums2.length;
        if (n > m)
            return method1(nums2, nums1);
        //to handle odd values
        int eleInRight = (n + m + 1) / 2;
        //concerned withfirst array cut
        int low = 0, high = n;
        double l1 = -1, l2 = -1, r1 = -1, r2 = -1;
        while (low <= high) {
            int cut1 = (low + high) / 2;
            int cut2 = (eleInRight - cut1);
            System.out.println(cut2);
            l1 = (cut1 == 0) ? Integer.MIN_VALUE : nums1[cut1 - 1];
            l2 = (cut2 == 0) ? Integer.MIN_VALUE : nums2[cut2 - 1];
            r1 = (n - cut1 == 0) ? Integer.MAX_VALUE : nums1[cut1];
            r2 = (m - cut2 == 0) ? Integer.MAX_VALUE : nums2[cut2];
            System.out.println(cut1 + " " + cut2);
            if (l1 > r2) {
                //                 l1 has to be decreased
                //                 direct move of cut1
                high = cut1 - 1;
            } else if (l2 > r1) {
                low = cut1 + 1;
            } else if (l1 <= r2 && l2 <= r1)
                break;
        }
        double ans = 0.0;
        System.out.println(l1 + " " + l2 + " " + r1 + " " + r2);
        //         check odd or even
        if ((n + m) % 2 == 0) {
            ans = (Math.max(l1, l2) + Math.min(r1, r2)) / 2;
        } else {
            ans = Math.max(l1, l2);
        }
        return ans;
    }
}
