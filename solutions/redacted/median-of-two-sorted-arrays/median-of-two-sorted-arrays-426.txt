class Solution {

    public double method1(int[] nums1, int[] nums2) {
        int size = nums1.length + nums2.length;
        boolean even = false;
        if (size % 2 == 0) {
            even = true;
        }
        size /= 2;
        Queue<Integer> queue = new PriorityQueue(Comparator.reverseOrder());
        int i = 0, j = 0;
        while (i <= nums1.length && j <= nums2.length && queue.size() <= size) {
            if (i < nums1.length && j < nums2.length) {
                if (nums1[i] < nums2[j]) {
                    queue.add(nums1[i]);
                    i++;
                } else {
                    queue.add(nums2[j]);
                    j++;
                }
            } else if (i < nums1.length) {
                queue.add(nums1[i]);
                i++;
            } else {
                queue.add(nums2[j]);
                j++;
            }
        }
        if (even) {
            double result = queue.remove();
            result += queue.remove();
            result /= 2;
            return result;
        } else {
            return queue.remove();
        }
    }
}
