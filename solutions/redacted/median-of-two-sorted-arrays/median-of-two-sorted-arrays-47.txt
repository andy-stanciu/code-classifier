class Solution {

    public double method1(int[] nums1, int[] nums2) {
        int a = nums1.length;
        int b = nums2.length;
        int c = a + b;
        int[] nums = new int[c];
        // merging the array
        for (int i = 0; i < a; i++) {
            nums[i] = nums1[i];
        }
        for (int j = 0; j < b; j++) {
            nums[j + a] = nums2[j];
        }
        // bubble sort the array or just code Arrays.sort(nums)
        boolean swapped;
        for (int i = 0; i < c; i++) {
            swapped = false;
            for (int j = 1; j < c - i; j++) {
                if (nums[j] < nums[j - 1]) {
                    int temp = nums[j];
                    nums[j] = nums[j - 1];
                    nums[j - 1] = temp;
                    swapped = true;
                }
            }
            if (!swapped) {
                break;
            }
        }
        // now just coding the conditions to find median
        int start = 0;
        int end = nums.length - 1;
        int mid = start + (end - start) / 2;
        double var1;
        if (end % 2 == 0) {
            var1 = nums[mid];
        } else {
            var1 = (double) (nums[mid] + nums[mid + 1]) / 2;
        }
        return var1;
    }
}
