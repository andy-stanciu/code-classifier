class Solution {

    public double method1(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        //Creating new array of size n1 + n2 to store all elements
        int[] nums3 = new int[n1 + n2];
        int i = 0;
        int j = 0;
        int k = 0;
        //To compare and store element in sorted manner in new array nums3[k]
        while (i < n1 && j < n2) {
            //if index at nums1[i] > nums2[j] then store nums2[j] in nums3[k]
            //else index at nums1[i] < nums2[j] then store nums1[i] in nums3[k]
            if (nums1[i] > nums2[j]) {
                nums3[k] = nums2[j];
                k++;
                j++;
            } else {
                nums3[k] = nums1[i];
                k++;
                i++;
            }
        }
        while (i < n1) {
            nums3[k] = nums1[i];
            k++;
            i++;
        }
        while (j < n2) {
            nums3[k] = nums2[j];
            k++;
            j++;
        }
        k = nums3.length - 1;
        double ans = 0;
        //To calculate median
        if (k % 2 == 0) {
            //formula to calculate median if array length is even
            ans = nums3[k / 2];
        } else {
            //formula to calculate median if array length is odd
            ans = (double) (nums3[k / 2] + nums3[(k / 2) + 1]) / 2.0;
        }
        return ans;
    }
}
