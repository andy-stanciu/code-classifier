class Solution {

    public double method1(int[] nums1, int[] nums2) {
        int[] arr = create_arr(nums1, nums2);
        // for(Integer i: arr){
        //     System.out.print(i+" ");
        // }
        double var1 = method2(arr);
        return var1;
    }

    public static int[] create_arr(int[] arr1, int[] arr2) {
        int p1 = 0;
        int p2 = 0;
        int ind = 0;
        int[] merge_arr = new int[arr1.length + arr2.length];
        while ((p1 < arr1.length) && (p2 < arr2.length)) {
            if (arr1[p1] < arr2[p2]) {
                merge_arr[ind] = arr1[p1];
                ind++;
                p1++;
            } else {
                merge_arr[ind] = arr2[p2];
                ind++;
                p2++;
            }
        }
        while (p1 < arr1.length) {
            merge_arr[ind] = arr1[p1];
            ind++;
            p1++;
        }
        while (p2 < arr2.length) {
            merge_arr[ind] = arr2[p2];
            ind++;
            p2++;
        }
        return merge_arr;
    }

    public static double method2(int[] arr) {
        int len = arr.length;
        double var1 = 0.0;
        if (len % 2 == 0) {
            int mid = len / 2 - 1;
            var1 = (double) (arr[mid] + arr[mid + 1]) / 2;
        } else {
            int mid = (len + 1) / 2;
            var1 = arr[mid - 1];
        }
        return var1;
    }
}
