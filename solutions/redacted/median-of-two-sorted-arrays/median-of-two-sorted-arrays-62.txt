class Solution {

    public double method1(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        int n = n1 + n2;
        int[] totArr = new int[n];
        int i = 0, j = 0, k = 0;
        while (i <= n1 && j <= n2) {
            if (i == n1) {
                // fills totArr with the remaining elements of nums2
                //if all the elements of nums1 have been added
                while (j < n2) totArr[k++] = nums2[j++];
                break;
            } else if (j == n2) {
                // fills totArr with the remaining elements of nums1
                //if all the elements of nums2 have been added
                while (i < n1) totArr[k++] = nums1[i++];
                break;
            }
            // simple sorting
            if (nums1[i] < nums2[j]) {
                totArr[k++] = nums1[i++];
            } else {
                totArr[k++] = nums2[j++];
            }
        }
        // if totArr is odd then it also has a middle
        if (n % 2 != 0)
            return totArr[n / 2];
        else {
            // otherwise we find its arithmetic mean
            //by taking two possible middle elements
            int l = n / 2 - 1;
            int r = n / 2;
            return (double) (totArr[l] + totArr[r]) / 2;
        }
    }
}
