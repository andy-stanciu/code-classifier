class Solution {

    public double method1(int[] nums1, int[] nums2) {
        // Ensure nums1 is the smaller array for easier binary search
        if (nums1.length > nums2.length) {
            return method1(nums2, nums1);
        }
        int m = nums1.length;
        int n = nums2.length;
        int halfLength = (m + n + 1) / 2;
        int left = 0;
        int right = m;
        while (left <= right) {
            int partition1 = (left + right) / 2;
            int partition2 = halfLength - partition1;
            int maxLeft1 = (partition1 == 0) ? Integer.MIN_VALUE : nums1[partition1 - 1];
            int minRight1 = (partition1 == m) ? Integer.MAX_VALUE : nums1[partition1];
            int maxLeft2 = (partition2 == 0) ? Integer.MIN_VALUE : nums2[partition2 - 1];
            int minRight2 = (partition2 == n) ? Integer.MAX_VALUE : nums2[partition2];
            if (maxLeft1 <= minRight2 && maxLeft2 <= minRight1) {
                // Found the correct partitions
                if ((m + n) % 2 == 0) {
                    return ((double) Math.max(maxLeft1, maxLeft2) + Math.min(minRight1, minRight2)) / 2;
                } else {
                    return (double) Math.max(maxLeft1, maxLeft2);
                }
            } else if (maxLeft1 > minRight2) {
                // Move towards the left in nums1
                right = partition1 - 1;
            } else {
                // Move towards the right in nums1
                left = partition1 + 1;
            }
        }
        // If we reach here, the input arrays were not sorted as expected
        throw new IllegalArgumentException("Input arrays are not sorted");
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] nums1 = { 1, 3 };
        int[] nums2 = { 2 };
        // Output: 2.0
        System.out.println("Median is: " + solution.method1(nums1, nums2));
        int[] nums1_2 = { 1, 2 };
        int[] nums2_2 = { 3, 4 };
        // Output: 2.5
        System.out.println("Median is: " + solution.method1(nums1_2, nums2_2));
    }
}
