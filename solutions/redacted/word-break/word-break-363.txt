class Solution {

    public boolean method1(String s, List<String> param1) {
        // DP Approach - Not using set
        int n = s.length();
        // dp[i] represents whether the first i characters can be broken down into dict words
        boolean[] dp = new boolean[n + 1];
        // Base case
        dp[0] = true;
        // Induction rule
        for (int i = 1; i <= n; i++) {
            for (String var1 : param1) {
                int k = var1.length();
                // We skip the case when the current length is shorter than the word
                if (i < k) {
                    continue;
                }
                // i == m is included here since dp[0] == true
                // s.substring(i - k, i) starts from index i - k (the (i-k+1) th character)
                // and ends at index i - 1 (i-th character)
                if (dp[i - k] && s.substring(i - k, i).equals(var1)) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[n];
    }
}
