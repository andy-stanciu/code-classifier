class Solution {

    HashSet<String> set;

    HashMap<String, Boolean> map;

    public boolean method1(String s, List<String> param1) {
        set = new HashSet<>(param1);
        map = new HashMap<>();
        return backtrack(0, s, new StringBuilder());
    }

    public boolean backtrack(int startIndex, String s, StringBuilder sb) {
        if (startIndex == s.length() && s.equals(sb.toString())) {
            map.put(sb.toString(), true);
            return true;
        }
        if (map.containsKey(sb.toString())) {
            return map.get(sb.toString());
        }
        for (int i = startIndex; i < s.length(); i++) {
            String sub = s.substring(startIndex, i + 1);
            if (set.contains(sub.toString())) {
                sb.append(sub);
                if (backtrack(i + 1, s, sb)) {
                    return true;
                }
                sb.delete(startIndex, i + 1);
            }
        }
        map.put(sb.toString(), false);
        return false;
    }
}
