class Solution {

    public boolean solve(String s, int start, int end, Set<String> set, int[][] dp) {
        if (dp[start][end] != -1)
            return dp[start][end] == 1 ? true : false;
        if (end == s.length() - 1)
            return (set.contains(s.substring(start, end + 1))) ? true : false;
        if (set.contains(s.substring(start, end + 1))) {
            if (solve(s, end + 1, end + 1, set, dp)) {
                dp[start][end] = 1;
                return true;
            }
        }
        dp[start][end] = solve(s, start, end + 1, set, dp) ? 1 : 0;
        return dp[start][end] == 1 ? true : false;
    }

    public boolean method1(String s, List<String> param1) {
        int[][] dp = new int[s.length()][s.length()];
        for (int i = 0; i < s.length(); i++) {
            Arrays.fill(dp[i], -1);
        }
        return solve(s, 0, 0, new HashSet<>(param1), dp);
    }
}
