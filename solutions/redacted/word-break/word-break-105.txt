class Solution {

    private boolean method1(String str, int index, int param1, Set<String> param2, HashMap<Pair<Integer, Integer>, Boolean> dpMap) {
        if (index >= str.length()) {
            return param2.contains(str.substring(param1, str.length()));
        }
        Pair pair = new Pair(index, param1);
        if (dpMap.containsKey(pair))
            return dpMap.get(pair);
        String var1 = str.substring(param1, index + 1);
        boolean var2 = false;
        if (param2.contains(var1)) {
            var2 = method1(str, index + 1, param1, param2, dpMap) || method1(str, index + 1, index + 1, param2, dpMap);
        } else {
            var2 = method1(str, index + 1, param1, param2, dpMap);
        }
        dpMap.put(pair, var2);
        return var2;
    }

    public boolean method1(String s, List<String> param3) {
        /**
         *            if current word is a match
         *                start new word
         *                continue with current word
         */
        Set<String> param2 = new HashSet();
        for (String var3 : param3) {
            param2.add(var3);
        }
        HashMap<Pair<Integer, Integer>, Boolean> dpMap = new HashMap();
        return method1(s, 0, 0, param2, dpMap);
    }
}
