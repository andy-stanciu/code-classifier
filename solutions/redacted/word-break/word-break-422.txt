class Solution {

    public boolean method1(String s, List<String> param1) {
        int[] cache = new int[s.length()];
        return dfs(s, param1, 0, cache);
    }

    private boolean dfs(String s, List<String> param1, int index, int[] cache) {
        if (index == s.length()) {
            return true;
        }
        if (cache[index] == -1) {
            return false;
        }
        for (String var1 : param1) {
            boolean flag = true;
            for (int i = 0; i < var1.length(); i++) {
                if (index + i >= s.length() || var1.charAt(i) != s.charAt(index + i)) {
                    flag = false;
                    break;
                }
            }
            if (flag && dfs(s, param1, index + var1.length(), cache)) {
                return true;
            }
        }
        cache[index] = -1;
        return false;
    }
}
