class Solution {

    public boolean method1(String s, List<String> param1) {
        // Create a HashSet to store the words from the dictionary for efficient lookup
        HashSet<String> set = new HashSet<>(param1);
        // Get the length of the input string
        int n = s.length();
        // Create a boolean array to store whether a substring of s can be segmented
        boolean[] dp = new boolean[n + 1];
        // Initialize the first element as true, indicating an empty string can be segmented
        dp[0] = true;
        // Iterate through the input string
        for (int i = 1; i <= n; i++) {
            // Iterate through the possible starting points of the current substring
            for (int j = 0; j < i; j++) {
                // Get the current substring from j to i
                String currstr = s.substring(j, i);
                // Check if dp[j] is true (substring s[0:j] can be segmented) and currstr is in the dictionary
                if (dp[j] && set.contains(currstr)) {
                    // Set dp[i] to true, indicating the substring s[0:i] can be segmented
                    dp[i] = true;
                }
            }
        }
        // Return whether the entire string can be segmented
        return dp[n];
    }
}
