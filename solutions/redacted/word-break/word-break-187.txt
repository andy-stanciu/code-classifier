class Solution {

    public boolean method1(String s, List<String> param1) {
        // Creating an array to store intermediate results of dynamic programming
        boolean[] dp = new boolean[s.length() + 1];
        // Setting the base case, empty string is always considered to be segmented properly
        dp[0] = true;
        for (int i = 0; i <= s.length(); i++) {
            // Loop through each character of the string
            for (int j = 0; j < i; j++) {
                // Inner loop to check all possible substrings from the beginning of the string up to the current position
                if (dp[j] && param1.contains(s.substring(j, i))) {
                    // Checking if the substring [j, i) is in the dictionary and if the substring before that position (substring [0, j)) is segmented properly
                    // If the conditions are met, mark dp[i] as true, indicating that the substring [0, i) can be segmented properly
                    dp[i] = true;
                    // Break the inner loop as we found a valid segmentation for the current position i
                    break;
                }
            }
        }
        // Returning the result indicating if the entire string can be segmented properly
        return dp[s.length()];
    }
}
