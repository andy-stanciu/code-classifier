class Solution {

    public boolean method1(String s, List<String> param2) {
        /*
        words[i] = s[:i] can be broken into words in wordDict
        words[i] = any { words[k] && words[k:i] in wordDict for a k < i }
        words[0] = true (the empty word can be written with any wordDict)
        */
        boolean[] var1 = new boolean[s.length() + 1];
        var1[0] = true;
        for (int i = 1; i <= s.length(); i++) {
            final int idx = i;
            var1[i] = param2.stream().filter(param1 -> idx >= param1.length()).anyMatch(param1 -> param1.contentEquals(s.subSequence(idx - param1.length(), idx)) && var1[idx - param1.length()]);
        }
        return var1[s.length()];
    }
}
