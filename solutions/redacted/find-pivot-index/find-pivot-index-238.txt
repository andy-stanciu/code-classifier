class Solution {

    // Run time 1ms
    public int method1(int[] nums) {
        if (nums.length == 1)
            return 0;
        // E.g: [1,7,3,6,5,6]
        int rightSum = 0;
        for (int i = 1; i < nums.length; i++) {
            rightSum += nums[i];
        }
        //  => i = pivot
        //  => leftSum = 0  Pivot = nums[i]  rightSum = sum(1, nums.length)
        int leftSum = 0;
        int i = 0;
        while (i < nums.length) {
            // If leftSum == rightSum => pivot is current index
            if (leftSum == rightSum) {
                // => Return i
                return i;
            }
            // If not, move pivot forward
            // if pivot is currently last element of the array
            if (i + 1 == nums.length)
                break;
            // Can not move forward (i+1 == length => out of bound) => stop the loop (pivot does not exist)
            // minus i+1 from rightSum
            rightSum -= nums[i + 1];
            // move leftSum range forward
            leftSum += nums[i];
            // i+1 now is next pivot
            i++;
        }
        return -1;
    }
}
