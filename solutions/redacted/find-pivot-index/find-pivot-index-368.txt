// approach 1: prefix and sufix sum method
// tc:O(n)
// sc:O(n)
/*class Solution {
    
    public int pivotIndex(int[] nums) {
        int n=nums.length;
        int[] leftSum=new int[n];
        int[] rightSum=new int[n];
        leftSum[0]=nums[0];
        rightSum[n-1]=nums[n-1];

        for(int i=1;i<n;i++){
            leftSum[i]=leftSum[i-1]+nums[i];
        }
        for(int i=n-2;i>=0;i--){
            rightSum[i]=rightSum[i+1]+nums[i];
        }
        for(int i=0;i<n;i++){
            if(leftSum[i]==rightSum[i]){
                return i;
            }
        }
        return -1;
        
    }
}*/
class Solution {

    public int method1(int[] nums) {
        int n = nums.length;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        int leftsum = 0;
        for (int i = 0; i < n; i++) {
            if (leftsum == (sum - leftsum - nums[i])) {
                return i;
            }
            leftsum += nums[i];
        }
        return -1;
    }
}
