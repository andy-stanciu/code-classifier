class Solution {

    public String method1(String s) {
        // Se a string tem 1 ou menos caracteres, retorna a pr\xF3pria string, pois j\xE1 \xE9 um pal\xEDndromo
        if (s.length() <= 1) {
            return s;
        }
        // Vari\xE1veis para armazenar o tamanho m\xE1ximo do pal\xEDndromo e a substring correspondente
        // Tamanho m\xEDnimo do pal\xEDndromo \xE9 1 (qualquer caractere sozinho)
        int maxLen = 1;
        // O menor pal\xEDndromo poss\xEDvel \xE9 o primeiro caractere da string
        String maxStr = s.substring(0, 1);
        // Percorre a string para verificar todas as substrings
        for (int i = 0; i < s.length() - 1; i++) {
            for (int j = i + 1; j < s.length(); j++) {
                // Se o comprimento da substring \xE9 maior que o tamanho do maior pal\xEDndromo encontrado
                // E a substring \xE9 um pal\xEDndromo
                if ((j - i + 1) > maxLen && isPalindrome(s, i, j)) {
                    // Atualiza o tamanho do maior pal\xEDndromo
                    maxLen = j - i + 1;
                    // Atualiza a substring correspondente
                    maxStr = s.substring(i, j + 1);
                }
            }
        }
        // Retorna o maior pal\xEDndromo encontrado
        return maxStr;
    }

    // Fun\xE7\xE3o auxiliar para verificar se uma substring \xE9 pal\xEDndromo
    private boolean isPalindrome(String s, int start, int end) {
        // Compara os caracteres do in\xEDcio ao meio da substring com os do final ao meio
        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) {
                // Se algum par de caracteres n\xE3o for igual, n\xE3o \xE9 um pal\xEDndromo
                return false;
            }
            start++;
            end--;
        }
        // Se passou por todos os pares de caracteres e todos s\xE3o iguais, \xE9 um pal\xEDndromo
        return true;
    }
}
