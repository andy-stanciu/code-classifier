class Solution {

    private int start = -1;

    private int length = 0;

    public String method1(String s) {
        explore(s, s.length() / 2, 0);
        return start == -1 ? null : s.substring(start, start + length);
    }

    private void explore(String s, int index, int direction) {
        int i = index - 1;
        int j = index + 1;
        // Expand around the center character
        while (i >= 0 && s.charAt(i) == s.charAt(index)) i--;
        while (j < s.length() && s.charAt(j) == s.charAt(index)) j++;
        int l = i;
        int r = j;
        // Further expand the palindrome
        while (l >= 0 && r < s.length() && s.charAt(l) == s.charAt(r)) {
            l--;
            r++;
        }
        l++;
        // Update the longest palindrome if necessary
        if (r - l > length) {
            this.length = r - l;
            this.start = l;
        }
        // Recursively explore left and right if potential for longer palindrome exists
        if (direction != 2 && 2 * (i + 1) > length)
            explore(s, i, 1);
        if (direction != 1 && 2 * (s.length() - j) > length)
            explore(s, j, 2);
    }
}
