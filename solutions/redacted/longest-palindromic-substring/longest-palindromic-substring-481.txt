class Solution {

    public String method1(String s) {
        //using stringBuilder instead of string because of it\'s mutable
        StringBuilder sb = new StringBuilder();
        f(s, 0, sb);
        return sb.toString();
    }

    public void f(String s, int idx, StringBuilder sb) {
        if (idx == s.length())
            return;
        for (int i = idx; i < s.length(); i++) {
            if (isPallindrome(s, idx, i) && i - idx + 1 > sb.length()) {
                //clear the stringbuilder because we have gotten the large string compared to the previous one
                sb.setLength(0);
                sb.append(s.substring(idx, i + 1));
            }
        }
        f(s, idx + 1, sb);
    }

    public boolean isPallindrome(String s, int st, int end) {
        //check the given range is pallindrome or not
        int i = st, j = end;
        while (i < j) {
            if (s.charAt(i) != s.charAt(j))
                return false;
            i++;
            j--;
        }
        return true;
    }
}
