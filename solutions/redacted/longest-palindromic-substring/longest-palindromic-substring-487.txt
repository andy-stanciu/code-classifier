class Solution {

    //d[i][j] s[i..j] is palindrome
    public String method1(String s) {
        int n = s.length();
        boolean[][] dp = new boolean[n][n];
        // base case
        for (int i = 0; i < n; i++) {
            dp[i][i] = true;
            if (i < n - 1 && s.charAt(i) == s.charAt(i + 1)) {
                dp[i][i + 1] = true;
            }
        }
        //bottom up
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                // avoid to cover base case dp[i][i+1] == true
                if (dp[i][j] == false) {
                    if (s.charAt(i) == s.charAt(j)) {
                        dp[i][j] = dp[i + 1][j - 1];
                    }
                }
            }
        }
        // find longest palindrome
        int length = -1;
        int[] index = new int[] { -1, -1 };
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (dp[i][j] && j - i + 1 > length) {
                    length = j - i + 1;
                    index[0] = i;
                    index[1] = j;
                }
            }
        }
        return s.substring(index[0], index[1] + 1);
    }
}
