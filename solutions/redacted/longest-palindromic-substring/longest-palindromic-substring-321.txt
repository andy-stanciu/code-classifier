class Solution {

    public static int meth(char[] chr, int left, int right) {
        while (left >= 0 && right < chr.length && chr[left] == chr[right]) {
            left--;
            right++;
        }
        return right - left - 1;
    }

    public String method1(String s) {
        if (s.length() == 1)
            return s;
        char[] chr = s.toCharArray();
        int start = 0, end = 0;
        for (int i = 0; i < chr.length; i++) {
            int len1 = meth(chr, i, i);
            int len2 = meth(chr, i, i + 1);
            int len = Math.max(len1, len2);
            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        return s.substring(start, end + 1);
        // String res="",st="";
        // for(int i=0;i<chr.length;i++)
        // {
        // for(int j=chr.length-1;j>=i;j--)
        // {
        //     if(chr[i]==chr[j])
        //     {
        //         boolean b=true;
        //         int left=i, right=j,count=j-i;
        //         while(left<right)
        //         {
        //         if(chr[left]!=chr[right])
        //         {
        //             b=false;
        //             break;
        //         }
        //         left++;
        //         right--;
        //         count++;
        //         }
        //         if(b)
        //         {
        //             st=s.substring(i,j+1);
        //             if(res.length()<=st.length())
        //             res=st;
        //         }
        // }
        // }
        // }
        // return res;
    }
}
