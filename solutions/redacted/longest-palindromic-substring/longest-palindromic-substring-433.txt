class Solution {

    public String method1(String str) {
        String method1 = "";
        Boolean check = false;
        // checking for edge case
        if (str.length() == 1) {
            return str;
        }
        // looping through all possible combinations of substring
        for (int i = 0; i < str.length(); i++) {
            for (int j = str.length() - 1; j > 0; j--) {
                check = recursiveCall(str, i, j);
                // checking if our current string is a palindrome
                // and longer than the previous longest palindrome
                if (check == true && (j + 1 - i) > method1.length()) {
                    method1 = str.substring(i, j + 1);
                }
            }
        }
        return method1;
    }

    // helper recursive method
    private Boolean recursiveCall(String str, int lower, int higher) {
        if (lower < higher) {
            // if they aren\'t equal, it\'s not a palindrome
            if (str.charAt(lower) == str.charAt(higher)) {
                return recursiveCall(str, lower + 1, higher - 1);
            } else {
                return false;
            }
        } else // if lower == higher or lower > higher
        {
            return true;
        }
    }
}
