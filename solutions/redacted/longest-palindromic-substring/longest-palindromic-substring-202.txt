// class Solution {
//     public String longestPalindrome(String s) {
//         int start = -1;
//         int max = 0;
//         for (int i = 0; i < s.length(); i++) {
//             StringBuilder sb = new StringBuilder();
//             for (int j = i; j < s.length(); j++) {
//                 sb.append(s.charAt(j));
//                 if (palindrome(sb.toString())) {
//                     int currentLength = sb.length();
//                     if (currentLength > max) {
//                         max = currentLength;
//                         start = i;
//                     }
//                 }
//             }
//         }
//         return start == -1 ? "" : s.substring(start, start + max);
//     }
//     public boolean palindrome(String s) {
//         int i = 0;
//         int j = s.length() - 1;
//         while (i < j) {
//             if (s.charAt(i) != s.charAt(j)) {
//                 return false;
//             }
//             i++;
//             j--;
//         }
//         return true;
//     }
// }
class Solution {

    public String method1(String s) {
        if (s == null || s.length() < 1)
            return "";
        int start = 0, end = 0;
        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i);
            int len2 = expandAroundCenter(s, i, i + 1);
            int len = Math.max(len1, len2);
            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        return s.substring(start, end + 1);
    }

    private int expandAroundCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1;
    }
}
