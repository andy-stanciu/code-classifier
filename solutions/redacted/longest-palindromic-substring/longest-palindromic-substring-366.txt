class Solution {

    public String method1(String s) {
        //     int max = Integer.MIN_VALUE;
        //     String maxstring = "";
        //     for(int i =0;i<s.length();i++){
        //         for(int j = i+1;j<=s.length();j++){
        //             String temp = s.substring(i,j);
        //             if(ispallindrome(temp)){
        //                 if(temp.length()>max){
        //                     maxstring = temp;
        //                     max = temp.length();
        //                 }
        //             }
        //         }
        //     }
        //     return maxstring;
        // }
        // public boolean ispallindrome(String s){
        //     int start =0;
        //     int end = s.length()-1;
        //     while(start<end){
        //         if(s.charAt(start)==s.charAt(end)){
        //                 start++;
        //                 end--;
        //         }else{
        //             return false;
        //         }
        //     }
        //     return true;
        //
        int maxlen = Integer.MIN_VALUE;
        String maxstring = "";
        for (int i = 0; i < s.length(); i++) {
            int left = i;
            int right = i;
            while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
                int len = right - left + 1;
                if (len > maxlen) {
                    maxstring = s.substring(left, right + 1);
                    maxlen = len;
                }
                left--;
                right++;
            }
            int left1 = i;
            int right1 = i + 1;
            while (left1 >= 0 && right1 < s.length() && s.charAt(left1) == s.charAt(right1)) {
                int len1 = right1 - left1 + 1;
                if (len1 > maxlen) {
                    maxstring = s.substring(left1, right1 + 1);
                    maxlen = len1;
                }
                left1--;
                right1++;
            }
        }
        return maxstring;
    }
}
