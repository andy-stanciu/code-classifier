class Solution {

    public static boolean solve(String s, int i, int j, int[][] t) {
        if (i >= j) {
            // t[i][j]=1;
            return true;
        }
        if (t[i][j] != -1) {
            return t[i][j] == 1;
        }
        if (s.charAt(i) != s.charAt(j)) {
            t[i][j] = 0;
            return false;
        } else {
            t[i][j] = solve(s, i + 1, j - 1, t) ? 1 : 0;
        }
        return t[i][j] == 1;
    }

    public String method1(String s) {
        int[][] t = new int[s.length()][s.length()];
        for (int i = 0; i < t.length; i++) {
            Arrays.fill(t[i], -1);
        }
        int n = s.length();
        int maxLen = 0;
        int startIndex = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (solve(s, i, j, t) && j - i + 1 > maxLen) {
                    startIndex = i;
                    maxLen = j - i + 1;
                }
            }
        }
        return s.substring(startIndex, startIndex + maxLen);
    }
}
