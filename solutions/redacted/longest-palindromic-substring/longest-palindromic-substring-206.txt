class Solution {

    public String method1(String s) {
        // int n=s.length();
        // if(s.length()<=1)
        // return s;
        // String ans="";
        // for(int i=1;i<n;i++){
        //     int low=i;int high=i;
        //     while(s.charAt(low)==s.charAt(high)){
        //         low--;
        //         high++;
        //          if(low==-1||high==n)
        //     break;
        //     }
        //    String pal=s.substring(low+1,high);
        //     low=i-1;
        //     high=i;
        //     if(pal.length()>ans.length())
        //     ans=pal;
        //     while(s.charAt(low)==s.charAt(high)){
        //         low--;
        //         high++;
        //          if(low==-1||high==n)
        //     break;
        //     }
        //     pal=s.substring(low+1,high);
        //     if(pal.length()>ans.length())
        //     ans=pal;
        // }
        // return ans;
        char ch = s.charAt(0);
        String ans = Character.toString(ch);
        int n = s.length();
        if (n == 1)
            return s;
        int maxi = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (isPallindrome(s, i, j) && (j - i) > maxi) {
                    maxi = j - i;
                    ans = s.substring(i, j + 1);
                }
            }
        }
        return ans;
    }

    boolean isPallindrome(String s, int start, int end) {
        while (start <= end) {
            if (s.charAt(start) != s.charAt(end))
                return false;
            start++;
            end--;
        }
        return true;
    }
}
