class Solution {

    public String method1(String s) {
        if (s.length() < 2)
            return s;
        String var1 = Character.toString(s.charAt(0));
        for (int i = 0; i < s.length(); i++) {
            int left = i;
            int right = i + 1;
            // check if next character in the string is the same as current and move the
            // right pointer further each time
            while (right < s.length() && s.charAt(i) == s.charAt(right)) {
                right++;
                i++;
            }
            if ((right - left) + 1 > var1.length())
                var1 = s.substring(left, right);
            right--;
            // expand from center to find largest palindrome
            while (left >= 0 && right <= s.length() - 1) {
                if (s.charAt(left) == s.charAt(right)) {
                    if ((right - left) + 1 > var1.length()) {
                        var1 = s.substring(left, right + 1);
                    }
                } else
                    break;
                left--;
                right++;
            }
        }
        return var1;
    }
}
