class Solution {

    int left;

    int right;

    int maxLength;

    String ans;

    public String method1(String s) {
        // Handle trivial case first
        if (s.length() == 1) {
            return s;
        }
        // Approach: Check for palindrome from the center
        ////////////////////////////////////////////////////////////////
        this.maxLength = 0;
        this.ans = "";
        for (int i = 0; i < s.length(); i++) {
            // case 1: the potential palindrome is even
            this.left = i;
            this.right = i + 1;
            while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
                left--;
                right++;
            }
            left++;
            right--;
            if (right - left + 1 > maxLength) {
                maxLength = right - left + 1;
                ans = s.substring(left, right + 1);
            }
            // case 2: the potential palindrome is odd
            this.left = i;
            this.right = i;
            while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
                left--;
                right++;
            }
            left++;
            right--;
            if (right - left + 1 > maxLength) {
                maxLength = right - left + 1;
                ans = s.substring(left, right + 1);
            }
        }
        return ans;
        ////////////////////////////////////////////////////////////////
    }
}
