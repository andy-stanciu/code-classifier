class Solution {

    public String method1(String s) {
        char[] arr = s.toCharArray();
        String palindrome = null;
        int length = 0;
        // Iterate through the string
        for (int i = 0; i < s.length() - 1; i++) {
            // Odd length palindrome
            if (i - 1 >= 0 && arr[i - 1] == arr[i + 1]) {
                int left = i - 1;
                int right = i + 1;
                // Expand outwards
                while (left >= 0 && right < arr.length && arr[left] == arr[right]) {
                    left--;
                    right++;
                }
                left++;
                if ((right - left) > length) {
                    length = right - left;
                    palindrome = s.substring(left, right);
                }
            }
            // Even length palindrome
            if (arr[i] == arr[i + 1]) {
                int left = i;
                int right = i + 1;
                // Expand outwards
                while (left >= 0 && right < arr.length && arr[left] == arr[right]) {
                    left--;
                    right++;
                }
                left++;
                if ((right - left) > length) {
                    length = right - left;
                    palindrome = s.substring(left, right);
                }
            }
        }
        // If no palindrome found, return single character
        return palindrome == null ? s.substring(0, 1) : palindrome;
    }
}
