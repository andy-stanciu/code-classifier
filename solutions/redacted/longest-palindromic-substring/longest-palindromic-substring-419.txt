// Two Pointer
class Solution {

    int start;

    int end0;

    int var1;

    public String method1(String s) {
        if (s.length() == 1) {
            return s;
        }
        start = 0;
        end = 0;
        var1 = 0;
        for (int i = 0; i < s.length(); i += 1) {
            palindromeFindHelper(s, i, i);
            palindromeFindHelper(s, i, i + 1);
        }
        return s.substring(start, end + 1);
    }

    private void palindromeFindHelper(String s, int left, int right) {
        while (left >= 0 && right < s.length()) {
            if (s.charAt(left) != s.charAt(right)) {
                break;
            }
            if (right - left + 1 > var1) {
                var1 = right - left + 1;
                start = left;
                end = right;
            }
            left -= 1;
            right += 1;
        }
    }
}

// Brute Force
class Solution {

    public String method1(String s) {
        // o(n^3), brute force solution
        // given string length = n, we have n + n-1 + n-2 + ...1
        // that makes (n + 1) * n/2
        int start = 0, end = 0;
        int var2 = 0;
        for (int i = 0; i < s.length(); i += 1) {
            for (int j = i; j < s.length(); j += 1) {
                if (isPalindrome(s, i, j) && j - i + 1 > var2) {
                    start = i;
                    end = j;
                    var2 = j - i + 1;
                }
            }
        }
        return s.substring(start, end + 1);
    }

    private boolean isPalindrome(String s, int left, int right) {
        while (left <= right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left += 1;
            right -= 1;
        }
        return true;
    }
}

// DP
class Solution {

    public String method1(String s) {
        // "aba", i = 2, j = 0
        int n = s.length();
        int res = 1;
        int left = 0;
        int right = 0;
        boolean[][] dp = new boolean[n][n];
        for (int i = 0; i < n; i += 1) {
            for (int j = i; j >= 0; j -= 1) {
                if (s.charAt(i) == s.charAt(j)) {
                    if (i - j < 2) {
                        dp[i][j] = true;
                    } else {
                        dp[i][j] = dp[i - 1][j + 1];
                    }
                } else {
                    dp[i][j] = false;
                }
                if (dp[i][j]) {
                    if (i - j + 1 > res) {
                        res = i - j + 1;
                        left = j;
                        right = i;
                    }
                }
            }
        }
        return s.substring(left, right + 1);
    }
}
