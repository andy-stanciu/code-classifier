class Solution {

    public String method1(String s) {
        //the current longest palindrome string (put insided an array always of length 1 so it can be reference passed to each recursive function and muatted)
        String[] var1 = { "" };
        //recursively check iterations of the string to find longest palindrome
        method2(var1, s, s.length());
        return var1[0];
    }

    //checks if string is a palindrome, if so terminates the current recursive loop and sets the currentLongestPalindrome to the current string
    public void method2(String[] var1, String stringToIterateThrough, int param1) {
        //start at the start of the string and go through the string checking if each substring of this current size is a palindrome
        int var2 = 0;
        int var3 = param1;
        while (var3 <= stringToIterateThrough.length()) {
            String var4 = stringToIterateThrough.substring(var2, var3);
            if (isPalindrome(var4)) {
                var1[0] = var4;
                return;
            }
            var2++;
            var3++;
        }
        //if we get through the whole substring size of the main string and there is no palindrome then recursively start again with the substring length decreasing
        method2(var1, stringToIterateThrough, param1 - 1);
    }

    //returns the palindrome length (if string is not a palindrome returns -1)
    public boolean isPalindrome(String palindrome) {
        int pointer1 = 0;
        int pointer2 = palindrome.length() - 1;
        while (pointer2 >= pointer1) {
            //if the two chars don\'t equal each other string is not a palindrome
            if (palindrome.charAt(pointer1) != palindrome.charAt(pointer2)) {
                return false;
            }
            pointer1++;
            pointer2--;
        }
        //if you got through the whole string then its a palindrome so return the length
        return true;
    }
}
