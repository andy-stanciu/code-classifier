class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);
        backtrack(result, nums, new ArrayList<>(), new boolean[nums.length]);
        return result;
    }

    public void backtrack(List<List<Integer>> result, int[] nums, List<Integer> curr, boolean[] used) {
        if (curr.size() == nums.length) {
            result.add(new ArrayList<>(curr));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (used[i])
                continue;
            if (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])
                continue;
            curr.add(nums[i]);
            used[i] = true;
            backtrack(result, nums, curr, used);
            used[i] = false;
            curr.remove(curr.size() - 1);
        }
    }
}
