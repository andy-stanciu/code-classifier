class Solution {

    void permute(int index, int[] nums, Set<List<Integer>> ans) {
        if (index == nums.length - 1) {
            List<Integer> temp = new ArrayList<Integer>();
            for (int i = 0; i <= nums.length - 1; i++) {
                temp.add(nums[i]);
            }
            ans.add(new ArrayList<>(temp));
            return;
        }
        for (int i = index; i <= nums.length - 1; i++) {
            swap(i, index, nums);
            permute(index + 1, nums, ans);
            swap(i, index, nums);
        }
    }

    void swap(int i, int index, int[] nums) {
        int temp = nums[i];
        nums[i] = nums[index];
        nums[index] = temp;
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        Set<List<Integer>> ans = new HashSet<>();
        permute(0, nums, ans);
        List<List<Integer>> response = new ArrayList<>(ans);
        return response;
    }
}
