class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList();
        Map<Integer, Integer> map = new HashMap();
        for (int i = 0; i < nums.length; i++) {
            Integer value = map.get(nums[i]);
            if (value != null) {
                map.put(nums[i], value + 1);
            } else {
                map.put(nums[i], 1);
            }
        }
        backTrack(res, new ArrayList(), nums, map);
        return res;
    }

    public void backTrack(List<List<Integer>> list, List<Integer> tempList, int[] nums, Map<Integer, Integer> map) {
        if (tempList.size() == nums.length) {
            list.add(new ArrayList(tempList));
            return;
        }
        for (Integer num : map.keySet()) {
            int count = map.get(num);
            if (count == 0)
                continue;
            map.put(num, count - 1);
            tempList.add(num);
            backTrack(list, tempList, nums, map);
            tempList.remove(tempList.size() - 1);
            map.put(num, count);
        }
    }
}
