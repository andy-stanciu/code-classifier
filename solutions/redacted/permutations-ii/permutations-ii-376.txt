/*
std problems 
TC : O(n^2)
SC : O(n^2) depends on no of unique elements in array  

*/
class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> rs = new ArrayList();
        boolean[] visited = new boolean[nums.length];
        backtrack(rs, new ArrayList<Integer>(), nums, visited);
        return rs;
    }

    public void backtrack(List<List<Integer>> rs, List<Integer> result, int[] nums, boolean[] visited) {
        if (result.size() == nums.length)
            rs.add(new ArrayList<Integer>(result));
        for (int i = 0; i < nums.length; i++) {
            if (visited[i] || (i > 0 && nums[i] == nums[i - 1] && !visited[i - 1]))
                continue;
            result.add(nums[i]);
            visited[i] = true;
            backtrack(rs, result, nums, visited);
            visited[i] = false;
            result.remove(result.size() - 1);
        }
    }
}
