class Solution {

    public void f(HashSet<List<Integer>> set, int[] nums, List<Integer> list, boolean[] visited) {
        for (int i = 0; i < nums.length; i++) {
            if (nums.length == list.size()) {
                set.add(new ArrayList<>(list));
                return;
            }
            if (visited[i] == true) {
                continue;
            }
            visited[i] = true;
            list.add(nums[i]);
            f(set, nums, list, visited);
            list.remove(list.size() - 1);
            visited[i] = false;
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        HashSet<List<Integer>> lists = new HashSet<>();
        boolean[] visited = new boolean[nums.length];
        f(lists, nums, new ArrayList(), visited);
        List<List<Integer>> ans = new ArrayList<>(lists);
        return ans;
    }
}
