class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        if (nums == null)
            return null;
        List<List<Integer>> res = new ArrayList();
        Arrays.sort(nums);
        dfs(res, new ArrayList(), nums, new boolean[nums.length]);
        return res;
    }

    private void dfs(List<List<Integer>> res, List<Integer> list, int[] candidates, boolean[] isUsed) {
        if (list.size() == candidates.length) {
            res.add(new ArrayList(list));
        }
        for (int i = 0; i < candidates.length; i++) {
            if (isUsed[i] || (i >= 1 && !isUsed[i - 1] && candidates[i] == candidates[i - 1]))
                continue;
            list.add(candidates[i]);
            isUsed[i] = true;
            dfs(res, list, candidates, isUsed);
            list.remove(list.size() - 1);
            isUsed[i] = false;
        }
    }
}
