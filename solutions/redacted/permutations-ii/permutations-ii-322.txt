class Solution {

    List<List<Integer>> s = new ArrayList<>();

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<Integer> d = new ArrayList<>();
        boolean[] f = new boolean[nums.length];
        uniquepermuteutil(nums, d, f);
        return s;
    }

    public void uniquepermuteutil(int[] a, List<Integer> d, boolean[] f) {
        if (d.size() == a.length) {
            if (!s.contains(d)) {
                s.add(new ArrayList<>(d));
            }
            return;
        }
        for (int i = 0; i < a.length; i++) {
            if (!f[i]) {
                f[i] = true;
                d.add(a[i]);
                uniquepermuteutil(a, d, f);
                f[i] = false;
                d.remove(d.size() - 1);
            }
        }
    }
}
