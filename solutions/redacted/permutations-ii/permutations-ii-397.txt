class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Set<List<Integer>> ans = new HashSet();
        ans = permuteHelp(new ArrayList<>(), nums);
        return new ArrayList(ans);
    }

    static Set<List<Integer>> permuteHelp(List<Integer> up, int[] base) {
        //base case- when all elements are selected then base length becomes zero
        //include the unprocessed in  answer  and return answer
        if (base.length == 0) {
            Set<List<Integer>> sublist = new HashSet();
            sublist.add(up);
            return sublist;
        }
        //strategy- select from base and add in the unprocessed
        //select first number
        int firstNum = base[0];
        Set<List<Integer>> answer = new HashSet();
        //iterate over the unprocessed
        for (int i = 0; i <= up.size(); i++) {
            List<Integer> temp = new ArrayList<>();
            //select first part
            temp.addAll(up.subList(0, i));
            //add number from base
            temp.add(firstNum);
            //add remaining list
            temp.addAll(up.subList(i, up.size()));
            answer.addAll(permuteHelp(temp, Arrays.copyOfRange(base, 1, base.length)));
        }
        return answer;
    }
}
