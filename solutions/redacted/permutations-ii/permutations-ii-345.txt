class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        int len = nums.length;
        backtrack(nums, len, res, new ArrayList<>(), new boolean[len]);
        return res;
    }

    private void backtrack(int[] nums, int len, List<List<Integer>> res, List<Integer> temp, boolean[] visited) {
        if (temp.size() == len) {
            res.add(new ArrayList<>(temp));
        } else {
            for (int i = 0; i < len; i++) {
                if (visited[i] || i > 0 && nums[i] == nums[i - 1] && !visited[i - 1])
                    continue;
                visited[i] = true;
                temp.add(nums[i]);
                backtrack(nums, len, res, temp, visited);
                visited[i] = false;
                temp.remove(temp.size() - 1);
            }
        }
    }
}
