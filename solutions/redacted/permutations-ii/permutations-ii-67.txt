class Solution {

    public void swap(int[] arr, int a, int b) {
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }

    public void helper(List<List<Integer>> ans, int[] nums, int index) {
        // base case:
        if (index == nums.length - 1) {
            List<Integer> temp = new ArrayList<>();
            for (int num : nums) {
                temp.add(num);
            }
            if (ans.contains(temp)) {
                return;
            }
            ans.add(temp);
        } else {
            for (int i = index; i < nums.length; i++) {
                swap(nums, index, i);
                helper(ans, nums, index + 1);
                swap(nums, index, i);
            }
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        helper(ans, nums, 0);
        return ans;
    }
}
