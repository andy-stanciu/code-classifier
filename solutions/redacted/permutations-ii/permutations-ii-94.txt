class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ll = new ArrayList<>();
        Arrays.sort(nums);
        backtrack(ll, nums, new ArrayList<>(), new boolean[nums.length]);
        return ll;
    }

    public void backtrack(List<List<Integer>> ll, int[] nums, List<Integer> al, boolean[] used) {
        if (al.size() == nums.length) {
            ll.add(new ArrayList<>(al));
        } else {
            for (int i = 0; i < nums.length; i++) {
                if (used[i] || i > 0 && nums[i] == nums[i - 1] && !used[i - 1])
                    continue;
                used[i] = true;
                al.add(nums[i]);
                backtrack(ll, nums, al, used);
                used[i] = false;
                al.remove(al.size() - 1);
            }
        }
    }
}
