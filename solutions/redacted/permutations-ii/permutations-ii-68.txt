class Solution {

    public void solve(int[] nums, List<List<Integer>> ans, List<Integer> subset, int index, boolean[] used) {
        if (index == nums.length) {
            ans.add(new ArrayList<>(subset));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (used[i] || (i > 0 && nums[i - 1] == nums[i] && !used[i - 1]))
                continue;
            subset.add(nums[i]);
            used[i] = true;
            solve(nums, ans, subset, index + 1, used);
            subset.remove(subset.size() - 1);
            used[i] = false;
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        boolean[] used = new boolean[nums.length];
        Arrays.sort(nums);
        solve(nums, ans, new ArrayList<>(), 0, used);
        return ans;
    }
}
