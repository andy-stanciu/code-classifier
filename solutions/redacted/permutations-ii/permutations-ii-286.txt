class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) list.add(nums[i]);
        return backtrack(0, list);
    }

    private List<List<Integer>> backtrack(int index, List<Integer> processed) {
        List<List<Integer>> ans = new ArrayList<>();
        if (index == processed.size()) {
            ans.add(new ArrayList<Integer>(processed));
            return ans;
        }
        for (int i = index; i < processed.size(); i++) {
            swap(processed, i, index);
            ans.addAll(backtrack(index + 1, processed));
        }
        int temp = processed.get(index);
        processed.remove(index);
        processed.add(temp);
        return ans;
    }

    private void swap(List<Integer> list, int a, int b) {
        int temp = list.get(a);
        list.set(a, list.get(b));
        list.set(b, temp);
    }
}
