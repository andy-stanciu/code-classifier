class Solution {

    private void recurPermute(int[] nums, List<Integer> list, List<List<Integer>> ans, boolean[] flag) {
        if (list.size() == nums.length) {
            ans.add(new ArrayList<>(list));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!flag[i]) {
                if (flag[i] || (i > 0 && nums[i] == nums[i - 1] && !flag[i - 1]))
                    continue;
                flag[i] = true;
                list.add(nums[i]);
                recurPermute(nums, list, ans, flag);
                list.remove(list.size() - 1);
                flag[i] = false;
            }
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        List<Integer> list = new ArrayList<>();
        boolean[] flag = new boolean[nums.length];
        recurPermute(nums, list, ans, flag);
        return ans;
    }
}
