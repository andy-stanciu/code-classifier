class Solution {

    List<List<Integer>> ans = new ArrayList<List<Integer>>();

    public List<List<Integer>> permuteUnique(int[] nums) {
        HashSet<List<Integer>> hSet = new HashSet<List<Integer>>();
        boolean[] flags = new boolean[nums.length];
        backTracking(nums, new ArrayList<Integer>(), hSet, flags);
        return ans;
    }

    public void backTracking(int[] nums, List<Integer> temp, HashSet<List<Integer>> hSet, boolean[] flags) {
        if (temp.size() == nums.length) {
            if (!hSet.contains(temp)) {
                hSet.add(temp);
                ans.add(new ArrayList<Integer>(temp));
            }
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (flags[i]) {
                continue;
            }
            temp.add(nums[i]);
            flags[i] = true;
            backTracking(nums, temp, hSet, flags);
            temp.remove(temp.size() - 1);
            flags[i] = false;
        }
    }
}
