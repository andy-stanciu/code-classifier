class Solution {

    private void permu(int ind, int[] arr, List<List<Integer>> ans) {
        if (ind == arr.length) {
            List<Integer> ds = new ArrayList<>();
            for (int i = 0; i < arr.length; i++) {
                ds.add(arr[i]);
            }
            ans.add(new ArrayList<>(ds));
            return;
        }
        Set<Integer> appeard = new HashSet<>();
        for (int i = ind; i < arr.length; i++) {
            if (appeard.add(arr[i])) {
                swap(i, ind, arr);
                permu(ind + 1, arr, ans);
                swap(i, ind, arr);
            }
        }
    }

    private void swap(int i, int j, int[] arr) {
        int temp = 0;
        temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        permu(0, nums, ans);
        return ans;
    }
}
