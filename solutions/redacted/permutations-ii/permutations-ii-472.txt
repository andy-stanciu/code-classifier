class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        method1(nums, new boolean[nums.length], new ArrayList<>(), ans);
        Set<List<Integer>> set = new HashSet<>();
        set.addAll(ans);
        ans.clear();
        ans.addAll(set);
        return ans;
    }

    public void method1(int[] nums, boolean[] map, List<Integer> temp, List<List<Integer>> ans) {
        if (temp.size() == nums.length) {
            ans.add(new ArrayList<>(temp));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (map[i] == false) {
                map[i] = true;
                temp.add(nums[i]);
                method1(nums, map, temp, ans);
                map[i] = false;
                temp.remove(temp.size() - 1);
            }
        }
        return;
    }
}
