class Solution {

    public void f(int[] nums, List<List<Integer>> ans, List<Integer> ds, boolean[] ar, int n) {
        if (ds.size() == nums.length) {
            ans.add(new ArrayList<>(ds));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!ar[i]) {
                if (n == nums[i])
                    continue;
                ar[i] = true;
                ds.add(nums[i]);
                n = 11;
                f(nums, ans, ds, ar, n);
                n = ds.get(ds.size() - 1);
                ds.remove(ds.size() - 1);
                ar[i] = false;
            }
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> ds = new ArrayList<>();
        boolean[] ar = new boolean[nums.length];
        f(nums, ans, ds, ar, 11);
        return ans;
    }
}
