class Solution {

    public static void permute(int idx, int[] nums, List<List<Integer>> ans) {
        if (idx == nums.length) {
            List<Integer> temp = new ArrayList<>();
            for (int i = 0; i < nums.length; i++) temp.add(nums[i]);
            ans.add(new ArrayList<>(temp));
        }
        HashSet<Integer> present = new HashSet<>();
        for (int i = idx; i < nums.length; i++) {
            if (present.add(nums[i])) {
                swap(i, idx, nums);
                permute(idx + 1, nums, ans);
                swap(i, idx, nums);
            }
        }
    }

    public static void swap(int i, int idx, int[] nums) {
        int temp = nums[i];
        nums[i] = nums[idx];
        nums[idx] = temp;
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        permute(0, nums, ans);
        return ans;
    }
}
