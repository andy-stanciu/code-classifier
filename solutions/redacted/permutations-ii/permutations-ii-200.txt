class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        int n = nums.length;
        List<List<Integer>> ans = new ArrayList<>();
        Set<List<Integer>> set = new HashSet<>();
        boolean[] vis = new boolean[n];
        helper(nums, set, vis, new ArrayList<>());
        for (List<Integer> list : set) {
            ans.add(list);
        }
        return ans;
    }

    private void helper(int[] nums, Set<List<Integer>> res, boolean[] vis, List<Integer> subList) {
        if (subList.size() == nums.length) {
            res.add(new ArrayList<>(subList));
        }
        for (int i = 0; i < nums.length; i++) {
            if (!vis[i]) {
                subList.add(nums[i]);
                vis[i] = true;
                helper(nums, res, vis, subList);
                vis[i] = false;
                subList.remove(subList.size() - 1);
            }
        }
    }
}
