class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        LinkedList<Integer> _nums = new LinkedList<>();
        for (int i = 0; i < nums.length; i++) {
            _nums.add(nums[i]);
        }
        return permutation(_nums);
    }

    public List<List<Integer>> permutation(LinkedList<Integer> nums) {
        List<List<Integer>> res = new ArrayList<>();
        if (nums.size() == 1) {
            res.add(new ArrayList<>(nums));
            return res;
        }
        for (int i = 0; i < nums.size(); i++) {
            int num = nums.pollFirst();
            List<List<Integer>> var1 = permutation(nums);
            for (List<Integer> perm : var1) {
                perm.add(num);
            }
            res.addAll(var1);
            nums.addLast(num);
            while (i + 1 < nums.size() && num == nums.getFirst()) {
                nums.add(nums.poll());
                i++;
            }
        }
        return res;
    }
}
