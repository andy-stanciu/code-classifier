class Solution {

    private void solve(int i, int n, List<List<Integer>> ans, List<Integer> ls) {
        if (i == n) {
            //    ADDING ONLY IF NOT EXIST
            if (ans.contains(ls) == false)
                ans.add(new ArrayList<>(ls));
            return;
        }
        //   Swaping each node with every node
        for (int j = i; j < n; j++) {
            Collections.swap(ls, i, j);
            solve(i + 1, n, ans, ls);
            Collections.swap(ls, i, j);
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> ls = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            ls.add(nums[i]);
        }
        solve(0, ls.size(), ans, ls);
        return ans;
    }
}
