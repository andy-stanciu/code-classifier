class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        int len = nums.length;
        List<List<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<>(), len, map);
        return result;
    }

    public void backtrack(List<List<Integer>> result, List<Integer> temp, int len, Map<Integer, Integer> map) {
        if (temp.size() == len) {
            result.add(new ArrayList<>(temp));
            return;
        }
        for (int num : map.keySet()) {
            if (map.get(num) > 0) {
                temp.add(num);
                map.put(num, map.get(num) - 1);
                backtrack(result, temp, len, map);
                temp.remove(temp.size() - 1);
                map.put(num, map.get(num) + 1);
            }
        }
    }
}
