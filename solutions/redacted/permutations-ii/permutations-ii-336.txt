class Solution {

    List<List<Integer>> res = new LinkedList<>();

    LinkedList<Integer> track = new LinkedList<>();

    boolean[] used;

    public List<List<Integer>> permuteUnique(int[] nums) {
        // \u5148\u6392\u5E8F\uFF0C\u8BA9\u76F8\u540C\u7684\u5143\u7D20\u9760\u5728\u4E00\u8D77
        Arrays.sort(nums);
        used = new boolean[nums.length];
        backtrack(nums);
        return res;
    }

    private void backtrack(int[] nums) {
        if (track.size() == nums.length) {
            res.add(new LinkedList(track));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (used[i])
                continue;
            // \u65B0\u6DFB\u52A0\u7684\u526A\u679D\u903B\u8F91\uFF0C\u56FA\u5B9A\u76F8\u540C\u7684\u5143\u7D20\u5728\u6392\u5217\u4E2D\u7684\u76F8\u5BF9\u4F4D\u7F6E
            // \u6BD4\u5982\u8F93\u5165 nums = [1,2,2\',2\'\']\uFF0C2\' \u53EA\u6709\u5728 2 \u5DF2\u7ECF\u88AB\u4F7F\u7528\u7684\u60C5\u51B5\u4E0B\u624D\u4F1A\u88AB\u9009\u62E9
            if (i > 0 && nums[i] == nums[i - 1] && !used[i - 1]) {
                // \u5982\u679C\u524D\u9762\u7684\u76F8\u90BB\u76F8\u7B49\u5143\u7D20\u6CA1\u6709\u7528\u8FC7\uFF0C\u5219\u8DF3\u8FC7
                continue;
            }
            track.add(nums[i]);
            used[i] = true;
            backtrack(nums);
            track.removeLast();
            used[i] = false;
        }
    }
}
