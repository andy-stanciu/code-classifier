class Solution {

    List<List<Integer>> ans = new ArrayList<>();

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<Integer> p = new ArrayList<>();
        method1(p, nums, 0);
        return ans;
    }

    public void method1(List<Integer> p, int[] arr, int x) {
        int n = arr.length;
        if (x >= n) {
            ans.add(p);
            return;
        }
        p.add(arr[x]);
        for (int i = 0; i < p.size(); i++) {
            List<Integer> newP = new ArrayList<>();
            newP.addAll(p);
            method1(newP, arr, x + 1);
            if (i < p.size() - 1 && p.get(p.size() - 1 - i) == p.get(p.size() - 1 - i - 1))
                break;
            if (i < p.size() - 1) {
                Collections.swap(p, p.size() - 1 - i, p.size() - 1 - i - 1);
            }
        }
    }
}
