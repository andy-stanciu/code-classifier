class Solution {

    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public void solve(int[] nums, int index, HashSet<List<Integer>> set) {
        if (index >= nums.length) {
            ArrayList<Integer> temp = new ArrayList<>();
            for (int i = 0; i < nums.length; i++) {
                temp.add(nums[i]);
            }
            set.add(temp);
            return;
        }
        for (int i = index; i < nums.length; i++) {
            swap(nums, index, i);
            solve(nums, index + 1, set);
            swap(nums, index, i);
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        HashSet<List<Integer>> tempAns = new HashSet<>();
        List<List<Integer>> ans = new ArrayList<>();
        int index = 0;
        solve(nums, index, tempAns);
        ans.addAll(tempAns);
        return ans;
    }
}
