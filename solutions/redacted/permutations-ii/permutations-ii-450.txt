class Solution {

    public List<Integer> temp;

    public List<List<Integer>> a = new ArrayList<List<Integer>>();

    public List<List<Integer>> permuteUnique(int[] nums) {
        permut(nums, 0, nums.length - 1);
        return a;
    }

    public void permut(int[] nums, int l, int r) {
        if (l == r) {
            temp = new ArrayList<Integer>();
            for (int k : nums) temp.add((Integer) k);
            a.add(temp);
        } else {
            List<Integer> used = new ArrayList<Integer>();
            for (int i = l; i <= r; i++) {
                if (used.contains(nums[i]))
                    continue;
                used.add(nums[i]);
                swap(nums, i, l);
                permut(nums, l + 1, r);
                swap(nums, i, l);
            }
        }
    }

    public void swap(int[] nums, int i, int l) {
        int temp = nums[i];
        nums[i] = nums[l];
        nums[l] = temp;
    }
}
