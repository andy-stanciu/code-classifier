class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        if (nums == null || nums.length == 0)
            return new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        helper(nums, ans, new ArrayList<Integer>(), new boolean[nums.length]);
        return ans;
    }

    public void helper(int[] nums, List<List<Integer>> ans, List<Integer> cur, boolean[] used) {
        if (cur.size() == nums.length) {
            ans.add(new ArrayList<>(cur));
        }
        for (int i = 0; i < nums.length; i++) {
            if (used[i])
                continue;
            if (i > 0 && nums[i - 1] == nums[i] && !used[i - 1])
                continue;
            cur.add(nums[i]);
            used[i] = true;
            helper(nums, ans, cur, used);
            used[i] = false;
            cur.remove(cur.size() - 1);
        }
    }
}
