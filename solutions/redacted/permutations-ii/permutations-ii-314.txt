class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        // Arrays.sort(nums);
        backtrack(nums, res, new ArrayList<>(), new boolean[nums.length]);
        return res;
    }

    private void backtrack(int[] nums, List<List<Integer>> res, List<Integer> temp, boolean[] visited) {
        if (temp.size() == nums.length && !res.contains(temp)) {
            res.add(new ArrayList<>(temp));
            return;
        }
        // Set<Integer> used = new HashSet<>();
        for (int i = 0; i < nums.length; i++) {
            if (visited[i]) {
                continue;
            }
            // used.add(nums[i]);
            visited[i] = true;
            temp.add(nums[i]);
            backtrack(nums, res, temp, visited);
            visited[i] = false;
            temp.remove(temp.size() - 1);
        }
    }
}
