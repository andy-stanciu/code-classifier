class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        //to track the added elems
        List<Integer> ind = new ArrayList<Integer>();
        Set<List<Integer>> ansArr = new HashSet<List<Integer>>();
        List<Integer> arr = new ArrayList<>();
        traverse(nums, ansArr, ind, arr);
        return new ArrayList<List<Integer>>(ansArr);
    }

    private void traverse(int[] nums, Set<List<Integer>> ansArr, List<Integer> ind, List<Integer> arr) {
        if (arr.size() == nums.length) {
            ansArr.add(new ArrayList(arr));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!ind.contains(i)) {
                ind.add(i);
                arr.add(nums[i]);
                traverse(nums, ansArr, ind, arr);
                int lastInserted = arr.size();
                ind.remove(lastInserted - 1);
                arr.remove(lastInserted - 1);
            }
        }
    }
}
