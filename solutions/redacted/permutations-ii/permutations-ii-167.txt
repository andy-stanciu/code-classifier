class Solution {

    List<List<Integer>> ans;

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        boolean[] visited = new boolean[nums.length];
        ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        permutation(nums, 0, list, visited);
        return ans;
    }

    public void permutation(int[] nums, int index, List<Integer> list, boolean[] visited) {
        if (index == nums.length) {
            ans.add(new ArrayList<>(list));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited[i] != true) {
                if (i >= 1 && nums[i] == nums[i - 1] && visited[i] == false && visited[i - 1] == false) {
                    continue;
                } else {
                    list.add(nums[i]);
                    visited[i] = true;
                    permutation(nums, index + 1, list, visited);
                    list.remove(list.size() - 1);
                    visited[i] = false;
                }
            }
        }
    }
}
