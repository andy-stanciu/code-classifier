class Solution {

    List<List<Integer>> ans;

    public void per(int[] nums, int pos, int n) {
        if (pos == n - 1) {
            List<Integer> t = new ArrayList<>();
            for (int x : nums) t.add(x);
            if (!ans.contains(t))
                ans.add(t);
            return;
        }
        for (int i = 0; i < n - pos; i++) {
            swap(nums, pos, i + pos);
            per(nums, pos + 1, n);
            swap(nums, pos, i + pos);
        }
    }

    public void swap(int[] nums, int x, int y) {
        int temp = nums[x];
        nums[x] = nums[y];
        nums[y] = temp;
        return;
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        ans = new ArrayList<>();
        per(nums, 0, nums.length);
        return ans;
    }
}
