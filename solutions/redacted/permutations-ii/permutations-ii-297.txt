class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        //use hashset
        Set<List<Integer>> result = new HashSet<List<Integer>>();
        backTracking(nums, new boolean[nums.length], new ArrayList<Integer>(), result);
        // remember to convert it back to list
        return new ArrayList<>(result);
    }

    private void backTracking(int[] nums, boolean[] used, List<Integer> list, Set<List<Integer>> result) {
        if (list.size() == nums.length) {
            result.add(new ArrayList<Integer>(list));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (used[i]) {
                continue;
            }
            list.add(nums[i]);
            used[i] = true;
            backTracking(nums, used, list, result);
            list.remove(list.size() - 1);
            used[i] = false;
        }
    }
}
