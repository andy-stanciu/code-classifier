class Solution {

    //Store as set To Remove Duplicate Permutations.
    Set<List<Integer>> set = new HashSet<>();

    //Adding Permutation
    public void addPermutation(int[] nums) {
        List<Integer> temp = new ArrayList<>();
        for (int i : nums) {
            temp.add(i);
        }
        set.add(temp);
    }

    //Swap
    public void swap(int[] nums, int a, int b) {
        int t = nums[a];
        nums[a] = nums[b];
        nums[b] = t;
    }

    //Permutation Method
    public void permutation(int[] nums, int currIdx) {
        if (currIdx == nums.length - 1) {
            addPermutation(nums);
            return;
        }
        for (int i = currIdx; i < nums.length; i++) {
            swap(nums, i, currIdx);
            permutation(nums, currIdx + 1);
            swap(nums, i, currIdx);
        }
    }

    //Main Method
    public List<List<Integer>> permuteUnique(int[] nums) {
        permutation(nums, 0);
        //Changing Set to List.
        List<List<Integer>> list = new ArrayList<>(set);
        return list;
    }
}
