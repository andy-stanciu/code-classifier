class Solution {

    // Have duplicates, cannot used more than once, permutation -> use boolean[] and compare nums[i-1] and nums[i] with sorting
    List<List<Integer>> res = new LinkedList<>();

    LinkedList<Integer> path = new LinkedList<>();

    boolean[] used;

    public List<List<Integer>> permuteUnique(int[] nums) {
        used = new boolean[nums.length];
        Arrays.sort(nums);
        backtrack(nums);
        return res;
    }

    public void backtrack(int[] nums) {
        if (path.size() == nums.length) {
            // base case: all numbers have been used
            res.add(new LinkedList<>(path));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            // if it is used, skip it
            if (used[i])
                continue;
            // Note when two consectuive elements are the same, we only use current element when the previous element has been used
            if (i > 0 && nums[i - 1] == nums[i] && !used[i - 1]) {
                continue;
            }
            path.addLast(nums[i]);
            used[i] = true;
            backtrack(nums);
            path.removeLast();
            used[i] = false;
        }
    }
}
