class Solution {

    List<List<Integer>> ans;

    int numbers[], limit;

    protected void DFS(LinkedList<Integer> temp) {
        if (temp.size() == limit)
            ans.add(new ArrayList<Integer>(temp));
        else {
            for (int i = 0; i != 21; i++) if (numbers[i] != 0) {
                temp.add(i - 10);
                numbers[i]--;
                DFS(temp);
                numbers[i]++;
                temp.pollLast();
            }
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        ans = new ArrayList<List<Integer>>();
        limit = nums.length;
        numbers = new int[21];
        for (int n : nums) numbers[n + 10]++;
        DFS(new LinkedList<Integer>());
        return ans;
    }
}
