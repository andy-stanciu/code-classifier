class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        int n = nums.length;
        List<List<Integer>> list = new ArrayList();
        List<Integer> li = new ArrayList();
        Arrays.sort(nums);
        boolean[] visited = new boolean[n];
        backtrack(nums, list, li, visited);
        return list;
    }

    public void backtrack(int[] nums, List<List<Integer>> list, List<Integer> li, boolean[] visited) {
        if (nums.length == li.size()) {
            list.add(new ArrayList(li));
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited[i]) {
                continue;
            }
            visited[i] = true;
            li.add(nums[i]);
            backtrack(nums, list, li, visited);
            li.remove(li.size() - 1);
            visited[i] = false;
            while (i + 1 < nums.length && nums[i] == nums[i + 1]) {
                i++;
            }
        }
    }
}
