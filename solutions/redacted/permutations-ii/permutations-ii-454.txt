class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        boolean[] visited = new boolean[nums.length];
        HashSet<List<Integer>> res = new HashSet<>();
        List<Integer> curr = new ArrayList<>();
        backtrack(nums, curr, res, visited);
        List<List<Integer>> ans = new ArrayList<>(res);
        return ans;
    }

    public void backtrack(int[] nums, List<Integer> curr, HashSet<List<Integer>> res, boolean[] visited) {
        if (curr.size() == nums.length) {
            res.add(new ArrayList<>(curr));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!visited[i]) {
                curr.add(nums[i]);
                visited[i] = true;
                backtrack(nums, curr, res, visited);
                visited[i] = false;
                curr.remove(curr.size() - 1);
            }
        }
    }
}
