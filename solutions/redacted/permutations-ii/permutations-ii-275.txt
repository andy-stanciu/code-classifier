class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        method1(nums, ans, 0, nums.length);
        return ans;
    }

    public void method1(int[] nums, List<List<Integer>> ans, int idx, int N) {
        HashSet<Integer> visited = new HashSet<>();
        if (idx == N) {
            List<Integer> temp = new ArrayList<>();
            for (int j = 0; j < N; j++) {
                temp.add(nums[j]);
            }
            ans.add(temp);
        }
        for (int i = idx; i < N; i++) {
            if (!visited.contains(nums[i]) && (i == idx || nums[i] != nums[idx])) {
                swap(nums, i, idx);
                method1(nums, ans, idx + 1, N);
                swap(nums, i, idx);
                visited.add(nums[i]);
            }
        }
    }

    public void swap(int[] A, int i, int j) {
        int temp = A[j];
        A[j] = A[i];
        A[i] = temp;
    }
}
