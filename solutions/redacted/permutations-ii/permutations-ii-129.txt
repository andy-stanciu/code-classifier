public class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        // Sort the array to bring duplicates together
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> permutation = new ArrayList<>();
        boolean[] used = new boolean[nums.length];
        backtrack(nums, permutation, result, used);
        return result;
    }

    private void backtrack(int[] nums, List<Integer> permutation, List<List<Integer>> result, boolean[] used) {
        if (permutation.size() == nums.length) {
            result.add(new ArrayList<>(permutation));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (used[i] || (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])) {
                // Skip duplicates
                continue;
            }
            permutation.add(nums[i]);
            used[i] = true;
            backtrack(nums, permutation, result, used);
            used[i] = false;
            permutation.remove(permutation.size() - 1);
        }
    }
}
