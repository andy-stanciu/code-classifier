class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        List<Integer> ll = new ArrayList<Integer>();
        for (int i = 0; i < nums.length; i++) {
            ll.add(nums[i]);
        }
        List<Integer> ans = new ArrayList<Integer>();
        permutation(ll, ans, list);
        return list;
    }

    public static void permutation(List<Integer> ll, List<Integer> ans, List<List<Integer>> list) {
        if (ll.size() == 0) {
            list.add(new ArrayList(ans));
            return;
        }
        for (int i = 0; i < ll.size(); i++) {
            int k = ll.get(i);
            boolean flag = true;
            for (int j = i + 1; j < ll.size(); j++) {
                if (k == ll.get(j)) {
                    flag = false;
                    break;
                }
            }
            if (flag == true) {
                List<Integer> lll = new ArrayList<>(ll);
                lll.remove(i);
                ans.add(k);
                permutation(lll, ans, list);
                ans.remove(ans.size() - 1);
            }
        }
    }
}
