class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        boolean[] visited = new boolean[nums.length];
        helper(ans, temp, visited, nums);
        return ans;
    }

    void helper(List<List<Integer>> ans, List<Integer> temp, boolean[] vis, int[] nums) {
        //Base Condition
        if (temp.size() == nums.length) {
            ans.add(new ArrayList<>(temp));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (vis[i] || i > 0 && nums[i] == nums[i - 1] && !vis[i - 1]) {
                continue;
            }
            temp.add(nums[i]);
            vis[i] = true;
            helper(ans, temp, vis, nums);
            //Backtracking
            vis[i] = false;
            temp.remove(temp.size() - 1);
        }
        return;
    }
}
