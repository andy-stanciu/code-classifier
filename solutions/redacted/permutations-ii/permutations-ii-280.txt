class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        int n = nums.length;
        List<List<Integer>> l1 = new ArrayList<>();
        List<Integer> l2 = new ArrayList<>();
        boolean[] visited = new boolean[n];
        helper(nums, l1, l2, visited);
        return l1;
    }

    public void helper(int[] nums, List<List<Integer>> l1, List<Integer> l2, boolean[] visited) {
        if (l2.size() == nums.length) {
            if (!l1.contains(l2)) {
                l1.add(new ArrayList<>(l2));
            }
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!visited[i]) {
                visited[i] = true;
                l2.add(nums[i]);
                helper(nums, l1, l2, visited);
                l2.remove(l2.size() - 1);
                visited[i] = false;
            }
        }
    }
}
