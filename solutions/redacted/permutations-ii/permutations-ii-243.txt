class Solution {

    List<List<Integer>> output = new ArrayList<>();

    int n;

    private void backtrack(int[] nums, List<Integer> curr, Map<Integer, Integer> countMap, Set<String> visited) {
        String visitedEles = curr.stream().map(String::valueOf).collect(Collectors.joining(","));
        if (visited.contains(visitedEles))
            return;
        visited.add(visitedEles);
        if (curr.size() == n) {
            if (!output.contains(curr))
                output.add(new ArrayList<>(curr));
            return;
        }
        for (int i = 0; i < n; i++) {
            if (countMap.get(nums[i]) > 0) {
                curr.add(nums[i]);
                countMap.put(nums[i], countMap.get(nums[i]) - 1);
                backtrack(nums, curr, countMap, visited);
                curr.remove(curr.size() - 1);
                countMap.put(nums[i], countMap.get(nums[i]) + 1);
            }
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        n = nums.length;
        Map<Integer, Integer> countMap = new HashMap<>();
        for (int num : nums) {
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
        }
        backtrack(nums, new ArrayList<>(), countMap, new HashSet<>());
        return output;
    }
}
