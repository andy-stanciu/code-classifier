class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        solve(nums, temp, ans, 0);
        return ans;
    }

    public static void solve(int[] nums, List<Integer> temp, List<List<Integer>> ans, int idx) {
        if (idx == nums.length - 1) {
            List<Integer> ls = new ArrayList<>();
            for (int i = 0; i < nums.length; i++) {
                ls.add(nums[i]);
            }
            ans.add(ls);
            return;
        }
        Set<Integer> st = new HashSet<>();
        for (int i = idx; i < nums.length; i++) {
            // st.clear();
            if (!st.contains(nums[i])) {
                st.add(nums[i]);
                int tmp = nums[i];
                nums[i] = nums[idx];
                nums[idx] = tmp;
                solve(nums, temp, ans, idx + 1);
                tmp = nums[i];
                nums[i] = nums[idx];
                nums[idx] = tmp;
                // st.remove(nums[i]);
            }
        }
    }
}
