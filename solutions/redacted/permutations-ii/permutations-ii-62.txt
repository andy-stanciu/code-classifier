class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        HashSet<List<Integer>> res = new HashSet<>();
        Arrays.sort(nums);
        permitations(nums, res, new ArrayList<>(), new boolean[nums.length]);
        List<List<Integer>> result = new ArrayList<>();
        for (List<Integer> a : res) {
            result.add(a);
        }
        return result;
    }

    static void permitations(int[] nums, HashSet<List<Integer>> res, List<Integer> arr, boolean[] check) {
        if (arr.size() == nums.length) {
            res.add(new ArrayList<Integer>(arr));
            return;
        } else {
            for (int i = 0; i < nums.length; i++) {
                if (!check[i]) {
                    check[i] = true;
                    arr.add(nums[i]);
                    permitations(nums, res, arr, check);
                    check[i] = false;
                    arr.remove(arr.size() - 1);
                }
            }
        }
    }
}
