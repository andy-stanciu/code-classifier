class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        int[] visited = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            visited[i] = Integer.MIN_VALUE;
        }
        List<Integer> list = new ArrayList<>();
        List<List<Integer>> ans = new ArrayList<>();
        permute(nums, visited, ans, list);
        return ans;
    }

    public void permute(int[] nums, int[] visited, List<List<Integer>> ans, List<Integer> list) {
        //base case
        if (list.size() == nums.length) {
            List<Integer> ll = list;
            if (!ans.contains(ll)) {
                ans.add(new ArrayList<>(list));
            }
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited[i] == Integer.MIN_VALUE) {
                visited[i] = nums[i];
                list.add(nums[i]);
                permute(nums, visited, ans, list);
                //
                visited[i] = Integer.MIN_VALUE;
                list.remove(list.size() - 1);
            }
        }
    }
}
