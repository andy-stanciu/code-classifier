class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        HashSet<List<Integer>> map = new HashSet<>();
        helper(nums, 0, new ArrayList<>(), res);
        for (List<Integer> s : res) {
            map.add(s);
        }
        List<List<Integer>> result = new ArrayList<>(map);
        return result;
    }

    void helper(int[] nums, int start, List<Integer> curr, List<List<Integer>> res) {
        if (curr.size() == nums.length) {
            res.add(new ArrayList<>(curr));
            return;
        }
        for (int i = 0; i <= curr.size(); i++) {
            curr.add(i, nums[start]);
            helper(nums, start + 1, curr, res);
            curr.remove(i);
        }
    }
}
