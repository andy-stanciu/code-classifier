class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<Integer> lis = new ArrayList<>();
        List<List<Integer>> ans = new ArrayList<>();
        boolean[] fre = new boolean[nums.length];
        helper(nums, lis, ans, fre);
        return ans;
    }

    public static void helper(int[] nums, List<Integer> lis, List<List<Integer>> ans, boolean[] fre) {
        if (lis.size() == nums.length && !ans.contains(lis)) {
            ans.add(new ArrayList<>(lis));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!fre[i]) {
                fre[i] = true;
                lis.add(nums[i]);
                helper(nums, lis, ans, fre);
                lis.remove(lis.size() - 1);
                fre[i] = false;
            }
        }
    }
}
