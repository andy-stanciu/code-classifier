class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> var1 = new ArrayList();
        backtrack(new boolean[nums.length], new ArrayList(), var1, nums);
        return var1;
    }

    public void backtrack(boolean[] used, List<Integer> current, List<List<Integer>> var1, int[] nums) {
        if (current.size() == nums.length) {
            var1.add(new ArrayList(current));
        } else {
            for (int i = 0; i < nums.length; i++) {
                if (used[i] || i > 0 && nums[i] == nums[i - 1] && !used[i - 1])
                    continue;
                used[i] = true;
                current.add(nums[i]);
                backtrack(used, current, var1, nums);
                used[i] = false;
                current.remove(current.size() - 1);
            }
        }
    }
}
