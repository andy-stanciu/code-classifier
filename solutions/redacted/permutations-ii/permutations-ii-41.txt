class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        backTrack(res, nums, new ArrayList<>(), new boolean[nums.length]);
        return res;
    }

    private void backTrack(List<List<Integer>> res, int[] n, List<Integer> temp, boolean[] used) {
        if (temp.size() == n.length) {
            res.add(new ArrayList<>(temp));
            return;
        }
        for (int i = 0; i < n.length; i++) {
            if (used[i] || (i > 0 && n[i] == n[i - 1] && !used[i - 1])) {
                continue;
            }
            temp.add(n[i]);
            used[i] = true;
            backTrack(res, n, temp, used);
            // Backtrack
            used[i] = false;
            temp.remove(temp.size() - 1);
        }
    }
}
