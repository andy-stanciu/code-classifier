class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        HashSet<List<Integer>> list = new HashSet<>();
        List<Integer> list1 = new ArrayList<>();
        permutation(list, nums, 0, list1);
        List<List<Integer>> newList = new ArrayList<>(list);
        return newList;
    }

    public void permutation(HashSet<List<Integer>> list, int[] nums, int index, List<Integer> list1) {
        if (index >= nums.length) {
            list.add(list1);
            return;
        }
        for (int i = index; i < nums.length; i++) {
            swap(nums, index, i);
            List<Integer> list2 = new ArrayList<>(list1);
            list2.add(nums[index]);
            permutation(list, nums, index + 1, list2);
            swap(nums, index, i);
        }
    }

    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
