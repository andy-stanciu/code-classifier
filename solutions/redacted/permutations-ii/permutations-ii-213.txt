class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> permutation = new ArrayList<>();
        List<Integer> visited = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (!visited.contains(i)) {
                visited.add(i);
                permutation.add(nums[i]);
                if (permutation.size() == nums.length && !result.contains(permutation)) {
                    result.add(new ArrayList<>(permutation));
                } else {
                    backtrack(nums, result, visited, permutation);
                }
                visited.remove(visited.size() - 1);
                permutation.remove(permutation.size() - 1);
            }
        }
        return result;
    }

    public void backtrack(int[] nums, List<List<Integer>> result, List<Integer> visited, List<Integer> permutation) {
        for (int i = 0; i < nums.length; i++) {
            if (!visited.contains(i)) {
                visited.add(i);
                permutation.add(nums[i]);
                if (permutation.size() == nums.length && !result.contains(permutation)) {
                    result.add(new ArrayList<>(permutation));
                } else {
                    backtrack(nums, result, visited, permutation);
                }
                visited.remove(visited.size() - 1);
                permutation.remove(permutation.size() - 1);
            }
        }
    }
}
