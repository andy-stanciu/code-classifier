class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        int n = nums.length;
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        boolean[] b = new boolean[n];
        fun(nums, n, ans, b, new ArrayList<>());
        return (ans);
    }

    public void fun(int[] A, int n, List<List<Integer>> ans, boolean[] b, List<Integer> list) {
        if (list.size() == n) {
            ans.add(new ArrayList<>(list));
            return;
        }
        for (int i = 0; i < n; i++) {
            if (b[i] || i > 0 && A[i] == A[i - 1] && !b[i - 1])
                continue;
            b[i] = true;
            list.add(A[i]);
            fun(A, n, ans, b, list);
            list.remove(list.size() - 1);
            b[i] = false;
        }
    }
}
