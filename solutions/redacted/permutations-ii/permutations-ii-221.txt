class Solution {

    List<List<Integer>> res = new ArrayList<>();

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<Integer> can = new ArrayList<>();
        for (int i : nums) {
            can.add(i);
        }
        backTrack(can, new ArrayList<>());
        return res;
    }

    public void backTrack(List<Integer> candidates, List<Integer> cur) {
        if (candidates.size() == 0) {
            res.add(cur);
            return;
        }
        for (int i = 0; i < candidates.size(); i++) {
            if (i != 0 && candidates.get(i) == candidates.get(i - 1))
                continue;
            List<Integer> nextCandidates = new ArrayList<>(candidates);
            int buf = nextCandidates.remove(i);
            cur.add(buf);
            backTrack(nextCandidates, new ArrayList<>(cur));
            cur.remove(cur.size() - 1);
        }
    }
}
