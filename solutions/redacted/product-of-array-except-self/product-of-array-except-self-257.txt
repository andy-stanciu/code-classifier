class Solution {

    public int[] method1(int[] nums) {
        //brute force - O(n^2) TLE
        int n = nums.length;
        int[] output = new int[n];
        // for(int i = 0; i < nums.length; i++){
        //     int mult = 1;
        //     for(int j = 0; j < nums.length; j++){
        //         if(i == j) continue;
        //         mult *= nums[j];
        //     }
        //     output[i] = mult;
        // }
        //O(n) time and O(n) because we used 2 extra arrays
        // int[] leftArr = new int[n];
        // int[] rightArr = new int[n];
        // leftArr[0] = 1;
        // rightArr[n-1] = 1;
        // for(int i = 1; i < n; i++){
        //     leftArr[i] = leftArr[i-1] * nums[i-1];
        // }
        // for(int i = n-2; i >= 0; i--){
        //     rightArr[i] = rightArr[i+1] * nums[i+1];
        // }
        // for(int i = 0; i < n; i ++){
        //     output[i] = leftArr[i]*rightArr[i];
        // }
        //O(n) time and O(1) space
        Arrays.fill(output, 1);
        int curr = 1;
        for (int i = 0; i < n; i++) {
            output[i] *= curr;
            curr *= nums[i];
        }
        curr = 1;
        for (int i = n - 1; i >= 0; i--) {
            output[i] *= curr;
            curr *= nums[i];
        }
        return output;
    }
}
