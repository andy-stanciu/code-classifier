class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> permutation = new ArrayList<>();
        findPermutation(nums, result, permutation);
        return result;
    }

    private void findPermutation(int[] nums, List<List<Integer>> res, List<Integer> per) {
        if (nums.length == 0) {
            res.add(new ArrayList<>(per));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            int cur = nums[i];
            int[] newArr = new int[nums.length - 1];
            for (int j = 0, k = 0; j < nums.length; j++) {
                if (j != i) {
                    newArr[k++] = nums[j];
                }
            }
            per.add(cur);
            findPermutation(newArr, res, per);
            per.remove(per.size() - 1);
        }
    }
}
