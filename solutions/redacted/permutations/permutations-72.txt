class Solution {

    List<List<Integer>> var1 = new ArrayList<>();

    public List<List<Integer>> permute(int[] nums) {
        boolean[] used = new boolean[nums.length];
        backtrack(nums, used, new ArrayList<>());
        return var1;
    }

    private void backtrack(int[] nums, boolean[] used, List<Integer> permutation) {
        if (permutation.size() == nums.length) {
            var1.add(new ArrayList<>(permutation));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!used[i]) {
                used[i] = true;
                permutation.add(nums[i]);
                backtrack(nums, used, permutation);
                permutation.remove(permutation.size() - 1);
                used[i] = false;
            }
        }
    }
}
