class Solution {

    List<List<Integer>> lists = null;

    boolean[] v = null;

    public List<List<Integer>> permute(int[] nums) {
        lists = new ArrayList<>();
        v = new boolean[nums.length];
        backtracking(nums, new ArrayList<>());
        return lists;
    }

    private void backtracking(int[] nums, List<Integer> list) {
        if (list.size() == nums.length) {
            lists.add(new ArrayList<>(list));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (v[i])
                continue;
            list.add(nums[i]);
            v[i] = true;
            backtracking(nums, list);
            list.remove(list.size() - 1);
            v[i] = false;
        }
    }
}
