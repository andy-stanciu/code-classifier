class Solution {

    List<List<Integer>> list = new ArrayList<>();

    boolean[] used;

    public List<List<Integer>> permute(int[] nums) {
        used = new boolean[nums.length];
        return subsetsHelper(nums, new ArrayList<>());
    }

    public List<List<Integer>> subsetsHelper(int[] nums, List<Integer> l) {
        List<List<Integer>> list = new ArrayList<>();
        if (l.size() == nums.length) {
            list.add(new ArrayList<>(l));
            return list;
        }
        for (int i = 0; i < nums.length; i++) {
            if (used[i]) {
                continue;
            }
            l.add(nums[i]);
            used[i] = true;
            List<List<Integer>> l1 = subsetsHelper(nums, l);
            list.addAll(l1);
            l.remove(l.size() - 1);
            used[i] = false;
        }
        return list;
    }
}
// can be done better with marking position by infinity, surya\'s video
// time O(n*n!)
