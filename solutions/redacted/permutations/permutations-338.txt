class Solution {

    public List<List<Integer>> permute(int[] nums) {
        // Creat an empty list to store all the poosible permutations
        List<List<Integer>> list = new ArrayList<>();
        // Call the backtrack function
        backtrack(list, new ArrayList<>(), nums);
        return list;
    }

    private void backtrack(List<List<Integer>> list, List<Integer> comboList, int[] nums) {
        // If comboList size is equal to nums array then add that comboList to the list
        if (comboList.size() == nums.length) {
            //    Add comboList to the list
            list.add(new ArrayList<>(comboList));
        } else {
            // Iterate through the nums of array
            for (int i = 0; i < nums.length; i++) {
                // If num of element already exists then skip it
                if (comboList.contains(nums[i]))
                    continue;
                // If it does not contain then that num of element to the comboList
                comboList.add(nums[i]);
                //     Then after adding that number of element again call the backtrack function to
                //     iterate remaining element of an array
                backtrack(list, comboList, nums);
                //     Then remove that number of element
                comboList.remove(comboList.size() - 1);
            }
        }
    }
}
