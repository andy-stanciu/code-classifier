class Solution {

    public static List<List<Integer>> permute(int[] nums) {
        // List to store all permutations
        List<List<Integer>> ans = new ArrayList<>();
        // Start backtracking with an empty permutation
        backtrack(nums, ans, new ArrayList<>());
        // Return all generated permutations
        return ans;
    }

    private static void backtrack(int[] nums, List<List<Integer>> ans, ArrayList<Integer> set) {
        // Base case: if the current permutation is of the same length as nums
        if (set.size() == nums.length) {
            // Add a copy of the current permutation to the result
            ans.add(new ArrayList<>(set));
            // End the current path of exploration
            return;
        }
        // Iterate over all numbers in the input array
        for (int num : nums) {
            if (!set.contains(num)) {
                // If the number is not already in the current permutation
                // Add the number to the current permutation
                set.add(num);
                // Recurse with the updated permutation
                backtrack(nums, ans, set);
                // Remove the last added number to backtrack
                set.remove(set.size() - 1);
            }
        }
    }
}
