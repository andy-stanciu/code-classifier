class Solution {

    public List<List<Integer>> permute(int[] nums) {
        // Get the length of the input array
        int n = nums.length;
        // Result list to store all permutations
        List<List<Integer>> res = new ArrayList<>();
        // Map to track which elements are used
        boolean[] map = new boolean[n];
        // Start the recursive function to find permutations
        helper(nums, res, map, new ArrayList<>());
        // Return the list of all permutations
        return res;
    }

    // Helper function for generating permutations
    public void helper(int[] nums, List<List<Integer>> res, boolean[] map, ArrayList<Integer> list) {
        // Base case: if the current list size is equal to nums length, add a copy of it to the result
        if (list.size() == nums.length) {
            // Store the current permutation
            res.add(new ArrayList<>(list));
            return;
        }
        // Iterate through all elements in nums array
        for (int i = 0; i < nums.length; i++) {
            if (!map[i]) {
                // If the current element is not used
                // Mark it as used
                map[i] = true;
                // Add the element to the current permutation list
                list.add(nums[i]);
                // Recurse with the updated list and map
                helper(nums, res, map, list);
                // Backtrack: remove the last element added
                list.remove(list.size() - 1);
                // Backtrack: mark the element as unused
                map[i] = false;
            }
        }
    }
}
