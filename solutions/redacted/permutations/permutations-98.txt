class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        backtrack(list, new ArrayList<>(), nums);
        return list;
    }

    public void backtrack(List<List<Integer>> list, List<Integer> temp, int[] nums) {
        if (temp.size() == nums.length) {
            //if the the temp list equals nums length then add to resultant list
            list.add(new ArrayList(temp));
        } else {
            for (int i = 0; i < nums.length; i++) {
                if (temp.contains(nums[i]))
                    continue;
                //Add the current traversing element from nums
                temp.add(nums[i]);
                //Backtrack to its previous node by calling backtrack function recursively
                backtrack(list, temp, nums);
                //remove the last element of the temp to find another way from the prev node which we got ofter backtracking
                temp.remove(temp.size() - 1);
            }
        }
    }
}
