class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        helper(list, new ArrayList<>(), nums);
        return list;
    }

    // In this code we are using tempList only, and not making a new arraylist at every call,
    // so we are doing Backtracking to achive this
    private void helper(List<List<Integer>> list, List<Integer> tempList, int[] nums) {
        if (tempList.size() == nums.length) {
            // This means we found one answer, add it to the list
            list.add(new ArrayList<>(tempList));
        } else {
            for (int num : nums) {
                if (!tempList.contains(num)) {
                    //If element does not exist in the tempList then only go forward
                    tempList.add(num);
                    helper(list, tempList, nums);
                    // Backtrack -> removing the last added element from the tempList
                    tempList.remove(tempList.size() - 1);
                }
            }
        }
    }
}
