class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> candidates = new ArrayList<>();
        for (int num : nums) {
            candidates.add(num);
        }
        permute(candidates, new ArrayList<>(), result);
        return result;
    }

    private void permute(List<Integer> candidates, List<Integer> permutation, List<List<Integer>> result) {
        // Since no number is left for permutation, a permutation is generated
        if (candidates.isEmpty()) {
            result.add(new ArrayList<>(permutation));
            return;
        }
        int n = candidates.size();
        for (int i = 0; i < n; i++) {
            int num = candidates.get(i);
            // Fix the current number
            permutation.add(num);
            // Remove the current number from candidates
            candidates.remove(i);
            // And permute for remaining numbers
            permute(candidates, permutation, result);
            // Add the number back to it\'s original index
            candidates.add(i, num);
            // Remove the number from the permutation
            permutation.remove(permutation.size() - 1);
        }
    }
}
