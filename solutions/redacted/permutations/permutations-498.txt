class Solution {

    private List<List<Integer>> ans = new ArrayList<>();

    private int n;

    private void backtracking(LinkedList<Integer> a, List<Integer> res) {
        if (res.size() == n) {
            ans.add(new ArrayList<>(res));
            return;
        }
        for (int i = 0; i < a.size(); i++) {
            int val = a.removeFirst();
            res.add(val);
            backtracking(a, res);
            a.addLast(val);
            res.remove(res.size() - 1);
        }
    }

    public List<List<Integer>> permute(int[] nums) {
        n = nums.length;
        LinkedList<Integer> a = new LinkedList<>();
        for (int num : nums) {
            a.add(num);
        }
        backtracking(a, new ArrayList<>());
        return ans;
    }
}
