class Solution {

    public List<List<Integer>> permute(int[] nums) {
        var result = new ArrayList<List<Integer>>();
        for (var i = 0; i < nums.length; i++) {
            var num = nums[i];
            if (num == 1000)
                continue;
            // temporary mark the number that is already used
            nums[i] = 1000;
            var prefixes = permute(nums);
            nums[i] = num;
            // initiate list at the bottom of the recursion
            if (prefixes.isEmpty())
                prefixes.add(new ArrayList<Integer>());
            // add the current number to the combinations
            for (var prefix : prefixes) {
                prefix.add(num);
            }
            result.addAll(prefixes);
        }
        return result;
    }
}
