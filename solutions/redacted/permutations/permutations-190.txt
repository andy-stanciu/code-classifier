class Solution {

    List<List<Integer>> result = new ArrayList<>();

    public List<List<Integer>> permute(int[] nums) {
        boolean[] used = new boolean[nums.length];
        for (boolean value : used) {
            value = false;
        }
        backtracking(nums, 0, new ArrayList<>(), used);
        return result;
    }

    void backtracking(int[] nums, int position, List<Integer> permutation, boolean[] used) {
        if (permutation.size() == nums.length) {
            result.add(new ArrayList(permutation));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (used[i])
                continue;
            used[i] = true;
            permutation.add(nums[i]);
            backtracking(nums, i + 1, permutation, used);
            permutation.remove(permutation.size() - 1);
            used[i] = false;
        }
    }
}
