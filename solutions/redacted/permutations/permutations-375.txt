class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> curr = new ArrayList<>();
        boolean[] seen = new boolean[nums.length];
        backtrack(nums, curr, result, seen);
        return result;
    }

    void backtrack(int[] nums, List<Integer> curr, List<List<Integer>> result, boolean[] seen) {
        if (curr.size() == nums.length) {
            result.add(new ArrayList<>(curr));
            return;
        }
        for (int index = 0; index < nums.length; index++) {
            if (!seen[index]) {
                seen[index] = true;
                curr.add(nums[index]);
                backtrack(nums, curr, result, seen);
                seen[index] = false;
                curr.remove(curr.size() - 1);
            }
        }
    }
}
