class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> permut = new ArrayList<>();
        boolean[] check = new boolean[nums.length];
        backTrack(res, nums, permut, check);
        return res;
    }

    public void backTrack(List<List<Integer>> res, int[] nums, List<Integer> permut, boolean[] check) {
        if (permut.size() == nums.length) {
            res.add(new ArrayList<>(permut));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!check[i]) {
                check[i] = true;
                permut.add(nums[i]);
                backTrack(res, nums, permut, check);
                permut.remove(permut.size() - 1);
                check[i] = false;
            }
        }
    }
}
