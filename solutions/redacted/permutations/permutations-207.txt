class Solution {

    List<List<Integer>> result = new ArrayList<>();

    boolean[] visited;

    public List<List<Integer>> permute(int[] nums) {
        visited = new boolean[nums.length];
        dfs(nums, visited, new ArrayList<>());
        return result;
    }

    public void dfs(int[] nums, boolean[] visited, List<Integer> data) {
        if (data.size() == nums.length) {
            result.add(new ArrayList<>(data));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!visited[i]) {
                visited[i] = true;
                data.add(nums[i]);
                dfs(nums, visited, data);
                data.remove(data.size() - 1);
                visited[i] = false;
            }
        }
    }
}
