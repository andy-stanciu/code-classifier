class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList();
        boolean[] visited = new boolean[nums.length];
        visitPermutation(nums, res, visited, new ArrayList());
        return res;
    }

    private void visitPermutation(int[] nums, List<List<Integer>> res, boolean[] visited, List<Integer> set) {
        if (set.size() == nums.length) {
            res.add(new ArrayList(set));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!visited[i]) {
                set.add(nums[i]);
                visited[i] = true;
                visitPermutation(nums, res, visited, set);
                visited[i] = false;
                set.remove(set.size() - 1);
            }
        }
    }
}
