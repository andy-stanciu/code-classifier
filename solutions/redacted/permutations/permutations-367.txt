class Solution {

    ArrayList<ArrayList<Integer>> output = new ArrayList<ArrayList<Integer>>();

    public List<List<Integer>> permute(int[] nums) {
        findPermutation(nums, new ArrayList<Integer>(), new HashSet<Integer>());
        List<List<Integer>> output1 = new ArrayList<>();
        for (ArrayList<Integer> list : output) {
            output1.add(list);
        }
        return output1;
    }

    public void findPermutation(int[] nums, ArrayList<Integer> list, HashSet<Integer> set) {
        if (list.size() == nums.length) {
            output.add(list);
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!set.contains(i)) {
                HashSet<Integer> newSet = new HashSet<Integer>(set);
                newSet.add(i);
                ArrayList<Integer> list1 = new ArrayList<Integer>(list);
                list1.add(nums[i]);
                findPermutation(nums, list1, newSet);
            }
        }
    }
}
