class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        heapAlgo(result, nums, nums.length);
        return result;
    }

    public void heapAlgo(List<List<Integer>> result, int[] nums, int k) {
        if (k == 1) {
            List<Integer> integerList = new ArrayList<>();
            for (var num : nums) {
                integerList.add(num);
            }
            result.add(integerList);
        } else {
            heapAlgo(result, nums, k - 1);
            for (int i = 0; i < k - 1; i++) {
                if (k % 2 == 0) {
                    int aux = nums[i];
                    nums[i] = nums[k - 1];
                    nums[k - 1] = aux;
                } else {
                    int aux = nums[0];
                    nums[0] = nums[k - 1];
                    nums[k - 1] = aux;
                }
                heapAlgo(result, nums, k - 1);
            }
        }
    }
}
