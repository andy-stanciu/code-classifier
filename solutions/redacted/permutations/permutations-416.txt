class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList();
        perm(nums, ans, new ArrayList<>());
        return ans;
        //     List<Integer> pross=new ArrayList<>();
        //     List<Integer> unpross=new ArrayList<>();
        //     for(int i:nums){
        //         unpross.add(i);
        //     }
        //     List<List<Integer>> ans=new ArrayList<>();
        //     perm(pross,ans,unpross);
        //     return ans;
        // }
        //     public static void perm(List<Integer> pross,List<List<Integer>> ans,List<Integer> unpross){//nums=[1,2]-->[2,1],[1,2]
        //     if(unpross.size()==0){
        //         if(ans.contains(pross)){
        //             return;
        //         }
        //         else{
        //             ans.add(new ArrayList<>(pross));
        //         }
        //     }
        //     for(int i=0;i<unpross.size();i++){//[1,2,3]
        //         int val=unpross.get(i);
        //         pross.add(unpross.get(i));
        //         unpross.remove(i);
        //         perm(pross,ans,unpross);
        //         unpross.add(i,val);
        //         pross.remove(pross.size()-1);
        //     }
    }

    public static void perm(int[] nums, List<List<Integer>> ans, List<Integer> tmp) {
        if (tmp.size() == nums.length) {
            ans.add(new ArrayList<Integer>(tmp));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == -2) {
                continue;
            }
            int org = nums[i];
            tmp.add(nums[i]);
            nums[i] = -2;
            perm(nums, ans, tmp);
            tmp.remove(tmp.size() - 1);
            nums[i] = org;
        }
    }
}
