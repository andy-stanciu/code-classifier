class Solution {

    private void backtrack(boolean[] used, int[] nums, List<Integer> path, List<List<Integer>> ans) {
        if (path.size() == nums.length) {
            ans.add(new ArrayList(path));
            return;
        }
        for (int s = 0; s < nums.length; s++) {
            if (used[s])
                continue;
            path.add(nums[s]);
            used[s] = true;
            backtrack(used, nums, path, ans);
            path.remove(path.size() - 1);
            used[s] = false;
        }
    }

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        backtrack(new boolean[nums.length], nums, new ArrayList<>(), ans);
        return ans;
    }
}
