class Solution {

    List<List<Integer>> result = new ArrayList<>();

    public List<List<Integer>> permute(int[] nums) {
        boolean[] visited = new boolean[nums.length];
        Arrays.fill(visited, false);
        backtrackList(visited, new ArrayList<Integer>(), nums);
        return result;
    }

    private void backtrackList(boolean[] visited, List<Integer> tempList, int[] nums) {
        if (tempList.size() == nums.length) {
            result.add(new ArrayList<>(tempList));
        } else {
            for (int i = 0; i < nums.length; i++) {
                if (!visited[i]) {
                    visited[i] = true;
                    tempList.add(nums[i]);
                    backtrackList(visited, tempList, nums);
                    tempList.remove(tempList.size() - 1);
                    visited[i] = false;
                }
            }
        }
    }
}
