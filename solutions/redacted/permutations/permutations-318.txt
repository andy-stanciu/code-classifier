class Solution {

    public List<List<Integer>> permute(int[] nums) {
        // List for storing ans
        List<List<Integer>> ans = new ArrayList<>();
        //List for Storing the permutations
        List<Integer> curr = new ArrayList<>();
        // boolean to check in no is already used or not
        boolean[] used = new boolean[nums.length];
        backtrack(nums, used, curr, ans);
        return ans;
    }

    private void backtrack(int[] nums, boolean[] used, List<Integer> curr, List<List<Integer>> ans) {
        //If the size of the given array matches the permutation add it to the final
        if (curr.size() == nums.length) {
            ans.add(new ArrayList<>(curr));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (used[i]) {
                continue;
            }
            used[i] = true;
            curr.add(nums[i]);
            backtrack(nums, used, curr, ans);
            curr.remove(curr.size() - 1);
            used[i] = false;
        }
    }
}
