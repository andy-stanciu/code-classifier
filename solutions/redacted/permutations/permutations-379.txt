class Solution {

    // Method to generate permutations recursively
    public void helper(int[] nums, List<List<Integer>> ls, List<Integer> temp, int idx) {
        // If all elements are processed, add the current permutation to the result list
        if (idx >= nums.length) {
            ls.add(new ArrayList<>(temp));
            return;
        }
        // Loop through all possible positions to insert the current element
        for (int i = 0; i <= idx; i++) {
            // Insert the current element at index i
            temp.add(i, nums[idx]);
            // Recursively generate permutations for the remaining elements
            helper(nums, ls, temp, idx + 1);
            // Backtrack: Remove the current element to explore other permutations
            temp.remove(i);
        }
    }

    public List<List<Integer>> permute(int[] nums) {
        // Initialize a list to store all permutations
        List<List<Integer>> ls = new ArrayList<>();
        // Call the recursive helper method to generate permutations
        helper(nums, ls, new ArrayList<>(), 0);
        // Return the list of permutations
        return ls;
    }
}
