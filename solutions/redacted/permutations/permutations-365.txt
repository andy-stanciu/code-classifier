class Solution {

    public List<List<Integer>> permute(int[] nums) {
        // Create a list to store all permutations
        List<List<Integer>> ans = new ArrayList<>();
        // Start the recursive permutation process
        helper(ans, nums, 0);
        // Return the list of permutations
        return ans;
    }

    // Recursive function to generate permutations
    private void helper(List<List<Integer>> ans, int[] nums, int index) {
        // Base case: If we\'ve reached the end of the array, add the current permutation
        // to the result list
        if (index == nums.length) {
            // Create a temporary list to hold the current permutation
            List<Integer> tempList = new ArrayList<>();
            // Copy elements from nums array to tempList
            for (int num : nums) {
                tempList.add(num);
            }
            // Add the tempList (current permutation) to the result list
            ans.add(tempList);
            return;
        }
        // Recursive case: Generate permutations starting from the current index
        for (int i = index; i < nums.length; i++) {
            // Swap elements at index and i to generate different permutations
            int temp = nums[index];
            nums[index] = nums[i];
            nums[i] = temp;
            // Recursively call the helper function with the next index
            helper(ans, nums, index + 1);
            // Undo the swap to backtrack and explore other permutations
            temp = nums[index];
            nums[index] = nums[i];
            nums[i] = temp;
        }
    }
}
