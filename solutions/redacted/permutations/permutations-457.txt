class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        // boolean [] visited = new boolean[nums.length];
        // Findpermu(res,nums,new ArrayList(),visited);
        helper(nums, 0, res);
        return res;
    }

    // void Findpermu(List<List<Integer>> res, int[]nums,List<Integer> curr,boolean[] visited){
    //     if(curr.size()==nums.length){
    //         res.add(new ArrayList(curr));
    //         return;
    //     }
    //     for(int i=0;i<nums.length;i++){
    //         if(visited[i]==true) continue;
    //         curr.add(nums[i]);
    //         visited[i]=true;
    //         Findpermu(res,nums,curr,visited);
    //         curr.remove(curr.size()-1);
    //         visited[i]=false;
    //     }
    // }
    public void helper(int[] nums, int idx, List<List<Integer>> ans) {
        int n = nums.length;
        if (idx == n - 1) {
            List<Integer> l = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                l.add(nums[i]);
            }
            ans.add(l);
            return;
        }
        for (int i = idx; i < n; i++) {
            swap(i, idx, nums);
            helper(nums, idx + 1, ans);
            swap(i, idx, nums);
        }
    }

    public void swap(int i, int j, int[] nums) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
