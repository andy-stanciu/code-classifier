class Solution {

    List<List<Integer>> res = new ArrayList<List<Integer>>();

    public List<List<Integer>> permute(int[] nums) {
        backtrack(nums, new ArrayList<Integer>(), new HashSet<Integer>());
        return res;
    }

    public void backtrack(int[] nums, ArrayList<Integer> cur, HashSet<Integer> visited) {
        if (cur.size() == nums.length) {
            res.add(new ArrayList(cur));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited.contains(nums[i]))
                continue;
            cur.add(nums[i]);
            visited.add(nums[i]);
            backtrack(nums, cur, visited);
            visited.remove(nums[i]);
            cur.remove(cur.size() - 1);
        }
    }
}
