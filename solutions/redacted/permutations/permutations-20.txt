class Solution {

    public List<List<Integer>> permute(int[] nums) {
        // create a list to store all permutations
        List<List<Integer>> ans = new ArrayList<>();
        // call the helper function to generate all permutations
        helper(0, nums, ans);
        // return the list of permutations
        return ans;
    }

    public void helper(int index, int[] nums, List<List<Integer>> ans) {
        // if we have processed all elements up to the last one in the array,
        // add the current permutation to the list of permutations and return
        if (index == nums.length) {
            // create a list to store the current permutation
            List<Integer> ds = new ArrayList<>();
            // copy the current array into the list
            for (int i = 0; i < nums.length; i++) {
                ds.add(nums[i]);
            }
            // add the current permutation to the list of permutations
            ans.add(new ArrayList<>(ds));
            return;
        }
        // iterate through the remaining elements in the array starting from the current index
        for (int i = index; i < nums.length; i++) {
            // swap the current element with the element at the current index
            swap(i, index, nums);
            // call the helper function recursively to generate all permutations using the remaining elements
            helper(index + 1, nums, ans);
            // swap the current element back to its original position
            swap(i, index, nums);
        }
    }

    // helper method to swap two elements in the array
    private void swap(int i, int j, int[] nums) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
