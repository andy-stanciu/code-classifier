class Solution {

    private List<Integer> makeIntegerList(String[] a) {
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < a.length; i++) {
            ans.add(Integer.parseInt(a[i]));
        }
        return ans;
    }

    private boolean isAllVisited(boolean[] visited) {
        for (int i = 0; i < visited.length; i++) {
            if (visited[i])
                continue;
            return false;
        }
        return true;
    }

    private void permutation(int[] a, int n, List<List<Integer>> ans, boolean[] visited, String psf) {
        if (isAllVisited(visited)) {
            ans.add(makeIntegerList(psf.split(" ")));
            return;
        }
        for (int i = 0; i < n; i++) {
            if (visited[i])
                continue;
            visited[i] = true;
            permutation(a, n, ans, visited, psf + a[i] + " ");
            visited[i] = false;
        }
    }

    public List<List<Integer>> permute(int[] a) {
        List<List<Integer>> ans = new ArrayList<>();
        boolean[] visited = new boolean[a.length];
        Arrays.fill(visited, false);
        permutation(a, a.length, ans, visited, "");
        return ans;
    }
}
