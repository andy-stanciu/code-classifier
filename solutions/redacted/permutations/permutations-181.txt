class Solution {

    List<List<Integer>> result;

    public List<List<Integer>> permute(int[] nums) {
        result = new ArrayList<>();
        ArrayList<Integer> avail = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            avail.add(nums[i]);
        }
        ArrayList<Integer> permute = new ArrayList<>();
        dfs(avail, permute);
        return result;
    }

    private void dfs(ArrayList<Integer> avail, ArrayList<Integer> permute) {
        if (avail.size() == 0) {
            ArrayList<Integer> temp = new ArrayList<>(permute);
            result.add(temp);
            return;
        }
        for (int i = 0; i < avail.size(); i++) {
            int n = avail.remove(i);
            permute.add(n);
            dfs(avail, permute);
            avail.add(i, n);
            permute.remove(permute.size() - 1);
        }
    }
}
