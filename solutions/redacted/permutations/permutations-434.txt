class Solution {

    private void helper(int[] nums, List<List<Integer>> list, int idx) {
        if (idx == nums.length - 1) {
            //here check idx equals to nums.length-1
            //create new List because add all Permutations in res
            List<Integer> res = new ArrayList<>();
            for (int i = 0; i < nums.length; i++) {
                //here all swap number add in res List
                res.add(nums[i]);
            }
            //afeter all Permutations add in list
            list.add(res);
            //successful all Permutations add in list so return recursion
            return;
        }
        //here idx track index in nums
        for (int i = idx; i < nums.length; i++) {
            //Iterate loop idx to nums.length-1
            //here swap number i to idx (i,and idx both index)
            swap(nums, i, idx);
            //call recursion helper function and increase idx + 1
            helper(nums, list, idx + 1);
            // again call idx+1
            swap(nums, i, idx);
        }
    }

    private void swap(int[] nums, int i, int j) {
        //this function swap number
        //create new temp vairable and store nums[i] number
        int temp = nums[i];
        //here swap number i to j that`s means nums[j] replace nums[i]
        nums[i] = nums[j];
        //here swap number j to temp that`s means temp replace nums[i]
        nums[j] = temp;
    }

    public List<List<Integer>> permute(int[] nums) {
        // create new List and store result in List in List
        List<List<Integer>> list = new ArrayList<>();
        //here create helper function
        helper(nums, list, 0);
        //after return list
        return list;
    }
}
