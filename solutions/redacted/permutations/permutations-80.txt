class Solution {

    public List<List<Integer>> permute(int[] nums) {
        int n = nums.length;
        List<List<Integer>> a = new ArrayList<>();
        List<Integer> b = new ArrayList<Integer>();
        boolean[] map = new boolean[n];
        help(nums, n, b, a, map);
        return a;
    }

    void help(int[] nums, int n, List<Integer> b, List<List<Integer>> a, boolean[] m) {
        if (b.size() == n) {
            a.add(new ArrayList<>(b));
            return;
        }
        for (int i = 0; i < n; i++) {
            if (m[i])
                continue;
            m[i] = true;
            b.add(nums[i]);
            help(nums, n, b, a, m);
            b.remove(b.size() - 1);
            m[i] = false;
        }
    }
}
