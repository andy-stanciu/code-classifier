class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> resultList = new ArrayList<>();
        backtrack(resultList, new ArrayList<>(), nums);
        return resultList;
    }

    private void backtrack(List<List<Integer>> resultList, List<Integer> tempList, int[] nums) {
        // If we match the length, it is a permutation
        if (tempList.size() == nums.length) {
            resultList.add(new ArrayList<>(tempList));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            // Skip if we get the same element
            if (tempList.contains(nums[i])) {
                continue;
            }
            // Add the new element
            tempList.add(nums[i]);
            // Recursively generate permutations
            backtrack(resultList, tempList, nums);
            // Remove the element to backtrack
            tempList.remove(tempList.size() - 1);
        }
    }
}
