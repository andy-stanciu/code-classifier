class Solution {

    public String method1(String s, String t) {
        if (s == null || t == null || s.length() == 0 || t.length() == 0 || s.length() < t.length()) {
            return "";
        }
        int left = 0;
        int right = 0;
        HashMap<Character, Integer> map = new HashMap<>();
        int minLen = Integer.MAX_VALUE;
        int sIndex = -1;
        int cnt = 0;
        for (int i = 0; i < t.length(); i++) {
            map.put(t.charAt(i), map.getOrDefault(t.charAt(i), 0) + 1);
        }
        while (right < s.length()) {
            if (map.containsKey(s.charAt(right)) && map.get(s.charAt(right)) > 0) {
                cnt++;
            }
            map.put(s.charAt(right), map.getOrDefault(s.charAt(right), 0) - 1);
            while (cnt == t.length()) {
                if ((right - left + 1) < minLen) {
                    minLen = right - left + 1;
                    sIndex = left;
                }
                map.put(s.charAt(left), map.getOrDefault(s.charAt(left), 0) + 1);
                if (map.get(s.charAt(left)) > 0) {
                    cnt--;
                }
                left++;
            }
            right++;
        }
        return sIndex != -1 ? s.substring(sIndex, sIndex + minLen) : "";
    }
}
