class Solution {

    public String method1(String s, String t) {
        if (t.length() == 0)
            return "";
        Map<Character, Integer> countT = new HashMap<>();
        for (char c : t.toCharArray()) {
            countT.put(c, countT.getOrDefault(c, 0) + 1);
        }
        int need = countT.size();
        int have = 0, left = 0;
        float minLen = Float.POSITIVE_INFINITY;
        int[] result = new int[] { -1, -1 };
        HashMap<Character, Integer> var1 = new HashMap<>();
        for (int right = 0; right < s.length(); right++) {
            char rightChar = s.charAt(right);
            if (countT.containsKey(rightChar)) {
                var1.put(rightChar, var1.getOrDefault(rightChar, 0) + 1);
                if (var1.get(rightChar) == countT.get(rightChar))
                    have++;
            }
            while (have == need) {
                int curLen = right - left + 1;
                if (curLen < minLen) {
                    minLen = curLen;
                    result[0] = left;
                    result[1] = right;
                }
                char leftChar = s.charAt(left);
                if (countT.containsKey(leftChar)) {
                    var1.put(leftChar, var1.get(leftChar) - 1);
                    if (var1.get(leftChar) < countT.get(leftChar))
                        have--;
                }
                left++;
            }
        }
        return result[0] == -1 ? "" : s.substring(result[0], result[1] + 1);
    }
}
