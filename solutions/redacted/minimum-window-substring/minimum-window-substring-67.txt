class Solution {

    public String method1(String s, String t) {
        HashMap<Character, Integer> map = new HashMap();
        // make a hashmap of the character to be found the string s
        for (char c : t.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        int i = 0, j = 0, n = s.length(), // to track the number of characters we got in the substring of s
        count = 0, m = t.length(), // To store the anwer
        min = Integer.MAX_VALUE, min_index = -1;
        // start iterating over the string s
        for (j = 0; j < n; j++) {
            char ch = s.charAt(j);
            // if the character is in string t
            if (map.containsKey(ch) == true) {
                // decrease the count
                map.put(ch, map.get(ch) - 1);
                // if count >=0 that means we got the number of characters requires; if it is negative we got extra character which does not contribute to the string t
                if (map.get(ch) >= 0)
                    count++;
            }
            // if all the characters are spotted then find the smaller substring
            while (count == m) {
                if (j - i + 1 < min) {
                    min = j - i + 1;
                    min_index = i;
                }
                //reverse of the above done
                if (map.containsKey(s.charAt(i))) {
                    map.put(s.charAt(i), map.get(s.charAt(i)) + 1);
                    // increase the count if you get the original character from string t
                    if (map.get(s.charAt(i)) > 0)
                        count--;
                }
                i++;
            }
        }
        if (min_index == -1)
            return "";
        return s.substring(min_index, min_index + min);
    }
}
