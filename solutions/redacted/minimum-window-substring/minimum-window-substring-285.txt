class Solution {

    public String method1(String s, String t) {
        if (t.length() > s.length()) {
            return "";
        }
        Map<Character, Integer> tCount = new HashMap<>();
        for (char c : t.toCharArray()) {
            tCount.put(c, tCount.getOrDefault(c, 0) + 1);
        }
        int requiredChars = tCount.size();
        int left = 0, right = 0;
        int minLen = Integer.MAX_VALUE;
        int minLeft = 0;
        while (right < s.length()) {
            char currentChar = s.charAt(right);
            if (tCount.containsKey(currentChar)) {
                tCount.put(currentChar, tCount.get(currentChar) - 1);
                if (tCount.get(currentChar) == 0) {
                    requiredChars--;
                }
            }
            while (requiredChars == 0) {
                if (right - left + 1 < minLen) {
                    minLen = right - left + 1;
                    minLeft = left;
                }
                char leftChar = s.charAt(left);
                if (tCount.containsKey(leftChar)) {
                    tCount.put(leftChar, tCount.get(leftChar) + 1);
                    if (tCount.get(leftChar) > 0) {
                        requiredChars++;
                    }
                }
                left++;
            }
            right++;
        }
        return minLen == Integer.MAX_VALUE ? "" : s.substring(minLeft, minLeft + minLen);
    }
}
