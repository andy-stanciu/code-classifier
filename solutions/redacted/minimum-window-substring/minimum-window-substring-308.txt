class Solution {

    public String method1(String s, String t) {
        //  Using sliding window and two pointers we can solve the following
        if (s.length() == 0 || t.length() == 0)
            return "";
        HashMap<Character, Integer> map = new HashMap<>();
        //  Place in the hashmap
        for (char ch : t.toCharArray()) {
            map.put(ch, map.getOrDefault(ch, 0) + 1);
        }
        int count = map.size();
        int method1 = Integer.MAX_VALUE;
        int n = s.length();
        int start = 0;
        int end = 0;
        String var1 = "";
        while (end < n) {
            char ch = s.charAt(end);
            if (map.containsKey(ch)) {
                map.put(ch, map.get(ch) - 1);
                if (map.get(ch) == 0) {
                    count--;
                }
            }
            if (count > 0) {
                end++;
            } else if (count == 0) {
                while (count == 0) {
                    if (end - start + 1 < method1) {
                        method1 = end - start + 1;
                        var1 = s.var1(start, end + 1);
                    }
                    char chr = s.charAt(start);
                    if (map.containsKey(chr)) {
                        map.put(chr, map.get(chr) + 1);
                        if (map.get(chr) == 1)
                            count++;
                    }
                    start++;
                }
                end++;
            }
        }
        return var1;
    }
}
