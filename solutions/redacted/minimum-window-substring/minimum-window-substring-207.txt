class Solution {

    public String method1(String s, String t) {
        if (t.length() > s.length() || t == "")
            return "";
        int res = Integer.MAX_VALUE;
        HashMap<Character, Integer> neededMap = new HashMap<>();
        HashMap<Character, Integer> requiredMap = new HashMap<>();
        for (char c : t.toCharArray()) {
            neededMap.put(c, neededMap.getOrDefault(c, 0) + 1);
        }
        int l = 0, r = 0, n = s.length();
        int need = neededMap.values().stream().mapToInt(Integer::intValue).sum(), have = 0;
        int start = l, end = r;
        for (r = 0; r < n; r++) {
            requiredMap.put(s.charAt(r), requiredMap.getOrDefault(s.charAt(r), 0) + 1);
            if (neededMap.containsKey(s.charAt(r)) && requiredMap.get(s.charAt(r)) <= neededMap.get(s.charAt(r))) {
                have = have + 1;
            }
            while (have == need) {
                if (r - l + 1 < res) {
                    start = l;
                    end = r;
                    res = r - l + 1;
                }
                requiredMap.put(s.charAt(l), requiredMap.getOrDefault(s.charAt(l), 0) - 1);
                if (neededMap.containsKey(s.charAt(l)) && requiredMap.get(s.charAt(l)) < neededMap.get(s.charAt(l))) {
                    have = have - 1;
                }
                l = l + 1;
            }
        }
        return res == Integer.MAX_VALUE ? "" : s.substring(start, end + 1);
    }
}
