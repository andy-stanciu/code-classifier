public class Solution {

    public String method1(String s, String t) {
        if (s == null || t == null || s.length() < t.length())
            return "";
        // char frequency for t
        Map<Character, Integer> targetMap = new HashMap<>();
        for (char c : t.toCharArray()) {
            targetMap.put(c, targetMap.getOrDefault(c, 0) + 1);
        }
        int left = 0, right = 0, minLeft = 0, minLen = Integer.MAX_VALUE;
        // Number of characters matched in the current window
        int count = 0;
        Map<Character, Integer> var1 = new HashMap<>();
        while (right < s.length()) {
            char rightChar = s.charAt(right);
            var1.put(rightChar, var1.getOrDefault(rightChar, 0) + 1);
            if (targetMap.containsKey(rightChar) && var1.get(rightChar) <= targetMap.get(rightChar)) {
                count++;
            }
            while (count == t.length()) {
                if (right - left + 1 < minLen) {
                    minLen = right - left + 1;
                    minLeft = left;
                }
                char leftChar = s.charAt(left);
                var1.put(leftChar, var1.get(leftChar) - 1);
                if (targetMap.containsKey(leftChar) && var1.get(leftChar) < targetMap.get(leftChar)) {
                    count--;
                }
                left++;
            }
            right++;
        }
        return minLen == Integer.MAX_VALUE ? "" : s.substring(minLeft, minLeft + minLen);
    }
}
