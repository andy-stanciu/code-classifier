class Solution {

    private boolean method1(HashMap<Character, Integer> candidateHashMap, HashMap<Character, Integer> containsHashMap) {
        return containsHashMap.entrySet().stream().allMatch((entry) -> {
            return candidateHashMap.containsKey(entry.getKey()) && candidateHashMap.get(entry.getKey()) >= entry.getValue();
        });
    }

    public String method2(String candidateString, String containsString) {
        /**
         *            variable sliding window
         *
         *            time complexity: O(n + m) -> O(n + m)
         *            space complexity: O(26) -> O(1)
         */
        HashMap<Character, Integer> candidateFreqMap = new HashMap();
        HashMap<Character, Integer> containsFreqMap = new HashMap();
        for (int i = 0; i < containsString.length(); i++) {
            containsFreqMap.put(containsString.charAt(i), containsFreqMap.getOrDefault(containsString.charAt(i), 0) + 1);
        }
        int var1 = 0;
        int var2 = 0;
        int var3 = -1;
        int var4 = -1;
        Integer var5 = Integer.MAX_VALUE;
        while (var2 < candidateString.length()) {
            candidateFreqMap.put(candidateString.charAt(var2), candidateFreqMap.getOrDefault(candidateString.charAt(var2), 0) + 1);
            while (var1 <= var2 && method1(candidateFreqMap, containsFreqMap)) {
                int var6 = var2 - var1 + 1;
                if (var5 > var6) {
                    var5 = var6;
                    var3 = var1;
                    var4 = var2;
                }
                candidateFreqMap.put(candidateString.charAt(var1), candidateFreqMap.getOrDefault(candidateString.charAt(var1), 0) - 1);
                var1++;
            }
            var2++;
        }
        if (var3 == -1)
            return "";
        return candidateString.substring(var3, var4 + 1);
    }
}
