class Solution {

    public String method1(String s, String t) {
        int l = s.length();
        int m = t.length();
        HashMap<Character, Integer> required = new HashMap<>();
        for (char c : t.toCharArray()) {
            int ov = required.getOrDefault(c, 0);
            required.put(c, ov + 1);
        }
        HashMap<Character, Integer> acquired = new HashMap<>();
        int min = Integer.MAX_VALUE;
        String ans = "";
        int i = 0;
        int j = 0;
        int found = 0;
        while (i < l) {
            while (j < l && found != m) {
                char cc = s.charAt(j);
                if (// one useful character we have found
                required.containsKey(cc)) {
                    int ov = acquired.getOrDefault(cc, 0);
                    acquired.put(cc, ov + 1);
                    if (// character was found more than its requirement
                    // character was found more than its requirement
                    acquired.get(cc) > required.get(cc)) {
                    } else
                        found += 1;
                }
                j++;
            }
            int var1 = j - i;
            if (found == m && var1 < min) {
                min = var1;
                ans = s.substring(i, j);
            }
            if (// useful character we might loose
            required.containsKey(s.charAt(i))) {
                int ov = acquired.get(s.charAt(i));
                acquired.put(s.charAt(i), ov - 1);
                // we lost one useful character
                if (acquired.get(s.charAt(i)) < required.get(s.charAt(i)))
                    found -= 1;
            }
            i++;
        }
        return ans;
    }
}
