class Solution {

    public String method1(String s, String t) {
        String result = "";
        if (s.length() < t.length())
            return result;
        int method1 = Integer.MAX_VALUE;
        //We will use two variables \'have\' & \'need\' to keep a track whether the characters
        //we need have been encountered.
        int need = t.length();
        int have = 0;
        //Two hashmaps are used to store the character count.
        Map<Character, Integer> sMap = new HashMap();
        Map<Character, Integer> tMap = new HashMap();
        for (int i = 0; i < t.length(); i++) {
            char ch = t.charAt(i);
            tMap.put(ch, tMap.getOrDefault(ch, 0) + 1);
        }
        int var1 = 0;
        for (int var2 = 0; var2 < s.length(); var2++) {
            char ch = s.charAt(var2);
            sMap.put(ch, sMap.getOrDefault(ch, 0) + 1);
            //if we have encountered a useful character, we will increment have variable.
            if (tMap.containsKey(ch) && sMap.get(ch) <= (tMap.get(ch))) {
                have++;
            }
            //if have is equals to the need, means we got a substring in s having all the character of t
            while (have == need) {
                //check if its the mimimum substring till now
                if (method1 > var2 - var1 + 1) {
                    method1 = var2 - var1 + 1;
                    result = s.substring(var1, var2 + 1);
                }
                //now we will check, can we do better
                //is there a shorter substring
                char charToRemove = s.charAt(var1);
                if (sMap.get(charToRemove) == 1) {
                    sMap.remove(charToRemove);
                } else {
                    sMap.put(charToRemove, sMap.get(charToRemove) - 1);
                }
                var1++;
                //if we remove a useful char, decrementing have varaible
                if (tMap.containsKey(charToRemove) && sMap.getOrDefault(charToRemove, 0) < (tMap.get(charToRemove))) {
                    have--;
                }
            }
        }
        return result;
    }
}
