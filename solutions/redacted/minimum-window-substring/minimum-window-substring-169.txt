class Solution {

    public String method1(String s, String t) {
        Map<Character, Integer> map = new HashMap<>();
        int n = s.length(), m = t.length(), l = 0, r = 0, count = 0, minLen = Integer.MAX_VALUE, sIndex = -1;
        //pre-storing t data in hashmap
        for (int i = 0; i < m; i++) {
            map.put(t.charAt(i), map.getOrDefault(t.charAt(i), 0) + 1);
        }
        while (r < n) {
            if (map.containsKey(s.charAt(r))) {
                if (map.get(s.charAt(r)) > 0) {
                    count++;
                }
                map.put(s.charAt(r), map.get(s.charAt(r)) - 1);
            }
            //shrinking window to find smallest window
            while (count == m) {
                if ((r - l + 1) < minLen) {
                    minLen = (r - l + 1);
                    sIndex = l;
                }
                if (map.containsKey(s.charAt(l))) {
                    map.put(s.charAt(l), map.get(s.charAt(l)) + 1);
                    if (map.get(s.charAt(l)) > 0) {
                        count--;
                    }
                }
                l++;
            }
            // end of inner while
            r++;
        }
        // end of outer while
        return sIndex == -1 ? "" : s.substring(sIndex, sIndex + minLen);
    }
}
