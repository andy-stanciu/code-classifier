class Solution {

    public String method1(String s, String t) {
        if (s == null || t == null || s.length() == 0 || t.length() == 0 || s.length() < t.length()) {
            return new String();
        }
        int[] map = new int[128];
        int[] haveMap = new int[128];
        int need = t.length();
        int start = 0, end = 0, minLen = Integer.MAX_VALUE, startIndex = 0;
        for (char c : t.toCharArray()) {
            map[c]++;
            haveMap[c] = 0;
        }
        char[] ch = s.toCharArray();
        int have = 0;
        while (end < ch.length) {
            if (//there in t
            map[ch[end]] > 0) {
                //increment it , if it is there in s
                haveMap[ch[end]]++;
                if (//have of char == need of char
                haveMap[ch[end]] <= map[ch[end]])
                    //Without this check, both abb and abc will set \'have\' count to 3
                    have++;
            }
            while (have == need) {
                if (end - start + 1 < minLen) {
                    startIndex = start;
                    minLen = end - start + 1;
                }
                //Reduce it from have map as we are removing it from window
                haveMap[ch[start]]--;
                if (//check if start element of window is needed and check if have of start < need of start
                map[ch[start]] > 0 && haveMap[ch[start]] < map[ch[start]]) {
                    have--;
                }
                start++;
            }
            end++;
        }
        while (have == need) {
            if (end - start + 1 < minLen) {
                startIndex = start;
                minLen = end - start + 1;
            }
            haveMap[ch[start]]--;
            if (map[ch[start]] > 0 && haveMap[ch[start]] < map[ch[start]]) {
                have--;
            }
            start++;
        }
        return minLen == Integer.MAX_VALUE ? new String() : new String(ch, startIndex, minLen);
    }
}
