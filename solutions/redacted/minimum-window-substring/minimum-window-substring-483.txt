class Solution {

    public String method1(String s, String t) {
        if (s == null || t == null || s.isEmpty() || t.isEmpty()) {
            return "";
        }
        Map<Character, Integer> map = new HashMap<>();
        //adding t string to hashmap and maintaing count
        for (int i = 0; i < t.length(); i++) {
            char c = t.charAt(i);
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        int i = 0;
        int j = 0, count = map.size();
        int left = 0, right = s.length() - 1, minlength = s.length();
        boolean found = false;
        while (j < s.length()) {
            char endchar = s.charAt(j++);
            if (map.containsKey(endchar)) {
                //decreasing the count of character in map
                map.put(endchar, map.get(endchar) - 1);
                //if count of that character in map is 0 decrement the count variable
                if (map.get(endchar) == 0) {
                    count -= 1;
                }
            }
            if (count > 0)
                continue;
            while (count == 0) {
                char startchar = s.charAt(i++);
                if (map.containsKey(startchar)) {
                    //Increasing the count of character in map
                    map.put(startchar, map.get(startchar) + 1);
                    //if count of that character in map is 0 decrement the count variable
                    if (map.get(startchar) > 0) {
                        count += 1;
                    }
                }
            }
            if ((j - i) < minlength) {
                left = i;
                right = j;
                minlength = j - i;
                found = true;
            }
        }
        return !found ? "" : s.substring(left - 1, right);
    }
}
