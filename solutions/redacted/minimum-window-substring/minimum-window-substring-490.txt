class Solution {

    public String method1(String s, String t) {
        var stringLength = s.length();
        var var1 = t.length();
        if (var1 > stringLength) {
            return "";
        }
        if (s.contains(t)) {
            return t;
        }
        var var2 = Integer.MAX_VALUE;
        var var3 = "";
        var var4 = new Class1(s, t);
        while (var4.method2()) {
            var4.method3();
            while (var4.isValid()) {
                var var5 = var4.getLength();
                if (var5 < var2) {
                    var2 = var5;
                    var3 = var4.method5();
                }
                var4.method4();
            }
        }
        return var3;
    }

    private static class Class1 {

        private final String stringToOperateOn;

        private final Map<Character, Integer> var6;

        private final Map<Character, Integer> currentStringCharacterToCountMap;

        private int startIndex;

        private int endIndex;

        public Class1(String stringToOperateOn, String param1) {
            this.stringToOperateOn = stringToOperateOn;
            this.var6 = createCharacterToCountMap(param1);
            startIndex = 0;
            endIndex = 0;
            this.currentStringCharacterToCountMap = new HashMap<>();
            currentStringCharacterToCountMap.put(stringToOperateOn.charAt(endIndex), 1);
        }

        private static Map<Character, Integer> createCharacterToCountMap(String string) {
            var characterToCountMap = new HashMap<Character, Integer>();
            for (var i = 0; i < string.length(); i++) {
                var currentCharacter = string.charAt(i);
                characterToCountMap.put(currentCharacter, characterToCountMap.getOrDefault(currentCharacter, 0) + 1);
            }
            return characterToCountMap;
        }

        public boolean isValid() {
            for (var entry : var6.entrySet()) {
                var var7 = entry.getKey();
                var var8 = entry.getValue();
                if (currentStringCharacterToCountMap.getOrDefault(var7, 0) < var8) {
                    return false;
                }
            }
            return true;
        }

        public boolean method2() {
            return endIndex < stringToOperateOn.length() - 1;
        }

        public void method3() {
            endIndex++;
            var characterAtEndIndex = stringToOperateOn.charAt(endIndex);
            currentStringCharacterToCountMap.put(characterAtEndIndex, currentStringCharacterToCountMap.getOrDefault(characterAtEndIndex, 0) + 1);
        }

        public void method4() {
            var characterAtStartIndex = stringToOperateOn.charAt(startIndex);
            currentStringCharacterToCountMap.put(characterAtStartIndex, currentStringCharacterToCountMap.getOrDefault(characterAtStartIndex, 0) - 1);
            startIndex++;
        }

        public int getLength() {
            return endIndex - startIndex + 1;
        }

        public String method5() {
            return stringToOperateOn.substring(startIndex, endIndex + 1);
        }
    }
}
