class Solution {

    public int method1(int[] nums) {
        // Edge case: If the array has 2 or fewer elements, no need to remove duplicates
        if (nums.length <= 2)
            return nums.length;
        // Start `k` from 2, as the first two elements are always allowed
        int k = 2;
        // Iterate through the array starting from index 2
        for (int i = 2; i < nums.length; i++) {
            // Compare current element nums[i] with the element at index (k-2)
            // If nums[i] is not equal to nums[k-2], it means we can keep this element
            if (nums[i] != nums[k - 2]) {
                // Move the current element to position `k`
                nums[k] = nums[i];
                // Increment `k` to track the position of the next unique element
                k++;
            }
        }
        // After the loop, `k` holds the number of unique elements (at most two duplicates)
        return k;
    }
}
