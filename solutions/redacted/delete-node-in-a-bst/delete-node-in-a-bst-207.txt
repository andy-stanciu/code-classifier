/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public static TreeNode method1(TreeNode root, int key) {
        if (root == null) {
            return null;
        }
        List<Integer> var1 = new ArrayList<>();
        read(root, var1);
        var1.remove(Integer.valueOf(key));
        if (var1.isEmpty()) {
            return null;
        }
        TreeNode var2 = new TreeNode();
        helper(var2, var1);
        return var2;
    }

    public static void helper(TreeNode root, List<Integer> var1) {
        int middle = var1.size() / 2;
        root.val = var1.get(middle);
        List<Integer> left = var1.subList(0, var1.size() / 2);
        List<Integer> right = var1.subList(var1.size() / 2 + 1, var1.size());
        if (!left.isEmpty()) {
            root.left = new TreeNode();
            helper(root.left, left);
        }
        if (!right.isEmpty()) {
            root.right = new TreeNode();
            helper(root.right, right);
        }
    }

    public static void read(TreeNode root, List<Integer> var1) {
        if (root.left != null) {
            read(root.left, var1);
        }
        var1.add(root.val);
        if (root.right != null) {
            read(root.right, var1);
        }
    }
}
