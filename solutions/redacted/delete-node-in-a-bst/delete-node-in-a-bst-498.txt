/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public ArrayList<Integer> l;

    public void preorder(TreeNode root) {
        if (root == null) {
            return;
        }
        l.add(root.val);
        preorder(root.left);
        preorder(root.right);
    }

    public TreeNode cre(TreeNode root, int a) {
        if (root == null) {
            root = new TreeNode(a);
            return root;
        }
        if (a < root.val) {
            root.left = cre(root.left, a);
        }
        if (a > root.val) {
            root.right = cre(root.right, a);
        }
        return root;
    }

    public TreeNode method1(TreeNode root, int key) {
        l = new ArrayList<>();
        preorder(root);
        l.remove(Integer.valueOf(key));
        TreeNode newRoot = null;
        for (int i = 0; i < l.size(); i++) {
            newRoot = cre(newRoot, l.get(i));
        }
        return newRoot;
    }
}
