/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode method1(TreeNode root, int key) {
        List<Integer> l = new ArrayList<>();
        method2(root, l);
        if (l.contains(key))
            l.remove(Integer.valueOf(key));
        return cons1t(0, l.size() - 1, l);
    }

    TreeNode cons1t(int l, int h, List<Integer> lt) {
        if (l > h) {
            return null;
        }
        int m = l + (h - l) / 2;
        TreeNode rt = new TreeNode(lt.get(m));
        rt.left = cons1t(l, m - 1, lt);
        rt.right = cons1t(m + 1, h, lt);
        return rt;
    }

    void method2(TreeNode rt, List<Integer> l) {
        if (rt == null) {
            return;
        }
        method2(rt.left, l);
        l.add(rt.val);
        method2(rt.right, l);
    }
}
