/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode method1(TreeNode root, int val) {
        if (root == null)
            return null;
        if (root.val == val) {
            return connector(root);
        }
        TreeNode temp = root;
        while (root != null) {
            if (root.val > val) {
                if (root.left != null && root.left.val == val) {
                    root.left = connector(root.left);
                } else {
                    root = root.left;
                }
            } else {
                if (root.right != null && root.right.val == val) {
                    root.right = connector(root.right);
                } else {
                    root = root.right;
                }
            }
        }
        return temp;
    }

    public static TreeNode connector(TreeNode root) {
        if (root.left == null)
            return root.right;
        else if (root.right == null)
            return root.left;
        TreeNode rightChild = root.right;
        TreeNode lastleft = lastleftchild(root.left);
        lastleft.right = rightChild;
        return root.left;
    }

    public static TreeNode lastleftchild(TreeNode root) {
        if (root.right == null) {
            return root;
        }
        return lastleftchild(root.right);
    }
}
