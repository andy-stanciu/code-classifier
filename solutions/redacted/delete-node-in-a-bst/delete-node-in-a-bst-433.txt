/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    static List<Integer> var1;

    static List<Integer> preOrder;

    static Map<Integer, Integer> map;

    static int preOrderIdx;

    public TreeNode method1(TreeNode root, int key) {
        var1 = new ArrayList<>();
        preOrder = new ArrayList<>();
        map = new HashMap<>();
        preOrderIdx = 0;
        method2(root, key);
        calculatePreOrder(root, key);
        for (int i = 0; i < var1.size(); i++) {
            map.put(var1.get(i), i);
        }
        System.out.println(map);
        System.out.println(var1);
        System.out.println(preOrder);
        return solve(0, var1.size() - 1);
    }

    public static TreeNode solve(int left, int right) {
        if (left > right) {
            return null;
        }
        int val = preOrder.get(preOrderIdx);
        int var2 = map.get(val);
        TreeNode root = new TreeNode(val);
        preOrderIdx++;
        TreeNode var3 = solve(left, var2 - 1);
        TreeNode var4 = solve(var2 + 1, right);
        root.left = var3;
        root.right = var4;
        return root;
    }

    public static void method2(TreeNode root, int key) {
        if (root == null) {
            return;
        }
        method2(root.left, key);
        if (root.val != key) {
            var1.add(root.val);
        }
        method2(root.right, key);
    }

    public static void calculatePreOrder(TreeNode root, int key) {
        if (root == null) {
            return;
        }
        if (root.val != key) {
            preOrder.add(root.val);
        }
        calculatePreOrder(root.left, key);
        calculatePreOrder(root.right, key);
    }
}
