/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode method1(TreeNode root, int key) {
        return helper(root, key);
    }

    TreeNode helper(TreeNode param1, int key) {
        if (param1 == null)
            return null;
        //case 1
        if (param1.right == null && param1.val == key) {
            return param1.left;
        } else if (param1.left == null && param1.val == key) {
            return param1.right;
        }
        // case 2
        if (param1.right == null && param1.left == null && param1.val == key)
            return null;
        //case 3
        if (param1.right != null && param1.left != null && param1.val == key) {
            param1.val = method2(param1.right);
            //now you have updated the node but you have to delete that min node form right tree
            param1.right = helper(param1.right, param1.val);
        }
        param1.left = helper(param1.left, key);
        param1.right = helper(param1.right, key);
        return param1;
    }

    int method2(TreeNode param1) {
        TreeNode temp = param1;
        while (temp.left != null) {
            temp = temp.left;
        }
        return temp.val;
    }
}
