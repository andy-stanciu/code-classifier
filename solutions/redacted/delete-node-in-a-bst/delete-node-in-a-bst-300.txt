/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// Note: What helper function do is when we reach at the node which we want to delete, we will pass that node to helper,
// the helper will do the re-allocation of using the rightChild and RighMostOfLeftSubChild (view striver dry dun)
// Baki easy peasy hai
class Solution {

    //     public TreeNode deleteNode(TreeNode root, int key) {
    //         if(root == null) return null;
    //         if(root.val == key){    // it means we have to delete the main root, directly pass that to helper
    //             return helper(root);
    //         }
    //         TreeNode temp= root;
    //         while(root!= null){    // running the loop
    //             if(key < root.val){     // traversing left
    //                 if(root.left != null && temp.left.val == key){
    //                     root.left= helper(root.left);   // got key so passing to helper
    //                     break;
    //                 }else{
    //                     root= root.left;    // keep moving until finds the key
    //                 }
    //             }else if (key > root.val){    // traversing right
    //                 if(root.right != null && temp.right.val == key){
    //                     root.right= helper(root.right); // got key so passing to helper
    //                     break;
    //                 }else{
    //                     root= root.right;   // keep moving until finds the key
    //                 }
    //             }
    //         }
    //         return temp;    // retunr the main root which was stored in temp
    // }
    //     public TreeNode helper(TreeNode root){
    //         if(root.left == null) return root.right;
    //         if(root.right == null) return root.left;
    //         TreeNode rightChild= root.right;
    //         TreeNode lastRightOfLeftChild= lastChild(root.left);
    //         lastRightOfLeftChild.right= rightChild;
    //         return root.left;  // root it deleted so returning the left one, of which the rightMostChild is connected to root.right
    //     }
    //     public TreeNode lastChild(TreeNode root){
    //         TreeNode current = root;
    //         while (current.right != null) {
    //             current = current.right;
    //         }
    //         return current;
    //     }
    public TreeNode method1(TreeNode root, int key) {
        if (root == null)
            return root;
        if (root.val == key)
            return helper(root);
        TreeNode curr = root;
        while (curr != null) {
            if (curr.val > key) {
                if (curr.left != null && curr.left.val == key) {
                    curr.left = helper(curr.left);
                } else
                    curr = curr.left;
            } else {
                if (curr.right != null && curr.right.val == key) {
                    curr.right = helper(curr.right);
                } else
                    curr = curr.right;
            }
        }
        return root;
    }

    public TreeNode helper(TreeNode root) {
        if (root.left == null)
            return root.right;
        if (root.right == null)
            return root.left;
        TreeNode rightChild = root.right;
        TreeNode lastRight = method2(root.left);
        lastRight.right = root.right;
        return root.left;
    }

    public TreeNode method2(TreeNode root) {
        while (root.right != null) root = root.right;
        return root;
    }
}
