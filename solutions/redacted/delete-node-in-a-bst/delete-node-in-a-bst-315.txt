/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode method1(TreeNode root, int key) {
        if (//empty tree
        root == null)
            return null;
        if (root.val == key)
            return solver(root);
        TreeNode dummy = root;
        while (//search here and send for removal if found
        root != null) {
            if (key < root.val) {
                if (root.left != null && root.left.val == key) {
                    //find resultant left
                    root.left = solver(root.left);
                    break;
                } else
                    root = root.left;
            } else //key>root.val
            {
                if (root.right != null && root.right.val == key) {
                    //find final right
                    root.right = solver(root.right);
                    break;
                } else
                    root = root.right;
            }
        }
        return dummy;
    }

    public //remove and rearrange
    //remove and rearrange
    //remove and rearrange
    TreeNode solver(TreeNode root) {
        if (root.left == null)
            return root.right;
        else if (root.right == null)
            return root.left;
        //right node which will be attached to the last right of left subtree(greatest val in left subtree).
        TreeNode var1 = root.right;
        //find biggest val of left subtree
        TreeNode ExtremeRightofLeft = method2(root.left);
        //joining
        ExtremeRightofLeft.right = var1;
        return root.left;
    }

    public //find lefts rightmost element(greatest val of left subtree)
    //find lefts rightmost element(greatest val of left subtree)
    //find lefts rightmost element(greatest val of left subtree)
    TreeNode method2(TreeNode root) {
        if (root.right == null)
            return root;
        return method2(root.right);
    }
}
