/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode method1(TreeNode root, int key) {
        if (root == null)
            return null;
        if (root.val == key && (root.right == null && root.left == null)) {
            root = null;
            return root;
        }
        if (// go to right
        root.val < key)
            root.right = method1(root.right, key);
        else if (// go to left
        root.val > key)
            root.left = method1(root.left, key);
        else {
            // equal val  ----> 3 case l null r null or both are non null
            if (root.right == null)
                return root.left;
            if (root.right == null)
                return root.left;
            else {
                root.val = method2(root.right);
                root.right = method1(root.right, root.val);
            }
        }
        return root;
    }

    public // go to extreme left and udate root
    // go to extreme left and udate root
    // go to extreme left and udate root
    int method2(TreeNode root) {
        int var1 = root.val;
        if (root == null)
            return var1;
        while (root.left != null) {
            var1 = root.left.val;
            root = root.left;
        }
        return var1;
    }
}
