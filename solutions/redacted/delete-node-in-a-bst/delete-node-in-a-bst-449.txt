/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode method1(TreeNode root, int key) {
        if (root == null) {
            return null;
        }
        if (root.val == key) {
            root = helper(root);
            return root;
        }
        dfs(root, key);
        return root;
    }

    void dfs(TreeNode root, int key) {
        if (root == null) {
            return;
        }
        if (root.left != null && root.left.val == key) {
            root.left = helper(root.left);
            return;
        } else if (root.right != null && root.right.val == key) {
            root.right = helper(root.right);
            return;
        } else if (root.val > key) {
            dfs(root.left, key);
        } else if (root.val < key) {
            dfs(root.right, key);
        }
    }

    TreeNode helper(TreeNode root) {
        System.out.println(root.val);
        if (root.left == null && root.right == null) {
            return null;
        } else if (root.left == null) {
            return root.right;
        } else if (root.right == null) {
            return root.left;
        } else {
            TreeNode left = root.left;
            TreeNode right = root.right;
            TreeNode rightMostonLeft = rightMostonLeft(root.left);
            rightMostonLeft.right = right;
            root.left = null;
            root.right = null;
            return left;
        }
    }

    TreeNode rightMostonLeft(TreeNode root) {
        if (root.right == null) {
            return root;
        }
        return rightMostonLeft(root.right);
    }
}
