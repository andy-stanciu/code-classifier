/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode method1(TreeNode root, int key) {
        if (root == null)
            return root;
        TreeNode current = root;
        TreeNode prev = new TreeNode();
        TreeNode temp = new TreeNode();
        int var1 = 0;
        while (current != null) {
            if (current.val == key) {
                if (// No child case
                current.right == null && current.left == null) {
                    if (var1 == -1)
                        prev.left = (null);
                    else if (var1 == 1)
                        prev.right = (null);
                    else
                        root = null;
                } else if (// One child case
                current.right == null || current.left == null) {
                    if (current.right != null)
                        temp = current.right;
                    else
                        temp = current.left;
                    if (var1 == -1)
                        prev.left = (temp);
                    else if (var1 == 1)
                        prev.right = (temp);
                    else
                        root = temp;
                } else // two child case
                {
                    prev = current;
                    temp = current.right;
                    var1 = 1;
                    //finding in order successor
                    while (temp.left != null) {
                        prev = temp;
                        var1 = -1;
                        temp = temp.left;
                    }
                    current.val = (temp.val);
                    if (var1 == 1)
                        prev.right = temp.right;
                    else
                        prev.left = temp.right;
                }
                break;
            } else {
                //searching part
                prev = current;
                if (current.val > key) {
                    current = current.left;
                    var1 = -1;
                } else if (current.val < key) {
                    var1 = 1;
                    current = current.right;
                }
            }
        }
        return root;
    }
}
