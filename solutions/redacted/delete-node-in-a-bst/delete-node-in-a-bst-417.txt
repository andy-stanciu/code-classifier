/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 *
 * }
 */
class Solution {

    int method1(TreeNode root) {
        // return minimum element
        while (root.left != null) {
            root = root.left;
        }
        return root.val;
    }

    TreeNode method2(TreeNode root, int val) {
        if (root == null)
            return null;
        if (root.val == val) {
            if (root.left == null && root.right == null) {
                // if that root has - 0 child
                root = null;
                return root;
            }
            if (root.left != null && root.right == null) {
                // if that root has - 1 child (left child)
                TreeNode temp = root.left;
                root = null;
                return temp;
            }
            if (root.right != null && root.left == null) {
                // if that root has - 1 child (right child )
                TreeNode temp = root.right;
                root = null;
                return temp;
            }
            if (root.left != null && root.right != null) {
                // if that root has - 2 child (right & left child )
                int var1 = method1(root.right);
                root.val = var1;
                root.right = method2(root.right, var1);
                return root;
            }
        } else if (val > root.val) {
            root.right = method2(root.right, val);
            return root;
        } else {
            root.left = method2(root.left, val);
            return root;
        }
        return root;
    }

    public TreeNode method3(TreeNode root, int val) {
        return method2(root, val);
    }
}
