/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode method1(TreeNode root, int key) {
        TreeNode temp = new TreeNode(Integer.MAX_VALUE);
        temp.left = root;
        method2(temp, key);
        return temp.left;
    }

    public void method2(TreeNode root, int val) {
        if (root == null)
            return;
        if (root.val > val) {
            if (root.left == null)
                return;
            if (root.left.val == val) {
                TreeNode l = root.left;
                if (//0 child
                l.left == null && l.right == null)
                    //0 child
                    root.left = null;
                else if (l.left == null || l.right == null) {
                    //1 child
                    if (l.left == null)
                        root.left = l.right;
                    else
                        root.left = l.left;
                } else {
                    // 2 child
                    TreeNode pred = l.left;
                    while (pred.right != null) pred = pred.right;
                    method2(root, pred.val);
                    pred.left = l.left;
                    pred.right = l.right;
                    root.left = pred;
                }
            } else
                method2(root.left, val);
        }
        if (root.val < val) {
            if (root.right == null)
                return;
            if (root.right.val == val) {
                TreeNode r = root.right;
                if (r.left == null && r.right == null)
                    root.right = null;
                else if (r.left == null || r.right == null) {
                    if (r.left == null)
                        root.right = r.right;
                    else
                        root.right = r.left;
                } else {
                    TreeNode pred = r.left;
                    while (pred.right != null) pred = pred.right;
                    method2(root, pred.val);
                    pred.left = r.left;
                    pred.right = r.right;
                    root.right = pred;
                }
            } else
                method2(root.right, val);
        }
    }
}
