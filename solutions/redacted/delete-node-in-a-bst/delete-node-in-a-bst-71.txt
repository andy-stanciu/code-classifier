/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode method1(TreeNode root, int key) {
        if (root == null)
            return null;
        if (key > root.val) {
            root.right = method1(root.right, key);
        } else if (key < root.val) {
            root.left = method1(root.left, key);
        } else {
            //Found the node with the value to be deleted.
            //Case 1: When the node has no children
            if (root.right == null && root.left == null) {
                root = null;
            } else if (root.left == null) {
                // Case 2: Root has only one child.That is right child
                root = root.right;
            } else if (root.right == null) {
                // Case 2: Root has only one child. That is left child
                root = root.left;
            } else {
                final TreeNode var1 = method2(root.right);
                root.val = var1.val;
                root.right = method1(root.right, var1.val);
            }
        }
        return root;
    }

    private TreeNode method2(TreeNode var1) {
        TreeNode var2 = var1;
        while (var1 != null) {
            var2 = var1;
            var1 = var1.left;
        }
        return var2;
    }
}
