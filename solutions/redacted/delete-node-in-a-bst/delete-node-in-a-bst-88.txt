class Solution {

    public TreeNode iop(TreeNode root) {
        TreeNode temp = root.left;
        while (temp.right != null) temp = temp.right;
        return temp;
    }

    public TreeNode parent(TreeNode root, TreeNode pred) {
        if (root.left == pred || root.right == pred)
            return root;
        TreeNode temp = root.left;
        while (temp.right != pred) temp = temp.right;
        return temp;
    }

    public TreeNode method1(TreeNode root, int key) {
        if (root == null)
            return null;
        if (root.val == key) {
            //deletion
            //case 1: 0 child nodes
            if (root.left == null & root.right == null)
                return null;
            else //case 2: 1 child nodes
            if (root.left == null || root.right == null) {
                if (root.left == null)
                    return root.right;
                else if (root.right == null)
                    return root.left;
            } else //case 3: 2 child nodes
            {
                //root.left!=null&&root.right!=null
                TreeNode pred = iop(root);
                TreeNode predParent = parent(root, pred);
                if (root == predParent) {
                    pred.right = root.right;
                    return pred;
                }
                predParent.right = pred.left;
                pred.left = root.left;
                pred.right = root.right;
                return pred;
            }
        } else if (root.val > key) {
            //LST will change
            root.left = method1(root.left, key);
        } else if (root.val < key) {
            //RST will change
            root.right = method1(root.right, key);
        }
        return root;
    }
}
