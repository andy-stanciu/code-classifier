/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode method1(TreeNode root, int key) {
        if (root == null) {
            return null;
        }
        if (root.val == key && root.left == null && root.right == null) {
            return null;
        }
        if (root.val == key) {
            return helper(root);
        }
        TreeNode dummy = root;
        while (root != null) {
            if (root.val > key) {
                if (root.left != null && root.left.val == key) {
                    root.left = helper(root.left);
                    break;
                } else {
                    root = root.left;
                }
            } else {
                if (root.right != null && root.right.val == key) {
                    root.right = helper(root.right);
                    break;
                } else {
                    root = root.right;
                }
            }
        }
        return dummy;
    }

    public TreeNode helper(TreeNode root) {
        if (root.left == null && root.right == null) {
            // if its leaf node
            return null;
        }
        if (root.left == null) {
            return root.right;
        }
        if (root.right == null) {
            return root.left;
        }
        // break the right branch
        TreeNode rightChild = root.right;
        TreeNode lastRight = method2(root.left);
        // attach it to left\'s right most child
        lastRight.right = rightChild;
        // return target node\'s left where we performed the transition
        return root.left;
    }

    private TreeNode method2(TreeNode left) {
        if (left.right == null) {
            return left;
        }
        return method2(left.right);
    }
}
