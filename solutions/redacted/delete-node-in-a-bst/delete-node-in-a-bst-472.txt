/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode method1(TreeNode root) {
        if (root.left == null && root.right == null) {
            // zero child
            return null;
        } else if (root.left == null) {
            // having one child
            return root.right;
        } else if (root.right == null) {
            return root.left;
        } else {
            // having two children
            System.out.println(successor(root.right).val);
            // to find the last elements and replace
            root.val = successor(root.right).val;
            // to remove the last elements
            root.right = method2(root.right);
            return root;
        }
    }

    public TreeNode method2(TreeNode root) {
        if (root.left == null && root.right != null) {
            return root.right;
        } else if (root.left == null) {
            return null;
        }
        root.left = method2(root.left);
        return root;
    }

    public TreeNode successor(TreeNode root) {
        if (root.left == null) {
            return root;
        }
        return successor(root.left);
    }

    public TreeNode method3(TreeNode root, int key) {
        if (root == null) {
            return root;
        }
        if (root.val == key) {
            root = method1(root);
        } else if (key > root.val) {
            root.right = method3(root.right, key);
        } else {
            root.left = method3(root.left, key);
        }
        return root;
    }
}
