/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode[] param1) {
        //if the list has no linked lists inside//
        if (param1 == null || param1.length == 0)
            return null;
        else //if the lists has one linked list with no variables//
        if (param1[0] == null && param1.length <= 1)
            return null;
        //variables creating://
        int value, listNode = 0;
        ListNode pointer = param1[listNode];
        List<Integer> var1 = new ArrayList<>();
        //running on the lists//
        while (pointer != null || listNode < param1.length) {
            //if the pointer value is not null, then we want to//
            //insert the values of the current linked list into//
            //our list//
            if (pointer != null) {
                value = pointer.val;
                var1.add(value);
                System.out.println(value);
                pointer = pointer.next;
            }
            //if the current list is null, or we reached to the//
            //end of the list, then we need to reach to the//
            //next list that we have//
            if (pointer == null) {
                listNode++;
                //if we went through on all of the linked lists//
                //inside lists, then we break the loop//
                if (param1.length == listNode)
                    break;
                else
                    pointer = param1[listNode];
            }
        }
        //help function: sorting the list and returning it as a//
        //linked list//
        pointer = listToLinkedList(var1);
        return pointer;
    }

    //function help://
    public ListNode listToLinkedList(List<Integer> list) {
        //if we did have lists with no values, then we return//
        //an empty list//
        if (list.size() == 0)
            return null;
        //sorting the list and creating a new linked list//
        Collections.sort(list);
        ListNode myNewList = new ListNode();
        int length = list.size(), i;
        ListNode pointer = myNewList;
        //running on the sorted list and getting it inside of//
        //the linked list//
        for (i = 0; i < length; i++) {
            pointer.val = list.get(i);
            if (i + 1 != length) {
                pointer.next = new ListNode();
                pointer = pointer.next;
            }
        }
        return myNewList;
    }
}
