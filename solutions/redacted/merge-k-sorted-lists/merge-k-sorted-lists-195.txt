/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public static ListNode method1(ListNode[] param1) {
        ListNode rsNode = null;
        List<Integer> rsList = new ArrayList<>();
        if (param1.length == 0) {
            return rsNode;
        }
        int count = 0;
        while (count < param1.length) {
            if (param1[count] != null) {
                while (param1[count] != null) {
                    rsList.add(param1[count].val);
                    param1[count] = param1[count].next;
                }
            }
            count++;
        }
        Collections.sort(rsList);
        List<ListNode> newList = new ArrayList<>();
        for (int i = 0; i < rsList.size(); i++) {
            ListNode tempNode = new ListNode(rsList.get(i));
            if (!newList.isEmpty()) {
                newList.get(i - 1).next = tempNode;
            }
            newList.add(tempNode);
        }
        if (!newList.isEmpty()) {
            rsNode = newList.get(0);
        }
        return rsNode;
    }
}
