class Solution {

    public ListNode method1(ListNode[] param1) {
        // Check if the input array is empty
        if (param1.length == 0) {
            return null;
        }
        // Call the helper function to merge the lists recursively
        return helper(param1, 0, param1.length - 1);
    }

    // Helper function to merge two lists
    private ListNode method2(ListNode l1, ListNode l2) {
        // Create a dummy node to start building the merged list
        ListNode dummy = new ListNode(-1);
        // Initialize tail to keep track of the current node in the merged list
        ListNode tail = dummy;
        // Iterate through both lists and merge them in ascending order
        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                tail.next = l1;
                l1 = l1.next;
            } else {
                tail.next = l2;
                l2 = l2.next;
            }
            tail = tail.next;
        }
        // Connect the remaining nodes of either list to the merged list
        tail.next = l1 != null ? l1 : l2;
        // Return the head of the merged list
        return dummy.next;
    }

    // Helper function to recursively divide and merge lists
    private ListNode helper(ListNode[] param1, int start, int end) {
        // Base case: When there\'s only one list left
        if (start == end) {
            return param1[start];
        }
        // Find the midpoint of the current list range
        int mid = start + ((end - start) / 2);
        // Recursively divide the current list range into two halves
        ListNode left = helper(param1, start, mid);
        ListNode right = helper(param1, mid + 1, end);
        // Merge the divided lists
        return method2(left, right);
    }
}
