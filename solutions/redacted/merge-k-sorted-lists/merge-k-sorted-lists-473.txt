/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode[] param1) {
        if (param1 == null || param1.length == 0) {
            return null;
        }
        return method1(param1, 0, param1.length - 1);
    }

    public ListNode method1(ListNode[] param1, int si, int end) {
        if (si == end) {
            return param1[si];
        }
        int mid = (si + end) / 2;
        ListNode left = method1(param1, si, mid);
        ListNode right = method1(param1, mid + 1, end);
        return method2(left, right);
    }

    public ListNode method2(ListNode list1, ListNode list2) {
        ListNode head = new ListNode();
        ListNode newNode = head;
        while (list1 != null && list2 != null) {
            if (list1.val < list2.val) {
                newNode.next = list1;
                list1 = list1.next;
                newNode = newNode.next;
            } else {
                newNode.next = list2;
                list2 = list2.next;
                newNode = newNode.next;
            }
        }
        while (list1 != null) {
            newNode.next = list1;
            list1 = list1.next;
            newNode = newNode.next;
        }
        while (list2 != null) {
            newNode.next = list2;
            list2 = list2.next;
            newNode = newNode.next;
        }
        return head.next;
    }
}
