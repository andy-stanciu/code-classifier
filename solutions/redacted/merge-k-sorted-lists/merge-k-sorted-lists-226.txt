class Solution {

    public ListNode method1(ListNode[] param1) {
        // ListNode head =null;
        // if(lists.length >0)
        // {
        //    head = lists[0];
        // }
        // ListNode temp = null;
        // int n=0;
        // for(int i=0;i<lists.length-1;i++)
        // {
        //   temp = lists[i];
        //   while(temp.next!=null)
        //   {
        //     temp = temp.next;
        //   }
        //   temp.next = lists[i+1];
        // }
        // temp= head;
        // while(temp!=null)
        // {
        //     temp = temp.next;
        //     n++;
        // }
        // int x;
        // for(int i =0 ;i<n;i++)
        // {
        //     temp = head;
        //     while(temp.next!=null)
        //     {
        //         if(temp.val > temp.next.val)
        //         {
        //              x=temp.val;
        //              temp.val = temp.next.val;
        //              temp.next.val=x;
        //         }
        //         temp= temp.next;
        //     }
        // }
        // return head;
        List<Integer> q = new ArrayList<>();
        ListNode head = null;
        if (param1.length > 0)
            head = param1[0];
        else
            return null;
        ListNode temp = head;
        for (int i = 0; i < param1.length; i++) {
            temp = param1[i];
            while (temp != null) {
                q.add(temp.val);
                temp = temp.next;
            }
        }
        Collections.sort(q);
        Collections.reverse(q);
        // System.out.print(q);
        head = null;
        for (int i = 0; i < q.size(); i++) {
            ListNode newnode = new ListNode(q.get(i));
            if (head == null) {
                head = newnode;
            } else {
                newnode.next = head;
                head = newnode;
            }
        }
        return head;
    }
}
