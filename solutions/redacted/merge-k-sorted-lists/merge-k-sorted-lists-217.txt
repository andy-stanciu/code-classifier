class Solution {

    public ListNode method1(ListNode list1, ListNode list2) {
        if (list1 == null)
            return list2;
        if (list2 == null)
            return list1;
        ListNode head = null;
        if (list1.val <= list2.val) {
            head = list1;
            list1 = list1.next;
        } else {
            head = list2;
            list2 = list2.next;
        }
        ListNode prevNode = head;
        while (list1 != null || list2 != null) {
            int ptr = 0;
            if (list1 == null)
                ptr = 1;
            else if (list2 != null)
                if (list1.val > list2.val)
                    ptr = 1;
            if (ptr == 0) {
                prevNode.next = list1;
                prevNode = list1;
                list1 = list1.next;
            } else {
                prevNode.next = list2;
                prevNode = list2;
                list2 = list2.next;
            }
        }
        prevNode.next = null;
        return head;
    }

    public ListNode[] method2(ListNode[] param1) {
        var odd = (param1.length % 2) == 1;
        var var1 = new ListNode[param1.length / 2 + (odd ? 1 : 0)];
        if (odd) {
            var1[var1.length - 1] = param1[param1.length - 1];
        }
        for (int i = 0; i < param1.length / 2; i++) {
            var1[i] = method1(param1[i * 2], param1[i * 2 + 1]);
        }
        return var1;
    }

    public ListNode method3(ListNode[] param1) {
        if (param1.length == 0)
            return null;
        if (param1.length == 1)
            return param1[0];
        while (param1.length > 2) {
            param1 = method2(param1);
        }
        return method1(param1[0], param1[1]);
    }
}
