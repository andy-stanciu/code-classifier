/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode[] param1) {
        if (param1.length == 0)
            return null;
        return method2(param1, 0, param1.length - 1);
    }

    public ListNode method2(ListNode[] param1, int si, int ei) {
        if (si > ei)
            return null;
        if (si == ei)
            return param1[si];
        int mid = (si + ei) / 2;
        ListNode l1 = method2(param1, si, mid);
        ListNode l2 = method2(param1, mid + 1, ei);
        return method3(l1, l2);
    }

    public ListNode method3(ListNode list1, ListNode list2) {
        if (list1 == null || list2 == null) {
            return list1 != null ? list1 : list2;
        }
        ListNode dummy = new ListNode(-1);
        ListNode prev = dummy;
        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                prev.next = list1;
                list1 = list1.next;
            } else {
                prev.next = list2;
                list2 = list2.next;
            }
            prev = prev.next;
        }
        prev.next = list1 != null ? list1 : list2;
        return dummy.next;
    }
}
