/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode[] param1) {
        if (param1.length == 0)
            return null;
        if (param1.length == 1)
            return param1[0];
        // ListNode node=lists[0];
        return helper(param1, 0, param1.length - 1);
        // for(int i=1;i<lists.length;i++){
        //     node=merge(node,lists[i]);
        // }
        // return node;
    }

    ListNode helper(ListNode[] param1, int start, int end) {
        if (start == end) {
            return param1[start];
        }
        int mid = start + (end - start) / 2;
        ListNode left = helper(param1, start, mid);
        ListNode right = helper(param1, mid + 1, end);
        return method2(left, right);
    }

    ListNode method2(ListNode left, ListNode right) {
        if (left == null || right == null)
            return left == null ? right : left;
        ListNode dummy = new ListNode();
        ListNode node = dummy;
        while (left != null && right != null) {
            if (left.val < right.val) {
                node.next = left;
                left = left.next;
            } else {
                node.next = right;
                right = right.next;
            }
            node = node.next;
        }
        node.next = left == null ? right : left;
        return dummy.next;
    }
}
