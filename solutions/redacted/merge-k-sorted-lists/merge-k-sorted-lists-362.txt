/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode[] param1) {
        if (param1.length == 0)
            return null;
        return method2(param1, 0, param1.length - 1);
    }

    // Divide the lists into 2 halves
    private ListNode method2(ListNode[] param1, int low, int high) {
        if (low == high)
            return param1[low];
        int mid = low + (high - low) / 2;
        ListNode first = method2(param1, low, mid);
        ListNode second = method2(param1, mid + 1, high);
        return method3(first, second);
    }

    // Merge 2 Linked List Nodes based on their values
    private ListNode method3(ListNode first, ListNode second) {
        if (null == first)
            return second;
        if (null == second)
            return first;
        if (first.val < second.val) {
            first.next = method3(first.next, second);
            return first;
        } else {
            second.next = method3(first, second.next);
            return second;
        }
    }
}
