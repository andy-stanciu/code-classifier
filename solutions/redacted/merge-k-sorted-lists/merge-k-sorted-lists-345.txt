/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode[] param1) {
        if (param1.length == 0)
            return null;
        return partition(param1, 0, param1.length);
    }

    public ListNode partition(ListNode[] param1, int start, int end) {
        int half = (start + end) / 2;
        if (end - start < 2)
            return param1[start];
        // System.out.println(start+" "+end+" "+half);
        ListNode list1 = partition(param1, start, half);
        ListNode list2 = partition(param1, half, end);
        return method2(list1, list2);
    }

    public ListNode method2(ListNode list1, ListNode list2) {
        ListNode p1 = list1;
        ListNode p2 = list2;
        ListNode p3 = null;
        ListNode head = null;
        if (p1 != null && p2 != null) {
            if (p1.val < p2.val) {
                head = p1;
                p1 = p1.next;
            } else {
                head = p2;
                p2 = p2.next;
            }
        } else if (p1 == null) {
            return p2;
        } else if (p2 == null) {
            return p1;
        }
        p3 = head;
        while (p1 != null && p2 != null) {
            if (p1.val < p2.val) {
                p3.next = p1;
                p1 = p1.next;
                p3 = p3.next;
            } else {
                p3.next = p2;
                p2 = p2.next;
                p3 = p3.next;
            }
        }
        while (p1 != null) {
            p3.next = p1;
            p1 = p1.next;
            p3 = p3.next;
        }
        while (p2 != null) {
            p3.next = p2;
            p2 = p2.next;
            p3 = p3.next;
        }
        return head;
    }
}
