/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode[] param1) {
        return method2(param1, 0, param1.length - 1);
    }

    public ListNode method2(ListNode[] param1, int start, int end) {
        if (end < start) {
            return null;
        }
        if (end == start) {
            return param1[start];
        }
        int mid = (start + end) / 2;
        return method3(method2(param1, start, mid), method2(param1, mid + 1, end));
    }

    public ListNode method3(ListNode l1, ListNode l2) {
        ListNode res = new ListNode(0);
        ListNode head = res;
        ListNode temp1 = l1;
        ListNode temp2 = l2;
        while (temp1 != null && temp2 != null) {
            if (temp1.val < temp2.val) {
                res.next = new ListNode(temp1.val);
                temp1 = temp1.next;
            } else {
                res.next = new ListNode(temp2.val);
                temp2 = temp2.next;
            }
            res = res.next;
        }
        if (temp1 == null) {
            res.next = temp2;
        }
        if (temp2 == null) {
            res.next = temp1;
        }
        return head.next;
    }
}
