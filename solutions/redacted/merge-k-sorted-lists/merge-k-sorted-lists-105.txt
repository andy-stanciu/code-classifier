/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode[] param1) {
        if (param1 == null || param1.length == 0)
            return null;
        return method2(param1, 0, param1.length - 1);
    }

    ListNode method2(ListNode[] param1, int s, int e) {
        if (s == e)
            return param1[s];
        int mid = s + (e - s) / 2;
        ListNode left = method2(param1, s, mid);
        ListNode right = method2(param1, mid + 1, e);
        return method3(left, right);
    }

    ListNode method3(ListNode first, ListNode second) {
        ListNode Dumnode = new ListNode(0);
        ListNode tail = Dumnode;
        while (true) {
            if (first == null) {
                tail.next = second;
                break;
            }
            if (second == null) {
                tail.next = first;
                break;
            }
            if (first.val < second.val) {
                tail.next = first;
                first = first.next;
                tail = tail.next;
            } else {
                tail.next = second;
                second = second.next;
                tail = tail.next;
            }
        }
        return Dumnode.next;
    }
}
