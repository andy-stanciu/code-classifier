/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode[] param1) {
        int k = param1.length;
        ListNode head = null;
        ListNode ptr = null;
        PriorityQueue<ListNode> queue = new PriorityQueue<>(new Comparator<ListNode>() {

            public int compare(ListNode n1, ListNode n2) {
                return n1.val - n2.val;
            }
        });
        for (int i = 0; i < k; i++) {
            if (param1[i] != null) {
                queue.add(param1[i]);
            }
        }
        while (!queue.isEmpty()) {
            ListNode curr = queue.poll();
            if (curr.next != null) {
                queue.add(curr.next);
            }
            if (head == null) {
                head = curr;
                ptr = head;
            } else {
                ptr.next = curr;
                ptr = ptr.next;
            }
        }
        return head;
    }
}
// 10^4 log 10^4
