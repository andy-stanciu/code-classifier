class Solution {

    public ListNode method1(ListNode[] param1) {
        if (param1 == null)
            return null;
        if (param1.length == 1)
            return param1[0];
        PriorityQueue<ListNode> minHeap = new PriorityQueue<ListNode>((n1, n2) -> n1.val - n2.val);
        for (int i = 0; i < param1.length; i++) if (param1[i] != null)
            minHeap.add(param1[i]);
        ListNode head = new ListNode(0), curr;
        curr = head;
        while (!minHeap.isEmpty()) {
            ListNode temp = minHeap.poll();
            curr.next = new ListNode(temp.val);
            curr = curr.next;
            if (temp.next != null)
                minHeap.add(temp.next);
        }
        return head.next;
    }
}
