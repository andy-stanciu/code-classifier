/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode[] param1) {
        //Approach: Using MergeSort Algorithm
        return method2(param1, 0, param1.length - 1);
    }

    //method for merge sort
    private ListNode method2(ListNode[] param1, int left, int right) {
        //base case
        if (left == right)
            return param1[left];
        //case: if left<right
        if (left < right) {
            //devide the list in to two pieces
            int mid = (left + right) / 2;
            //left side: start to mid
            ListNode ll = method2(param1, left, mid);
            //right side: mid to end
            ListNode lr = method2(param1, mid + 1, right);
            //merge them
            return method3(ll, lr);
        } else
            return null;
    }

    //method for merge
    private ListNode method3(ListNode l1, ListNode l2) {
        //base case
        if (l1 == null)
            return l2;
        if (l2 == null)
            return l1;
        //case 1: value of l1 is less than value of l2
        if (l1.val < l2.val) {
            l1.next = method3(l1.next, l2);
            return l1;
        } else //case 2: value of l2 is less than value of l1
        {
            l2.next = method3(l1, l2.next);
            return l2;
        }
    }
}
