class Solution {

    public ListNode method1(ListNode list1, ListNode list2) {
        if (list1 == null)
            return list2;
        else if (list2 == null)
            return list1;
        else {
            ListNode head = new ListNode();
            ListNode curr = head;
            while (list1 != null && list2 != null) {
                if (list1.val == list2.val) {
                    curr.next = new ListNode(list1.val);
                    curr = curr.next;
                    list1 = list1.next;
                    curr.next = new ListNode(list2.val);
                    curr = curr.next;
                    list2 = list2.next;
                } else if (list1.val < list2.val) {
                    curr.next = new ListNode(list1.val);
                    curr = curr.next;
                    list1 = list1.next;
                } else {
                    curr.next = new ListNode(list2.val);
                    curr = curr.next;
                    list2 = list2.next;
                }
            }
            while (list1 != null) {
                curr.next = new ListNode(list1.val);
                curr = curr.next;
                list1 = list1.next;
            }
            while (list2 != null) {
                curr.next = new ListNode(list2.val);
                curr = curr.next;
                list2 = list2.next;
            }
            return head.next;
        }
    }

    public ListNode method2(ListNode[] param1) {
        ListNode head1 = null, head2 = null;
        if (param1.length == 0)
            return head1;
        head1 = param1[0];
        if (param1.length == 1)
            return head1;
        else {
            for (int i = 1; i < param1.length; i++) {
                head2 = param1[i];
                head1 = method1(head1, head2);
            }
            return head1;
        }
    }
}
