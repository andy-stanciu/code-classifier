/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        } else if (l2 == null) {
            return l1;
        }
        ListNode Node = new ListNode(0);
        ListNode temp = Node;
        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                temp.val = l1.val;
                l1 = l1.next;
            } else {
                temp.val = l2.val;
                l2 = l2.next;
            }
            if (l1 != null && l2 != null) {
                ListNode A = new ListNode(0);
                temp.next = A;
                temp = temp.next;
            }
        }
        while (l1 != null) {
            ListNode A = new ListNode(0);
            temp.next = A;
            temp = temp.next;
            temp.val = l1.val;
            l1 = l1.next;
        }
        while (l2 != null) {
            ListNode A = new ListNode(0);
            temp.next = A;
            temp = temp.next;
            temp.val = l2.val;
            l2 = l2.next;
        }
        return Node;
    }

    public ListNode method2(ListNode[] param1) {
        if (param1.length == 0) {
            return null;
        }
        if (param1.length == 1) {
            return param1[0];
        }
        ListNode current = method1(param1[0], param1[1]);
        for (int i = 2; i < param1.length; i++) {
            current = method1(current, param1[i]);
        }
        return current;
    }
}
