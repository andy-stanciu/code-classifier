/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    ListNode newhead = null;

    ListNode newtail = null;

    public ListNode method1(ListNode[] param1) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < param1.length; i++) {
            ListNode current = param1[i];
            while (current != null) {
                if (map.containsKey(current.val)) {
                    map.put(current.val, map.getOrDefault(current.val, 1) + 1);
                } else {
                    map.put(current.val, 1);
                }
                current = current.next;
            }
        }
        List<Integer> list = new ArrayList<>(map.keySet());
        Collections.sort(list);
        for (int i = 0; i < list.size(); i++) {
            int key = list.get(i);
            int value = map.get(key);
            while (value != 0) {
                ListNode newnode = new ListNode(key);
                if (newhead == null) {
                    newhead = newnode;
                    newtail = newnode;
                } else {
                    newtail.next = newnode;
                    newtail = newnode;
                }
                value--;
            }
        }
        return newhead;
    }
}
