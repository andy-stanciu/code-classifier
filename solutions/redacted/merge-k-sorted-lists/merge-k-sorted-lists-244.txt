/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public class Pair implements Comparable<Pair> {

        // listIndex
        int li;

        ListNode node;

        Pair(int li, ListNode node) {
            this.li = li;
            this.node = node;
        }

        public int compareTo(Pair o) {
            int a = this.node == null ? 0 : this.node.val;
            int b = o.node == null ? 0 : o.node.val;
            return a - b;
        }
    }

    public ListNode method1(ListNode[] param1) {
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        for (int i = 0; i < param1.length; i++) {
            Pair temp = new Pair(i, param1[i]);
            pq.add(temp);
        }
        ListNode tail = new ListNode(-1);
        ListNode finalAns = tail;
        while (pq.size() > 0) {
            Pair p = pq.remove();
            if (p.node != null) {
                ListNode ln = new ListNode(p.node.val);
                tail.next = ln;
                tail = ln;
                if (p.node.next != null) {
                    pq.add(new Pair(p.li, p.node.next));
                }
            }
        }
        return finalAns.next;
    }
}
