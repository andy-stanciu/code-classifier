/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode[] param1) {
        if (param1.length == 0) {
            return null;
        }
        if (param1.length == 1) {
            return param1[0];
        }
        int newListLength = (int) Math.ceil(param1.length / (2 * 1.0));
        ListNode[] var1 = new ListNode[newListLength];
        int k = 0;
        for (int i = 0; i < param1.length; ) {
            ListNode a = param1[i];
            if (i + 1 == param1.length) {
                var1[k] = a;
                break;
            }
            ListNode b = param1[i + 1];
            ListNode toPut = method2(a, b);
            i += 2;
            var1[k++] = toPut;
        }
        return method1(var1);
    }

    public static ListNode method2(ListNode list1, ListNode list2) {
        if (list1 == null && list2 == null) {
            return null;
        } else if (list1 == null && list2 != null) {
            return list2;
        }
        if (list1 != null && list2 == null) {
            return list1;
        }
        ListNode head = null;
        ListNode tail = null;
        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                if (head == null) {
                    head = list1;
                    tail = list1;
                } else {
                    tail.next = list1;
                    tail = tail.next;
                }
                list1 = list1.next;
            } else {
                if (head == null) {
                    head = list2;
                    tail = list2;
                } else {
                    tail.next = list2;
                    tail = tail.next;
                }
                list2 = list2.next;
            }
        }
        while (list1 != null) {
            tail.next = list1;
            tail = tail.next;
            list1 = list1.next;
        }
        while (list2 != null) {
            tail.next = list2;
            tail = tail.next;
            list2 = list2.next;
        }
        return head;
    }
}
