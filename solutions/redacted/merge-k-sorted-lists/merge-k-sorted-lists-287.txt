/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode[] param1) {
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        ListNode ans = null;
        ListNode tail = ans;
        for (int i = 0; i < param1.length; i++) {
            if (param1[i] != null)
                pq.add(new Pair(param1[i].val, param1[i]));
        }
        while (!pq.isEmpty()) {
            Pair p = pq.poll();
            ListNode node = p.node;
            int v = p.data;
            if (ans == null) {
                tail = ans = new ListNode(v);
            } else {
                tail.next = new ListNode(v);
                tail = tail.next;
            }
            if (node.next != null)
                pq.add(new Pair(node.next.val, node.next));
        }
        return ans;
    }

    class Pair implements Comparable<Pair> {

        int data;

        ListNode node;

        Pair(int d, ListNode n) {
            data = d;
            node = n;
        }

        public int compareTo(Pair o) {
            if (data >= o.data)
                return 1;
            return -1;
        }
    }
}
