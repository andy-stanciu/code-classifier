/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
public class Solution {

    public ListNode method1(ListNode[] param1) {
        // Let\'s create a priority queue because nothing says "I love pain" like throwing all elements into a heap
        PriorityQueue<ListNode> pq = new PriorityQueue<>((a, b) -> a.val - b.val);
        // Oh great, now we get to check every single list and pretend we\u2019re excited about it
        for (ListNode list : param1) {
            if (list != null) {
                // Sure, throw it into the mix. What could go wrong?
                pq.add(list);
            }
        }
        // Dummy node because why not create an imaginary head to pretend we have everything under control
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        // While there are still nodes to process, because of course, there are
        while (!pq.isEmpty()) {
            // Let\'s just grab the smallest element because that\'s the only thing keeping this mess sorted
            ListNode node = pq.poll();
            current.next = node;
            current = current.next;
            // If there\'s a next node, let\'s add it to the heap because who doesn\u2019t love more work?
            if (node.next != null) {
                pq.add(node.next);
            }
        }
        // Finally, return the sorted list and pretend this was all worth it
        return dummy.next;
    }
}
