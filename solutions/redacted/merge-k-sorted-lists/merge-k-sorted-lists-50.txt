/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    //Approach 1 : iteration : TOOK 80ms
    public ListNode method1(ListNode[] param1) {
        if (param1.length == 0) {
            return null;
        }
        if (param1.length == 1) {
            return param1[0];
        }
        ListNode head = param1[0];
        for (int i = 1; i < param1.length; i++) {
            head = method2(head, param1[i]);
        }
        return head;
    }

    //Approach 2 : Divide Conquer : TOOK 1ms
    public ListNode method1(ListNode[] param1) {
        if (param1.length == 0) {
            return null;
        }
        if (param1.length == 1) {
            return param1[0];
        }
        // ListNode head=lists[0];
        // for (int i=1;i<lists.length;i++){
        //     head=mergeTwoLists(head,lists[i]);
        // }
        int last = param1.length - 1;
        int first = 0;
        while (last != 0) {
            int i = 0, j = last;
            while (i < j) {
                param1[i] = method2(param1[i], param1[j]);
                i++;
                j--;
                if (i >= j)
                    last = j;
            }
        }
        return param1[0];
    }

    //same mergeTwoLists function from other question
    public ListNode method2(ListNode list1, ListNode list2) {
        if (list1 == null) {
            return list2;
        }
        if (list2 == null) {
            return list1;
        }
        ListNode head = null;
        if (list1.val <= list2.val) {
            head = list1;
        } else {
            head = list2;
            list2 = list1;
            list1 = head;
        }
        ListNode temp = head;
        while (list2 != null) {
            if (list1.next == null) {
                list1.next = list2;
                return head;
            }
            if (list1.next.val <= list2.val) {
                list1 = list1.next;
            } else {
                temp = list1.next;
                list1.next = list2;
                list1 = list1.next;
                list2 = temp;
            }
        }
        return head;
    }
}
