/**
 * Definition for singly-linked list.
 */
class Solution {

    public ListNode method1(ListNode[] param1) {
        if (param1.length == 0)
            return null;
        int dataSize = param1.length;
        int arrayIterator = 0;
        ListNode result = new ListNode(0);
        // drop to result -> resultIterator = result
        ListNode resultIterator = result;
        ListNode currNodeIterator = null;
        boolean needIterate = true;
        while (resultIterator != null) {
            // 1 -> 4 -> 5 | 1 -> 3 -> 4 -> 2 -> 6 // first 1 to second 1 // second 1 to 4 // init data = 3
            if (needIterate) {
                if (currNodeIterator == null && arrayIterator <= dataSize - 1) {
                    currNodeIterator = param1[arrayIterator];
                    arrayIterator += 1;
                } else if (arrayIterator > dataSize - 1 && currNodeIterator == null) {
                    break;
                } else {
                    currNodeIterator = currNodeIterator.next;
                }
                if (currNodeIterator == null) {
                    continue;
                }
                needIterate = false;
            }
            if (resultIterator.next == null || currNodeIterator.val <= resultIterator.next.val) {
                ListNode firstLink = resultIterator.next;
                ListNode currNodeNext = currNodeIterator.next;
                resultIterator.next = currNodeIterator;
                currNodeIterator.next = firstLink;
                currNodeIterator = currNodeNext;
                if (currNodeIterator == null) {
                    needIterate = true;
                }
                resultIterator = result;
            } else {
                resultIterator = resultIterator.next;
            }
        }
        return result.next;
    }
}
