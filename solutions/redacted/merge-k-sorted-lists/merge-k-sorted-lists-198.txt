/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode[] param1) {
        if (param1.length <= 0)
            return null;
        if (param1.length == 1)
            return param1[0];
        return method2(param1, 0, param1.length - 1);
    }

    private ListNode method2(ListNode[] param1, int start, int end) {
        if (start >= end)
            return param1[start];
        int mid = start + (end - start) / 2;
        ListNode left = method2(param1, start, mid);
        ListNode right = method2(param1, mid + 1, end);
        return method3(left, right);
    }

    private ListNode method3(ListNode left, ListNode right) {
        ListNode dummy = new ListNode(0);
        ListNode var1 = dummy;
        while (left != null && right != null) {
            if (left.val > right.val) {
                var1.next = right;
                right = right.next;
            } else {
                var1.next = left;
                left = left.next;
            }
            var1 = var1.next;
        }
        if (left != null) {
            var1.next = left;
        }
        if (right != null) {
            var1.next = right;
        }
        return dummy.next;
    }
}
