/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode[] param1) {
        if (param1.length == 0)
            return null;
        ListNode res = param1[0];
        Queue<ListNode> q = new LinkedList<ListNode>();
        for (int i = 0; i < param1.length; i = i + 2) {
            res = method2(param1[i], (i + 1 < param1.length) ? param1[i + 1] : null);
            q.add(res);
        }
        while (q.size() > 1) {
            q.add(method2(q.poll(), q.poll()));
        }
        return q.poll();
    }

    ListNode method2(ListNode a, ListNode b) {
        ListNode result = null;
        /* Base cases */
        if (a == null)
            return b;
        if (b == null)
            return a;
        /* Pick either a or b, and recur */
        if (a.val <= b.val) {
            result = a;
            result.next = method2(a.next, b);
        } else {
            result = b;
            result.next = method2(a, b.next);
        }
        return result;
    }
}
