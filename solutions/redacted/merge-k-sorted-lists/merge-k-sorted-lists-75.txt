/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode[] param1) {
        //OPTIMAL
        PriorityQueue<ListNode> minHeap = new PriorityQueue<>(new NodeComparator());
        for (int i = 0; i < param1.length; i++) {
            if (param1[i] != null) {
                minHeap.add(param1[i]);
            }
        }
        ListNode ans = new ListNode(-1);
        ListNode var = ans;
        while (minHeap.size() > 0) {
            ListNode temp = minHeap.poll();
            if (temp.next != null) {
                minHeap.add(temp.next);
            }
            var.next = temp;
            var = var.next;
        }
        var = null;
        return ans.next;
    }
}

class NodeComparator implements Comparator<ListNode> {

    public int compare(ListNode k1, ListNode k2) {
        if (k1.val > k2.val)
            return 1;
        else if (k1.val < k2.val)
            return -1;
        return 0;
    }
}
