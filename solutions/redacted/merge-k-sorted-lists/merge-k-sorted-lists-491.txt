/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode[] param1) {
        // Divide the problem as, merge 2 linked list first and then the others
        if (param1.length == 0)
            return null;
        if (param1.length == 1)
            return param1[0];
        ListNode var1 = method2(param1[0], param1[1]);
        for (int i = 2; i < param1.length; i++) {
            var1 = method2(var1, param1[i]);
        }
        return var1;
    }

    private ListNode method2(ListNode l1, ListNode l2) {
        if (l1 == null)
            return l2;
        if (l2 == null)
            return l1;
        if (l1.val < l2.val) {
            l1.next = method2(l1.next, l2);
            return l1;
        } else {
            l2.next = method2(l2.next, l1);
            return l2;
        }
    }
}
