class Solution {

    public ListNode method1(ListNode[] param1) {
        if (param1 == null || param1.length == 0)
            return null;
        return method1(param1, 0, param1.length - 1);
    }

    private ListNode method1(ListNode[] param1, int start, int end) {
        if (start == end)
            return param1[start];
        int mid = start + (end - start) / 2;
        ListNode left = method1(param1, start, mid);
        ListNode right = method1(param1, mid + 1, end);
        return method2(left, right);
    }

    private ListNode method2(ListNode l1, ListNode l2) {
        ListNode head = new ListNode();
        ListNode curr = head;
        while (l1 != null || l2 != null) {
            if (l1 == null) {
                curr.next = l2;
                l2 = l2.next;
            } else if (l2 == null) {
                curr.next = l1;
                l1 = l1.next;
            } else {
                if (l2.val > l1.val) {
                    curr.next = l1;
                    l1 = l1.next;
                } else {
                    curr.next = l2;
                    l2 = l2.next;
                }
            }
            curr = curr.next;
        }
        return head.next;
    }
}
