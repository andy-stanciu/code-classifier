class Solution {

    public int method1(int n) {
        // The standard bottom up approach
        // without optimizing memory usage
        // Base Case, consider the example given.
        if (n <= 3) {
            return n;
        }
        int prev1step = 2;
        int prev2step = 1;
        int current = 0;
        // For stair, you can reach it either from
        // taking one step or taking two step
        // Eg. To reach 5th stair, you can go either from 4th stair
        // or from 3rd stair to the 5th.
        for (int i = 3; i <= n; ++i) {
            // Our current state depends on prev1 state and prev2 state
            current = prev1step + prev2step;
            // Once we compute the current state, it will become prev1state
            // and prev2step will shift to prev1step so that
            // we dynamically keep track of the latest two state to compute our current
            // answer until we reached the final state.
            prev2step = prev1step;
            prev1step = current;
        }
        return current;
    }
}
