class Solution {

    public int method1(int n) {
        // iterative dynamic programming
        // base cases
        if (n == 1)
            return 1;
        if (n == 2)
            return 2;
        // initialize dp memoization
        int[] dp = new int[n + 1];
        // no steps necessary to reach 0 if at 0
        dp[0] = 0;
        // one step to reach the first step if at 0
        dp[1] = 1;
        // 2 ways to reach step 2 if at 0: 1+1 or 0+2
        dp[2] = 2;
        // fill out dp memoization
        for (int i = 3; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        // answer for nth step lies at dp[n], end of dp
        return dp[n];
    }
}
