class Solution {

    private int countSubsetSum2(int[] arr, int n, int sum, int[][] memo) {
        /**
         *          INT_MAX-1 to avoid integer overflow [as we use +1 to update the count of coin below]
         *          can use long as well
         */
        for (int j = 0; j < sum + 1; j++) {
            memo[0][j] = Integer.MAX_VALUE - 1;
        }
        for (int i = 0; i < n + 1; i++) {
            memo[i][0] = 0;
        }
        for (int i = 1; i < sum + 1; i++) {
            if (i % arr[0] == 0) {
                memo[1][i] = i / arr[0];
            } else
                memo[1][i] = Integer.MAX_VALUE - 1;
        }
        /**
         *        Using unbounded knapsack approach i.e wt[] = coins/arr & val[] [not defined here] just for ref
         */
        for (int i = 1; i < n + 1; i++) {
            for (int j = 1; j < sum + 1; j++) {
                // not considering only, hence its processed
                if (arr[i - 1] > j)
                    memo[i][j] = memo[i - 1][j];
                else {
                    // +1 because there isn\'t any value array, we update the no of coins by adding 1
                    memo[i][j] = Math.min(memo[i - 1][j], memo[i][j - arr[i - 1]] + 1);
                }
            }
        }
        if (memo[n][sum] == Integer.MAX_VALUE - 1)
            return -1;
        else
            return memo[n][sum];
    }

    public int method1(int[] param1, int amount) {
        final int len = param1.length;
        int[][] memo = new int[len + 1][amount + 1];
        return countSubsetSum2(param1, len, amount, memo);
    }
}
