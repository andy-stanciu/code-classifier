class Solution {

    // Memory array defined...
    public int[] memory;

    public int var1 = Integer.MAX_VALUE;

    public int method1(int[] param1, int amount) {
        // Initializing and filling the Memory array...
        memory = new int[amount + 1];
        Arrays.fill(memory, -1);
        // Function call...
        int result = Memonize(param1, amount);
        return result == Integer.MAX_VALUE ? -1 : result;
    }

    public void Recurse(int[] param1, int amount, int current, int param2) {
        // Brute-Force Recursion...
        // If the amount exceeds, the required amount...
        if (current > amount)
            return;
        if (current == amount) {
            // If the amount equals...
            // Update the number of coins required...
            var1 = Math.min(var1, param2);
            return;
        }
        for (// For every unique coin...
        int var2 : // For every unique coin...
        param1) // Recursively branch the tree...
        Recurse(param1, amount, current + var2, param2 + 1);
        return;
    }

    public int Memonize(int[] param1, int current) {
        // Memonization (much faster approach)...
        // If problem is feasible...
        if (current == 0)
            return 0;
        // If the problem is not feasible...
        if (current < 0)
            return Integer.MAX_VALUE;
        if (// When the subproblem is already computed...
        memory[current] != -1)
            return memory[current];
        // Tracking the minimum number of coins...
        int var3 = Integer.MAX_VALUE;
        for (int var2 : param1) {
            // For every unqiue coin...
            // Branch the Recursion Tree...
            int subProblem = Memonize(param1, current - var2);
            if (// If subproblem is feasible...
            subProblem != Integer.MAX_VALUE)
                // Update the coins count...
                var3 = Math.min(var3, 1 + subProblem);
        }
        // Update the Memory and backtrack...
        return memory[current] = var3;
    }
}
