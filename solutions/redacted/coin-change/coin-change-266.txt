class Solution {

    public int method1(int[] param1, int amount) {
        // so now here we have two option here so now here
        Integer[][] dp = new Integer[param1.length][amount + 1];
        int ans = helper(param1, amount, dp, 0);
        if (ans == (int) Math.pow(10, 9)) {
            return -1;
        }
        return ans;
    }

    static int helper(int[] param2, int target, Integer[][] dp, int i) {
        // so now here we have two case here
        if (target == 0) {
            return 0;
        }
        if (target < 0 || i >= param2.length) {
            return (int) Math.pow(10, 9);
        }
        if (dp[i][target] != null) {
            return dp[i][target];
        }
        // so now here we have two options here
        int take = helper(param2, target - param2[i], dp, i) + 1;
        int not = helper(param2, target, dp, i + 1);
        // so now here we have to return the min of both here
        return dp[i][target] = Math.min(take, not);
    }
}

// tabulation apporach here
class olution {

    public int method1(int[] param1, int amount) {
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, amount + 1);
        dp[0] = 0;
        for (int param2 : param1) {
            for (int i = param2; i <= amount; i++) {
                dp[param2] = 1;
                dp[i] = Math.min(dp[i], dp[i - param2] + 1);
            }
        }
        return dp[amount] == amount + 1 ? -1 : dp[amount];
    }
}
