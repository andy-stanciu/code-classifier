// Approach-1: O(coins.length * amount) time and space.
class Solution {

    public int method1(int[] param1, int amount) {
        int[][] dp = new int[param1.length][amount + 1];
        for (int i = 0; i <= amount; i++) {
            if (i % param1[0] == 0)
                dp[0][i] = i / param1[0];
            else
                dp[0][i] = Integer.MAX_VALUE - 1;
        }
        int notTake = 0;
        int take = 0;
        for (int i = 1; i < param1.length; i++) {
            for (int j = 0; j <= amount; j++) {
                notTake = dp[i - 1][j];
                take = Integer.MAX_VALUE - 1;
                if (param1[i] <= j) {
                    take = 1 + dp[i][j - param1[i]];
                }
                dp[i][j] = Math.min(notTake, take);
            }
        }
        if (dp[param1.length - 1][amount] != Integer.MAX_VALUE - 1)
            return dp[param1.length - 1][amount];
        else
            return -1;
    }
}

// Approach-2: O(coins.length * amount) time and O(amount) space.
class Solution {

    public int method1(int[] param1, int amount) {
        int[] prev = new int[amount + 1];
        int[] curr = new int[amount + 1];
        for (int i = 0; i <= amount; i++) {
            if (i % param1[0] == 0)
                prev[i] = i / param1[0];
            else
                prev[i] = Integer.MAX_VALUE - 1;
        }
        int notTake = 0;
        int take = 0;
        for (int i = 1; i < param1.length; i++) {
            for (int j = 0; j <= amount; j++) {
                notTake = prev[j];
                take = Integer.MAX_VALUE - 1;
                if (param1[i] <= j) {
                    take = 1 + curr[j - param1[i]];
                }
                curr[j] = Math.min(notTake, take);
            }
            prev = curr.clone();
        }
        if (prev[amount] != Integer.MAX_VALUE - 1)
            return prev[amount];
        else
            return -1;
    }
}
