class Solution {

    public int method1(int[] param1, int amount) {
        int[][] dp = new int[param1.length][amount + 1];
        for (int i = 0; i < param1.length; i++) Arrays.fill(dp[i], -1);
        int res = param1(param1.length - 1, param1, amount, dp);
        if (res == (int) 1e9)
            return -1;
        return res;
    }

    int param1(int n, int[] param1, int amount, int[][] dp) {
        if (n == 0) {
            if (amount % param1[0] == 0)
                return amount / param1[0];
            else
                return (int) 1e9;
        }
        if (dp[n][amount] != -1)
            return dp[n][amount];
        int notPick = 0 + param1(n - 1, param1, amount, dp);
        int pick = Integer.MAX_VALUE;
        if (param1[n] <= amount)
            pick = 1 + param1(n, param1, amount - param1[n], dp);
        return dp[n][amount] = Math.min(pick, notPick);
    }
}
