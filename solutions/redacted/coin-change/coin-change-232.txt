class Solution {

    public int method1(int[] param1, int amount) {
        int n = param1.length;
        if (n == 1 && amount % param1[0] != 0)
            return -1;
        int[][] memo = new int[n + 1][amount + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= amount; j++) {
                memo[i][j] = -1;
            }
        }
        int ans = help(param1, n, amount, memo);
        return ans == Integer.MAX_VALUE - 1 ? -1 : ans;
    }

    public int help(int[] param1, int n, int amount, int[][] memo) {
        if (amount == 0)
            return 0;
        // to avoid overflow in pick + 1
        if (n == 0)
            return Integer.MAX_VALUE - 1;
        if (memo[n][amount] != -1)
            return memo[n][amount];
        int pick = Integer.MAX_VALUE - 1;
        if (param1[n - 1] <= amount) {
            pick = 1 + help(param1, n, amount - param1[n - 1], memo);
        }
        int nonpick = help(param1, n - 1, amount, memo);
        memo[n][amount] = Math.min(pick, nonpick);
        return memo[n][amount];
    }
}
