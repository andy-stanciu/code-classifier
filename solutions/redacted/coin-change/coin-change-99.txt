class Solution {

    int solve(int index, int[] param1, int amount, int[][] dp) {
        if (index == 0) {
            if (amount % param1[0] == 0) {
                return amount / param1[0];
            } else {
                return (int) (1e9);
            }
        }
        if (dp[index][amount] != -1) {
            return dp[index][amount];
        }
        int nottake = 0 + solve(index - 1, param1, amount, dp);
        int take = Integer.MAX_VALUE;
        if (param1[index] <= amount) {
            take = 1 + solve(index, param1, amount - param1[index], dp);
        }
        return dp[index][amount] = Math.min(take, nottake);
    }

    public int method1(int[] param2, int amount) {
        int[][] dp = new int[param2.length][amount + 1];
        // for(int i=0;i<dp.length;i++){
        //     Arrays.fill(dp[i],-1);
        // }
        for (int i = 0; i <= amount; i++) {
            if (i % param2[0] == 0) {
                dp[0][i] = i / param2[0];
            } else {
                dp[0][i] = (int) (1e9);
            }
        }
        // int result=solve(coins.length-1,coins,amount,dp);
        // if(result>=(int)(1e9)){
        //     return -1;
        // }
        for (int i = 1; i < param2.length; i++) {
            for (int j = 0; j < dp[0].length; j++) {
                int nottake = dp[i - 1][j];
                int take = Integer.MAX_VALUE;
                if (param2[i] <= j) {
                    take = 1 + dp[i][j - param2[i]];
                }
                dp[i][j] = Math.min(take, nottake);
            }
        }
        int result = dp[dp.length - 1][dp[0].length - 1];
        if (result == (int) (1e9))
            return -1;
        return result;
    }
}
