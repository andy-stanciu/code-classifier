class Solution {

    public int method1(int[] param1, int amount, int i) {
        if (i == 0) {
            if (amount % param1[0] == 0)
                return amount / param1[0];
            return (int) 1e5;
        }
        if (amount == 0)
            return 0;
        int notTake = method1(param1, amount, i - 1);
        int take = (int) 1e5;
        if (param1[i] <= amount) {
            take = 1 + method1(param1, amount - param1[i], i);
        }
        return Math.min(notTake, take);
    }

    public int method2(int i, int amount, int[] param1, int[][] dp) {
        if (i == 0) {
            if (amount % param1[0] == 0)
                return amount / param1[0];
            return (int) 1e5;
        }
        if (amount == 0)
            return 0;
        if (dp[i][amount] != -1)
            return dp[i][amount];
        int notTake = method2(i - 1, amount, param1, dp);
        int take = (int) 1e5;
        if (param1[i] <= amount) {
            take = 1 + method2(i, amount - param1[i], param1, dp);
        }
        int ans = Math.min(notTake, take);
        dp[i][amount] = ans;
        return ans;
    }

    public int method3(int n, int amount, int[] param1) {
        int[][] dp = new int[n + 1][amount + 1];
        for (int i = 0; i < n + 1; i++) {
            dp[i][0] = 0;
        }
        for (int j = 0; j < amount + 1; j++) {
            if (j % param1[0] == 0) {
                dp[0][j] = j / param1[0];
            } else {
                dp[0][j] = (int) 1e5;
            }
        }
        for (int i = 1; i < n + 1; i++) {
            for (int j = 1; j < amount + 1; j++) {
                int notTake = dp[i - 1][j];
                int take = (int) 1e5;
                if (param1[i - 1] <= j) {
                    take = 1 + dp[i][j - param1[i - 1]];
                }
                int ans = Math.min(notTake, take);
                dp[i][j] = ans;
            }
        }
        return dp[n][amount];
    }

    public int method4(int[] param1, int amount) {
        int n = param1.length;
        //Recursion : start [TLE]
        // int ans = coinChangeR(coins,amount,n-1);
        // return ans >= 1e5 ? -1 : ans;
        //Recursion : end
        //Top-Down : start
        // int[][] dp = new int[n][amount+1];
        // for(int i=0;i<n;i++){
        //     Arrays.fill(dp[i],-1);
        // }
        // int ans = coinChangeTD(n-1,amount,coins,dp);
        // return ans >= 1e5 ? -1 : ans;
        //Top-Down : end
        //Bottom-Up : start
        int ans = method3(n, amount, param1);
        return ans >= 1e5 ? -1 : ans;
        //Bottom-Up : end
    }
}
