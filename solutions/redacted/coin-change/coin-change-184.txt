class Solution {

    public int method1(int[] param1, int amount) {
        int len = param1.length;
        int[][] dp = new int[len][amount + 1];
        for (int i = 0; i < len; i++) {
            for (int j = 0; j <= amount; j++) {
                dp[i][j] = -1;
            }
        }
        int res = f(len - 1, param1, amount, dp);
        res = res >= 1000000000 ? -1 : res;
        return res;
    }

    int f(int idx, int[] param1, int target, int[][] dp) {
        if (target == 0)
            return 0;
        if (idx == 0 && (target % param1[idx] == 0))
            return target / param1[idx];
        if (idx == 0)
            return 1000000000;
        if (dp[idx][target] != -1)
            return dp[idx][target];
        int notpick = f(idx - 1, param1, target, dp);
        int pick = 1000000000;
        if (target >= param1[idx])
            pick = 1 + f(idx, param1, target - param1[idx], dp);
        return dp[idx][target] = Math.min(pick, notpick);
    }
}
