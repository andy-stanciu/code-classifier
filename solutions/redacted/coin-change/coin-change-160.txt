class Solution {

    public int method1(int[] param1, int amount) {
        if (amount == 0)
            return 0;
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, -1);
        for (int i = 0; i <= amount; i++) {
            if (i == 0)
                dp[i] = 0;
            int min = Integer.MAX_VALUE;
            for (int v : param1) {
                if (i == v) {
                    dp[i] = 1;
                    min = 1;
                    break;
                } else if (i > v) {
                    if (dp[i - v] != -1) {
                        min = Math.min(min, dp[i - v] + 1);
                    }
                }
            }
            dp[i] = min == Integer.MAX_VALUE ? -1 : min;
        }
        return dp[amount];
    }
    // public int numberOfCoin(int amount, int[] dp, int[] coins) {
    //     if (amount == 0)
    //         return 0;
    //     if (dp[amount] != -2)
    //         return dp[amount];
    //     int min = Integer.MAX_VALUE;
    //     for (int v : coins) {
    //         if (amount == v)
    //             return 1;
    //         else if (amount > v) {
    //             numberOfCoin(amount - v, dp, coins);
    //             if (dp[amount - v] != -1)
    //                 min = Math.min(min, dp[amount - v] + 1);
    //         }
    //     }
    //     dp[amount] = min == Integer.MAX_VALUE ? -1 : min;
    //     return dp[amount];
    // }
}
