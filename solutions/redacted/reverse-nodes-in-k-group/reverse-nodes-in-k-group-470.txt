class Solution {

    public ListNode method1(ListNode head, int k) {
        if (k < 2) {
            return head;
        }
        ListNode newHead = null, next = head, prev = head, var1 = null;
        outer: while (true) {
            int i = k;
            while (i-- > 0) {
                if (next == null) {
                    break outer;
                }
                next = next.next;
            }
            ListNode n = method2(prev, k, next);
            if (var1 != null) {
                var1.next = n;
            }
            if (newHead == null) {
                newHead = n;
            }
            if (next == null) {
                break;
            }
            var1 = prev;
            prev = next;
        }
        return newHead != null ? newHead : head;
    }

    public ListNode method2(ListNode head, int size, ListNode forward) {
        ListNode curr = head, prev = null;
        while (size-- > 0) {
            if (curr == null) {
                break;
            }
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        head.next = forward;
        return prev;
    }
}
