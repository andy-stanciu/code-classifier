/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head, int k) {
        ListNode var1 = head;
        int count = 0;
        while (count < k && var1 != null) {
            count += 1;
            var1 = var1.next;
        }
        if (count == k) {
            ListNode var2 = method2(head, k);
            // now the original head is point to the last node
            head.next = method1(var1, k);
            return var2;
        }
        return head;
    }

    // reverse a listnode with length of k
    private ListNode method2(ListNode head, int k) {
        ListNode var2 = null;
        // a copy of reference of the original ListNode
        ListNode temp = head;
        while (k > 0) {
            ListNode var3 = temp.next;
            temp.next = var2;
            var2 = temp;
            temp = var3;
            k -= 1;
        }
        return var2;
    }
}
