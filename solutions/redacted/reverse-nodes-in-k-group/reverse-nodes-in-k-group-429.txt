/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head, int k) {
        ListNode tempNode = head;
        ListNode nextNode = null;
        ListNode var1 = null;
        boolean f = true;
        int l = length(head);
        while (true) {
            int c = 1;
            ListNode temptrav = tempNode;
            while (c != k) {
                temptrav = temptrav.next;
                c++;
            }
            nextNode = temptrav.next;
            temptrav.next = null;
            tempNode = method2(tempNode);
            if (f) {
                head = tempNode;
                var1 = head;
                while (var1.next != null) {
                    var1 = var1.next;
                }
                f = false;
            } else {
                var1.next = tempNode;
                while (var1.next != null) {
                    var1 = var1.next;
                }
            }
            tempNode = nextNode;
            l -= k;
            if (l < k) {
                var1.next = tempNode;
                break;
            }
        }
        return head;
    }

    public ListNode method2(ListNode head) {
        ListNode current = head;
        ListNode previous = null;
        while (current != null) {
            ListNode nextNode = current.next;
            current.next = previous;
            previous = current;
            current = nextNode;
        }
        head = previous;
        return head;
    }

    public int length(ListNode head) {
        int l = 0;
        while (head != null) {
            head = head.next;
            l++;
        }
        return l;
    }
}
