/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head, int k) {
        if (head == null || k == 1)
            return head;
        ListNode dummy = new ListNode();
        dummy.next = head;
        ListNode curr = dummy, nex = dummy, pre = dummy;
        int count = 0;
        while (curr.next != null) {
            // counting number of nodes.
            curr = curr.next;
            count++;
        }
        while (count >= k) {
            // iterate till groups of k.
            // put curr at first and nex at second node of that group.
            curr = pre.next;
            nex = curr.next;
            for (int i = 1; i < k; i++) {
                //rum loop K-1 times and revrerse every link.
                curr.next = nex.next;
                nex.next = pre.next;
                pre.next = nex;
                nex = curr.next;
            }
            // to make pre stand at last node of previous reversed group of size k.
            pre = curr;
            // decrementing count by k as the group is reversed and we move to next group of k if present.
            count -= k;
        }
        return dummy.next;
    }
}
