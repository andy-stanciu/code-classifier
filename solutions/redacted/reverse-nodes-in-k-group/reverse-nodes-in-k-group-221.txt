/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head, int k) {
        if (k == 1 || head == null) {
            return head;
        }
        // pointer is not necessary, use head is also fine.
        ListNode var1 = head;
        // Use array to store k nodes, and reverse them
        ListNode[] var2 = new ListNode[k];
        // let every node in array point to the k-node
        var2[0] = var1;
        for (int i = 1; i < k; i++) {
            var2[i] = var1.next;
            var1 = var1.next;
            if (var1 == null) {
                // if the node count is less than k, just return the head pointer.
                return var2[0];
            }
        }
        // Begin to reverse, let the first-node.next point to k+1 node.
        var2[0].next = var1.next;
        int i = k;
        while (i - 1 > 0) {
            // let every node in the array point to the previous node
            var2[i - 1].next = var2[i - 2];
            i--;
        }
        // After reverse, node[0] is the last element in the list. Recursive to reverse the k-2k nodes.
        var2[0].next = method1(var2[0].next, k);
        // return the head node.
        return var2[k - 1];
    }
}
