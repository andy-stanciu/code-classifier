/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public void method1(ListNode h, ListNode tail) {
        ListNode cur = h, prev = null, next = null;
        while (cur != tail) {
            //simple iterative approach to reverse the linked list
            next = cur.next;
            cur.next = prev;
            prev = cur;
            cur = next;
        }
        tail.next = prev;
    }

    public ListNode method2(ListNode head, int k) {
        ListNode h = null, t = null, prev = null, next = head, anshead = null;
        int count = 0;
        ListNode cur = head;
        while (cur != null) {
            h = cur;
            while (cur != null) {
                count++;
                if (count == k) {
                    count = 0;
                    //got tail as cur
                    t = cur;
                    next = t.next;
                    method1(h, t);
                    h.next = next;
                    cur = next;
                    if (prev == null) {
                        //make the new answer head;
                        anshead = t;
                    } else {
                        prev.next = t;
                    }
                    prev = h;
                    break;
                }
                cur = cur.next;
            }
            if (count != 0) {
                //means there is left over group of size < k
                if (prev == null)
                    return head;
                prev.next = h;
            }
        }
        return anshead;
    }
}
