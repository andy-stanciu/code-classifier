/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head, int k) {
        //reverse the nodes of the list k at a time
        ListNode headPtr = head;
        ListNode ptr = head;
        int counter = 0;
        Stack<Integer> st = new Stack<>();
        while (ptr != null) {
            ListNode prevStart = ptr;
            ListNode prev = null;
            for (int i = 1; i <= k; i++) {
                if (ptr != null) {
                    st.add(ptr.val);
                    prev = ptr;
                    ptr = ptr.next;
                    counter++;
                }
            }
            ListNode start = prevStart;
            ListNode end = ptr;
            if (counter == k) {
                while (start != end) {
                    int val = st.pop();
                    start.val = val;
                    start = start.next;
                }
                prevStart = prev;
                counter = 0;
            } else
                break;
        }
        return headPtr;
    }
}
