class Solution {

    public ListNode method1(ListNode head, int k) {
        if (k == 1 || head == null || head.next == null)
            return head;
        // no. of time do we need to reverse the linked list
        int n = length(head) / k;
        // for send as an argument to reverse function
        ListNode temp = head;
        // for returning address of head
        ListNode senital = new ListNode(0, head);
        // to add reverse linked list
        ListNode prev = senital;
        // keep the address where to join end of reverse linked list
        ListNode nxt = head;
        while (n != 0) {
            for (int i = 0; i < k; i++) {
                nxt = nxt.next;
            }
            prev.next = method2(temp, k);
            while (prev.next != null) {
                prev = prev.next;
            }
            prev.next = nxt;
            temp = nxt;
            n--;
        }
        return senital.next;
    }

    public // find the length of linkedlist to find out how many we have to reverse linked list
    // find the length of linkedlist to find out how many we have to reverse linked list
    // find the length of linkedlist to find out how many we have to reverse linked list
    int length(ListNode node) {
        int l = 0;
        while (node != null) {
            l++;
            node = node.next;
        }
        return l;
    }

    public // Reverse linked list of k length
    // Reverse linked list of k length
    // Reverse linked list of k length
    ListNode method2(ListNode node, int k) {
        ListNode prev = null, curr = node;
        int i = 0;
        while (i < k) {
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
            i++;
        }
        return prev;
    }
}
