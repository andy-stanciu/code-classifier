/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    void method1(ListNode start, ListNode end) {
        ListNode prv = null, current = start;
        while (prv != end) {
            ListNode nextNode = current.next;
            current.next = prv;
            prv = current;
            current = nextNode;
        }
    }

    public ListNode method2(ListNode head, int k) {
        if (head == null || head.next == null || k == 1)
            return head;
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode beforeNode = dummy, end = head;
        int i = 0;
        while (end != null) {
            ++i;
            if (i % k == 0) {
                ListNode start = beforeNode.next, temp = end.next;
                method1(start, end);
                beforeNode.next = end;
                start.next = temp;
                end = temp;
                beforeNode = start;
            } else {
                end = end.next;
            }
        }
        return dummy.next;
    }
}
// SECOND SILUTION
//     ListNode prv= null,current=start;
//     while(prv!=end){
//         ListNode nextNode =current.next;
//         current.next=prv;
//         prv=current;
//         current=nextNode;
//     }
// }
// public ListNode reverseKGroup(ListNode head, int k) {
//     if(head==null||head.next==null||k==1)return head;
//     ListNode dummy = new ListNode (0);
//     dummy.next=head;
//     ListNode beforeNode = dummy , end = head;
//     int i=0;
//     while(end!=null){
//         ++i;
//         if(i%k==0){
//             ListNode start= beforeNode.next,temp=end.next;
//             reverse(start,end);
//             beforeNode.next=end;
//             start.next=temp;
//             end = temp;
//             beforeNode=start;
//         }else{
//             end=end.next;
//         }
//     }
//     return dummy.next;
