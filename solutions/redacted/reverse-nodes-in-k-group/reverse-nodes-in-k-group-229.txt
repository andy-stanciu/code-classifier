/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    Class1 method1(ListNode head, ListNode end) {
        ListNode prev = null, curr = head;
        while (curr != end) {
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        return new Class1(prev, head);
    }

    public ListNode method2(ListNode head, int k) {
        if (head == null || head.next == null)
            return head;
        ListNode dummy = new ListNode(-1);
        dummy.next = head;
        ListNode prev = dummy, curr = head;
        while (curr != null) {
            int val = k;
            ListNode currP = prev;
            while (val > 0 && curr != null) {
                currP = curr;
                curr = curr.next;
                val--;
            }
            if (val > 0)
                break;
            Class1 li = method1(prev.next, curr);
            prev.next = li.first;
            li.last.next = curr;
            prev = li.last;
        }
        return dummy.next;
    }

    class Class1 {

        ListNode first;

        ListNode last;

        Class1(ListNode first, ListNode last) {
            this.first = first;
            this.last = last;
        }
    }
}
