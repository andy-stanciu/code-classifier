class Solution {

    public ListNode method1(ListNode head, int k) {
        ListNode temp = head;
        ListNode prev = null;
        ListNode newHead = null;
        while (temp != null) {
            ListNode knode = kthnode(temp, k);
            if (knode == null) {
                if (prev != null) {
                    prev.next = temp;
                }
                break;
            }
            ListNode nextk = knode.next;
            knode.next = null;
            ListNode var1 = method2(temp);
            if (newHead == null) {
                newHead = var1;
            } else {
                prev.next = var1;
            }
            prev = temp;
            temp = nextk;
        }
        return newHead == null ? head : newHead;
    }

    // Function to find the kth node from the current node
    public ListNode kthnode(ListNode temp, int k) {
        for (int i = 0; i < k - 1; i++) {
            // Check if the list ends before reaching k nodes
            if (temp == null)
                return null;
            temp = temp.next;
        }
        return temp;
    }

    // Function to reverse the list from \'head\' and return the new head
    public ListNode method2(ListNode head) {
        ListNode temp = head;
        ListNode prev = null;
        while (temp != null) {
            ListNode next = temp.next;
            temp.next = prev;
            prev = temp;
            temp = next;
        }
        return prev;
    }
}
