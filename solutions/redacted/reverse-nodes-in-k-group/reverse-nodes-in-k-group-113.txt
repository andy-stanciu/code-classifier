/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
public class Solution {

    public ListNode method1(ListNode head, int k) {
        if (head == null || k == 1)
            return head;
        // Dummy node to help manage the head and previous groups
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode var1 = dummy;
        while (true) {
            // Check if there are at least k nodes left to reverse
            ListNode kthNode = var1;
            for (int i = 0; i < k; i++) {
                kthNode = kthNode.next;
                if (kthNode == null) {
                    // Not enough nodes left to reverse
                    return dummy.next;
                }
            }
            // Reverse the k nodes
            ListNode var2 = var1.next;
            ListNode var3 = kthNode.next;
            ListNode prev = var3;
            ListNode curr = var2;
            while (curr != var3) {
                ListNode next = curr.next;
                curr.next = prev;
                prev = curr;
                curr = next;
            }
            // Connect reversed group with the previous part
            var1.next = kthNode;
            var1 = var2;
        }
    }
}
