/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head, int k) {
        ListNode temp = head;
        int len = 0;
        while (temp != null) {
            len++;
            temp = temp.next;
        }
        // Dummy node to act as a placeholder for the beginning of the list
        ListNode dummy = new ListNode(-1, head);
        // End of the previous group
        ListNode var1 = dummy;
        while (len >= k) {
            // Start of the current group
            ListNode var2 = var1.next;
            ListNode curr = var2;
            ListNode prev = null;
            // Reverse the current group
            for (int i = 0; i < k; i++) {
                ListNode next = curr.next;
                curr.next = prev;
                prev = curr;
                curr = next;
            }
            // Connect the previous group with the reversed current group
            var1.next = prev;
            var2.next = curr;
            // Move to the next group
            var1 = var2;
            len -= k;
        }
        return dummy.next;
    }
}
