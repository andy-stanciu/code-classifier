/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    // simple list reversal.
    public ListNode method1(ListNode node) {
        ListNode current = node;
        ListNode prev = null;
        while (current != null) {
            ListNode tempNext = current.next;
            current.next = prev;
            prev = current;
            current = tempNext;
        }
        return prev;
    }

    public ListNode method2(ListNode node, int k) {
        // if (k == 2), need to return 0, 1, not 0, 1, 2
        k--;
        while (k > 0) {
            k--;
            if (node == null) {
                return null;
            }
            node = node.next;
        }
        return node;
    }

    public ListNode method3(ListNode head, int k) {
        ListNode dummy = new ListNode(-1, head);
        ListNode current = head;
        ListNode var1 = dummy;
        while (current != null) {
            // get end of current group
            ListNode var2 = method2(current, k);
            if (var2 == null) {
                break;
            }
            // get start of next group
            ListNode var3 = var2.next;
            // break the part that needs to be reversed into a simple
            // singly linked list.
            var2.next = null;
            var1.next = null;
            // reverse the current simple singly linked list that has been broken out
            ListNode newCurrentList = method1(current);
            // link the lists back up
            var1.next = newCurrentList;
            ListNode var4 = var1;
            // find the last node of the current group
            while (var4.next != null) {
                var4 = var4.next;
            }
            var4.next = var3;
            // set current to the start of the next group
            current = var3;
            // set previous group end to the end of the last group.
            var1 = var4;
        }
        // return the new head.
        return dummy.next;
    }
}
