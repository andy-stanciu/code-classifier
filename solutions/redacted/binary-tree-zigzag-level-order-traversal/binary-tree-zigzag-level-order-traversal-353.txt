/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        if (root == null) {
            return list;
        }
        queue.add(root);
        queue.add(null);
        int i = 0;
        List<Integer> list1 = new ArrayList<>();
        while (!queue.isEmpty()) {
            TreeNode currNode = queue.remove();
            if (currNode == null) {
                if (queue.isEmpty()) {
                    if (i % 2 != 0) {
                        Collections.reverse(list1);
                        list.add(list1);
                        break;
                    } else {
                        list.add(list1);
                        break;
                    }
                } else {
                    if (i % 2 != 0) {
                        Collections.reverse(list1);
                        list.add(list1);
                        list1 = new ArrayList<>();
                        queue.add(null);
                        i++;
                    } else {
                        list.add(list1);
                        list1 = new ArrayList<>();
                        queue.add(null);
                        i++;
                    }
                }
            } else {
                list1.add(currNode.val);
                if (currNode.left != null) {
                    queue.add(currNode.left);
                }
                if (currNode.right != null) {
                    queue.add(currNode.right);
                }
            }
        }
        return list;
    }
}
