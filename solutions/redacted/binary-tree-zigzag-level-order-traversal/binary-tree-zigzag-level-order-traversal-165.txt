/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        if (root == null) {
            return result;
        }
        queue.offer(root);
        boolean lefttoright = true;
        while (!queue.isEmpty()) {
            int length = queue.size();
            List<Integer> temp = new ArrayList<>();
            for (int i = 0; i < length; i++) {
                TreeNode var1 = queue.poll();
                temp.add(var1.val);
                if (var1.left != null) {
                    queue.offer(var1.left);
                }
                if (var1.right != null) {
                    queue.offer(var1.right);
                }
            }
            if (lefttoright) {
                lefttoright = false;
                System.out.println("true");
            } else {
                Collections.reverse(temp);
                System.out.println("false");
                lefttoright = true;
            }
            result.add(temp);
        }
        return result;
    }
}
