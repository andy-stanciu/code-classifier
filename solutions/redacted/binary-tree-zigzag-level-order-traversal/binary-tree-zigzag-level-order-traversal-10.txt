/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();
        List<List<Integer>> f = new ArrayList<>();
        if (root == null) {
            return f;
        }
        TreeNode curr = root;
        q.add(root);
        int c = 0, sz = 0;
        while (!q.isEmpty()) {
            sz = q.size();
            List<Integer> ans = new ArrayList<>();
            for (int i = 0; i < sz; i++) {
                q.poll();
                ans.add(curr.val);
                if (curr.left != null)
                    q.add(curr.left);
                if (curr.right != null)
                    q.add(curr.right);
                curr = q.peek();
            }
            if (c % 2 != 0) {
                Collections.reverse(ans);
            }
            f.add(ans);
            c++;
        }
        return f;
    }
}
