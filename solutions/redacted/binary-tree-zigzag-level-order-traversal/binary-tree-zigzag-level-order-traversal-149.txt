/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        boolean reverse = false;
        if (root != null) {
            q.add(root);
        }
        while (!q.isEmpty()) {
            int size = q.size();
            List<Integer> tempList = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                TreeNode current = q.poll();
                if (current.left != null) {
                    q.add(current.left);
                }
                if (current.right != null) {
                    q.add(current.right);
                }
                tempList.add(current.val);
                if (i == size - 1) {
                    if (reverse) {
                        Collections.reverse(tempList);
                        list.add(tempList);
                        reverse = false;
                    } else {
                        list.add(tempList);
                        reverse = true;
                    }
                }
            }
        }
        return list;
    }
}
