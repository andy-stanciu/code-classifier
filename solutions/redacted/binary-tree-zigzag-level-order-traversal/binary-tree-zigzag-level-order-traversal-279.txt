/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        // Result list to store zigzag level order
        List<List<Integer>> res = new LinkedList<>();
        if (root == null) {
            // Return empty result if root is null
            return res;
        }
        // Queue for BFS traversal
        Queue<TreeNode> queue = new LinkedList<>();
        // Add root node to queue to start BFS
        queue.offer(root);
        // Track current level
        int var1 = 0;
        while (!queue.isEmpty()) {
            // Number of nodes at current level
            int size = queue.size();
            // List for nodes at current level
            List<Integer> levsublist = new LinkedList<>();
            while (size-- > 0) {
                // Remove front node from queue
                TreeNode node = queue.poll();
                if (var1 % 2 != 0) {
                    // Add node value to front of list at odd levels (zigzag)
                    levsublist.addFirst(node.val);
                } else {
                    // Add node value to end of list at even levels
                    levsublist.add(node.val);
                }
                // Add left and right children to queue for next level processing
                if (node.left != null) {
                    queue.offer(node.left);
                }
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }
            // Add current level sublist to result list
            res.add(levsublist);
            // Move to next level
            var1++;
        }
        // Return the zigzag level order traversal result
        return res;
    }
}
