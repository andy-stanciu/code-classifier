/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        // If the tree is empty, return an empty list
        if (root == null) {
            return result;
        }
        // Initialize the queue for BFS
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        // Boolean flag to track the order of traversal (left to right or right to left)
        boolean leftToRight = true;
        // Traverse each level
        while (!queue.isEmpty()) {
            // Number of nodes at the current level
            int var1 = queue.size();
            // List to store values of the current level
            List<Integer> var2 = new ArrayList<>();
            for (int i = 0; i < var1; i++) {
                TreeNode currentNode = queue.poll();
                // Add node values based on the traversal order
                if (leftToRight) {
                    // Add left to right
                    var2.add(currentNode.val);
                } else {
                    // Add right to left (insert at the front)
                    var2.add(0, currentNode.val);
                }
                // Add left and right children of the current node to the queue if they exist
                if (currentNode.left != null) {
                    queue.offer(currentNode.left);
                }
                if (currentNode.right != null) {
                    queue.offer(currentNode.right);
                }
            }
            // After processing the current level, toggle the order for the next level
            leftToRight = !leftToRight;
            // Add the current level to the result
            result.add(var2);
        }
        return result;
    }
}
