/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> ans = new LinkedList<List<Integer>>();
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        if (root == null)
            return ans;
        q.offer(root);
        int f = 0;
        while (!q.isEmpty()) {
            int n = q.size();
            List<Integer> l = new LinkedList<Integer>();
            for (int i = 0; i < n; i++) {
                if (q.peek().left != null)
                    q.offer(q.peek().left);
                if (q.peek().right != null)
                    q.offer(q.peek().right);
                l.add(q.poll().val);
            }
            if (f == 1) {
                Collections.reverse(l);
                f = 0;
            } else {
                f = 1;
            }
            ans.add(l);
        }
        return ans;
    }
}
