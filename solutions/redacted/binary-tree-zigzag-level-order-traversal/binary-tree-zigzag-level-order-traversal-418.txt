/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> rs = new ArrayList<>();
        if (root == null) {
            return rs;
        }
        LinkedList<TreeNode> list = new LinkedList<>();
        boolean leftToRight = true;
        list.add(root);
        while (!list.isEmpty()) {
            int size = list.size();
            List<Integer> var1 = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                TreeNode curNode = list.pollFirst();
                var1.add(curNode.val);
                if (curNode.left != null) {
                    list.add(curNode.left);
                }
                if (curNode.right != null) {
                    list.add(curNode.right);
                }
            }
            if (leftToRight) {
                rs.add(var1);
                leftToRight = false;
            } else {
                Collections.reverse(var1);
                rs.add(var1);
                leftToRight = true;
            }
        }
        return rs;
    }
}
