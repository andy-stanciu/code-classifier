/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        if (root == null) {
            return new ArrayList<List<Integer>>();
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        // left->right for 0 and right-->left for 1
        int var1 = 0;
        List<List<Integer>> ans = new ArrayList<>();
        while (q.size() > 0) {
            int size = q.size();
            List<Integer> list = new ArrayList<>();
            while (size-- > 0) {
                TreeNode rem = q.remove();
                list.add(rem.val);
                if (rem.left != null) {
                    q.add(rem.left);
                }
                if (rem.right != null) {
                    q.add(rem.right);
                }
            }
            if (var1 == 1) {
                Collections.reverse(list);
            }
            ans.add(list);
            var1 = 1 - var1;
        }
        return ans;
    }
}
