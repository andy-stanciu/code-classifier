/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> l = new ArrayList<>();
        if (root == null)
            return l;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        boolean flag = false;
        while (!q.isEmpty()) {
            List<Integer> list = new ArrayList<>();
            Stack<Integer> stack = new Stack<>();
            int size = q.size();
            for (int i = 0; i < size; i++) {
                TreeNode currnode = q.remove();
                // check flag
                if (flag) {
                    stack.push(currnode.val);
                } else {
                    list.add(currnode.val);
                }
                if (currnode.left != null) {
                    q.add(currnode.left);
                }
                if (currnode.right != null) {
                    q.add(currnode.right);
                }
            }
            flag = !flag;
            // pop all element from stack
            while (!stack.isEmpty()) {
                list.add(stack.pop());
            }
            l.add(list);
        }
        return l;
    }
}
