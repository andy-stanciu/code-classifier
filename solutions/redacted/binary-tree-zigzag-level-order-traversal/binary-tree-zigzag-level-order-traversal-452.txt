/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Pair {

    TreeNode node;

    int var1;

    Pair(TreeNode node, int var1) {
        this.node = node;
        this.var1 = var1;
    }
}

class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> resultList = new ArrayList<>();
        Queue<Pair> q = new LinkedList<>();
        if (root == null) {
            return resultList;
        }
        q.add(new Pair(root, 0));
        while (!q.isEmpty()) {
            int size = q.size();
            int var1 = q.peek().var1;
            List<Integer> innerList = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                Pair pair = q.poll();
                TreeNode node = pair.node;
                var1 = pair.var1;
                innerList.add(node.val);
                if (node.left != null) {
                    q.add(new Pair(node.left, var1 + 1));
                }
                if (node.right != null) {
                    q.add(new Pair(node.right, var1 + 1));
                }
            }
            if (var1 % 2 != 0) {
                Collections.reverse(innerList);
            }
            resultList.add(innerList);
        }
        return resultList;
    }
}
