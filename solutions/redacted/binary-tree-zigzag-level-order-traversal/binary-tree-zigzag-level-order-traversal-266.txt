/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> var1 = new ArrayList<>();
        if (root == null) {
            return var1;
        }
        Deque<TreeNode> dq = new LinkedList<>();
        dq.add(root);
        boolean flag = true;
        while (!dq.isEmpty()) {
            int n = dq.size();
            List<Integer> var2 = new ArrayList<>();
            if (flag) {
                for (int i = 0; i < n; i++) {
                    TreeNode curr = dq.pollFirst();
                    if (curr.left != null) {
                        dq.addLast(curr.left);
                    }
                    if (curr.right != null) {
                        dq.addLast(curr.right);
                    }
                    var2.add(curr.val);
                }
            } else {
                for (int i = 0; i < n; i++) {
                    TreeNode curr = dq.pollLast();
                    if (curr.right != null) {
                        dq.addFirst(curr.right);
                    }
                    if (curr.left != null) {
                        dq.addFirst(curr.left);
                    }
                    var2.add(curr.val);
                }
            }
            var1.add(var2);
            flag = !flag;
        }
        return var1;
    }
}
