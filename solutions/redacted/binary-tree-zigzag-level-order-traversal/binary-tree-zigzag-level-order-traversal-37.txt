/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        Deque<TreeNode> que = new LinkedList<>();
        List<List<Integer>> lst = new ArrayList<>();
        if (root == null) {
            return lst;
        }
        boolean reverse = false;
        que.add(root);
        while (!que.isEmpty()) {
            int lvlsize = que.size();
            ArrayList<Integer> ans = new ArrayList<Integer>();
            for (int i = 0; i < lvlsize; i++) {
                if (reverse) {
                    TreeNode cur = que.removeLast();
                    ans.add(cur.val);
                    if (cur.right != null) {
                        que.addFirst(cur.right);
                    }
                    if (cur.left != null) {
                        que.addFirst(cur.left);
                    }
                } else {
                    TreeNode cur = que.removeFirst();
                    ans.add(cur.val);
                    if (cur.left != null) {
                        que.addLast(cur.left);
                    }
                    if (cur.right != null) {
                        que.addLast(cur.right);
                    }
                }
            }
            reverse = !reverse;
            lst.add(ans);
        }
        return lst;
    }
}
