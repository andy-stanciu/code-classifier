/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int flag = 1;

    public void zig(TreeNode root, List<List<Integer>> list, Queue<TreeNode> queue) {
        if (root == null)
            return;
        queue.add(root);
        while (!queue.isEmpty()) {
            int var1 = queue.size();
            List<Integer> ll = new ArrayList<>();
            for (int i = 0; i < var1; i++) {
                TreeNode node = queue.poll();
                if (node.left != null)
                    queue.add(node.left);
                if (node.right != null)
                    queue.add(node.right);
                ll.add(node.val);
            }
            if (flag == -1) {
                Collections.reverse(ll);
            }
            flag *= -1;
            list.add(new ArrayList<>(ll));
        }
    }

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        zig(root, list, queue);
        return list;
    }
}
