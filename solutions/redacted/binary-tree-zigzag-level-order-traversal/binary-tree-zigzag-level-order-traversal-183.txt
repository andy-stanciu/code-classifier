/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode node) {
        List<List<Integer>> result = new ArrayList<>();
        if (node == null)
            return result;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(node);
        int j = 0;
        while (!queue.isEmpty()) {
            int var1 = queue.size();
            List<Integer> var2 = new ArrayList<>(var1);
            for (int i = 0; i < var1; i++) {
                TreeNode currentnode = queue.poll();
                var2.add(currentnode.val);
                if (currentnode.left != null)
                    queue.add(currentnode.left);
                if (currentnode.right != null)
                    queue.add(currentnode.right);
            }
            if (++j % 2 == 0) {
                List<Integer> reversed = var2.reversed();
                result.add(reversed);
            } else
                result.add(var2);
        }
        return result;
    }
}
