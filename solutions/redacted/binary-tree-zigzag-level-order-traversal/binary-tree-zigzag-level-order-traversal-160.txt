/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null) {
            return ans;
        }
        boolean leftToRight = true;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while (!q.isEmpty()) {
            int len = q.size();
            // Using LinkedList to add elements at both ends.
            LinkedList<Integer> row = new LinkedList<>();
            for (int i = 0; i < len; i++) {
                TreeNode node = q.poll();
                if (leftToRight) {
                    // Add to the end of the list
                    row.add(node.val);
                } else {
                    // Add to the beginning of the list
                    row.addFirst(node.val);
                }
                if (node.left != null) {
                    q.add(node.left);
                }
                if (node.right != null) {
                    q.add(node.right);
                }
            }
            // Toggle the direction for the next level
            leftToRight = !leftToRight;
            ans.add(row);
        }
        return ans;
    }
}
