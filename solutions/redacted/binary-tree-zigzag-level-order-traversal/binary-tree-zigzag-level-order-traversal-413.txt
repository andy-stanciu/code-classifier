/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode node) {
        List<List<Integer>> alt = new ArrayList<>();
        if (node == null) {
            return alt;
        }
        Queue<TreeNode> q1 = new ArrayDeque<>();
        Queue<TreeNode> q2 = new ArrayDeque<>();
        q1.add(node);
        int check = 0;
        while (q1.size() > 0) {
            List<Integer> temp = new ArrayList<>();
            int size = q1.size();
            for (int i = 0; i < size; i++) {
                node = q1.remove();
                temp.add(node.val);
                if (node.left != null) {
                    q2.add(node.left);
                }
                if (node.right != null) {
                    q2.add(node.right);
                }
            }
            check++;
            if (!temp.isEmpty()) {
                if (check % 2 == 0) {
                    Collections.reverse(temp);
                }
                alt.add(temp);
            }
            q1 = q2;
            q2 = new ArrayDeque<>();
        }
        return alt;
    }
}
