/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int height(TreeNode root) {
        if (root == null || (root.right == null && root.left == null))
            return 0;
        return 1 + Math.max(height(root.left), height(root.right));
    }

    public static void method1(TreeNode root, int n, List<Integer> arr) {
        if (root == null)
            return;
        if (n == 1) {
            arr.add(root.val);
            return;
        }
        method1(root.left, n - 1, arr);
        method1(root.right, n - 1, arr);
    }

    public static void method2(TreeNode root, int n, List<Integer> arr) {
        if (root == null)
            return;
        if (n == 1) {
            arr.add(root.val);
            return;
        }
        method2(root.right, n - 1, arr);
        method2(root.left, n - 1, arr);
    }

    public List<List<Integer>> method3(TreeNode root) {
        int var1 = height(root) + 1;
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null)
            return ans;
        for (int i = 1; i <= var1; i++) {
            List<Integer> arr = new ArrayList<>();
            if (i % 2 != 0)
                method1(root, i, arr);
            else
                method2(root, i, arr);
            ans.add(arr);
        }
        return ans;
    }
}
