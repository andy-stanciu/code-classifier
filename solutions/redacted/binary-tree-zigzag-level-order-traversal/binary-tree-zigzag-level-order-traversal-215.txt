/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null)
            return ans;
        Deque<TreeNode> q = new LinkedList<>();
        boolean var1 = false;
        q.add(root);
        while (!q.isEmpty()) {
            int size = q.size();
            List<Integer> var2 = new ArrayList<>();
            if (var1 == false) {
                for (int i = 0; i < size; i++) {
                    TreeNode currNode = q.removeFirst();
                    var2.add(currNode.val);
                    if (currNode.left != null) {
                        q.addLast(currNode.left);
                    }
                    if (currNode.right != null) {
                        q.addLast(currNode.right);
                    }
                }
                ans.add(var2);
            } else {
                for (int i = 0; i < size; i++) {
                    TreeNode currNode = q.removeLast();
                    var2.add(currNode.val);
                    if (currNode.right != null) {
                        q.addFirst(currNode.right);
                    }
                    if (currNode.left != null) {
                        q.addFirst(currNode.left);
                    }
                }
                ans.add(var2);
            }
            var1 = !var1;
        }
        return ans;
    }
}
