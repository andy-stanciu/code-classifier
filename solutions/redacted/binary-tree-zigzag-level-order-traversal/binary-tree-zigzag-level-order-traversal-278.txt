/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// this is exactly similar to the levelorder travesel , but the slightly differnce is that , here we use the boolean flag , alternatively .
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<>();
        List<List<Integer>> finalList = new ArrayList<>();
        if (root == null)
            return finalList;
        queue.offer(root);
        boolean flag = true;
        while (!queue.isEmpty()) {
            int var1 = queue.size();
            List<Integer> temp = new ArrayList<>();
            for (int i = 0; i < var1; i++) {
                if (queue.peek().left != null)
                    queue.offer(queue.peek().left);
                if (queue.peek().right != null)
                    queue.offer(queue.peek().right);
                temp.add(queue.poll().val);
            }
            if (!flag) {
                Collections.reverse(temp);
            }
            flag = !flag;
            finalList.add(temp);
        }
        return finalList;
    }
}
