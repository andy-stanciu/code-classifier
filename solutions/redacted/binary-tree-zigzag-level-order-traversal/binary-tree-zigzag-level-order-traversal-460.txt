/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) {
            return res;
        }
        boolean flag = true;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        List<Integer> tempList1 = new ArrayList<>();
        tempList1.add(root.val);
        res.add(tempList1);
        while (!queue.isEmpty()) {
            Queue<TreeNode> tempQueue = new LinkedList<>();
            List<Integer> tempList = new ArrayList<>();
            while (!queue.isEmpty()) {
                TreeNode root1 = queue.peek();
                if (root1.left != null) {
                    tempQueue.add(root1.left);
                    tempList.add(root1.left.val);
                }
                if (root1.right != null) {
                    tempQueue.add(root1.right);
                    tempList.add(root1.right.val);
                }
                queue.remove();
            }
            if (flag) {
                Collections.reverse(tempList);
                flag = false;
            } else {
                flag = true;
            }
            if (!tempList.isEmpty())
                res.add(tempList);
            queue.addAll(tempQueue);
        }
        return res;
    }
}
