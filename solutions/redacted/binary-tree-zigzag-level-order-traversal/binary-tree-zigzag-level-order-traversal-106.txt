class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        // Queue to perform level order traversal
        Queue<TreeNode> nodesQueue = new LinkedList<>();
        nodesQueue.add(root);
        // Flag to determine the direction of traversal (left to right or right to left)
        boolean leftToRight = true;
        // Continue traversal until the queue is empty
        while (!nodesQueue.isEmpty()) {
            // Get the number of nodes at the current level
            int size = nodesQueue.size();
            // List to store the values of nodes at the current level
            List<Integer> row = new ArrayList<>();
            // Traverse nodes at the current level
            for (int i = 0; i < size; i++) {
                // Get the front node from the queue
                TreeNode node = nodesQueue.poll();
                // Add the node\'s value at the correct index based on the traversal direction
                if (leftToRight) {
                    row.add(node.val);
                } else {
                    // Add in reverse order
                    row.add(0, node.val);
                }
                // Add the left and right children of the current node to the queue
                if (node.left != null) {
                    nodesQueue.add(node.left);
                }
                if (node.right != null) {
                    nodesQueue.add(node.right);
                }
            }
            // Toggle the direction of traversal for the next level
            leftToRight = !leftToRight;
            // Add the current level\'s values to the result list
            result.add(row);
        }
        return result;
    }
}
