/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        ArrayDeque<TreeNode> q = new ArrayDeque<>();
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> curr = new ArrayList<>();
        if (root == null)
            return ans;
        q.add(root);
        q.add(new TreeNode(-101));
        int cnt = 0;
        while (!q.isEmpty()) {
            TreeNode temp = q.remove();
            if (temp.val != -101) {
                curr.add(temp.val);
                if (temp.left != null)
                    q.add(temp.left);
                if (temp.right != null)
                    q.add(temp.right);
            } else {
                cnt++;
                if (cnt % 2 == 0)
                    Collections.reverse(curr);
                ans.add(curr);
                curr = new ArrayList<>();
                if (!q.isEmpty()) {
                    q.add(new TreeNode(-101));
                }
            }
        }
        return ans;
    }
}
