/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        Deque<TreeNode> q = new LinkedList<>();
        int var1 = 0;
        if (root == null)
            return result;
        q.offer(root);
        while (!q.isEmpty()) {
            int qsize = q.size();
            List<Integer> var2 = new ArrayList<>();
            for (int i = 0; i < qsize; i++) {
                //normal order: remove front , add back..
                if (var1 % 2 == 0) {
                    TreeNode currentNode = q.pollFirst();
                    var2.add(currentNode.val);
                    if (currentNode.left != null) {
                        q.addLast(currentNode.left);
                    }
                    if (currentNode.right != null) {
                        q.addLast(currentNode.right);
                    }
                } else //reverse order : add front, remove back....
                {
                    TreeNode currentNode = q.pollLast();
                    var2.add(currentNode.val);
                    if (currentNode.right != null) {
                        q.addFirst(currentNode.right);
                    }
                    if (currentNode.left != null) {
                        q.addFirst(currentNode.left);
                    }
                }
            }
            var1++;
            result.add(var2);
        }
        return result;
    }
}
