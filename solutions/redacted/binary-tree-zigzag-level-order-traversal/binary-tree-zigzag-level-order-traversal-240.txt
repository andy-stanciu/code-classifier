/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        if (root == null) {
            return new LinkedList<>();
        }
        List<List<Integer>> res = new LinkedList<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        boolean rev = false;
        while (!q.isEmpty()) {
            int n = q.size();
            List<Integer> levlList = new LinkedList<>();
            Stack<Integer> st = new Stack<>();
            for (int i = 0; i < n; i++) {
                TreeNode tmp = q.poll();
                if (rev) {
                    st.push(tmp.val);
                } else {
                    levlList.add(tmp.val);
                }
                if (tmp.left != null) {
                    q.offer(tmp.left);
                }
                if (tmp.right != null) {
                    q.offer(tmp.right);
                }
            }
            if (rev) {
                while (!st.isEmpty()) {
                    levlList.add(st.pop());
                }
            }
            res.add(levlList);
            rev = !rev;
        }
        return res;
    }
}
