/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        Queue<Pair> queue = new LinkedList<>();
        queue.offer(new Pair(root, 1));
        while (!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> var1 = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                Pair element = queue.poll();
                TreeNode node = element.node;
                int var2 = element.var1;
                if (var2 % 2 == 1) {
                    // odd level number, add left then right
                    var1.add(node.val);
                } else {
                    // even level number, add right then left
                    // add at the beginning
                    var1.add(0, node.val);
                }
                // Enqueue left and right children if they exist
                if (node.left != null) {
                    queue.offer(new Pair(node.left, var2 + 1));
                }
                if (node.right != null) {
                    queue.offer(new Pair(node.right, var2 + 1));
                }
            }
            result.add(var1);
        }
        return result;
    }

    static class Pair {

        TreeNode node;

        int var1;

        public Pair(TreeNode node, int var1) {
            this.node = node;
            this.var1 = var1;
        }
    }
}
