/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> mainList = new ArrayList<>();
        int h = getHeight(root);
        for (int i = 0; i <= h - 1; i++) {
            List<Integer> al = new ArrayList<>();
            method2(root, 0, i, al);
            mainList.add(al);
        }
        return mainList;
    }

    public static List<Integer> method2(TreeNode t, int i, int param1, List<Integer> al) {
        if (t == null) {
            // do nothing;
        } else if (i == param1) {
            if (// agar even hai to sidha - sidha add karo;
            i % 2 == 0) {
                al.add(t.val);
            } else // agar odd hai to reverse karke add karo;
            {
                // reverse karne kai liye, agar hum age - age add kare to khud reverse hoga
                al.add(0, t.val);
            }
        } else {
            method2(t.left, i + 1, param1, al);
            method2(t.right, i + 1, param1, al);
        }
        return al;
    }

    public static int getHeight(TreeNode root) {
        if (root == null) {
            return 0;
        } else {
            int leftHeight = 1 + getHeight(root.left);
            int rightHeight = 1 + getHeight(root.right);
            return Math.max(leftHeight, rightHeight);
        }
    }
}
