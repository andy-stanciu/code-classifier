/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<Integer> reverse(List<Integer> l) {
        List<Integer> rev = new ArrayList(l.size());
        for (int i = 0; i < l.size(); i++) {
            rev.add(l.get(l.size() - 1 - i));
        }
        return rev;
    }

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null)
            return res;
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        int decider = 1;
        while (!q.isEmpty()) {
            int lvl = q.size();
            List<Integer> currList = new ArrayList<>(lvl);
            for (int i = 0; i < lvl; i++) {
                TreeNode curr = q.poll();
                currList.add(curr.val);
                if (curr.left != null)
                    q.offer(curr.left);
                if (curr.right != null)
                    q.offer(curr.right);
            }
            if (decider == 1)
                res.add(currList);
            else
                res.add(reverse(currList));
            decider = decider ^ 1;
        }
        return res;
    }
}
