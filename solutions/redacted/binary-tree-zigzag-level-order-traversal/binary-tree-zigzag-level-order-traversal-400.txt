class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        // Initialize a list to store the final result
        List<List<Integer>> result = new ArrayList<>();
        // Initialize a list to store nodes at each level
        List<Integer> list = new ArrayList<>();
        // Initialize a queue to perform level order traversal
        Queue<TreeNode> queue = new LinkedList<>();
        // Boolean flag to control the traversal direction
        boolean flag = false;
        // Check if the tree is empty
        if (root == null) {
            return result;
        }
        // Add the root node to the queue to start the traversal
        queue.add(root);
        // While the queue is not empty, process nodes at each level
        while (!queue.isEmpty()) {
            // Initialize an empty list to store values of the current level
            list = new ArrayList<>();
            // Get the current size of the queue (number of nodes at the current level)
            int size = queue.size();
            // Iterate through the nodes at the current level
            for (int i = 0; i < size; i++) {
                // Remove the node from the queue
                TreeNode node = queue.remove();
                // Add the node value to the list based on the direction
                if (flag) {
                    // If the direction is reverse, add the value at the beginning of the list
                    list.add(0, node.val);
                } else {
                    // If the direction is normal, add the value at the end of the list
                    list.add(node.val);
                }
                // Add the children of the node to the queue to process them at the next level
                if (node.left != null)
                    queue.add(node.left);
                if (node.right != null)
                    queue.add(node.right);
            }
            // Reverse the direction for the next level
            flag = !flag;
            // Add the list of values of the current level to the result
            result.add(list);
        }
        // Return the final result
        return result;
    }
}
