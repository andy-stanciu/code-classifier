/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<List<Integer>> List = new ArrayList<List<Integer>>();

    List<Integer> l1 = new ArrayList<Integer>();

    List<Integer> array1 = new ArrayList<Integer>();

    List<Integer> array2 = new ArrayList<Integer>();

    int count = 0;

    int var1 = 0;

    public void move(TreeNode root, int param1) {
        if (root == null) {
            return;
        }
        array1.add(root.val);
        array2.add(param1);
        count++;
        if (var1 < param1) {
            var1 = param1;
        }
        move(root.left, param1 + 1);
        move(root.right, param1 + 1);
    }

    public List<List<Integer>> method1(TreeNode root) {
        if (root == null) {
            return List;
        }
        move(root, 0);
        int fflag = 0;
        for (int i = 0; i <= var1; i++) {
            if (fflag == 0) {
                for (int j = 0; j < count; j++) {
                    if (array2.get(j) == i) {
                        l1.add(array1.get(j));
                    }
                }
                fflag = 1;
            } else {
                List<Integer> stack = new ArrayList<Integer>();
                for (int j = 0; j < count; j++) {
                    if (array2.get(j) == i) {
                        stack.add(array1.get(j));
                    }
                }
                fflag = 0;
                for (int z = stack.size() - 1; z >= 0; z = z - 1) {
                    l1.add(stack.get(z));
                }
            }
            List.add(l1);
            l1 = new ArrayList<Integer>();
        }
        return List;
    }
}
