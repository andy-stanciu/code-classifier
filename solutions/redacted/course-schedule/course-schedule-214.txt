class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        List<Integer>[] graph = new ArrayList[param1];
        for (int i = 0; i < param1; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] pre : prerequisites) {
            graph[pre[1]].add(pre[0]);
        }
        boolean[] visited = new boolean[param1];
        boolean[] recurVisited = new boolean[param1];
        for (int i = 0; i < param1; i++) {
            if (visited[i] == false) {
                boolean possible = dfs(graph, visited, recurVisited, i);
                if (possible) {
                    return false;
                }
            }
        }
        return true;
    }

    private boolean dfs(List<Integer>[] graph, boolean[] visited, boolean[] recurVisited, int curr) {
        visited[curr] = true;
        recurVisited[curr] = true;
        for (int i = 0; i < graph[curr].size(); i++) {
            int neighbour = graph[curr].get(i);
            if (recurVisited[neighbour] == true) {
                return true;
            } else if (!visited[neighbour] && dfs(graph, visited, recurVisited, neighbour)) {
                return true;
            }
        }
        recurVisited[curr] = false;
        return false;
    }
}
