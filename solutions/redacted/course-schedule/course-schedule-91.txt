class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        Map<Integer, List<Integer>> adjList = new HashMap<>();
        for (int i = 0; i < prerequisites.length; i++) {
            adjList.putIfAbsent(prerequisites[i][0], new ArrayList<>());
            adjList.get(prerequisites[i][0]).add(prerequisites[i][1]);
            adjList.putIfAbsent(prerequisites[i][1], new ArrayList<>());
        }
        HashSet<Integer> visiting = new HashSet<>();
        HashSet<Integer> visited = new HashSet<>();
        for (int[] var1 : prerequisites) {
            if (!visited.contains(var1[0])) {
                if (!topologicalSort(var1[0], visiting, visited, adjList)) {
                    return false;
                }
            }
        }
        return true;
    }

    private boolean topologicalSort(int node, HashSet<Integer> visiting, HashSet<Integer> visited, Map<Integer, List<Integer>> adjList) {
        if (visiting.contains(node))
            return false;
        visiting.add(node);
        for (int var1 : adjList.get(node)) {
            if (!visited.contains(var1)) {
                if (topologicalSort(var1, visiting, visited, adjList) == false)
                    return false;
            }
        }
        visited.add(node);
        visiting.remove(node);
        return true;
    }
}
