class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            graph.add(new ArrayList<>());
        }
        boolean[] vis = new boolean[param1];
        boolean[] stack = new boolean[param1];
        for (int i = 0; i < prerequisites.length; i++) {
            graph.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        if (prerequisites.length == 1 || prerequisites.length == 0) {
            return true;
        }
        for (int i = 0; i < param1; i++) {
            if (!vis[i]) {
                if (dfs(graph, vis, stack, i)) {
                    return false;
                }
            }
        }
        return true;
    }

    public static boolean dfs(ArrayList<ArrayList<Integer>> g, boolean[] vis, boolean[] stack, int cur) {
        vis[cur] = true;
        stack[cur] = true;
        for (int i = 0; i < g.get(cur).size(); i++) {
            int n = g.get(cur).get(i);
            if (stack[n]) {
                return true;
            } else if (!vis[n]) {
                if (dfs(g, vis, stack, n)) {
                    return true;
                }
            }
        }
        stack[cur] = false;
        return false;
    }
}
