class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        // adjacency list to represent the graph
        List<List<Integer>> adjList = new ArrayList<>(param1);
        for (int i = 0; i < param1; i++) {
            adjList.add(new ArrayList<>());
        }
        //Populate the adjacency list with prerequisites
        for (int[] prerequisite : prerequisites) {
            int var1 = prerequisite[0];
            int var2 = prerequisite[1];
            adjList.get(var1).add(var2);
        }
        // Initialize an array to track visited nodes
        int[] visited = new int[param1];
        //Check for cycle using DFS
        for (int i = 0; i < param1; i++) {
            if (hasCycle(i, adjList, visited)) {
                return false;
            }
        }
        return true;
    }

    private boolean hasCycle(int var1, List<List<Integer>> adjList, int[] visited) {
        // cycle detected
        if (visited[var1] == 1) {
            return true;
        }
        // Already visited
        if (visited[var1] == 2) {
            return false;
        }
        // Mark as visited
        visited[var1] = 1;
        for (int var2 : adjList.get(var1)) {
            if (hasCycle(var2, adjList, visited)) {
                return true;
            }
        }
        // Mark as visited after exploration
        visited[var1] = 2;
        return false;
    }
}
