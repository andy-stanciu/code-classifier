class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList<Integer>[] adjList = new ArrayList[param1];
        int[] indegree = new int[param1];
        for (int i = 0; i < param1; i++) {
            adjList[i] = new ArrayList<>();
        }
        for (int[] prerequisite : prerequisites) {
            int u = prerequisite[1];
            int v = prerequisite[0];
            adjList[u].add(v);
            indegree[v]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        int counter = 0;
        while (q.size() > 0) {
            int rem = q.remove();
            counter++;
            for (int neighbor : adjList[rem]) {
                indegree[neighbor]--;
                if (indegree[neighbor] == 0) {
                    q.add(neighbor);
                }
            }
        }
        return counter == param1;
    }
}
