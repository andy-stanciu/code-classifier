class Solution {

    //union find type algo where dependant on previous
    public boolean canFinish(int param1, int[][] preReq) {
        ArrayList<Integer>[] graph;
        graph = new ArrayList[param1];
        for (int i = 0; i < param1; i++) {
            graph[i] = new ArrayList<Integer>();
        }
        for (int i = 0; i < preReq.length; i++) graph[preReq[i][0]].add(preReq[i][1]);
        return KahnsAlgo(param1, graph);
    }

    public boolean KahnsAlgo(int N, ArrayList<Integer>[] graph) {
        int[] indegree = new int[N];
        for (int i = 0; i < N; i++) {
            for (Integer e : graph[i]) indegree[e]++;
        }
        LinkedList<Integer> que = new LinkedList<>();
        for (int i = 0; i < N; i++) {
            if (indegree[i] == 0)
                que.addLast(i);
        }
        ArrayList<Integer> ans = new ArrayList<>();
        while (que.size() != 0) {
            int size = que.size();
            while (size-- > 0) {
                int rvtx = que.removeFirst();
                ans.add(rvtx);
                for (int e : graph[rvtx]) {
                    if (--indegree[e] == 0)
                        que.addLast(e);
                }
            }
        }
        if (ans.size() != N)
            return false;
        return true;
    }
}
