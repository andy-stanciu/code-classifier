class Solution {

    public static boolean canFinish(int param1, int[][] prerequisites) {
        Map<Integer, Set<Integer>> var1 = new HashMap<Integer, Set<Integer>>();
        Map<Integer, Set<Integer>> prereqMap = new HashMap<Integer, Set<Integer>>();
        Queue<Integer> backlog = new LinkedList<Integer>();
        // Populate maps
        for (int i = 0; i < prerequisites.length; i++) {
            if (var1.containsKey(prerequisites[i][0])) {
                var1.get(prerequisites[i][0]).add(prerequisites[i][1]);
            } else {
                var1.put(prerequisites[i][0], new HashSet<Integer>());
                var1.get(prerequisites[i][0]).add(prerequisites[i][1]);
            }
            if (prereqMap.containsKey(prerequisites[i][1])) {
                prereqMap.get(prerequisites[i][1]).add(prerequisites[i][0]);
            } else {
                prereqMap.put(prerequisites[i][1], new HashSet<Integer>());
                prereqMap.get(prerequisites[i][1]).add(prerequisites[i][0]);
            }
        }
        // Initiate our queue with all courses that don\'t have prerequisites
        for (int i = 0; i < param1; i++) {
            if (!var1.containsKey(i)) {
                backlog.add(i);
            }
        }
        /*
            Whatever is in the backlog queue is harmless (would never cause conflict) ,
            i.e. Safe to remove as a prerequisite from all the other courses.

            While removing the harmless courses, if a dependent course doesn\'t have prerequisites any longer
            It also becomes harmless, so add it to the queue to remove it as a prerequisite from all the other courses
            Also remove the newly harmless course from the courseMap.
        */
        while (!backlog.isEmpty()) {
            int curr = backlog.poll();
            Set<Integer> temp = prereqMap.get(curr);
            if (temp == null)
                continue;
            for (int var3 : temp) {
                Set<Integer> var2 = var1.get(var3);
                var2.remove(curr);
                if (var2.size() == 0) {
                    backlog.add(var3);
                    var1.remove(var3);
                }
            }
        }
        // if courseMap still has elements, then there\'s a circular dependency.
        return var1.size() == 0;
    }
}
