class Solution {

    public boolean topoSort(int param1, List<List<Integer>> adjList) {
        int[] indegree = new int[param1];
        /**
         * Count indegrees
         */
        for (int i = 0; i < param1; i++) {
            for (int adjNode : adjList.get(i)) {
                indegree[adjNode]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        /**
         * Node with indegree 0, Push in the stack
         */
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0)
                q.offer(i);
        }
        int topoElementCount = 0;
        while (!q.isEmpty()) {
            int front = q.poll();
            topoElementCount++;
            for (int adjNode : adjList.get(front)) {
                indegree[adjNode]--;
                if (indegree[adjNode] == 0)
                    q.offer(adjNode);
            }
        }
        return topoElementCount == param1 ? true : false;
    }

    public boolean canFinish(int param1, int[][] prerequisites) {
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adjList.add(new ArrayList<>());
        }
        /**
         * Prepare directed Graph
         */
        for (int i = 0; i < prerequisites.length; i++) {
            int from = prerequisites[i][1];
            int to = prerequisites[i][0];
            adjList.get(from).add(to);
        }
        return topoSort(param1, adjList);
    }
}
