class Solution {

    boolean iscycle(List<Integer>[] graph, boolean[] vis, boolean[] rec, int curr) {
        vis[curr] = true;
        rec[curr] = true;
        for (int u : graph[curr]) {
            if (rec[u] == true) {
                return true;
            } else {
                if (vis[u] == false) {
                    if (iscycle(graph, vis, rec, u))
                        return true;
                }
            }
        }
        rec[curr] = false;
        return false;
    }

    public boolean canFinish(int param1, int[][] prerequisites) {
        List<Integer>[] graph = new ArrayList[param1];
        for (int i = 0; i < param1; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            graph[prerequisites[i][1]].add(prerequisites[i][0]);
        }
        boolean[] vis = new boolean[param1];
        boolean[] rec = new boolean[param1];
        Stack<Integer> st = new Stack<>();
        int[] ans = new int[param1];
        for (int i = 0; i < vis.length; i++) {
            if (vis[i] == false) {
                if (iscycle(graph, vis, rec, i)) {
                    return false;
                }
            }
        }
        return true;
    }
}
