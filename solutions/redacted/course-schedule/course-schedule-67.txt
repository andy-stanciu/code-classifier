class Solution {

    //check if the given graph has cycle or not
    private boolean isCycleExist(int currNode, ArrayList<ArrayList<Integer>> adj, int[] visited) {
        //check if the current node was already in processing state
        if (visited[currNode] == 2) {
            //cycle is present
            return true;
        }
        //change state of current node to processing (i.e. 2)
        visited[currNode] = 2;
        //traverse all neighbours of current node
        for (int neighbour : adj.get(currNode)) {
            //check if the neigbour is already processed or not
            if (visited[neighbour] != 1) {
                //if it\'s not processed
                if (isCycleExist(neighbour, adj, visited)) {
                    //cycle is present
                    return true;
                }
            }
        }
        //update the state of current node from processing(2) -> processed(1)
        visited[currNode] = 1;
        //no cycle exists
        return false;
    }

    //driver function
    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>(param1);
        //add empty array list for every node/vertice
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<Integer>());
        }
        //add edges to adjacency list
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        //this will maintain the state of every node/vertice
        /*
            0 -> unvisited (default)
            1 -> processed
            2 -> processing
        */
        int[] visited = new int[param1];
        for (int i = 0; i < param1; i++) {
            if (visited[i] == 0) {
                if (isCycleExist(i, adj, visited)) {
                    //if it has cycle, then there is no way in which all the courses can be done
                    return false;
                }
            }
        }
        //if there is no cycle, all courses can be done
        return true;
    }
}
