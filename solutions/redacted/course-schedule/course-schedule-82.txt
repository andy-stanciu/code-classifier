/*

Planning to use Topological sort here.

I will have graph setup in a form of adj list
I will have a list which will be my final order list, the order we need to take course
I will maintain an indegree setup for every vertex (course)

I will have a queue, where i will add vertex to the queue if the indegree of that vertex is 0.
Then i will remove that node, add it to my order list and explore its childrens, for every child, i will decrement ingree of that child(vertex)
and if the updated indegree is 0 after decrementing, i will add it to my queue(because i can complete that course as there is no dependency)

After queue becomes empty, i will check whether my order list is equal to N -> courses here

If it is less that means i didn\'t complete all courses
*/
class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        List<Integer> orderList = new ArrayList<>();
        Map<Integer, List<Integer>> graph = new HashMap<>();
        Map<Integer, Integer> indegree = new HashMap<>();
        Queue<Integer> queue = new LinkedList<>();
        //initializing graph and indegree for every node
        for (int i = 0; i < param1; i++) {
            graph.put(i, new ArrayList<Integer>());
            indegree.put(i, 0);
        }
        //creating graph and setting indegree for every node(course in this scenario)
        for (int i = 0; i < prerequisites.length; i++) {
            //course to take
            Integer parent = prerequisites[i][0];
            //prereq to complete 1st for that course
            Integer child = prerequisites[i][1];
            //parent depends on child, (i.e) to complete parent course, i need to complete child course first
            graph.get(parent).add(child);
            indegree.put(child, indegree.get(child) + 1);
        }
        //for vertex where indegree is 0, thats going to be my source, add it to my queue
        for (int i = 0; i < param1; i++) {
            if (indegree.get(i) == 0)
                queue.add(i);
        }
        //Explore possible options
        while (!queue.isEmpty()) {
            Integer node = queue.poll();
            //add courses that should be taken in order
            orderList.add(node);
            //as we completed one course, now decrement indegree of its children
            for (Integer n : graph.get(node)) {
                indegree.put(n, indegree.get(n) - 1);
                //if any child indegree becomes zero that means we can take that course
                //add it to queue
                if (indegree.get(n) == 0)
                    queue.add(n);
            }
        }
        //after completion of the queue traversal, see whether we completed all courses
        return (orderList.size() == param1);
    }
}
