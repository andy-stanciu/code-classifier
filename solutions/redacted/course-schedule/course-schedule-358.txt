class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        HashMap<Integer, ArrayList<Integer>> hm = new HashMap<>();
        Queue<Integer> q = new LinkedList<>();
        int[] indegree = new int[param1];
        for (int[] p : prerequisites) {
            int start = p[1];
            int end = p[0];
            indegree[end]++;
            if (!hm.containsKey(start)) {
                hm.put(start, new ArrayList<Integer>());
            }
            hm.get(start).add(end);
        }
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        while (!q.isEmpty()) {
            int rem = q.poll();
            if (hm.containsKey(rem)) {
                for (int val : hm.get(rem)) {
                    indegree[val]--;
                    if (indegree[val] == 0) {
                        q.add(val);
                    }
                }
            }
            param1--;
        }
        return param1 == 0;
    }
}
