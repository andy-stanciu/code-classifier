class Solution {

    public boolean canFinish(int param1, int[][] kanishk) {
        int V = param1;
        ArrayList<ArrayList<Integer>> adj = DAG(param1, kanishk);
        // make an indegree array to keep a store of all the nodes
        int[] indegree = new int[V];
        for (int i = 0; i < V; i++) {
            for (int it : adj.get(i)) {
                indegree[it]++;
            }
        }
        // make a queue
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                q.offer(i);
            }
        }
        // make a topo array to keep a store of the topological sorting
        int[] topo = new int[V];
        int i = 0;
        int count = 0;
        while (!q.isEmpty()) {
            int node = q.poll();
            count++;
            topo[i++] = node;
            for (int ir : adj.get(node)) {
                indegree[ir]--;
                if (indegree[ir] == 0) {
                    q.offer(ir);
                }
            }
        }
        return count == V;
    }

    private ArrayList<ArrayList<Integer>> DAG(int param1, int[][] edges) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            int var1 = edge[0];
            int pre = edge[1];
            adj.get(pre).add(var1);
        }
        return adj;
    }
}
