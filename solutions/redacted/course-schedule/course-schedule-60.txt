class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        int[][] graph = new int[param1][param1];
        int[] indegree = new int[param1];
        int n = prerequisites.length;
        for (int i = 0; i < n; i++) {
            int u = prerequisites[i][0];
            int v = prerequisites[i][1];
            graph[v][u] = 1;
            indegree[u]++;
        }
        return topologicalSort(graph, indegree);
    }

    public boolean topologicalSort(int[][] graph, int[] indegree) {
        Queue<Integer> queue = new LinkedList<Integer>();
        int var1 = graph.length;
        for (int i = 0; i < var1; i++) {
            if (indegree[i] == 0) {
                queue.add(i);
            }
        }
        int var2 = 0;
        while (!queue.isEmpty()) {
            int var3 = queue.poll();
            var2 += 1;
            for (int var4 = 0; var4 < var1; var4++) {
                if (graph[var3][var4] == 1) {
                    indegree[var4]--;
                    if (indegree[var4] == 0) {
                        queue.add(var4);
                    }
                }
            }
        }
        return var2 == var1;
    }
}
