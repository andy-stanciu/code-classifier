class Solution {

    public boolean canFinish(int n, int[][] preq) {
        int m = preq.length;
        ArrayList<ArrayList<Integer>> graph = new ArrayList<ArrayList<Integer>>();
        for (int i = 0; i < n; i++) graph.add(new ArrayList<Integer>());
        int[] indeg = new int[n];
        for (int i = 0; i < m; i++) {
            int v = preq[i][0];
            int u = preq[i][1];
            indeg[v]++;
            graph.get(u).add(v);
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            if (indeg[i] == 0)
                q.add(i);
            // System.out.print(indeg[i]+" ");
        }
        int idx = 0;
        // int[] ans=new int[n];
        while (!q.isEmpty()) {
            int curr = q.poll();
            idx++;
            for (int ele : graph.get(curr)) {
                indeg[ele]--;
                if (indeg[ele] == 0)
                    q.add(ele);
            }
        }
        return idx == n;
    }
}
