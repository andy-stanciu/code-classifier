class Solution {

    public boolean canFinish(int V, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        int m = prerequisites.length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < 2; j++) {
                adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
            }
        }
        int[] indegree = new int[V];
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < adj.get(i).size(); j++) {
                indegree[adj.get(i).get(j)]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < V; i++) {
            if (indegree[i] == 0)
                q.add(i);
        }
        ArrayList<Integer> ans = new ArrayList<>();
        while (!q.isEmpty()) {
            int i = q.poll();
            ans.add(i);
            for (int k : adj.get(i)) {
                indegree[k]--;
                if (indegree[k] == 0)
                    q.add(k);
            }
        }
        System.out.println(ans);
        if (ans.size() == V)
            return true;
        else
            return false;
    }
}
