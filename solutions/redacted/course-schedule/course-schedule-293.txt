class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        // Create an adjacency list to represent the graph
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adjList.add(new ArrayList<>());
        }
        // Fill the adjacency list with prerequisites
        for (int[] prerequisite : prerequisites) {
            int var1 = prerequisite[0];
            int prereq = prerequisite[1];
            adjList.get(prereq).add(var1);
        }
        // Create an array to keep track of visited nodes
        int[] visited = new int[param1];
        // Perform DFS on each course
        for (int i = 0; i < param1; i++) {
            if (visited[i] == 0 && !dfs(adjList, visited, i)) {
                return false;
            }
        }
        return true;
    }

    private boolean dfs(List<List<Integer>> adjList, int[] visited, int var1) {
        // If this course is being visited in the current DFS traversal, it means there is a cycle
        if (visited[var1] == 1) {
            return false;
        }
        // If this course has already been visited in a previous traversal, no need to visit again
        if (visited[var1] == 2) {
            return true;
        }
        // Mark this course as being visited
        visited[var1] = 1;
        // Visit all the courses that depend on this course
        for (int var2 : adjList.get(var1)) {
            if (!dfs(adjList, visited, var2)) {
                return false;
            }
        }
        // Mark this course as completely visited
        visited[var1] = 2;
        return true;
    }
}
