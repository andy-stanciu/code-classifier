class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        // creating queue
        Queue<Integer> q = new LinkedList<>();
        // to store indegree of all vertices(course)
        int[] ind = new int[param1];
        // Creating adjecency list-:
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            int x = prerequisites[i][0];
            int y = prerequisites[i][1];
            adj.get(x).add(y);
            // calculating indegree
            ind[y]++;
        }
        for (int i = 0; i < param1; i++) {
            // if any course(vertex) have indegree 0 it means this course isn\'t the prerequisites of any other course so add it to queue
            if (ind[i] == 0)
                q.add(i);
        }
        // BFS TARVERSAL USING Kahn\'s Algo
        while (!q.isEmpty()) {
            // remove from queue
            int a = q.poll();
            for (int i : adj.get(a)) {
                // traverse to all those courses which is required if we want to complete course \'a\'
                // decrement their indegree by 1
                ind[i]--;
                // if course(vertex\'s) indegree becomes 0 then add it to queue
                if (ind[i] == 0)
                    q.add(i);
            }
        }
        // if all the vertices value becomes 0 in indegree array it means graph  is acycle
        for (// traversing in indegree array
        // traversing in indegree array
        // traversing in indegree array
        int i = 0; i < param1; i++) {
            // if any course(vertex) have indegree atleast 1 it means we cannot complete the all courses
            if (ind[i] != 0)
                return false;
        }
        return true;
    }
}
