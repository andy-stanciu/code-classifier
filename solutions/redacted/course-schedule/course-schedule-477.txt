class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList[] graph = new ArrayList[param1];
        for (int i = 0; i < param1; i++) graph[i] = new ArrayList();
        for (int i = 0; i < prerequisites.length; i++) {
            graph[prerequisites[i][0]].add(prerequisites[i][1]);
        }
        // used to monitor the course currently in check to be completed or not
        Set<Integer> visitedSet = new HashSet<>();
        // used to monitor completed course
        boolean[] var1 = new boolean[param1];
        for (int i = 0; i < param1; i++) {
            if (!dfs(graph, visitedSet, var1, i)) {
                return false;
            }
        }
        return true;
    }

    private boolean dfs(ArrayList[] graph, Set<Integer> visitedSet, boolean[] var1, int param2) {
        // if a current course is completable which is already identified prviously so no need to process again
        if (var1[param2])
            return true;
        // If we got the same course currently in process to check for completion so can\'t be completed due to cyclic dependecy
        if (visitedSet.contains(param2))
            return false;
        visitedSet.add(param2);
        for (int i = 0; i < graph[param2].size(); i++) {
            if (!dfs(graph, visitedSet, var1, (int) graph[param2].get(i))) {
                return false;
            }
        }
        visitedSet.remove(param2);
        var1[param2] = true;
        return true;
    }
}
