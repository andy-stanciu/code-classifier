class Solution {

    public boolean canFinish(int N, int[][] prerequisites) {
        HashMap<Integer, List<Integer>> dependency = new HashMap<>();
        int[] indeg = new int[N];
        for (int[] prerequisite : prerequisites) {
            int from = prerequisite[0];
            int to = prerequisite[1];
            dependency.putIfAbsent(from, new ArrayList<>());
            dependency.get(from).add(to);
            indeg[to]++;
        }
        ArrayDeque<Integer> queue = new ArrayDeque<>();
        HashSet<Integer> seen = new HashSet<>();
        for (int i = 0; i < N; i++) {
            if (indeg[i] == 0) {
                queue.add(i);
            }
        }
        while (!queue.isEmpty()) {
            int var1 = queue.pollFirst();
            if (!seen.add(var1)) {
                return false;
            }
            List<Integer> dependents = dependency.getOrDefault(var1, Collections.emptyList());
            for (int dependent : dependents) {
                if (--indeg[dependent] == 0) {
                    queue.add(dependent);
                }
            }
        }
        return seen.size() == N;
    }
}
