// New approach
// 1) Make an adjecency list using arraylists of arraylists
// 2) adj[0] - {1,2} is going to represent 1 and 2 are dependent on 0
// 3) Maintain an indegree var for each of the node (array)
// 4) DFS needs a queue
// 5) Initialise all the nodes with 0 indegree to the queue
// 6) When we pop element p from a queue, for each q such that p->q, In[q]--
// 7) If any q has indegree of 0, we will put it to the queue
// 8) Loop until the queue is empty
// 9) ArrayList<> ans , node poped, put to ans
// 10) At the end if #ans = #Nodes then its possible
class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>(param1);
        ArrayList<Integer> ans = new ArrayList<>();
        int[] indegree = new int[param1];
        Arrays.fill(indegree, 0);
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<Integer>());
        }
        // Build adj list
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
            indegree[prerequisites[i][0]]++;
        }
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0) {
                queue.add(i);
            }
        }
        // DFS
        while (!queue.isEmpty()) {
            int node = queue.remove();
            ans.add(node);
            for (int neighbour : adj.get(node)) {
                indegree[neighbour]--;
                if (indegree[neighbour] == 0) {
                    queue.add(neighbour);
                }
            }
        }
        if (ans.size() == param1)
            return true;
        return false;
    }
}
