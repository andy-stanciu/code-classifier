class Solution {

    class Edge {

        int src;

        int dest;

        public Edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }

    private void helper(List<Edge>[] graph, int[][] arr) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < arr.length; i++) {
            int src = arr[i][1];
            int dest = arr[i][0];
            graph[src].add(new Edge(src, dest));
        }
    }

    private boolean helper(List<Edge>[] graph, int curr, boolean[] vis, boolean[] stack) {
        vis[curr] = true;
        stack[curr] = true;
        for (int i = 0; i < graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);
            if (stack[e.dest]) {
                return true;
            }
            if (!vis[e.dest] && helper(graph, e.dest, vis, stack)) {
                return true;
            }
        }
        stack[curr] = false;
        return false;
    }

    public boolean canFinish(int n, int[][] prerequisites) {
        List<Edge>[] graph = new ArrayList[n];
        helper(graph, prerequisites);
        boolean[] vis = new boolean[graph.length];
        boolean[] stack = new boolean[graph.length];
        for (int i = 0; i < graph.length; i++) {
            if (!vis[i]) {
                if (helper(graph, i, vis, stack)) {
                    return false;
                }
            }
        }
        return true;
    }
}
