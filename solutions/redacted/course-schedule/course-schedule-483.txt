class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        int[] inDegree = new int[param1];
        List<Integer>[] graph = new List[param1];
        for (int[] prereq : prerequisites) {
            int var1 = prereq[0];
            int pre = prereq[1];
            if (graph[pre] == null) {
                graph[pre] = new ArrayList<>();
            }
            graph[pre].add(var1);
            inDegree[var1]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < inDegree.length; i++) {
            if (inDegree[i] == 0)
                q.add(i);
        }
        List<Integer> ans = new ArrayList<>();
        while (!q.isEmpty()) {
            int var1 = q.poll();
            ans.add(var1);
            if (graph[var1] != null) {
                for (Integer l : graph[var1]) {
                    inDegree[l]--;
                    if (inDegree[l] == 0) {
                        q.add(l);
                    }
                }
            }
        }
        return ans.size() == param1;
    }
}
