class Solution {

    public boolean a = true;

    public boolean canFinish(int param1, int[][] pre) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            graph.add(new ArrayList<>());
        }
        int n = pre.length;
        for (int i = 0; i < n; i++) {
            graph.get(pre[i][0]).add(pre[i][1]);
        }
        boolean[] visited = new boolean[param1];
        for (int i = 0; i < n; i++) {
            if (!a) {
                return a;
            }
            if (!visited[pre[i][0]]) {
                Map<Integer, Integer> map = new HashMap<>();
                dfs(graph, visited, pre[i][0], map);
            }
        }
        return a;
    }

    public void dfs(List<List<Integer>> graph, boolean[] visited, int idx, Map<Integer, Integer> parent) {
        if (visited[idx])
            return;
        visited[idx] = true;
        List<Integer> lst = graph.get(idx);
        parent.put(idx, 1);
        for (int i = 0; i < lst.size(); i++) {
            if (parent.containsKey(lst.get(i))) {
                a = false;
                return;
            }
            dfs(graph, visited, lst.get(i), parent);
        }
        parent.remove(idx);
    }
}
