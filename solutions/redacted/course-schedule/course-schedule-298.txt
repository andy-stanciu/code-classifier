class Solution {

    public boolean canFinish(int param1, int[][] arr) {
        List<List<Integer>> list = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            list.add(new ArrayList<>());
        }
        for (int i = 0; i < arr.length; i++) {
            list.get(arr[i][0]).add(arr[i][1]);
        }
        int[] vis = new int[param1];
        for (int i = 0; i < param1; i++) {
            if (vis[i] == 0) {
                if (iscyclic(list, vis, i)) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean iscyclic(List<List<Integer>> list, int[] vis, int curr) {
        if (vis[curr] == 2) {
            return true;
        }
        vis[curr] = 2;
        for (int i = 0; i < list.get(curr).size(); i++) {
            if (vis[list.get(curr).get(i)] != 1) {
                if (iscyclic(list, vis, list.get(curr).get(i))) {
                    return true;
                }
            }
        }
        vis[curr] = 1;
        return false;
    }
}
