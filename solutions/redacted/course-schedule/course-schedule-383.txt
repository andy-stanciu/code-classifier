class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList[] graph = new ArrayList[param1];
        int[] indegree = new int[param1];
        for (int i = 0; i < param1; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            indegree[prerequisites[i][0]]++;
            graph[prerequisites[i][1]].add(prerequisites[i][0]);
        }
        Queue<Integer> q = new LinkedList<>();
        int ans = 0;
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0) {
                q.add(i);
                ans++;
            }
        }
        while (!q.isEmpty()) {
            int len = q.size();
            while (len-- > 0) {
                int curr = q.poll();
                for (int i = 0; i < graph[curr].size(); i++) {
                    int currnum = (int) graph[curr].get(i);
                    indegree[currnum]--;
                    if (indegree[currnum] == 0) {
                        q.add(currnum);
                        ans++;
                    }
                }
            }
        }
        if (ans == param1)
            return true;
        return false;
    }
}
