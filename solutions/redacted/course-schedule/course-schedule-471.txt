class Solution {

    public boolean canFinish(int n, int[][] arr) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] a : arr) {
            int u = a[0];
            int v = a[1];
            adj.get(v).add(u);
        }
        int[] vis = new int[n];
        Arrays.fill(vis, 0);
        for (int i = 0; i < n; i++) {
            if (vis[i] == 0 && dfs(i, vis, adj)) {
                return false;
            }
        }
        return true;
    }

    boolean dfs(int node, int[] vis, List<List<Integer>> adj) {
        if (vis[node] == 1) {
            return true;
        }
        vis[node] = 1;
        for (int next : adj.get(node)) {
            if (vis[next] != -1 && dfs(next, vis, adj)) {
                return true;
            }
        }
        vis[node] = -1;
        return false;
    }
}
