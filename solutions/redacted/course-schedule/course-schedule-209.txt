class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        Map<Integer, List<Integer>> adj = new HashMap<>();
        int[] indegree = new int[param1];
        for (int i = 0; i < param1; i++) {
            adj.put(i, new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
            indegree[prerequisites[i][1]]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        int visitedCount = 0;
        while (!q.isEmpty()) {
            int current = q.remove();
            visitedCount++;
            List<Integer> neighbours = adj.get(current);
            for (int i = 0; i < neighbours.size(); i++) {
                indegree[neighbours.get(i)]--;
                if (indegree[neighbours.get(i)] == 0) {
                    q.add(neighbours.get(i));
                }
            }
        }
        if (visitedCount == param1)
            return true;
        return false;
    }
}
