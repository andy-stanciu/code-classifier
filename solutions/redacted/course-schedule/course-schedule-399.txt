class Solution {

    // cycle detection of directed graph
    public static boolean hasCycle(ArrayList<Integer>[] graph, boolean[] vis, boolean[] rec, int curr) {
        vis[curr] = true;
        rec[curr] = true;
        int len = graph[curr].size();
        for (int i = 0; i < len; i++) {
            int dest = graph[curr].get(i);
            if (rec[dest]) {
                return true;
            } else if (!vis[dest]) {
                if (hasCycle(graph, vis, rec, dest)) {
                    return true;
                }
            }
        }
        rec[curr] = false;
        return false;
    }

    public boolean canFinish(int param1, int[][] prerequisites) {
        // forming a graph
        ArrayList<Integer>[] graph = new ArrayList[param1];
        for (int i = 0; i < param1; i++) {
            graph[i] = new ArrayList<Integer>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            graph[prerequisites[i][1]].add(prerequisites[i][0]);
        }
        boolean[] vis = new boolean[param1];
        boolean[] rec = new boolean[param1];
        for (int i = 0; i < param1; i++) {
            if (!vis[i]) {
                if (hasCycle(graph, vis, rec, i)) {
                    return false;
                }
            }
        }
        return true;
    }
}
