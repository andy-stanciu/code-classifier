class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        // form an adjacency list
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        int m = prerequisites.length;
        for (int i = 0; i < m; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        int[] visited = new int[param1];
        for (int i = 0; i < param1; i++) {
            if (visited[i] == 0)
                if (!dfs(adj, visited, i))
                    return false;
        }
        return true;
    }

    private boolean dfs(ArrayList<ArrayList<Integer>> adj, int[] visited, int param2) {
        if (visited[param2] == 1)
            return false;
        visited[param2] = 1;
        for (int i = 0; i < adj.get(param2).size(); i++) {
            if (!dfs(adj, visited, adj.get(param2).get(i)))
                return false;
        }
        visited[param2] = 0;
        adj.get(param2).clear();
        return true;
    }
}
