class Solution {

    public boolean canFinish(int n, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            adj.add(new ArrayList<Integer>());
        }
        int[] indegree = new int[n];
        for (int i = 0; i < prerequisites.length; i++) {
            int a = prerequisites[i][0];
            int b = prerequisites[i][1];
            adj.get(b).add(a);
            indegree[a]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        ArrayList<Integer> ans = new ArrayList<>();
        while (!q.isEmpty()) {
            int curr = q.remove();
            ans.add(curr);
            for (int conn : adj.get(curr)) {
                indegree[conn]--;
                if (indegree[conn] == 0) {
                    q.add(conn);
                }
            }
        }
        if (ans.size() == n) {
            return true;
        } else {
            return false;
        }
    }
}
