class Solution {

    public boolean detectCycle(List<List<Integer>> hm, int src, boolean[] cyc, boolean[] vis) {
        vis[src] = true;
        cyc[src] = true;
        for (int x : hm.get(src)) {
            if (cyc[x] == true) {
                return true;
            }
            if (vis[x] == false && detectCycle(hm, x, cyc, vis)) {
                return true;
            }
        }
        cyc[src] = false;
        return false;
    }

    public boolean canFinish(int param1, int[][] prerequisites) {
        List<List<Integer>> hm = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            hm.add(new ArrayList<>());
        }
        boolean[] vis = new boolean[param1];
        boolean[] cyc = new boolean[param1];
        for (int[] x : prerequisites) {
            hm.get(x[1]).add(x[0]);
        }
        for (int i = 0; i < param1; i++) {
            if (detectCycle(hm, i, cyc, vis)) {
                return false;
            }
        }
        return true;
    }
}
