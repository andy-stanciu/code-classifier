class Solution {

    HashSet<Integer> seen;

    HashMap<Integer, List<Integer>> map;

    public boolean canFinish(int param1, int[][] prerequisites) {
        seen = new HashSet<>();
        map = new HashMap<>();
        for (int[] array : prerequisites) {
            if (!map.containsKey(array[0])) {
                map.put(array[0], new ArrayList<>());
            }
            map.get(array[0]).add(array[1]);
        }
        for (int i = 0; i < param1; i++) {
            if (!seen.contains(i)) {
                if (!dfs(i, new HashSet<>())) {
                    return false;
                }
                seen.add(i);
            }
        }
        for (Map.Entry<Integer, List<Integer>> entry : map.entrySet()) {
            if (!seen.contains(entry.getKey())) {
                return false;
            }
        }
        return true;
    }

    private boolean dfs(int param2, HashSet<Integer> set) {
        boolean r = true;
        if (set.contains(param2)) {
            return false;
        }
        if (seen.contains(param2)) {
            return true;
        }
        set.add(param2);
        List<Integer> prerequisites = map.getOrDefault(param2, new ArrayList<>());
        if (prerequisites.isEmpty()) {
            seen.add(param2);
            return true;
        }
        for (int n : prerequisites) {
            if (!seen.contains(n)) {
                r = r && dfs(n, set);
                if (!r) {
                    return false;
                }
                seen.add(n);
            }
        }
        return true;
    }
}
