class Solution {

    public boolean canFinish(int V, int[][] prerequisites) {
        //just detect cycle
        // Create an adjacency list representation of the courses and their prerequisites
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] i : prerequisites) {
            adj.get(i[1]).add(i[0]);
        }
        //Topological sort
        int[] indegree = new int[V];
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < V; i++) {
            for (Integer j : adj.get(i)) {
                indegree[j]++;
            }
        }
        for (int i = 0; i < V; i++) {
            if (indegree[i] == 0) {
                q.offer(i);
            }
        }
        int ans = 0;
        while (!q.isEmpty()) {
            Integer temp = q.poll();
            ans++;
            for (Integer j : adj.get(temp)) {
                indegree[j]--;
                if (indegree[j] == 0) {
                    q.offer(j);
                }
            }
        }
        return ans == V;
    }
}
