class Solution {

    public static boolean isCyclic(List<List<Integer>> adj, int[] visited, int curr) {
        if (visited[curr] == 2) {
            return true;
        }
        visited[curr] = 2;
        for (int i = 0; i < adj.get(curr).size(); i++) {
            int negh = adj.get(curr).get(i);
            if (visited[negh] != 1) {
                if (isCyclic(adj, visited, negh)) {
                    return true;
                }
            }
        }
        visited[curr] = 1;
        return false;
    }

    public boolean canFinish(int param1, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList();
        for (int i = 0; i < param1; ++i) {
            adj.add(new ArrayList<>());
        }
        for (int[] prerequisite : prerequisites) {
            adj.get(prerequisite[0]).add(prerequisite[1]);
        }
        int[] visited = new int[param1 + 1];
        Arrays.fill(visited, 0);
        for (int i = 0; i < param1; i++) {
            if (visited[i] == 0) {
                if (isCyclic(adj, visited, i)) {
                    return false;
                }
            }
        }
        return true;
    }
}
