class Solution {

    public boolean topologicalSort(LinkedList<Integer>[] adj, int v) {
        //ArrayList<Integer> list = new ArrayList<>();
        int size = 0;
        int[] inDeg = new int[v];
        for (int i = 0; i < v; i++) {
            for (int neigh : adj[i]) {
                inDeg[neigh]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < v; i++) {
            if (inDeg[i] == 0)
                q.add(i);
        }
        while (!q.isEmpty()) {
            int node = q.poll();
            //list.add(node);
            size++;
            for (int neigh : adj[node]) {
                inDeg[neigh]--;
                if (inDeg[neigh] == 0)
                    q.add(neigh);
            }
        }
        //return list.size() == v;
        return size == v;
    }

    public boolean canFinish(int param1, int[][] prerequisites) {
        LinkedList<Integer>[] adj = new LinkedList[param1];
        for (int i = 0; i < adj.length; i++) {
            adj[i] = new LinkedList<>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj[prerequisites[i][1]].add(prerequisites[i][0]);
        }
        return topologicalSort(adj, param1);
    }
}
