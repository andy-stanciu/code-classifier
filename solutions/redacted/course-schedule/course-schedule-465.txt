class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        // initialize an incoming array to keep track of inComing edges for each course
        int[] var1 = new int[param1];
        // Initialize an adjacency list graph to reresent the course pre-requisite
        // each course is a node, adn its pre-requisite are represented as edges in the list
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            graph.add(new ArrayList<>());
        }
        // we will iterate through the pre-requisite array and build its edge and nodes
        for (int[] pre : prerequisites) {
            int var2 = pre[0];
            int var3 = pre[1];
            // this will represent how many pre-requisite course has ....
            var1[var2]++;
            // will determine that pre course has to be taken to complete the given course in this iteration ...
            graph.get(var3).add(var2);
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (var1[i] == 0) {
                // means there is no pre-requisite for this course
                queue.offer(i);
            }
        }
        int var4 = 0;
        while (!queue.isEmpty()) {
            int var5 = queue.poll();
            var4++;
            for (int neighbour : graph.get(var5)) {
                // decrement since course is now taken, so one less course
                var1[neighbour]--;
                if (var1[neighbour] == 0) {
                    queue.offer(neighbour);
                }
            }
        }
        // if total course taken is equal to num of courses that means all courses can be done ...
        return var4 == param1;
    }
}
