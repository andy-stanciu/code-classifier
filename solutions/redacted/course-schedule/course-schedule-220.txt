class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        int[] indegree = new int[param1];
        for (int i = 0; i < param1; i++) {
            for (int j : adj.get(i)) {
                indegree[j]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        int c = 0;
        while (!q.isEmpty()) {
            int k = q.peek();
            q.remove();
            c++;
            for (int j : adj.get(k)) {
                indegree[j]--;
                if (indegree[j] == 0) {
                    q.add(j);
                }
            }
        }
        if (c == param1) {
            return true;
        }
        return false;
    }
}
