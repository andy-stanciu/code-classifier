/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    //recursive way-----------------
    // public static void inOrder(TreeNode n ,List<Integer> temp) {
    //     if (n == null)
    //         return;
    //     inOrder(n.left , temp);
    //     temp.add(n.val);
    //     inOrder(n.right , temp);
    // }
    /* Using stack------------------

    
    public List<Integer> inorderTraversal(TreeNode root) {
          Stack<TreeNode> st = new Stack<>();
          List<Integer> ans = new ArrayList<>();
          if (root == null) return ans;
          TreeNode temp = root;
        
        while(true){
         
         if(temp != null){
                 st.push(temp);
                 temp = temp.left;
             }else{
                if(st.isEmpty())break;
                
                 temp = st.pop();
                 ans.add(temp.val);    
                 temp = temp.right;

             }
         }
       return ans;
    }
 */
    public List<Integer> method1(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        if (root == null)
            return ans;
        TreeNode cur = root;
        //inorder = left->root->right;
        while (cur != null) {
            if (cur.left == null) {
                ans.add(cur.val);
                cur = cur.right;
            } else {
                TreeNode prev = cur.left;
                while (prev.right != null && prev.right != cur) {
                    prev = prev.right;
                }
                if (prev.right == null) {
                    prev.right = cur;
                    cur = cur.left;
                } else {
                    prev.right = null;
                    ans.add(cur.val);
                    cur = cur.right;
                }
            }
        }
        return ans;
    }
}
