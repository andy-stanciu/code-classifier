/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Integer> method1(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        method2(root, result);
        return result;
    }

    private void method2(TreeNode node, List<Integer> result) {
        if (node == null) {
            return;
        }
        method2(node.left, result);
        result.add(node.val);
        method2(node.right, result);
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        TreeNode root1 = new TreeNode(1);
        root1.right = new TreeNode(2);
        root1.right.left = new TreeNode(3);
        System.out.println(solution.method1(root1));
        TreeNode root2 = new TreeNode(1, new TreeNode(2, new TreeNode(4), new TreeNode(5, new TreeNode(6), new TreeNode(7))), new TreeNode(3, null, new TreeNode(8, new TreeNode(9), null)));
        System.out.println(solution.method1(root2));
        TreeNode root3 = null;
        System.out.println(solution.method1(root3));
        TreeNode root4 = new TreeNode(1);
        System.out.println(solution.method1(root4));
    }
}
