class Solution {

    public boolean canConstruct(String param1, String magazine) {
        List<Character> var1 = param1.chars().mapToObj(e -> (char) e).collect(Collectors.toList());
        List<Character> magazineList = magazine.chars().mapToObj(e -> (char) e).collect(Collectors.toList());
        boolean flag = false;
        HashMap<Character, Integer> var2 = var1.stream().collect(HashMap::new, (m, c) -> {
            m.put(c, m.containsKey(c) ? (m.get(c) + 1) : 1);
        }, HashMap::putAll);
        HashMap<Character, Integer> countMagazine = magazineList.stream().collect(HashMap::new, (m, c) -> {
            m.put(c, m.containsKey(c) ? (m.get(c) + 1) : 1);
        }, HashMap::putAll);
        for (Character key : var2.keySet()) {
            flag = countMagazine.containsKey(key) && countMagazine.get(key) >= (var2.get(key));
            if (!flag)
                return flag;
        }
        return flag;
    }
}
