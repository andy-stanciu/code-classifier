class Solution {

    public boolean canConstruct(String param1, String magazine) {
        // Create a HashMap to store characters from the ransomNote and their
        // frequencies
        Map<Character, Integer> var1 = new HashMap<>();
        // Loop through each character in the ransomNote string
        for (int i = 0; i < param1.length(); i++) {
            // Get the character at the current index
            char currentChar = param1.charAt(i);
            // Put the character in the HashMap and update its frequency
            // If the character is already in the map, increment its frequency by 1
            // If it\'s not in the map, add it with a frequency of 1
            var1.put(currentChar, var1.getOrDefault(currentChar, 0) + 1);
        }
        // Iterate through each character in the magazine string
        for (int i = 0; i < magazine.length(); i++) {
            // Get the character at the current index
            char currentChar = magazine.charAt(i);
            // Check if the character is present in the HashMap
            if (var1.containsKey(currentChar)) {
                // If the character\'s frequency is more than 1, decrement its frequency by 1
                if (var1.get(currentChar) > 1) {
                    var1.put(currentChar, var1.get(currentChar) - 1);
                } else {
                    // If the character\'s frequency is 1, remove it from the HashMap
                    var1.remove(currentChar);
                }
            }
        }
        // Check if the HashMap is empty, indicating all characters in the ransomNote
        // have been found in the magazine
        return var1.isEmpty();
    }
}
