// Optimal Appraoch :
class Solution {

    public int method1(int[] nums) {
        int n = nums.length;
        if (n == 0) {
            return 0;
        }
        int var1 = 1;
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < n; i++) {
            set.add(nums[i]);
        }
        // Find the longest sequence:
        for (int it : set) {
            if (!set.contains(it - 1)) {
                int countCurr = 1;
                int x = it;
                while (set.contains(x + 1)) {
                    x++;
                    countCurr++;
                }
                var1 = Math.max(var1, countCurr);
            }
        }
        return var1;
    }
}
// Better Solution
// class Solution {
//     public int longestConsecutive(int[] nums) {
//         int n = nums.length;
//         if(n==0){
//             return 0;
//         }
//         Arrays.sort(nums);
//         int countCurr = 0;
//         int lastSmaller = Integer.MIN_VALUE;
//         int longest = 1;
//         for(int i = 0; i<n;i++){
//             if(nums[i]-1 == lastSmaller){
//                 countCurr+=1;
//                 lastSmaller = nums[i];
//             }
//             else if(nums[i]!=lastSmaller){
//                 countCurr = 1;
//                 lastSmaller = nums[i];
//             }
//             longest = Math.max(longest,countCurr);
//         }
//         return longest;
//     }
// }
// Brute Force :
// class Solution {
//      public static boolean linearSearch(int []a, int num) {
//     int n = a.length; //size of array
//         for (int i = 0; i < n; i++) {
//             if (a[i] == num)
//                 return true;
//         }
//         return false;
//      }
//     public int longestConsecutive(int[] nums) {
//         int longest = 0;
//         int n = nums.length;
//         for(int i=0;i<n;i++){
//             int x = nums[i];
//             int count = 1;
//             while(linearSearch(nums,x+1) == true){
//                 x++;
//                 count++;
//             }
//             longest = Math.max(longest,count);
//         }
//         return longest;
//     }
// }
