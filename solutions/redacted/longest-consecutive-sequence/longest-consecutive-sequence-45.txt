class Solution {

    public int method1(int[] nums) {
        // first integer is start, second is end
        HashMap<Integer, Integer> starts = new HashMap<>();
        // first integer is end, second is start
        HashMap<Integer, Integer> ends = new HashMap<>();
        Set<Integer> vs = new HashSet<>();
        int maxLength = 0;
        int startOfRemoved;
        int endOfRemoved;
        for (int i : nums) {
            if (!(vs.contains(i))) {
                if (starts.containsKey(i + 1)) {
                    if (ends.containsKey(i - 1)) {
                        startOfRemoved = ends.remove(i - 1);
                    } else {
                        startOfRemoved = i;
                    }
                    int remEnd = starts.remove(i + 1);
                    starts.put(startOfRemoved, remEnd);
                    ends.put(remEnd, startOfRemoved);
                    if (remEnd - startOfRemoved + 1 > maxLength) {
                        maxLength = remEnd - startOfRemoved + 1;
                    }
                } else if (ends.containsKey(i - 1)) {
                    if (starts.containsKey(i + 1)) {
                        endOfRemoved = starts.remove(i + 1);
                    } else {
                        endOfRemoved = i;
                    }
                    int remStart = ends.remove(i - 1);
                    ends.put(endOfRemoved, remStart);
                    starts.put(remStart, endOfRemoved);
                    if (endOfRemoved - remStart + 1 > maxLength) {
                        maxLength = endOfRemoved - remStart + 1;
                    }
                } else {
                    starts.put(i, i);
                    ends.put(i, i);
                    if (maxLength == 0) {
                        maxLength++;
                    }
                }
            }
            vs.add(i);
        }
        return maxLength;
    }
}
