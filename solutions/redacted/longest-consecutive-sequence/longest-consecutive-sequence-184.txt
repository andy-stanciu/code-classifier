class Solution {

    // HashSet
    public int method1(int[] nums) {
        HashSet<Integer> set = new HashSet<>();
        for (int num : nums) {
            set.add(num);
        }
        int total = 0;
        int curr = 0;
        for (int i = 0; i < nums.length; i++) {
            if (!set.contains(nums[i])) {
                curr = 0;
                continue;
            }
            if (set.contains(nums[i] - 1)) {
                curr = 0;
                continue;
            }
            int left = nums[i];
            while (set.contains(left)) {
                curr += 1;
                set.remove(left);
                left++;
            }
            total = Math.max(total, curr);
            curr = 0;
        }
        return total;
    }
    // O(N+N) HashMap. Store all values. Iterate through each integer and check if its the start of sequence. if yes, add +1 and check is nect digit exist and so on.
    // public int longestConsecutive(int[] nums) {
    //     HashMap<Integer, Boolean> map = new HashMap<>();
    //     for(int num : nums){
    //         map.put(num,false);
    //     }
    //     int total =0;
    //     int curr =0;
    //     for(int i  =0; i< nums.length; i++){
    //         if(map.get(nums[i]) == true){
    //             curr =0;
    //             continue;
    //         }
    //         if(map.containsKey(nums[i]-1)){
    //             curr=0;
    //             continue;
    //         }
    //         int left = nums[i];
    //         while(map.containsKey(left)){
    //             curr += 1 ;
    //             map.put(left,true);
    //             left++;
    //         }
    //         total = Math.max(total,curr);
    //         curr=0;
    //     }
    //     return total;
    // }
}
