class Solution {

    public int method1(int[] nums) {
        // If the input array is empty, return 0
        if (nums.length == 0)
            return 0;
        // Create a HashSet to store the unique elements from the input array
        HashSet<Integer> data = new HashSet<>();
        for (int num : nums) {
            data.add(num);
        }
        // Initialize the maximum count of consecutive numbers to 0
        int maxCount = 0;
        // Iterate through each number in the set
        for (int value : data) {
            // Check if the current number is the start of a new sequence
            // A number is the start of a sequence if there is no consecutive predecessor
            if (!data.contains(value - 1)) {
                // Start of the sequence
                int currentValue = value;
                // Initialize the count for the current sequence
                int count = 1;
                // Increment count for each consecutive number found
                while (data.contains(currentValue + 1)) {
                    // Move to the next consecutive number
                    currentValue++;
                    // Increment the count of the current sequence
                    count++;
                }
                // Update maxCount with the maximum length found so far
                maxCount = Math.max(maxCount, count);
            }
        }
        // Return the length of the longest consecutive sequence
        return maxCount;
    }
}
