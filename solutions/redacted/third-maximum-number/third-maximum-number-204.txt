class Solution {

    public int method1(int[] nums) {
        // Create a min-heap to store the top 3 maximum numbers
        Queue<Integer> minHeap = new PriorityQueue<>();
        // Create a set to keep track of unique numbers in the array
        Set<Integer> seen = new HashSet<>();
        // Iterate through each number in the array
        for (final int num : nums) {
            // If the number is not already seen, add it to the set and the min-heap
            if (seen.add(num)) {
                minHeap.offer(num);
                // If the min-heap size exceeds 3, remove the smallest number
                if (minHeap.size() > 3) {
                    minHeap.poll();
                }
            }
        }
        // If the min-heap size is 2, it means there are only 2 unique maximum numbers
        // In this case, return the maximum of the two numbers
        if (minHeap.size() == 2) {
            minHeap.poll();
        }
        // Return the top element of the min-heap, which is the third maximum number
        return minHeap.peek();
    }
}
