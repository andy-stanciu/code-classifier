class Solution {

    public int method1(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }
        Arrays.sort(nums);
        int var1 = 1;
        // Counting unique numbers
        for (int h = 0; h < nums.length - 1; h++) {
            if (nums[h + 1] != nums[h]) {
                // Fixed condition to count distinct elements
                var1++;
            }
        }
        int[] num = new int[var1];
        int l = 0;
        // Filling unique numbers array
        for (int i = 0; i < nums.length; i++) {
            boolean found = false;
            for (int h = 0; h < l; h++) {
                // Ensure we only check up to l
                if (nums[i] == num[h]) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                num[l] = nums[i];
                // Increment l after adding a new unique number
                l++;
            }
        }
        int max = Integer.MIN_VALUE;
        int x = 0;
        if (num.length >= 3) {
            // Adjusted to use the unique numbers array
            for (int i = 0; i < 3; i++) {
                // Reset max for each iteration
                max = Integer.MIN_VALUE;
                for (int j = 0; j < num.length; j++) {
                    if (num[j] > max) {
                        max = num[j];
                        x = j;
                    }
                }
                // Mark this max as used
                num[x] = Integer.MIN_VALUE;
            }
            return max;
        } else {
            // Reset max for the case when num length is less than 3
            max = Integer.MIN_VALUE;
            for (int i = 0; i < num.length; i++) {
                if (num[i] > max) {
                    max = num[i];
                }
            }
            return max;
        }
    }
}
