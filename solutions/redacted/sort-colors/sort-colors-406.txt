//OPTIMIZED APPROACH
// class Solution {
//     public void sortColors(int[] nums) {
//         int start = 0;
//         int mid = 0;
//         int end = nums.length - 1;
//         while (mid <= end) {
//             switch (nums[mid]) {
//                 case 0:
//                     // swap with start index
//                     swap(nums, start, mid);
//                     mid++;
//                     start++;
//                     break;
//                    // no swapping
//                 case 1:
//                     mid++;
//                     break;
//                 case 2:
//                     // swap with end index
//                     swap(nums, mid, end);
//                     end--;
//                     break;
//             }
//         }
//     }
//     private void swap(int[] nums, int i, int j) {
//         int temp = nums[i];
//         nums[i] = nums[j];
//         nums[j] = temp;
//     }
// }
//BRUTE FORCE
// class Solution {
//     public void sortColors(int[] nums) {
//         Arrays.sort(nums);
//     }
// }
//BETTER APPROACH
class Solution {

    public void method1(int[] nums) {
        int count0 = 0, count1 = 0, count2 = 0;
        // Count the number of 0s, 1s, and 2s
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                count0++;
            } else if (nums[i] == 1) {
                count1++;
            } else {
                count2++;
            }
        }
        // Update the array
        for (int i = 0; i < count0; i++) {
            nums[i] = 0;
        }
        for (int i = count0; i < count0 + count1; i++) {
            nums[i] = 1;
        }
        for (int i = count0 + count1; i < nums.length; i++) {
            nums[i] = 2;
        }
    }
}
