class Solution {

    public void method1(int[] nums) {
        // RP = Red Pointer, tracks the position for the next 0
        // WP = White Pointer, current position being evaluated
        // BP = Blue Pointer, tracks the position for the next 2
        // Initialize Red Pointer
        int RP = 0;
        // Initialize White Pointer
        int WP = 0;
        // Initialize Blue Pointer to the last index of the array
        int BP = nums.length - 1;
        // Iterate through the array until the White Pointer surpasses the Blue Pointer
        while (WP <= BP) {
            // If the current element is 0 (red)
            if (nums[WP] == 0) {
                // Swap the current element with the element at the Red Pointer
                swap(nums, WP, RP);
                // Move both the White Pointer and Red Pointer forward
                WP++;
                RP++;
            } else // If the current element is 1 (white)
            if (nums[WP] == 1) {
                // Just move the White Pointer forward, as 1 is in the correct position
                WP++;
            } else // If the current element is 2 (blue)
            {
                // nums[WP] == 2
                // Swap the current element with the element at the Blue Pointer
                swap(nums, WP, BP);
                // Move the Blue Pointer backward, as we have placed a 2 in its correct position
                BP--;
                // Do not increment WP here; need to check the newly swapped value at WP in the next iteration
            }
        }
    }

    // Helper method to swap two elements in the array
    private void swap(int[] nums, int i, int j) {
        // Store the value at index i in a temporary variable
        int temp = nums[i];
        // Assign the value at index j to index i
        nums[i] = nums[j];
        // Assign the stored value to index j
        nums[j] = temp;
    }
}
