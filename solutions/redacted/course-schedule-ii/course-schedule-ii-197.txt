class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        int[] inDegree = new int[param1];
        for (int[] prerequisite : prerequisites) {
            graph.computeIfAbsent(prerequisite[1], k -> new ArrayList<>()).add(prerequisite[0]);
            inDegree[prerequisite[0]] += 1;
        }
        int[] result = new int[param1];
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (inDegree[i] == 0)
                queue.offer(i);
        }
        int var1 = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int node = queue.poll();
                result[var1++] = node;
                if (!graph.containsKey(node))
                    continue;
                for (int child : graph.get(node)) {
                    inDegree[child] -= 1;
                    if (inDegree[child] == 0)
                        queue.add(child);
                }
            }
        }
        if (var1 == param1)
            return result;
        return new int[0];
    }
}
