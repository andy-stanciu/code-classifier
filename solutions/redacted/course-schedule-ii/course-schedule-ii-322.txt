class Solution {

    public int[] findOrder(int param1, int[][] graph) {
        int[] indegree = new int[param1];
        List<List<Integer>> li = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            li.add(new ArrayList<>());
        }
        for (int i = 0; i < graph.length; i++) {
            li.get(graph[i][1]).add(graph[i][0]);
            indegree[graph[i][0]]++;
        }
        List<Integer> var1 = new ArrayList<>();
        Queue<Integer> q = new ArrayDeque<>();
        for (int i = 0; i < param1; i++) if (indegree[i] == 0)
            q.add(i);
        while (!q.isEmpty()) {
            int curr = q.poll();
            var1.add(curr);
            for (int node : li.get(curr)) {
                indegree[node]--;
                if (indegree[node] == 0) {
                    q.add(node);
                }
            }
        }
        if (var1.size() != param1)
            return new int[0];
        else
            return var1.stream().mapToInt(i -> i).toArray();
    }
}
