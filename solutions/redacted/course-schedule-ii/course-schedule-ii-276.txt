// Topological Sort
class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList<>();
        Queue<Integer> q = new LinkedList<>();
        int[] indegree = new int[param1];
        int[] res = new int[param1];
        int index = 0;
        // creating adjacency list
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
            indegree[prerequisites[i][0]]++;
        }
        // creating indegree list
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0)
                q.add(i);
        }
        while (!q.isEmpty()) {
            res[index] = q.remove();
            for (int i : adj.get(res[index])) {
                indegree[i]--;
                if (indegree[i] == 0)
                    q.add(i);
            }
            index++;
        }
        return index == param1 ? res : new int[0];
    }
}
