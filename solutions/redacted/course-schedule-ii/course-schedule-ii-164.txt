class Solution {

    public boolean dfsCheck(int node, ArrayList<ArrayList<Integer>> adj, int[] visited, int[] pathVisited, Stack<Integer> stack) {
        visited[node] = 1;
        pathVisited[node] = 1;
        for (int neighbor : adj.get(node)) {
            if (visited[neighbor] == 0) {
                if (dfsCheck(neighbor, adj, visited, pathVisited, stack)) {
                    return true;
                }
            } else if (pathVisited[neighbor] == 1) {
                return true;
            }
        }
        pathVisited[node] = 0;
        stack.push(node);
        return false;
    }

    public int[] findOrder(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] prerequisite : prerequisites) {
            adj.get(prerequisite[1]).add(prerequisite[0]);
        }
        int[] visited = new int[param1];
        int[] pathVisited = new int[param1];
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < param1; i++) {
            if (visited[i] == 0) {
                if (dfsCheck(i, adj, visited, pathVisited, stack)) {
                    // Cycle detected, return empty array
                    return new int[0];
                }
            }
        }
        int[] order = new int[param1];
        int index = 0;
        while (!stack.isEmpty()) {
            order[index++] = stack.pop();
        }
        return order;
    }
}
