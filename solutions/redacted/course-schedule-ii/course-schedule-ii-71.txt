class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        Map<Integer, List<Integer>> children = new HashMap<>();
        Set<Integer> visited = new HashSet<>();
        Stack<Integer> res = new Stack<>();
        for (int[] oneItem : prerequisites) {
            List<Integer> childrenForOneItem = children.getOrDefault(oneItem[1], new ArrayList<>());
            childrenForOneItem.add(oneItem[0]);
            children.put(oneItem[1], childrenForOneItem);
        }
        for (int i = 0; i < param1; i++) {
            if (!visited.contains(i)) {
                Set<Integer> parent = new HashSet<>();
                boolean dfsRes = dfs(visited, children, i, res, parent);
                if (!dfsRes) {
                    return new int[0];
                }
            }
        }
        int[] retVal = new int[res.size()];
        int k = 0;
        while (!res.isEmpty()) {
            retVal[k] = res.pop();
            k++;
        }
        return retVal;
    }

    private boolean dfs(Set<Integer> visited, Map<Integer, List<Integer>> children, int param2, Stack<Integer> res, Set<Integer> parent) {
        if (parent.contains(param2)) {
            return false;
        }
        parent.add(param2);
        if (visited.contains(param2)) {
            parent.remove(param2);
            return true;
        }
        visited.add(param2);
        List<Integer> var1 = children.getOrDefault(param2, new ArrayList<>());
        for (int oneChild : var1) {
            boolean retVal = dfs(visited, children, oneChild, res, parent);
            if (!retVal) {
                return false;
            }
        }
        res.push(param2);
        parent.remove(param2);
        return true;
    }
}
