class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        //represent given array in Adjacency List
        ArrayList<ArrayList<Integer>> al = new ArrayList<>();
        for (int i = 0; i < param1; i++) al.add(new ArrayList<Integer>());
        for (int i = 0; i < prerequisites.length; i++) al.get(prerequisites[i][1]).add(prerequisites[i][0]);
        //System.out.println(al);
        /**
         * *   Using Kahn; Algorith        ***
         */
        //storing indegree
        int[] indegree = new int[param1];
        for (int i = 0; i < param1; i++) {
            for (int e : al.get(i)) {
                indegree[e]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int v = 0; v < indegree.length; v++) {
            if (indegree[v] == 0)
                q.add(v);
        }
        int[] res = new int[param1];
        int indx = 0;
        while (q.isEmpty() == false) {
            int u = q.poll();
            //add it to result
            res[indx++] = u;
            for (int v : al.get(u)) {
                indegree[v]--;
                if (indegree[v] == 0)
                    q.add(v);
            }
        }
        //logic for checking cycle in directed graph
        if (//if indx != numCourse then cycle
        indx == param1)
            return res;
        int[] noRes = {};
        return noRes;
        /**
         *  End of Kahn\'s Algo\'
         */
    }
}
