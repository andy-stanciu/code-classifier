class Solution {

    ArrayList<Integer>[] graph;

    int v, e;

    public void addedge(int a, int b) {
        graph[b].add(a);
    }

    public int[] findOrder(int param1, int[][] prerequisites) {
        v = param1;
        e = prerequisites.length;
        graph = new ArrayList[v];
        for (int i = 0; i < v; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            addedge(prerequisites[i][0], prerequisites[i][1]);
        }
        int[] indegree = new int[v];
        for (int i = 0; i < prerequisites.length; i++) {
            indegree[prerequisites[i][0]]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < v; i++) {
            if (indegree[i] == 0)
                q.add(i);
        }
        if (q.size() == 0) {
            int[] arr = {};
            return arr;
        }
        int[] ans = new int[v];
        int index = 0;
        while (q.size() != 0) {
            int a = q.remove();
            ans[index++] = a;
            for (var x : graph[a]) {
                indegree[x]--;
                if (indegree[x] == 0)
                    q.add(x);
            }
        }
        if (index != v) {
            int[] arr = {};
            return arr;
        }
        return ans;
    }
}
