class Solution {

    public int[] findOrder(int A, int[][] B) {
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i <= A; i++) {
            adjList.add(new ArrayList<>());
        }
        for (int i = 0; i < B.length; i++) {
            adjList.get(B[i][1]).add(B[i][0]);
        }
        int[] indegree = new int[A];
        //fill indegree
        for (int i = 0; i < A; i++) {
            for (int neighbor : adjList.get(i)) {
                indegree[neighbor]++;
            }
        }
        int[] ans = new int[A];
        //creating minHeap and insert all the nodes in minHeap which have indegree is equal to zero
        Queue<Integer> minHeap = new LinkedList<>();
        for (int i = 0; i < A; i++) {
            if (indegree[i] == 0)
                minHeap.add(i);
        }
        int index = 0;
        int cycle = 0;
        while (!minHeap.isEmpty()) {
            int temp = minHeap.poll();
            ans[index++] = temp;
            for (int neighbor : adjList.get(temp)) {
                indegree[neighbor]--;
                if (indegree[neighbor] == 0) {
                    minHeap.add(neighbor);
                }
            }
        }
        if (index == A)
            return ans;
        int[] arr = {};
        return arr;
    }
}
