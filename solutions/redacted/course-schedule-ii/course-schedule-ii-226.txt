class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        List<ArrayList<Integer>> cources = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            cources.add(new ArrayList<>());
        }
        for (int[] prerequisite : prerequisites) {
            cources.get(prerequisite[0]).add(prerequisite[1]);
        }
        List<Integer> result = new ArrayList<>();
        int[] visited = new int[param1];
        for (int i = 0; i < param1; i++) {
            if (visited[i] == 0 && !dfs(i, cources, result, visited)) {
                return new int[0];
            }
        }
        return result.stream().mapToInt(Integer::intValue).toArray();
    }

    private boolean dfs(int i, List<ArrayList<Integer>> cources, List<Integer> result, int[] visited) {
        visited[i] = 1;
        for (int p : cources.get(i)) {
            if (visited[p] == 1) {
                return false;
            }
            if (visited[p] == 0 && !dfs(p, cources, result, visited)) {
                return false;
            }
        }
        visited[i] = 2;
        result.add(i);
        return true;
    }
}
