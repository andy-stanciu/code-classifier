class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        ArrayList<Integer> var1 = new ArrayList<Integer>();
        boolean[] visited = new boolean[param1];
        boolean[] visiting = new boolean[param1];
        ArrayList<Integer>[] adj = new ArrayList[param1];
        for (int i = 0; i < param1; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj[prerequisites[i][0]].add(prerequisites[i][1]);
        }
        for (int i = 0; i < param1; i++) {
            if (!visited[i]) {
                if (!DFS(i, adj, var1, visiting, visited))
                    return new int[0];
            }
        }
        int[] ans = new int[var1.size()];
        for (int i = 0; i < var1.size(); i++) ans[i] = var1.get(i);
        return ans;
    }

    public boolean DFS(int param2, ArrayList<Integer>[] adj, ArrayList<Integer> var1, boolean[] visiting, boolean[] visited) {
        if (visiting[param2])
            return false;
        visiting[param2] = true;
        for (int preReq : adj[param2]) {
            if (!visited[preReq]) {
                if (!DFS(preReq, adj, var1, visiting, visited))
                    return false;
            }
        }
        visited[param2] = true;
        visiting[param2] = false;
        var1.add(param2);
        return true;
    }
}
