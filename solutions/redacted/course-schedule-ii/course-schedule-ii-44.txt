class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        // CREATING DIRECTED GRAPH AS ADJACENECY LIST
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        // CREATING INDEGREE ARRAY
        int[] indegree = new int[param1];
        for (int i = 0; i < param1; i++) {
            for (int j = 0; j < adj.get(i).size(); j++) {
                indegree[adj.get(i).get(j)]++;
            }
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 00; i < param1; i++) {
            if (indegree[i] == 0) {
                queue.offer(i);
            }
        }
        int[] topoSort = new int[param1];
        int i = -1;
        while (!queue.isEmpty()) {
            int node = queue.poll();
            ArrayList<Integer> neighbors = adj.get(node);
            for (int it : neighbors) {
                indegree[it]--;
                if (indegree[it] == 0) {
                    queue.offer(it);
                }
            }
            topoSort[++i] = node;
        }
        if (i < param1 - 1) {
            return new int[0];
        } else {
            return topoSort;
        }
    }
}
