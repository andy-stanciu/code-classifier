public class Solution {

    static class Edge {

        int src;

        int dest;

        public Edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }

    private static boolean isCyclic(ArrayList<Edge>[] graph, int v, boolean[] visited, boolean[] recStack) {
        if (!visited[v]) {
            visited[v] = true;
            recStack[v] = true;
            for (Edge e : graph[v]) {
                if (!visited[e.dest] && isCyclic(graph, e.dest, visited, recStack)) {
                    return true;
                } else if (recStack[e.dest]) {
                    return true;
                }
            }
        }
        recStack[v] = false;
        return false;
    }

    private static boolean hasCycle(ArrayList<Edge>[] graph) {
        int var1 = graph.length;
        boolean[] visited = new boolean[var1];
        boolean[] recStack = new boolean[var1];
        for (int i = 0; i < var1; i++) {
            if (isCyclic(graph, i, visited, recStack)) {
                return true;
            }
        }
        return false;
    }

    private static void calcIndegree(ArrayList<Edge>[] graph, int[] indegree) {
        for (int i = 0; i < graph.length; i++) {
            int v = i;
            for (int j = 0; j < graph[v].size(); j++) {
                Edge e = graph[v].get(j);
                indegree[e.dest]++;
            }
        }
    }

    public static int[] topSorter(ArrayList<Edge>[] graph) {
        if (hasCycle(graph)) {
            // There is a cycle, return an empty array
            return new int[0];
        }
        int[] res = new int[graph.length];
        int[] indegree = new int[graph.length];
        calcIndegree(graph, indegree);
        Queue<Integer> q = new LinkedList<>();
        int index = 0;
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        while (!q.isEmpty()) {
            int curr = q.remove();
            res[index++] = curr;
            for (int i = 0; i < graph[curr].size(); i++) {
                Edge e = graph[curr].get(i);
                indegree[e.dest]--;
                if (indegree[e.dest] == 0) {
                    q.add(e.dest);
                }
            }
        }
        System.gc();
        return res;
    }

    public static int[] findOrder(int var1, int[][] prerequisites) {
        ArrayList<Edge>[] graph = new ArrayList[var1];
        for (int i = 0; i < var1; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            Edge e = new Edge(prerequisites[i][1], prerequisites[i][0]);
            graph[prerequisites[i][1]].add(e);
        }
        return topSorter(graph);
    }

    public static void main(String[] args) {
        int var1 = 3;
        int[][] prerequisites = { { 0, 2 }, { 1, 2 }, { 2, 0 } };
        int[] result = findOrder(var1, prerequisites);
        for (int i = 0; i < result.length; i++) {
            System.out.println(result[i]);
        }
    }
}
