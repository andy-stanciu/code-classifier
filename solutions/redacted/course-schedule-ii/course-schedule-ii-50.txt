class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        int[] degree = new int[param1];
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adjList.add(i, new ArrayList<>());
        }
        for (int[] pres : prerequisites) {
            int var1 = pres[1];
            int pre = pres[0];
            adjList.get(pre).add(var1);
            // increase degree on course
            degree[var1]++;
        }
        // Initialize and process the queue
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (degree[i] == 0) {
                queue.offer(i);
            }
        }
        ArrayList<Integer> order = new ArrayList<>();
        // loop the queue
        while (!queue.isEmpty()) {
            int current = queue.poll();
            order.add(current);
            // visit the neighbor and adjust the next set of nodes
            for (int nei : adjList.get(current)) {
                degree[nei]--;
                if (degree[nei] == 0) {
                    queue.offer(nei);
                }
            }
        }
        // If the size of the order list is not equal to the number of courses,
        // it means there\'s a cycle and it\'s not possible to finish all courses
        if (order.size() != param1) {
            return new int[0];
        } else {
            // Convert the order list to an array
            int[] result = new int[order.size()];
            for (int i = 0; i < order.size(); i++) {
                result[i] = order.get(order.size() - i - 1);
            }
            return result;
        }
    }
}
