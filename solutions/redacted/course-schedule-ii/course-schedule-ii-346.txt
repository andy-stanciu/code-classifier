class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        int[] order = new int[param1];
        int[] indegree = new int[param1];
        HashMap<Integer, List<Integer>> nodes = new HashMap<>();
        for (var p : prerequisites) {
            int from = p[1];
            int to = p[0];
            List<Integer> inNodes = nodes.getOrDefault(from, new ArrayList<Integer>());
            inNodes.add(to);
            nodes.put(from, inNodes);
            indegree[to]++;
        }
        Stack<Integer> var1 = new Stack<Integer>();
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0)
                var1.push(i);
        }
        int index = 0;
        while (!var1.isEmpty()) {
            int var2 = var1.pop();
            order[index++] = var2;
            if (nodes.get(var2) == null)
                continue;
            for (int c : nodes.get(var2)) {
                if (--indegree[c] == 0) {
                    var1.push(c);
                }
            }
        }
        return index == param1 ? order : new int[0];
    }
}
