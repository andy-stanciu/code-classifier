class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        List<List<Integer>> graph = new ArrayList<>();
        int[] indegree = new int[param1];
        for (int i = 0; i < param1; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] prereq : prerequisites) {
            int var1 = prereq[0];
            int var2 = prereq[1];
            graph.get(var2).add(var1);
            indegree[var1]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0) {
                queue.add(i);
            }
        }
        //topological sort
        List<Integer> list = new ArrayList<>();
        while (!queue.isEmpty()) {
            int var1 = queue.poll();
            list.add(var1);
            for (int neighbor : graph.get(var1)) {
                indegree[neighbor]--;
                if (indegree[neighbor] == 0) {
                    queue.add(neighbor);
                }
            }
        }
        if (list.size() != param1) {
            return new int[0];
        }
        //conversion of list into array.
        int[] res = new int[param1];
        for (int i = 0; i < param1; i++) {
            res[i] = list.get(i);
        }
        return res;
    }
}
