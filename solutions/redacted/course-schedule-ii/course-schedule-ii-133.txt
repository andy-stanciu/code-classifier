class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        if (param1 == 0)
            return null;
        int res[] = new int[param1], indegree[] = new int[param1], index = 0;
        // getting incoming node count
        for (int i = 0; i < prerequisites.length; i++) {
            // [1,0]... indegree[1]+=1
            indegree[prerequisites[i][0]]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0) {
                res[index++] = i;
                queue.offer(i);
            }
        }
        while (!queue.isEmpty()) {
            int prerequisite = queue.poll();
            for (int i = 0; i < prerequisites.length; i++) {
                if (prerequisites[i][1] == prerequisite) {
                    indegree[prerequisites[i][0]]--;
                    if (indegree[prerequisites[i][0]] == 0) {
                        res[index++] = prerequisites[i][0];
                        queue.offer(prerequisites[i][0]);
                    }
                }
            }
        }
        return index == param1 ? res : new int[0];
    }
}
