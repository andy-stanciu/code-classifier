class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        int[] inorder = new int[param1];
        List<Integer>[] edges = new ArrayList[param1];
        int[] res = new int[param1];
        int ind = 0;
        for (int i = 0; i < param1; i++) edges[i] = new ArrayList<>();
        for (int i = 0; i < prerequisites.length; i++) {
            int src = prerequisites[i][1];
            int dst = prerequisites[i][0];
            edges[src].add(dst);
            inorder[dst]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < param1; i++) if (inorder[i] == 0)
            q.offer(i);
        while (!q.isEmpty()) {
            int src = q.remove();
            res[ind++] = src;
            for (int i = 0; i < edges[src].size(); i++) {
                int dst = edges[src].get(i);
                inorder[dst]--;
                if (inorder[dst] == 0)
                    q.offer(dst);
            }
        }
        if (ind != param1)
            return new int[0];
        return res;
    }
}
