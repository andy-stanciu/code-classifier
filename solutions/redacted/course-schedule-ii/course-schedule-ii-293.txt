class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] neighbours : prerequisites) {
            adj.get(neighbours[0]).add(neighbours[1]);
        }
        int[] dependencies = new int[param1];
        Queue<Integer> q = new LinkedList<>();
        int count = param1 - 1;
        int[] result = new int[param1];
        for (int[] rel : prerequisites) {
            dependencies[rel[1]]++;
        }
        for (int i = 0; i < param1; i++) {
            if (dependencies[i] == 0) {
                q.offer(i);
            }
        }
        while (!q.isEmpty()) {
            int node = q.poll();
            for (int n : adj.get(node)) {
                if (--dependencies[n] == 0)
                    q.add(n);
            }
            result[count--] = node;
        }
        if (count != -1)
            return new int[] {};
        return result;
    }
}
