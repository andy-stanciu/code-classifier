class Solution {

    public int[] findOrder(int param1, int[][] prereq) {
        int n = prereq.length;
        int[] indegree = new int[param1];
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            graph.add(new ArrayList<>());
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int[] pair : prereq) {
            indegree[pair[0]]++;
            graph.get(pair[1]).add(pair[0]);
        }
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                queue.add(i);
            }
        }
        int var1 = 0;
        int[] var2 = new int[param1];
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int var3 = queue.poll();
                var2[var1++] = var3;
                List<Integer> var4 = graph.get(var3);
                for (int var5 : var4) {
                    indegree[var5]--;
                    if (indegree[var5] == 0) {
                        queue.add(var5);
                    }
                }
            }
        }
        return var1 != param1 ? new int[0] : var2;
    }
}
