class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> al = new ArrayList<>();
        int[] ans = new int[param1];
        for (int i = 0; i < param1; i++) {
            al.add(new ArrayList<>());
        }
        for (int j = 0; j < prerequisites.length; j++) {
            al.get(prerequisites[j][1]).add(prerequisites[j][0]);
        }
        Stack<Integer> st = new Stack<>();
        if (isCycle(param1, al, st) == false) {
            for (int h = 0; h < param1; h++) {
                ans[h] = st.pop();
            }
            return ans;
        } else {
            return new int[] {};
        }
    }

    public static boolean isCycle(int n, ArrayList<ArrayList<Integer>> al, Stack<Integer> st) {
        int[] vis = new int[n];
        Arrays.fill(vis, 0);
        int[] pathVis = new int[n];
        Arrays.fill(pathVis, 0);
        for (int m = 0; m < n; m++) {
            if (vis[m] == 0) {
                vis[m] = 1;
                pathVis[m] = 1;
                if (dfs(vis, pathVis, m, al, st) == true) {
                    return true;
                }
                ;
            }
        }
        return false;
    }

    public static boolean dfs(int[] vis, int[] pathVis, int node, ArrayList<ArrayList<Integer>> al, Stack<Integer> st) {
        vis[node] = 1;
        pathVis[node] = 1;
        for (int k : al.get(node)) {
            if (vis[k] == 0) {
                if (dfs(vis, pathVis, k, al, st) == true) {
                    return true;
                }
            } else if (pathVis[k] == 1) {
                return true;
            }
        }
        st.add(node);
        pathVis[node] = 0;
        return false;
    }
}
