class Solution {

    boolean dfs(int curr, boolean[] vis, boolean[] stack, Stack<Integer> s, List<List<Integer>> l) {
        if (stack[curr]) {
            // Cycle detected
            return true;
        }
        if (vis[curr]) {
            // Already visited, no cycle
            return false;
        }
        vis[curr] = true;
        stack[curr] = true;
        for (int n : l.get(curr)) {
            if (dfs(n, vis, stack, s, l)) {
                // Cycle detected in the subtree
                return true;
            }
        }
        stack[curr] = false;
        s.add(curr);
        // No cycle detected in the subtree
        return false;
    }

    public int[] findOrder(int param1, int[][] pre) {
        List<List<Integer>> l = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            l.add(new ArrayList<>());
        }
        for (int i = 0; i < pre.length; i++) {
            l.get(pre[i][1]).add(pre[i][0]);
        }
        boolean[] vis = new boolean[param1];
        boolean[] stack = new boolean[param1];
        Stack<Integer> s = new Stack<>();
        for (int i = 0; i < l.size(); i++) {
            if (!vis[i]) {
                if (dfs(i, vis, stack, s, l)) {
                    // Cycle detected in the graph
                    return new int[0];
                }
            }
        }
        int[] a = new int[param1];
        int index = 0;
        while (!s.isEmpty()) {
            a[index++] = s.pop();
        }
        return a;
    }
}
