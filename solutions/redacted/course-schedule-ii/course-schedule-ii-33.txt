class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        // Step 1: Initialize the graph and indegree array
        List<List<Integer>> graph = new ArrayList<>();
        int[] indegree = new int[param1];
        // Initialize graph with empty lists
        for (int i = 0; i < param1; i++) {
            graph.add(new ArrayList<>());
        }
        // Build the graph and populate indegree array
        for (int[] prereq : prerequisites) {
            int var1 = prereq[0];
            int prerequisite = prereq[1];
            graph.get(prerequisite).add(var1);
            indegree[var1]++;
        }
        // Step 2: Initialize queue with courses having zero prerequisites
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0) {
                queue.offer(i);
            }
        }
        // Step 3: Perform topological sort
        int[] order = new int[param1];
        int index = 0;
        while (!queue.isEmpty()) {
            int var1 = queue.poll();
            order[index++] = var1;
            // Reduce indegree of each neighbor
            for (int neighbor : graph.get(var1)) {
                indegree[neighbor]--;
                // If indegree becomes zero, add it to the queue
                if (indegree[neighbor] == 0) {
                    queue.offer(neighbor);
                }
            }
        }
        // Step 4: Check if topological sort includes all courses
        if (index == param1) {
            return order;
        } else {
            // Cycle detected, no valid order
            return new int[0];
        }
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        // Test case 1
        int var2 = 2;
        int[][] prerequisites1 = { { 1, 0 } };
        System.out.println("Output for Test Case 1: " + Arrays.toString(solution.findOrder(var2, prerequisites1)));
        // Expected output: [0, 1]
        // Test case 2
        int var3 = 4;
        int[][] prerequisites2 = { { 1, 0 }, { 2, 0 }, { 3, 1 }, { 3, 2 } };
        System.out.println("Output for Test Case 2: " + Arrays.toString(solution.findOrder(var3, prerequisites2)));
        // Expected output: [0, 1, 2, 3] or [0, 2, 1, 3]
        // Test case 3
        int var4 = 1;
        int[][] prerequisites3 = {};
        System.out.println("Output for Test Case 3: " + Arrays.toString(solution.findOrder(var4, prerequisites3)));
        // Expected output: [0]
        // Test case 4: Impossible case with a cycle
        int var5 = 2;
        int[][] prerequisites4 = { { 1, 0 }, { 0, 1 } };
        System.out.println("Output for Test Case 4: " + Arrays.toString(solution.findOrder(var5, prerequisites4)));
        // Expected output: []
    }
}
