class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < param1; i++) {
            map.put(i, new ArrayList<>());
        }
        for (int[] pair : prerequisites) {
            map.get(pair[1]).add(pair[0]);
        }
        int[] visited = new int[param1];
        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            if (!topoSort(res, map, visited, i))
                return new int[0];
        }
        int[] result = new int[param1];
        for (int i = 0; i < param1; i++) {
            result[i] = res.get(param1 - i - 1);
        }
        return result;
    }

    private boolean topoSort(List<Integer> res, Map<Integer, List<Integer>> graph, int[] visited, int i) {
        int visit = visited[i];
        if (visit == 2)
            return true;
        if (visit == 1)
            return false;
        visited[i] = 1;
        for (int j : graph.get(i)) {
            if (!topoSort(res, graph, visited, j))
                return false;
        }
        visited[i] = 2;
        res.add(i);
        return true;
    }
}
