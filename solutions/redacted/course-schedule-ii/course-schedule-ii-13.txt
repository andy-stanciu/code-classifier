class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i <= param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        Queue<Integer> q = new LinkedList<>();
        int[] indegree = new int[param1];
        for (int i = 0; i < param1; i++) {
            for (int e : adj.get(i)) {
                indegree[e]++;
            }
        }
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        int[] ans = new int[param1];
        int i = 0;
        while (!q.isEmpty()) {
            int node = q.peek();
            q.poll();
            ans[i++] = node;
            for (int e : adj.get(node)) {
                indegree[e]--;
                if (indegree[e] == 0)
                    q.add(e);
            }
        }
        if (i == param1)
            return ans;
        int[] arr = {};
        return arr;
    }
}
