class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        if (param1 == 0) {
            return new int[0];
        }
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            graph.add(new ArrayList<>());
        }
        int[] inDegree = new int[param1];
        int[] result = new int[param1];
        int var1 = 0;
        for (int[] edges : prerequisites) {
            graph.get(edges[1]).add(edges[0]);
            inDegree[edges[0]]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (inDegree[i] == 0) {
                q.offer(i);
            }
        }
        while (!q.isEmpty()) {
            int ver = q.poll();
            result[var1] = ver;
            var1++;
            for (int cou : graph.get(ver)) {
                inDegree[cou]--;
                if (inDegree[cou] == 0) {
                    q.offer(cou);
                }
            }
        }
        if (var1 == param1) {
            return result;
        }
        return new int[0];
    }
}
