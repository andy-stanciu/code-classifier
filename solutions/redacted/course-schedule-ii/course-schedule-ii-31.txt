class Solution {

    public int[] findOrder(int n, int[][] p) {
        int[] d = new int[n];
        List<List<Integer>> g = new ArrayList<>();
        for (int i = 0; i < n; i++) g.add(new ArrayList<Integer>());
        for (int i = 0; i < p.length; i++) {
            d[p[i][0]]++;
            g.get(p[i][1]).add(p[i][0]);
        }
        Queue<Integer> q = new LinkedList<>();
        boolean[] vis = new boolean[n];
        for (int i = 0; i < d.length; i++) {
            if (d[i] == 0) {
                q.add(i);
            }
        }
        int c = 0;
        int[] ans = new int[n];
        int i = 0;
        while (!q.isEmpty()) {
            c++;
            int a = q.poll();
            ans[i] = a;
            i++;
            for (int x : g.get(a)) {
                d[x]--;
                if (d[x] == 0)
                    q.add(x);
            }
        }
        if (c == n)
            return ans;
        int[] ans1 = new int[0];
        return ans1;
    }
}
