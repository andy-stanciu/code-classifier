class Solution {

    public static int[] topologicalSort(int param1, int[][] prerequisites, ArrayList<ArrayList<Integer>> arr, int[] inDegree) {
        int count = 0;
        Queue<Integer> pq = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (inDegree[i] == 0) {
                pq.add(i);
            }
        }
        int[] array = new int[param1];
        int k = 0;
        while (!pq.isEmpty()) {
            int a = pq.poll();
            array[k++] = a;
            count++;
            for (Integer m : arr.get(a)) {
                inDegree[m]--;
                if (inDegree[m] == 0) {
                    pq.add(m);
                }
            }
        }
        if (count != param1) {
            return new int[0];
        }
        return array;
    }

    public int[] findOrder(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> arr = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            arr.add(new ArrayList<>());
        }
        int[] inDegree = new int[param1];
        for (int[] vector : prerequisites) {
            inDegree[vector[0]]++;
            arr.get(vector[1]).add(vector[0]);
        }
        return topologicalSort(param1, prerequisites, arr, inDegree);
    }
}
