class Solution {

    int pos;

    List<Integer>[] adj;

    int[] result;

    boolean[] visitedInCycle;

    boolean[] visited;

    public int[] findOrder(int param1, int[][] prerequisites) {
        adj = new List[param1];
        visitedInCycle = new boolean[param1];
        visited = new boolean[param1];
        result = new int[param1];
        for (int i = 0; i < adj.length; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            int[] pre = prerequisites[i];
            adj[pre[0]].add(pre[1]);
        }
        pos = 0;
        for (int i = 0; i < param1; i++) {
            if (isInCycle(i))
                return new int[] {};
        }
        return result;
    }

    private boolean isInCycle(int src) {
        if (visitedInCycle[src])
            return true;
        if (visited[src])
            return false;
        visitedInCycle[src] = true;
        for (Integer pre : adj[src]) {
            if (isInCycle(pre))
                return true;
        }
        result[pos] = src;
        pos++;
        visited[src] = true;
        visitedInCycle[src] = false;
        return false;
    }
}
