class Solution {

    public int[] findOrder(int n, int[][] p) {
        int[] top_sort = new int[n];
        int[] indegree = new int[n];
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        //form new arraylist n times..
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < p.length; i++) {
            adj.get(p[i][1]).add(p[i][0]);
        }
        //calculate indegree
        for (int i = 0; i < adj.size(); i++) {
            for (Integer it : adj.get(i)) {
                indegree[it]++;
            }
        }
        //bfs using topological sorting
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0)
                q.add(i);
        }
        int c = 0;
        while (!q.isEmpty()) {
            Integer curr = q.poll();
            top_sort[c++] = curr;
            for (Integer i : adj.get(curr)) {
                indegree[i]--;
                if (indegree[i] == 0)
                    q.add(i);
            }
        }
        if (c == n)
            return top_sort;
        //empty array
        int[] arr = new int[0];
        return arr;
    }
}
