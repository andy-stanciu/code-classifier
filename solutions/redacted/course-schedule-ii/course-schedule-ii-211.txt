class Solution {

    public boolean dfs(ArrayList<ArrayList<Integer>> graph, boolean[] visited, boolean[] path, int curr, Stack<Integer> stack) {
        visited[curr] = true;
        path[curr] = true;
        for (int i = 0; i < graph.get(curr).size(); i++) {
            int next = graph.get(curr).get(i);
            if (!visited[next]) {
                if (dfs(graph, visited, path, next, stack))
                    return true;
            } else if (path[next])
                return true;
        }
        path[curr] = false;
        stack.push(curr);
        return false;
    }

    public int[] findOrder(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        boolean[] visited = new boolean[param1];
        boolean[] path = new boolean[param1];
        Stack<Integer> stack = new Stack<>();
        int[] ans = new int[param1];
        for (int i = 0; i < param1; i++) {
            graph.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            graph.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        for (int i = 0; i < param1; i++) {
            if (!visited[i]) {
                if (dfs(graph, visited, path, i, stack))
                    return new int[0];
            }
        }
        int i = 0;
        while (!stack.isEmpty()) ans[i++] = stack.pop();
        return ans;
    }
}
