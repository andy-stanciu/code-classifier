class Solution {

    static class Edge {

        int dest;

        int src;

        public Edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }

    public static boolean cycle(ArrayList<Edge>[] graph) {
        boolean[] vis = new boolean[graph.length];
        boolean[] stack = new boolean[graph.length];
        for (int i = 0; i < graph.length; i++) {
            if (!vis[i]) {
                if (cycleutil(graph, stack, vis, i))
                    return true;
            }
        }
        return false;
    }

    public static boolean cycleutil(ArrayList<Edge>[] graph, boolean[] stack, boolean[] vis, int cur) {
        vis[cur] = true;
        stack[cur] = true;
        for (int i = 0; i < graph[cur].size(); i++) {
            Edge e = graph[cur].get(i);
            if (stack[e.dest])
                return true;
            else if (cycleutil(graph, stack, vis, e.dest))
                return true;
        }
        stack[cur] = false;
        return false;
    }

    public static int[] findOrder(int param1, int[][] prerequisites) {
        int num = param1;
        int[] top = new int[num];
        int k = 0;
        int l = prerequisites.length;
        ArrayList<Edge>[] graph = new ArrayList[num];
        for (int i = 0; i < num; i++) graph[i] = new ArrayList<>();
        for (int i = 0; i < l; i++) {
            int src = prerequisites[i][1];
            int dest = prerequisites[i][0];
            graph[src].add(new Edge(src, dest));
        }
        if (cycle(graph))
            return new int[0];
        else {
            int[] indeg = new int[num];
            for (int i = 0; i < graph.length; i++) {
                for (int j = 0; j < graph[i].size(); j++) {
                    Edge e = graph[i].get(j);
                    indeg[e.dest]++;
                }
            }
            // indeg(graph, indeg);
            Queue<Integer> q = new LinkedList<>();
            for (int i = 0; i < num; i++) {
                if (indeg[i] == 0)
                    q.add(i);
            }
            while (!q.isEmpty()) {
                int cur = q.remove();
                top[k] = cur;
                k++;
                for (int i = 0; i < graph[cur].size(); i++) {
                    Edge e = graph[cur].get(i);
                    indeg[e.dest]--;
                    if (indeg[e.dest] == 0)
                        q.add(e.dest);
                }
            }
            return top;
        }
    }
}
