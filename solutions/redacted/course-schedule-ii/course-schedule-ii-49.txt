class Solution {

    class Edge {

        int src;

        int dest;

        int wt;

        public Edge(int s, int d, int w) {
            this.src = s;
            this.dest = d;
            this.wt = w;
        }
    }

    public int[] method1(ArrayList<Edge>[] graph) {
        ArrayList<Integer> arr = new ArrayList<>();
        boolean[] vis = new boolean[graph.length];
        boolean[] inStack = new boolean[graph.length];
        Stack<Integer> st = new Stack<>();
        for (int i = 0; i < graph.length; i++) {
            if (!vis[i]) {
                if (!method2(graph, i, vis, inStack, st)) {
                    return new int[0];
                }
            }
        }
        while (!st.isEmpty()) {
            arr.add(st.pop());
        }
        int[] result = new int[arr.size()];
        for (int i = 0; i < arr.size(); i++) {
            result[i] = arr.get(i);
        }
        return result;
    }

    public boolean method2(ArrayList<Edge>[] graph, int curr, boolean[] vis, boolean[] inStack, Stack<Integer> st) {
        vis[curr] = true;
        inStack[curr] = true;
        for (int i = 0; i < graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);
            if (!vis[e.dest]) {
                if (!method2(graph, e.dest, vis, inStack, st)) {
                    return false;
                }
            } else if (inStack[e.dest]) {
                return false;
            }
        }
        inStack[curr] = false;
        st.push(curr);
        return true;
    }

    public int[] findOrder(int param1, int[][] prerequisites) {
        ArrayList<Edge>[] graph = new ArrayList[param1];
        for (int i = 0; i < param1; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            int u = prerequisites[i][1];
            int v = prerequisites[i][0];
            graph[u].add(new Edge(u, v, 1));
        }
        return method1(graph);
    }
}
