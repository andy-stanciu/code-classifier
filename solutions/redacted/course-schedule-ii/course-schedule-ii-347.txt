class Solution {

    public int[] findOrder(int V, int[][] pre) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < pre.length; i++) {
            adj.get(pre[i][1]).add(pre[i][0]);
        }
        int[] indeg = new int[V];
        for (int i = 0; i < V; i++) {
            for (int it : adj.get(i)) {
                indeg[it]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < V; i++) {
            if (indeg[i] == 0)
                q.add(i);
        }
        int[] topo = new int[V];
        int ind = 0;
        while (!q.isEmpty()) {
            int node = q.poll();
            topo[ind++] = node;
            for (int it : adj.get(node)) {
                indeg[it]--;
                if (indeg[it] == 0)
                    q.add(it);
            }
        }
        return ind == V ? topo : new int[0];
    }
}
