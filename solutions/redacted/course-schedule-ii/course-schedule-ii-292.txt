class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adjList.add(new ArrayList<>());
        }
        int[] depends = new int[param1];
        for (int i = 0; i < prerequisites.length; i++) {
            adjList.get(prerequisites[i][1]).add(prerequisites[i][0]);
            depends[prerequisites[i][0]]++;
        }
        int[] ans = new int[param1];
        int index = 0;
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (depends[i] == 0) {
                q.add(i);
            }
        }
        while (!q.isEmpty()) {
            Integer ele = q.poll();
            ans[index++] = ele;
            for (int ngh : adjList.get(ele)) {
                depends[ngh]--;
                if (depends[ngh] == 0) {
                    q.offer(ngh);
                }
            }
        }
        if (index != param1) {
            return new int[0];
        }
        return ans;
    }
}
