class Solution {

    List<Integer>[] adj;

    boolean[] visited;

    boolean[] explore;

    Stack<Integer> stk;

    public int[] findOrder(int nums, int[][] pre) {
        adj = new ArrayList[nums];
        for (int i = 0; i < nums; i++) {
            adj[i] = new ArrayList();
        }
        for (int i = 0; i < pre.length; i++) {
            adj[pre[i][1]].add(pre[i][0]);
        }
        visited = new boolean[nums];
        explore = new boolean[nums];
        stk = new Stack();
        for (int i = 0; i < nums; i++) {
            if (!visited[i]) {
                if (isCyclic(i)) {
                    return new int[] {};
                }
            }
        }
        visited = new boolean[nums];
        for (int i = 0; i < nums; i++) {
            if (!visited[i]) {
                topologicalSort(i);
            }
        }
        int[] res = new int[stk.size()];
        for (int i = 0; i < res.length; i++) {
            res[i] = stk.pop();
        }
        return res;
    }

    public boolean isCyclic(int i) {
        visited[i] = true;
        for (Integer j : adj[i]) {
            if (!visited[j]) {
                if (isCyclic(j)) {
                    return true;
                }
            } else if (!explore[j]) {
                return true;
            }
        }
        explore[i] = true;
        return false;
    }

    public void topologicalSort(int i) {
        visited[i] = true;
        for (Integer j : adj[i]) {
            if (!visited[j]) {
                topologicalSort(j);
            }
        }
        stk.push(i);
    }
}
