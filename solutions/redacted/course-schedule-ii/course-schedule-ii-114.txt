class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        DAG dag = new DAG(param1);
        for (int[] prereq : prerequisites) {
            dag.addEdge(prereq[1], prereq[0]);
        }
        int[] inDegs = new int[param1], order = new int[param1];
        for (int i = 0; i < param1; i++) {
            for (int j : dag.adj(i)) {
                inDegs[j]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (inDegs[i] == 0) {
                q.add(i);
            }
        }
        int index = 0;
        while (!q.isEmpty()) {
            int currNode = q.poll();
            order[index++] = currNode;
            for (int j : dag.adj(currNode)) {
                inDegs[j]--;
                if (inDegs[j] == 0) {
                    q.add(j);
                }
            }
        }
        return index == param1 ? order : new int[] {};
    }
}

class DAG {

    private int V;

    private ArrayList<Integer>[] adj;

    public DAG(int V) {
        this.V = V;
        adj = new ArrayList[V];
        for (int i = 0; i < V; i++) {
            adj[i] = new ArrayList<>();
        }
    }

    public void addEdge(int v, int w) {
        adj[v].add(w);
    }

    public Iterable<Integer> adj(int v) {
        return adj[v];
    }
}
