class Solution {

    public int lengthOfLIS(int[] nums) {
        // int[][] dp = new int[nums.length + 1][nums.length + 1];
        int[] next = new int[nums.length + 1];
        for (int ind = nums.length - 1; ind >= 0; ind--) {
            int[] curr = new int[nums.length + 1];
            for (int prev_ind = ind - 1; prev_ind >= -1; prev_ind--) {
                // int notPick = dp[ind + 1][prev_ind + 1];
                int notPick = next[prev_ind + 1];
                int pick = 0;
                if (prev_ind == -1 || nums[prev_ind] < nums[ind]) {
                    // pick = 1 + dp[ind + 1][ind + 1];
                    pick = 1 + next[ind + 1];
                }
                // dp[ind][prev_ind + 1] = Math.max(pick, notPick);
                curr[prev_ind + 1] = Math.max(pick, notPick);
            }
            next = curr;
        }
        // return dp[0][-1 + 1];
        return next[-1 + 1];
        // int[][] dp = new int[nums.length][nums.length + 1];
        // for(int[] num: dp) Arrays.fill(num, -1);
        // return task(0, -1, nums, dp);
    }

    static int task(int ind, int prev_ind, int[] nums, int[][] dp) {
        if (ind == nums.length)
            return 0;
        if (dp[ind][prev_ind + 1] != -1)
            return dp[ind][prev_ind + 1];
        int notPick = task(ind + 1, prev_ind, nums, dp);
        int pick = 0;
        if (prev_ind == -1 || nums[prev_ind] < nums[ind]) {
            pick = 1 + task(ind + 1, ind, nums, dp);
        }
        return dp[ind][prev_ind + 1] = Math.max(pick, notPick);
    }
}
