class Solution {

    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        // int dp[][]=new int[n+1][n+1];
        // for(int ind = n-1; ind>=0; ind --){
        // for (int prev_index = ind-1; prev_index >=-1; prev_index --){
        // int notTake = 0 + dp[ind+1][prev_index +1];
        // int take = 0;
        // if(prev_index == -1 || nums[ind] > nums[prev_index]){
        // take = 1 + dp[ind+1][ind+1];
        // }
        // dp[ind][prev_index+1] = Math.max(notTake,take);
        // }
        // }
        // return dp[0][0];
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            dp[i] = 1;
        }
        int max = 1;
        for (int i = 0; i < n; i++) {
            for (int prev = 0; prev < i; prev++) {
                if (nums[prev] < nums[i]) {
                    dp[i] = Math.max(dp[i], 1 + dp[prev]);
                }
            }
            max = Math.max(max, dp[i]);
        }
        return max;
    }
}
