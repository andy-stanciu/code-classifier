class Solution {

    public int lengthOfLIS(int[] nums) {
        if (nums == null)
            return 0;
        int n = nums.length;
        if (n == 0)
            return 0;
        if (n == 1)
            return 1;
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            dp[i] = Integer.MAX_VALUE;
        }
        for (int i = 1; i <= n; i++) {
            int l = binarySearch(dp, 0, i, nums[i - 1]);
            dp[l] = nums[i - 1];
        }
        for (int i = 0; i < n; i++) {
            if (dp[i] == Integer.MAX_VALUE) {
                return i;
            }
        }
        return n;
    }

    public int binarySearch(int[] dp, int left, int right, int key) {
        while (left <= right) {
            int middle = left + (right - left) / 2;
            if (dp[middle] >= key) {
                right = middle - 1;
            } else {
                left = middle + 1;
            }
        }
        return left;
    }
}
