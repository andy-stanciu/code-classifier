class Solution {

    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        List<Integer> tmp = new ArrayList<>();
        int[] insertPos = new int[n];
        for (int i = 0; i < n; i++) {
            if (tmp.isEmpty() || nums[i] > tmp.get(tmp.size() - 1)) {
                tmp.add(nums[i]);
                insertPos[i] = tmp.size();
            } else {
                int ind = getIndexOfLargerElement(tmp, nums[i]);
                tmp.set(ind, nums[i]);
                insertPos[i] = ind;
            }
        }
        int res = tmp.size();
        List<Integer> finalArr = new ArrayList<>();
        int len = res;
        for (int i = n - 1; i >= 0; i--) {
            if (insertPos[i] == len) {
                finalArr.add(nums[i]);
                len--;
            }
        }
        Collections.reverse(finalArr);
        for (int ele : finalArr) {
            System.out.print(ele + ", ");
        }
        System.out.println();
        return res;
    }

    private int getIndexOfLargerElement(List<Integer> A, int ele) {
        int l = 0, h = A.size() - 1, ans = -1;
        while (l <= h) {
            int m = l + (h - l) / 2;
            if (A.get(m) >= ele) {
                ans = m;
                h = m - 1;
            } else {
                l = m + 1;
            }
        }
        return ans;
    }
}
