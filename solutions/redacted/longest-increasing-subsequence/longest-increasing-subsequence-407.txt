class Solution {

    // public int util(int i,int prev,int[] nums,int dp[][]){
    //     if(i == nums.length) return 0;
    //     if(dp[i][prev+1] != -1) return dp[i][prev+1];
    //     int a = 0; int b = 0;
    //     if(prev == -1 || nums[i] > nums[prev]){
    //         a = 1+ util(i+1,i,nums,dp);
    //     }
    //         b = util(i+1,prev,nums,dp);
    //     return dp[i][prev+1] = Math.max(a,b);
    // }
    public int lengthOfLIS(int[] nums) {
        int min = Integer.MAX_VALUE;
        for (int num : nums) {
            min = Math.min(min, num);
        }
        for (int i = 0; i < nums.length; i++) {
            nums[i] = (-min) + nums[i] + 1;
        }
        int[][] dp = new int[nums.length + 1][nums.length + 1];
        for (int i = nums.length - 1; i >= 0; i--) {
            for (int prev = i - 1; prev >= -1; prev--) {
                int a = 0;
                int b = 0;
                if (prev == -1 || nums[i] > nums[prev]) {
                    a = 1 + dp[i + 1][i + 1];
                }
                b = dp[i + 1][prev + 1];
                dp[i][prev + 1] = Math.max(a, b);
            }
        }
        // for(int row[]:dp)Arrays.fill(row,-1);
        // return util(0,-1,nums,dp);
        return dp[0][0];
    }
}
