class // practise backtracing
Solution {

    public int lengthOfLIS(int[] nums) {
        // return lis(nums,0,-1);
        // int[][] dp=new int[nums.length+1][nums.length+2];
        // for(int i=0;i<dp.length;i++){
        //     Arrays.fill(dp[i],-1);
        // }
        // return lis1(nums,nums.length,nums.length+1,dp);
        //return lis2(nums);
        return binarySearch(nums);
    }

    public int lis(int[] nums, int i, int j) {
        if (i == nums.length) {
            return 0;
        }
        int a = 0;
        if (j == -1 || nums[j] < nums[i]) {
            a = 1 + lis(nums, i + 1, i);
        }
        return Math.max(a, lis(nums, i + 1, j));
    }

    public int lis1(int[] nums, int i, int j, int[][] dp) {
        if (dp[i][j] == -1) {
            if (i == 0) {
                dp[i][j] = 0;
            } else {
                int a = 0;
                if (j == nums.length + 1 || nums[j - 1] > nums[i - 1]) {
                    a = 1 + lis1(nums, i - 1, i, dp);
                }
                dp[i][j] = Math.max(a, lis1(nums, i - 1, j, dp));
            }
        }
        return dp[i][j];
    }

    public int lis2(int[] nums) {
        int[] dp = new int[nums.length];
        int ans = 1;
        for (int i = 0; i < nums.length; i++) {
            dp[i] = 1;
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j] && dp[i] <= dp[j]) {
                    dp[i] = 1 + dp[j];
                    ans = Math.max(ans, dp[i]);
                }
            }
        }
        return ans;
    }

    // binary search
    public int binarySearch(int[] nums) {
        List<Integer> list = new ArrayList<>();
        list.add(nums[0]);
        for (int i = 1; i < nums.length; i++) {
            int a = bs(list, 0, list.size() - 1, nums[i]);
            //  System.out.println(a);
            if (a == list.size()) {
                list.add(nums[i]);
            } else {
                list.set(a, nums[i]);
            }
        }
        return list.size();
    }

    public int bs(List<Integer> list, int start, int end, int val) {
        if (start > end) {
            return start;
        }
        int mid = start + (end - start) / 2;
        if (list.get(mid) == val) {
            return mid;
        } else if (list.get(mid) > val) {
            return bs(list, start, mid - 1, val);
        } else {
            return bs(list, mid + 1, end, val);
        }
    }
}
