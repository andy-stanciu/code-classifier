class Solution {

    public int lengthOfLIS(int[] nums) {
        /*
            Recursive solution
            [10,9,2,5,3,7,101,18]
            At any index we need to have the previous index selected for consideration to select current index or not
            starting from index = 0, say previous index -1
            We have 2 choices take the element if fulfill certain condition 
            Or not take it
            ---Take 
            if(prevIndex == -1 || nums[index]> nums[prevIndex] )
            {
                //Select
                int x = 1 + fun(index,index+1);

            } 
            //not select
            int y = fun(prev,index+1);

            return max(x,y);

        */
        //  index = i -> i-1
        int prevIndex = -1;
        int index = 0;
        int ans = 0;
        int[][] dp = new int[nums.length][nums.length + 1];
        for (int[] arr : dp) {
            Arrays.fill(arr, -1);
        }
        ans = recur(prevIndex, index, nums, dp);
        return ans;
    }

    int recur(int prevIndex, int index, int[] nums, int[][] dp) {
        //Base case
        if (index == nums.length)
            return 0;
        if (dp[index][prevIndex + 1] != -1)
            return dp[index][prevIndex + 1];
        int x = 0;
        int y = 0;
        // if( nums[index]>nums[prevIndex])
        // {
        //     System.out.println(nums[prevIndex]);
        // }
        if (prevIndex == -1 || nums[index] > nums[prevIndex]) {
            x = recur(index, index + 1, nums, dp) + 1;
        }
        y = recur(prevIndex, index + 1, nums, dp);
        return dp[index][prevIndex + 1] = Math.max(x, y);
    }
}
