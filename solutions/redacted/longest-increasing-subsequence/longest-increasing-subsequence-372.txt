class Solution {

    public int lengthOfLIS(int[] nums) {
        // int n = nums.length;
        // int[][] dp = new int[n+1][n+1];
        // // dp[0][0]=1;
        // // dp[0][1]=1;
        // // dp[1][0]=1;
        // for(int i = 0; i < n; i++){
        //     for(int j = 0; j < n; j++){
        //         if(i == j) {++dp[i+1][j+1];}
        //         else{
        //         dp[i+1][j+1] = nums[i] < nums[j] ? dp[i][j] + 1 : Math.max(dp[i+1][j],dp[i][j+1]);
        //         }
        //     }
        // }
        // return dp[n][n];
        List<Integer> pile = new ArrayList<>();
        for (int num : nums) {
            int index = Collections.binarySearch(pile, num, (a, b) -> a - b);
            if (index < 0)
                index = -(index + 1);
            if (index == pile.size()) {
                pile.add(num);
            } else {
                pile.set(index, num);
            }
        }
        return pile.size();
    }
}
