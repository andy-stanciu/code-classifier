class Solution {

    public int lengthOfLIS(int[] nums) {
        HashSet<Integer> set = new HashSet<>();
        for (int num : nums) {
            set.add(num);
        }
        int[] arr2 = new int[set.size()];
        int i = 0;
        for (int num : set) {
            arr2[i] = num;
            i++;
        }
        Arrays.sort(arr2);
        return lcs(nums, arr2);
    }

    private int lcs(int[] arr1, int[] arr2) {
        int n = arr1.length;
        int m = arr2.length;
        int[][] dp = new int[n + 1][m + 1];
        for (int i = 1; i < n + 1; i++) {
            for (int j = 1; j < m + 1; j++) {
                if (arr1[i - 1] == arr2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    int exc_num_arr1 = dp[i - 1][j];
                    int exc_num_arr2 = dp[i][j - 1];
                    dp[i][j] = Math.max(exc_num_arr1, exc_num_arr2);
                }
            }
        }
        return dp[n][m];
    }
}
