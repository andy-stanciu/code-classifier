class Solution {

    public int lengthOfLIS(int[] nums) {
        // so now here is the another way to do it using the binary search as here we have to get the length
        // not the array which is in increasing order so we use it
        List<Integer> list = new ArrayList<>();
        // so now here we have to get the value here
        for (int i = 0; i < nums.length; i++) {
            // so now here
            if (list.isEmpty() || nums[i] > list.get(list.size() - 1)) {
                // so we can add the element here
                list.add(nums[i]);
            } else {
                // so it means that the element is smaller so we need to replace here
                // note one thing as it will replace so out size will be still be the same
                // and we have to care about the size not the list of elemtne we want
                int index = srch(list, nums[i]);
                // so now here we have to to set the value at that index here
                list.set(index, nums[i]);
            }
        }
        // so now here we have to return the list size here
        return list.size();
    }

    int srch(List<Integer> list, int target) {
        // so now here
        int start = 0;
        int end = list.size() - 1;
        while (start < end) {
            int mid = (start + end) / 2;
            if (list.get(mid) < target) {
                start = mid + 1;
            } else {
                // as here we have to get the index here which is greater than or equal to
                end = mid;
            }
        }
        return end;
    }
}
