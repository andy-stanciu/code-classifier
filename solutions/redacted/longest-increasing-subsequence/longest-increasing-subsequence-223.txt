class Solution {

    public int f(int index, int n, int[] nums, int prev, int[][] dp) {
        if (index == n)
            return 0;
        if (dp[index][prev + 1] != -1)
            return dp[index][prev + 1];
        int pick = 0;
        int notpick = 0;
        notpick = f(index + 1, n, nums, prev, dp);
        if (prev == -1 || nums[prev] < nums[index]) {
            pick = 1 + f(index + 1, n, nums, index, dp);
        }
        return dp[index][prev + 1] = Math.max(pick, notpick);
    }

    public int lengthOfLIS(int[] nums) {
        int[][] dp = new int[nums.length + 1][nums.length + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return f(0, nums.length, nums, -1, dp);
    }
}
