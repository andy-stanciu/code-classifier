class Solution {

    public int lengthOfLIS(int[] nums) {
        // Intiialize array
        // since each subsequence ending at i will have atleast 1 ans the lenght of LIS
        // initialize array with 1
        int[] memory = new int[nums.length];
        Arrays.fill(memory, 1);
        // use previous values to maximize the lenght of LIS
        for (int i = 0; i < nums.length; i++) {
            // Check for all the values of j < i
            for (int j = 0; j < i; j++) {
                // if nums[i] > nums[j], it means we can consider this a valid situation
                if (nums[i] > nums[j]) {
                    // maximize the value of memory[i] over all the j\'s
                    memory[i] = Math.max(memory[i], 1 + memory[j]);
                }
            }
        }
        // The max value in the DP array will be the solution
        return Arrays.stream(memory).max().orElseThrow(() -> new IllegalArgumentException("Empty array cannot be processed"));
    }
}
