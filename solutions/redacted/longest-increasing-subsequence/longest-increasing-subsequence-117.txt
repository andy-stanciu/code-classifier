class Solution {

    public int lengthOfLIS(int[] nums) {
        // Store the tails of the increasing subsequences
        int[] tails = new int[nums.length];
        // Initialize the length of the longest increasing subsequence
        int len = 0;
        for (int n : nums) {
            // Iterate through each number in the given array
            // Initialize left and right pointers for binary search
            int left = 0, right = len;
            while (left < right) {
                // Perform binary search to find the insertion position for the current number
                // Calculate mid index
                int mid = left + (right - left) / 2;
                // If current tail value is less than the number, adjust the left pointer
                if (tails[mid] < n) {
                    left = mid + 1;
                } else {
                    // If current tail value is greater or equal, adjust the right pointer
                    right = mid;
                }
            }
            // Insert the number at the determined position
            tails[left] = n;
            if (left == len) {
                // If the current position is at the end, increment the length of the LIS
                len++;
            }
        }
        // Return the length of the longest increasing subsequence
        return len;
    }
}
