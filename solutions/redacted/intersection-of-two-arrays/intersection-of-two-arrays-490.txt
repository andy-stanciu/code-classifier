class Solution {

    public int[] method1(int[] nums1, int[] nums2) {
        // ArrayList<Integer> list1=new ArrayList<>();
        // for(int i=0;i<nums1.length;i++){
        //     if(!list1.contains(nums1[i])){
        //         list1.add(nums1[i]);
        //     }
        // }
        // ArrayList<Integer> list2=new ArrayList<>();
        // for(int i=0;i<nums2.length;i++){
        //     if(!list2.contains(nums2[i])){
        //         list2.add(nums2[i]);
        //     }
        // }
        // ArrayList<Integer> ans=new ArrayList<>();
        // for(int i=0;i<list1.size();i++){
        //     if(list2.contains(list1.get(i))){
        //         if(!ans.contains(list1.get(i))){
        //             ans.add(list1.get(i));
        //         }
        //     }
        // }
        // int[] arr = ans.stream().mapToInt(i -> i).toArray();
        // return arr;
        HashSet<Integer> set1 = new HashSet<>();
        HashSet<Integer> ans = new HashSet<>();
        for (int i = 0; i < nums1.length; i++) {
            set1.add(nums1[i]);
        }
        for (int i = 0; i < nums2.length; i++) {
            if (set1.contains(nums2[i])) {
                ans.add(nums2[i]);
                set1.remove(nums2[i]);
            }
        }
        int[] arr = ans.stream().mapToInt(i -> i).toArray();
        return arr;
    }
}
