class Solution {

    public int[] method1(int[] nums1, int[] nums2) {
        // // 3ms BEATS 54%
        // Set<Integer> s1 = new HashSet<>();
        // Set<Integer> s2 = new HashSet<>();
        // for(int i = 0; i < nums1.length; i++){
        //     s1.add(nums1[i]);
        // }
        // List<Integer> l = new ArrayList<>();
        // for(int i = 0; i < nums2.length; i++){
        //     s2.add(nums2[i]);
        // }
        // Iterator it1 = s1.iterator();
        // while(it1.hasNext()){
        //     int temp = (int)it1.next();
        //     if(s2.contains(temp)){
        //         l.add(temp);
        //     }
        // }
        // it1 = l.iterator();
        // int [] ans = new int[l.size()];
        // int x = 0;
        // while(it1.hasNext()){
        //     ans[x++] = (int)it1.next();
        // }
        // return ans;
        // // -------------------------------------------
        // // using 1001 array length;
        int[] temp = new int[1001];
        for (int i = 0; i < nums1.length; i++) {
            if (temp[nums1[i]] > 0)
                continue;
            temp[nums1[i]]++;
        }
        List<Integer> l = new ArrayList<>();
        for (int i = 0; i < nums2.length; i++) {
            if (temp[nums2[i]] > 0) {
                l.add(nums2[i]);
                temp[nums2[i]] = 0;
            }
        }
        Iterator<Integer> it = l.iterator();
        int[] ans = new int[l.size()];
        int x = 0;
        while (it.hasNext()) {
            ans[x++] = (int) it.next();
        }
        return ans;
    }
}
