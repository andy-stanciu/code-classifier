class Solution {

    public static int[] method1(int[] nums1, int[] nums2) {
        // Step 1: Converting nums1 to a HashSet to remove duplicates
        Set<Integer> set1 = new HashSet<>();
        for (int num : nums1) {
            // Adds unique elements of nums1 to set1
            set1.add(num);
        }
        // Step 2: Initialize a new HashSet for storing the intersection
        Set<Integer> var1 = new HashSet<>();
        // Step 3: Loop through nums2, checking if it exists in set1 (the intersection)
        for (int num : nums2) {
            if (set1.contains(num)) {
                // Add to intersectionSet if it\'s common
                var1.add(num);
            }
        }
        // Step 4: Convert the HashSet to an array
        int[] result = new int[var1.size()];
        int index = 0;
        for (int num : var1) {
            // Add each element of intersectionSet to the result array
            result[index++] = num;
        }
        // Return the final result
        return result;
    }

    public static void main(String[] args) {
        // Example usage
        int[] nums1 = { 1, 2, 2, 1 };
        int[] nums2 = { 2, 2 };
        int[] result = method1(nums1, nums2);
        // Print the result
        for (int num : result) {
            // Output: 2
            System.out.print(num + " ");
        }
    }
}
