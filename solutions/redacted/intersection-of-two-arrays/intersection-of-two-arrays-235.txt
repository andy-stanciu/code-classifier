class Solution {

    public int[] method1(int[] nums1, int[] nums2) {
        //tc:\\U0001d442(\\U0001d45b1+\\U0001d45b2)..best sol for unsorted arrays
        //    Set<Integer> set = new HashSet<>();
        //     for (int num : nums1) {
        //         set.add(num);
        //     }
        //     // Create a list to store the intersection
        //     List<Integer> arr = new ArrayList<>();
        //     for (int i : nums2) {
        //         if (set.contains(i)) {
        //             arr.add(i);
        //             set.remove(i);  // Remove to ensure unique elements in the result
        //         }
        //     }
        //     // Convert the list to an array
        //     int[] result = new int[arr.size()];
        //     for (int j = 0; j < arr.size(); j++) {
        //         result[j] = arr.get(j);
        //     }
        //     return result;
        //more optimal but if array is sroted-tc:This takes O(n1+n2), which is the same as your current approach but avoids unnecessary set operations. if not sorted:O(n1logn1+n2logn2).
        // Ensure both arrays are sorted
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int i = 0, j = 0;
        List<Integer> result = new ArrayList<>();
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] < nums2[j]) {
                i++;
            } else if (nums1[i] > nums2[j]) {
                j++;
            } else {
                // nums1[i] == nums2[j]
                if (result.isEmpty() || result.get(result.size() - 1) != nums1[i]) {
                    // Add only unique elements
                    result.add(nums1[i]);
                }
                i++;
                j++;
            }
        }
        // Convert list to array
        int[] res = new int[result.size()];
        for (int k = 0; k < result.size(); k++) {
            res[k] = result.get(k);
        }
        return res;
    }
}
