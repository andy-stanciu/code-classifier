/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int method1(TreeNode root) {
        if (root == null)
            return 0;
        int lefth = leftheight(root);
        int righth = rightheight(root);
        // If left and right heights are equal, it\'s a perfect binary tree
        if (lefth == righth) {
            // For a perfect binary tree, number of nodes = 2^h - 1
            // (1 << lefth) is equivalent to 2^lefth
            return (1 << lefth) - 1;
        } else {
            // If not a perfect binary tree, recursively count nodes
            return 1 + method1(root.left) + method1(root.right);
        }
    }

    public int leftheight(TreeNode node) {
        int height = 0;
        while (node != null) {
            height++;
            node = node.left;
        }
        return height;
    }

    public int rightheight(TreeNode node) {
        int height = 0;
        while (node != null) {
            height++;
            node = node.right;
        }
        return height;
    }
}
