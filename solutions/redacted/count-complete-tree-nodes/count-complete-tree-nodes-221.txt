/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int method1(TreeNode root) {
        if (root == null)
            return 0;
        // Find the left height and the right heights
        int lh = leftHeight(root);
        int rh = rightHeight(root);
        // If left and right heights are equal, return 2^height - 1
        if (lh == rh)
            return (1 << lh) - 1;
        // Otherwise, recursive call
        return 1 + method1(root.left) + method1(root.right);
    }

    // Function to get the left height of the binary tree
    private int leftHeight(TreeNode root) {
        int ht = 0;
        while (root != null) {
            ht++;
            root = root.left;
        }
        return ht;
    }

    // Function to get the right height of the binary tree
    private int rightHeight(TreeNode root) {
        int ht = 0;
        while (root != null) {
            ht++;
            root = root.right;
        }
        return ht;
    }
}
