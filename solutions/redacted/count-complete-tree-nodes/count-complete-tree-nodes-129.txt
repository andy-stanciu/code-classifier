/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int method1(TreeNode root) {
        // handle the base case if the root is null
        if (root == null) {
            return 0;
        }
        int depthLeft = getDepth(root.left);
        int depthRight = getDepth(root.right);
        //if left == right then left subtree is full we can skip
        if (depthLeft == depthRight) {
            return (1 << depthLeft) + method1(root.right);
        } else {
            return (1 << depthRight) + method1(root.left);
        }
    }

    // first get the depth of the tree
    public int getDepth(TreeNode node) {
        int depth = 0;
        // loop for getting the depth
        while (node != null) {
            node = node.left;
            depth++;
        }
        return depth;
    }
}
