/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int extremeLeftHeight(TreeNode root) {
        if (root == null)
            return 0;
        TreeNode node = root;
        int leftHeight = 0;
        while (root != null) {
            root = root.left;
            leftHeight++;
        }
        return leftHeight;
    }

    public int extremeRightHeight(TreeNode root) {
        if (root == null)
            return 0;
        TreeNode node = root;
        int rightHeight = 0;
        while (root != null) {
            root = root.right;
            rightHeight++;
        }
        return rightHeight;
    }

    public int method1(TreeNode root) {
        if (root == null)
            return 0;
        int leftHeight = extremeLeftHeight(root);
        int rightHeight = extremeRightHeight(root);
        /**
         * Perfect BT , Hence total nodes = 2^n -1
         */
        if (leftHeight == rightHeight) {
            return (int) Math.pow(2, leftHeight) - 1;
        }
        /*  Not perfect BT, Hence explore left & right subtrees, 
            add 1 for root node + leftCount + rightCount */
        return 1 + method1(root.left) + method1(root.right);
    }
}
