/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int method1(TreeNode root) {
        if (root == null)
            return 0;
        else {
            int lh = leftHeight(root);
            int rh = rightHeight(root);
            if (lh == rh)
                // no of node at height h in complete binary tree is 2^h-1
                return (int) Math.pow(2, lh) - 1;
            else
                return 1 + method1(root.left) + method1(root.right);
        }
    }

    public int leftHeight(TreeNode root) {
        int var1 = 0;
        while (root != null) {
            var1++;
            root = root.left;
        }
        return var1;
    }

    public int rightHeight(TreeNode root) {
        int var1 = 0;
        while (root != null) {
            var1++;
            root = root.right;
        }
        return var1;
    }
}
