/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    // public int inorder(TreeNode root,int[] cnt){
    // if (root == 0) {
    //         return 0;
    //     }
    // cnt[0]++;
    // inorder(root.left,cnt);
    // inorder(root.right,cnt);
    // }
    private int findHeightRight(TreeNode node) {
        int height = 0;
        while (node != null) {
            height++;
            node = node.right;
        }
        return height;
    }

    private int findHeightLeft(TreeNode node) {
        int height = 0;
        while (node != null) {
            height++;
            node = node.left;
        }
        return height;
    }

    public int method1(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int lh = findHeightLeft(root);
        int rh = findHeightRight(root);
        if (lh == rh) {
            return (1 << lh) - 1;
        }
        return 1 + method1(root.left) + method1(root.right);
        // int[] count={0};
        // inorder(root,count);
        // return count[0];
    }
}
