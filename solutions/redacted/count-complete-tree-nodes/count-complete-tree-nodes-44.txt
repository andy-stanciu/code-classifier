/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int method1(TreeNode root) {
        if (root == null) {
            // Check if root is equal to null simply return 0.
            return 0;
        } else if (root.right == null) {
            // If root\'s right side is null go to the left side and count nodes & Increse 1 for current node.
            return method1(root.left) + 1;
        } else if (root.left == null) {
            // If root\'s left side is null go to the right side and count nodes & Increse 1 for current node.
            return method1(root.right) + 1;
        } else {
            // If root\'s both side having a node go to the both sides of root node and count nodes & Increse 1 for current node.
            return method1(root.left) + method1(root.right) + 1;
        }
    }
}
