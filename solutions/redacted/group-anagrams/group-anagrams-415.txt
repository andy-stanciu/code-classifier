class Solution {

    public List<List<String>> method1(String[] strs) {
        /*
		 * The Time Complexity of this approach is O(N * K LOG K)
		 * Where N is the number of Strings in the String array and
		 * K is the Max number of characters in a string and KLOGK is for sorting.
		 * 
		 * The Space Complexity of this approach is O(N).
		 */
        if (strs.length <= 1)
            return new ArrayList(Arrays.asList(Arrays.asList(strs)));
        Map<String, List> map = new HashMap<String, List>();
        for (int i = 0; i < strs.length; i++) {
            char[] strArray = strs[i].toCharArray();
            Arrays.sort(strArray);
            String sortedString = String.valueOf(strArray);
            if (!map.containsKey(sortedString))
                map.put(sortedString, new ArrayList());
            List<String> existingList = map.get(sortedString);
            existingList.add(strs[i]);
        }
        return new ArrayList(map.values());
    }
}
