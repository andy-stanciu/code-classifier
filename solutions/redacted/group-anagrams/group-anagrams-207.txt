class Solution {

    public List<List<String>> method1(String[] strs) {
        Map<String, ArrayList<String>> hmap = new HashMap<>();
        for (String str : strs) {
            String hash = getHash(str);
            ArrayList<String> list = hmap.get(hash);
            if (list == null) {
                ArrayList<String> kk = new ArrayList<String>();
                kk.add(str);
                hmap.put(hash, kk);
                continue;
            }
            list.add(str);
            hmap.put(hash, list);
        }
        List<List<String>> ans = new ArrayList<>();
        for (String key : hmap.keySet()) {
            ans.add(hmap.get(key));
        }
        return ans;
        // time complexit (nklogk)
        // Map<String, ArrayList<String>> hmap = new HashMap<>();
        // for (String str : strs) {
        //     String sortedStr = sortString(str);
        //     ArrayList<String> list = hmap.get(sortedStr);
        //     if (list==null) {
        //         ArrayList<String> kk = new ArrayList<String>();
        //         kk.add(str);
        //         hmap.put(sortedStr, kk);
        //     } else {
        //         list.add(str);
        //         hmap.put(sortedStr, list);
        //     }
        // }
        // List<List<String>> ans = new ArrayList<>();
        // for (String key : hmap.keySet()) {
        //     ans.add(hmap.get(key));
        // }
        // return ans;
        // List<List<String>> result = new ArrayList<>();
        // for(int i=0; i<strs.length; i++) {
        //     List<String> ans = new ArrayList<>();
        //     String orgStr = strs[i];
        //     if (orgStr!=null) {
        //         ans.add(orgStr);
        //     }
        //     for(int j=i+1; j<strs.length; j++) {
        //         String toCompStr = strs[j];
        //         String sortedOriginal = sortString(orgStr);
        //         String sortedCompStr = sortString(toCompStr);
        //         if (strs[j]!=null && sortedCompStr!=null && sortedOriginal!=null && sortedOriginal.equals(sortedCompStr)) {
        //             ans.add(toCompStr);
        //             strs[j]=null;
        //         }
        //     }
        //     if (ans.size()>0)
        //         result.add(ans);
        // }
        // return result;
    }

    // public String sortString(String str) {
    //     char[] arr = str.toCharArray();
    //     Arrays.sort(arr);
    //     return new String(arr);
    // }
    public String getHash(String str) {
        int[] hash = new int[256];
        for (int i = 0; i < str.length(); i++) {
            hash[(int) str.charAt(i)]++;
        }
        return Arrays.toString(hash);
    }
}
