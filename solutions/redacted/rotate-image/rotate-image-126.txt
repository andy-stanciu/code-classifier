class Solution {

    public void method1(int[][] matrix) {
        int l = matrix.length;
        for (int start = 0, size = l; start < l / 2 && size > 1; start++, size = size - 2) {
            method2(matrix, start, start + size - 1);
        }
    }

    private void method2(int[][] matrix, int fromIndex, int toIndex) {
        for (int i = 0; i < toIndex - fromIndex; i++) {
            // every iteration 4 elements must take their final positions
            // if elements of row are considered in order \'left -> right\' use \'index = fromIndex + i\'
            // if elements of row are considered in order \'right -> left\' use \'index = toIndex - i\'
            // if elements of column are considered in order \'up -> down\' use \'index = fromIndex + i\'
            // if elements of column are considered in order \'down -> up\' use \'index = toIndex - i\'
            // save first
            int first = matrix[fromIndex][fromIndex + i];
            // 4 -> 1
            matrix[fromIndex][fromIndex + i] = matrix[toIndex - i][fromIndex];
            // 3 -> 4
            matrix[toIndex - i][fromIndex] = matrix[toIndex][toIndex - i];
            // 2 -> 3
            matrix[toIndex][toIndex - i] = matrix[fromIndex + i][toIndex];
            // 1 -> 2
            matrix[fromIndex + i][toIndex] = first;
        }
    }
}
