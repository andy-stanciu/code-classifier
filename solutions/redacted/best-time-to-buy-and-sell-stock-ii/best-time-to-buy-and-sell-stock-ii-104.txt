class Solution {

    public int maxProfit(int[] prices) {
        int n = prices.length;
        // maxProfit[i][0] represents the maximum profit on day i when not holding a stock
        int[][] maxProfit = new int[n][2];
        // maxProfit[i][1] represents the maximum profit on day i when holding a stock
        // Initial profit on the first day when not holding a stock is 0
        maxProfit[0][0] = 0;
        // Initial profit on the first day when holding a stock is the negative of its price
        maxProfit[0][1] = -prices[0];
        for (int i = 1; i < n; i++) {
            // Update the maximum profit on day i when not holding a stock
            maxProfit[i][0] = Math.max(maxProfit[i - 1][0], maxProfit[i - 1][1] + prices[i]);
            // Update the maximum profit on day i when holding a stock
            maxProfit[i][1] = Math.max(maxProfit[i - 1][1], maxProfit[i - 1][0] - prices[i]);
        }
        // Return the maximum profit on the last day when not holding a stock
        return maxProfit[n - 1][0];
    }
}
