class Solution {

    public int check(int[] prices, int i, int param1, int[][] dp) {
        if (i == prices.length) {
            return 0;
        }
        if (i == prices.length - 1 && param1 == 0) {
            dp[i][0] = 0;
            return 0;
        }
        if (dp[i][param1] != -1)
            return dp[i][param1];
        if (param1 == 0) {
            int var3 = check(prices, i + 1, 1, dp) - prices[i];
            int var4 = check(prices, i + 1, 0, dp);
            return dp[i][0] = Math.max(var3, var4);
        } else {
            int var1 = check(prices, i + 1, 0, dp) + prices[i];
            int var2 = check(prices, i + 1, 1, dp);
            return dp[i][1] = Math.max(var1, var2);
        }
    }

    public int maxProfit(int[] prices) {
        int[][] dp = new int[prices.length][2];
        for (int i = 0; i < prices.length; i++) {
            dp[i][0] = -1;
            dp[i][1] = -1;
        }
        int ans = check(prices, 0, 0, dp);
        return ans;
    }
}
