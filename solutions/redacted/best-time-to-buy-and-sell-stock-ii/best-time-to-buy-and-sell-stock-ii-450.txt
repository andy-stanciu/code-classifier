class Solution {

    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n + 1][2];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        //Base case
        if (n == 0)
            return 0;
        //Another base case, as at n, the dp should be 0
        dp[n][1] = dp[n][0] = 0;
        int profit = 0;
        //Iterate through the prices array in reverse and buy parameter to find max profit
        for (int ind = n - 1; ind >= 0; ind--) {
            for (int var1 = 0; var1 <= 1; var1++) {
                if (var1 == 0) {
                    profit = Math.max(dp[ind + 1][0], -prices[ind] + dp[ind + 1][1]);
                }
                if (var1 == 1) {
                    profit = Math.max(dp[ind + 1][1], prices[ind] + dp[ind + 1][0]);
                }
                dp[ind][var1] = profit;
            }
        }
        //Return the base value as its bottom up in tabulation
        return dp[0][0];
    }
}
