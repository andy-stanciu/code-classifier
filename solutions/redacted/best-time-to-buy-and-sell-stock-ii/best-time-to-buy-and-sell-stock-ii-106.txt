class Solution {

    public int recursion(int[] prices, int ind, int param1, int[][] dp) {
        int n = prices.length;
        int profit = 0;
        //base case
        if (ind == n) {
            return 0;
        }
        if (dp[ind][param1] != -1) {
            return dp[ind][param1];
        }
        //we can only sell as we have bought one stock already
        if (param1 == 1) {
            //(take case)                                        (not take case)
            profit = Math.max((-prices[ind] + recursion(prices, ind + 1, 0, dp)), (0 + recursion(prices, ind + 1, 1, dp)));
        } else {
            //we can buy as buy==0
            profit = Math.max((prices[ind] + recursion(prices, ind + 1, 1, dp)), (0 + recursion(prices, ind + 1, 0, dp)));
        }
        return dp[ind][param1] = profit;
    }

    public int maxProfit(int[] prices) {
        int n = prices.length;
        //n is length of array and 2 is for int buy which can 0 and 1.
        int[][] dp = new int[n][2];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return recursion(prices, 0, 1, dp);
    }
}
