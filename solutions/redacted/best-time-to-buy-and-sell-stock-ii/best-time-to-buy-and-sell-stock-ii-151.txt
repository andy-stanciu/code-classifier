//using dp
// class Solution {
//     int solve(int i,int buy,int prices[],int dp[][]){
//         if(prices.length==0 || prices.length==1){
//             return 0;
//         }
//         if(i>=prices.length){
//             return 0;
//         }
//        int profit=0;
//        if(dp[i][buy]!=-1){
//         return dp[i][buy];
//        }
//         if(buy==1){
//             int buyStock=-prices[i]+solve(i+1,0,prices,dp);
//             int notBuy=solve(i+1,1,prices,dp);
//             profit= Math.max(buyStock,notBuy);
//         }else{
//             int sell= prices[i]+solve(i+1,1,prices,dp);
//             int notSell= solve(i+1,0,prices,dp);
//             profit=Math.max(sell,notSell);
//         }
//         return dp[i][buy]=  profit;
//     }
//     public int maxProfit(int[] prices) {
//         int dp[][]=new int [prices.length+1][2];
//         for(int i=0;i<dp.length;i++){
//             Arrays.fill(dp[i],-1);
//         }
//         return solve(0,1,prices,dp);
//     }
// }
//without dp
class Solution {

    public int maxProfit(int[] prices) {
        int profit = 0;
        for (int i = 1; i < prices.length; i++) {
            if (prices[i - 1] < prices[i]) {
                profit += prices[i] - prices[i - 1];
            }
        }
        return profit;
    }
}
