// Approach-1: O(n*n) time and O(n) space
class Solution {

    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[] dp = new int[n];
        for (int i = n - 2; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                dp[i] = (prices[i] < prices[j]) ? (Math.max(dp[i], (dp[j] + prices[j] - prices[i]))) : Math.max(dp[i], dp[j]);
            }
        }
        return dp[0];
    }
}

// Approach-2: O(n) time and O(1) space
class Solution {

    public int maxProfit(int[] prices) {
        int res = 0;
        for (int i = 1; i < prices.length; i++) {
            if (prices[i] > prices[i - 1])
                res += prices[i] - prices[i - 1];
        }
        return res;
    }
}
