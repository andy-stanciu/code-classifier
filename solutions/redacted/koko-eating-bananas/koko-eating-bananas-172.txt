class Solution {

    public int method1(int[] piles, int h) {
        int start = 1;
        int end = MaxNo(piles);
        while (start <= end) {
            int mid = start + ((end - start) / 2);
            int requiredTime = ReqTime(piles, mid);
            if (requiredTime <= h) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return start;
    }

    static int MaxNo(int[] arr) {
        int max = arr[0];
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }
        return max;
    }

    static int ReqTime(int[] arr, int perHour) {
        int totalHours = 0;
        for (int i = 0; i < arr.length; i++) {
            // This computes the ceiling of arr[i] / perHour
            totalHours += Math.ceil((double) (arr[i]) / (double) (perHour));
        }
        return totalHours;
    }
}
