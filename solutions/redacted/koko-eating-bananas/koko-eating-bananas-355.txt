class Solution {

    public static int findmax(int[] piles) {
        int n = piles.length;
        int res = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            res = Math.max(piles[i], res);
        }
        return res;
    }

    public static int calculatehours(int[] piles, int hour) {
        int total = 0;
        int n = piles.length;
        for (int i = 0; i < n; i++) {
            total += Math.ceil((double) piles[i] / (double) hour);
        }
        return total;
    }

    public int method1(int[] piles, int h) {
        int low = 1;
        int high = findmax(piles);
        while (low <= high) {
            int mid = (low + high) / 2;
            int total = calculatehours(piles, mid);
            if (total <= h) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
}
