class Solution {

    public static int findMax(int[] piles) {
        int maxim = Integer.MIN_VALUE;
        int n = piles.length;
        for (int i = 0; i < n; i++) {
            maxim = Math.max(maxim, piles[i]);
        }
        return maxim;
    }

    public static int totalHours(int[] piles, int h) {
        int totalH = 0;
        int n = piles.length;
        for (int i = 0; i < n; i++) {
            totalH += Math.ceil((double) (piles[i]) / (double) (h));
        }
        return totalH;
    }

    public int method1(int[] piles, int h) {
        int low = 1;
        int high = findMax(piles);
        while (low <= high) {
            int mid = (low + high) / 2;
            int ttH = totalHours(piles, mid);
            if (ttH <= h) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
}
