class Solution {

    public int method1(int[] piles, int h) {
        // we r assured piles.length <= h
        // k can be atleast 1 means 1 banana/hr
        // what can be max(k) ?
        // it can be max of pile means each pile now take 1 hour to eat
        int maxPile = -1;
        for (int i : piles) maxPile = Math.max(i, maxPile);
        int minK = 1;
        //search space for our k
        int l = minK, r = maxPile;
        //worst case
        int res = maxPile;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            // trying to find min so going left in search space if satisfies
            if (isPossibleToComplete(piles, mid, h)) {
                res = Math.min(mid, res);
                r = mid - 1;
            } else
                l = mid + 1;
        }
        return res;
    }

    public boolean isPossibleToComplete(int[] piles, int k, int h) {
        int timeTaken = 0;
        for (int i : piles) {
            // Math.ceil((double)i/k);
            timeTaken += (i + k - 1) / k;
            if (timeTaken > h)
                return false;
        }
        return timeTaken <= h;
    }
}
