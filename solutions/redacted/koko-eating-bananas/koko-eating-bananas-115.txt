class Solution {

    public int method1(int[] piles, int h) {
        int start = 1;
        // Set to the maximum possible speed initially
        int end = Integer.MAX_VALUE;
        int n = piles.length;
        // Set `end` to the maximum pile size, since the maximum speed is eating the largest pile in 1 hour
        for (int i = 0; i < n; i++) {
            end = Math.max(end, piles[i]);
        }
        // Initialize result to `end`
        int res = end;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            // If Koko can eat all piles at speed `mid` within `h` hours
            if (canEat(piles, n, h, mid)) {
                // This might be the minimum speed
                res = mid;
                // Try to find a smaller speed
                end = mid - 1;
            } else {
                // Increase the speed
                start = mid + 1;
            }
        }
        // Return the minimum eating speed
        return res;
    }

    boolean canEat(int[] piles, int n, int h, int max) {
        int hours = 0;
        for (int i = 0; i < n; i++) {
            // Calculate the number of hours Koko will need for each pile at speed `max`
            hours += (piles[i] + max - 1) / max;
        }
        // Return true if Koko can eat all piles in <= h hours
        return hours <= h;
    }
}
