class Solution {

    public int method1(int[] piles, int h) {
        int max = 0;
        int min = 1;
        for (int i = 0; i < piles.length; i++) {
            if (piles[i] > max) {
                max = piles[i];
            }
        }
        return findOptimum(min, max, piles, h);
    }

    int findOptimum(int min, int max, int[] piles, int h) {
        if (min == max) {
            return min;
        }
        int middle = min + (max - min) / 2;
        if (hoursTaken(piles, middle) <= h) {
            return findOptimum(min, middle, piles, h);
        } else {
            return findOptimum(middle + 1, max, piles, h);
        }
    }

    int hoursTaken(int[] piles, int rate) {
        int time = 0;
        for (int i = 0; i < piles.length; i++) {
            if (piles[i] % rate == 0) {
                time += piles[i] / rate;
            } else {
                time += 1 + (piles[i] / rate);
            }
        }
        return time;
    }
}
