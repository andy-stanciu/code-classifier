class Solution {

    public boolean canEatAll(int[] piles, int h, int speed) {
        int hNeeded = 0;
        for (int var1 : piles) {
            hNeeded += (var1 + speed - 1) / speed;
        }
        return hNeeded <= h;
    }

    public int getMaxPiles(int[] piles) {
        int max = Integer.MIN_VALUE;
        for (int var1 : piles) {
            max = Math.max(max, var1);
        }
        return max;
    }

    public int method1(int[] piles, int h) {
        int left = 1;
        int right = getMaxPiles(piles);
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (canEatAll(piles, h, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
}
