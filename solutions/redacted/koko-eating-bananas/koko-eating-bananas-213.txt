class Solution {

    private boolean isPoosibleInTime(int[] piles, int h, int time) {
        int count = 0;
        for (int pile : piles) {
            count += Math.ceil((double) pile / (double) time);
        }
        if (count <= h) {
            return true;
        }
        return false;
    }

    public int method1(int[] piles, int h, int start, int end) {
        if (start == end) {
            return start;
        }
        if (start + 1 == end) {
            if (isPoosibleInTime(piles, h, start)) {
                return start;
            }
            return start + 1;
        }
        int mid = (start + end) / 2;
        boolean isPossible = isPoosibleInTime(piles, h, mid);
        if (isPossible) {
            return method1(piles, h, start, mid);
        }
        return method1(piles, h, mid + 1, end);
    }

    public int method2(int[] piles, int h) {
        int maxTime = Integer.MIN_VALUE;
        for (int pile : piles) {
            maxTime = Math.max(maxTime, pile);
        }
        return method1(piles, h, 1, maxTime);
    }
}
