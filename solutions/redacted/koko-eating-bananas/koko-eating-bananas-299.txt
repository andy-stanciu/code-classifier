class Solution {

    public int method1(int[] piles, int h) {
        int n = piles.length;
        int low = 1;
        int max = MaxNumber(piles);
        while (low <= max) {
            int mid = (max + low) / 2;
            int totalH = totalnumber(piles, mid);
            if (totalH <= h) {
                max = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }

    public int totalnumber(int[] arr, int hour) {
        int total = 0;
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            total += Math.ceil((double) (arr[i]) / (double) (hour));
        }
        return total;
    }

    public int MaxNumber(int[] arr) {
        int n = arr.length;
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, arr[i]);
        }
        return max;
    }
}
