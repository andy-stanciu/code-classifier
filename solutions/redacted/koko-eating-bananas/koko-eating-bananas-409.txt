class Solution {

    public int method1(int[] piles, int h) {
        int max = 0;
        int n = piles.length;
        for (int m : piles) {
            max = Math.max(m, max);
        }
        int l = 1, r = max, ans = 0;
        while (l <= r) {
            int mid = (l + r) / 2;
            long count = canEat(piles, mid, n);
            if (count <= h) {
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return ans;
    }

    long canEat(int[] A, int c, int n) {
        long count = 0;
        for (int i = 0; i < n; i++) {
            int cn = A[i] / c;
            if (A[i] % c > 0)
                cn += 1;
            count += cn;
        }
        return count;
    }
}
