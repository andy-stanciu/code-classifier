class Solution {

    static int max(int[] piles) {
        int maxno = Integer.MIN_VALUE;
        int n = piles.length;
        for (int i = 0; i < n; i++) {
            maxno = Math.max(maxno, piles[i]);
        }
        return maxno;
    }

    static int calculateHours(int[] piles, int mid) {
        int thours = 0;
        int n = piles.length;
        for (int i = 0; i < n; i++) {
            thours += Math.ceil((double) (piles[i]) / (double) (mid));
        }
        return thours;
    }

    public int method1(int[] piles, int h) {
        int start = 1;
        int end = max(piles);
        // int ans=0;
        int k = 0;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            k = calculateHours(piles, mid);
            if (k <= h) {
                //ans=mid;
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return start;
    }
}
