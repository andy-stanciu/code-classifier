class Solution {

    public int method1(int[] piles, int h) {
        int first = 1;
        int last = Arrays.stream(piles).max().getAsInt();
        while (first < last) {
            int mid = (first + last) / 2;
            // \u041E\u0431\u043D\u0443\u043B\u044F\u0435\u043C \u043F\u0435\u0440\u0435\u043C\u0435\u043D\u043D\u0443\u044E eatH \u043F\u0435\u0440\u0435\u0434 \u043A\u0430\u0436\u0434\u043E\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0435\u0439 \u0446\u0438\u043A\u043B\u0430
            int eatH = 0;
            for (int pile : piles) {
                // \u041F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u043E \u0432\u044B\u0447\u0438\u0441\u043B\u044F\u0435\u043C \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0447\u0430\u0441\u043E\u0432 \u043D\u0430 \u043A\u0430\u0436\u0434\u043E\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438
                eatH += (pile + mid - 1) / mid;
            }
            if (eatH > h) {
                first = mid + 1;
            } else {
                last = mid;
            }
        }
        // \u0412\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043C first, \u0430 \u043D\u0435 eatH
        return first;
    }
}
