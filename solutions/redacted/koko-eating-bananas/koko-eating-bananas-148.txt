class Solution {

    public int method1(int[] piles, int h) {
        int max = 0;
        for (int pile : piles) {
            if (pile > max)
                max = pile;
        }
        int left = 1;
        int right = max;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (isCompletelyEdible(piles, h, mid)) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }

    private boolean isCompletelyEdible(int[] piles, int h, int k) {
        for (int i = 0; i < piles.length; i++) {
            h -= piles[i] / k;
            if (piles[i] % k > 0) {
                h--;
            }
            if (h < 0)
                return false;
        }
        return true;
    }
}
