class Solution {

    public int method1(int[] piles, int h) {
        int maxPile = 0;
        for (int pile : piles) {
            maxPile = Math.max(pile, maxPile);
        }
        int left = 0, right = maxPile, mid = 0;
        while (left < right) {
            //\u5DE6\u95ED\u53F3\u5F00\uFF0C\u4E0D\u627Etarget\u7684\u90FD\u5DE6\u95ED\u53F3\u5F00\uFF0C\u4E0D\u7136left==right\u4F1A\u6B7B\u5FAA\u73AF
            mid = left + (right - left) / 2;
            int hour = 0;
            for (int pile : piles) {
                //double\u975E\u5E38\u91CD\u8981\u8FD9\u91CC\uFF0C\u5982\u679C\u4E0D\u52A0\u7684\u8BDD1/2=0\uFF0Cceil\u4E86\u4E5F\u662F0
                hour += Math.ceil((double) pile / mid);
            }
            if (hour <= h) {
                //\u53EF\u80FD\u8FD8\u80FD\u5403\u7684\u66F4\u6162
                right = mid;
            } else {
                //\u5403\u592A\u6162\u4E86
                left = mid + 1;
            }
        }
        return left;
    }
}
