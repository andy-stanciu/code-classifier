/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode list1, ListNode list2) {
        List<Integer> NodeArr = new ArrayList<>();
        if (list1 == null) {
            return list2;
        }
        if (list2 == null) {
            return list1;
        }
        while (true) {
            if (list1.next != null) {
                NodeArr.add(list1.val);
                list1 = list1.next;
            } else {
                NodeArr.add(list1.val);
                break;
            }
        }
        while (true) {
            if (list2.next != null) {
                NodeArr.add(list2.val);
                list2 = list2.next;
            } else {
                NodeArr.add(list2.val);
                break;
            }
        }
        Collections.sort(NodeArr);
        ListNode listRes = new ListNode();
        ListNode listResIter = listRes;
        for (int i = 0; i < NodeArr.size(); i++) {
            listResIter.val = NodeArr.get(i);
            if (i + 1 < NodeArr.size()) {
                listResIter.next = new ListNode();
                listResIter = listResIter.next;
            }
        }
        return listRes;
    }
}
