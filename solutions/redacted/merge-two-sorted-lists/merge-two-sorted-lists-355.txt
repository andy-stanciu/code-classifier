/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode list1, ListNode list2) {
        if (//both lists empty
        list1 == null && list2 == null)
            return null;
        if (// list1 empty
        list1 == null)
            return list2;
        if (// list2 empty
        list2 == null)
            return list1;
        // node to traverse new linked list
        ListNode newNode = new ListNode();
        // node to remember head
        ListNode temp = new ListNode();
        if (// the smaller element comes first
        list1.val > list2.val) {
            newNode = list2;
            list2 = list2.next;
        } else {
            newNode = list1;
            list1 = list1.next;
        }
        // head assigned for returning the head
        temp = newNode;
        //recursion magic
        newNode.next = method1(list1, list2);
        return temp;
    }
}
