class Solution {

    public ListNode method1(ListNode list1, ListNode list2) {
        // create a head to keep track of the first node, and then another to iterate through both lists
        ListNode head = new ListNode(0);
        ListNode list3 = new ListNode();
        head = list3;
        // compare two pointers
        while (list1 != null || list2 != null) {
            // if either list1 or list2 runs out, take the remaining nodes from the one that exists
            if (list1 == null) {
                list3.next = list2;
                list2 = list2.next;
            } else if (list2 == null) {
                list3.next = list1;
                list1 = list1.next;
            } else // compare values when both nodes exist, and set the next node to the lesser one between the two. then, move the pointer for that list forward by one node
            if (list1.val > list2.val) {
                list3.next = list2;
                list2 = list2.next;
            } else {
                list3.next = list1;
                list1 = list1.next;
            }
            // move list3 forward for the next iteration
            list3 = list3.next;
        }
        // return the first actual node of the list
        return head.next;
    }
}
