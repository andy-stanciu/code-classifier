/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode list1, ListNode list2) {
        // base condition
        if (list1 == null && list2 == null)
            return list2;
        if (list1 == null)
            return list2;
        if (list2 == null)
            return list1;
        ListNode dummynode = new ListNode(0);
        ListNode temp = dummynode;
        while (list1 != null || list2 != null) {
            // compare list1.val and list2.val
            if (list1 != null && list2 != null && (list1.val == list2.val)) {
                temp.next = new ListNode(list1.val);
                temp = temp.next;
                list1 = list1.next;
                temp.next = new ListNode(list2.val);
                temp = temp.next;
                list2 = list2.next;
            } else // check list1.val < list2.val
            {
                if ((list2 == null && list1 != null) || (list1 != null && list1.val < list2.val)) {
                    temp.next = new ListNode(list1.val);
                    temp = temp.next;
                    //increment list1
                    list1 = list1.next;
                }
                // after increment check current list1.val > list2.val
                if ((list1 == null && list2 != null) || (list2 != null && list2.val < list1.val)) {
                    temp.next = new ListNode(list2.val);
                    temp = temp.next;
                    list2 = list2.next;
                }
            }
        }
        return dummynode.next;
    }
}
