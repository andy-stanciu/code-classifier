/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode list1, ListNode list2) {
        //initialize 2 temporary list nodes at the head of each list
        ListNode tempNode1 = list1;
        ListNode tempNode2 = list2;
        //initialize a new empty ListNode wholeList
        ListNode var1;
        if (tempNode1 == null) {
            return list2;
        } else if (tempNode2 == null) {
            return list1;
        }
        //initialize sortedList with the smallest number
        if (tempNode1.val > tempNode2.val) {
            var1 = new ListNode(tempNode2.val);
            tempNode2 = tempNode2.next;
        } else {
            var1 = new ListNode(tempNode1.val);
            tempNode1 = tempNode1.next;
        }
        ListNode var2 = var1;
        //while both nodes don\'t reach a null value(end of their list)
        while (tempNode1 != null && tempNode2 != null) {
            //if the value currently at tempNode1 is larger, add it to the sorted list, otherwise add tempnode2.val
            if (tempNode1.val < tempNode2.val) {
                var2.next = new ListNode();
                var2 = var2.next;
                var2.val = tempNode1.val;
                tempNode1 = tempNode1.next;
            } else {
                var2.next = new ListNode();
                var2 = var2.next;
                var2.val = tempNode2.val;
                tempNode2 = tempNode2.next;
            }
        }
        if (tempNode2 == null && tempNode1 == null) {
            return var1;
        }
        if (tempNode1 == null) {
            var2.next = tempNode2;
        } else {
            var2.next = tempNode1;
        }
        //while list1.val != null
        //if(list1.val)
        //if list2.val != null
        return var1;
    }
}
