/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode list1, ListNode list2) {
        // Create a dummy node to simplify handling the head of the merged list
        ListNode dummy = new ListNode(-1);
        // Pointer to build the new list
        ListNode current = dummy;
        // Traverse both lists until we reach the end of one
        while (list1 != null && list2 != null) {
            // Compare values from both lists and add the smaller one to the merged list
            if (list1.val <= list2.val) {
                current.next = list1;
                // Move list1 pointer forward
                list1 = list1.next;
            } else {
                current.next = list2;
                // Move list2 pointer forward
                list2 = list2.next;
            }
            // Move current pointer forward in the merged list
            current = current.next;
        }
        // If any nodes are left in list1, append them to the merged list
        if (list1 != null) {
            current.next = list1;
        }
        // If any nodes are left in list2, append them to the merged list
        if (list2 != null) {
            current.next = list2;
        }
        // Return the merged list starting from the node after the dummy
        return dummy.next;
    }
}
