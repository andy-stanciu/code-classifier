/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode list1, ListNode list2) {
        ListNode x = null;
        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                ListNode newnode = new ListNode(list1.val);
                if (x == null) {
                    x = newnode;
                } else {
                    ListNode m = x;
                    while (m.next != null) {
                        m = m.next;
                    }
                    m.next = newnode;
                }
                list1 = list1.next;
            } else {
                ListNode newnode = new ListNode(list2.val);
                if (x == null) {
                    x = newnode;
                } else {
                    ListNode m = x;
                    while (m.next != null) {
                        m = m.next;
                    }
                    m.next = newnode;
                }
                list2 = list2.next;
            }
        }
        while (list1 != null) {
            ListNode newnode = new ListNode(list1.val);
            if (x == null) {
                x = newnode;
            } else {
                ListNode m = x;
                while (m.next != null) {
                    m = m.next;
                }
                m.next = newnode;
            }
            list1 = list1.next;
        }
        while (list2 != null) {
            ListNode newnode = new ListNode(list2.val);
            if (x == null) {
                x = newnode;
            } else {
                ListNode m = x;
                while (m.next != null) {
                    m = m.next;
                }
                m.next = newnode;
            }
            list2 = list2.next;
        }
        return x;
    }
}
