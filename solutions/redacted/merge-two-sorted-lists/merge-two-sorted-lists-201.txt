/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode list1, ListNode list2) {
        // This approtch Time complexity is 0(n), but space compolexity is o(1), becuse we are not using any kind of data type.
        if (list1 == null && list2 == null)
            return null;
        ListNode current1 = list1;
        ListNode current2 = list2;
        ListNode newHead = new ListNode(0);
        ListNode dummy = newHead;
        while (current1 != null && current2 != null) {
            if (current1.val <= current2.val) {
                dummy.next = current1;
                current1 = current1.next;
            } else {
                dummy.next = current2;
                current2 = current2.next;
            }
            dummy = dummy.next;
        }
        if (current1 == null) {
            dummy.next = current2;
        } else {
            dummy.next = current1;
        }
        return newHead.next;
        // One More Simple Approtch Is That   but in this approtch time complexity is 0(n), and space complexity is also 0(n), beacuse we are use a dataType (ArrayList)
        //  if(list1==null&&list2==null)return null; // This Is My edge case
        // // apptotch we push all the element in the arrayList then we sort the
        // //ArrayList,After that we are use eachfor loop and make a dummy node
        // // And we we add all element one by one
        // // so we have to make two things first one is dummy node and one
        // // ArrayList
        //  ListNode dummy=new ListNode(0);  // This Is My dummy Node
        //  ListNode current=dummy;
        //  ArrayList <Integer> store = new ArrayList<>();   // This is my ArrayList
        //  // Now We Push All the Element In our ArrayList
        //  while(list1!=null){   // There we push all list1 element
        //      store.add(list1.val);
        //      list1=list1.next;
        //     }
        //  while(list2!=null){
        //      store.add(list2.val);
        //      list2=list2.next;
        //     }
        //     Collections.sort(store);
        //     for(int val:store){
        //         current.next=new ListNode(val);
        //         current=current.next;
        //     }
        //     return dummy.next;
    }
}
