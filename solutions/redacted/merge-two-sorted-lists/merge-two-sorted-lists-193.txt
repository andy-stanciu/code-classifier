/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
final class Solution {

    public ListNode method1(final ListNode l1, final ListNode l2) {
        if (l1 == null && l2 == null)
            return null;
        else if (l2 == null)
            return l1;
        else if (l1 == null)
            return l2;
        else {
            if (l1.val < l2.val) {
                l1.next = method1(l1.next, l2);
                return l1;
            } else {
                l2.next = method1(l1, l2.next);
                return l2;
            }
        }
    }
}

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        final ListNode prehead = new ListNode(-1);
        var curr = prehead;
        while (l1 != null && l2 != null) if (l1.val < l2.val) {
            curr.next = l1;
            curr = curr.next;
            l1 = curr.next;
        } else {
            curr.next = l2;
            curr = curr.next;
            l2 = curr.next;
        }
        if (l1 == null)
            curr.next = l2;
        else
            curr.next = l1;
        return prehead.next;
    }
}
