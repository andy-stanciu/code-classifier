/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode list1, ListNode list2) {
        // We can use the merge function of mergeSort algorithm.
        // create a new node initialized with -1. In this way, it will be easy to
        // operate with the linked lsit.
        ListNode head = new ListNode(-1);
        // point a variable t to head;
        ListNode t = head;
        while (//while any one of the list ends.
        list1 != null && list2 != null) {
            if (// if list1 has smaller data
            list1.val <= list2.val) {
                // add a new node to the LinkedList with the smaller element.
                t.next = new ListNode(list1.val);
                // update list1.
                list1 = list1.next;
            } else {
                t.next = new ListNode(list2.val);
                //update list2.
                list2 = list2.next;
            }
            //finally, update t pointer.
            t = t.next;
        }
        //if list1 still has some elements left.
        //add it to the new linkedlist.
        while (list1 != null) {
            t.next = new ListNode(list1.val);
            list1 = list1.next;
            t = t.next;
        }
        //if list1 still has some elements left.
        //add it to the new linkedlist.
        while (list2 != null) {
            t.next = new ListNode(list2.val);
            list2 = list2.next;
            t = t.next;
        }
        // return head.next, because 1st node is -1.
        // we had filled the linked list from 2nd node.
        // i.e. head.next.
        return head.next;
    }
}
