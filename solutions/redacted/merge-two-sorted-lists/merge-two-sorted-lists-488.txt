/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
// class Solution {
//     static ListNode temp = null;
//     public ListNode addLast(ListNode list,ListNode list3) {
//         if(list3 == null) {
//         list3 = list;
//         temp = list;
//         return list3;
//         }
//         temp.next = list;
//         temp = temp.next;
//         return list3;
//     }
//     public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
//         if (list1 == null) return list2;
//         if (list2 == null) return list1;
//         ListNode list3 = null;
//         while(!(list1 == null || list2 == null)) {
//              if(list1.val <= list2.val) {
//                 list3 = addLast(list1,list3);
//                 list1 = list1.next;
//              }
//              else {
//                 list3 = addLast(list2,list3);
//                 list2 = list2.next;
//              }
//         }
//         if(list1 == null) {
//             while(!(list2 == null)) {
//                 if(list3 == null) {
//                     list3 = list2;
//                     temp = list2;
//                     return list3;
//                 }
//                 temp.next = list2;
//                 temp = temp.next;
//                 list2 = list2.next;
//             }
//         }
//         else if(list2 == null) {
//             while(!(list1 == null)) {
//                 if(list3 == null) {
//                 list3 = list1;
//                 temp = list1;
//                 return list3;
//             }
//                 temp.next = list1;
//                 temp = temp.next;
//                 list1 = list1.next;
//             }
//         }
//         else {
//         }
//         return list3;
//     }
// }
class Solution {

    // Remove static
    private ListNode temp = null;

    public ListNode addLast(ListNode list, ListNode list3) {
        if (list3 == null) {
            list3 = list;
            temp = list;
            return list3;
        }
        temp.next = list;
        temp = temp.next;
        return list3;
    }

    public ListNode method1(ListNode list1, ListNode list2) {
        if (list1 == null)
            return list2;
        if (list2 == null)
            return list1;
        ListNode list3 = null;
        // Merge nodes from both lists
        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                list3 = addLast(list1, list3);
                list1 = list1.next;
            } else {
                list3 = addLast(list2, list3);
                list2 = list2.next;
            }
        }
        // Attach the remaining nodes directly
        if (list1 != null) {
            temp.next = list1;
        } else if (list2 != null) {
            temp.next = list2;
        }
        return list3;
    }
}
