/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode list1, ListNode list2) {
        // Create a dummy node to serve as the starting point of the merged list
        ListNode dummy = new ListNode(0);
        // \'tail\' will always point to the last node in the merged list
        ListNode tail = dummy;
        // Loop while there are still nodes in both lists
        while (list1 != null && list2 != null) {
            // Compare the values of the current nodes from both lists
            if (list1.val < list2.val) {
                // If list1\'s value is smaller, link it to the merged list
                tail.next = list1;
                // Move to the next node in list1
                list1 = list1.next;
            } else {
                // If list2\'s value is smaller or equal, link it to the merged list
                tail.next = list2;
                // Move to the next node in list2
                list2 = list2.next;
            }
            // Move the \'tail\' pointer to the last node in the merged list
            tail = tail.next;
        }
        // If there are remaining nodes in list1, link them to the merged list
        if (list1 != null) {
            // Attach the rest of list1
            tail.next = list1;
        } else {
            // If there are remaining nodes in list2, link them to the merged list
            // Attach the rest of list2
            tail.next = list2;
        }
        // Return the head of the merged list, which is next to the dummy node
        return dummy.next;
    }
}
