/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode h1 = reverse(l1);
        ListNode h2 = reverse(l2);
        ListNode var1 = method2(h1, h2);
        return reverse(var1);
    }

    public ListNode reverse(ListNode head) {
        ListNode y = head, x = null;
        while (y != null) {
            ListNode z = y.next;
            y.next = x;
            x = y;
            y = z;
        }
        return x;
    }

    public ListNode method2(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode p = dummy;
        int carry = 0;
        while (l1 != null || l2 != null || carry != 0) {
            int d1 = (l1 != null) ? l1.val : 0;
            int d2 = (l2 != null) ? l2.val : 0;
            int sum = d1 + d2 + carry;
            int d = sum % 10;
            carry = sum / 10;
            ListNode temp = new ListNode(d);
            p.next = temp;
            p = p.next;
            l1 = (l1 != null) ? l1.next : null;
            l2 = (l2 != null) ? l2.next : null;
        }
        return dummy.next;
    }
}
