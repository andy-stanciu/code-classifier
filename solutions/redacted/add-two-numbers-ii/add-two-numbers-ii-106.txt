/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    boolean isCarry = false;

    private ListNode method1(ListNode head) {
        ListNode newHead = new ListNode(0);
        newHead.next = head;
        return newHead;
    }

    private ListNode method2(ListNode head1, ListNode head2) {
        if (head1 == null && head2 == null)
            return null;
        ListNode curr = new ListNode(-1);
        curr.next = method2(head1.next, head2.next);
        int sum = 0;
        if (isCarry)
            sum = 1 + head1.val + head2.val;
        else
            sum = head1.val + head2.val;
        int carry = sum / 10;
        if (carry == 1)
            isCarry = true;
        else
            isCarry = false;
        curr.val = sum % 10;
        return curr;
    }

    public ListNode method3(ListNode l1, ListNode l2) {
        int length1 = 1;
        int length2 = 1;
        ListNode temp = l1;
        while (temp.next != null) {
            temp = temp.next;
            length1++;
        }
        temp = l2;
        while (temp.next != null) {
            temp = temp.next;
            length2++;
        }
        if (length1 > length2) {
            int nodes = length1 - length2;
            ListNode head2 = l2;
            for (int i = 0; i < nodes; i++) {
                ListNode temp1 = method1(head2);
                head2 = temp1;
            }
            ListNode ans = method2(l1, head2);
            if (isCarry) {
                ListNode finalHead = new ListNode(1);
                finalHead.next = ans;
                return finalHead;
            }
            return ans;
        } else if (length1 < length2) {
            int nodes = length2 - length1;
            ListNode head1 = l1;
            for (int i = 0; i < nodes; i++) {
                ListNode temp1 = method1(head1);
                head1 = temp1;
            }
            ListNode ans = method2(head1, l2);
            if (isCarry) {
                ListNode finalHead = new ListNode(1);
                finalHead.next = ans;
                return finalHead;
            }
            return ans;
        } else {
            ListNode ans = method2(l1, l2);
            if (isCarry) {
                ListNode finalHead = new ListNode(1);
                finalHead.next = ans;
                return finalHead;
            }
            return ans;
        }
        //return null;
    }
}
