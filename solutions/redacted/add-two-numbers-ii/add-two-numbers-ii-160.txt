/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    private int len = 0;

    private ListNode reverse(ListNode head) {
        len = 0;
        ListNode curr = head;
        ListNode next = null;
        ListNode prev = null;
        while (curr != null) {
            len++;
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        int list1Len = len;
        l2 = reverse(l2);
        int list2Len = len;
        int carry = 0;
        int sum = 0;
        ListNode larger = (list1Len > list2Len) ? l1 : l2;
        ListNode revHead = larger;
        ListNode smaller = (list1Len > list2Len) ? l2 : l1;
        ListNode prev = null;
        while (larger != null && smaller != null) {
            sum = larger.val + smaller.val + carry;
            carry = sum / 10;
            sum = sum % 10;
            larger.val = sum;
            prev = larger;
            larger = larger.next;
            smaller = smaller.next;
        }
        while (larger != null) {
            sum = larger.val + carry;
            carry = sum / 10;
            sum = sum % 10;
            larger.val = sum;
            prev = larger;
            larger = larger.next;
        }
        if (carry != 0) {
            ListNode newNode = new ListNode(carry);
            prev.next = newNode;
        }
        return reverse(revHead);
    }
}
