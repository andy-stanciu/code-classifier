/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseList(ListNode head) {
        ListNode temp = null;
        while (head != null) {
            ListNode next = head.next;
            head.next = temp;
            temp = head;
            head = next;
        }
        return temp;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverseList(l1);
        l2 = reverseList(l2);
        ListNode p = l1;
        ListNode q = l2;
        ListNode start = new ListNode();
        ListNode idx = start;
        int carry = 0;
        while (p != null && q != null) {
            ListNode newnode = new ListNode();
            int value = p.val + q.val + carry;
            newnode.val = value % 10;
            carry = value / 10;
            idx.next = newnode;
            idx = newnode;
            p = p.next;
            q = q.next;
        }
        while (p != null) {
            ListNode newnode = new ListNode();
            newnode.val = (p.val + carry) % 10;
            carry = (p.val + carry) / 10;
            p = p.next;
            idx.next = newnode;
            idx = newnode;
        }
        while (q != null) {
            ListNode newnode = new ListNode();
            newnode.val = (q.val + carry) % 10;
            carry = (q.val + carry) / 10;
            q = q.next;
            idx.next = newnode;
            idx = newnode;
        }
        if (carry != 0) {
            ListNode newnode = new ListNode();
            newnode.val = carry;
            idx.next = newnode;
            idx = newnode;
        }
        return reverseList(start.next);
    }
}
