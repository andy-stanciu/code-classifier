/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode list1 = reversepointer(l1);
        ListNode list2 = reversepointer(l2);
        ListNode ans = new ListNode();
        ListNode ansm = ans;
        int l1s = size(list1);
        int l2s = size(list2);
        int carry = 0;
        while (l1s > 0 && l2s > 0) {
            int sum = (list1.val + list2.val + carry) % 10;
            System.out.println(list1.val + " " + list2.val + " " + sum);
            carry = (list1.val + list2.val + carry) / 10;
            ListNode temp = new ListNode(sum);
            ans.next = temp;
            list1 = list1.next;
            list2 = list2.next;
            ans = temp;
            l1s--;
            l2s--;
        }
        while (l1s > 0) {
            int sum = (list1.val + carry) % 10;
            carry = (list1.val + carry) / 10;
            ListNode temp = new ListNode(sum);
            ans.next = temp;
            list1 = list1.next;
            ans = temp;
            l1s--;
        }
        while (l2s > 0) {
            int sum = (list2.val + carry) % 10;
            carry = (list2.val + carry) / 10;
            ListNode temp = new ListNode(sum);
            ans.next = temp;
            list2 = list2.next;
            ans = temp;
            l2s--;
        }
        if (carry > 0) {
            ListNode temp = new ListNode(carry);
            ans.next = temp;
        }
        ListNode ans2 = reversepointer(ansm.next);
        return ans2;
    }

    public ListNode reversepointer(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        while (curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    public int size(ListNode temp) {
        int size = 0;
        while (temp != null) {
            size++;
            temp = temp.next;
        }
        return size;
    }
}
