/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        //follow up
        int l1size = 0, l2size = 0;
        Stack<Integer> s1 = new Stack(), s2 = new Stack();
        while (l1 != null) {
            s1.push(l1.val);
            l1 = l1.next;
        }
        while (l2 != null) {
            s2.push(l2.val);
            l2 = l2.next;
        }
        ListNode last = null;
        int carry = 0;
        while (!(s1.isEmpty() && s2.isEmpty())) {
            int cur = carry;
            if (!s1.isEmpty())
                cur += s1.pop();
            if (!s2.isEmpty())
                cur += s2.pop();
            carry = cur / 10;
            cur %= 10;
            ListNode head = new ListNode(cur, last);
            last = head;
        }
        if (carry == 1)
            last = new ListNode(1, last);
        return last;
    }
}
