/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode r1 = reverse(l1), r2 = reverse(l2);
        ListNode curr = new ListNode(), head = curr;
        int carry = 0;
        while (r1 != null || r2 != null || carry > 0) {
            int v = r1 != null ? r1.val : 0;
            v += r2 != null ? r2.val : 0;
            v += carry;
            carry = v / 10;
            v %= 10;
            curr = curr.next = new ListNode(v);
            if (r1 != null)
                r1 = r1.next;
            if (r2 != null)
                r2 = r2.next;
        }
        return reverse(head.next);
    }

    private ListNode reverse(ListNode node) {
        if (node == null || node.next == null)
            return node;
        ListNode p = reverse(node.next);
        if (p != null) {
            node.next.next = node;
            node.next = null;
        }
        return p;
    }
}
