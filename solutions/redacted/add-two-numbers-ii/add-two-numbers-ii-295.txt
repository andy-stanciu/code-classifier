/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<Integer> st1 = new Stack<>();
        Stack<Integer> st2 = new Stack<>();
        ListNode temp1 = l1;
        ListNode temp2 = l2;
        while (temp1 != null) {
            st1.push(temp1.val);
            temp1 = temp1.next;
        }
        while (temp2 != null) {
            st2.push(temp2.val);
            temp2 = temp2.next;
        }
        int carry = 0;
        ListNode result = null;
        while (!st1.isEmpty() || !st2.isEmpty() || carry > 0) {
            int num1 = st1.isEmpty() ? 0 : st1.pop();
            int num2 = st2.isEmpty() ? 0 : st2.pop();
            int sum = num1 + num2 + carry;
            carry = sum / 10;
            ListNode newNode = new ListNode(sum % 10);
            newNode.next = result;
            result = newNode;
        }
        return result;
    }
}
