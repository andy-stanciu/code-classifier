/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<Integer> s1 = new Stack<>();
        Stack<Integer> s2 = new Stack<>();
        while (l1 != null && l2 != null) {
            s1.push(l1.val);
            s2.push(l2.val);
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            s1.push(l1.val);
            l1 = l1.next;
        }
        while (l2 != null) {
            s2.push(l2.val);
            l2 = l2.next;
        }
        int sum = 0;
        int carry = 0;
        ListNode newHead = null;
        while (!s1.isEmpty() && !s2.isEmpty()) {
            sum = s1.pop() + s2.pop() + carry;
            carry = sum / 10;
            ListNode tmp = new ListNode(sum % 10);
            tmp.next = newHead;
            newHead = tmp;
        }
        while (!s1.isEmpty()) {
            sum = s1.pop() + carry;
            carry = sum / 10;
            ListNode tmp = new ListNode(sum % 10);
            tmp.next = newHead;
            newHead = tmp;
        }
        while (!s2.isEmpty()) {
            sum = s2.pop() + carry;
            carry = sum / 10;
            ListNode tmp = new ListNode(sum % 10);
            tmp.next = newHead;
            newHead = tmp;
        }
        if (carry != 0) {
            ListNode tmp = new ListNode(carry);
            tmp.next = newHead;
            newHead = tmp;
        }
        return newHead;
    }
}
