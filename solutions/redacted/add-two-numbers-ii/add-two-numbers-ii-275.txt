class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<Integer> st1 = new Stack();
        Stack<Integer> st2 = new Stack();
        Stack<Integer> ans = new Stack();
        ListNode res = new ListNode();
        ListNode temp = res;
        while (l1 != null || l2 != null) {
            if (l1 != null) {
                st1.push(l1.val);
                l1 = l1.next;
            }
            if (l2 != null) {
                st2.push(l2.val);
                l2 = l2.next;
            }
        }
        int carry = 0;
        while (!st1.isEmpty() || !st2.isEmpty() || carry != 0) {
            int sum = 0;
            if (!st1.isEmpty()) {
                sum += st1.pop();
            }
            if (!st2.isEmpty()) {
                sum += st2.pop();
            }
            sum += carry;
            carry = sum / 10;
            ans.push(sum % 10);
        }
        while (!ans.isEmpty()) {
            ListNode newnode = new ListNode(ans.pop());
            temp.next = newnode;
            temp = temp.next;
        }
        return res.next;
    }
}
