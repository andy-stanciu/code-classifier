/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public int len(ListNode node) {
        ListNode curr = node;
        int cou = 0;
        while (curr != null) {
            cou++;
            curr = curr.next;
        }
        return cou;
    }

    public ListNode rev(ListNode node) {
        ListNode prev = node;
        ListNode curr = node.next;
        while (curr != null) {
            ListNode fut = curr.next;
            curr.next = prev;
            prev = curr;
            curr = fut;
        }
        node.next = null;
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        int len1 = len(l1);
        int len2 = len(l2);
        ListNode curr1 = (len1 >= len2) ? rev(l1) : rev(l2);
        ListNode curr2 = (len1 < len2) ? rev(l1) : rev(l2);
        int carry = 0;
        ListNode ans = curr1;
        while (curr2 != null) {
            int temp = (curr1.val + curr2.val + carry) % 10;
            carry = (curr1.val + curr2.val + carry) / 10;
            curr1.val = temp;
            if (curr1.next == null && carry != 0) {
                ListNode car = new ListNode(carry);
                carry = 0;
                curr1.next = car;
                car.next = null;
            }
            curr1 = curr1.next;
            curr2 = curr2.next;
        }
        while (carry != 0 && curr1 != null) {
            int temp = (curr1.val + carry) % 10;
            carry = (curr1.val + carry) / 10;
            curr1.val = temp;
            if (curr1.next == null && carry != 0) {
                ListNode car = new ListNode(carry);
                curr1.next = car;
                car.next = null;
                break;
            }
            curr1 = curr1.next;
        }
        return rev(ans);
    }
}
