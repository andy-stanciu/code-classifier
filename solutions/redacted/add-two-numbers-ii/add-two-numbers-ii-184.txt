/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode l3 = reverseList(l1);
        ListNode l4 = reverseList(l2);
        ListNode temp1 = l3, temp2 = l4;
        ListNode dummy = new ListNode(-1);
        ListNode curr = dummy;
        int carry = 0;
        while (temp1 != null && temp2 != null) {
            int num = temp1.val + temp2.val + carry;
            carry = num / 10;
            num = num % 10;
            ListNode var1 = new ListNode(num);
            curr.next = var1;
            curr = var1;
            temp1 = temp1.next;
            temp2 = temp2.next;
        }
        while (temp1 != null) {
            int num = temp1.val + carry;
            carry = num / 10;
            num = num % 10;
            ListNode var1 = new ListNode(num);
            curr.next = var1;
            curr = var1;
            temp1 = temp1.next;
        }
        while (temp2 != null) {
            int num = temp2.val + carry;
            carry = num / 10;
            num = num % 10;
            ListNode var1 = new ListNode(num);
            curr.next = var1;
            curr = var1;
            temp2 = temp2.next;
        }
        if (carry != 0) {
            ListNode var1 = new ListNode(carry);
            curr.next = var1;
            curr = var1;
        }
        ListNode newHead = reverseList(dummy.next);
        dummy.next = null;
        return newHead;
    }

    public ListNode reverseList(ListNode head) {
        if (head == null || head.next == null)
            return head;
        ListNode newHead = reverseList(head.next);
        ListNode front = head.next;
        head.next = null;
        front.next = head;
        return newHead;
    }
}
