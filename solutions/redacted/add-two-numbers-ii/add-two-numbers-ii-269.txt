/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        //create ListNode for traversal and creation of new linked list
        ListNode newNode = new ListNode(), curr1 = reverse(l1), curr2 = reverse(l2);
        ListNode head = newNode;
        int carry = 0;
        while (curr1 != null && curr2 != null) {
            int sum = curr1.val + curr2.val + carry;
            ListNode node = new ListNode(sum % 10);
            carry = sum / 10;
            newNode.next = node;
            newNode = newNode.next;
            curr1 = curr1.next;
            curr2 = curr2.next;
        }
        while (curr1 != null) {
            int sum = curr1.val + carry;
            ListNode node = new ListNode(sum % 10);
            newNode.next = node;
            newNode = newNode.next;
            carry = sum / 10;
            curr1 = curr1.next;
        }
        while (curr2 != null) {
            int sum = curr2.val + carry;
            ListNode node = new ListNode(sum % 10);
            newNode.next = node;
            newNode = newNode.next;
            carry = sum / 10;
            curr2 = curr2.next;
        }
        if (carry != 0) {
            ListNode node = new ListNode(carry);
            newNode.next = node;
        }
        //head was kept dummy(newNode) whoese intial value was empty,
        //newNode was kept empty at first to make traversal and creation of new linkedlist easy
        //linked list starts from head.next
        return reverse(head.next);
    }

    public ListNode reverse(ListNode head) {
        ListNode prev = null, curr = head, next = head.next;
        while (curr != null) {
            curr.next = prev;
            prev = curr;
            curr = next;
            if (next != null) {
                next = next.next;
            }
        }
        return prev;
    }
}
