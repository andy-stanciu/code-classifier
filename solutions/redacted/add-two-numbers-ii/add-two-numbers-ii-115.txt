/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode curr = l1;
        ListNode prev = null;
        while (curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        ListNode temp1 = prev;
        l1 = temp1;
        curr = l2;
        prev = null;
        while (curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        ListNode temp2 = prev;
        l2 = temp2;
        int carry = 0;
        ListNode th = new ListNode(-1);
        ListNode dn = th;
        while (temp1 != null || temp2 != null) {
            int x = temp1 != null ? temp1.val : 0;
            int y = temp2 != null ? temp2.val : 0;
            int sum = x + y + carry;
            carry = sum / 10;
            ListNode p = new ListNode(sum % 10);
            dn.next = p;
            dn = dn.next;
            if (temp1 != null) {
                temp1 = temp1.next;
            }
            if (temp2 != null) {
                temp2 = temp2.next;
            }
        }
        if (carry == 1) {
            ListNode p = new ListNode(1);
            dn.next = p;
            dn = dn.next;
        }
        th = th.next;
        curr = th;
        prev = null;
        while (curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}
