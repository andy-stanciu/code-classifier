/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        ListNode result = sum(l1, l2);
        result = reverse(result);
        return result;
    }

    public ListNode reverse(ListNode head) {
        ListNode curr = head;
        ListNode next = null;
        ListNode prev = null;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    public ListNode sum(ListNode l1, ListNode l2) {
        ListNode first = l1;
        ListNode second = l2;
        ListNode res = new ListNode(0);
        ListNode head = res;
        int sum = 0;
        int carry = 0;
        while (first != null && second != null) {
            if (first.val + second.val + carry > 9) {
                sum = (first.val + second.val + carry) % 10;
                carry = 1;
            } else {
                sum = first.val + second.val + carry;
                carry = 0;
            }
            res.next = new ListNode(sum);
            res = res.next;
            first = first.next;
            second = second.next;
        }
        while (first != null) {
            if (first.val + carry > 9) {
                sum = (first.val + carry) % 10;
                carry = 1;
            } else {
                sum = first.val + carry;
                carry = 0;
            }
            res.next = new ListNode(sum);
            first = first.next;
            res = res.next;
        }
        while (second != null) {
            if (second.val + carry > 9) {
                sum = (second.val + carry) % 10;
                carry = 1;
            } else {
                sum = second.val + carry;
                carry = 0;
            }
            res.next = new ListNode(sum);
            res = res.next;
            second = second.next;
        }
        if (carry == 1) {
            res.next = new ListNode(1);
        }
        return head.next;
    }
}
