/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode newl1 = reverseList(l1);
        ListNode newl2 = reverseList(l2);
        ListNode l3 = new ListNode(0);
        ListNode head = l3;
        int carry = 0;
        while (newl1 != null && newl2 != null) {
            int value = newl1.val + newl2.val + carry;
            carry = value / 10;
            l3.next = new ListNode(value % 10);
            l3 = l3.next;
            newl1 = newl1.next;
            newl2 = newl2.next;
        }
        while (newl1 != null) {
            int value = newl1.val + carry;
            carry = value / 10;
            l3.next = new ListNode(value % 10);
            l3 = l3.next;
            newl1 = newl1.next;
        }
        while (newl2 != null) {
            int value = newl2.val + carry;
            carry = value / 10;
            l3.next = new ListNode(value % 10);
            l3 = l3.next;
            newl2 = newl2.next;
        }
        if (carry > 0) {
            l3.next = new ListNode(carry);
        }
        return reverseList(head.next);
    }

    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode cur = head;
        while (cur != null) {
            ListNode nextOne = cur.next;
            cur.next = prev;
            prev = cur;
            cur = nextOne;
        }
        return prev;
    }
}
