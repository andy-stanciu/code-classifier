/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        //step 1 : reverse the linked lists then perform .
        ListNode list1 = reverse(l1);
        ListNode list2 = reverse(l2);
        //step 2 : add two nuber using linked list.
        ListNode dummy = new ListNode(-1);
        ListNode temp = dummy;
        int carry = 0;
        while (list1 != null || list2 != null || carry != 0) {
            int digit1 = (list1 != null) ? list1.val : 0;
            int digit2 = (list2 != null) ? list2.val : 0;
            int sum = digit1 + digit2 + carry;
            int digit = sum % 10;
            carry = sum / 10;
            ListNode newNode = new ListNode(digit);
            temp.next = newNode;
            temp = temp.next;
            list1 = (list1 != null) ? list1.next : null;
            list2 = (list2 != null) ? list2.next : null;
        }
        //step 3 : reverse the final linked list.
        ListNode res = reverse(dummy.next);
        return res;
    }

    public ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode fut = null;
        ListNode current = head;
        while (current != null) {
            fut = current.next;
            current.next = prev;
            prev = current;
            current = fut;
        }
        return prev;
    }
}
