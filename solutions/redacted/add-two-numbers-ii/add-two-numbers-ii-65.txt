/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverse(ListNode l) {
        if (l == null || l.next == null)
            return l;
        ListNode curr = l;
        ListNode prev = null;
        while (curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode d1 = reverse(l1);
        ListNode d2 = reverse(l2);
        int carry = 0;
        ListNode dummy = new ListNode(0);
        ListNode temp = dummy;
        while (d1 != null || d2 != null) {
            int sum = carry;
            if (d1 != null) {
                sum += d1.val;
                d1 = d1.next;
            }
            if (d2 != null) {
                sum += d2.val;
                d2 = d2.next;
            }
            carry = sum / 10;
            temp.next = new ListNode(sum % 10);
            temp = temp.next;
        }
        if (carry > 0) {
            temp.next = new ListNode(carry);
            temp = temp.next;
        }
        return reverse(dummy.next);
    }
}
