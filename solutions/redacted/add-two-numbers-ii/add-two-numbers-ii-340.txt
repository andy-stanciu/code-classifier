/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        ListNode t1 = l1;
        ListNode t2 = l2;
        int c = 0;
        int sol = 0;
        ListNode res = null;
        ListNode t = null;
        while (t1 != null || t2 != null) {
            if (t1 != null && t2 != null) {
                sol = t1.val + t2.val + c;
            } else if (t1 != null) {
                sol = t1.val + c;
            } else if (t2 != null) {
                sol = t2.val + c;
            }
            if (res == null) {
                res = new ListNode(sol % 10);
            } else {
                t = new ListNode(sol % 10);
                t.next = res;
                res = t;
            }
            sol = sol / 10;
            c = sol % 10;
            if (t1 != null)
                t1 = t1.next;
            if (t2 != null)
                t2 = t2.next;
        }
        if (c != 0) {
            t = new ListNode(c);
            t.next = res;
            res = t;
        }
        return res;
    }

    ListNode reverse(ListNode l1) {
        ListNode n = null;
        ListNode p = null;
        ListNode t = l1;
        ListNode te = null;
        while (t != null) {
            te = t.next;
            t.next = p;
            p = t;
            t = te;
        }
        return p;
    }
}
