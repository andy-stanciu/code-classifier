/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        String s1 = "", s2 = "";
        while (l1 != null || l2 != null) {
            if (l1 != null)
                s1 += String.valueOf(l1.val);
            else
                s1 = String.valueOf(0) + s1;
            if (l2 != null)
                s2 += String.valueOf(l2.val);
            else
                s2 = String.valueOf(0) + s2;
            if (l1 != null)
                l1 = l1.next;
            if (l2 != null)
                l2 = l2.next;
        }
        int carry = 0;
        ListNode ans = null;
        for (int i = s1.length() - 1; i >= 0; i--) {
            int sum = Character.getNumericValue(s1.charAt(i)) + Character.getNumericValue(s2.charAt(i)) + carry;
            if (sum > 9) {
                carry = 1;
                sum = sum % 10;
            } else
                carry = 0;
            if (ans == null) {
                ans = new ListNode(sum);
            } else {
                ListNode node = new ListNode(sum);
                node.next = ans;
                ans = node;
            }
        }
        if (carry == 1) {
            ListNode node = new ListNode(carry);
            node.next = ans;
            ans = node;
        }
        return ans;
    }
}
