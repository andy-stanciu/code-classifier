/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    ListNode reverse(ListNode head) {
        ListNode curr = head, prev = null, next = null;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        boolean carry = false;
        ListNode res = new ListNode();
        ListNode head = res;
        while (l1 != null && l2 != null) {
            int sum = 0;
            if (carry)
                sum = l1.val + l2.val + 1;
            else
                sum = l1.val + l2.val;
            if (sum > 9) {
                carry = true;
                sum = sum - 10;
            } else {
                carry = false;
            }
            res.val = sum;
            ListNode newNode = new ListNode();
            res.next = newNode;
            res = res.next;
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            int sum = 0;
            if (carry)
                sum = l1.val + 1;
            else
                sum = l1.val;
            if (sum > 9) {
                carry = true;
                sum = sum - 10;
            } else {
                carry = false;
            }
            res.val = sum;
            ListNode newNode = new ListNode();
            res.next = newNode;
            res = res.next;
            l1 = l1.next;
        }
        while (l2 != null) {
            int sum = 0;
            if (carry)
                sum = l2.val + 1;
            else
                sum = l2.val;
            if (sum > 9) {
                carry = true;
                sum = sum - 10;
            } else {
                carry = false;
            }
            res.val = sum;
            ListNode newNode = new ListNode();
            res.next = newNode;
            res = res.next;
            l2 = l2.next;
        }
        if (carry) {
            //for edge cases like 5+5
            res.val = 1;
            ListNode newNode = new ListNode();
            res.next = newNode;
            res = res.next;
        }
        return reverse(head).next;
    }
}
