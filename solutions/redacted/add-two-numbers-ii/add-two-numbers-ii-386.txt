/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode result = null;
        Stack<Integer> s1 = listToStack(l1);
        Stack<Integer> s2 = listToStack(l2);
        int carry = 0;
        while (!s1.isEmpty() || !s2.isEmpty() || carry != 0) {
            int sum = 0 + carry;
            if (!s1.isEmpty()) {
                sum += s1.pop();
            }
            if (!s2.isEmpty()) {
                sum += s2.pop();
            }
            ListNode node = new ListNode(sum % 10);
            carry = sum / 10;
            node.next = result;
            result = node;
        }
        return result;
    }

    private Stack<Integer> listToStack(ListNode l1) {
        Stack<Integer> stk = new Stack<>();
        while (l1 != null) {
            stk.push(l1.val);
            l1 = l1.next;
        }
        return stk;
    }
}
