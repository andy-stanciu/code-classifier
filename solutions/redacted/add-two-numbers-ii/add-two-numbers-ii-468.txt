/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        // get both len
        ListNode tmp = l1.next;
        int l1Count = 1;
        while (tmp != null) {
            tmp = tmp.next;
            l1Count += 1;
        }
        tmp = l2.next;
        int l2Count = 1;
        while (tmp != null) {
            tmp = tmp.next;
            l2Count += 1;
        }
        ListNode head = null;
        int finalCarry = 0;
        // iterate from the longer one
        if (l1Count >= l2Count) {
            finalCarry = helper(l1, l2, 0, l1Count - l2Count);
            head = l1;
        } else {
            finalCarry = helper(l2, l1, 0, l2Count - l1Count);
            head = l2;
        }
        if (finalCarry == 1) {
            return new ListNode(1, head);
        }
        return head;
    }

    // create helper method, take listnode and return carry
    public int helper(ListNode longList, ListNode shortList, int layer, int threshold) {
        // if hits end, just retrun 0;
        if (longList == null && shortList == null) {
            return 0;
        }
        // if not reach matching position for adding both, just passing the short list itself and add 0 for the sum
        int curSum = longList.val + ((layer >= threshold) ? shortList.val : 0) + helper(longList.next, ((layer >= threshold) ? shortList.next : shortList), layer + 1, threshold);
        longList.val = curSum % 10;
        return curSum / 10;
    }
}
