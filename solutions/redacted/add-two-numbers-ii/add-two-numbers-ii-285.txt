/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        if (l1 == null && l2 == null)
            return l1;
        if (l1 == null)
            return l2;
        if (l2 == null)
            return l1;
        ListNode first = reverse(l1);
        ListNode second = reverse(l2);
        ListNode dummy = new ListNode(-1);
        ListNode tail = dummy;
        int carry = 0;
        while (first != null && second != null) {
            int val1 = 0;
            if (first != null) {
                val1 = first.val;
            }
            int val2 = 0;
            if (second != null) {
                val2 = second.val;
            }
            int val = val1 + val2 + carry;
            carry = val / 10;
            val = val % 10;
            ListNode node = new ListNode(val);
            tail.next = node;
            tail = tail.next;
            first = first.next;
            second = second.next;
        }
        while (first != null) {
            int val1 = 0;
            if (first != null) {
                val1 = first.val;
            }
            int val = val1 + carry;
            carry = val / 10;
            val = val % 10;
            ListNode node = new ListNode(val);
            tail.next = node;
            tail = tail.next;
            first = first.next;
        }
        while (second != null) {
            int val2 = 0;
            if (second != null) {
                val2 = second.val;
            }
            int val = val2 + carry;
            carry = val / 10;
            val = val % 10;
            ListNode node = new ListNode(val);
            tail.next = node;
            tail = tail.next;
            second = second.next;
        }
        if (carry != 0) {
            tail.next = new ListNode(carry);
            tail = tail.next;
        }
        tail.next = null;
        return reverse(dummy.next);
    }

    private ListNode reverse(ListNode head) {
        if (head == null || head.next == null)
            return head;
        ListNode prev = null;
        ListNode next = null;
        ListNode curr = head;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}
