/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        List<Integer> number1 = toList(l1);
        List<Integer> number2 = toList(l2);
        ListNode result = null;
        int carry = 0;
        while ((!number1.isEmpty()) || (!number2.isEmpty()) || (carry == 1)) {
            int currentDigitValue = getLastDigit(number1) + getLastDigit(number2) + carry;
            if (currentDigitValue > 9) {
                carry = 1;
                currentDigitValue -= 10;
            } else {
                carry = 0;
            }
            result = new ListNode(currentDigitValue, result);
            removeLastDigitInPlace(number1);
            removeLastDigitInPlace(number2);
        }
        return result;
    }

    private List<Integer> toList(ListNode node) {
        List<Integer> result = new ArrayList<>();
        while (node != null) {
            result.add(node.val);
            node = node.next;
        }
        return result;
    }

    private int getLastDigit(List<Integer> number) {
        if (number.isEmpty()) {
            return 0;
        }
        return number.get(number.size() - 1);
    }

    private void removeLastDigitInPlace(List<Integer> number) {
        if (!number.isEmpty()) {
            number.remove(number.size() - 1);
        }
    }
}
