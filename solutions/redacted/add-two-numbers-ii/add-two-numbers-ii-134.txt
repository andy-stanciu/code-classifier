/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseList(ListNode head) {
        ListNode node = null;
        while (head != null) {
            ListNode temp = head.next;
            head.next = node;
            node = head;
            head = temp;
        }
        return node;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverseList(l1);
        l2 = reverseList(l2);
        ListNode head = new ListNode((l1.val + l2.val) % 10);
        int carry = (l1.val + l2.val) / 10;
        ListNode curr = head;
        l1 = l1.next;
        l2 = l2.next;
        while (l1 != null && l2 != null) {
            int ans = l1.val + l2.val + carry;
            carry = ans / 10;
            ans = ans % 10;
            ListNode newnode = new ListNode(ans);
            curr.next = newnode;
            curr = newnode;
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            int ans = l1.val + carry;
            carry = ans / 10;
            ans = ans % 10;
            ListNode newnode = new ListNode(ans);
            curr.next = newnode;
            curr = newnode;
            l1 = l1.next;
        }
        while (l2 != null) {
            int ans = l2.val + carry;
            carry = ans / 10;
            ans = ans % 10;
            ListNode newnode = new ListNode(ans);
            curr.next = newnode;
            curr = newnode;
            l2 = l2.next;
        }
        if (carry != 0) {
            ListNode newnode = new ListNode(carry);
            curr.next = newnode;
        }
        return reverseList(head);
    }
}
