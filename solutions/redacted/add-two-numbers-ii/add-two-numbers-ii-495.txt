/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode temp1 = reverseList(l1);
        ListNode temp2 = reverseList(l2);
        ListNode temp = null;
        int carry = 0;
        while (temp1 != null && temp2 != null) {
            int sum = temp1.val + temp2.val + carry;
            ListNode newList = new ListNode(sum % 10);
            carry = sum / 10;
            sum = 0;
            newList.next = temp;
            temp = newList;
            temp1 = temp1.next;
            temp2 = temp2.next;
        }
        while (temp1 != null) {
            int sum = temp1.val + carry;
            ListNode newList = new ListNode(sum % 10);
            carry = sum / 10;
            sum = 0;
            newList.next = temp;
            temp = newList;
            temp1 = temp1.next;
        }
        while (temp2 != null) {
            int sum = temp2.val + carry;
            ListNode newList = new ListNode(sum % 10);
            carry = sum / 10;
            sum = 0;
            newList.next = temp;
            temp = newList;
            temp2 = temp2.next;
        }
        if (carry != 0) {
            ListNode newList = new ListNode(carry);
            newList.next = temp;
            temp = newList;
        }
        return temp;
    }

    public ListNode reverseList(ListNode head) {
        if (head == null) {
            return head;
        }
        ListNode prev = null;
        ListNode present = head;
        ListNode next = present.next;
        while (present != null) {
            present.next = prev;
            prev = present;
            present = next;
            if (next != null) {
                next = next.next;
            }
        }
        return prev;
    }
}
