/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode revrsel1 = reverse(l1, null);
        ListNode revrsel2 = reverse(l2, null);
        return reverse(solve(revrsel1, revrsel2, 0), null);
    }

    public ListNode solve(ListNode l1, ListNode l2, int carry) {
        if (l1 == null && l2 == null)
            return null;
        if (l1 == null)
            l1 = new ListNode(0);
        ;
        if (l2 == null)
            l2 = new ListNode(0);
        int sum = l1.val + l2.val + carry;
        carry = 0;
        if (sum > 9) {
            carry = sum / 10;
            if (l1.next == null)
                l1.next = new ListNode(0);
        }
        ListNode head = new ListNode(sum % 10);
        head.next = solve(l1.next, l2.next, carry);
        return head;
    }

    public ListNode reverse(ListNode list, ListNode prev) {
        if (list == null)
            return prev;
        ListNode temp = list.next;
        list.next = prev;
        return reverse(temp, list);
    }
}
