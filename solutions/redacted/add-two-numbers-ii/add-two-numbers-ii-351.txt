class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        // create two stacks to store the digits of each list in reverse order
        Stack<Integer> stack1 = new Stack<>();
        Stack<Integer> stack2 = new Stack<>();
        // push the digits of l1 to stack1
        while (l1 != null) {
            stack1.push(l1.val);
            l1 = l1.next;
        }
        // push the digits of l2 to stack2
        while (l2 != null) {
            stack2.push(l2.val);
            l2 = l2.next;
        }
        // create a dummy node to store the result list
        ListNode dummy = new ListNode(0);
        // initialize the carry to 0
        int carry = 0;
        // while both stacks are not empty or carry is positive
        while (!stack1.isEmpty() || !stack2.isEmpty() || carry > 0) {
            // pop the top digit from each stack, or use 0 if the stack is empty
            int x = stack1.isEmpty() ? 0 : stack1.pop();
            int y = stack2.isEmpty() ? 0 : stack2.pop();
            // add the digits and the carry
            int sum = x + y + carry;
            // update the carry
            carry = sum / 10;
            // create a new node with the last digit of the sum
            ListNode node = new ListNode(sum % 10);
            // insert the node at the beginning of the result list
            node.next = dummy.next;
            dummy.next = node;
        }
        // return the result list without the dummy node
        return dummy.next;
    }
}
