/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    //the function to reverse the linked List
    public ListNode reverse(ListNode l1) {
        if (l1.next == null) {
            return l1;
        }
        ListNode prev = null;
        ListNode curr = l1;
        while (curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        //reversing the two linked list
        l1 = reverse(l1);
        l2 = reverse(l2);
        //adding the nodes in linked list
        ListNode dummy = new ListNode();
        ListNode tail = dummy;
        int c = 0;
        while (l1 != null || l2 != null || c != 0) {
            int v1 = l1 != null ? l1.val : 0;
            int v2 = l2 != null ? l2.val : 0;
            int sum = v1 + v2 + c;
            c = sum / 10;
            int value = sum % 10;
            tail.next = new ListNode(value);
            tail = tail.next;
            l1 = l1 != null ? l1.next : null;
            l2 = l2 != null ? l2.next : null;
        }
        //since we reversed the list previously,
        // we have to reverse it again to match the output
        dummy = reverse(dummy.next);
        return dummy;
    }
}
