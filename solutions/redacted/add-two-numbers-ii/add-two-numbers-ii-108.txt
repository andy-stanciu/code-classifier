/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseLL(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        ListNode next = null;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode rl1 = reverseLL(l1);
        ListNode rl2 = reverseLL(l2);
        ListNode one = rl1;
        ListNode var1 = rl2;
        ListNode temp = null;
        int carry = 0;
        while (one != null || var1 != null) {
            int n1 = (one != null) ? one.val : 0;
            int n2 = (var1 != null) ? var1.val : 0;
            int sum = n1 + n2 + carry;
            carry = sum / 10;
            ListNode newNode = new ListNode(sum % 10);
            newNode.next = temp;
            temp = newNode;
            if (one != null) {
                one = one.next;
            }
            if (var1 != null) {
                var1 = var1.next;
            }
        }
        if (carry > 0) {
            ListNode c = new ListNode(carry);
            c.next = temp;
            temp = c;
        }
        return temp;
    }
}
