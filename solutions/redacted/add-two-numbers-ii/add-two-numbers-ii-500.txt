class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode head1 = reverse(l1);
        ListNode head2 = reverse(l2);
        int carry = 0;
        ListNode result = new ListNode(0);
        ListNode resultHead = result;
        while (head1 != null && head2 != null) {
            int var1 = head1.val + head2.val + carry;
            carry = var1 / 10;
            ListNode newNode = new ListNode(var1 % 10);
            result.next = newNode;
            result = newNode;
            head1 = head1.next;
            head2 = head2.next;
        }
        while (head1 != null) {
            int var1 = head1.val + carry;
            carry = var1 / 10;
            ListNode newNode = new ListNode(var1 % 10);
            result.next = newNode;
            result = newNode;
            head1 = head1.next;
        }
        while (head2 != null) {
            int var1 = head2.val + carry;
            carry = var1 / 10;
            ListNode newNode = new ListNode(var1 % 10);
            result.next = newNode;
            result = newNode;
            head2 = head2.next;
        }
        if (carry > 0) {
            ListNode newNode = new ListNode(carry);
            result.next = newNode;
            result = newNode;
        }
        return reverse(resultHead.next);
    }

    public static ListNode reverse(ListNode head) {
        ListNode temp = head;
        ListNode prev = null;
        while (temp != null) {
            ListNode temp2 = temp.next;
            temp.next = prev;
            prev = temp;
            temp = temp2;
        }
        return prev;
    }
}
