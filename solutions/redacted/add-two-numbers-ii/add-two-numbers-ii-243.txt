/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode rev(ListNode l1) {
        ListNode p1 = new ListNode();
        p1 = l1;
        ListNode pre = new ListNode();
        pre = null;
        ListNode next = new ListNode();
        next = l1;
        while (p1 != null) {
            next = p1.next;
            p1.next = pre;
            pre = p1;
            p1 = next;
        }
        return pre;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode c = rev(l1);
        ListNode k = rev(l2);
        int carry = 0;
        ListNode ans = new ListNode();
        ListNode a = new ListNode();
        a = ans;
        while (c != null && k != null) {
            int q = c != null ? c.val : 0;
            int b = k != null ? k.val : 0;
            ans.val = (q + b + carry) % 10;
            carry = (int) ((q + b + carry) / 10);
            c = c.next;
            k = k.next;
            if (c != null && k != null) {
                ans.next = new ListNode();
                ans = ans.next;
            }
        }
        while (c != null) {
            ans.next = new ListNode();
            ans = ans.next;
            ans.val = (c.val + carry) % 10;
            carry = (int) ((c.val + carry) / 10);
            c = c.next;
        }
        while (k != null) {
            ans.next = new ListNode();
            ans = ans.next;
            ans.val = (k.val + carry) % 10;
            carry = (int) ((k.val + carry) / 10);
            k = k.next;
        }
        if (carry != 0) {
            ans.next = new ListNode();
            ans = ans.next;
            ans.val = carry;
            carry = 0;
        }
        return rev(a);
    }
}
