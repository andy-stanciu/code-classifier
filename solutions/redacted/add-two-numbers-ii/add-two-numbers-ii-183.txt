/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverseList(l1);
        l2 = reverseList(l2);
        ListNode result = new ListNode();
        ListNode head = result;
        int overflow = 0;
        do {
            int val = l1.val + l2.val + overflow;
            if (val < 10) {
                result.val = val;
                overflow = 0;
            } else {
                overflow = val / 10;
                result.val = val % 10;
            }
            if (l1.next == null && l2.next == null)
                break;
            l1 = l1.next == null ? new ListNode(0) : l1.next;
            l2 = l2.next == null ? new ListNode(0) : l2.next;
            result.next = new ListNode();
            result = result.next;
        } while (true);
        if (overflow > 0) {
            result.next = new ListNode(overflow);
        }
        return reverseList(head);
    }

    private static ListNode reverseList(ListNode list) {
        ListNode prev = null;
        ListNode current = list;
        ListNode next = null;
        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }
}
