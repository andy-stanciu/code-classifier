/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ArrayList<Integer> arr = new ArrayList<>();
        ArrayList<Integer> list1 = new ArrayList<>();
        /* Array to 
store the first linked list */
        ArrayList<Integer> list2 = new ArrayList<>();
        /* Array to 
store the second linked list */
        ListNode temp_node1 = l1;
        ListNode temp_node2 = l2;
        while (temp_node1 != null) {
            list1.add(temp_node1.val);
            temp_node1 = temp_node1.next;
        }
        while (temp_node2 != null) {
            list2.add(temp_node2.val);
            temp_node2 = temp_node2.next;
        }
        Collections.reverse(list1);
        Collections.reverse(list2);
        int carry = 0;
        int i = 0;
        int j = 0;
        while (i <= list1.size() - 1 || j <= list2.size() - 1 || carry != 0) {
            int digit1 = (i <= list1.size() - 1) ? (list1.get(i)) : 0;
            int digit2 = (j <= list2.size() - 1) ? (list2.get(j)) : 0;
            int num = digit1 + digit2 + carry;
            carry = num / 10;
            num = num % 10;
            arr.add(num);
            i++;
            j++;
        }
        Collections.reverse(arr);
        ListNode new_head = new ListNode(arr.get(0));
        ListNode mover = new_head;
        for (int t = 1; t < arr.size(); t++) {
            ListNode temp = new ListNode(arr.get(t));
            mover.next = temp;
            mover = temp;
        }
        return new_head;
    }
}
