/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    int count(ListNode n1) {
        ListNode temp = n1;
        int count = 0;
        while (temp != null) {
            count++;
            temp = temp.next;
        }
        return count;
    }

    BigInteger convertToNumber(ListNode node) {
        ListNode temp = node;
        String num = "";
        int nodes = count(node);
        while (nodes != 0) {
            num += String.valueOf(temp.val);
            temp = temp.next;
            --nodes;
        }
        return new BigInteger(num);
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        BigInteger number1 = convertToNumber(l1);
        BigInteger number2 = convertToNumber(l2);
        BigInteger num3 = number2.add(number1);
        String number3 = String.valueOf(num3);
        ListNode head = null;
        ListNode temp1 = null;
        for (char c : number3.toCharArray()) {
            if (head == null && temp1 == null) {
                head = new ListNode(Integer.parseInt(String.valueOf(c)));
                temp1 = head;
            } else {
                ListNode temp = new ListNode(Integer.parseInt(String.valueOf(c)));
                temp1.next = temp;
                temp1 = temp1.next;
            }
        }
        return head;
    }
}
