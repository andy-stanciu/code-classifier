/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        List<Integer> n1 = new ArrayList<Integer>();
        List<Integer> n2 = new ArrayList<Integer>();
        List<Integer> ans = new ArrayList<Integer>();
        while (l1 != null) {
            n1.add(0, l1.val);
            l1 = l1.next;
        }
        while (l2 != null) {
            n2.add(0, l2.val);
            l2 = l2.next;
        }
        int i = 0;
        int j = 0;
        boolean carry = false;
        while (i < n1.size() && j < n2.size()) {
            int sum = n1.get(i++) + n2.get(j++);
            if (carry) {
                sum++;
                carry = false;
            }
            if (sum > 9) {
                carry = true;
            }
            ans.add(0, sum % 10);
        }
        while (i < n1.size()) {
            int sum = n1.get(i++);
            if (carry) {
                sum++;
                carry = false;
            }
            if (sum > 9) {
                carry = true;
            }
            ans.add(0, sum % 10);
        }
        while (j < n2.size()) {
            int sum = n2.get(j++);
            if (carry) {
                sum++;
                carry = false;
            }
            if (sum > 9) {
                carry = true;
            }
            ans.add(0, sum % 10);
        }
        if (carry) {
            ans.add(0, 1);
        }
        System.out.println(ans);
        ListNode head = new ListNode(0);
        ListNode temp = head;
        for (int y = 0; y < ans.size(); y++) {
            temp.next = new ListNode();
            temp.next.val = ans.get(y);
            temp = temp.next;
        }
        return head.next;
    }
}
