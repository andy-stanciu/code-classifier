class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        // create two stacks
        Stack<ListNode> stack1 = new Stack<>();
        Stack<ListNode> stack2 = new Stack<>();
        stack1.add(l1);
        stack2.add(l2);
        // Add next node on top of the the stack
        // This way we can access list nodes in reverse from stacks.
        while (stack1.peek().next != null) {
            stack1.add(stack1.peek().next);
        }
        while (stack2.peek().next != null) {
            stack2.add(stack2.peek().next);
        }
        // Process nodes from top of stacks.
        int carry = 0;
        ListNode result = null;
        while (!stack1.isEmpty() || !stack2.isEmpty() || carry != 0) {
            int num = carry + (stack1.isEmpty() ? 0 : stack1.pop().val) + (stack2.isEmpty() ? 0 : stack2.pop().val);
            ListNode newNode = new ListNode(num % 10);
            carry = num / 10;
            newNode.next = result;
            result = newNode;
        }
        return result;
    }
}
