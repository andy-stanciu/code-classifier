/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        ListNode head = null;
        int sum = 0, carry = 0;
        while (l1 != null && l2 != null) {
            sum = l1.val + l2.val + carry;
            //alternative carry = sum % 10
            if (sum > 9) {
                carry = 1;
                sum -= 10;
            } else
                carry = 0;
            ListNode node = new ListNode(sum);
            node.next = head;
            head = node;
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            sum = l1.val + carry;
            if (sum > 9) {
                carry = 1;
                sum -= 10;
            } else
                carry = 0;
            ListNode node = new ListNode(sum);
            node.next = head;
            head = node;
            l1 = l1.next;
        }
        while (l2 != null) {
            sum = l2.val + carry;
            if (sum > 9) {
                carry = 1;
                sum -= 10;
            } else
                carry = 0;
            ListNode node = new ListNode(sum);
            node.next = head;
            head = node;
            l2 = l2.next;
        }
        if (carry == 1) {
            ListNode node = new ListNode(1);
            node.next = head;
            head = node;
        }
        return head;
    }

    //function to reverse linkedlist
    ListNode reverse(ListNode curr) {
        ListNode prev = null, next = null;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        //new head after reversing the LL
        return prev;
    }
}
