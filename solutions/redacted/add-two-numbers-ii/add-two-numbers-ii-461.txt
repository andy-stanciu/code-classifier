/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    ListNode reverse(ListNode root) {
        ListNode curr = root;
        ListNode prev = null;
        ListNode nextnode = root;
        while (curr.next != null) {
            nextnode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextnode;
            nextnode = nextnode.next;
        }
        curr.next = prev;
        return curr;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        ListNode ans = null;
        int rem = 0;
        while (l1 != null && l2 != null) {
            int num = rem + l1.val + l2.val;
            rem = num / 10;
            num = num % 10;
            if (ans == null) {
                ans = new ListNode(num);
            } else {
                ListNode temp = new ListNode(num);
                temp.next = ans;
                ans = temp;
            }
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            int num = rem + l1.val;
            rem = num / 10;
            num = num % 10;
            if (ans == null) {
                ans = new ListNode(num);
            } else {
                ListNode temp = new ListNode(num);
                temp.next = ans;
                ans = temp;
            }
            l1 = l1.next;
        }
        while (l2 != null) {
            int num = rem + l2.val;
            rem = num / 10;
            num = num % 10;
            if (ans == null) {
                ans = new ListNode(num);
            } else {
                ListNode temp = new ListNode(num);
                temp.next = ans;
                ans = temp;
            }
            l2 = l2.next;
        }
        if (rem > 0) {
            if (ans == null) {
                ans = new ListNode(rem);
            } else {
                ListNode temp = new ListNode(rem);
                temp.next = ans;
                ans = temp;
            }
        }
        // while(root1!=null)
        // {
        //     System.out.println(root1.val);
        //     root1=root1.next;
        // }
        return ans;
    }
}
