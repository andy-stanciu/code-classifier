/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        int carry = 0;
        ListNode res = new ListNode();
        ListNode prev = null;
        ListNode curr = null;
        ListNode temp = null;
        prev = null;
        curr = l1;
        // reverse l1
        while (curr != null) {
            temp = curr.next;
            curr.next = prev;
            prev = curr;
            l1 = curr;
            curr = temp;
        }
        // reverse l2
        prev = null;
        curr = l2;
        while (curr != null) {
            temp = curr.next;
            curr.next = prev;
            prev = curr;
            l2 = curr;
            curr = temp;
        }
        // add nodes and store in res
        // reverse as we go
        int sum;
        prev = null;
        curr = res;
        while (l1 != null || l2 != null) {
            if (l1 == null) {
                sum = l2.val + carry;
                l2 = l2.next;
            } else if (l2 == null) {
                sum = l1.val + carry;
                l1 = l1.next;
            } else {
                sum = l1.val + l2.val + carry;
                l1 = l1.next;
                l2 = l2.next;
            }
            if (sum >= 10) {
                carry = 1;
                curr.val = sum - 10;
            } else {
                carry = 0;
                curr.val = sum;
            }
            // reversing as we go
            temp = new ListNode();
            curr.next = prev;
            prev = curr;
            res = curr;
            curr = temp;
            // case when we need to add 1 in front
            if (l1 == null && l2 == null && carry == 1) {
                curr.val = 1;
                temp = new ListNode();
                curr.next = prev;
                prev = curr;
                res = curr;
                curr = temp;
            }
        }
        return res;
    }
}
