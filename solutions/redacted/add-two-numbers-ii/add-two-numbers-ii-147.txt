/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverseList(l1);
        l2 = reverseList(l2);
        int sum = 0, carry = 0;
        ListNode head = new ListNode(0), node = head;
        while (l1 != null || l2 != null) {
            int x = l1 != null ? l1.val : 0;
            int y = l2 != null ? l2.val : 0;
            sum = carry + x + y;
            node.next = new ListNode(sum % 10);
            carry = sum / 10;
            if (l1 != null)
                l1 = l1.next;
            if (l2 != null)
                l2 = l2.next;
            node = node.next;
        }
        if (carry > 0)
            node.next = new ListNode(carry);
        return reverseList(head.next);
    }

    static ListNode reverseList(ListNode rev) {
        ListNode prev = null, tmp = rev;
        while (rev != null) {
            tmp = rev.next;
            rev.next = prev;
            prev = rev;
            rev = tmp;
        }
        return prev;
    }
}
