class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        int size1 = 0;
        int size2 = 0;
        ListNode temp = l1;
        // Calculating size of first linked list
        while (temp != null) {
            size1++;
            temp = temp.next;
        }
        temp = l2;
        // Calculating size of second linked list
        while (temp != null) {
            size2++;
            temp = temp.next;
        }
        int i = 0;
        // Left padding the first LL if it is shorter.
        while (i < (size2 - size1)) {
            ListNode node = new ListNode(0);
            node.next = l1;
            l1 = node;
            i++;
        }
        i = 0;
        // Left padding the second LL if it is shorter.
        while (i < (size1 - size2)) {
            ListNode node = new ListNode(0);
            node.next = l2;
            l2 = node;
            i++;
        }
        int result = calSum(l1, l2);
        // If a carry is still present make it as head.
        if (result > 0) {
            ListNode node = new ListNode(result);
            node.next = l1;
            l1 = node;
        }
        return l1;
    }

    // Recursive function to sum the linked lists.
    public int calSum(ListNode l1, ListNode l2) {
        if (l1 == null)
            return 0;
        int carry = calSum(l1.next, l2.next);
        l1.val = l1.val + l2.val + carry;
        carry = l1.val / 10;
        l1.val = l1.val % 10;
        return carry;
    }
}
