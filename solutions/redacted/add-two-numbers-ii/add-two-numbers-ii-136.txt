/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    // \u044D\u0442\u043E\u0442 \u043C\u0435\u0442\u043E\u0434 \u0441\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u043D \u0438\u0437 \u0437\u0430\u0434\u0430\u0447\u0438 2 \u0438 \u0447\u0443\u0442\u043E\u043A \u043F\u0435\u0440\u0435\u0434\u0435\u043B\u0430\u043D
    public ListNode method1(ListNode list1, ListNode list2) {
        //\u0441\u043E\u0437\u0434\u0430\u0435\u043C \u0441\u0442\u0440\u043E\u043A\u0438 \u0434\u043B\u044F \u0445\u0440\u0430\u043D\u0435\u043D\u0438\u044F \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u0434\u043B\u044F \u043A\u0430\u0436\u0434\u043E\u0433\u043E \u0438\u0437 \u0441\u043F\u0438\u0441\u043A\u043E\u0432
        String numberFromList1 = "";
        while (list1.next != null) {
            numberFromList1 += list1.val;
            list1 = list1.next;
        }
        numberFromList1 += list1.val;
        // \u043D\u0435 \u043D\u0443\u0436\u043D\u043E \u044D\u0442\u043E \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 numberFromList1 = new StringBuffer(numberFromList1).reverse().toString(); // \u044D\u0442\u043E \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043F\u043E \u0443\u0441\u043B\u043E\u0432\u0438\u044E \u0437\u0430\u0434\u0430\u0447\u0438
        String numberFromList2 = "";
        while (list2.next != null) {
            numberFromList2 += list2.val;
            list2 = list2.next;
        }
        numberFromList2 += list2.val;
        // \u043D\u0435 \u043D\u0443\u0436\u043D\u043E \u044D\u0442\u043E \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 numberFromList2 = new StringBuffer(numberFromList2).reverse().toString();
        // \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u044B\u0432\u0430\u0435\u043C \u0441\u0442\u0440\u043E\u043A\u0438 \u0432 \u0447\u0438\u0441\u043B\u0430 \u0438 \u0441\u0443\u043C\u043C\u0438\u0440\u0443\u0435\u043C
        String sum = mySum(numberFromList1, numberFromList2);
        //\u043E\u0431\u0440\u0430\u0442\u043D\u043E \u0432 \u0441\u0442\u0440\u043E\u043A\u0443
        // \u043D\u0435 \u043D\u0443\u0436\u043D\u043E \u044D\u0442\u043E \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 sum = new StringBuffer(sum).reverse().toString(); // \u043F\u043E \u0443\u0441\u043B\u043E\u0432\u0438\u044E \u0437\u0430\u0434\u0430\u0447\u0438
        //\u0442\u0435\u043F\u0435\u0440\u044C \u0441\u043E\u0437\u0434\u0430\u0435\u043C \u0438 \u0437\u0430\u043F\u043E\u043B\u043D\u044F\u0435\u043C \u043D\u043E\u0432\u044B\u0439 \u0441\u0432\u044F\u0437\u0430\u043D\u043D\u044B\u0439 \u043B\u0438\u0441\u0442
        ListNode listNode = new ListNode();
        ListNode newHead = new ListNode();
        for (int i = 0; i < sum.length(); i++) {
            if (i == 0) {
                newHead = listNode;
            }
            listNode.val = Integer.parseInt(sum.charAt(i) + "");
            if (i != sum.length() - 1) {
                listNode.next = new ListNode();
                listNode = listNode.next;
            }
        }
        return newHead;
    }

    //\u044D\u0442\u043E\u0442 \u043C\u0435\u0442\u043E\u0434 \u043F\u043E\u0437\u0430\u0438\u043C\u0441\u0442\u0432\u043E\u0432\u0430\u043B \u0438\u0437 \u0437\u0430\u0434\u0430\u0447\u0438 43
    private String mySum(String sum, String tempNumber) {
        //\u0438\u0437\u043D\u0430\u0447\u0430\u043B\u044C\u043D\u043E \u043D\u0430\u043F\u0438\u0441\u0430\u043B \u044D\u0442\u0438 \u043F\u0435\u0440\u0435\u043C\u0435\u043D\u043D\u044B\u0435. \u041F\u043E\u043D\u0438\u043C\u0430\u044E, \u0447\u0442\u043E \u043E\u043D\u0438 \u043B\u0438\u0448\u043D\u0438\u0435, \u043D\u043E \u0445\u0430\u0439 \u0431\u0443\u0434\u0443\u0442 - \u043D\u0435 \u0445\u043E\u0447\u0443 \u043F\u043E\u0440\u0442\u0438\u0442\u044C \u043B\u043E\u0433\u0438\u043A\u0443
        String lastSum = sum;
        String var1 = tempNumber;
        //\u0442\u0443\u0442 \u0442\u043E\u0436\u0435 \u0432\u044B\u0447\u0438\u0441\u043B\u044F\u0435\u043C \u0431\u043E\u043B\u044C\u0448\u0435\u0435 \u0447\u0438\u0441\u043B\u043E \u043F\u043E \u0434\u043B\u0438\u043D\u0435
        String big;
        String small;
        if (lastSum.length() >= var1.length()) {
            big = lastSum;
            small = var1;
        } else {
            big = var1;
            small = lastSum;
        }
        //\u043E\u043F\u044F\u0442\u044C \u0437\u0430\u043F\u0438\u0441\u044B\u0432\u0430\u0435\u043C \u0446\u0438\u0444\u0440\u044B \u0447\u0438\u0441\u043B\u0430 \u0432 \u043C\u0430\u0441\u0441\u0438\u0432\u044B
        int[] var2 = new int[big.length()];
        for (int index = 0; index < var2.length; index++) {
            var2[index] = Integer.parseInt(big.charAt(index) + "");
        }
        //\u0442\u0443\u0442 \u0432\u0430\u0436\u043D\u043E
        //\u0434\u0430, \u043C\u0430\u0441\u0441\u0438\u0432 \u0434\u043E\u043B\u0436\u0435\u043D \u0431\u044B\u0442\u044C \u043F\u043E \u0432\u0435\u043B\u0438\u0447\u0438\u043D\u0435, \u043A\u0430\u043A \u0434\u043B\u0438\u043D\u0430 \u0431\u043E\u043B\u044C\u0448\u0435\u0433\u043E \u0447\u0438\u0441\u043B\u0430
        int[] arrayWithSmallNumber = new int[big.length()];
        for (int index = 0; index < arrayWithSmallNumber.length; index++) {
            //\u0432 \u0443\u0441\u043B\u043E\u0432\u0438\u0435 \u0446\u0438\u043A\u043B\u0430 \u0441\u0442\u0430\u0432\u0438\u043C \u0438\u043C\u0435\u043D\u043D\u043E \u0434\u043B\u0438\u043D\u0443 \u043C\u0430\u0441\u0441\u0438\u0432\u0430, \u0430 \u043D\u0435 \u0441\u0430\u043C\u043E\u0439 \u0441\u0442\u0440\u043E\u043A\u0438
            if (index < (big.length() - small.length()))
                // \u0434\u043E\u0431\u0430\u0432\u043B\u044F\u0435\u043C \u0432 \u043D\u0430\u0447\u0430\u043B\u043E \u0447\u0438\u0441\u043B\u0430 \u043D\u0443\u043B\u0438, \u0447\u0442\u043E\u0431 \u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u043E \u043C\u043E\u0436\u043D\u043E \u0431\u044B\u043B\u043E \u0441\u0443\u043C\u043C\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0432 \u0441\u0442\u043E\u043B\u0431\u0438\u043A
                arrayWithSmallNumber[index] = 0;
            else
                //\u043F\u043E\u0441\u043B\u0435 \u043D\u0443\u043B\u0435\u0439 \u0443\u0436\u0435 \u0434\u043E\u043F\u0438\u0441\u044B\u0432\u0430\u0435\u043C \u0446\u0438\u0444\u0440\u044B \u0447\u0438\u0441\u043B\u0430
                arrayWithSmallNumber[index] = Integer.parseInt(small.charAt(index - (big.length() - small.length())) + "");
        }
        //\u043F\u0435\u0440\u0435\u043C\u0435\u043D\u043D\u0430\u044F, \u0432 \u043A\u043E\u043E\u0442\u0440\u0443\u044E "\u0437\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u0435\u043C"
        int count = 0;
        //\u0441\u0443\u043C\u043C\u0430, \u043A\u043E\u0442\u043E\u0440\u0430\u044F \u0443 \u043D\u0430\u0441 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u0441\u044F
        String tempSum = "";
        for (int index = arrayWithSmallNumber.length - 1; index >= 0; index--) {
            //\u043F\u043E\u043B\u0443\u0447\u0430\u0435\u043C \u0446\u0438\u0444\u0440\u044B \u0441 \u0431\u043E\u044C\u043B\u0448\u0435\u0433\u043E \u0438 \u043C\u0435\u043D\u044C\u0448\u0435\u0433\u043E \u0447\u0438\u0441\u043B\u0430 \u0438\u0437 \u043E\u0434\u0438\u043D\u0430\u043A\u043E\u0432\u044B\u0445 \u043F\u043E\u0437\u0438\u0446\u0438\u0439 (\u0435\u0434\u0435\u043D\u0438\u0446\u044B, \u0434\u0435\u0441\u044F\u0442\u043A\u0438...)
            int numberFromSmall = arrayWithSmallNumber[index];
            int numberFromBig = var2[index];
            //\u0434\u0430\u043B\u044C\u0448\u0435 \u043B\u043E\u0433\u0438\u043A\u0430 \u0442\u0430\u043A\u0430\u044F \u0436\u0435, \u043A\u0430\u043A \u0438 \u043F\u0440\u0438 \u0443\u043C\u043D\u043E\u0436\u0435\u043D\u0438\u0438
            int tempResult = numberFromSmall + numberFromBig + count;
            if (tempResult <= 9) {
                tempSum = tempResult + tempSum;
                count = 0;
            } else {
                count = tempResult / 10;
                tempSum = tempResult % 10 + tempSum;
            }
        }
        if (count != 0)
            tempSum = count + tempSum;
        //\u043D\u0435 \u0441\u043F\u0440\u0430\u0448\u0438\u0432\u0430\u0439, \u0437\u0430\u0447\u0435\u043C \u0442\u0443\u0442 \u0441\u0434\u0435\u043B\u0430\u043B \u043F\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043D\u0438\u0435, \u044F \u0441\u0430\u043C \u043D\u0435 \u043F\u043E\u043D\u0438\u043C\u0430\u044E, \u043D\u043E: \u0440\u0430\u0431\u043E\u0442\u0430\u0435\u0442 - \u043D\u0435 \u043B\u0435\u0437\u044C))
        sum = tempSum;
        return sum;
    }
}
