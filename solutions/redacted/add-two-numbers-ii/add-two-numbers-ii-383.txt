/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        if (l1 == null)
            return l2;
        if (l2 == null)
            return l1;
        l1 = reverse(l1);
        l2 = reverse(l2);
        ListNode temp = l1;
        ListNode head = l1;
        int carry = 0;
        while (l1 != null && l2 != null) {
            int sum = carry + l1.val + l2.val;
            carry = sum / 10;
            sum = sum % 10;
            l1.val = sum;
            if (l1.next == null) {
                l1.next = l2.next;
                l1 = l1.next;
                break;
            }
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            int sum = l1.val + carry;
            carry = sum / 10;
            sum = sum % 10;
            l1.val = sum;
            l1 = l1.next;
        }
        head = reverse(head);
        if (carry == 1) {
            ListNode n = new ListNode(1, head);
            return n;
        }
        return head;
    }

    public ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode temp = head;
        while (temp != null) {
            ListNode agla = temp.next;
            temp.next = prev;
            prev = temp;
            temp = agla;
        }
        return prev;
    }
}
