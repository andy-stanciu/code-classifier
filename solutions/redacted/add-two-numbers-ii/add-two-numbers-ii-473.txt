/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        /* Reverse Both List */
        ListNode list_1 = reverseLinkedList(l1);
        ListNode list_2 = reverseLinkedList(l2);
        /* Declaring Useful variable */
        ListNode dummy = new ListNode();
        ListNode temp = dummy;
        int carry = 0, sum = 0, nodeValue = 0;
        /* Performing Addition  */
        while (list_1 != null || list_2 != null || carry == 1) {
            sum = 0;
            if (list_1 != null) {
                sum += list_1.val;
                list_1 = list_1.next;
            }
            if (list_2 != null) {
                sum += list_2.val;
                list_2 = list_2.next;
            }
            sum += carry;
            carry = sum / 10;
            nodeValue = sum % 10;
            ListNode node = new ListNode(nodeValue);
            temp.next = node;
            temp = node;
        }
        return reverseLinkedList(dummy.next);
    }

    public ListNode reverseLinkedList(ListNode head) {
        ListNode dummy = null, next = null;
        while (head != null) {
            next = head.next;
            head.next = dummy;
            dummy = head;
            head = next;
        }
        return dummy;
    }
}
