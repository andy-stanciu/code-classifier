/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<ListNode> stack1 = new Stack<>();
        Stack<ListNode> stack2 = new Stack<>();
        while (l1 != null) {
            stack1.add(l1);
            l1 = l1.next;
        }
        while (l2 != null) {
            stack2.add(l2);
            l2 = l2.next;
        }
        int carry = 0;
        ListNode result = null;
        while (!stack1.isEmpty() || !stack2.isEmpty() || carry > 0) {
            if (!stack1.isEmpty()) {
                carry += stack1.pop().val;
            }
            if (!stack2.isEmpty()) {
                carry += stack2.pop().val;
            }
            ListNode temp = new ListNode(carry % 10);
            carry = carry / 10;
            if (result != null) {
                temp.next = result;
            }
            result = temp;
        }
        return result;
    }
}
