/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode first = rev(l1);
        ListNode second = rev(l2);
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        int carry = 0;
        while (first != null || second != null || carry != 0) {
            int x1;
            int x2;
            if (first != null) {
                x1 = first.val;
            } else {
                x1 = 0;
            }
            if (second != null) {
                x2 = second.val;
            } else {
                x2 = 0;
            }
            int sum = x1 + x2 + carry;
            ListNode nn = new ListNode(sum % 10);
            carry = sum / 10;
            dummy.next = nn;
            dummy = dummy.next;
            if (first != null) {
                first = first.next;
            }
            if (second != null) {
                second = second.next;
            }
        }
        ListNode ans = current.next;
        return rev(ans);
    }

    public ListNode rev(ListNode head) {
        ListNode current = head;
        ListNode prev = null;
        ListNode ahead = null;
        while (current != null) {
            ahead = current.next;
            current.next = prev;
            prev = current;
            current = ahead;
        }
        return prev;
    }
}
