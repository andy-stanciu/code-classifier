/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        if (l1.val == 0) {
            return l2;
        } else if (l2.val == 0) {
            return l1;
        }
        ListNode n1 = reverse(l1);
        ListNode n2 = reverse(l2);
        ListNode newHead = null;
        int c = 0;
        while (n1 != null && n2 != null) {
            int k = n1.val + n2.val;
            k = k + c;
            if (k > 9) {
                k = k % 10;
                c = 1;
            } else {
                c = 0;
            }
            ListNode node = new ListNode(k);
            if (newHead == null) {
                newHead = node;
                newHead.next = null;
            } else {
                ListNode temp = newHead;
                newHead = node;
                newHead.next = temp;
            }
            n1 = n1.next;
            n2 = n2.next;
        }
        while (n1 != null) {
            int k = n1.val;
            k = k + c;
            if (k > 9) {
                k = k % 10;
                c = 1;
            } else {
                c = 0;
            }
            ListNode node = new ListNode(k);
            if (newHead == null) {
                newHead = node;
                newHead.next = null;
            } else {
                ListNode temp = newHead;
                newHead = node;
                newHead.next = temp;
            }
            n1 = n1.next;
        }
        while (n2 != null) {
            int k = n2.val;
            k = k + c;
            if (k > 9) {
                k = k % 10;
                c = 1;
            } else {
                c = 0;
            }
            ListNode node = new ListNode(k);
            if (newHead == null) {
                newHead = node;
                newHead.next = null;
            } else {
                ListNode temp = newHead;
                newHead = node;
                newHead.next = temp;
            }
            n2 = n2.next;
        }
        if (c > 0) {
            ListNode node = new ListNode(c);
            ListNode temp = newHead;
            newHead = node;
            newHead.next = temp;
        }
        return newHead;
    }

    public ListNode reverse(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode tail = head.next;
        ListNode newHead = reverse(head.next);
        tail.next = head;
        head.next = null;
        return newHead;
    }
}
