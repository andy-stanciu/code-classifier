/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = revrese(l1);
        l2 = revrese(l2);
        ListNode res = new ListNode(0);
        ListNode r = res;
        int carry = 0;
        while (l1 != null && l2 != null) {
            int sum = l1.val + l2.val + carry;
            carry = sum / 10;
            sum = sum % 10;
            ListNode tmp = new ListNode(sum);
            r.next = tmp;
            r = r.next;
            l1 = l1.next;
            l2 = l2.next;
        }
        ListNode remNode = l1 == null ? l2 : l1;
        while (remNode != null) {
            int sum = remNode.val + carry;
            carry = sum / 10;
            sum = sum % 10;
            ListNode tmp = new ListNode(sum);
            r.next = tmp;
            r = r.next;
            remNode = remNode.next;
        }
        if (carry > 0) {
            ListNode tmp = new ListNode(carry);
            r.next = tmp;
        }
        return revrese(res.next);
    }

    public ListNode revrese(ListNode node) {
        ListNode prev = null;
        while (node != null) {
            ListNode next = node.next;
            node.next = prev;
            prev = node;
            node = next;
        }
        return prev;
    }
}
