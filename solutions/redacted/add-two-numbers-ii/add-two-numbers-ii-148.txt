/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    private ListNode reverse(ListNode head) {
        ListNode temp = null, prev = null;
        while (head != null) {
            temp = head.next;
            head.next = prev;
            prev = head;
            head = temp;
        }
        return prev;
    }

    public ListNode method1(ListNode list1, ListNode list2) {
        ListNode l1 = reverse(list1);
        ListNode l2 = reverse(list2);
        int sum = 0, carry = 0;
        ListNode result = new ListNode();
        while (l1 != null || l2 != null) {
            if (l1 != null) {
                sum += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                sum += l2.val;
                l2 = l2.next;
            }
            result.val = sum % 10;
            carry = sum / 10;
            ListNode head = new ListNode(carry);
            head.next = result;
            result = head;
            sum = carry;
        }
        return carry == 0 ? result.next : result;
    }
}
