public class Solution {

    static ListNode reverse(ListNode l) {
        ListNode prev = null, temp;
        while (l != null) {
            // store the next node
            temp = l.next;
            l.next = prev;
            prev = l;
            l = temp;
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        int k = 0, carry = 0;
        ListNode prev = new ListNode();
        ListNode l = new ListNode();
        prev = null;
        while (l1 != null && l2 != null) {
            l = new ListNode();
            k = l1.val + l2.val + carry;
            l.val = k % 10;
            carry = k / 10;
            l1 = l1.next;
            l2 = l2.next;
            l.next = prev;
            prev = l;
        }
        while (l1 != null) {
            l = new ListNode();
            k = l1.val + carry;
            l.val = k % 10;
            carry = k / 10;
            l1 = l1.next;
            l.next = prev;
            prev = l;
        }
        while (l2 != null) {
            l = new ListNode();
            k = l2.val + carry;
            l.val = k % 10;
            carry = k / 10;
            l2 = l2.next;
            l.next = prev;
            prev = l;
        }
        if (carry == 1) {
            l = new ListNode();
            l.val = 1;
            l.next = prev;
        }
        return l;
    }
}
