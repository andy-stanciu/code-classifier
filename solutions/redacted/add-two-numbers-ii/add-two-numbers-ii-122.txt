/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode temp = head;
        while (temp != null) {
            ListNode t = temp.next;
            temp.next = null;
            temp.next = prev;
            prev = temp;
            temp = t;
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode temp1 = l1;
        ListNode temp2 = l2;
        ListNode prev = null;
        int carry = 0;
        while (temp1 != null && temp2 != null) {
            int data = temp1.val + temp2.val;
            if (data >= 10 && carry == 0) {
                carry = data / 10;
                int value = data % 10;
                temp1.val = value;
            } else if (data >= 10 && carry != 0) {
                int value = data + carry;
                carry--;
                carry = data / 10;
                value = value % 10;
                temp1.val = value;
            } else if (data < 10 && carry > 0) {
                int value = data + carry;
                carry--;
                if (value >= 10) {
                    carry = value / 10;
                    value = value % 10;
                }
                temp1.val = value;
            } else
                temp1.val = data;
            prev = temp1;
            temp1 = temp1.next;
            temp2 = temp2.next;
        }
        if (temp1 != null) {
            while (temp1 != null) {
                if (carry > 0) {
                    int data = temp1.val + carry;
                    carry--;
                    if (data >= 10) {
                        //int value=data+carry;
                        //carry--;
                        carry = data / 10;
                        int value = data % 10;
                        temp1.val = value;
                    } else {
                        int value = data + carry;
                        temp1.val = value;
                    }
                }
                prev = temp1;
                temp1 = temp1.next;
            }
        }
        if (carry > 0) {
            ListNode ans = new ListNode(1);
            prev.next = ans;
        }
        return l1;
    }

    public ListNode method2(ListNode l1, ListNode l2) {
        ListNode temp1 = l1;
        ListNode temp2 = l2;
        int len1 = 0;
        int len2 = 0;
        while (temp1 != null) {
            temp1 = temp1.next;
            len1++;
        }
        while (temp2 != null) {
            temp2 = temp2.next;
            len2++;
        }
        temp1 = l1;
        temp2 = l2;
        ListNode ans3 = null;
        ListNode ans1 = reverse(temp1);
        ListNode ans2 = reverse(temp2);
        if (len1 >= len2)
            ans3 = method1(ans1, ans2);
        else
            ans3 = method1(ans2, ans1);
        ListNode finalAns = reverse(ans3);
        return finalAns;
    }
}
