/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<Integer> l_1 = new Stack<>();
        Stack<Integer> l_2 = new Stack<>();
        ListNode temp_l1 = l1;
        ListNode temp_l2 = l2;
        while (temp_l1 != null || temp_l2 != null) {
            if (temp_l1 != null) {
                l_1.push(temp_l1.val);
                temp_l1 = temp_l1.next;
            }
            if (temp_l2 != null) {
                l_2.push(temp_l2.val);
                temp_l2 = temp_l2.next;
            }
        }
        ListNode res = null;
        int carry = 0;
        while (!l_1.isEmpty() || !l_2.isEmpty() || carry != 0) {
            int val1 = l_1.isEmpty() ? 0 : l_1.pop();
            int val2 = l_2.isEmpty() ? 0 : l_2.pop();
            int sum = val1 + val2 + carry;
            carry = sum / 10;
            ListNode temp = new ListNode(sum % 10, res);
            res = temp;
        }
        return res;
    }
}
