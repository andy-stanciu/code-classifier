/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ArrayList<Integer> al1 = new ArrayList<>();
        ArrayList<Integer> al2 = new ArrayList<>();
        while (l1 != null) {
            al1.add(l1.val);
            l1 = l1.next;
        }
        while (l2 != null) {
            al2.add(l2.val);
            l2 = l2.next;
        }
        ArrayList<Integer> var1 = new ArrayList<>();
        int c = 0, n = al1.size(), m = al2.size();
        int j = 1, min = Math.min(m, n);
        while (min - j >= 0) {
            int sum = al1.get(n - j) + al2.get(m - j) + c;
            if (sum > 9) {
                c = 1;
                sum = sum - 10;
            } else
                c = 0;
            var1.add(sum);
            j++;
        }
        //System.out.println(j + "->" + n + "->" + m);
        while (j <= Math.max(m, n)) {
            if (n == m)
                break;
            else if (min == n) {
                int sum = al2.get(m - j) + c;
                if (sum > 9) {
                    c = 1;
                    sum = sum - 10;
                } else
                    c = 0;
                var1.add(sum);
                j++;
            } else {
                int sum = al1.get(n - j) + c;
                if (sum > 9) {
                    c = 1;
                    sum = sum - 10;
                } else
                    c = 0;
                var1.add(sum);
                j++;
            }
        }
        if (c != 0)
            var1.add(1);
        n = var1.size() - 1;
        ListNode ans = new ListNode(var1.get(n));
        ListNode head = ans;
        n--;
        while (n >= 0) {
            ans.next = new ListNode(var1.get(n));
            ans = ans.next;
            n--;
        }
        return head;
    }
}
