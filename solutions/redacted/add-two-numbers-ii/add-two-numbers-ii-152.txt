class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<Integer> st1 = new Stack<>();
        Stack<Integer> st2 = new Stack<>();
        Stack<Integer> st3 = new Stack<>();
        ListNode curr1 = l1;
        ListNode curr2 = l2;
        while (curr1 != null) {
            st1.push(curr1.val);
            curr1 = curr1.next;
        }
        while (curr2 != null) {
            st2.push(curr2.val);
            curr2 = curr2.next;
        }
        int carry = 0;
        while (!st1.isEmpty() || !st2.isEmpty() || carry != 0) {
            int sum = carry;
            if (!st1.isEmpty())
                sum += st1.pop();
            if (!st2.isEmpty())
                sum += st2.pop();
            carry = sum / 10;
            st3.push(sum % 10);
        }
        ListNode dummy = new ListNode(0);
        ListNode prev = dummy;
        while (!st3.isEmpty()) {
            ListNode newNode = new ListNode(st3.pop());
            prev.next = newNode;
            prev = prev.next;
        }
        return dummy.next;
    }
}
