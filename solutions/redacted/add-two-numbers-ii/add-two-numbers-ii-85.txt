/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<Integer> l1s = new Stack<Integer>();
        Stack<Integer> l2s = new Stack<Integer>();
        //Pushing all the l1 values to stack
        while (l1 != null) {
            l1s.push(l1.val);
            l1 = l1.next;
        }
        //Pushing all the l2 values to stack
        while (l2 != null) {
            l2s.push(l2.val);
            l2 = l2.next;
        }
        Stack<Integer> sum = new Stack<Integer>();
        //Initialising the carry to 0 as for the One\'s place there will never be a carry
        int carry = 0;
        while ((!l1s.isEmpty()) && (!l2s.isEmpty())) {
            int tSum = carry + ((l1s.pop() + l2s.pop()));
            //Calculation the carry for the next sum for each step
            carry = tSum / 10;
            tSum = tSum % 10;
            sum.push(tSum);
        }
        while (!l1s.isEmpty()) {
            int tSum = carry + l1s.pop();
            //Calculation the carry for the next sum for each step
            carry = tSum / 10;
            tSum = tSum % 10;
            sum.push(tSum);
        }
        while (!l2s.isEmpty()) {
            int tSum = carry + l2s.pop();
            //Calculation the carry for the next sum for each step
            carry = tSum / 10;
            tSum = tSum % 10;
            sum.push(tSum);
        }
        //If carry is not 0 then it has to be pushed to the stack to get the first node;
        if (carry != 0) {
            sum.push(carry);
        }
        //Creating the first node by poping the stack
        ListNode node = new ListNode(sum.pop());
        //Created a temp node to maintain the tip in "node"
        ListNode temp = node;
        while (!sum.isEmpty()) {
            //Dummy node created for each stack pop and marking it as next to the prev value
            ListNode dummy = new ListNode(sum.pop());
            temp.next = dummy;
            temp = temp.next;
        }
        return node;
    }
}
