/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        int carry = 0;
        ListNode result = new ListNode(0);
        ListNode temp = result;
        while (l1 != null || l2 != null || carry != 0) {
            int sum = carry;
            if (l1 != null) {
                sum = sum + l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                sum = sum + l2.val;
                l2 = l2.next;
            }
            int val = sum / 10;
            sum = sum % 10;
            System.out.println(sum);
            result.next = new ListNode(sum);
            carry = val;
            System.out.println(carry + "carry" + sum);
            result = result.next;
        }
        temp.next = reverse(temp.next);
        return temp.next;
    }

    public ListNode reverse(ListNode list) {
        ListNode prev = null;
        ListNode current = list;
        ListNode next = null;
        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }
}
