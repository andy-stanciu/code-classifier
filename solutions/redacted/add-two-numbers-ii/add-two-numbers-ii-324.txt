/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode rev1 = reverse(l1);
        ListNode rev2 = reverse(l2);
        int sum = 0;
        ListNode resNode = new ListNode();
        ListNode temp = resNode;
        while (rev1 != null || rev2 != null || sum != 0) {
            if (rev1 != null) {
                sum += rev1.val;
                rev1 = rev1.next;
            }
            if (rev2 != null) {
                sum += rev2.val;
                rev2 = rev2.next;
            }
            ListNode newNode = new ListNode();
            newNode.val = sum % 10;
            temp.next = newNode;
            temp = temp.next;
            sum /= 10;
        }
        return reverse(resNode.next);
    }

    public ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        ListNode next;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}
