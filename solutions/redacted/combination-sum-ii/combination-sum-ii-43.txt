class Solution {

    public List<List<Integer>> method1(int[] candidates, int target) {
        // Backtracking Approach
        // TC: O(2^n), SC: O(n)
        List<List<Integer>> ans = new ArrayList<>();
        // Sort the array to put the elements with the same value together
        Arrays.sort(candidates);
        backtrack(candidates, target, 0, new ArrayList<>(), ans);
        return ans;
    }

    private void backtrack(int[] candidates, int target, int i, List<Integer> curr, List<List<Integer>> ans) {
        int n = candidates.length;
        if (target == 0) {
            ans.add(new ArrayList<>(curr));
            return;
        }
        if (i >= n || target < 0) {
            return;
        }
        // Add current element
        curr.add(candidates[i]);
        backtrack(candidates, target - candidates[i], i + 1, curr, ans);
        curr.remove(curr.size() - 1);
        // To avoid duplicate combinations, when skipping the current element,
        // we also need to skip all the remaining elements with the same value
        while (i < n - 1 && candidates[i] == candidates[i + 1]) {
            i++;
        }
        backtrack(candidates, target, i + 1, curr, ans);
    }
}
