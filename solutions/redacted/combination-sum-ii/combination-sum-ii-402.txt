class Solution {

    List<List<Integer>> res = new ArrayList<>();

    public List<List<Integer>> method1(int[] candidates, int target) {
        //unique numbers
        List<Integer> nums = new ArrayList<>();
        //frequency map for each unique number
        Map<Integer, Integer> counts = new HashMap<>();
        for (int candidate : candidates) {
            if (!nums.contains(candidate))
                nums.add(candidate);
            counts.put(candidate, counts.getOrDefault(candidate, 0) + 1);
        }
        //oridinary dfs
        dfs(nums, counts, 0, target, new ArrayList<Integer>());
        return res;
    }

    private void dfs(List<Integer> nums, Map<Integer, Integer> counts, int index, int target, List<Integer> worklingList) {
        //find one solution
        if (target == 0) {
            res.add(new ArrayList(worklingList));
            return;
        }
        //invalid
        if (index >= nums.size() || target < 0)
            return;
        //not pick
        dfs(nums, counts, index + 1, target, worklingList);
        //pick 1, 2, 3, ...
        int i = 1;
        for (; i <= counts.get(nums.get(index)); i++) {
            worklingList.add(nums.get(index));
            dfs(nums, counts, index + 1, target - i * nums.get(index), worklingList);
        }
        //backtrace to the original state
        while (i-- > 1) {
            worklingList.removeLast();
        }
    }
}
