class Solution {

    public List<List<Integer>> method1(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        // Sort the candidates array
        Arrays.sort(candidates);
        method2(0, candidates, target, new ArrayList<>(), result);
        return result;
    }

    private void method2(int index, int[] candidates, int target, List<Integer> current, List<List<Integer>> result) {
        if (target == 0) {
            result.add(new ArrayList<>(current));
            return;
        }
        for (int i = index; i < candidates.length; i++) {
            // Skip duplicates
            if (i > index && candidates[i] == candidates[i - 1]) {
                continue;
            }
            // If the current candidate exceeds the target, break the loop as further candidates will also be too large
            if (candidates[i] > target) {
                break;
            }
            // Pick the current candidate
            current.add(candidates[i]);
            method2(i + 1, candidates, target - candidates[i], current, result);
            // Backtrack
            current.remove(current.size() - 1);
        }
    }
}
