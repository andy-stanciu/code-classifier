class Solution {

    public List<List<Integer>> method1(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(candidates);
        backtracking(candidates, target, 0, result, new ArrayList<>());
        return result;
    }

    private void backtracking(int[] candidates, int target, int start, List<List<Integer>> result, List<Integer> currentConfig) {
        if (target == 0) {
            result.add(new ArrayList<>(currentConfig));
            return;
        }
        for (int i = start; i < candidates.length; i++) {
            // Skip duplicates
            if (i > start && candidates[i] == candidates[i - 1])
                continue;
            if (target < candidates[i])
                break;
            currentConfig.add(candidates[i]);
            // Pass a new copy of currentConfig
            backtracking(candidates, target - candidates[i], i + 1, result, new ArrayList<>(currentConfig));
            currentConfig.remove(currentConfig.size() - 1);
        }
    }
}
