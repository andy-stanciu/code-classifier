class Solution {

    public List<List<Integer>> method1(int[] candidates, int target) {
        List<List<Integer>> results = new ArrayList<>();
        // Sort to handle duplicates and optimize early termination
        Arrays.sort(candidates);
        backtrack(candidates, target, 0, new ArrayList<>(), results);
        return results;
    }

    private void backtrack(int[] candidates, int target, int start, List<Integer> current, List<List<Integer>> results) {
        if (target == 0) {
            // Found a valid combination
            results.add(new ArrayList<>(current));
            return;
        }
        for (int i = start; i < candidates.length; i++) {
            // Skip duplicates
            if (i > start && candidates[i] == candidates[i - 1])
                continue;
            // Early termination
            if (candidates[i] > target)
                break;
            current.add(candidates[i]);
            backtrack(candidates, target - candidates[i], i + 1, current, results);
            // Backtrack
            current.remove(current.size() - 1);
        }
    }
}
