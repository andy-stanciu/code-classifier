class Solution {

    public List<List<Integer>> method1(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> path = new ArrayList<Integer>();
        dfs(candidates, 0, target, path, result);
        return result;
    }

    void dfs(int[] cand, int curr, int target, List<Integer> path, List<List<Integer>> res) {
        if (target == 0) {
            res.add(new ArrayList(path));
            return;
        }
        if (target < 0)
            return;
        for (int i = curr; i < cand.length; i++) {
            if (i > curr && cand[i] == cand[i - 1])
                continue;
            path.add(path.size(), cand[i]);
            dfs(cand, i + 1, target - cand[i], path, res);
            path.remove(path.size() - 1);
        }
    }
}
