class Solution {

    public List<List<Integer>> method1(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> list = new ArrayList<>();
        List<Integer> cur = new ArrayList<>();
        dfs(0, candidates, cur, list, target);
        return list;
    }

    public void dfs(int i, int[] nums, List<Integer> cur, List<List<Integer>> list, int target) {
        if (target == 0) {
            list.add(new ArrayList<>(cur));
            return;
        }
        if (target < 0 || i == nums.length)
            return;
        cur.add(nums[i]);
        dfs(i + 1, nums, cur, list, target - nums[i]);
        cur.remove(cur.size() - 1);
        while (i + 1 < nums.length && nums[i + 1] == nums[i]) i++;
        dfs(i + 1, nums, cur, list, target);
    }
}
