class Solution {

    public void backtracking(int[] candidates, int target, List<List<Integer>> ans, List<Integer> list, int index) {
        if (target == 0) {
            ans.add(new ArrayList<>(list));
            return;
        }
        for (int i = index; i < candidates.length; i++) {
            if (i > index && candidates[i] == candidates[i - 1])
                continue;
            if (target < candidates[i])
                break;
            list.add(candidates[i]);
            backtracking(candidates, target - candidates[i], ans, list, i + 1);
            list.remove(list.size() - 1);
        }
        /*        if(index == candidates.length){
            if(target == 0){
                ans.add(new ArrayList<>(list));
            }
            return;
        }

        if(target >= candidates[index]){

            list.add(candidates[index]);


            backtracking(candidates, target - candidates[index], ans, list, index+1);
            list.remove(list.size() - 1);

        }
        while(index < candidates.length-1 && candidates[index] == candidates[index + 1]) index++;
        backtracking(candidates, target, ans, list, index+1);
*/
    }

    public List<List<Integer>> method1(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(candidates);
        backtracking(candidates, target, ans, new ArrayList<Integer>(), 0);
        return ans;
    }
}
