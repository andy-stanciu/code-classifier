class Solution {

    public List<List<Integer>> method1(int[] candidates, int target) {
        List<List<Integer>> finalans = new ArrayList<>();
        List<Integer> ans = new ArrayList<>();
        // Sort the candidates array to handle duplicates
        Arrays.sort(candidates);
        method2(candidates, target, 0, ans, finalans);
        return finalans;
    }

    private void method2(int[] candidates, int target, int start, List<Integer> ans, List<List<Integer>> finalans) {
        if (target == 0) {
            // Add a copy of ans to finalans
            finalans.add(new ArrayList<>(ans));
            return;
        }
        if (target < 0) {
            return;
        }
        for (int i = start; i < candidates.length; i++) {
            if (i != start && candidates[i] == candidates[i - 1]) {
                continue;
            }
            if (candidates[i] > target) {
                // Stop if the current candidate is greater than target
                break;
            }
            ans.add(candidates[i]);
            // Pass i as start to consider duplicates
            method2(candidates, target - candidates[i], i + 1, ans, finalans);
            // Remove the last element for backtracking
            ans.remove(ans.size() - 1);
        }
    }
}
