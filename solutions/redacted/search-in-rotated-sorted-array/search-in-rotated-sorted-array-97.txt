class Solution {

    public int method1(int[] nums, int target) {
        int from = 0;
        int to = nums.length - 1;
        while (from <= to) {
            int mid = from + (to - from) / 2;
            if (nums[mid] == target) {
                return mid;
            }
            if (method2(nums[from], nums[to], nums[mid], target)) {
                to = mid - 1;
            } else {
                from = mid + 1;
            }
        }
        return -1;
    }

    //Left side is asc order AND is between the target OR  R side is asc order AND is NOT between the target
    private boolean method2(int from, int to, int mid, int target) {
        return (from <= mid && method3(target, from, mid)) || (mid <= to && !method3(target, mid, to));
    }

    private boolean method3(int target, int from, int to) {
        return from <= target && to >= target;
    }
}
