class Solution {

    static int method1(int[] arr) {
        int start = 0;
        int end = arr.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (mid < end && arr[mid] > arr[mid + 1]) {
                return mid;
            }
            if (mid > start && arr[mid] < arr[mid - 1]) {
                return mid - 1;
            }
            if (arr[start] > arr[mid]) {
                end = mid - 1;
            }
            if (arr[start] <= arr[mid]) {
                start = mid + 1;
            }
        }
        return -1;
    }

    static int method2(int[] arr, int target, int start, int end) {
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (target == arr[mid]) {
                return mid;
            } else if (target < arr[mid]) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return -1;
    }

    static int method3(int[] arr, int target) {
        int pivot = method1(arr);
        if (pivot == -1) {
            return method2(arr, target, 0, arr.length - 1);
        }
        if (arr[pivot] == target) {
            return pivot;
        }
        if (arr[0] > target) {
            return method2(arr, target, pivot + 1, arr.length - 1);
        }
        return method2(arr, target, 0, pivot - 1);
    }
}
