class Solution {

    public int method1(int[] nums, int target) {
        //this is a linear solution its take O(n) time complexity
        //     int ans=-1;
        //     for(int i=0;i<nums.length;i++){
        //         if(target==nums[i]){
        //             ans=i;
        //         }
        //     }
        //     return ans;
        // }
        //we need to solve this problem in O(log(n)) time complexity
        int start = 0, end = nums.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[start] <= nums[mid]) {
                // 1st half is sorted
                if (nums[start] <= target && target < nums[mid]) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            } else {
                if (target > nums[mid] && target <= nums[end]) {
                    start = mid + 1;
                } else {
                    end = mid - 1;
                }
            }
        }
        return -1;
    }
}
