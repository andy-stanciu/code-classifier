class Solution {

    public int method1(int[] arr, int target) {
        int low = 0, high = arr.length - 1;
        while (low <= high) {
            // Calculate the middle index
            int mid = low + (high - low) / 2;
            // If target is found at mid, return its index
            if (arr[mid] == target) {
                return mid;
            }
            // Check if the left half is sorted
            if (arr[low] <= arr[mid]) {
                // If the target is within the sorted left half, search there
                if (target >= arr[low] && target <= arr[mid]) {
                    high = mid - 1;
                } else {
                    // Otherwise, search in the right half
                    low = mid + 1;
                }
            } else // Otherwise, the right half must be sorted
            {
                // If the target is within the sorted right half, search there
                if (target >= arr[mid] && target <= arr[high]) {
                    low = mid + 1;
                } else {
                    // Otherwise, search in the left half
                    high = mid - 1;
                }
            }
        }
        // If the target is not found, return -1
        return -1;
    }
}
