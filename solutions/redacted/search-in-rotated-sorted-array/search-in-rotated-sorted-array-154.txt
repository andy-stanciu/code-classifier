class Solution {

    static int method1(int[] a, int Target, int s, int e) {
        int mid = s + (e - s) / 2;
        while (s <= e) {
            if (a[mid] == Target) {
                return mid;
            } else if (a[mid] > Target) {
                e = mid - 1;
            } else {
                s = mid + 1;
            }
            mid = s + (e - s) / 2;
        }
        return -1;
    }

    static int pivot(int[] a) {
        int s = 0, e = a.length - 1;
        int mid = s + (e - s) / 2;
        while (s < e) {
            if (a[mid] >= a[0]) {
                s = mid + 1;
            } else {
                e = mid;
            }
            mid = s + (e - s) / 2;
        }
        return s;
    }

    public int method2(int[] a, int Target) {
        int n = a.length;
        int Pivot = pivot(a);
        int ans = 0;
        if (Target >= a[Pivot] && Target <= a[n - 1]) {
            ans = method1(a, Target, Pivot, n - 1);
        } else {
            ans = method1(a, Target, 0, Pivot - 1);
        }
        return ans;
    }
}
