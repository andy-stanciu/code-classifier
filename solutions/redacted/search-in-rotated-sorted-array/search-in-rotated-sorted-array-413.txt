class Solution {

    public int method1(int[] nums, int target) {
        int pivot = method2(nums);
        // If no pivot is found, array is not rotated
        if (pivot == -1) {
            return bs(nums, target, 0, nums.length - 1);
        }
        // If pivot is found, check if target is at pivot
        if (nums[pivot] == target) {
            return pivot;
        }
        // If target is in the left half
        if (target >= nums[0]) {
            return bs(nums, target, 0, pivot - 1);
        }
        // If target is in the right half
        return bs(nums, target, pivot + 1, nums.length - 1);
    }

    // Corrected binary search with start and end parameters
    int bs(int[] num, int target, int start, int end) {
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (target < num[mid]) {
                end = mid - 1;
            } else if (target > num[mid]) {
                start = mid + 1;
            } else {
                // Target found
                return mid;
            }
        }
        // Target not found
        return -1;
    }

    // Find the pivot index in the rotated sorted array
    int method2(int[] arr) {
        int start = 0;
        int end = arr.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            // Check if mid is the pivot
            if (mid < end && arr[mid] > arr[mid + 1]) {
                return mid;
            }
            if (mid > start && arr[mid] < arr[mid - 1]) {
                return mid - 1;
            }
            // Move search space accordingly
            if (arr[mid] <= arr[start]) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        // No pivot found (array is not rotated)
        return -1;
    }
}
