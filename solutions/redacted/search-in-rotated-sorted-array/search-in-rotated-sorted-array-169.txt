class Solution {

    public int method1(int[] nums, int key) {
        int start = 0;
        int end = nums.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            // Case 1 : The middle element matches the key
            if (nums[mid] == key) {
                return mid;
            }
            // Case 2 : The left half is sorted
            if (nums[start] <= nums[mid]) {
                // Case 2a : The key lies in the sorted half
                if (nums[start] <= key && key <= nums[mid]) {
                    end = mid - 1;
                } else {
                    // Case 2b: The key lies in the unsorted half
                    start = mid + 1;
                }
            } else // Case 3 : Right half is sorted
            {
                // Case 3a: The key lies in the sorted half
                if (nums[mid] <= key && key <= nums[end]) {
                    start = mid + 1;
                } else {
                    // Case 3b: The key lies in the unsorted half
                    end = mid - 1;
                }
            }
        }
        return -1;
    }
}
