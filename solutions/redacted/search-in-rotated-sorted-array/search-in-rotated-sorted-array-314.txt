class Solution {

    public int method1(int[] nums, int target) {
        int low = 0, high = nums.length - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[low] <= nums[mid]) {
                //left part
                //assuming mid will lie left sorted part(as mid will either lie on left sorted or right sorted)
                //check that target exist in the range of low and mid or not
                if (target >= nums[low] && target <= nums[mid]) {
                    //target lies in left part
                    high = mid - 1;
                } else {
                    //now again check for mid on which sorted part left or right
                    low = mid + 1;
                }
            } else {
                //if mid is on right sorted part(no need to check for this as if mid is not on left part ->>it must be on right)
                //now look for target range
                if (target >= nums[mid] && target <= nums[high]) {
                    //target is on right part of mid
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
                //now these con will be exucuted and we will get the correct result
            }
        }
        //counter is here means we did not get target->>means target does not exist
        return -1;
    }
}
