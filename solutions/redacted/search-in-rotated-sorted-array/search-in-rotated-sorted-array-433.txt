class Solution {

    public int method1(int[] nums, int target) {
        // Nums is null or empty
        if (nums == null || nums.length == 0) {
            return -1;
        }
        // Nums has single element
        if (nums.length == 1) {
            if (nums[0] == target) {
                return 0;
            }
            return -1;
        }
        return this.method2(nums, 0, nums.length - 1, target);
    }

    public int method2(int[] nums, int start, int end, int target) {
        // Should not happen, defensive code
        if (start < 0 || end >= nums.length) {
            return -1;
        }
        /* If the array has 2 or less elements */
        if (end - start <= 1) {
            if (nums[start] == target) {
                return start;
            }
            if (nums[end] == target) {
                return end;
            }
            return -1;
        }
        int length = (end - start);
        int mid = start + length / 2;
        // If mid is the target
        if (nums[mid] == target) {
            return mid;
        }
        if (nums[mid - 1] < nums[mid] && nums[mid + 1] > nums[mid]) {
            /* 
            Monotonically increasing. Find out whether the mid is greater than both start and end, or lesser than. If neither then array 
            is sorted, its not rotated.
            */
            if (nums[mid] > nums[start] && nums[mid] > nums[end]) {
                // If the mid is greater than the two, the side which has greater value is the sorted side.
                if (nums[start] > nums[end]) {
                    // left is sorted
                    if (nums[start] <= target && target < nums[mid]) {
                        return method2(nums, start, mid - 1, target);
                    }
                    return method2(nums, mid + 1, end, target);
                } else {
                    // right is sorted
                    if (nums[mid] < target && target <= nums[end]) {
                        return method2(nums, mid + 1, end, target);
                    }
                    return method2(nums, start, mid - 1, target);
                }
            } else if (nums[mid] < nums[start] && nums[mid] < nums[end]) {
                // The mid is lesser than the two, the side which has lesser value is the sorted side.
                if (nums[start] < nums[end]) {
                    // left is sorted
                    if (nums[start] <= target && target < nums[mid]) {
                        return method2(nums, start, mid - 1, target);
                    }
                    return method2(nums, mid + 1, end, target);
                } else {
                    // right is sorted
                    if (nums[mid] < target && target <= nums[end]) {
                        return method2(nums, mid + 1, end, target);
                    }
                    return method2(nums, start, mid - 1, target);
                }
            }
            // Its a sorted array
            if (nums[start] <= target && target < nums[mid]) {
                return method2(nums, start, mid - 1, target);
            }
            return method2(nums, mid + 1, end, target);
        } else {
            // Its a pivot, both sides are sorted, compare the target to each sides to determine which side to go.
            if (nums[start] <= target && target <= nums[mid - 1]) {
                return method2(nums, start, mid - 1, target);
            }
            return method2(nums, mid + 1, end, target);
        }
    }
}
