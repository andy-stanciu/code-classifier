class Solution {

    public int method1(int[] nums, int target) {
        // Call the recursive helper method \'find\' to search for the target in the entire array
        return method2(nums, target, 0, nums.length - 1);
    }

    public int method2(int[] nums, int target, int start, int end) {
        // Base case: if the start index exceeds the end index, target is not found
        if (start > end)
            return -1;
        // Calculate the middle index
        int mid = (start + end) / 2;
        // If the target is found at the middle index, return the index
        if (nums[mid] == target)
            return mid;
        // Check if the left half of the array is sorted
        if (nums[start] <= nums[mid]) {
            // If target lies between nums[start] and nums[mid], search the left half
            if (target >= nums[start] && target < nums[mid]) {
                return method2(nums, target, start, mid - 1);
            } else {
                // Otherwise, search the right half
                return method2(nums, target, mid + 1, end);
            }
        } else {
            // Otherwise, the right half must be sorted
            // If target lies between nums[mid] and nums[end], search the right half
            if (target <= nums[end] && target > nums[mid]) {
                return method2(nums, target, mid + 1, end);
            } else {
                // Otherwise, search the left half
                return method2(nums, target, start, mid - 1);
            }
        }
    }
}
