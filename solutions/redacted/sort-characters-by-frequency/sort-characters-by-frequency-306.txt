class Solution {

    public String method1(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (map.containsKey(c)) {
                map.put(c, map.get(c) + 1);
            } else {
                map.put(c, 1);
            }
        }
        TreeMap<Integer, ArrayList<Character>> c = new TreeMap<>();
        ArrayList<Character> var1 = new ArrayList<Character>(map.keySet());
        ArrayList<Integer> arr = new ArrayList<>();
        for (Character a : var1) {
            if (!c.containsKey(map.get(a))) {
                arr.add(map.get(a));
                c.put(map.get(a), new ArrayList<Character>());
            }
        }
        for (Character x : var1) {
            if (c.containsKey(map.get(x))) {
                c.computeIfAbsent(map.get(x), k -> new ArrayList<>()).add(x);
                ;
            }
        }
        Collections.sort(arr);
        String str = "";
        for (int i = arr.size() - 1; i >= 0; i--) {
            if (arr.get(i) > 1) {
                for (int j = 0; j < c.get(arr.get(i)).size(); j++) {
                    str += String.valueOf(c.get(arr.get(i)).get(j)).repeat(arr.get(i));
                }
            } else {
                for (int j = 0; j < c.get(arr.get(i)).size(); j++) {
                    str += String.valueOf(c.get(arr.get(i)).get(j)).repeat(arr.get(i));
                }
            }
        }
        return str;
    }
}
