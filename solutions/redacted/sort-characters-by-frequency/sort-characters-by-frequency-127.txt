class pair {

    Integer freq;

    Character elem;

    pair(Integer freq, Character elem) {
        this.freq = freq;
        this.elem = elem;
    }
}

class Solution {

    public String method1(String s) {
        int n = s.length();
        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            Character ele = s.charAt(i);
            map.put(ele, map.getOrDefault(ele, 0) + 1);
        }
        PriorityQueue<pair> queue = new PriorityQueue<>((a, b) -> b.freq - a.freq);
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            queue.add(new pair(entry.getValue(), entry.getKey()));
        }
        StringBuilder result = new StringBuilder();
        while (!queue.isEmpty()) {
            pair current = queue.poll();
            for (int i = 0; i < current.freq; i++) {
                result.append(current.elem);
            }
        }
        return result.toString();
    }
}
