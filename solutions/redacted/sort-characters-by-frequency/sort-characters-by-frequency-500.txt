class Pair {

    int freq;

    char letter;

    Pair(int freq, char letter) {
        this.freq = freq;
        this.letter = letter;
    }
}

class Solution {

    public String method1(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            if (!map.containsKey(s.charAt(i))) {
                map.put(s.charAt(i), 1);
            } else {
                map.put(s.charAt(i), map.get(s.charAt(i)) + 1);
            }
        }
        PriorityQueue<Pair> q = new PriorityQueue<>((a, b) -> b.freq - a.freq);
        for (Map.Entry<Character, Integer> mc : map.entrySet()) {
            q.add(new Pair(mc.getValue(), mc.getKey()));
        }
        map = null;
        StringBuilder str = new StringBuilder();
        while (!q.isEmpty()) {
            int size = q.peek().freq;
            char let = q.peek().letter;
            q.poll();
            for (int i = 0; i < size; i++) {
                str.append(let);
            }
        }
        return str.toString();
    }
}
