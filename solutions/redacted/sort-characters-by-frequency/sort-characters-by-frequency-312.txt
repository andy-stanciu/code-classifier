class Solution {

    private void fillCount(int[] map, String[] counts, int ch) {
        int count = map[ch];
        if (count != 0) {
            char[] buf = new char[count];
            Arrays.fill(buf, (char) ch);
            if (counts[count] != null) {
                counts[count] = counts[count] + new String(buf);
            } else {
                counts[count] = new String(buf);
            }
        }
    }

    public String method1(String s) {
        if (s.length() == 0)
            return "";
        final int[] map = new int[123];
        char[] chars = s.toCharArray();
        for (int i = 0; i < s.length(); i++) {
            map[chars[i]]++;
        }
        String[] counts = new String[s.length() + 1];
        for (int i = 48; i < 58; i++) {
            fillCount(map, counts, i);
        }
        for (int i = 65; i < 91; i++) {
            fillCount(map, counts, i);
        }
        for (int i = 97; i < 123; i++) {
            fillCount(map, counts, i);
        }
        StringBuilder sb = new StringBuilder(s.length());
        for (int count = counts.length - 1; count >= 0; count--) {
            if (counts[count] != null) {
                sb.append(counts[count]);
            }
        }
        return sb.toString();
    }
}
