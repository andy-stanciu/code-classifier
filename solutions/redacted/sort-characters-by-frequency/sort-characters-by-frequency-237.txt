// public class frequecyComparator implements Comparator<HashMap<Character,Integer>>
//     {
//         // @Override
//         public int compare(Map.Entry<Character,Integer> o1,Map.Entry<Character,Integer> o2)
//         {
//             if(o1.getValue()>o2.getValue())
//             {
//                 return -1;
//             }
//             if(o1.getValue()<o2.getValue())
//             {
//                 return 1;
//             }
//             return 0;
//         }
//     }
class Solution {

    public String method1(String s) {
        HashMap<Character, Integer> freqMap = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            freqMap.put(s.charAt(i), freqMap.getOrDefault(s.charAt(i), 0) + 1);
        }
        // Collections.sort(freqMap,new frequecyComparator());
        List<Map.Entry<Character, Integer>> list = new LinkedList<Map.Entry<Character, Integer>>(freqMap.entrySet());
        Collections.sort(list, new Comparator<Map.Entry<Character, Integer>>() {

            public int compare(Map.Entry<Character, Integer> o1, Map.Entry<Character, Integer> o2) {
                return (o1.getValue()).compareTo(o2.getValue());
            }
        });
        String ans = "";
        for (Map.Entry<Character, Integer> entry : list) {
            System.out.println(entry.getKey() + " " + entry.getValue());
            String temp = "";
            temp += entry.getKey();
            temp = temp.repeat(entry.getValue());
            ans += temp;
        }
        StringBuilder stb = new StringBuilder(ans);
        stb.reverse();
        return stb.toString();
    }
}
