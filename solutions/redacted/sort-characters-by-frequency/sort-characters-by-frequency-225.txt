class Solution {

    public String method1(String s) {
        int n = s.length();
        HashMap<Character, Integer> hm = new HashMap<>();
        for (int i = 0; i < n; i++) {
            char ch = s.charAt(i);
            hm.put(ch, hm.getOrDefault(ch, 0) + 1);
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> b.freq - a.freq);
        for (Map.Entry<Character, Integer> entry : hm.entrySet()) {
            pq.offer(new Pair(entry.getKey(), entry.getValue()));
        }
        StringBuilder result = new StringBuilder();
        while (!pq.isEmpty()) {
            Pair currPair = pq.poll();
            char ch = currPair.key;
            int freq = currPair.freq;
            for (int i = 0; i < freq; i++) {
                result.append(ch);
            }
        }
        return result.toString();
    }

    class Pair {

        char key;

        int freq;

        public Pair(char key, int freq) {
            this.key = key;
            this.freq = freq;
        }
    }
}
