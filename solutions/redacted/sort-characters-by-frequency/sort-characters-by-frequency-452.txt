class Solution {

    // creating a class pair to store char and frequency of that character
    class pair {

        char c;

        int count;

        pair(char c, int count) {
            this.c = c;
            this.count = count;
        }
    }

    public String method1(String s) {
        // build a frequency map of character
        HashMap<Character, Integer> hm = new HashMap<>();
        for (char c : s.toCharArray()) hm.put(c, hm.getOrDefault(c, 0) + 1);
        // creating a pirorityQueue(max heap) based on frequency count and char order
        PriorityQueue<pair> pq = new PriorityQueue<pair>((a, b) -> {
            // means more frequency count charater should come before less fequency count character
            if (a.count != b.count) {
                return a.count > b.count ? -1 : 1;
            } else {
                // for maintaing the dictionary order if character have same frequency count
                return a.c > b.c ? 1 : -1;
            }
        });
        for (char c : hm.keySet()) pq.add(new pair(c, hm.get(c)));
        StringBuilder ans = new StringBuilder();
        // construct the answer
        while (pq.size() > 0) {
            pair np = pq.poll();
            int count = np.count;
            char curr = np.c;
            for (int i = 0; i < count; i++) ans.append(curr);
        }
        return ans.toString();
    }
}
