// class Pair{
//     char ch;
//     int freq;
//     Pair(char ch,int freq){
//         this.ch = ch;
//         this.freq = freq;
//     }
// }
class Solution {

    public String method1(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
        }
        // PriorityQueue<Pair> pq = new PriorityQueue<>((p1, p2) -> Integer.compare(p2.freq, p1.freq));
        PriorityQueue<Map.Entry<Character, Integer>> pq = new PriorityQueue<>((p1, p2) -> Integer.compare(p2.getValue(), p1.getValue()));
        pq.addAll(map.entrySet());
        // for(Map.Entry<Character,Integer> set: map.entrySet()){
        //     pq.add(set);
        // }
        StringBuilder ans = new StringBuilder();
        while (!pq.isEmpty()) {
            Map.Entry<Character, Integer> p = pq.poll();
            // for(int i =0;i<p.getValue();i++){
            //     ans+=p.getKey();
            // }
            ans.append(String.valueOf(p.getKey()).repeat(p.getValue()));
        }
        return ans.toString();
    }
}
