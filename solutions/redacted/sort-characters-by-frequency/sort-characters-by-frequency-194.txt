class Solution {

    static class Pair implements Comparable<Pair> {

        int var1;

        char element;

        public Pair(int var1, char element) {
            this.var1 = var1;
            this.element = element;
        }

        @Override
        public int compareTo(Pair p2) {
            if (this.var1 == p2.var1) {
                return this.element - p2.element;
            }
            return this.var1 - p2.var1;
        }
    }

    public String method1(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        char[] array = s.toCharArray();
        for (int i = 0; i < array.length; i++) {
            map.put(array[i], map.getOrDefault(array[i], 0) + 1);
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>(Collections.reverseOrder());
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            int var1 = entry.getValue();
            char element = entry.getKey();
            pq.add(new Pair(var1, element));
        }
        StringBuilder sb = new StringBuilder();
        while (!pq.isEmpty()) {
            Pair current = pq.poll();
            int frequent = current.var1;
            char elem = current.element;
            for (int i = 0; i < frequent; i++) {
                sb.append(elem);
            }
        }
        return sb.toString();
    }
}
