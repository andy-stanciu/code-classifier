class Solution {

    static class Pair implements Comparable<Pair> {

        char ch;

        int freq;

        Pair(char ch, int freq) {
            this.ch = ch;
            this.freq = freq;
        }

        public int compareTo(Pair other) {
            return Integer.compare(other.freq, this.freq);
        }
    }

    public String method1(String s) {
        if (s.equals("")) {
            return "";
        }
        HashMap<Character, Integer> countMap = new HashMap<>();
        for (char c : s.toCharArray()) {
            countMap.put(c, countMap.getOrDefault(c, 0) + 1);
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        for (Map.Entry<Character, Integer> entry : countMap.entrySet()) {
            pq.add(new Pair(entry.getKey(), entry.getValue()));
        }
        StringBuilder sb = new StringBuilder();
        while (!pq.isEmpty()) {
            Pair p = pq.poll();
            for (int i = 0; i < p.freq; i++) {
                sb.append(p.ch);
            }
        }
        return sb.toString();
    }
}
