class Solution {

    class pair {

        char character;

        int occurance;

        pair(char character, int occurance) {
            this.character = character;
            this.occurance = occurance;
        }
    }

    public String method1(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
        }
        //max heap for min heap(a,b)->a.occurance -b.occurance
        PriorityQueue<pair> pq = new PriorityQueue<>((a, b) -> b.occurance - a.occurance);
        for (Character key : map.keySet()) {
            pq.add(new pair(key, map.get(key)));
        }
        StringBuffer ans = new StringBuffer();
        while (!pq.isEmpty()) {
            pair newpair = pq.poll();
            int val = newpair.occurance;
            char ch = newpair.character;
            while (val != 0) {
                ans.append(ch);
                val--;
            }
        }
        return ans.toString();
    }
}
