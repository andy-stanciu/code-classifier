class Solution {

    public String method1(String s) {
        StringBuilder sb = new StringBuilder();
        HashMap<Character, Integer> map1 = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            map1.put(ch, map1.getOrDefault(ch, 0) + 1);
        }
        Integer[] arr = new Integer[map1.size()];
        int k = 0;
        for (char ch : map1.keySet()) {
            arr[k] = map1.get(ch);
            k++;
        }
        Arrays.sort(arr, Collections.reverseOrder());
        Queue<Character> q = new LinkedList<>();
        for (char ch : map1.keySet()) {
            q.add(ch);
        }
        // HashMap<Integer,Character> map2 = new HashMap<>();
        // for(char ch : map1.keySet()){
        //     map2.put(map1.get(ch),ch);
        // }
        // for(char ch : map1.keySet()){
        //     sb.append(ch);
        // }
        for (int i = 0; i < arr.length; i++) {
            while (arr[i] != map1.get(q.peek())) {
                char ch = q.remove();
                q.add(ch);
            }
            char ch1 = q.peek();
            for (int j = 0; j < arr[i]; j++) {
                sb.append(ch1);
            }
            char ch = q.remove();
            q.add(ch);
            // if(map2.containsKey(arr[i])){
            //     for(int j=0;j<arr[i];j++){
            //         sb.append(map2.get(arr[i]));
            //     }
            // }
        }
        // while(!q.isEmpty()){
        //     sb.append(q.remove());
        // }
        return sb.toString();
    }
}
