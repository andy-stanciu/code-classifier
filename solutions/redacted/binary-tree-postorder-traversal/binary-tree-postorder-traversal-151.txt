/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Integer> method1(TreeNode root) {
        List<Integer> var1 = new ArrayList<>();
        if (root == null)
            return var1;
        Stack<TreeNode> st = new Stack<>();
        TreeNode curr = root;
        TreeNode prev = null;
        while (!st.isEmpty() || curr != null) {
            // Go to the leftmost node
            if (curr != null) {
                st.push(curr);
                curr = curr.left;
            } else {
                TreeNode node = st.peek();
                // If the right child is null or already visited
                if (node.right == null || node.right == prev) {
                    var1.add(node.val);
                    st.pop();
                    prev = node;
                } else {
                    // Move to the right child
                    curr = node.right;
                }
            }
        }
        return var1;
    }
}
