class Solution {

    List<Integer> l = new ArrayList<>();

    public List<Integer> method1(TreeNode root) {
        // if we found graph with no node , it return list that contains null values.
        if (root == null)
            return l;
        // it find postorder in a graph.
        method2(root);
        // it return list that contains postorder values.
        return l;
    }

    void method2(TreeNode r) {
        if (// if root node null it stop receiving in a graph.
        r != null) {
            /*
            The post order traversal technique follows the Left Right Root policy.
            Here, Left Right Root means the left subtree of the root node is traversed first, 
            then the right subtree, and finally, the root node is traversed.
            Here, the Postorder name itself suggests that the tree\'s root node would be traversed at last.
            (LRP)
             */
            //it travels left part of tree, recursive call postorder.
            method2(r.left);
            //it travels right part of tree, recursive call postorder.
            method2(r.right);
            // it add root node in answer list.
            l.add(r.val);
        }
    }
}
