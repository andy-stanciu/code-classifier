class Solution {

    public List<String> method1(int n) {
        List<String> result = new ArrayList<>();
        // Start the backtracking process
        backtrack(result, "", 0, 0, n);
        return result;
    }

    // Backtracking helper function
    private void backtrack(List<String> result, String current, int open, int close, int max) {
        // If the current string has reached the maximum length (2 * n), it is a valid combination
        if (current.length() == max * 2) {
            result.add(current);
            return;
        }
        // Add an open parenthesis if we haven\'t reached the maximum allowed
        if (open < max) {
            backtrack(result, current + "(", open + 1, close, max);
        }
        // Add a close parenthesis if it won\'t make the parentheses unbalanced
        if (close < open) {
            backtrack(result, current + ")", open, close + 1, max);
        }
    }
}
