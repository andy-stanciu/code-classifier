class Solution {

    public List<String> method1(int n) {
        // initialize the result list
        List<String> result = new ArrayList<>();
        // call the recursive helper function
        method2(result, "", n, n);
        // return the result list
        return result;
    }

    public void method2(List<String> result, String s, int left, int right) {
        if (left == 0 && right == 0) {
            // base case: no more parentheses to add
            // add the generated string to the result list
            result.add(s);
            // exit the current recursive call
            return;
        }
        if (left > 0) {
            // if there are still left parentheses to add
            // add a left parenthesis and recursively call the function
            method2(result, s + "(", left - 1, right);
        }
        if (right > left) {
            // if there are still right parentheses to add and there are more left parentheses than right parentheses in the current string
            // add a right parenthesis and recursively call the function
            method2(result, s + ")", left, right - 1);
        }
    }
}
