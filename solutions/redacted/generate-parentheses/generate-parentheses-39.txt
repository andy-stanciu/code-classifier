class Solution {

    // i, j is the number of left parenthesis and right parenthesis remaining respectively in the resultant string
    private void solve(int i, int j, String str, List<String> list) {
        if (i == 0 && j == 0) {
            // if i and j both are zero, that means all parenthesis are used and
            // hence can be added to the result list.
            list.add(str);
            return;
        }
        if (i < 0 || j < 0 || i > j) {
            // If any of i or j is less than used i.e not used in right combination will not be form a balanced string and hence can be ignored.
            return;
        }
        // concat left parenthesis to current string and reduce i with 1
        solve(i - 1, j, str.concat("("), list);
        // concat right parenthesis to current string and reduce j with 1
        solve(i, j - 1, str.concat(")"), list);
    }

    public List<String> method1(int n) {
        List<String> res = new ArrayList<>();
        // Initial string considered
        String str = "(";
        // Since one left parenthesis is already used, we pass i = (n-1) and j=n while initiating recursion
        solve(n - 1, n, str, res);
        // return the final result list
        return res;
    }
}
