class Solution {

    public List<String> method1(int n) {
        List<String> list = new ArrayList<>();
        genParenthesis(0, 0, n, "", list);
        return list;
    }

    public void genParenthesis(int op, int cl, int n, String ans, List<String> list) {
        //Base case
        if (op == n && cl == n) {
            // if opening bracket and closing bracket is equal to n then print the ans and return.
            list.add(ans);
            return;
        }
        // if at any point opening bracket or closing bracket is greater than n then return to  prevent stack overflow.
        if (op > n || cl > n) {
            return;
        }
        // add the opening bracket to string
        genParenthesis(op + 1, cl, n, ans + "(", list);
        if (op > cl) {
            genParenthesis(op, cl + 1, n, ans + ")", list);
        }
    }
}
