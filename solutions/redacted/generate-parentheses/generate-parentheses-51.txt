public class Solution {

    public List<String> method1(int n) {
        List<String> res = new ArrayList<>();
        if (n == 0) {
            return res;
        }
        backtrack(n, n, new String(), res);
        return res;
    }

    private void backtrack(int left, int right, String track, List<String> res) {
        // if right parentheses is greater than left
        if (right < left) {
            return;
        }
        // if both are less than 0
        if (left < 0 || right < 0) {
            return;
        }
        // when they are all used(left with 0)
        if (left == 0 && right == 0) {
            res.add(track);
            return;
        }
        //choose to put a left
        backtrack(left - 1, right, track + "(", res);
        //choose to put a right
        backtrack(left, right - 1, track + ")", res);
    }
}
