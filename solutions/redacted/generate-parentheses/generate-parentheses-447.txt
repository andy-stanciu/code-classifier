class Solution {

    List<String> result;

    public List<String> method1(int n) {
        this.result = new ArrayList<>();
        dfs(n, 0, 0, new StringBuilder(""));
        return this.result;
    }

    void dfs(int n, int open, int closed, StringBuilder combo) {
        //End condition - if total number of open and closed parentheses are equal to n,
        //add the curent combo to result
        if (n == open && n == closed) {
            this.result.add(combo.toString());
            return;
        }
        //If number of open parentheses is less than max,
        //then we can add an open parentheses and explore child options
        if (open < n) {
            combo.append("(");
            dfs(n, open + 1, closed, combo);
            combo.setLength(combo.length() - 1);
        }
        //If number of closed parentheses is less than number of open parentheses in current combination,
        //then we can add a closed parentheses and explore child options
        if (closed < open) {
            combo.append(")");
            dfs(n, open, closed + 1, combo);
            combo.setLength(combo.length() - 1);
        }
    }
}
