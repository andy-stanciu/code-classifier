class Solution {

    public List<String> method1(int n) {
        // Initialize the result list
        List<String> result = new ArrayList<>();
        // Call the backtrack function with initial parameters
        backtrack("", n, n, result);
        // Return the generated parentheses combinations
        return result;
    }

    // Backtracking function to generate parentheses combinations
    private void backtrack(String current, int openCount, int closeCount, List<String> result) {
        if (openCount == 0 && closeCount == 0) {
            // Base case: both openCount and closeCount are zero
            // Add the current combination to the result list
            result.add(current);
        } else {
            if (openCount > 0) {
                // If there are remaining open brackets
                // Recursively call backtrack with an open bracket added
                backtrack(current + "(", openCount - 1, closeCount, result);
            }
            if (closeCount > openCount) {
                // If there are remaining close brackets
                // Recursively call backtrack with a close bracket added
                backtrack(current + ")", openCount, closeCount - 1, result);
            }
        }
    }
}
