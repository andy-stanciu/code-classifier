class Solution {

    List<String> ans = new ArrayList<>();

    public List<String> method1(int n) {
        genP(0, n, "");
        return ans;
    }

    // the key here is going in recursion with all combinations and keeping a track of number of  open ( with variable avail
    // The balancing aspect is controlled by the variable sum which should not dip below zero
    // in the second recursion call if you see avail is not being reduced but only sum , because in this second recur
    // the closing brace is being added that doesnt impact the number of open brace available. If the closing brace was
    // way too much than required , it would decrease the sum to below zero and that would stop the recursion.
    public void genP(int sum, int avail, String res) {
        if (sum < 0 || avail < 0)
            return;
        if (avail == 0 && sum == 0) {
            ans.add(res);
            return;
        }
        genP(sum + 1, avail - 1, res + "(");
        genP(sum - 1, avail, res + ")");
        return;
    }
}
