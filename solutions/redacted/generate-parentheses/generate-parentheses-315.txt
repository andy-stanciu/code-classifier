class Solution {

    final String LEFT = "(";

    final String RIGHT = ")";

    public List<String> method1(int n) {
        ArrayList<String> returnList = new ArrayList<>();
        method2(2 * n, 0, 0, new String[16], 0, returnList);
        return returnList;
    }

    void method2(int n, int left, int right, String[] last, int lastSize, ArrayList<String> returnList) {
        if (n == 0) {
            // leaf
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < lastSize; i++) {
                sb.append(last[i]);
            }
            returnList.add(sb.toString());
            return;
        }
        if (n == 1) {
            // leaf, needs closing parens
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < lastSize; i++) {
                sb.append(last[i]);
            }
            sb.append(RIGHT);
            returnList.add(sb.toString());
            return;
        }
        if (left > right) {
            last[lastSize] = RIGHT;
            method2(n - 1, left, right + 1, last, lastSize + 1, returnList);
        }
        if (left - right < n) {
            last[lastSize] = LEFT;
            method2(n - 1, left + 1, right, last, lastSize + 1, returnList);
        }
    }
}
