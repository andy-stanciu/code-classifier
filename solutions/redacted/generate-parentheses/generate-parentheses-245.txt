class Parenthesis {

    public int open;

    public int close;

    public String str;

    public Parenthesis(String str, int open, int close) {
        this.str = str;
        this.open = open;
        this.close = close;
    }
}

class Solution {

    public List<String> method1(int n) {
        List<String> result = new ArrayList<>();
        Queue<Parenthesis> permutation = new LinkedList<>();
        String temp = "";
        permutation.add(new Parenthesis(temp, 0, 0));
        while (!permutation.isEmpty()) {
            Parenthesis prev = permutation.poll();
            if (prev.open == n && prev.close == n) {
                result.add(prev.str);
            } else {
                if (prev.open < n) {
                    permutation.add(new Parenthesis(prev.str + "(", prev.open + 1, prev.close));
                }
                if (prev.open > prev.close) {
                    permutation.add(new Parenthesis(prev.str + ")", prev.open, prev.close + 1));
                }
            }
        }
        return result;
    }
}
