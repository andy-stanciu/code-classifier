class Solution {

    public String convert(String s, int numRows) {
        int length = s.length();
        // If the length of the string is equal to the number of rows
        // or numRows is 1, return the original string
        if (length == numRows || numRows == 1) {
            return s;
        }
        // Initialize a character array to store the converted string
        char[] ans = new char[length];
        // Initialize a count variable to keep track of the current position in the ans array
        int count = 0;
        // Iterate through each row in the zigzag pattern
        for (int i = 0; i < numRows; i++) {
            // Initialize j to the current row index
            int j = i;
            // Initialize k to calculate the gap between characters in the current row
            int k = 0;
            // Initialize m as the number of characters in a cycle
            int m = 2 * (numRows - 1);
            // Traverse the string in the current row
            while (j < length) {
                // Add the character at index j to the ans array
                ans[count++] = s.charAt(j);
                // Calculate the gap between characters in the current row
                // If i is 0 or the character is not at the corner of a cycle
                // Calculate the gap using the formula: 2 * (numRows - (i + 1))
                // Otherwise, calculate the gap using the formula: 2 * i
                if (i == 0 || ((i + j) % m) != 0) {
                    k = 2 * (numRows - (i + 1));
                } else {
                    k = 2 * i;
                }
                // Move j to the next character in the current row
                j = j + k;
            }
        }
        // Convert the character array to a string and return
        return new String(ans);
    }
}
