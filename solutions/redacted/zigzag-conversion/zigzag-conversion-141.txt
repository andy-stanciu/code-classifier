class Solution {

    public String convert(String s, int numRows) {
        // Caso especial: se numRows for 1, a string \xE9 retornada sem altera\xE7\xF5es
        if (numRows == 1)
            return s;
        // Criar um array de StringBuilder para armazenar cada linha
        StringBuilder[] rows = new StringBuilder[Math.min(numRows, s.length())];
        for (int i = 0; i < rows.length; i++) {
            rows[i] = new StringBuilder();
        }
        // Vari\xE1veis para rastrear a linha atual e a dire\xE7\xE3o (descendo/subindo)
        int currentRow = 0;
        boolean goingDown = false;
        // Iterar sobre cada caractere da string
        for (char c : s.toCharArray()) {
            // Adicionar caractere na linha atual
            rows[currentRow].append(c);
            // Inverter a dire\xE7\xE3o se chegar na primeira ou \xFAltima linha
            if (currentRow == 0 || currentRow == numRows - 1) {
                goingDown = !goingDown;
            }
            // Mudar a linha com base na dire\xE7\xE3o
            currentRow += goingDown ? 1 : -1;
        }
        // Concatenar todas as linhas para formar a string final
        StringBuilder result = new StringBuilder();
        for (StringBuilder row : rows) {
            result.append(row);
        }
        return result.toString();
    }
}
