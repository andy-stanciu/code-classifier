// TC: O(n)
// SC: O(1)
class Solution {

    public String convert(String s, int numRows) {
        if (numRows == 1) {
            return s;
        }
        int n = s.length();
        int currRow = 0;
        // Calculates the total number of characters in a full zigzag cycle.
        int charInSection = (numRows - 1) * 2;
        StringBuilder sb = new StringBuilder();
        while (currRow < numRows) {
            // Starting character index for the current row.
            int index = currRow;
            // Process all characters that belong to the current row.
            while (index < n) {
                // Append the character at the current index to the result.
                sb.append(s.charAt(index));
                // If not in the first or last row,
                // calculate and append the in-between "zigzag" character.
                if (currRow != 0 && currRow != numRows - 1) {
                    // Calculate the step to the "zigzag" character.
                    int charInBetween = charInSection - 2 * currRow;
                    // Calculate the index of the "zigzag" character.
                    int secondIndex = index + charInBetween;
                    // If the calculated index is within the string, append the character.
                    if (secondIndex < n) {
                        sb.append(s.charAt(secondIndex));
                    }
                }
                // Move to the next character in the current row for the next cycle.
                index += charInSection;
            }
            // Proceed to the next row.
            currRow++;
        }
        // Return the converted string.
        return sb.toString();
    }
}
