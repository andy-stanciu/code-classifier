class Solution {

    private static final int DIAGONAL_OFFSET = 2;

    public String convert(String s, int numRows) {
        if (numRows == 1) {
            return s;
        }
        StringBuilder[] rows = new StringBuilder[numRows];
        for (int i = 0; i < numRows; ++i) {
            rows[i] = new StringBuilder();
        }
        boolean isDiagonalMode = false;
        int diagonalCounter = 0;
        int lineCounter = 0;
        for (int i = 0; i < s.length(); ++i) {
            if (isDiagonalMode) {
                if (diagonalCounter >= 0 && diagonalCounter <= numRows - 1) {
                    rows[diagonalCounter].append(s.charAt(i));
                    --diagonalCounter;
                }
                if (diagonalCounter <= 0) {
                    isDiagonalMode = false;
                    lineCounter = 0;
                }
            } else {
                if (lineCounter == numRows - 1 && numRows > DIAGONAL_OFFSET) {
                    isDiagonalMode = true;
                    diagonalCounter = numRows - DIAGONAL_OFFSET;
                }
                rows[lineCounter].append(s.charAt(i));
                lineCounter = (lineCounter + 1) % numRows;
            }
        }
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < numRows; ++i) {
            result.append(rows[i]);
        }
        return result.toString();
    }
}
