class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> parent = new ArrayList<>();
        backTrack(parent, new ArrayList<>(), s, 0);
        return parent;
    }

    public void backTrack(List<List<String>> parent, List<String> child, String s, int start) {
        if (start == s.length()) {
            parent.add(new ArrayList<>(child));
        } else {
            for (int i = start; i < s.length(); i++) {
                if (method1(s, start, i)) {
                    child.add(s.substring(start, i + 1));
                    backTrack(parent, child, s, i + 1);
                    child.remove(child.size() - 1);
                }
            }
        }
    }

    public boolean method1(String s, int low, int high) {
        while (low < high) {
            if (s.charAt(low++) != s.charAt(high--)) {
                return false;
            }
        }
        return true;
    }
}
