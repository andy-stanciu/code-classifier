class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> currPart = new ArrayList<>();
        backtrack(res, currPart, s, 0);
        return res;
    }

    private void backtrack(List<List<String>> res, List<String> currPart, String s, int st) {
        if (st == s.length()) {
            res.add(new ArrayList<>(currPart));
            return;
        }
        for (int e = st + 1; e <= s.length(); e++) {
            String substring = s.substring(st, e);
            if (method1(substring)) {
                currPart.add(substring);
                backtrack(res, currPart, s, e);
                // Backtrack
                currPart.remove(currPart.size() - 1);
            }
        }
    }

    private boolean method1(String s) {
        int left = 0, right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}
