class Solution {

    List<List<String>> res = new ArrayList<List<String>>();

    public List<List<String>> partition(String s) {
        List<String> li = new ArrayList<String>();
        int n = s.length();
        backtrack(s, li, n, 0);
        return res;
    }

    void backtrack(String s, List<String> li, int n, int index) {
        if (s.length() == index) {
            res.add(new ArrayList<String>(li));
            return;
        }
        for (int i = index; i < n; i++) {
            String str = s.substring(index, i + 1);
            if (method1(str)) {
                li.add(str);
                backtrack(s, li, n, i + 1);
                li.remove(li.size() - 1);
            }
        }
    }

    boolean method1(String str) {
        int n = str.length();
        if (n == 1) {
            return true;
        }
        int firstIndex = 0;
        int lastIndex = n - 1;
        while (firstIndex < lastIndex) {
            if (str.charAt(firstIndex) != str.charAt(lastIndex)) {
                return false;
            }
            firstIndex++;
            lastIndex--;
        }
        return true;
    }
}
