class Solution {

    HashMap<String, Boolean> var1 = new HashMap<>();

    HashMap<String, List<List<String>>> combinations = new HashMap<>();

    boolean method1(String s) {
        if (var1.containsKey(s))
            return var1.get(s);
        for (int i = 0; i < s.length() / 2; i++) if (s.charAt(i) != s.charAt(s.length() - 1 - i)) {
            var1.put(s, false);
            return false;
        }
        var1.put(s, true);
        return true;
    }

    List<List<String>> dfs(String s) {
        if (combinations.containsKey(s))
            return combinations.get(s);
        List<List<String>> list = new ArrayList<>();
        for (int i = s.length(); i > 0; i--) {
            String word = s.substring(0, i);
            if (method1(word)) {
                if (i < s.length()) {
                    List<List<String>> combs = dfs(s.substring(i));
                    for (List<String> list1 : combs) {
                        List<String> save = new ArrayList<>();
                        save.add(word);
                        save.addAll(list1);
                        list.add(save);
                    }
                } else {
                    List<String> save = new ArrayList<>();
                    save.add(word);
                    list.add(save);
                }
            }
        }
        combinations.put(s, list);
        return list;
    }

    public List<List<String>> partition(String s) {
        for (char val : s.toCharArray()) {
            if (!combinations.containsKey(String.valueOf(val))) {
                List<String> list = new ArrayList<>();
                List<List<String>> list1 = new ArrayList<>();
                list.add(String.valueOf(val));
                list1.add(list);
                combinations.put(String.valueOf(val), list1);
                var1.put(String.valueOf(val), true);
            }
        }
        return dfs(s);
    }
}
