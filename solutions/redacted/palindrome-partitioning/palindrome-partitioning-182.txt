class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList();
        helper(s, res, new ArrayList());
        return res;
    }

    private void helper(String s, List<List<String>> res, List<String> step) {
        if (s.length() == 0)
            res.add(new ArrayList(step));
        for (int i = 1; i <= s.length(); i++) {
            String temp = s.substring(0, i);
            if (!method1(temp))
                continue;
            // choose
            step.add(temp);
            // explore
            helper(s.substring(i), res, step);
            // un-choose
            step.remove(step.size() - 1);
        }
        return;
    }

    private boolean method1(String s) {
        int left = 0, right = s.length() - 1;
        while (left <= right) {
            if (s.charAt(left) != s.charAt(right))
                return false;
            left++;
            right--;
        }
        return true;
    }
}
