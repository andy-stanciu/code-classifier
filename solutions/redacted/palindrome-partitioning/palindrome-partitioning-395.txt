class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> list = new ArrayList();
        // Start the backtracking algorithm
        backtrack(list, new ArrayList(), 0, s);
        return list;
    }

    public void backtrack(List<List<String>> list, List<String> temp, int pos, String s) {
        // Base case
        if (pos == s.length()) {
            list.add(new ArrayList(temp));
            return;
        }
        // Iterate from the current position to the end of the string
        for (int k = pos; k < s.length(); k++) {
            // Check palindrome
            if (method1(s, pos, k)) {
                temp.add(s.substring(pos, k + 1));
                backtrack(list, temp, k + 1, s);
                temp.remove(temp.size() - 1);
            }
        }
    }

    public boolean method1(String s, int start, int end) {
        while (start < end) {
            if (s.charAt(start++) != s.charAt(end--))
                return false;
        }
        return true;
    }
}
