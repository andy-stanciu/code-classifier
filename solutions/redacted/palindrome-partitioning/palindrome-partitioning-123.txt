class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        List<String> ds = new ArrayList<>();
        check(ans, ds, 0, s);
        return ans;
    }

    public void check(List<List<String>> ans, List<String> ds, int index, String s) {
        if (index == s.length()) {
            ans.add(new ArrayList<>(ds));
            return;
        }
        for (int i = index; i < s.length(); ++i) {
            if (palidrome(s, index, i)) {
                ds.add(s.substring(index, i + 1));
                check(ans, ds, i + 1, s);
                ds.remove(ds.size() - 1);
            }
        }
    }

    public boolean palidrome(String s, int index, int l) {
        while (index <= l) {
            if (s.charAt(index++) != s.charAt(l--))
                return false;
        }
        return true;
    }
}
