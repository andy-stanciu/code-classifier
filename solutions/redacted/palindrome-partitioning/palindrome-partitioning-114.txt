class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        backtrack(s, 0, new ArrayList<>(), result);
        return result;
    }

    private void backtrack(String s, int start, List<String> currentPartition, List<List<String>> result) {
        // If we\'ve reached the end of the string, add the current partition to the result
        if (start == s.length()) {
            result.add(new ArrayList<>(currentPartition));
            return;
        }
        // Try to partition the string at every possible position
        for (int i = start; i < s.length(); i++) {
            // If the substring s[start:i+1] is a palindrome, then partition the rest of the string
            if (method1(s, start, i)) {
                currentPartition.add(s.substring(start, i + 1));
                backtrack(s, i + 1, currentPartition, result);
                // backtrack
                currentPartition.remove(currentPartition.size() - 1);
            }
        }
    }

    // Helper function to check if a substring is a palindrome
    private boolean method1(String s, int low, int high) {
        while (low < high) {
            if (s.charAt(low) != s.charAt(high)) {
                return false;
            }
            low++;
            high--;
        }
        return true;
    }
}
