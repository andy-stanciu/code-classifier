class Solution {

    public boolean method1(String s, int i, int j) {
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }

    public void method2(String s, int idx, List<String> temp, List<List<String>> ans, boolean[][] dp) {
        if (idx == s.length()) {
            ans.add(new ArrayList<>(temp));
            return;
        }
        for (int i = idx; i < s.length(); i++) {
            if (dp[idx][i] || method1(s, idx, i)) {
                dp[idx][i] = true;
                temp.add(s.substring(idx, i + 1));
                method2(s, i + 1, temp, ans, dp);
                temp.remove(temp.size() - 1);
            }
        }
    }

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        method2(s, 0, new ArrayList<>(), ans, new boolean[s.length() + 1][s.length()]);
        return ans;
    }
}
