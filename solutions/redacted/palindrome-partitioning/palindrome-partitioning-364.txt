class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> list = new ArrayList();
        helper(list, s, new ArrayList<String>());
        return list;
    }

    private void helper(List<List<String>> result, String s, List<String> current) {
        if (s.length() == 0) {
            List<String> elem = new ArrayList<>(current);
            result.add(elem);
            return;
        }
        int n = s.length();
        for (int i = 1; i <= n; i++) {
            String ss = s.substring(0, i);
            if (isPalendrom(ss)) {
                current.add(ss);
                String rem = (i == n) ? "" : s.substring(i);
                helper(result, rem, current);
                current.remove(current.size() - 1);
            }
        }
    }

    private boolean isPalendrom(String s) {
        int n = s.length();
        for (int i = 0; i <= n / 2; i++) if (s.charAt(i) != s.charAt(n - 1 - i))
            return false;
        return true;
    }
}
