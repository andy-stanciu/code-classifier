class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> list = new ArrayList<>();
        int n = s.length();
        boolean[][] dp = new boolean[n][n];
        fillDP(s, dp);
        find(s, 0, s.length(), list, dp, new ArrayList<>());
        return list;
    }

    public void find(String s, int i, int n, List<List<String>> list, boolean[][] dp, List<String> current) {
        if (i == n) {
            list.add(new ArrayList<>(current));
            return;
        }
        for (int j = i; j < n; j++) {
            if (dp[i][j]) {
                current.add(s.substring(i, j + 1));
                find(s, j + 1, n, list, dp, current);
                current.remove(current.size() - 1);
            }
        }
    }

    public void fillDP(String s, boolean[][] dp) {
        int n = s.length();
        for (int i = 0; i < n; i++) {
            dp[i][i] = true;
        }
        for (int i = 0; i < n - 1; i++) {
            if (s.charAt(i) == s.charAt(i + 1)) {
                dp[i][i + 1] = true;
            }
        }
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i < n - len; i++) {
                if (s.charAt(i) == s.charAt(i + len) && dp[i + 1][i + len - 1]) {
                    dp[i][i + len] = true;
                }
            }
        }
    }
}
