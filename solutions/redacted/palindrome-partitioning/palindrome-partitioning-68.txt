class Solution {

    public List<List<String>> partition(String s) {
        // list to store all possible palindrome partitions
        List<List<String>> res = new ArrayList<>();
        // list to store current path
        List<String> path = new ArrayList<>();
        // call helper function with initial parameters
        helper(0, s, path, res);
        // return the final list
        return res;
    }

    public void helper(int index, String s, List<String> path, List<List<String>> res) {
        if (index == s.length()) {
            // if the current index is equal to the length of the string, add the current path to the result list
            res.add(new ArrayList<>(path));
        }
        for (int i = index; i < s.length(); i++) {
            // loop through the string starting from the current index
            if (method1(s, index, i)) {
                // if the substring from index to i is a palindrome
                // add the substring to the current path
                path.add(s.substring(index, i + 1));
                // recursively call the helper function with updated index
                helper(i + 1, s, path, res);
                // remove the last added substring from the current path
                path.remove(path.size() - 1);
            }
        }
    }

    boolean method1(String s, int start, int end) {
        // function to check if the substring is a palindrome
        while (start <= end) {
            // loop through the substring from both ends
            if (s.charAt(start++) != s.charAt(end--)) {
                // if the characters at start and end positions are not equal, return false
                return false;
            }
        }
        // return true if the substring is palindrome
        return true;
    }
}
