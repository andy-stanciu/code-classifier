class Solution {

    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        return backtrack(nums, 0, new ArrayList<Integer>());
    }

    private List<List<Integer>> backtrack(int[] up, int index, List<Integer> p) {
        List<List<Integer>> ans = new LinkedList<>();
        if (index >= up.length) {
            ans.add(new ArrayList<Integer>(p));
            return ans;
        }
        for (int i = index; i <= up.length; i++) {
            if (i > index && i < up.length && up[i] == up[i - 1])
                continue;
            if (i < up.length) {
                p.add(up[i]);
            }
            ans.addAll(backtrack(up, i + 1, p));
            if (i < up.length) {
                p.remove(p.size() - 1);
            }
        }
        return ans;
    }
}
