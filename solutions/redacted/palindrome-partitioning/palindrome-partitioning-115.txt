class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> arr = new ArrayList<>();
        helper(res, arr, new StringBuilder(s), 0);
        return res;
    }

    private void helper(List<List<String>> res, List<String> arr, StringBuilder s, int start) {
        if (start == s.length()) {
            res.add(new ArrayList<>(arr));
            return;
        }
        for (int end = start + 1; end <= s.length(); end++) {
            String subStr = s.substring(start, end);
            if (isPalindrom(subStr)) {
                arr.add(subStr);
                helper(res, arr, s, end);
                arr.remove(arr.size() - 1);
            }
        }
    }

    private boolean isPalindrom(String subStr) {
        int l = 0, r = subStr.length() - 1;
        while (l < r) {
            if (subStr.charAt(l) != subStr.charAt(r))
                return false;
            l++;
            r--;
        }
        return true;
    }
}
