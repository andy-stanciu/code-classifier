class Solution {

    List<List<String>> result = new ArrayList<>();

    public List<List<String>> partition(String s) {
        backtrack(new ArrayList<>(), 0, 1, s);
        return result;
    }

    public void backtrack(List<String> tmpList, int i, int j, String s) {
        StringBuilder str = new StringBuilder();
        if (i == s.length()) {
            result.add(new ArrayList<>(tmpList));
            return;
        }
        if (j > s.length()) {
            return;
        }
        str.append(s.substring(i, j));
        String normalString = str.toString();
        String reversedSb1 = str.reverse().toString();
        if (normalString.equals(reversedSb1)) {
            tmpList.add(s.substring(i, j));
            backtrack(tmpList, j, j + 1, s);
            tmpList.remove(tmpList.size() - 1);
        }
        backtrack(tmpList, i, j + 1, s);
    }
}
