class Solution {

    public boolean checkPalindrom(String s, int si, int ei) {
        if (si == ei) {
            return true;
        }
        while (si < ei) {
            if (s.charAt(si) != s.charAt(ei)) {
                return false;
            }
            si++;
            ei--;
        }
        return true;
    }

    List<List<String>> ans;

    public void helper(String s, List<String> curr, int si, int n) {
        if (si == n) {
            List<String> newlist = new ArrayList<>(curr);
            ans.add(newlist);
            return;
        }
        for (int i = si; i < n; i++) {
            boolean isPlaindrom = checkPalindrom(s, si, i);
            if (isPlaindrom) {
                curr.add(s.substring(si, i + 1));
                helper(s, curr, i + 1, n);
                curr.remove(curr.size() - 1);
            }
        }
    }

    public List<List<String>> partition(String s) {
        ans = new ArrayList<>();
        int n = s.length();
        helper(s, new ArrayList<>(), 0, n);
        return ans;
    }
}
