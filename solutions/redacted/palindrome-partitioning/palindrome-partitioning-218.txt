class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<List<String>>();
        List<String> curr = new ArrayList<String>();
        int n = s.length();
        recur(s, 0, n, curr, res);
        return res;
    }

    public void recur(String s, int idx, int n, List<String> curr, List<List<String>> res) {
        if (idx == n) {
            res.add(new ArrayList<String>(curr));
            return;
        }
        for (int i = idx; i < n; i++) {
            if (method1(s, idx, i)) {
                curr.add(s.substring(idx, i + 1));
                recur(s, i + 1, n, curr, res);
                curr.remove(curr.size() - 1);
            }
        }
    }

    public boolean method1(String s, int st, int end) {
        while (st < end) {
            if (s.charAt(st) != s.charAt(end))
                return false;
            st++;
            end--;
        }
        return true;
    }
}
