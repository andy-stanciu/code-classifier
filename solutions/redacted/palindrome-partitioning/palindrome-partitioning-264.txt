class Solution {

    // Function to check if a string is a palindrome
    public boolean method1(String str) {
        int i = 0, j = str.length() - 1;
        while (i < j) {
            if (str.charAt(i) != str.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }

    // Function to partition the given string into palindromic substrings
    public void partition(List<List<String>> ls, List<String> temp, String s) {
        // Base case: if the string is empty, add the current partition to the result list
        if (s.length() == 0) {
            ls.add(new ArrayList<>(temp));
            return;
        }
        // Loop through each possible partition starting from the beginning of the string
        for (int i = 1; i <= s.length(); i++) {
            // Get the substring from the beginning to the current index
            String str = s.substring(0, i);
            // Check if the substring is a palindrome, if not, skip it
            if (!method1(str))
                continue;
            // Add the palindrome substring to the current partition
            temp.add(str);
            // Recursively partition the remaining substring
            partition(ls, temp, s.substring(i, s.length()));
            // Remove the last added palindrome substring to backtrack
            temp.remove(temp.size() - 1);
        }
    }

    // Function to partition the given string into palindromic substrings
    public List<List<String>> partition(String s) {
        List<List<String>> ls = new ArrayList<>();
        // If the string is empty or has only one character, add it as a partition
        if (s.length() == 0 || s.length() == 1) {
            List<String> temp = new ArrayList<>();
            temp.add(s);
            ls.add(new ArrayList<>(temp));
            return ls;
        }
        // Recursively partition the string into palindromic substrings
        partition(ls, new ArrayList<>(), s);
        return ls;
    }
}
