class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        findCombinations(s, ans, new ArrayList<>(), 0, "", false);
        return ans;
    }

    public void findCombinations(String s, List<List<String>> ans, List<String> helper, int i, String str, boolean check) {
        if (i == s.length() && check) {
            ans.add(new ArrayList<>(helper));
            return;
        } else if (i >= s.length()) {
            return;
        }
        str = str + s.charAt(i);
        if (method1(str)) {
            helper.add(str);
            findCombinations(s, ans, helper, i + 1, "", true);
            helper.remove(helper.size() - 1);
        }
        findCombinations(s, ans, helper, i + 1, str, false);
    }

    public boolean method1(String s) {
        int l = s.length();
        int i = 0;
        int j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i) == s.charAt(j)) {
                i++;
                j--;
            } else
                return false;
        }
        return true;
    }
}
