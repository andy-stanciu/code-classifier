class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> list = new ArrayList<>();
        backtrack(list, new ArrayList<>(), s, 0);
        return list;
    }

    private void backtrack(List<List<String>> list, List<String> templist, String s, int start) {
        if (s.length() == start) {
            list.add(new ArrayList<>(templist));
        } else {
            for (int i = start; i < s.length(); i++) {
                if (method1(s, start, i)) {
                    templist.add(s.substring(start, i + 1));
                    backtrack(list, templist, s, i + 1);
                    templist.remove(templist.size() - 1);
                }
            }
        }
    }

    public boolean method1(String s, int low, int high) {
        while (low < high) if (s.charAt(low++) != s.charAt(high--))
            return false;
        return true;
    }
}
