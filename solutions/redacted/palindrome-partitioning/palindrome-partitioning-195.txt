class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> str = new ArrayList<>();
        backtrack(s, 0, new ArrayList<>(), str);
        return str;
    }

    private void backtrack(String s, int start, List<String> partition, List<List<String>> str) {
        if (start == s.length()) {
            str.add(new ArrayList<>(partition));
            return;
        }
        for (int end = start; end < s.length(); end++) {
            if (method1(s, start, end)) {
                partition.add(s.substring(start, end + 1));
                backtrack(s, end + 1, partition, str);
                partition.remove(partition.size() - 1);
            }
        }
    }

    public boolean method1(String s, int i, int e) {
        while (i <= e) {
            if (s.charAt(i++) != s.charAt(e--)) {
                return false;
            }
        }
        return true;
    }
}
