class Solution {

    static int l;

    private List<List<String>> result = new ArrayList<>();

    private List<String> subSet = new ArrayList<>();

    public List<List<String>> partition(String s) {
        l = s.length();
        backTrackHelper(0, s);
        return result;
    }

    private void backTrackHelper(int start, String s) {
        if (start == l) {
            result.add(new ArrayList<>(subSet));
            return;
        }
        for (int i = start; i < l; ++i) {
            if (!method1(start, i, s))
                continue;
            subSet.add(s.substring(start, i + 1));
            backTrackHelper(i + 1, s);
            subSet.remove(subSet.size() - 1);
        }
    }

    private static boolean method1(int start, int end, String s) {
        while (start < end) {
            if (s.charAt(start++) != s.charAt(end--))
                return false;
        }
        return true;
    }
}
