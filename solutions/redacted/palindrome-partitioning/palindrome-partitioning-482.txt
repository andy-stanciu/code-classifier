class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<List<String>>();
        partition(ans, new ArrayList<String>(), s, 0);
        return ans;
    }

    void partition(List<List<String>> ans, ArrayList<String> list, String s, int start) {
        if (start == s.length()) {
            ans.add(new ArrayList<>(list));
            return;
        }
        for (int i = start + 1; i <= s.length(); i++) {
            if (method1(s.substring(start, i))) {
                list.add(s.substring(start, i));
                partition(ans, list, s, i);
                list.remove(list.size() - 1);
            }
        }
    }

    boolean method1(String s) {
        char[] arr = s.toCharArray();
        if (arr.length == 1)
            return true;
        for (int i = 0; i < arr.length / 2; i++) {
            if (arr[i] != arr[arr.length - 1 - i])
                return false;
        }
        return true;
    }
}
