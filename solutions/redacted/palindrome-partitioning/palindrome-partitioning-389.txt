class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        backtracking(ans, new ArrayList<>(), s, 0);
        return ans;
    }

    private void backtracking(List<List<String>> ans, List<String> l, String s, int index) {
        if (index == s.length()) {
            ans.add(new ArrayList<>(l));
            return;
        }
        for (int i = index; i < s.length() + 1; i++) {
            if (method1(s.substring(index, i))) {
                l.add(s.substring(index, i));
                backtracking(ans, l, s, i);
                l.remove(l.size() - 1);
            }
        }
        return;
    }

    private boolean method1(String s) {
        if (s.length() == 0)
            return false;
        int i = 0;
        int j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i) != s.charAt(j))
                return false;
            i++;
            j--;
        }
        return true;
    }
}
