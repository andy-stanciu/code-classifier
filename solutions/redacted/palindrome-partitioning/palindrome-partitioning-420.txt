class Solution {

    public List<List<String>> partition(String s) {
        return backtrack(s, new ArrayList<String>());
    }

    private List<List<String>> backtrack(String s, List<String> list) {
        List<List<String>> ans = new ArrayList<>();
        if (s.length() == 0) {
            ans.add(new ArrayList<String>(list));
            return ans;
        }
        for (int i = 0; i < s.length(); i++) {
            String temp = s.substring(0, i + 1);
            if (method1(temp)) {
                list.add(temp);
                ans.addAll(backtrack(s.substring(i + 1), list));
                list.remove(list.size() - 1);
            }
        }
        return ans;
    }

    private boolean method1(String s) {
        int a = 0;
        int b = s.length() - 1;
        while (a < b) {
            if (s.charAt(a) != s.charAt(b))
                return false;
            a++;
            b--;
        }
        return true;
    }
}
