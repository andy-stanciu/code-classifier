class Solution {

    List<List<String>> ans = new ArrayList<>();

    public List<List<String>> partition(String s) {
        solve(s, -1, new ArrayList<String>());
        return ans;
    }

    public void solve(String s, int i, List<String> op) {
        if (i == s.length() - 1) {
            ans.add(new ArrayList<>(op));
            return;
        }
        StringBuilder sb = new StringBuilder();
        for (int j = i + 1; j < s.length(); j++) {
            sb.append(s.charAt(j));
            if (method1(sb, 0, sb.length() - 1)) {
                op.add(new String(sb.toString()));
                solve(s, j, op);
                op.remove(op.size() - 1);
            }
        }
        return;
    }

    public boolean method1(StringBuilder s, int start, int end) {
        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}
