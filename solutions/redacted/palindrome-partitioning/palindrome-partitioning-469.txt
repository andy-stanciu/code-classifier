class Solution {

    List<List<String>> result = new ArrayList<>();

    public List<List<String>> partition(String s) {
        dfs(s, new ArrayList<>(), 0);
        return result;
    }

    private void dfs(String s, List<String> ans, int i) {
        if (i == s.length()) {
            result.add(new ArrayList<>(ans));
            return;
        }
        for (int j = i; j < s.length(); j++) {
            if (isPallindrome(s, i, j)) {
                ans.add(s.substring(i, j + 1));
                dfs(s, ans, j + 1);
                ans.remove(ans.size() - 1);
            }
        }
    }

    private boolean isPallindrome(String s, int l, int r) {
        while (l < r) {
            if (s.charAt(l++) != s.charAt(r--)) {
                return false;
            }
        }
        return true;
    }
}
/*

In this question we can simply use backtracking. 



*/
