class Solution {

    /**
     * 1. Now if the current is positive and top of stack is negetive they never gonna collide So just simpply push the current in stack
     *
     * 2. If the current is negetive and top of stack is positive then there will be collision
     *
     * 3. In this case Take sum of both of them taking current + top of stack
     *
     * If the sum if negetive that means current wins so remove the top element from stack
     *
     * But if the sum is positive that means our stack wins so just set current value in array to be 0 so that we never gonna mess with it
     *
     * But in the case both are equal just remove the top of stack and set current to 0 in array
     *
     * At last if the current doesn\'t change to 0 that means it belongs to the first case So simply push it in stack
     *
     * At last reverse copy the elemets of stack in a array and return it
     */
    public int[] method1(int[] param1) {
        // Create a Stack
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < param1.length; i++) {
            while (param1[i] < 0 && !stack.isEmpty() && stack.peek() > 0) {
                int win = param1[i] + stack.peek();
                if (win < 0)
                    stack.pop();
                else if (win > 0)
                    param1[i] = 0;
                else {
                    param1[i] = 0;
                    stack.pop();
                }
            }
            if (param1[i] != 0)
                stack.push(param1[i]);
        }
        int[] result = new int[stack.size()];
        int idx = stack.size() - 1;
        ;
        while (!stack.isEmpty()) {
            result[idx--] = stack.pop();
        }
        return result;
    }
}
