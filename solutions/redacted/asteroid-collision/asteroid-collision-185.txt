class Solution {

    public int[] method1(int[] param1) {
        Stack<Integer> stack = new Stack<>();
        for (int var1 : param1) {
            // this will tell that if we have to push the negative ele or not
            boolean shouldPush = true;
            // run this till: if stack is not AND ele is negative AND stackTop is positive
            while (!stack.isEmpty() && var1 < 0 && stack.peek() > 0) {
                int top = stack.peek();
                if (top < -var1) {
                    // top is less so pop it and continue to the next top
                    stack.pop();
                    continue;
                } else if (top == -var1) {
                    //else if (top == -asteroid) { if both are equal then pop top and the neg ele will also not be added bcz below shouldPush wil become false
                    stack.pop();
                }
                shouldPush = false;
                break;
            }
            if (shouldPush) {
                stack.push(var1);
            }
        }
        int[] result = new int[stack.size()];
        for (int i = stack.size() - 1; i >= 0; i--) {
            result[i] = stack.pop();
        }
        return result;
    }
}
