class Solution {

    public int[] method1(int[] param1) {
        Stack<Integer> var1 = new Stack<>();
        for (int i = 0; i < param1.length; i++) {
            if (var1.empty()) {
                var1.push(param1[i]);
                continue;
            }
            int topElement;
            do {
                topElement = var1.peek();
                if ((topElement < 0 && param1[i] < 0) || (topElement > 0 && param1[i] > 0)) {
                    var1.push(param1[i]);
                    break;
                }
                if (topElement < 0) {
                    var1.push(param1[i]);
                    break;
                }
                if (topElement > 0 && Math.abs(topElement) > Math.abs(param1[i])) {
                    break;
                }
                if (Math.abs(topElement) == Math.abs(param1[i])) {
                    var1.pop();
                    break;
                }
                var1.pop();
            } while (!var1.empty());
            if (var1.empty() && Math.abs(topElement) < Math.abs(param1[i]))
                var1.push(param1[i]);
        }
        if (var1.empty()) {
            int[] array = {};
            return array;
        }
        int[] answer = new int[var1.size()];
        for (int i = var1.size() - 1; i >= 0; i--) {
            answer[i] = var1.pop();
        }
        return answer;
    }
}
