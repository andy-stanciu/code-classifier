class Solution {

    public static int[] method1(int[] param1) {
        LinkedList<Integer> stack = new LinkedList<>();
        for (int var1 : param1) {
            if (!stack.isEmpty()) {
                int peeked = stack.peek();
                if (peeked > 0 && var1 < 0) {
                    if (Math.abs(peeked) > Math.abs(var1)) {
                    } else {
                        method2(stack, var1);
                    }
                } else {
                    stack.push(var1);
                }
            } else {
                stack.push(var1);
            }
        }
        int[] var2 = new int[stack.size()];
        int index = stack.size() - 1;
        for (int i = stack.size() - 1; i >= 0; i--) {
            var2[index] = stack.pop();
            index--;
        }
        return var2;
    }

    private static void method2(LinkedList<Integer> stack, Integer param2) {
        boolean conguer = false;
        while (!conguer && !stack.isEmpty()) {
            int peeked = stack.peek();
            if (peeked < 0 && param2 < 0) {
                stack.push(param2);
                conguer = true;
            } else {
                if (Math.abs(peeked) < Math.abs(param2)) {
                    stack.pop();
                    if (stack.isEmpty()) {
                        stack.push(param2);
                        conguer = true;
                    } else {
                    }
                } else if (Math.abs(peeked) == Math.abs(param2)) {
                    stack.pop();
                    conguer = true;
                } else if (Math.abs(peeked) > Math.abs(param2)) {
                    conguer = true;
                }
            }
        }
    }
}
