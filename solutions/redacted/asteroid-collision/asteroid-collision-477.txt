class Solution {

    public int[] method1(int[] param1) {
        LinkedList<Integer> result = new LinkedList<>();
        for (int var1 : param1) {
            method2(result, var1);
        }
        int[] answer = new int[result.size()];
        int index = 0;
        for (int var1 : result) {
            answer[index++] = var1;
        }
        return answer;
    }

    private boolean areColliding(LinkedList<Integer> param1, int var1) {
        return !param1.isEmpty() && param1.peekLast() > 0 && var1 < 0;
    }

    private void method2(LinkedList<Integer> param1, int next) {
        while (areColliding(param1, next)) {
            if (Math.abs(param1.peekLast()) > Math.abs(next)) {
                // current one gets destroyed
                return;
            } else if (Math.abs(param1.peekLast()) < Math.abs(next)) {
                param1.removeLast();
            } else {
                // both are equal, so they get destroyed
                param1.removeLast();
                return;
            }
        }
        // add current one as it does not collide
        param1.add(next);
    }
}
