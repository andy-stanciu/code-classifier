public class Solution {

    // Method to reverse an array
    public static int[] reverseArray(int[] array) {
        int left = 0;
        int right = array.length - 1;
        while (left < right) {
            // Swap elements
            int temp = array[left];
            array[left] = array[right];
            array[right] = temp;
            // Move towards the middle
            left++;
            right--;
        }
        return array;
    }

    // Method to handle asteroid collision
    public int[] method1(int[] param1) {
        Stack<Integer> stack = new Stack<>();
        boolean isEqual = false;
        for (int var1 : param1) {
            if (var1 < 0) {
                if (stack.isEmpty()) {
                    stack.push(var1);
                } else {
                    while (!stack.isEmpty() && stack.peek() > 0 && stack.peek() <= Math.abs(var1)) {
                        if (stack.peek() == Math.abs(var1)) {
                            isEqual = true;
                            stack.pop();
                            break;
                        }
                        stack.pop();
                    }
                    if ((stack.isEmpty() && !isEqual) || (!stack.isEmpty() && stack.peek() < 0 && !isEqual)) {
                        stack.push(var1);
                    }
                    if (isEqual) {
                        isEqual = false;
                    }
                }
            } else {
                stack.push(var1);
            }
        }
        int[] result = new int[stack.size()];
        int index = 0;
        while (!stack.isEmpty()) {
            result[index++] = stack.pop();
        }
        // Reverse the result array before returning
        return reverseArray(result);
    }
}
