class Solution {

    public int[] method1(int[] param1) {
        int n = param1.length;
        Stack<Integer> s = new Stack<>();
        int[] ans;
        int cur = param1[0];
        int j = 0;
        while (j < n) {
            if (!s.isEmpty() && s.peek() > 0 && cur < 0) {
                if (Math.abs(s.peek()) < Math.abs(cur)) {
                    s.pop();
                } else if (Math.abs(s.peek()) == Math.abs(cur)) {
                    s.pop();
                    j++;
                    if (j >= n)
                        break;
                    cur = param1[j];
                } else {
                    j++;
                    if (j >= n)
                        break;
                    cur = param1[j];
                }
            } else {
                s.push(cur);
                j++;
                if (j >= n)
                    break;
                cur = param1[j];
            }
        }
        ans = new int[s.size()];
        int i = s.size() - 1;
        while (!s.isEmpty()) {
            ans[i--] = s.pop();
        }
        return ans;
    }
}
