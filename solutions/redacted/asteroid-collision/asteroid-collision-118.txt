class Solution {

    public int[] method1(int[] asts) {
        Stack<Integer> stack = new Stack<Integer>();
        stack.push(asts[0]);
        for (int i = 1; i < asts.length; i++) {
            if (asts[i] < 0) {
                while (!stack.empty() && stack.peek() > 0 && stack.peek() < Math.abs(asts[i])) {
                    stack.pop();
                }
                if (!stack.empty() && stack.peek() > 0 && stack.peek() == Math.abs(asts[i])) {
                    stack.pop();
                    continue;
                }
                if (stack.empty() || stack.peek() < 0) {
                    stack.push(asts[i]);
                }
            } else {
                stack.push(asts[i]);
            }
        }
        int[] result = new int[stack.size()];
        int i = stack.size() - 1;
        while (!stack.isEmpty()) {
            result[i--] = stack.pop();
        }
        return result;
    }
}
