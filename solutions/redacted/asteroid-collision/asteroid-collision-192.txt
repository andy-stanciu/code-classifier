class Solution {

    public int[] method1(int[] param1) {
        ArrayList<Integer> arr = new ArrayList<Integer>();
        //buffer to ensure list nonempty
        arr.add(0);
        for (int i = 0; i < param1.length; i++) {
            int as = param1[i];
            if (//add positive asteroids automatically
            as > 0)
                //add positive asteroids automatically
                arr.add(as);
            else {
                //potential collision
                int last = arr.size() - 1;
                if (// going same direction, can add new asteroid
                arr.get(last) <= 0)
                    // going same direction, can add new asteroid
                    arr.add(as);
                else {
                    if (arr.get(last) < -1 * as) {
                        // old asteroid explodes, new one continues
                        arr.remove(last);
                        i--;
                    } else if (// reached buffer, new one destroyed all the previous asteroids, gets to stay now
                    last == 0)
                        // reached buffer, new one destroyed all the previous asteroids, gets to stay now
                        arr.add(as);
                    else //same size, both asteroids disappear
                    if (arr.get(last) == -1 * as)
                        arr.remove(last);
                }
            }
        }
        // get rid of buffer
        arr.remove(0);
        // return array
        return arr.stream().mapToInt(i -> i).toArray();
    }
}
