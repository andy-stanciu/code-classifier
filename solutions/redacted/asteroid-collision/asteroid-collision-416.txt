class Solution {

    /**
     * @return the state of the asteroids after all collisions.
     */
    public int[] method1(int[] param1) {
        // index where the next asteroid will go.
        int j = 0;
        for (int var1 : param1) {
            // Destroy smaller asteroids.
            while (j > 0 && collidesAndDestroys(param1[j - 1], var1)) {
                j--;
            }
            if (j == 0 || !collides(param1[j - 1], var1)) {
                param1[j++] = var1;
            } else if (mutuallyDestroys(param1[j - 1], var1)) {
                j--;
            } else if (destroys(param1[j - 1], var1)) {
                param1[j - 1] = var1;
            }
            // Else the current asteroid is destroyed.
        }
        return Arrays.copyOfRange(param1, 0, j);
    }

    /**
     * @return {@code true} if {@code b} collides with {@code a}, {@code false} otherwise.
     */
    private boolean collides(int a, int b) {
        return a > 0 && b < 0;
    }

    /**
     * @return {@code true} if {@code b} colides with and destroys {@code a}, {@code false} otherwise.
     */
    private boolean collidesAndDestroys(int a, int b) {
        return collides(a, b) && destroys(a, b);
    }

    /**
     * @return {@code true} if {@code b} destroys {@code a}, {@code false} otherwise.
     */
    private boolean destroys(int a, int b) {
        return a < -1 * b;
    }

    /**
     * @return {@code true} if {@code b} mutually destroys {@code a}, {@code false} otherwise.
     */
    private boolean mutuallyDestroys(int a, int b) {
        return a == -1 * b;
    }
}
