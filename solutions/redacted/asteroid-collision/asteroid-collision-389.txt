class Solution {

    public int[] method1(int[] param1) {
        // using list to ablity to removing elements
        ArrayList<Integer> cList = new ArrayList<Integer>();
        for (int i = 0; i < param1.length; i++) cList.add(param1[i]);
        int left = 0, ptr = 1, skips = 0;
        while (ptr < cList.size()) {
            // left is -
            if (cList.get(left) < 0) {
                left++;
                ptr = Math.max(ptr, left + 1);
            } else // left is + / ptr is - / ptr > left / no skips
            if (cList.get(ptr) < 0 && skips == 0 && Math.abs(cList.get(ptr)) > cList.get(left)) {
                cList.remove(left);
            } else // left is + / ptr is - / ptr > left / with skips
            if (cList.get(ptr) < 0 && skips > 0 && Math.abs(cList.get(ptr)) > cList.get(left + skips)) {
                cList.remove(left + skips);
                skips--;
                ptr = Math.max(ptr - 1, left + 1);
            } else // left is + / ptr is - / left > ptr / no skips
            if (cList.get(ptr) < 0 && skips == 0 && cList.get(left) > Math.abs(cList.get(ptr))) {
                cList.remove(ptr);
            } else // left is + / ptr is - / left > ptr / with skips
            if (cList.get(ptr) < 0 && skips > 0 && cList.get(left + skips) > Math.abs(cList.get(ptr))) {
                cList.remove(ptr);
            } else // left is + / ptr is - / left = ptr / no skips
            if (cList.get(ptr) < 0 && skips == 0 && Math.abs(cList.get(ptr)) == cList.get(left)) {
                cList.remove(ptr);
                cList.remove(left);
            } else // left is + / ptr is - / left = ptr / with skips
            if (cList.get(ptr) < 0 && skips > 0 && cList.get(left + skips) == Math.abs(cList.get(ptr))) {
                cList.remove(ptr);
                cList.remove(left + skips);
                skips--;
                ptr--;
            } else // left is + / ptr is +
            if (cList.get(ptr) > 0) {
                skips++;
                ptr++;
            }
        }
        // representing the list in a new array again
        int[] result = new int[cList.size()];
        for (int i = 0; i < cList.size(); i++) result[i] = cList.get(i);
        return result;
    }
}
