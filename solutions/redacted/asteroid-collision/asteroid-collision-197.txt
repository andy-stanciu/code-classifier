class Solution {

    public int[] method1(int[] nums) {
        Stack<Integer> stack = new Stack<>();
        stack.push(nums[0]);
        for (int i = 1; i < nums.length; i++) {
            int temp = nums[i];
            // if both move in same direcn or left one in left and right one in right, we can push
            if (stack.isEmpty() || stack.peek() < 0 && temp > 0 || stack.peek() > 0 && temp > 0 || stack.peek() < 0 && temp < 0) {
                stack.push(nums[i]);
            } else {
                // otherwise we see how many asteriods burst
                while (!stack.isEmpty() && (stack.peek() > 0 && temp < 0) && Math.abs(stack.peek()) < Math.abs(temp)) {
                    stack.pop();
                }
                // if both move in same direction, push
                if (stack.isEmpty() || stack.peek() * temp > 0) {
                    stack.push(temp);
                } else // if both are of equal magnitude and opposite sign, they both burst
                if (stack.peek() * temp < 0 && Math.abs(stack.peek()) == Math.abs(temp)) {
                    stack.pop();
                }
            }
        }
        // return ans array
        int[] ans = new int[stack.size()];
        int index = ans.length - 1;
        while (!stack.isEmpty()) {
            ans[index] = stack.pop();
            index--;
        }
        return ans;
    }
}
