class Solution {

    public int[] method1(int[] arr) {
        Stack<Integer> stack = new Stack<>();
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < arr.length; i++) {
            while (!stack.isEmpty() && arr[i] < 0 && Math.abs(arr[i]) > stack.peek()) {
                stack.pop();
            }
            if (arr[i] < 0) {
                if (stack.isEmpty()) {
                    ans.add(arr[i]);
                } else if (Math.abs(arr[i]) == stack.peek()) {
                    stack.pop();
                }
                continue;
            }
            stack.push(arr[i]);
        }
        List<Integer> pos = new ArrayList<>();
        while (!stack.isEmpty()) {
            pos.add(stack.pop());
        }
        int n = ans.size();
        int p = pos.size();
        int[] res = new int[n + p];
        int k = 0;
        for (int i = 0; i < n; i++) {
            res[k++] = ans.get(i);
        }
        for (int i = p - 1; i >= 0; i--) {
            res[k++] = pos.get(i);
        }
        return res;
    }
}
