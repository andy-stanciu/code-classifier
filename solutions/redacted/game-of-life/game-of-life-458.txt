class Solution {

    int ROW;

    int COL;

    int[][] dirs;

    int STAYS_DEAD = 0, STAYS_ALIVE = 1, DEAD_TO_ALIVE = 2, ALIVE_TO_DEAD = 3;

    boolean method1(int row, int col) {
        return row < 0 || row >= ROW || col < 0 || col >= COL;
    }

    int getPopulations(int[][] board, int row, int col) {
        int alive = 0;
        for (int[] dir : dirs) {
            int newRow = row + dir[0];
            int newCol = col + dir[1];
            if (method1(newRow, newCol))
                continue;
            if (board[newRow][newCol] == STAYS_ALIVE || board[newRow][newCol] == ALIVE_TO_DEAD) {
                alive++;
            }
        }
        return alive;
    }

    public void method2(int[][] board) {
        ROW = board.length;
        COL = board[0].length;
        dirs = new int[][] { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 }, { -1, -1 }, { -1, 1 }, { 1, -1 }, { 1, 1 } };
        for (int r = 0; r < ROW; r++) {
            for (int c = 0; c < COL; c++) {
                int populationAround = getPopulations(board, r, c);
                //1. Any live cell with fewer than two live neighbors dies
                //as if caused by under-population.
                //3. Any live cell with more than three live neighbors dies
                //as if by over-population.
                if (board[r][c] == 1 && (populationAround < 2 || populationAround > 3)) {
                    board[r][c] = ALIVE_TO_DEAD;
                } else if (board[r][c] == 0 && populationAround == 3) {
                    //4. Any dead cell with exactly three live neighbors becomes
                    //a live cell, as if by reproduction.
                    board[r][c] = DEAD_TO_ALIVE;
                }
            }
        }
        for (int r = 0; r < ROW; r++) {
            for (int c = 0; c < COL; c++) {
                if (board[r][c] == ALIVE_TO_DEAD)
                    board[r][c] = 0;
                else if (board[r][c] == DEAD_TO_ALIVE)
                    board[r][c] = 1;
            }
        }
    }
}
