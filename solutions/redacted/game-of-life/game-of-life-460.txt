class Solution {

    public void method1(int[][] board) {
        int[][] board2 = new int[board.length][board[0].length];
        //fill temp board
        for (int i = 0; i < board.length; i++) for (int j = 0; j < board[0].length; j++) {
            board2[i][j] = check(i, j, board);
        }
        // update board
        for (int i = 0; i < board.length; i++) for (int j = 0; j < board[0].length; j++) {
            board[i][j] = board2[i][j];
        }
        return;
    }

    // checking conditions
    public int check(int i, int j, int[][] board) {
        if (board[i][j] == 1 && count(i, j, board) < 2)
            return 0;
        else if (board[i][j] == 1 && (count(i, j, board) == 2 || count(i, j, board) == 3))
            return 1;
        else if (board[i][j] == 1 && count(i, j, board) > 3)
            return 0;
        else if (board[i][j] == 0 && count(i, j, board) == 3)
            return 1;
        return 0;
    }

    // counting living neighbors
    public int count(int i, int j, int[][] board) {
        int counter = 0;
        for (int k = 0; k < 3; k++) for (int l = 0; l < 3; l++) {
            if (k == 1 && l == 1)
                continue;
            counter += isAlive(i + k - 1, j + l - 1, board);
        }
        return counter;
    }

    // check cells: 1 - alive, 0 - dead or cell does not exist
    public int isAlive(int k, int l, int[][] board) {
        if (k > board.length - 1 || k < 0 || l > board[0].length - 1 || l < 0)
            return 0;
        else
            return board[k][l];
    }
}
