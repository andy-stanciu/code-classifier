class Solution {

    public void method1(int[][] board) {
        int n = board.length;
        int m = board[0].length;
        int[][] temp = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int neighborLiveCells = getNeighborLiveCells(i, j, board);
                updateTemp(i, j, neighborLiveCells, temp, board);
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                board[i][j] = temp[i][j];
            }
        }
    }

    private int getNeighborLiveCells(int i, int j, int[][] board) {
        int[] dirs = { 1, 0, -1, 0, 1, -1, -1, 1, 1 };
        int n = board.length;
        int m = board[0].length;
        int neighborLiveCells = 0;
        for (int k = 0; k < 8; k++) {
            int x = i + dirs[k];
            int y = j + dirs[k + 1];
            if (x >= 0 && x < n && y >= 0 && y < m) {
                if (board[x][y] == 1) {
                    neighborLiveCells++;
                }
            }
        }
        return neighborLiveCells;
    }

    private void updateTemp(int i, int j, int neighborLiveCells, int[][] temp, int[][] board) {
        //Only keeping rules which can change the state of current cell
        if (neighborLiveCells < 2) {
            temp[i][j] = 0;
        } else if (neighborLiveCells > 3) {
            temp[i][j] = 0;
        } else if (neighborLiveCells == 3) {
            temp[i][j] = 1;
        } else {
            temp[i][j] = board[i][j];
        }
    }
}
