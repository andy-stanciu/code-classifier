class Solution {

    int countN(int[][] arr, int i, int j) {
        int m = arr.length;
        int n = arr[0].length;
        int count = 0;
        if (i - 1 >= 0 && j - 1 >= 0 && (arr[i - 1][j - 1] == 1 || arr[i - 1][j - 1] == 3))
            count++;
        if (i - 1 >= 0 && (arr[i - 1][j] == 1 || arr[i - 1][j] == 3))
            count++;
        if (i - 1 >= 0 && j + 1 < n && (arr[i - 1][j + 1] == 1 || arr[i - 1][j + 1] == 3))
            count++;
        if (j - 1 >= 0 && (arr[i][j - 1] == 1 || arr[i][j - 1] == 3))
            count++;
        if (j + 1 < n && arr[i][j + 1] == 1)
            count++;
        if (i + 1 < m && j - 1 >= 0 && arr[i + 1][j - 1] == 1)
            count++;
        if (i + 1 < m && arr[i + 1][j] == 1)
            count++;
        if (i + 1 < m && j + 1 < n && arr[i + 1][j + 1] == 1)
            count++;
        return count;
    }

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i < m; i++) {
            int neighbors = 0;
            for (int j = 0; j < n; j++) {
                neighbors = countN(board, i, j);
                if (board[i][j] == 0 && neighbors == 3)
                    board[i][j] = 2;
                else if (board[i][j] == 1 && (neighbors < 2 || neighbors > 3))
                    board[i][j] = 3;
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 3)
                    board[i][j] = 0;
                if (board[i][j] == 2)
                    board[i][j] = 1;
            }
        }
    }
}
