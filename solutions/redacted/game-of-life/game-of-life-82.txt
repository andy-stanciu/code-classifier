class Solution {

    public int check(int[][] board, int r, int c) {
        int rows = board.length;
        int cols = board[0].length;
        int liveNeighbors = 0;
        for (int i = Math.max(r - 1, 0); i <= Math.min(r + 1, rows - 1); i++) {
            for (int j = Math.max(c - 1, 0); j <= Math.min(c + 1, cols - 1); j++) {
                if (i == r && j == c)
                    continue;
                if (board[i][j] == 1 || board[i][j] == 2)
                    liveNeighbors++;
            }
        }
        if (board[r][c] == 1) {
            return (liveNeighbors < 2 || liveNeighbors > 3) ? 2 : 1;
        } else {
            return (liveNeighbors == 3) ? 3 : 0;
        }
    }

    public void method1(int[][] board) {
        if (board == null || board.length == 0)
            return;
        int rows = board.length;
        int cols = board[0].length;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                board[i][j] = check(board, i, j);
            }
        }
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (board[i][j] == 2)
                    board[i][j] = 0;
                if (board[i][j] == 3)
                    board[i][j] = 1;
            }
        }
    }
}
