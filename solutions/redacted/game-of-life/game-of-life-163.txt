class Solution {

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i <= m - 1; i++) {
            for (int j = 0; j <= n - 1; j++) {
                int livingNeighbours = countLivingNeighbours(board, i, j);
                if (board[i][j] == 0) {
                    if (livingNeighbours == 3) {
                        board[i][j] = 2;
                    }
                } else {
                    if (livingNeighbours != 2 && livingNeighbours != 3) {
                        board[i][j] = 3;
                    }
                }
            }
        }
        for (int i = 0; i <= m - 1; i++) {
            for (int j = 0; j <= n - 1; j++) {
                if (board[i][j] == 2) {
                    board[i][j] = 1;
                } else if (board[i][j] == 3) {
                    board[i][j] = 0;
                }
            }
        }
    }

    private int countLivingNeighbours(int[][] board, int i, int j) {
        // rows
        int m = board.length;
        // cols
        int n = board[0].length;
        int livingNeighbours = 0;
        int[] dx = { -1, -1, -1, 0, 0, 1, 1, 1 };
        int[] dy = { -1, 0, 1, -1, 1, -1, 0, 1 };
        for (int k = 0; k < 8; k++) {
            int x = i + dx[k];
            int y = j + dy[k];
            if (isValid(x, y, m, n)) {
                if (board[x][y] == 1 || board[x][y] == 3) {
                    livingNeighbours++;
                }
            }
        }
        return livingNeighbours;
    }

    private boolean isValid(int x, int y, int m, int n) {
        return (x >= 0) && (x < m) && (y >= 0) && (y < n);
    }
}
