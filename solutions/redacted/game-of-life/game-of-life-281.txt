class Solution {

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] populationMatrix = new int[m][n];
        for (int i = 0; i < m; i++) System.arraycopy(board[i], 0, populationMatrix[i], 0, n);
        int[][] directions = { //up,
        // down
        //left
        //right
        // upper left
        // upper right
        { -1, -1 }, // lower left
        { -1, 0 }, //lower right
        { -1, 1 }, { 0, -1 }, { 0, 1 }, { 1, -1 }, { 1, 0 }, { 1, 1 } };
        for (int row = 0; row < m; row++) {
            for (int col = 0; col < n; col++) {
                int count = 0;
                for (int[] move : directions) {
                    int neighborRow = row + move[0];
                    int neighborCol = col + move[1];
                    if (neighborRow >= 0 && neighborRow < m && neighborCol >= 0 && neighborCol < n && populationMatrix[neighborRow][neighborCol] == 1)
                        count++;
                }
                if (populationMatrix[row][col] == 1 && (count < 2 || count > 3))
                    board[row][col] = 0;
                else if (count == 3 && populationMatrix[row][col] == 0)
                    board[row][col] = 1;
            }
        }
    }
}
