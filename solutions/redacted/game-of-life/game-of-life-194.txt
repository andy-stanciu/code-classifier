class Solution {

    private int[] X = { -1, -1, -1, 0, 1, 1, 1, 0 };

    private int[] Y = { -1, 0, 1, 1, 1, 0, -1, -1 };

    private boolean isBoundary(int i, int j, int n, int m) {
        return i >= 0 && i < n && j >= 0 && j < m;
    }

    public void method1(int[][] board) {
        int n = board.length;
        int m = board[0].length;
        int[][] nextGen = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int curr = board[i][j];
                int ones = 0;
                for (int k = 0; k < 8; k++) {
                    int newX = X[k] + i;
                    int newY = Y[k] + j;
                    if (isBoundary(newX, newY, n, m)) {
                        ones += board[newX][newY];
                    }
                }
                if (curr == 1) {
                    if (ones < 2 || ones > 3) {
                        nextGen[i][j] = 0;
                    } else {
                        nextGen[i][j] = 1;
                    }
                } else {
                    if (ones == 3) {
                        nextGen[i][j] = 1;
                    }
                }
            }
        }
        // Update the original board
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                board[i][j] = nextGen[i][j];
            }
        }
    }
}
