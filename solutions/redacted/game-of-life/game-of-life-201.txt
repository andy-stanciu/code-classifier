class Solution {

    private int getNeighborCount(int[][] board, int i, int j) {
        int[] X = new int[] { -1, 0, 1 };
        int[] Y = new int[] { -1, 0, 1 };
        int count = 0;
        for (int y : Y) {
            for (int x : X) {
                if (!(y == 0 && x == 0) && i + y >= 0 && i + y < board.length && j + x >= 0 && j + x < board[0].length) {
                    if (wasAlive(board, i + y, j + x))
                        count++;
                }
            }
        }
        return count;
    }

    private boolean wasAlive(int[][] board, int i, int j) {
        // dead = 0 alive = 1 deadAlive = 2 aliveDead = 3
        return board[i][j] == 1 || board[i][j] == 3;
    }

    private boolean isAlive(int[][] board, int i, int j) {
        // dead = 0 alive = 1 deadAlive = 2 aliveDead = 3
        return board[i][j] == 1 || board[i][j] == 2;
    }

    public void method1(int[][] board) {
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int count = getNeighborCount(board, i, j);
                if (count < 2 || count > 3) {
                    if (wasAlive(board, i, j)) {
                        board[i][j] = 3;
                    }
                } else if (count == 3) {
                    if (!wasAlive(board, i, j)) {
                        board[i][j] = 2;
                    }
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (isAlive(board, i, j))
                    board[i][j] = 1;
                else
                    board[i][j] = 0;
            }
        }
    }
}
