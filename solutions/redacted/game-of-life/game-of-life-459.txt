class Solution {

    //Space: O(m*n)
    //Time : O(m*n)
    private int[][] board;

    public void method1(int[][] board) {
        int[][] neigh = new int[board.length][board[0].length];
        this.board = board;
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                neigh[i][j] = getNeigh(i, j);
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (neigh[i][j] < 2 || neigh[i][j] > 3)
                    board[i][j] = 0;
                else if (neigh[i][j] == 3)
                    board[i][j] = 1;
            }
        }
    }

    private int getNeigh(int i, int j) {
        int[][] dirs = new int[][] { { 0, 1 }, { 1, 1 }, { 1, 0 }, { 1, -1 }, { -1, -1 }, { 0, -1 }, { -1, 0 }, { -1, 1 } };
        int res = 0;
        for (int[] dir : dirs) {
            int x = i + dir[0];
            int y = j + dir[1];
            if (x < 0 || y < 0 || x >= board.length || y >= board[0].length)
                continue;
            res += board[x][y];
        }
        return res;
    }
}
