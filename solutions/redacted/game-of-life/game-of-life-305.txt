class Solution {

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        // All cells are set to 0 by default
        int[][] nextState = new int[m][n];
        for (int r = 0; r < m; r++) {
            for (int c = 0; c < n; c++) {
                int noNeighbors = 0, cell = board[r][c];
                // Looking for neighbors
                for (int i = r - 1; i <= r + 1; i++) {
                    for (int j = c - 1; j <= c + 1; j++) {
                        if (isInBounds(i, j, m, n) && !(i == r && j == c)) {
                            noNeighbors += board[i][j];
                        }
                    }
                }
                // Validating the rules
                if ((cell == 1 && (noNeighbors == 2 || noNeighbors == 3)) || (cell == 0 && noNeighbors == 3)) {
                    nextState[r][c] = 1;
                }
            }
        }
        // Moving the board into the next state
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = nextState[i][j];
            }
        }
    }

    private boolean isInBounds(int i, int j, int m, int n) {
        return i >= 0 && i < m && j >= 0 && j < n;
    }
}
