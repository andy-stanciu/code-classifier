class Solution {

    public void method1(int[][] board) {
        int[][] res = new int[board.length][board[0].length];
        int n = board.length;
        int m = board[0].length;
        if (n < 2 || m < 2) {
            for (int i = 0; i < board.length; i++) {
                for (int j = 0; j < board[0].length; j++) {
                    res[i][j] = 0;
                    if (m == 1 && i > 0 && i < n - 1) {
                        if (board[i - 1][j] == 1 && board[i + 1][j] == 1 && board[i][j] == 1) {
                            res[i][j] = 1;
                        }
                    }
                }
            }
            for (int i = 0; i < board.length; i++) {
                for (int j = 0; j < board[0].length; j++) {
                    board[i][j] = res[i][j];
                }
            }
            return;
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int count = 0;
                if (i > 0 && i < n - 1 && j > 0 && j < m - 1) {
                    count += board[i + 1][j];
                    count += board[i + 1][j + 1];
                    count += board[i - 1][j];
                    count += board[i - 1][j + 1];
                    count += board[i][j + 1];
                    count += board[i][j - 1];
                    count += board[i + 1][j - 1];
                    count += board[i - 1][j - 1];
                } else {
                    if (i == 0 && j == 0) {
                        count += board[i + 1][j];
                        count += board[i][j + 1];
                        count += board[i + 1][j + 1];
                    }
                    if (i == 0 && j == m - 1) {
                        count += board[i + 1][j];
                        count += board[i][j - 1];
                        count += board[i + 1][j - 1];
                    }
                    if (i == n - 1 && j == 0) {
                        count += board[i - 1][j];
                        count += board[i][j + 1];
                        count += board[i - 1][j + 1];
                    }
                    if (i == n - 1 && j == m - 1) {
                        count += board[i - 1][j];
                        count += board[i][j - 1];
                        count += board[i - 1][j - 1];
                    }
                    if (i == 0 && j > 0 && j < m - 1) {
                        count += board[i + 1][j];
                        count += board[i][j + 1];
                        count += board[i + 1][j + 1];
                        count += board[i + 1][j - 1];
                        count += board[i][j - 1];
                    }
                    if (j == 0 && i > 0 && i < n - 1) {
                        count += board[i - 1][j];
                        count += board[i - 1][j + 1];
                        count += board[i][j + 1];
                        count += board[i + 1][j + 1];
                        count += board[i + 1][j];
                    }
                    if (i == n - 1 && j > 0 && j < m - 1) {
                        count += board[i - 1][j];
                        count += board[i][j - 1];
                        count += board[i - 1][j - 1];
                        count += board[i - 1][j + 1];
                        count += board[i][j + 1];
                    }
                    if (j == m - 1 && i > 0 && i < n - 1) {
                        count += board[i + 1][j];
                        count += board[i + 1][j - 1];
                        count += board[i][j - 1];
                        count += board[i - 1][j - 1];
                        count += board[i - 1][j];
                    }
                }
                if (count >= 2 && count <= 3) {
                    res[i][j] = board[i][j];
                }
                if (count == 3) {
                    res[i][j] = 1;
                }
                if (count < 2 && count > 3) {
                    res[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                board[i][j] = res[i][j];
            }
        }
    }
}
