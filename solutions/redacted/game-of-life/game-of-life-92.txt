class Solution {

    public void method1(int[][] board) {
        int n = board.length;
        int m = board[0].length;
        /**
         *        previous: live
         *            now: dead = 2 live = 1
         *        previous: dead
         *            now: dead = 0 live = -1
         */
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int liveCount = 0;
                if (i > 0 && j > 0) {
                    liveCount += board[i - 1][j - 1] > 0 ? 1 : 0;
                }
                if (i > 0) {
                    liveCount += board[i - 1][j] > 0 ? 1 : 0;
                }
                if (i > 0 && j < m - 1) {
                    liveCount += board[i - 1][j + 1] > 0 ? 1 : 0;
                }
                if (j < m - 1) {
                    liveCount += board[i][j + 1] > 0 ? 1 : 0;
                }
                if (i < n - 1 && j < m - 1) {
                    liveCount += board[i + 1][j + 1] > 0 ? 1 : 0;
                }
                if (i < n - 1) {
                    liveCount += board[i + 1][j] > 0 ? 1 : 0;
                }
                if (i < n - 1 && j > 0) {
                    liveCount += board[i + 1][j - 1] > 0 ? 1 : 0;
                }
                if (j > 0) {
                    liveCount += board[i][j - 1] > 0 ? 1 : 0;
                }
                if (board[i][j] == 1) {
                    if (liveCount < 2 || liveCount > 3) {
                        board[i][j] = 2;
                    }
                } else {
                    if (liveCount == 3) {
                        board[i][j] = -1;
                    }
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == 2) {
                    board[i][j] = 0;
                } else if (board[i][j] == -1) {
                    board[i][j] = 1;
                }
            }
        }
    }
}
