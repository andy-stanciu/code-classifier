class Solution {

    public void method1(int[][] board) {
        int m = board.length, n = board[0].length;
        if (m < 2) {
            int[] temp = new int[n];
            temp[0] = temp[n - 1] = 0;
            for (int i = 1; i < n - 1; i++) {
                if ((i >= 0 && board[0][i - 1] == 0) || (i <= n - 1 && board[0][i + 1] == 0))
                    temp[i] = 0;
            }
            for (int i = 0; i < n; i++) {
                board[0][i] = temp[i];
            }
            return;
        }
        int[][] temp = new int[2][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int count = 0;
                if (i >= 1 && j >= 1 && board[i - 1][j - 1] == 1)
                    count++;
                if (i >= 1 && board[i - 1][j] == 1)
                    count++;
                if (i >= 1 && j <= n - 2 && board[i - 1][j + 1] == 1)
                    count++;
                if (j >= 1 && board[i][j - 1] == 1)
                    count++;
                if (j <= n - 2 && board[i][j + 1] == 1)
                    count++;
                if (i <= m - 2 && j >= 1 && board[i + 1][j - 1] == 1)
                    count++;
                if (i <= m - 2 && board[i + 1][j] == 1)
                    count++;
                if (i <= m - 2 && j <= n - 2 && board[i + 1][j + 1] == 1)
                    count++;
                if (board[i][j] == 0 && count == 3)
                    temp[i % 2][j] = 1;
                else if (board[i][j] == 1 && (count < 2 || count > 3))
                    temp[i % 2][j] = 0;
                else
                    temp[i % 2][j] = board[i][j];
            }
            for (int j = 0; j < n && i - 1 >= 0; j++) {
                board[i - 1][j] = temp[(i - 1) % 2][j];
            }
        }
        for (int j = 0; j < n; j++) {
            board[m - 1][j] = temp[(m - 1) % 2][j];
        }
        return;
    }
}
