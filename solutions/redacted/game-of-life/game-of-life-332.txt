class Solution {

    public void method1(int[][] board) {
        for (int y = 0; y < board.length; y++) {
            for (int x = 0; x < board[y].length; x++) {
                if (board[y][x] == 0)
                    board[y][x] = deadCell(board, y, x);
                else
                    board[y][x] = livingCell(board, y, x);
            }
        }
        for (int y = 0; y < board.length; y++) {
            for (int x = 0; x < board[y].length; x++) {
                if (board[y][x] == 2)
                    board[y][x] = 1;
                else if (board[y][x] == -1)
                    board[y][x] = 0;
            }
        }
    }

    public int livingCell(int[][] board, int y, int x) {
        int livingNeighbors = 0;
        if (y > 0) {
            if (Math.abs(board[y - 1][x]) == 1)
                livingNeighbors++;
        }
        if (y < board.length - 1) {
            if (Math.abs(board[y + 1][x]) == 1)
                livingNeighbors++;
        }
        if (x > 0) {
            if (Math.abs(board[y][x - 1]) == 1)
                livingNeighbors++;
        }
        if (x < board[y].length - 1) {
            if (Math.abs(board[y][x + 1]) == 1)
                livingNeighbors++;
        }
        if (x > 0 && y > 0) {
            if (Math.abs(board[y - 1][x - 1]) == 1)
                livingNeighbors++;
        }
        if (x < board[y].length - 1 && y < board.length - 1) {
            if (Math.abs(board[y + 1][x + 1]) == 1)
                livingNeighbors++;
        }
        if (x < board[y].length - 1 && y > 0) {
            if (Math.abs(board[y - 1][x + 1]) == 1)
                livingNeighbors++;
        }
        if (x > 0 && y < board.length - 1) {
            if (Math.abs(board[y + 1][x - 1]) == 1)
                livingNeighbors++;
        }
        if (livingNeighbors < 2)
            return -1;
        if (livingNeighbors <= 3)
            return 1;
        return -1;
    }

    public int deadCell(int[][] board, int y, int x) {
        int livingNeighbors = 0;
        if (y > 0) {
            if (Math.abs(board[y - 1][x]) == 1)
                livingNeighbors++;
        }
        if (y < board.length - 1) {
            if (Math.abs(board[y + 1][x]) == 1)
                livingNeighbors++;
        }
        if (x > 0) {
            if (Math.abs(board[y][x - 1]) == 1)
                livingNeighbors++;
        }
        if (x < board[y].length - 1) {
            if (Math.abs(board[y][x + 1]) == 1)
                livingNeighbors++;
        }
        if (x > 0 && y > 0) {
            if (Math.abs(board[y - 1][x - 1]) == 1)
                livingNeighbors++;
        }
        if (x < board[y].length - 1 && y < board.length - 1) {
            if (Math.abs(board[y + 1][x + 1]) == 1)
                livingNeighbors++;
        }
        if (x < board[y].length - 1 && y > 0) {
            if (Math.abs(board[y - 1][x + 1]) == 1)
                livingNeighbors++;
        }
        if (x > 0 && y < board.length - 1) {
            if (Math.abs(board[y + 1][x - 1]) == 1)
                livingNeighbors++;
        }
        if (livingNeighbors == 3)
            return 2;
        return 0;
    }
}
