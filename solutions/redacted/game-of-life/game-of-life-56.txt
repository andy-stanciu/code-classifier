class Solution {

    public void method1(int[][] board) {
        /*
		 Org | New | State
		  0  |  0  |   0
		  1  |  0  |   1
		  0  |  1  |   2
		  1  |  1  |   3
		 */
        if (board.length == 0)
            return;
        int ROWS = board.length;
        int COLS = board[0].length;
        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLS; j++) {
                int neightbors = countNoNeighbors(board, i, j);
                if (board[i][j] == 1) {
                    if (neightbors == 2 || neightbors == 3)
                        board[i][j] = 3;
                } else {
                    if (neightbors == 3)
                        board[i][j] = 2;
                }
            }
        }
        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLS; j++) {
                if (board[i][j] == 2 || board[i][j] == 3) {
                    board[i][j] = 1;
                } else {
                    board[i][j] = 0;
                }
            }
        }
    }

    public static int countNoNeighbors(int[][] board, int r, int c) {
        int count = 0;
        int ROWS = board.length;
        int COLS = board[0].length;
        for (int i = r - 1; i <= r + 1; i++) {
            for (int j = c - 1; j <= c + 1; j++) {
                if (i < 0 || j < 0 || i >= ROWS || j >= COLS || (i == r && j == c)) {
                    continue;
                } else if (board[i][j] == 1 || board[i][j] == 3) {
                    count++;
                }
            }
        }
        return count;
    }
}
