class Solution {

    public void method1(int[][] board) {
        int m = board.length, n = board[0].length;
        int[][] ans = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int active = getActiveNeighbors(board, i, j, m, n);
                if (board[i][j] == 0 && active == 3) {
                    ans[i][j] = 1;
                } else if (board[i][j] == 1 && (active == 2 || active == 3)) {
                    ans[i][j] = 1;
                } else {
                    ans[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = ans[i][j];
            }
        }
        return;
    }

    private int getActiveNeighbors(int[][] b, int i, int j, int m, int n) {
        int c = 0;
        int[] x = { -1, -1, -1, 0, 0, 1, 1, 1 };
        int[] y = { -1, 0, 1, -1, 1, -1, 0, 1 };
        for (int k = 0; k < 8; k++) {
            int c_x = i + x[k];
            int c_y = j + y[k];
            if (c_x >= 0 && c_x < m && c_y >= 0 && c_y < n && b[c_x][c_y] == 1)
                c++;
        }
        return c;
    }
}
