class Solution {

    public void method1(int[][] board) {
        // create new matrix for the next generation whit the same Dimensions
        int[][] x = new int[board.length][board[0].length];
        int n = board.length;
        int m = board[0].length;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                //for each clle we need to calcul the nember of alives neighbors
                int sum = 0;
                //  check  all 8 neighbors if they exist and we add to the sum
                if (i - 1 >= 0 && j - 1 >= 0) {
                    sum += board[i - 1][j - 1];
                }
                if (i - 1 >= 0) {
                    sum += board[i - 1][j];
                }
                if (i - 1 >= 0 && j + 1 < m) {
                    sum += board[i - 1][j + 1];
                }
                if (j - 1 >= 0) {
                    sum += board[i][j - 1];
                }
                if (j + 1 < m) {
                    sum += board[i][j + 1];
                }
                if (i + 1 < n && j + 1 < m) {
                    sum += board[i + 1][j + 1];
                }
                if (i + 1 < n) {
                    sum += board[i + 1][j];
                }
                if (i + 1 < n && j - 1 >= 0) {
                    sum += board[i + 1][j - 1];
                }
                //  check the rules of the game and we do changes for next generation
                if (board[i][j] == 0 && sum == 3) {
                    x[i][j] = 1;
                } else if (board[i][j] == 1 && sum < 2) {
                    x[i][j] = 0;
                } else if (board[i][j] == 1 && sum > 3) {
                    x[i][j] = 0;
                } else {
                    x[i][j] = board[i][j];
                }
            }
        }
        //  copied the new matrix to the first
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                board[i][j] = x[i][j];
            }
        }
    }
}
