class Solution {

    // Way-1 (Using O(n) space complexity)
    // public void gameOfLife(int[][] board) {
    //     int ans[][] = new int[board.length][board[0].length];
    //     for(int i=0;i<board.length;i++){
    //         for(int j=0;j<board[0].length;j++){
    //             int num = board[i][j];
    //             int live = 0;
    //             int dead = 0;
    //             if(i-1>=0 && j-1>=0 && board[i-1][j-1]==0) dead++;
    //             if(i-1>=0 && j-1>=0 && board[i-1][j-1]==1) live++;
    //             if(i-1>=0 && board[i-1][j]==0) dead++;
    //             if(i-1>=0 && board[i-1][j]==1) live++;
    //             if(i-1>=0 && j+1<board[0].length && board[i-1][j+1]==0) dead++;
    //             if(i-1>=0 && j+1<board[0].length && board[i-1][j+1]==1) live++;
    //             if(j-1>=0 && board[i][j-1]==0) dead++;
    //             if(j-1>=0 && board[i][j-1]==1) live++;
    //             if(j+1<board[0].length && board[i][j+1]==0) dead++;
    //             if(j+1<board[0].length && board[i][j+1]==1) live++;
    //             if(i+1<board.length && j-1>=0 && board[i+1][j-1]==0) dead++;
    //             if(i+1<board.length && j-1>=0 && board[i+1][j-1]==1) live++;
    //             if(i+1<board.length && board[i+1][j]==0) dead++;
    //             if(i+1<board.length && board[i+1][j]==1) live++;
    //             if(j+1<board[0].length && i+1<board.length && board[i+1][j+1]==0) dead++;
    //             if(j+1<board[0].length && i+1<board.length && board[i+1][j+1]==1) live++;
    //             if(num==1 && live<2) ans[i][j] = 0;
    //             if(num==1 && (live==2 || live==3)) ans[i][j] = 1;
    //             if(num==1 && live>3) ans[i][j] = 0;
    //             if(num==0 && live==3) ans[i][j] = 1;
    //      }
    //     }
    //     for(int i=0;i<board.length;i++){
    //         for(int j = 0;j<board[0].length;j++){
    //             board[i][j] = ans[i][j];
    //         }
    //     }
    // }
    // Way-2 (Using O(1) space complexity)
    public void method1(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int num = board[i][j];
                int live = 0;
                int dead = 0;
                if (i - 1 >= 0 && j - 1 >= 0 && (board[i - 1][j - 1] == 0 || board[i - 1][j - 1] == -2))
                    dead++;
                if (i - 1 >= 0 && j - 1 >= 0 && (board[i - 1][j - 1] == 1 || board[i - 1][j - 1] == -4))
                    live++;
                if (i - 1 >= 0 && (board[i - 1][j] == 0 || board[i - 1][j] == -2))
                    dead++;
                if (i - 1 >= 0 && (board[i - 1][j] == 1 || board[i - 1][j] == -4))
                    live++;
                if (i - 1 >= 0 && j + 1 < board[0].length && (board[i - 1][j + 1] == 0 || board[i - 1][j + 1] == -2))
                    dead++;
                if (i - 1 >= 0 && j + 1 < board[0].length && (board[i - 1][j + 1] == 1 || board[i - 1][j + 1] == -4))
                    live++;
                if (j - 1 >= 0 && (board[i][j - 1] == 0 || board[i][j - 1] == -2))
                    dead++;
                if (j - 1 >= 0 && (board[i][j - 1] == 1 || board[i][j - 1] == -4))
                    live++;
                if (j + 1 < board[0].length && (board[i][j + 1] == 0 || board[i][j + 1] == -2))
                    dead++;
                if (j + 1 < board[0].length && (board[i][j + 1] == 1 || board[i][j + 1] == -4))
                    live++;
                if (i + 1 < board.length && j - 1 >= 0 && (board[i + 1][j - 1] == 0 || board[i + 1][j - 1] == -2))
                    dead++;
                if (i + 1 < board.length && j - 1 >= 0 && (board[i + 1][j - 1] == 1 || board[i + 1][j - 1] == -4))
                    live++;
                if (i + 1 < board.length && (board[i + 1][j] == 0 || board[i + 1][j] == -2))
                    dead++;
                if (i + 1 < board.length && (board[i + 1][j] == 1 || board[i + 1][j] == -4))
                    live++;
                if (j + 1 < board[0].length && i + 1 < board.length && (board[i + 1][j + 1] == 0 || board[i + 1][j + 1] == -2))
                    dead++;
                if (j + 1 < board[0].length && i + 1 < board.length && (board[i + 1][j + 1] == 1 || board[i + 1][j + 1] == -4))
                    live++;
                if (num == 1 && live < 2) {
                    board[i][j] = -4;
                }
                if (num == 1 && (live == 2 || live == 3))
                    board[i][j] = 1;
                if (num == 1 && live > 3)
                    board[i][j] = -4;
                if (num == 0 && live == 3)
                    board[i][j] = -2;
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == -2)
                    board[i][j] = 1;
                if (board[i][j] == -4)
                    board[i][j] = 0;
            }
        }
    }
}
