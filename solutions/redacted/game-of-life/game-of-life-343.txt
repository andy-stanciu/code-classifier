class Solution {

    public void method1(int[][] board) {
        int i = 0, j = 0;
        for (i = 0; i < board.length; i++) {
            for (j = 0; j < board[i].length; j++) {
                if (board[i][j] == 0) {
                    if (checkForDeadCell(i, j, board.length, board[i].length, board))
                        board[i][j] = 2;
                }
                if (board[i][j] == 1) {
                    if (!checkForLiveCell(i, j, board.length, board[i].length, board))
                        board[i][j] = -1;
                }
            }
        }
        for (i = 0; i < board.length; i++) {
            for (j = 0; j < board[i].length; j++) {
                if (board[i][j] == 2)
                    board[i][j] = 1;
                if (board[i][j] == -1)
                    board[i][j] = 0;
            }
        }
    }

    public boolean checkForLiveCell(int i, int j, int m, int n, int[][] board) {
        int count = 0;
        if (i > 0 && Math.abs(board[i - 1][j]) == 1) {
            count++;
        }
        if (i < m - 1 && Math.abs(board[i + 1][j]) == 1) {
            count++;
        }
        if (j > 0 && Math.abs(board[i][j - 1]) == 1) {
            count++;
        }
        if (j < n - 1 && Math.abs(board[i][j + 1]) == 1) {
            count++;
            if (count > 3)
                return false;
        }
        if (i > 0 && j < n - 1 && Math.abs(board[i - 1][j + 1]) == 1) {
            count++;
            if (count > 3)
                return false;
        }
        if (i > 0 && j > 0 && Math.abs(board[i - 1][j - 1]) == 1) {
            count++;
            if (count > 3)
                return false;
        }
        if (i < m - 1 && j > 0 && Math.abs(board[i + 1][j - 1]) == 1) {
            count++;
            if (count > 3)
                return false;
        }
        if (i < m - 1 && j < n - 1 && Math.abs(board[i + 1][j + 1]) == 1) {
            count++;
            if (count > 3)
                return false;
        }
        return (count < 2 || count > 3) ? false : true;
    }

    public boolean checkForDeadCell(int i, int j, int m, int n, int[][] board) {
        int count = 0;
        if (i > 0 && Math.abs(board[i - 1][j]) == 1) {
            count++;
        }
        if (i < m - 1 && Math.abs(board[i + 1][j]) == 1) {
            count++;
        }
        if (j > 0 && Math.abs(board[i][j - 1]) == 1) {
            count++;
        }
        if (j < n - 1 && Math.abs(board[i][j + 1]) == 1) {
            count++;
            if (count > 3)
                return false;
        }
        if (i > 0 && j < n - 1 && Math.abs(board[i - 1][j + 1]) == 1) {
            count++;
            if (count > 3)
                return false;
        }
        if (i > 0 && j > 0 && Math.abs(board[i - 1][j - 1]) == 1) {
            count++;
            if (count > 3)
                return false;
        }
        if (i < m - 1 && j > 0 && Math.abs(board[i + 1][j - 1]) == 1) {
            count++;
            if (count > 3)
                return false;
        }
        if (i < m - 1 && j < n - 1 && Math.abs(board[i + 1][j + 1]) == 1) {
            count++;
            if (count > 3)
                return false;
        }
        return count != 3 ? false : true;
    }
}
