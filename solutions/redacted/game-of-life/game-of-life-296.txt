class Solution {

    private int live = 3;

    private int die = 2;

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        // Using External Space
        int[][] ans = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int live = getLiveNeighbours(board, i, j);
                if (board[i][j] == 0) {
                    if (live == 3) {
                        ans[i][j] = 1;
                    }
                } else {
                    if (live >= 2 && live <= 3) {
                        ans[i][j] = 1;
                    }
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = ans[i][j];
            }
        }
        // InPlace Doing the Simulation
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int lives = getLiveNeighbours(board, i, j);
                if (board[i][j] == 0 && lives == 3) {
                    board[i][j] = live;
                } else if (board[i][j] == 1 && (lives < 2 || lives > 3)) {
                    board[i][j] = die;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == live) {
                    board[i][j] = 1;
                }
                if (board[i][j] == die) {
                    board[i][j] = 0;
                }
            }
        }
    }

    private int getLiveNeighbours(int[][] board, int r, int c) {
        int count = 0;
        int[] dirRow = { -1, -1, 0, 1, 1, 1, 0, -1 };
        int[] dirCol = { 0, 1, 1, 1, 0, -1, -1, -1 };
        for (int i = 0; i < 8; i++) {
            int nrow = r + dirRow[i];
            int ncol = c + dirCol[i];
            if (nrow >= 0 && nrow < board.length && ncol >= 0 && ncol < board[0].length) {
                if (board[nrow][ncol] == 1 || board[nrow][ncol] == die) {
                    count++;
                }
            }
        }
        return count;
    }
}
