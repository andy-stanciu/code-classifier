class Solution {

    // count the number of neighbour cells containing value of 1
    // make sure the cell is not out of boundaries.
    int countNear(int[][] board, int n, int m, int x, int y) {
        int cnt = 0;
        for (int i = -1; i <= 1; i++) {
            for (int j = -1; j <= 1; j++) {
                if (i != 0 || j != 0) {
                    int newX = x + i;
                    int newY = y + j;
                    if (newX >= 0 && newX < n && newY >= 0 && newY < m)
                        if (Math.abs(board[newX][newY]) == 1)
                            cnt++;
                }
            }
        }
        return cnt;
    }

    public void method1(int[][] board) {
        int n = board.length;
        int m = board[0].length;
        // mark the cells based on the rules:
        // 1. if current == 0 and numNear == 3, current = 1;
        // 2. if current == 1 and (if numnear < 2 or numNear > 3), current = 0;
        // use 2 markers to carry the information:
        // -1 indicates the next state of cell change from 1 to 0
        // 2 indicates the next state of cell change from 0 to 1
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int numNear = countNear(board, n, m, i, j);
                if (board[i][j] == 0 && numNear == 3)
                    board[i][j] = 2;
                else if (board[i][j] == 1 && (numNear < 2 || numNear > 3))
                    board[i][j] = -1;
            }
        }
        // update the cell state
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == -1)
                    board[i][j] = 0;
                else if (board[i][j] == 2)
                    board[i][j] = 1;
            }
        }
    }
}
