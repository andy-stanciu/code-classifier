class Solution {

    public void method1(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int count = check(board, i, j);
                // decision based on count value
                if (board[i][j] == 0 && count == 3) {
                    board[i][j] = 2;
                } else if (board[i][j] == 1 && (count < 2 || count > 3)) {
                    board[i][j] = -1;
                }
            }
        }
        // Chage Matrix to Final state
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == -1) {
                    board[i][j] = 0;
                } else if (board[i][j] == 2) {
                    board[i][j] = 1;
                }
            }
        }
    }

    // Counting of surrounding cells with a state of 1.
    public int check(int[][] arr, int i, int j) {
        int count = 0;
        if (i + 1 < arr.length && j + 1 < arr[0].length && (arr[i + 1][j + 1] == 1 || arr[i + 1][j + 1] == -1)) {
            count++;
        }
        if (i - 1 >= 0 && j - 1 >= 0 && (arr[i - 1][j - 1] == 1 || arr[i - 1][j - 1] == -1)) {
            count++;
        }
        if (i + 1 < arr.length && j - 1 >= 0 && (arr[i + 1][j - 1] == 1 || arr[i + 1][j - 1] == -1)) {
            count++;
        }
        if (i - 1 >= 0 && j + 1 < arr[0].length && (arr[i - 1][j + 1] == 1 || arr[i - 1][j + 1] == -1)) {
            count++;
        }
        if (i + 1 < arr.length && (arr[i + 1][j] == 1 || arr[i + 1][j] == -1)) {
            count++;
        }
        if (i - 1 >= 0 && (arr[i - 1][j] == 1 || arr[i - 1][j] == -1)) {
            count++;
        }
        if (j + 1 < arr[0].length && (arr[i][j + 1] == 1 || arr[i][j + 1] == -1)) {
            count++;
        }
        if (j - 1 >= 0 && (arr[i][j - 1] == 1 || arr[i][j - 1] == -1)) {
            count++;
        }
        return count;
    }
}
