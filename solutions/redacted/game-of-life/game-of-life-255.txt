class Solution {

    public void method1(int[][] board) {
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int lives = neighborOnes(i, j, m, n, board);
                if (board[i][j] == 1) {
                    if (lives <= 1 || lives > 3)
                        board[i][j] = -1;
                } else {
                    if (lives == 3)
                        board[i][j] = 2;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == -1) {
                    board[i][j] = 0;
                } else if (board[i][j] == 2) {
                    board[i][j] = 1;
                }
            }
        }
    }

    private int neighborOnes(int i, int j, int m, int n, int[][] board) {
        int res = 0;
        if (i - 1 >= 0) {
            if (board[i - 1][j] == 1 || board[i - 1][j] == -1)
                res++;
            if (j - 1 >= 0) {
                if (board[i - 1][j - 1] == 1 || board[i - 1][j - 1] == -1)
                    res++;
            }
            if (j + 1 < n) {
                if (board[i - 1][j + 1] == 1 || board[i - 1][j + 1] == -1)
                    res++;
            }
        }
        if (i + 1 < m) {
            if (board[i + 1][j] == 1 || board[i + 1][j] == -1)
                res++;
            if (j - 1 >= 0) {
                if (board[i + 1][j - 1] == 1 || board[i + 1][j - 1] == -1)
                    res++;
            }
            if (j + 1 < n) {
                if (board[i + 1][j + 1] == 1 || board[i + 1][j + 1] == -1)
                    res++;
            }
        }
        if (j - 1 >= 0) {
            if (board[i][j - 1] == 1 || board[i][j - 1] == -1)
                res++;
        }
        if (j + 1 < n) {
            if (board[i][j + 1] == 1 || board[i][j + 1] == -1)
                res++;
        }
        return res;
    }
}
