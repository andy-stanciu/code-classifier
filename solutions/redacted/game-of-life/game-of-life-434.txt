class Solution {

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        // Neighbors array to find 8 neighboring cells for a given cell
        int[] neighbors = { 0, 1, -1 };
        // Iterate through the board
        for (int row = 0; row < m; row++) {
            for (int col = 0; col < n; col++) {
                // For each cell count the number of live neighbors
                int liveNeighbors = 0;
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        if (!(neighbors[i] == 0 && neighbors[j] == 0)) {
                            int r = (row + neighbors[i]);
                            int c = (col + neighbors[j]);
                            // Check the validity of the neighboring cell
                            // and whether it was originally a live cell
                            // The second condition is required because
                            // the state of the cell might have changed
                            // by the previous iterations
                            if ((r >= 0 && r < m) && (c >= 0 && c < n) && (Math.abs(board[r][c]) == 1)) {
                                liveNeighbors += 1;
                            }
                        }
                    }
                }
                // Rule 1 or Rule 3
                if ((board[row][col] == 1) && (liveNeighbors < 2 || liveNeighbors > 3)) {
                    // -1 signifies the cell is now dead but originally was live
                    board[row][col] = -1;
                }
                // Rule 4
                if (board[row][col] == 0 && liveNeighbors == 3) {
                    // 2 signifies the cell is now live but was originally dead
                    board[row][col] = 2;
                }
            }
        }
        // Get the final representation for the newly updated board
        for (int row = 0; row < m; row++) {
            for (int col = 0; col < n; col++) {
                if (board[row][col] > 0) {
                    board[row][col] = 1;
                } else {
                    board[row][col] = 0;
                }
            }
        }
    }
}
