class Solution {

    int[][] dirs = { { -1, 0 }, { -1, 1 }, { 0, 1 }, { 1, 1 }, { 1, 0 }, { 1, -1 }, { 0, -1 }, { -1, -1 } };

    public void method1(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int ne = neighbors(board, i, j);
                if (board[i][j] == 0 && ne == 3)
                    board[i][j] = 2;
                if (board[i][j] == 1 && ne > 1 && ne < 4)
                    board[i][j] = 3;
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                board[i][j] /= 2;
            }
        }
    }

    int neighbors(int[][] board, int i, int j) {
        int count = 0;
        for (int[] dir : dirs) {
            int newR = i + dir[0];
            int newC = j + dir[1];
            if (isValid(newR, newC, board))
                count += (board[newR][newC] % 2);
        }
        return count;
    }

    boolean isValid(int i, int j, int[][] board) {
        return i >= 0 && j >= 0 && i < board.length && j < board[0].length;
    }
}
