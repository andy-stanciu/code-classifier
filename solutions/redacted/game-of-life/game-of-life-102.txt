class Solution {

    class Pair {

        int i, j;

        Pair(int i, int j) {
            this.i = i;
            this.j = j;
        }
    }

    private int countNeighbours(int i, int j, int r, int c, int[][] board) {
        int[][] dir = { { 0, 1 }, { 1, 0 }, { -1, 0 }, { 0, -1 }, { 1, 1 }, { -1, -1 }, { -1, 1 }, { 1, -1 } };
        int count = 0;
        for (int[] d : dir) {
            int dx = i + d[0], dy = j + d[1];
            if (dx < 0 || dy < 0 || dx >= r || dy >= c || board[dx][dy] == 0)
                continue;
            count++;
            if (count > 3)
                return count;
        }
        return count;
    }

    public void method1(int[][] board) {
        List<Pair> l = new ArrayList<>();
        List<Pair> d = new ArrayList<>();
        int rows = board.length, cols = board[0].length;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                int neighbours = countNeighbours(i, j, rows, cols, board);
                if (board[i][j] == 0) {
                    if (neighbours == 3)
                        l.add(new Pair(i, j));
                } else {
                    if (neighbours < 2 || neighbours > 3)
                        d.add(new Pair(i, j));
                }
            }
        }
        for (Pair p : l) board[p.i][p.j] = 1;
        for (Pair p : d) board[p.i][p.j] = 0;
    }
}
