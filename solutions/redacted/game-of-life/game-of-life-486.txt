class Solution {

    int[][] dirs = new int[][] { { 1, 0 }, { 1, -1 }, { 0, -1 }, { -1, -1 }, { -1, 0 }, { -1, 1 }, { 0, 1 }, { 1, 1 } };

    public void method1(int[][] board) {
        for (int i = 0; i < board.length; i++) for (int j = 0; j < board[0].length; j++) {
            if (board[i][j] == 1) {
                int liveNeighbors = liveNeighbors(board, i, j);
                if (liveNeighbors < 2 || liveNeighbors > 3)
                    board[i][j] = -1;
            } else if (board[i][j] == 0) {
                int liveNeighbors = liveNeighbors(board, i, j);
                if (liveNeighbors == 3)
                    board[i][j] = 3;
            }
        }
        updateBoard(board);
        return;
    }

    private void updateBoard(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == -1) {
                    board[i][j] = 0;
                }
                if (board[i][j] == 3) {
                    board[i][j] = 1;
                }
            }
        }
    }

    private int liveNeighbors(int[][] board, int i, int j) {
        int activeNeigh = 0;
        for (int[] dir : dirs) {
            int row = i + dir[0];
            int col = j + dir[1];
            if (row >= 0 && row < board.length && col >= 0 && col < board[0].length && (board[row][col] == 1 || board[row][col] == -1))
                activeNeigh++;
        }
        return activeNeigh;
    }
}
