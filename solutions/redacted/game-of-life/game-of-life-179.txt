class Solution {

    public void method1(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                solve(board, i, j);
            }
        }
        // 2 means original value is 0, set to 1 later
        // -1 means original value is 1, set to 0 later
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] == 2)
                    board[i][j] = 1;
                if (board[i][j] == -1)
                    board[i][j] = 0;
            }
        }
    }

    void solve(int[][] board, int i, int j) {
        int lives = 0;
        int current = board[i][j];
        lives = lives + getValue(board, i + 1, j);
        lives = lives + getValue(board, i - 1, j);
        lives = lives + getValue(board, i, j + 1);
        lives = lives + getValue(board, i, j - 1);
        lives = lives + getValue(board, i + 1, j + 1);
        lives = lives + getValue(board, i - 1, j - 1);
        lives = lives + getValue(board, i - 1, j + 1);
        lives = lives + getValue(board, i + 1, j - 1);
        if (current == 1 && lives < 2)
            board[i][j] = -1;
        if (current == 1 && (lives == 2 || lives == 3))
            board[i][j] = 1;
        if (current == 1 && lives > 3)
            board[i][j] = -1;
        if (current == 0 && lives == 3)
            board[i][j] = 2;
    }

    int getValue(int[][] board, int i, int j) {
        if (i >= 0 && j >= 0 && i < board.length && j < board[i].length) {
            // -1 means original value is 1, set to 0 later
            if (board[i][j] == 1 || board[i][j] == -1) {
                return 1;
            }
        }
        return 0;
    }
}
