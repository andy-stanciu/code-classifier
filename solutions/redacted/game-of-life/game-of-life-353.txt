class Solution {

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 1 && ones(board, i, j) < 2)
                    dp[i][j] = 0;
                if (board[i][j] == 1 && (ones(board, i, j) == 2 || ones(board, i, j) == 3))
                    dp[i][j] = 1;
                if (board[i][j] == 1 && ones(board, i, j) > 3)
                    dp[i][j] = 0;
                if (board[i][j] == 0 && ones(board, i, j) == 3)
                    dp[i][j] = 1;
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = dp[i][j];
            }
        }
    }

    public int ones(int[][] board, int i, int j) {
        int m = board.length;
        int n = board[0].length;
        int one = 0;
        if (i - 1 >= 0 && j - 1 >= 0 && board[i - 1][j - 1] == 1)
            one++;
        if (i - 1 >= 00 && board[i - 1][j] == 1)
            one++;
        if (i - 1 >= 0 && j + 1 < n && board[i - 1][j + 1] == 1)
            one++;
        if (j - 1 >= 0 && board[i][j - 1] == 1)
            one++;
        if (j + 1 < n && board[i][j + 1] == 1)
            one++;
        if (i + 1 < m && j - 1 >= 0 && board[i + 1][j - 1] == 1)
            one++;
        if (i + 1 < m && j >= 0 && board[i + 1][j] == 1)
            one++;
        if (i + 1 < m && j + 1 < n && board[i + 1][j + 1] == 1)
            one++;
        return one;
    }
}
