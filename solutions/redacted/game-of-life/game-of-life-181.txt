class Solution {

    public void method1(int[][] board) {
        int n = board[0].length;
        int m = board.length;
        int[][] cloan = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                cloan[i][j] = board[i][j];
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (cloan[i][j] == 1) {
                    int lives = findN(i, j, cloan, n, m);
                    if (lives == 2 || lives == 3) {
                        board[i][j] = 1;
                    } else {
                        board[i][j] = 0;
                    }
                } else {
                    if (findN(i, j, cloan, n, m) == 3) {
                        board[i][j] = 1;
                    } else {
                        board[i][j] = 0;
                    }
                }
            }
        }
    }

    int findN(int i, int j, int[][] cloan, int n, int m) {
        int nb = 0;
        if (i + 1 < m && cloan[i + 1][j] == 1) {
            nb++;
        }
        if (i - 1 >= 0 && cloan[i - 1][j] == 1) {
            nb++;
        }
        if (j + 1 < n && cloan[i][j + 1] == 1) {
            nb++;
        }
        if (j - 1 >= 0 && cloan[i][j - 1] == 1) {
            nb++;
        }
        if ((i - 1 >= 0 && j - 1 >= 0) && cloan[i - 1][j - 1] == 1) {
            nb++;
        }
        if (i - 1 >= 0 && j + 1 < n && cloan[i - 1][j + 1] == 1) {
            nb++;
        }
        if (i + 1 < m && j - 1 >= 0 && cloan[i + 1][j - 1] == 1) {
            nb++;
        }
        if (i + 1 < m && j + 1 < n && cloan[i + 1][j + 1] == 1) {
            nb++;
        }
        return nb;
    }
}
