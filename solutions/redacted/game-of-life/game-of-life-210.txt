class Solution {

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        ArrayList<Integer> valuesToBeUpdatedX = new ArrayList<>();
        ArrayList<Integer> valuesToBeUpdatedY = new ArrayList<>();
        int[][] directions = { { -1, 0 }, { -1, -1 }, { 0, -1 }, { 1, -1 }, { 1, 0 }, { 1, 1 }, { 0, 1 }, { -1, 1 } };
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int liveNeighbors = 0;
                int deadNeighbors = 0;
                for (int[] dir : directions) {
                    int x = i + dir[0];
                    int y = j + dir[1];
                    if (x < 0 || y < 0 || x >= m || y >= n) {
                        continue;
                    }
                    if (board[x][y] == 1) {
                        liveNeighbors++;
                    } else {
                        deadNeighbors++;
                    }
                }
                if (board[i][j] == 1) {
                    if (liveNeighbors < 2) {
                        valuesToBeUpdatedX.add(i);
                        valuesToBeUpdatedY.add(j);
                    }
                    if ((liveNeighbors == 2 || liveNeighbors == 3)) {
                        continue;
                    }
                    if (liveNeighbors > 3) {
                        valuesToBeUpdatedX.add(i);
                        valuesToBeUpdatedY.add(j);
                    }
                } else {
                    if (liveNeighbors == 3) {
                        valuesToBeUpdatedX.add(i);
                        valuesToBeUpdatedY.add(j);
                    }
                }
            }
        }
        for (int i = 0; i < valuesToBeUpdatedX.size(); i++) {
            if (board[valuesToBeUpdatedX.get(i)][valuesToBeUpdatedY.get(i)] == 1) {
                board[valuesToBeUpdatedX.get(i)][valuesToBeUpdatedY.get(i)] = 0;
            } else {
                board[valuesToBeUpdatedX.get(i)][valuesToBeUpdatedY.get(i)] = 1;
            }
        }
    }
}
