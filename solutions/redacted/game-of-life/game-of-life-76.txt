class Solution {

    public void method1(int[][] board) {
        int n = board.length, m = board[0].length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int cnt = getNeighbourCount(board, i, j, n, m);
                if (board[i][j] == 1) {
                    // live to dead
                    if (cnt < 2 || cnt > 3)
                        board[i][j] = -1;
                } else {
                    // dead to live
                    if (cnt > 2 && cnt <= 3)
                        board[i][j] = 2;
                }
            }
        }
        // System.out.println(board[1][0]);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int cnt = getNeighbourCount(board, i, j, n, m);
                if (board[i][j] == 2)
                    board[i][j] = 1;
                else if (board[i][j] == -1)
                    board[i][j] = 0;
            }
        }
    }

    public int getNeighbourCount(int[][] board, int i, int j, int n, int m) {
        int liveNeighbours = 0;
        int[] dy = { -1, -1, -1, 0, 0, 1, 1, 1 };
        int[] dx = { -1, 0, 1, -1, 1, -1, 0, 1 };
        for (int k = 0; k < 8; k++) {
            int di = i + dy[k];
            int dj = j + dx[k];
            if (di >= 0 && di < n && dj >= 0 && dj < m) {
                if (board[di][dj] == 1 || board[di][dj] == -1)
                    liveNeighbours++;
            }
        }
        return liveNeighbours;
    }
}
