class Solution {

    public void method1(int[][] board) {
        int row = board.length;
        int col = board[0].length;
        int[][] DupBoard = new int[row][col];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                int count = aliveNeighbours(board, i, j);
                if (board[i][j] == 1) {
                    if (count < 2)
                        DupBoard[i][j] = 0;
                    else if (count > 3)
                        DupBoard[i][j] = 0;
                    else
                        DupBoard[i][j] = 1;
                } else {
                    if (count == 3)
                        DupBoard[i][j] = 1;
                    else
                        DupBoard[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < row; i++) board[i] = DupBoard[i].clone();
    }

    public int aliveNeighbours(int[][] board, int i, int j) {
        int row = board.length;
        int col = board[0].length;
        int count = 0;
        if (i + 1 < row)
            count += board[i + 1][j];
        if (j + 1 < col)
            count += board[i][j + 1];
        if (i - 1 >= 0)
            count += board[i - 1][j];
        if (j - 1 >= 0)
            count += board[i][j - 1];
        if (i + 1 < row && j + 1 < col)
            count += board[i + 1][j + 1];
        if (i - 1 >= 0 && j - 1 >= 0)
            count += board[i - 1][j - 1];
        if (i - 1 >= 0 && j + 1 < col)
            count += board[i - 1][j + 1];
        if (i + 1 < row && j - 1 >= 0)
            count += board[i + 1][j - 1];
        return count;
    }
}
