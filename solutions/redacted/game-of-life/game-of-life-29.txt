class Solution {

    public int isLive(int[][] board, int i, int j) {
        int liveCount = 0;
        int r = board.length;
        int c = board[0].length;
        //Horizantal
        if (j - 1 >= 0) {
            // for left side
            if (board[i][j - 1] == 1 || board[i][j - 1] == 3)
                liveCount++;
        }
        if (j + 1 < c) {
            // for right side
            if (board[i][j + 1] == 1 || board[i][j + 1] == 3)
                liveCount++;
        }
        //virtical
        if (i - 1 >= 0) {
            // for up side
            if (board[i - 1][j] == 1 || board[i - 1][j] == 3)
                liveCount++;
        }
        if (i + 1 < r) {
            // for down side
            if (board[i + 1][j] == 1 || board[i + 1][j] == 3)
                liveCount++;
        }
        //digonal
        if (i - 1 >= 0 && j - 1 >= 0) {
            // for upper left side
            if (board[i - 1][j - 1] == 1 || board[i - 1][j - 1] == 3)
                liveCount++;
        }
        if (i - 1 >= 0 && j + 1 < c) {
            // for upper right side
            if (board[i - 1][j + 1] == 1 || board[i - 1][j + 1] == 3)
                liveCount++;
        }
        if (i + 1 < r && j - 1 >= 0) {
            // for lower left side
            if (board[i + 1][j - 1] == 1 || board[i + 1][j - 1] == 3)
                liveCount++;
        }
        if (i + 1 < r && j + 1 < c) {
            // for lower right side
            if (board[i + 1][j + 1] == 1 || board[i + 1][j + 1] == 3)
                liveCount++;
        }
        return liveCount;
    }

    public void method1(int[][] board) {
        int n = board.length;
        int m = board[0].length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int count = isLive(board, i, j);
                if (board[i][j] == 0) {
                    if (count == 3) {
                        // making as a live cell and mark as 2 for further process
                        board[i][j] = 2;
                    }
                } else if (board[i][j] == 1) {
                    //making as a dead cell and mark as 3 for further process
                    if (count < 2 || count > 3)
                        board[i][j] = 3;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == 2)
                    board[i][j] = 1;
                else if (board[i][j] == 3)
                    board[i][j] = 0;
            }
        }
    }
}
