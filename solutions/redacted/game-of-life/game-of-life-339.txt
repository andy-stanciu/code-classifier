class Solution {

    public static void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] temp = new int[m][n];
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int c = 0;
                if (//north-west
                i - 1 >= 0 && j - 1 >= 0)
                    c = board[i - 1][j - 1] == 1 ? c + 1 : c;
                if (//north
                i - 1 >= 0)
                    c = board[i - 1][j] == 1 ? c + 1 : c;
                if (//north-east
                i - 1 >= 0 && j + 1 < n)
                    c = board[i - 1][j + 1] == 1 ? c + 1 : c;
                if (//east
                j + 1 < n)
                    c = board[i][j + 1] == 1 ? c + 1 : c;
                if (//south-east
                i + 1 < m && j + 1 < n)
                    c = board[i + 1][j + 1] == 1 ? c + 1 : c;
                if (//south
                i + 1 < m)
                    c = board[i + 1][j] == 1 ? c + 1 : c;
                if (//south-west
                i + 1 < m && j - 1 >= 0)
                    c = board[i + 1][j - 1] == 1 ? c + 1 : c;
                if (//west
                j - 1 >= 0)
                    c = board[i][j - 1] == 1 ? c + 1 : c;
                //updating value in temp[ ][ ]
                if (board[i][j] == 1 && c < 2)
                    temp[i][j] = 0;
                else if (board[i][j] == 1 && c <= 3)
                    temp[i][j] = 1;
                else if (board[i][j] == 1 && c > 3)
                    temp[i][j] = 0;
                else if (board[i][j] == 0 && c == 3)
                    temp[i][j] = 1;
            }
        }
        for (//copying the temp to board
        //copying the temp to board
        //copying the temp to board
        int i = 0; i < board.length; ++i) {
            for (int j = 0; j < board[0].length; ++j) board[i][j] = temp[i][j];
        }
    }
}
