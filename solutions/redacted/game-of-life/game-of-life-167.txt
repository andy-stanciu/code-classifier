class Solution {

    public void method1(int[][] arr) {
        int m = arr.length, n = arr[0].length, k = 0;
        int[] lncs = new int[m * n];
        for (int i = 0; i < m; i++) for (int j = 0; j < n; j++) lncs[k++] = lnc(arr, i, j);
        k = 0;
        for (int i = 0; i < m; i++) for (int j = 0; j < n; j++, k++) arr[i][j] = arr[i][j] == 0 ? lncs[k] == 3 ? 1 : 0 : lncs[k] == 2 || lncs[k] == 3 ? 1 : 0;
    }

    public int lnc(int[][] arr, int i, int j) {
        int ans = 0;
        int[][] diff = { { -1, -1 }, { -1, 0 }, { -1, 1 }, { 0, 1 }, { 1, 1 }, { 1, 0 }, { 1, -1 }, { 0, -1 } };
        for (int[] x : diff) {
            int ni = i + x[0], nj = j + x[1];
            ans += inRange(ni, nj, arr) ? arr[ni][nj] : 0;
        }
        return ans;
    }

    public boolean inRange(int i, int j, int[][] arr) {
        int row = arr.length, col = arr[0].length;
        return i >= 0 && i < row && j >= 0 && j < col;
    }
}
