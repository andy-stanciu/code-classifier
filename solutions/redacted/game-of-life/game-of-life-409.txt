class Solution {

    public int[][] mat;

    public int getAliveNeighbours(int x, int y) {
        int count = 0;
        //yea i\'m a noob.
        if (x - 1 >= 0 && x - 1 < mat.length && y - 1 >= 0 && y - 1 < mat[0].length)
            count += mat[x - 1][y - 1];
        if (x - 1 >= 0 && x - 1 < mat.length && y >= 0 && y < mat[0].length)
            count += mat[x - 1][y];
        if (x - 1 >= 0 && x - 1 < mat.length && y + 1 >= 0 && y + 1 < mat[0].length)
            count += mat[x - 1][y + 1];
        if (x >= 0 && x < mat.length && y - 1 >= 0 && y - 1 < mat[0].length)
            count += mat[x][y - 1];
        if (x >= 0 && x < mat.length && y + 1 >= 0 && y + 1 < mat[0].length)
            count += mat[x][y + 1];
        if (x + 1 >= 0 && x + 1 < mat.length && y - 1 >= 0 && y - 1 < mat[0].length)
            count += mat[x + 1][y - 1];
        if (x + 1 >= 0 && x + 1 < mat.length && y >= 0 && y < mat[0].length)
            count += mat[x + 1][y];
        if (x + 1 >= 0 && x + 1 < mat.length && y + 1 >= 0 && y + 1 < mat[0].length)
            count += mat[x + 1][y + 1];
        return count;
    }

    public void method1(int[][] board) {
        mat = board;
        int[][] res = new int[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int c = getAliveNeighbours(i, j);
                if (board[i][j] == 1) {
                    if (c < 2 || c > 3)
                        res[i][j] = 0;
                    else
                        res[i][j] = 1;
                } else {
                    if (c == 3)
                        res[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                board[i][j] = res[i][j];
            }
        }
    }
}
