class Solution {

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] directions = { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 }, { 1, 1 }, { 1, -1 }, { -1, 1 }, { -1, -1 } };
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 0) {
                    deadCell(board, i, j, m, n, directions);
                } else {
                    liveCell(board, i, j, m, n, directions);
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == -2) {
                    board[i][j] = 1;
                } else if (board[i][j] == -1) {
                    board[i][j] = 0;
                }
            }
        }
    }

    public static void deadCell(int[][] board, int i, int j, int m, int n, int[][] directions) {
        int live_count = 0;
        for (int[] dir : directions) {
            int r = i + dir[0];
            int c = j + dir[1];
            if (isValid(r, c, m, n) && (board[r][c] == 1 || board[r][c] == -1)) {
                live_count++;
            }
        }
        if (live_count == 3) {
            board[i][j] = -2;
        }
    }

    public static void liveCell(int[][] board, int i, int j, int m, int n, int[][] directions) {
        int live_count = 0;
        for (int[] dir : directions) {
            int r = i + dir[0];
            int c = j + dir[1];
            if (isValid(r, c, m, n) && (board[r][c] == 1 || board[r][c] == -1)) {
                live_count++;
            }
        }
        if (live_count < 2 || live_count > 3) {
            board[i][j] = -1;
        }
    }

    public static boolean isValid(int i, int j, int m, int n) {
        if (i >= 0 && i < m && j >= 0 && j < n)
            return true;
        return false;
    }
}
