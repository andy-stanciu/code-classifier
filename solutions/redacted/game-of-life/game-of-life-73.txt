class Solution {

    public void method1(int[][] board) {
        // 1 <= 1, 1 =0
        // 1 == 2 or 1==3, lives
        // 1 > 3, 1 = 0
        // 0 = 3 1\'s, 0 = 1
        int m = board.length;
        int n = board[0].length;
        for (int row = 0; row < m; row++) {
            for (int col = 0; col < n; col++) {
                if (!isValid(row, col, m, n))
                    continue;
                int nmbr = board[row][col];
                int ones = 0;
                //check eight cells
                //top left
                if (isValid(row - 1, col - 1, m, n)) {
                    int cnmbr = board[row - 1][col - 1];
                    if (cnmbr == 1 || cnmbr == -1)
                        ones++;
                }
                //top
                if (isValid(row - 1, col, m, n)) {
                    int cnmbr = board[row - 1][col];
                    if (cnmbr == 1 || cnmbr == -1)
                        ones++;
                }
                //top right
                if (isValid(row - 1, col + 1, m, n)) {
                    int cnmbr = board[row - 1][col + 1];
                    if (cnmbr == 1 || cnmbr == -1)
                        ones++;
                }
                //right
                if (isValid(row, col + 1, m, n)) {
                    int cnmbr = board[row][col + 1];
                    if (cnmbr == 1 || cnmbr == -1)
                        ones++;
                }
                //bottom right
                if (isValid(row + 1, col + 1, m, n)) {
                    int cnmbr = board[row + 1][col + 1];
                    if (cnmbr == 1 || cnmbr == -1)
                        ones++;
                }
                //bottom
                if (isValid(row + 1, col, m, n)) {
                    int cnmbr = board[row + 1][col];
                    if (cnmbr == 1 || cnmbr == -1)
                        ones++;
                }
                //bottom left
                if (isValid(row + 1, col - 1, m, n)) {
                    int cnmbr = board[row + 1][col - 1];
                    if (cnmbr == 1 || cnmbr == -1)
                        ones++;
                }
                //left
                if (isValid(row, col - 1, m, n)) {
                    int cnmbr = board[row][col - 1];
                    if (cnmbr == 1 || cnmbr == -1)
                        ones++;
                }
                // 1 <= 1, 1 =0
                // 1 == 2 or 1==3, lives
                // 1 > 3, 1 = 0
                // 0 = 3 1\'s, 0 = 1
                if (nmbr == 0) {
                    if (ones == 3)
                        board[row][col] = 2;
                } else {
                    if (ones < 2 || ones > 3) {
                        board[row][col] = -1;
                    }
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == -1)
                    board[i][j] = 0;
                else if (board[i][j] == 2)
                    board[i][j] = 1;
            }
        }
    }

    public boolean isValid(int row, int col, int m, int n) {
        if (row < 0 || row >= m || col < 0 || col >= n)
            return false;
        return true;
    }
}
