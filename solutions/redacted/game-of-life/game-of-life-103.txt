class Solution {

    public void method1(int[][] board) {
        int[][] temp = new int[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) for (int k = 0; k < board[i].length; k++) temp[i][k] = board[i][k];
        for (int i = 0; i < board.length; i++) for (int k = 0; k < board[i].length; k++) {
            int live = checkNeighbors(i, k, temp);
            if (temp[i][k] == 1) {
                if (live < 2)
                    board[i][k] = 0;
                else if (live <= 3)
                    board[i][k] = 1;
                else
                    board[i][k] = 0;
            } else {
                if (live == 3)
                    board[i][k] = 1;
            }
        }
    }

    private int checkNeighbors(int i, int k, int[][] b) {
        int res = 0;
        if (i - 1 >= 0 && k - 1 >= 0)
            if (b[i - 1][k - 1] == 1)
                res++;
        if (i - 1 >= 0)
            if (b[i - 1][k] == 1)
                res++;
        if (i - 1 >= 0 && k + 1 <= b[0].length - 1)
            if (b[i - 1][k + 1] == 1)
                res++;
        if (k + 1 <= b[0].length - 1)
            if (b[i][k + 1] == 1)
                res++;
        if (i + 1 <= b.length - 1 && k + 1 <= b[0].length - 1)
            if (b[i + 1][k + 1] == 1)
                res++;
        if (i + 1 <= b.length - 1)
            if (b[i + 1][k] == 1)
                res++;
        if (i + 1 <= b.length - 1 && k - 1 >= 0)
            if (b[i + 1][k - 1] == 1)
                res++;
        if (k - 1 >= 0)
            if (b[i][k - 1] == 1)
                res++;
        return res;
    }
}
