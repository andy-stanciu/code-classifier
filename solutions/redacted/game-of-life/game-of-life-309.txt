class Solution {

    private static final int DEAD = 0;

    private static final int ALIVE = 1;

    private static final int[][] DIRECTIONS = { { -1, -1 }, { -1, 0 }, { -1, +1 }, { 0, -1 }, { 0, +1 }, { +1, -1 }, { +1, 0 }, { +1, +1 } };

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] neighborsBoard = new int[m][n];
        for (int r = 0; r < m; r++) {
            for (int c = 0; c < n; c++) {
                int neighbors = 0;
                for (int[] d : DIRECTIONS) {
                    int nr = r + d[0];
                    int nc = c + d[1];
                    if (nr >= 0 && nr < m && nc >= 0 && nc < n && board[nr][nc] == ALIVE) {
                        neighbors++;
                    }
                }
                neighborsBoard[r][c] = neighbors;
            }
        }
        for (int r = 0; r < m; r++) {
            for (int c = 0; c < n; c++) {
                int neighbors = neighborsBoard[r][c];
                if (board[r][c] == ALIVE) {
                    if (neighbors != 2 && neighbors != 3) {
                        board[r][c] = DEAD;
                    }
                } else {
                    if (neighbors == 3) {
                        board[r][c] = ALIVE;
                    }
                }
            }
        }
    }
}
