class Solution {

    public void method1(int[][] board) {
        int row = board.length;
        int col = board[0].length;
        int[][] next = new int[row][col];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                int cell = board[i][j];
                System.out.println();
                System.out.print(" " + i + " " + j + ": " + cell);
                int num = get(i - 1, j, row, col, board) + get(i - 1, j + 1, row, col, board) + get(i, j + 1, row, col, board) + get(i + 1, j + 1, row, col, board) + get(i + 1, j, row, col, board) + get(i + 1, j - 1, row, col, board) + get(i, j - 1, row, col, board) + get(i - 1, j - 1, row, col, board);
                System.out.print(" num: " + num);
                if (cell == 0) {
                    if (num == 3) {
                        next[i][j] = 1;
                        System.out.print(" new Val: " + 1);
                    } else {
                        next[i][j] = 0;
                        System.out.print(" new Val: " + 0);
                    }
                } else {
                    if (num < 2) {
                        next[i][j] = 0;
                        System.out.print(" new Val: " + 0);
                    } else if (num == 2 || num == 3) {
                        next[i][j] = 1;
                        System.out.print(" new Val: " + 1);
                    } else {
                        next[i][j] = 0;
                        System.out.print(" new Val: " + 0);
                    }
                }
            }
        }
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                board[i][j] = next[i][j];
            }
        }
    }

    public int get(int i, int j, int row, int col, int[][] board) {
        if (i >= 0 && i < row && j >= 0 && j < col) {
            return board[i][j];
        }
        return 0;
    }
}
