class Solution {

    public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<>();
        int ans = 0;
        for (int i = 0; i < tokens.length; i++) {
            String token = tokens[i];
            switch(token) {
                case "+":
                    ans = add(stack.pop(), stack.pop());
                    stack.push(ans);
                    break;
                case "-":
                    ans = sub(stack.pop(), stack.pop());
                    stack.push(ans);
                    break;
                case "*":
                    ans = mul(stack.pop(), stack.pop());
                    stack.push(ans);
                    break;
                case "/":
                    ans = div(stack.pop(), stack.pop());
                    stack.push(ans);
                    break;
                default:
                    stack.push(Integer.parseInt(token));
            }
        }
        return stack.pop();
    }

    private int add(int first, int second) {
        return first + second;
    }

    private int sub(int first, int second) {
        return second - first;
    }

    private int mul(int first, int second) {
        return first * second;
    }

    private int div(int first, int second) {
        return second / first;
    }
}
