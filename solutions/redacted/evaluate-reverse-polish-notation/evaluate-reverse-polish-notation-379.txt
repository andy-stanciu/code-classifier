class Solution {

    public int evalRPN(String[] tokens) {
        Deque<String> stack = new LinkedList<>();
        for (String token : tokens) {
            switch(token) {
                case "+" ->
                    {
                        int a = Integer.parseInt(stack.pop());
                        int b = Integer.parseInt(stack.pop());
                        stack.push(Integer.toString(a + b));
                    }
                case "-" ->
                    {
                        int a = Integer.parseInt(stack.pop());
                        int b = Integer.parseInt(stack.pop());
                        stack.push(Integer.toString(b - a));
                    }
                case "*" ->
                    {
                        int a = Integer.parseInt(stack.pop());
                        int b = Integer.parseInt(stack.pop());
                        stack.push(Integer.toString(a * b));
                    }
                case "/" ->
                    {
                        int a = Integer.parseInt(stack.pop());
                        int b = Integer.parseInt(stack.pop());
                        stack.push(Integer.toString(b / a));
                    }
                default ->
                    stack.push(token);
            }
        }
        return Integer.parseInt(stack.pop());
    }
}
