class Solution {

    public int evalRPN(String[] tokens) {
        // Create a stack to store integers
        Stack<Integer> stack = new Stack<>();
        // Iterate through the tokens
        for (String i : tokens) {
            // If the token is an operator
            if (i.equals("+") || i.equals("-") || i.equals("*") || i.equals("/")) {
                // Pop the top two numbers from the stack
                int num1 = stack.pop();
                int num2 = stack.pop();
                int ans = 0;
                // Perform the operation based on the operator
                if (i.equals("+")) {
                    ans = num2 + num1;
                } else if (i.equals("-")) {
                    ans = num2 - num1;
                } else if (i.equals("*")) {
                    ans = num2 * num1;
                } else {
                    // Handle division, checking for divide by zero and negative numbers
                    if (num1 == 0) {
                        // If denominator is equal to zero, set the answer to 0
                        ans = 0;
                    } else {
                        // Perform division
                        ans = num2 / num1;
                    }
                }
                // Push the result back onto the stack
                stack.push(ans);
            } else {
                // If the token is a number, push it onto the stack after converting it to an
                // integer
                stack.push(Integer.parseInt(i));
            }
        }
        // Return the top element of the stack (the final result)
        return stack.peek();
    }
}
