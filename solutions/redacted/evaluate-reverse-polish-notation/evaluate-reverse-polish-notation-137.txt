class Solution {

    public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < tokens.length; i++) {
            if ((tokens[i].equals("+") || tokens[i].equals("-") || tokens[i].equals("*") || tokens[i].equals("/")) && stack.size() >= 2) {
                int x = stack.pop();
                int y = stack.pop();
                stack.push(calcul(y, x, tokens[i]));
                continue;
            } else {
                stack.push(Integer.valueOf(tokens[i]));
            }
        }
        return stack.pop();
    }

    public int calcul(int y, int x, String operator) {
        switch(operator) {
            case "+":
                return y + x;
            case "-":
                return y - x;
            case "*":
                return y * x;
            case "/":
                return y / x;
            default:
                throw new IllegalArgumentException("Invalid operator");
        }
    }
}
