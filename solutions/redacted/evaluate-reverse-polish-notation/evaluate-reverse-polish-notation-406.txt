class Solution {

    public int evalRPN(String[] tokens) {
        Stack<Integer> numericData = new Stack<Integer>();
        int operant2;
        int operant1;
        for (String token : tokens) {
            switch(token) {
                case "+":
                    operant2 = numericData.pop();
                    operant1 = numericData.pop();
                    numericData.push(operant1 + operant2);
                    break;
                case "-":
                    operant2 = numericData.pop();
                    operant1 = numericData.pop();
                    numericData.push(operant1 - operant2);
                    break;
                case "*":
                    operant2 = numericData.pop();
                    operant1 = numericData.pop();
                    numericData.push(operant1 * operant2);
                    break;
                case "/":
                    operant2 = numericData.pop();
                    operant1 = numericData.pop();
                    numericData.push(operant1 / operant2);
                    break;
                default:
                    numericData.push(Integer.valueOf(token));
            }
        }
        return numericData.pop();
    }
}
