class Solution {

    public int evalRPN(String[] tokens) {
        Deque<Integer> numbers = new LinkedList<>();
        for (int i = 0; i < tokens.length; i++) {
            String token = tokens[i];
            if (isOperation(token)) {
                int num2 = numbers.pop();
                int num1 = numbers.pop();
                numbers.push(executeOperation(num1, num2, token));
            } else {
                numbers.push(Integer.parseInt(token));
            }
        }
        return numbers.pop();
    }

    boolean isOperation(String token) {
        return "+-*/".contains(token);
    }

    int executeOperation(int num1, int num2, String oper) {
        switch(oper) {
            case "+":
                return num1 + num2;
            case "-":
                return num1 - num2;
            case "*":
                return num1 * num2;
            case "/":
                return num1 / num2;
        }
        throw new IllegalStateException();
    }
}
