class Solution {

    public int evalRPN(String[] tokens) {
        //addFirst, removeFirst, peekFirst,
        int length = tokens.length;
        ArrayDeque<Integer> q = new ArrayDeque<>();
        int a = 0;
        int b = 0;
        int ans = 0;
        for (int i = 0; i < length; i++) {
            if (tokens[i].equals("+") || tokens[i].equals("-") || tokens[i].equals("*") || tokens[i].equals("/")) {
                b = q.removeFirst();
                a = q.removeFirst();
                ans = operation(a, b, tokens[i]);
                q.addFirst(ans);
                continue;
            }
            q.addFirst(Integer.parseInt(tokens[i]));
        }
        return q.size() == 1 ? q.removeFirst() : ans;
    }

    private int operation(int a, int b, String operator) {
        switch(operator) {
            case "+":
                return a + b;
            case "-":
                return a - b;
            case "*":
                return a * b;
            case "/":
                return a / b;
            default:
                return 0;
        }
    }
}
