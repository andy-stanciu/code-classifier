class Solution {

    public int evalRPN(String[] tokens) {
        Stack<Integer> st = new Stack<Integer>();
        for (int i = 0; i < tokens.length; i++) {
            if (!tokens[i].equals("+") && !tokens[i].equals("*") && !tokens[i].equals("-") && !tokens[i].equals("/")) {
                st.push(Integer.parseInt(tokens[i]));
            } else if (tokens[i].equals("+") || tokens[i].equals("*") || tokens[i].equals("-") || tokens[i].equals("/")) {
                int operand2 = st.pop();
                int operand1 = st.pop();
                if (tokens[i].equals("+")) {
                    st.push(operand1 + operand2);
                } else if (tokens[i].equals("-")) {
                    st.push(operand1 - operand2);
                } else if (tokens[i].equals("*")) {
                    st.push(operand1 * operand2);
                } else if (tokens[i].equals("/")) {
                    st.push(operand1 / operand2);
                }
            }
        }
        return st.pop();
    }
}
