class Solution {

    public int evalRPN(String[] tokens) {
        Stack<Integer> s = new Stack<Integer>();
        int top1 = 0;
        int top2 = 0;
        for (int i = 0; i < tokens.length; i++) {
            if (tokens[i].equals("+")) {
                top2 = s.peek();
                s.pop();
                top1 = s.peek();
                s.pop();
                s.push(top1 + top2);
            } else if (tokens[i].equals("-")) {
                top2 = s.peek();
                s.pop();
                top1 = s.peek();
                s.pop();
                s.push(top1 - top2);
            } else if (tokens[i].equals("*")) {
                top2 = s.peek();
                s.pop();
                top1 = s.peek();
                s.pop();
                s.push(top1 * top2);
            } else if (tokens[i].equals("/")) {
                top2 = s.peek();
                s.pop();
                top1 = s.peek();
                s.pop();
                s.push(top1 / top2);
            } else {
                try {
                    s.push(Integer.parseInt(tokens[i]));
                } catch (NumberFormatException e) {
                    throw new RuntimeException("Invalid token in the expression: " + tokens[i]);
                }
            }
        }
        return s.peek();
    }
}
