class Solution {

    static final Map<String, OperationStrategy> map = new HashMap<>();

    static {
        map.put("+", new Add());
        map.put("-", new Minus());
        map.put("/", new Divide());
        map.put("*", new Multiply());
    }

    public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack();
        for (int i = 0; i < tokens.length; i++) {
            String curr = tokens[i];
            if (curr.matches("-?\\\\d+(\\\\.\\\\d+)?")) {
                stack.add(Integer.parseInt(curr));
            } else {
                stack.add(map.get(curr).execute(stack.pop(), stack.pop()));
            }
        }
        return stack.pop();
    }
}

interface OperationStrategy {

    int execute(int a, int b);
}

class Add implements OperationStrategy {

    @Override
    public int execute(int a, int b) {
        return a + b;
    }
}

class Minus implements OperationStrategy {

    @Override
    public int execute(int a, int b) {
        return b - a;
    }
}

class Divide implements OperationStrategy {

    @Override
    public int execute(int a, int b) {
        if (a == 0) {
            throw new ArithmeticException("Division by zero is not allowed");
        }
        return b / a;
    }
}

class Multiply implements OperationStrategy {

    @Override
    public int execute(int a, int b) {
        return a * b;
    }
}
