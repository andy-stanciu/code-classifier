class Solution {

    public int evalRPN(String[] tokens) {
        Deque<String> deque = new LinkedList<>();
        for (String token : tokens) {
            deque.addLast(token);
        }
        return operation(deque);
    }

    private static int operation(Deque<String> deque) {
        String token = deque.removeLast();
        if ("+".equals(token)) {
            int operand1 = operation(deque);
            int operand2 = operation(deque);
            return operand2 + operand1;
        } else if ("-".equals(token)) {
            int operand1 = operation(deque);
            int operand2 = operation(deque);
            return operand2 - operand1;
        } else if ("*".equals(token)) {
            int operand1 = operation(deque);
            int operand2 = operation(deque);
            return operand2 * operand1;
        } else if ("/".equals(token)) {
            int operand1 = operation(deque);
            int operand2 = operation(deque);
            return operand2 / operand1;
        } else {
            return Integer.valueOf(token);
        }
    }
}
