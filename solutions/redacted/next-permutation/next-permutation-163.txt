class Solution {

    public void method1(int[] nums) {
        if (nums.length == 1)
            return;
        int i = nums.length - 2;
        // find the index where the number start decreseasing from the end
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }
        // if index is -1 then it means the array is in decrasing order, its the last permutaition so return the first permutation i.e incrasing order
        if (i == -1) {
            reverse(nums, 0, nums.length - 1);
            return;
        }
        // when we found the turining point from end
        // take a value from the end which is grater than the turning point value
        // Note: in 432651 turning point is 2 and value greater than turning point is 5
        int j = nums.length - 1;
        while (j >= 0 && nums[j] <= nums[i]) {
            j--;
        }
        //swap 2 and 5
        // Here we know 2 > 1 and 5 > 2, and 651 is decreasing order
        // when we swap 5 and 2, it will still remain in decreasing order because both 5 and 2 is betwenn 1 and 6
        swap(nums, i, j);
        // now it will become 435621
        // now reverse numbers after turning point, as they are in decreasing order always, after reverse it becomes increasing order
        // hense the value becomes, 435126
        reverse(nums, i + 1, nums.length - 1);
        return;
    }

    void reverse(int[] arr, int start, int end) {
        while (start < end) {
            swap(arr, start, end);
            start++;
            end--;
        }
    }

    void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
