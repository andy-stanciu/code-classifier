class Solution {

    public void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    public void reverseArray(int[] arr, int startIdx, int endIdx) {
        // System.out.println("startIdx is "+startIdx+" endIdx is "+ endIdx);
        int j = endIdx;
        for (int i = startIdx; i < startIdx + ((endIdx + 1 - startIdx) / 2); i++) {
            swap(arr, i, j);
            j--;
        }
    }

    public void reverse(int[] arr, int l, int r) {
        while (l < r) {
            swap(arr, l++, r--);
        }
    }

    public void method1(int[] nums) {
        int i = 0;
        for (i = nums.length - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                break;
            }
        }
        // System.out.println("i value is "+i);
        if (i == -1) {
            reverse(nums, 0, nums.length - 1);
            return;
        }
        // Arrays.sort(nums);//means given input does not have a lexicographical larger rearrangement
        for (int j = nums.length - 1; j >= i + 1; j--) {
            if (nums[j] > nums[i]) {
                swap(nums, i, j);
                break;
            }
        }
        // System.out.println();
        // for(int k = 0;k<nums.length;k++){
        //     System.out.print(nums[k]+" ");
        // }
        reverse(nums, i + 1, nums.length - 1);
    }
}
