class Solution {

    public void method1(int[] nums) {
        int n = nums.length;
        //first step is to find the break point
        // point to the break point
        int ind = -1;
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                ind = i;
                break;
            }
        }
        //check if the break point exists or not
        //if not then the arry is sorted in the decending order
        //so there must be no next permutation hence
        //we have to just return the first permutaion of the input
        if (ind == -1) {
            Arrays.sort(nums);
            return;
        }
        //if the break point exists
        //now we need to find the smallest grater element in the
        //right half of the array starting from ind + 1 to n-1
        //after finding the element we need to swap
        for (int i = n - 1; i > ind; i--) {
            if (nums[i] > nums[ind]) {
                int temp = nums[ind];
                nums[ind] = nums[i];
                nums[i] = temp;
                break;
            }
        }
        //after swapping we now need to reverse the right half
        //means nums array from ind + 1 to n-1
        int start = ind + 1;
        int end = n - 1;
        while (start < end) {
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }
}
