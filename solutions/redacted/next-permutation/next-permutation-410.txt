/*
 -> The intuition is we need to find the next greater element. not much greater but the next greater. 
 -> so we need to traverse the array from back. 
 -> we need to find the first drop. i.e: find k for a[k] < a[k+1]. 
 -> We will find the index of last element which is greater than a[k]. 
 -> swap those element and reverse the array from k+1 index. 
*/
class Solution {

    public void method1(int[] arr) {
        int n = arr.length;
        int k = -1;
        for (int i = n - 2; i >= 0; i--) {
            //find the drop
            if (arr[i] < arr[i + 1]) {
                k = i;
                break;
            }
        }
        if (k == -1) {
            reverse(arr, 0, n - 1);
            return;
        }
        int l = n - 1;
        while (arr[l] <= arr[k]) {
            l--;
        }
        //swap
        int temp = arr[k];
        arr[k] = arr[l];
        arr[l] = temp;
        reverse(arr, k + 1, n - 1);
    }

    public void reverse(int[] arr, int start, int end) {
        while (start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }
}
