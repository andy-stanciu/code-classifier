class Solution {

    public void method1(int[] nums) {
        int n = nums.length;
        int i = 0, j = 0;
        // Find the first decreasing element from the end
        for (i = n - 2; i >= 0 && nums[i] >= nums[i + 1]; i--) {
            // Empty body for the loop, it\'s used only for finding i
        }
        // If such an element was found
        if (i >= 0) {
            // Find the element just larger than nums[i]
            for (j = n - 1; nums[j] <= nums[i]; j--) {
                // Empty body for the loop, it\'s used only for finding j
            }
            // Swap them
            swap(nums, i, j);
        }
        // Reverse the elements after i to get the next permutation
        reverse(nums, i + 1, n - 1);
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    private void reverse(int[] nums, int start, int end) {
        while (start < end) {
            swap(nums, start++, end--);
        }
    }
}
