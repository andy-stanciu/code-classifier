/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
// Time complexity : O(N)
// Space Complexity : O(1)
class Solution {

    public ListNode method1(ListNode head) {
        // The dummy node is used to simplify the edge case where the list might contain only one node.
        ListNode dummyhead = new ListNode(0);
        dummyhead.next = head;
        //prev and curr pointers
        ListNode prev = dummyhead;
        ListNode curr = head;
        while (curr != null && curr.next != null) {
            //Node after the head that needs to be swapped
            ListNode nextNode = curr.next;
            //Example : dummy->1->2->3->4
            //dummy-> 1 -> 3 -> 4 [->2->]
            curr.next = nextNode.next;
            // dummy-> ? [2 -> 1 -> 3 -> 4]
            nextNode.next = curr;
            // dummy -> 2 -> 1 -> 3 -> 4
            prev.next = nextNode;
            //Move the pointer prev to curr
            prev = curr;
            curr = curr.next;
        }
        //returns the head of the List
        return dummyhead.next;
    }
}
