/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        ListNode curr = head;
        ListNode rh = head;
        ListNode prev = null;
        while (curr != null) {
            if (curr.next != null) {
                // next next node
                ListNode nn = curr.next.next;
                // next node
                ListNode nx = curr.next;
                // curr node
                ListNode c = curr;
                //swap
                nx.next = c;
                //connect prev after swap
                if (prev != null)
                    prev.next = nx;
                else
                    //if prev is null means new head that is to be returned is to be intialized
                    rh = nx;
                //connect with next next
                c.next = nn;
                //change prev and curr
                prev = c;
                curr = nn;
            } else
                break;
        }
        return rh;
    }
}
