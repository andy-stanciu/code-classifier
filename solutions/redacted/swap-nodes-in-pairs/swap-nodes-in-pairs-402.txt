/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        if (head == null || head.next == null)
            return head;
        ListNode result = head.next;
        ListNode before = null;
        ListNode node1 = head;
        ListNode node2 = node1.next;
        ListNode after = node2.next;
        while (node1 != null && node2 != null) {
            if (before != null)
                before.next = node2;
            node2.next = node1;
            node1.next = after;
            // after the shuffle the order is before, node2, node1, after
            before = node1;
            node1 = before != null ? before.next : null;
            node2 = node1 != null ? node1.next : null;
            after = node2 != null ? node2.next : null;
        }
        return result;
    }
}
