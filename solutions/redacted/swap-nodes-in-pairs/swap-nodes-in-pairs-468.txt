/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        if (head == null)
            return null;
        else if (head.next == null)
            return head;
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode cur = head;
        ListNode prev = dummy;
        while (cur != null && cur.next != null) {
            ListNode first = cur;
            ListNode second = cur.next;
            // Perform the swap
            // prev points to the second node
            prev.next = second;
            // first node points to the node after second
            first.next = second.next;
            // second node points to the first node
            second.next = first;
            // Move pointers for the next iteration
            // move prev to the first node (which is now the second in the pair)
            prev = first;
            cur = first.next;
        }
        return dummy.next;
    }
}
