/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        // head == null => head
        // head size == 1 => head
        // size = 2 => swap
        // size = 3 => swap 1-2, keep 3
        // size = 4 => swap 1-2, swap 3-4
        java.util.Vector var1 = new java.util.Vector();
        ListNode temp = head;
        while (temp != null) {
            var1.add(temp);
            temp = temp.next;
        }
        ListNode previous, current, var2 = null;
        for (int i = 1; i < var1.size(); i = i + 2) {
            previous = (ListNode) var1.get(i - 1);
            current = (ListNode) var1.get(i);
            current.next = previous;
            previous.next = var1.size() > i + 1 ? (ListNode) var1.get(i + 1) : null;
            if (var2 != null) {
                var2.next = current;
            }
            var2 = previous;
            if (i == 1) {
                head = current;
            }
        }
        return head;
    }
}
