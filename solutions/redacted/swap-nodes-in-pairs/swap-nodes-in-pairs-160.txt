/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        //initialize a pointer to the list as a placeholder
        ListNode var1 = head.next;
        //initialize pointer to traverse the list
        ListNode curr = head;
        while (curr != null && curr.next != null) {
            //place holder for the nextpair
            ListNode nextPair = curr.next.next;
            //place holder for the second node
            ListNode second = curr.next;
            //swap the nodes by setting the second node to point to the first node
            second.next = curr;
            //set the curr.next
            if (nextPair != null && nextPair.next != null) {
                curr.next = nextPair.next;
            } else {
                curr.next = nextPair;
            }
            curr = nextPair;
        }
        return var1;
    }
}
