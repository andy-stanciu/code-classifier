/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        // trivial solution: no pairs to swap
        if (head == null || head.next == null)
            return head;
        ListNode orange = null;
        ListNode purple = head;
        ListNode red = head.next;
        // perform first swap
        purple.next = red.next;
        red.next = purple;
        head = red;
        // if LL was only 2 nodes
        if (purple.next == null)
            return head;
        while (purple.next != null) {
            orange = purple;
            purple = purple.next;
            red = purple.next;
            // occurs if list has odd # of elements
            if (red == null)
                break;
            purple.next = red.next;
            red.next = purple;
            orange.next = red;
        }
        return head;
    }
}
