/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        // The dummy node is used to simplify the edge case where the list might contain only one node.
        ListNode dummyNode = new ListNode(0, head);
        // \'previousNode\' always points to the node before the pair that needs to be swapped.
        ListNode previousNode = dummyNode;
        // \'currentNode\' is the first node in the pair that needs to be swapped.
        ListNode currentNode = head;
        // Iterate over the list in steps of two nodes at a time.
        while (currentNode != null && currentNode.next != null) {
            // \'nextNode\' is the second node in the pair that needs to be swapped.
            ListNode nextNode = currentNode.next;
            // Swap the pair by adjusting the pointers.
            currentNode.next = nextNode.next;
            nextNode.next = currentNode;
            previousNode.next = nextNode;
            // Move \'previousNode\' pointer two nodes ahead to the last node of the swapped pair.
            previousNode = currentNode;
            // Advance \'currentNode\' to the next pair of nodes to swap.
            currentNode = currentNode.next;
        }
        // The \'next\' of dummy node points to the new head after swapping pairs.
        return dummyNode.next;
    }
}
