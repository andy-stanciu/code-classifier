class Solution {

    public ListNode method1(ListNode head) {
        // if the list is empty or has only one node
        if (head == null || head.next == null) {
            return head;
        }
        // new head to be the second node
        ListNode newHead = head.next;
        // swap the first two nodes
        head.next = newHead.next;
        newHead.next = head;
        // recurse
        head.next = method1(head.next);
        return newHead;
    }
}
