class Solution {

    public ListNode method1(ListNode head) {
        // Check if the list is empty or has only one node
        if (head == null || head.next == null) {
            return head;
        }
        // Initialize pointers for swapping
        // Dummy node to simplify edge cases
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prev = dummy;
        // Swap pairs
        while (head != null && head.next != null) {
            ListNode first = head;
            ListNode second = head.next;
            // Perform the swap
            prev.next = second;
            first.next = second.next;
            second.next = first;
            // Move to the next pair
            prev = first;
            head = first.next;
        }
        // Return the new head after swapping
        return dummy.next;
    }
}
