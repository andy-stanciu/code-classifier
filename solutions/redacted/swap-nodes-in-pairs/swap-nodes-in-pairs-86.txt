/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        List<ListNode> lst = new ArrayList<ListNode>();
        ListNode res = new ListNode();
        ListNode var1 = new ListNode();
        ListNode temp = new ListNode();
        int i;
        if (head == null)
            return null;
        if (head.next == null)
            return head;
        //Adding all the nodes in a list instead of playing with links
        while (head != null) {
            if (//if head.next is null just add it to the list
            head.next != null) {
                lst.add(head.next);
                lst.add(head);
                //jumping 2 nodes ahead
                head = head.next.next;
            } else {
                lst.add(head);
                head = head.next;
            }
        }
        // fin is just acting as the head for res as result will move forward in the linked list
        var1 = res;
        for (i = 0; i < lst.size() - 1; i++) {
            res.next = lst.get(i);
            res = res.next;
        }
        //the last node .next needs to be set as null otherwise we will run into a cyclic problem
        temp = lst.get(i);
        temp.next = null;
        res.next = temp;
        //next because first node of res will be 0
        return var1.next;
    }
}
