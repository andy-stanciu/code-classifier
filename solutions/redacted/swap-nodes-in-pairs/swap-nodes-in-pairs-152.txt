/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        // Create a dummy node to simplify swaps at the head.
        ListNode dummy = new ListNode(0, head);
        ListNode prePrevNode = null;
        ListNode prevNode = dummy;
        ListNode currNode = head;
        int counter = 1;
        while (currNode != null) {
            if (counter % 2 == 0) {
                // Perform swap for every second node.
                method2(prePrevNode);
                // Adjust pointers after swap.
                prevNode = prePrevNode.next;
                currNode = prePrevNode.next.next;
            }
            counter++;
            // Move the pointers forward.
            prePrevNode = prevNode;
            prevNode = currNode;
            currNode = currNode.next;
        }
        // Return the new head.
        return dummy.next;
    }

    private void method2(ListNode prevPrev) {
        // Nodes involved in swapping.
        ListNode prev = prevPrev.next;
        ListNode curr = prevPrev.next.next;
        ListNode next = prevPrev.next.next.next;
        // Adjusting pointers to perform the swap.
        prevPrev.next = curr;
        curr.next = prev;
        prev.next = next;
    }
}
