/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        if (head == null || head.next == null)
            return head;
        // Initialize pointers
        // The second node will become the new head
        ListNode newHead = head.next;
        ListNode current = head;
        ListNode prev = null;
        // Traverse and swap adjacent pairs
        while (current != null && current.next != null) {
            // The node to swap with current
            ListNode next = current.next;
            // Swap `current` and `next`
            current.next = next.next;
            next.next = current;
            // Connect previous pair with the swapped pair
            if (prev != null) {
                prev.next = next;
            }
            // Update pointers
            prev = current;
            current = current.next;
        }
        return newHead;
    }
}
