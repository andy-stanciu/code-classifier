/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        // If the list is empty or has only one node, no need to swap.
        if (head == null || head.next == null) {
            return head;
        }
        // `temp` is used to traverse the list, starting from the head.
        ListNode temp = head;
        // `prev` is used to keep track of the previous node in the swapped pairs.
        ListNode prev = null;
        // Update the head to point to the second node, as it will become the new head after swapping.
        head = head.next;
        // Traverse the list as long as there are at least two nodes left to swap.
        while (temp != null && temp.next != null) {
            // `var` is the second node of the current pair to be swapped.
            ListNode var = temp.next;
            // If this is not the first pair, link the previous pair to the current swapped pair.
            if (prev != null) {
                prev.next = var;
            }
            // Update the `next` pointer of the first node to point to the node after the second node.
            temp.next = var.next;
            // The second node (`var`) now points to the first node (`temp`) to complete the swap.
            var.next = temp;
            // Move `prev` to the first node of the current swapped pair for the next iteration.
            prev = temp;
            // Move `temp` to the next pair of nodes for the next swap.
            temp = temp.next;
        }
        // Return the new head of the swapped list.
        return head;
    }
}
