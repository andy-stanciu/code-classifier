/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        // [], [1]
        if (head == null || head.next == null) {
            return head;
        }
        /* 
            Work with three pointers: first, second (those two will be swapped)
            and the previous element.
        */
        ListNode first = head;
        ListNode second = first.next;
        ListNode prev;
        // Set the head to the second element
        head = second;
        // Swap the first two elements
        method2(first);
        /* 
            for every next two elements we check if they exist, assign then to the first, second and 
            prev pointers and swap the two nodes while changing the previous pointer
        */
        while (first.next != null && first.next.next != null) {
            prev = first;
            first = first.next;
            second = first.next;
            prev.next = second;
            method2(first);
        }
        return head;
    }

    private void method2(ListNode first) {
        ListNode second = first.next;
        ListNode temp = second.next;
        second.next = first;
        first.next = temp;
    }
}
