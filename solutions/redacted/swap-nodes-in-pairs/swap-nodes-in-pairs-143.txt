/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        // Base case: if the list is empty or has only one node, no swap is needed
        if (head == null || head.next == null) {
            return head;
        }
        // Identify the remaining list after the current pair
        ListNode next = head.next.next;
        // Swap the first two nodes
        // Store the current head node
        ListNode temp = head;
        // Move head to the second node
        head = head.next;
        // Point the new head\'s next to the old head
        head.next = temp;
        // Recursively swap the rest of the list
        head.next.next = method1(next);
        // Return the new head of the swapped list
        return head;
    }
}
