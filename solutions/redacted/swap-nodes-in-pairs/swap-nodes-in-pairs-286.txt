/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        // Base case: if the list is empty or has only one node, return the head as is
        if (head == null || head.next == null)
            return head;
        // Dummy node is used to simplify edge cases, particularly handling the head of
        // the list
        ListNode dummy = new ListNode(0, head);
        // prev points to the node before the pair being swapped, initially set to dummy
        ListNode prev = dummy;
        // first and second represent the two nodes in the pair to be swapped
        ListNode first = head;
        ListNode second = head.next;
        // Iterate through the list, swapping pairs of nodes
        while (true) {
            // Adjust pointers to perform the swap
            // Link the first node to the node after the second node
            first.next = second.next;
            // Link the second node to the first node, completing the swap
            second.next = first;
            // Link the previous node to the new head of the swapped pair (second)
            prev.next = second;
            // Move prev to the end of the swapped pair (first node after the swap)
            prev = first;
            // If there are no more nodes to swap, break out of the loop
            if (first.next == null)
                break;
            // Move first to the next node to continue swapping
            first = first.next;
            // If there is no second node to swap with, break out of the loop
            if (first.next == null)
                break;
            // Move second to the node after first to set up the next swap
            second = first.next;
        }
        // Return the new head of the list, which is the node following the dummy node
        return dummy.next;
    }
}
