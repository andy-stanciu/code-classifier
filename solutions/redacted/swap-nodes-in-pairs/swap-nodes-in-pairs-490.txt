/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head) {
        //define an iterator
        ListNode it = head;
        //like any swapping process, we need a temp variable
        ListNode temp = null;
        //when we swap, we need to make sure that the two swapped
        //nodes stay connected to the list
        ListNode prev = null;
        //edge case
        if (head == null) {
            return head;
        }
        //iterate through the LinkedList
        while (it != null) {
            //if there is an odd number of values in the list,
            //just do not swap and exit
            if (it.next == null) {
                it = it.next;
                continue;
            }
            temp = it.next;
            it.next = it.next.next;
            temp.next = it;
            if (prev == null) {
                head = temp;
            } else {
                prev.next = temp;
            }
            prev = it;
            it = it.next;
        }
        return head;
    }
}
