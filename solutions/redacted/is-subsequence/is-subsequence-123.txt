class Solution {

    public boolean method1(String s, String t) {
        int i = 0;
        int j = 0;
        while (i < s.length() && j < t.length()) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
                j++;
            } else {
                j++;
            }
        }
        if (i == s.length())
            return true;
        return false;
    }
}
// Tabulation
//     int[] dp = new int[t.length()+1];
//     int[] cur = new int[t.length()+1];
//     Arrays.fill(dp, 1);
//     for(int i = 1; i<=s.length(); i++){
//         for(int j = 1; j<=t.length(); j++){
//             if(s.charAt(i-1) == t.charAt(j-1)){
//                 cur[j] = dp[j-1];
//             }else{
//                 cur[j] = cur[j-1];
//             }
//         }
//         for(int j=0; j<cur.length; j++){
//             dp[j] = cur[j];
//         }
//     }
//     if(dp[t.length()] == 1) return true;
//     return false;
// }
// }
//Recursive
//         for(int i=0; i<dp.length; i++){
//             Arrays.fill(dp[i], -1);
//         }
//         int i = sub(s, t, s.length()-1, t.length()-1);
//         if(i == 1) return true;
//         return false;
//     }
//     int sub(String s, String t, int i, int j){
//         if(j < 0){
//             if(i<0) return 1;
//             return 0;
//         }
//         if(i < 0) return 1;
//         if(dp[i][j] != -1) return dp[i][j];
//         if(s.charAt(i) == t.charAt(j)){
//             dp[i][j] = sub(s, t, i-1, j-1);
//         }else{
//             dp[i][j] = sub(s, t, i, j-1);
//         }
//         return dp[i][j];
//     }
// }
