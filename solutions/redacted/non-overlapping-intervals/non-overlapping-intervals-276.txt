class Solution {

    public int method1(int[][] param1) {
        // Greedy Approach
        Arrays.sort(param1, (itv1, itv2) -> (itv1[0] - itv2[0]));
        Deque<int[]> stack = new ArrayDeque<>();
        for (int i = 0; i < param1.length; i++) {
            if (stack.isEmpty()) {
                stack.offerFirst(param1[i]);
            } else {
                int[] top = stack.peekFirst();
                // No conflict
                if (top[1] <= param1[i][0]) {
                    stack.offerFirst(param1[i]);
                } else // Conflict, replace the last-added interval with this current interval
                if (top[1] > param1[i][1]) {
                    stack.pollFirst();
                    stack.offerFirst(param1[i]);
                }
            }
        }
        return param1.length - stack.size();
    }
}
