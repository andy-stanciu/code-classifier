class Solution {

    public int method1(int[][] param1) {
        Arrays.sort(param1, (interval1, interval2) -> {
            int subtractStart = interval1[1] - interval2[1];
            if (subtractStart != 0)
                return subtractStart;
            else
                return interval1[0] - interval2[0];
        });
        // how many intervals max can keep end at i th interval
        int[] dp = new int[param1.length];
        Arrays.fill(dp, 1);
        int max = 1;
        for (int i = 1; i < param1.length; i++) {
            int curStart = param1[i][0];
            int curEnd = param1[i][1];
            for (int j = i - 1; j >= 0; j--) {
                int preEnd = param1[j][1];
                if (preEnd <= curStart) {
                    int count = dp[j] + 1;
                    if (count > dp[i]) {
                        dp[i] = count;
                        max = Math.max(max, dp[i]);
                    }
                }
                if (dp[i] > j)
                    break;
            }
        }
        return param1.length - max;
    }
}
