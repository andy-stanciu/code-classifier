class Solution {

    public int method1(int[][] param1) {
        // asc order of end time
        Arrays.sort(param1, (a, b) -> Integer.compare(a[1], b[1]));
        int prevEndTime = param1[0][1];
        // since we are counting non-overlapping elements, so consider 1st as non-overlapping element
        int count = 1;
        for (int i = 1; i < param1.length; i++) {
            // if start time of curr element is more or equal to previous elements endtime. That means it is non-overlapping element.
            //Hence increase the count and update the previous end time with curr element\'s end time for further comparison
            // Note that the prevEndTime will hold end time of the previous element which was non-overlapping element.
            if (param1[i][0] >= prevEndTime) {
                prevEndTime = param1[i][1];
                count++;
            }
        }
        // minus total len from count of non-overlapping element to get min count of elements that could be removed to get non-overlapping interval array
        return param1.length - count;
    }
}
