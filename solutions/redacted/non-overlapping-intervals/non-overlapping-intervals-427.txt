/**
 * Challenge solution.
 */
public class Solution {

    /**
     * Challenge solution.
     * <ul>
     *  <li>Average time complexity: O(n log n)
     *  <li>Worst time complexity:   O(n log n)
     *  <li>Space complexity:        O(1)
     * </ul>
     *
     * @return challenge answer.
     */
    public int method1(final int[][] param1) {
        var minimumRemoved = 0;
        Arrays.sort(param1, Comparator.comparingInt(interval -> interval[0]));
        for (var current = 1; current < param1.length; current += 1) {
            // Current interval overlaps with previous interval.
            if (param1[current][0] < param1[current - 1][1]) {
                // Retain interval with smaller end value.
                param1[current][1] = Math.min(param1[current][1], param1[current - 1][1]);
                minimumRemoved += 1;
            }
        }
        return minimumRemoved;
    }
}
