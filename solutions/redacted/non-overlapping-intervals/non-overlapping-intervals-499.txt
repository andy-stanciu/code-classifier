class Solution {

    public int method1(int[][] param1) {
        // sort the list based on the starting index
        Arrays.sort(param1, (a, b) -> Integer.compare(a[0], b[0]));
        int ans = 0;
        //linkedlist which will don\'t contain the overlapping intervals
        LinkedList<int[]> merged = new LinkedList();
        for (int[] interval : param1) {
            if (merged.isEmpty() || merged.getLast()[1] <= interval[0]) {
                //add the interval to the list if the ending index of last interval is smaller than the starting index of current i.e they are not overlapping
                merged.add(interval);
            } else {
                //the last interval is overlapping with current one
                ans++;
                if (merged.getLast()[1] > interval[1]) {
                    //if the last interval\'s end idx is greater than the start idx of the current interval then remove the last interval and add the current interval to the list
                    merged.removeLast();
                    merged.add(interval);
                }
            }
        }
        return ans;
    }
}
