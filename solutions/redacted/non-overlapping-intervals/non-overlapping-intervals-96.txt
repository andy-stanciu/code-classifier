class Solution {

    public int method1(int[][] param1) {
        // Approach is sort using start time
        // then check if there is overlapping or not
        // if not overlapping update the last end time
        // if overlapping then remove the one which has larger end time because it has possibility of overlapping with others, we are thinking of in a greedy way
        Arrays.sort(param1, (int[] a, int[] b) -> a[0] - b[0]);
        int count = 0;
        int end = param1[0][1];
        for (int i = 1; i < param1.length; i++) {
            if (param1[i][0] >= end) {
                end = param1[i][1];
            } else {
                count++;
                end = Math.min(end, param1[i][1]);
            }
        }
        return count;
    }
    // one more apporach is using a trick , find the maximum number of meeetings that can be held in one room then the remaining meetings represent that it should be removed.
    // here intervals are treated as meetings.
}
