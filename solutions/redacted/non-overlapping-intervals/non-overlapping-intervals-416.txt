class Solution {

    public int method1(int[][] points) {
        //we can sort according to starting points or
        Arrays.sort(points, (a, b) -> a[0] - b[0]);
        //ending points for this question
        //I am solving it using ssorting acc to starting pointssss
        int ans = 0;
        int prevend = points[0][1];
        for (int i = 1; i < points.length; i++) {
            //check if the intervals are overlapping or not
            if (prevend <= points[i][0]) {
                //the intervals are not overlapping so increment the prevend
                //as the interval is not overlapping to the previous one so
                //now we have to check if this current interval is overlapping
                //to its subsequent intervals
                prevend = points[i][1];
            } else {
                //they are overlapping so increment the ans
                //it means we are going to remove the overlapping interval
                ans++;
                //but which one
                prevend = Math.min(prevend, points[i][1]);
                //which has the smallest ending value bcoz then less no of intervals will
                //be removed to make the rest of the intervals non-overlapping.
            }
        }
        return ans;
    }
}
