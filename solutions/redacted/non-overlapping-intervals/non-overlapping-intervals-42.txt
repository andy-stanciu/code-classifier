class Solution {

    // return the minimum number of overlaping intervals
    public int method1(int[][] param1) {
        // O(n log n) time | O(1) space
        int n = param1.length;
        if (n == 1)
            return 0;
        // sort interval[][] by start time
        Arrays.sort(param1, (a, b) -> a[0] - b[0]);
        int res = 0;
        for (int i = 0; i < n - 1; i++) {
            // [1,5] - [3, x]
            if (param1[i][1] > param1[i + 1][0]) {
                // [1, 5] - [3, 10]  => [1, 5]
                if (param1[i][1] < param1[i + 1][1]) {
                    // remove the intervals[][] w/ longer end time
                    // by doing so, we only need to remove the min overlaping interval[][]
                    param1[i + 1] = param1[i];
                }
                res += 1;
            }
        }
        return res;
    }
}
