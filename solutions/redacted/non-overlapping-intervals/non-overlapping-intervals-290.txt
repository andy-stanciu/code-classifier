class Solution {

    public int method1(int[][] param1) {
        if (param1.length == 0) {
            return 0;
        }
        // sorting on the basis of increasing end points of interval
        Arrays.sort(param1, (i1, i2) -> i1[1] - i2[1]);
        // to store how many intervals be deleted to remove overlapping
        int d = 0;
        // current end point will be the end point of first interval
        int curEnd = param1[0][1];
        for (int i = 1; i < param1.length; i++) {
            if (param1[i][0] >= curEnd) {
                // if the starting point of next interval is greater or equal to current end point then it is non-overlapping so no issue, but update the current end value to the current end point of that iterated interval
                curEnd = param1[i][1];
            } else {
                // otherwise it will cause overlap , so it must be deleted to remove overlapping ; hence increase the count
                d++;
            }
        }
        return d;
    }
}
