class Solution {

    public int method1(int[] nums, int target) {
        // Sort the array to use two-pointer technique
        Arrays.sort(nums);
        // Initialize the closest sum to a large value
        int var1 = nums[0] + nums[1] + nums[2];
        int n = nums.length;
        // Loop through the array, treating each number as the potential first number of the triplet
        for (int i = 0; i < n - 2; i++) {
            int left = i + 1;
            int right = n - 1;
            while (left < right) {
                int sum = nums[i] + nums[left] + nums[right];
                // If the current sum is closer to the target than the previous closest sum, update closestSum
                if (Math.abs(sum - target) < Math.abs(var1 - target)) {
                    var1 = sum;
                }
                if (sum < target) {
                    left++;
                } else if (sum > target) {
                    right--;
                } else {
                    // If the sum is exactly equal to the target, return the sum
                    return sum;
                }
            }
        }
        return var1;
    }
}
