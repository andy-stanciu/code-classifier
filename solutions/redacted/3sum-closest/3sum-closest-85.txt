class Solution {

    public int method1(int[] nums, int target) {
        /*

            Here basically we are trying to bring the sum of the
            triplets closer to the target

            for ex. 
                x + y + z --- approching --> target

                this can be in two ways 

                x + y + z ----> target <---- x + y + z

                It can approach in any direction 

                Once we get to know that target is bigger than the sum 
                then we need to make our sum greater to move more closer to the target

                or else if the target is smaller and our sum is bigger 
                then we need to decrement out sum to move closer to the target

                Sorting will helped to keep rack of the numbers which we can add or subtract
                to reach closer to the target



        */
        // Min diff between target and potential sum
        int diff = Integer.MAX_VALUE;
        // sum of the triplet
        int ans = 0;
        // Sorting Array
        Arrays.sort(nums);
        // This will help us to increase or decrease the sum
        // to approach closer to the target
        // You will understand this once you read the below code.
        // Step 1. Select the first pivot x
        for (int i = 0; i < nums.length - 2; i++) {
            // Select y
            int j = i + 1;
            // Select z
            int k = nums.length - 1;
            while (j < k) {
                // Min Diff btw target and the sum
                // if the diff is greater than the curr diff we found
                // we need to update it
                if (// target - (x + y + z)
                diff > Math.abs(target - (nums[i] + nums[j] + nums[k]))) {
                    diff = Math.abs(target - (nums[i] + nums[j] + nums[k]));
                    ans = nums[i] + nums[j] + nums[k];
                }
                if (// if target is greater than we need bigger sum
                target > nums[i] + nums[j] + nums[k])
                    // if target is greater than we need bigger sum
                    j++;
                else
                    // or else smalller sum
                    k--;
            }
        }
        return ans;
    }
}
