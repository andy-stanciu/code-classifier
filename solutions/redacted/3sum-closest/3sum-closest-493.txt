class Solution {

    public int method1(int[] arr, int target) {
        int n = arr.length;
        // Variable to store the closest sum to the target found so far
        int var1 = 100000;
        // Sort the input array in ascending order to optimize the search
        Arrays.sort(arr);
        // Loop through the elements from the start to the third last element
        for (int k = 0; k <= n - 3; k++) {
            // Pointer i points to the element just after the fixed element (arr[k])
            int i = k + 1;
            // Pointer j points to the last element of the array (arr[n-1])
            int j = n - 1;
            // Find other two elements to form a triplet with the fixed element
            while (i < j) {
                // Calculate the sum of the three elements
                int sum = arr[k] + arr[i] + arr[j];
                // Update closestSum if the current sum is closer to the target than the previously found closestSum
                if (Math.abs(target - sum) < Math.abs(target - var1)) {
                    var1 = sum;
                }
                // Move the pointers i and j closer to each other based on the sum\'s relation to the target
                if (sum < target) {
                    // If the sum is less than the target, move i pointer to the right to increase the sum
                    i++;
                } else {
                    // If the sum is greater than the target, move j pointer to the left to decrease the sum
                    j--;
                }
            }
        }
        // Return the closest sum found to the target among all possible triplets
        return var1;
    }
}
