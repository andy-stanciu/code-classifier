class Solution {

    public int method1(int[] nums, int target) {
        int var1 = Integer.MAX_VALUE, var2 = Integer.MAX_VALUE, i, j, k;
        // nlog(n)
        Arrays.sort(nums);
        for (i = 0; i < nums.length - 2; i++) {
            // O(n)
            j = i + 1;
            k = nums.length - 1;
            while (j < k) {
                // O(n)
                int sum = nums[i] + nums[j] + nums[k];
                if (sum == target) {
                    return target;
                } else if (sum < target) {
                    j++;
                } else {
                    k--;
                }
                // Updating closestSum according to closest
                int close = Math.abs(sum - target);
                if (close < var1) {
                    var1 = close;
                    var2 = sum;
                }
            }
        }
        return var2;
    }
}
// Optimized 2 Pointer Code
// Time Complexity : O(nlog(n) + n^2)
// Space Complexity : O(1)
