class Solution {

    public int method1(int[] nums, int target) {
        // Primeiro, ordenamos o array para facilitar o uso dos dois ponteiros
        Arrays.sort(nums);
        // Inicializamos a soma mais pr\xF3xima com um valor arbitr\xE1rio (primeira soma poss\xEDvel)
        int var1 = nums[0] + nums[1] + nums[2];
        // Percorremos o array, fixando um n\xFAmero e aplicando dois ponteiros para os outros dois n\xFAmeros
        for (int i = 0; i < nums.length - 2; i++) {
            // Ponteiro \xE0 esquerda do n\xFAmero fixo
            int left = i + 1;
            // Ponteiro \xE0 direita (\xFAltimo elemento)
            int right = nums.length - 1;
            // Enquanto os dois ponteiros n\xE3o se cruzam
            while (left < right) {
                // Calculamos a soma dos tr\xEAs n\xFAmeros
                int currentSum = nums[i] + nums[left] + nums[right];
                // Se a soma atual for exatamente igual ao target, retornamos essa soma
                if (currentSum == target) {
                    return currentSum;
                }
                // Se a soma atual estiver mais pr\xF3xima do target, atualizamos a soma mais pr\xF3xima
                if (Math.abs(currentSum - target) < Math.abs(var1 - target)) {
                    var1 = currentSum;
                }
                // Ajustamos os ponteiros com base no valor da soma
                if (currentSum < target) {
                    // Precisamos de uma soma maior, ent\xE3o movemos o ponteiro esquerdo para a direita
                    left++;
                } else {
                    // Precisamos de uma soma menor, ent\xE3o movemos o ponteiro direito para a esquerda
                    right--;
                }
            }
        }
        // Retornamos a soma mais pr\xF3xima encontrada
        return var1;
    }
}
