class Solution {

    public int method1(int[] nums, int target) {
        // Sort the array to enable two-pointer technique
        Arrays.sort(nums);
        // Initialize the difference as a large number and the answer variable
        int diff = Integer.MAX_VALUE;
        int ans = 0;
        int j, k;
        // Iterate through the array, fixing one element and using two pointers for the other two elements
        for (int i = 0; i < nums.length - 2; i++) {
            // Set the second pointer just after the fixed element
            j = i + 1;
            // Set the third pointer at the end of the array
            k = nums.length - 1;
            while (j < k) {
                // Calculate the sum of the three elements
                int sum = nums[i] + nums[j] + nums[k];
                // Calculate the difference from the target
                int res = target - sum;
                // If the current sum is closer to the target, update the answer and the difference
                if (Math.abs(res) < diff) {
                    ans = sum;
                    diff = Math.abs(res);
                }
                // Move the pointers based on the comparison of sum with the target
                if (// Decrease the sum by moving the third pointer to the left
                sum > target)
                    // Decrease the sum by moving the third pointer to the left
                    k--;
                else if (// Increase the sum by moving the second pointer to the right
                sum < target)
                    // Increase the sum by moving the second pointer to the right
                    j++;
                else
                    // If the sum is exactly the target, return it
                    return sum;
            }
        }
        // Return the closest sum found
        return ans;
    }
}
