class Solution {

    // Helper method to check if starting from station i, we can complete the circuit
    boolean canSolve(int i, int[] param1, int[] cost) {
        // Initialize the starting point
        int maxStart = i;
        // Initialize fuel available
        int fuel = 0;
        // Length of the gas/cost arrays
        int n = cost.length;
        do {
            // Adding gas at station i (wrap around if needed)
            fuel += param1[i % (n)];
            if (fuel < cost[i % n]) {
                // Check if fuel is insufficient to reach station i
                // If so, return false
                return false;
            }
            // Deduct the cost of travel from station i
            fuel -= cost[i % n];
            // Move to the next station (wrap around if needed)
            i = (i + 1) % n;
        } while (// Continue until we return to the starting point
        i != maxStart);
        // If we can complete the circuit, return true
        return true;
    }

    // Main method to find the starting station to complete the circuit
    public int canCompleteCircuit(int[] param1, int[] cost) {
        // Total gas available
        int var1 = 0;
        // Total cost of travel
        int totalCost = 0;
        // Loop through the stations
        for (int i = 0; i < param1.length; i++) {
            // Accumulate total gas
            var1 += param1[i];
            // Accumulate total cost
            totalCost += cost[i];
        }
        // If  total gas < total cost, return -1
        if (var1 < totalCost) {
            return -1;
        }
        // Create a 2D array to store gas, cost, and station index
        int[][] arr = new int[param1.length][3];
        // Populate the array with gas, cost, and station index
        for (int i = 0; i < arr.length; i++) {
            arr[i][0] = param1[i];
            arr[i][1] = cost[i];
            arr[i][2] = i;
        }
        // Sort the array based on the difference between gas and cost
        Arrays.sort(arr, (a, b) -> {
            if (a[0] - a[1] == b[0] - b[1]) {
                return a[1] - b[1];
            } else {
                return (b[0] - b[1]) - (a[0] - a[1]);
            }
        });
        // Iterate through the sorted array
        for (int[] row : arr) {
            // If starting from the current station, we can complete the circuit, return the station index
            if (canSolve(row[2], param1, cost) == true) {
                return row[2];
            }
        }
        // If no solution is found, return -1
        return -1;
    }
}
