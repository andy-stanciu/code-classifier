class Solution {

    public int canCompleteCircuit(int[] param1, int[] cost) {
        Deque<Integer> stack = new ArrayDeque<>();
        int n = param1.length;
        for (int i = 0; i < n; i++) {
            if (param1[i] - cost[i] >= 0) {
                stack.push(i);
            }
        }
        // Now checking for all points
        while (stack.size() > 0) {
            int index = stack.pop();
            if (check(param1, cost, index, n)) {
                return index;
            }
        }
        return -1;
    }

    public boolean check(int[] param1, int[] cost, int index, int n) {
        boolean flag = true;
        int size = 0;
        int ptr = index;
        int sum = 0;
        while (size < n) {
            sum += param1[ptr % n] - cost[ptr % n];
            if (sum < 0) {
                return false;
            }
            ptr++;
            size++;
        }
        if (size == n && sum >= 0)
            return true;
        return false;
    }
}
