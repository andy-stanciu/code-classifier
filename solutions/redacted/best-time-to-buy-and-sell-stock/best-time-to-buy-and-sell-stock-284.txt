// public class Solution {
//     public int maxProfit(int[] prices) {
//         int minPrice = Integer.MAX_VALUE; // buying
//         int maxProfit = 0;
//         for(int i = 0; i < prices.length; i++) {
//             if(prices[i] < minPrice) {
//                 minPrice = prices[i]; // buying at the lowest price using traversal
//             }
//             else if(prices[i] - minPrice > maxProfit) {
//                 maxProfit = prices[i] - minPrice;
//             }
//         }
//         return maxProfit;
//     }
// }
public class Solution {

    public int maxProfit(int[] prices) {
        // Initialize minPrice to a very high value
        int minPrice = Integer.MAX_VALUE;
        // Initialize maxProfit to 0
        int maxProfit = 0;
        // Loop through each price in the array
        for (int i = 0; i < prices.length; i++) {
            // Update the minPrice if a lower price is found
            if (prices[i] < minPrice) {
                minPrice = prices[i];
            }
            // Calculate the current profit by selling at prices[i]
            int currentProfit = prices[i] - minPrice;
            // Update the maxProfit if currentProfit is higher than previous maxProfit
            if (currentProfit > maxProfit) {
                maxProfit = currentProfit;
            }
        }
        return maxProfit;
    }
}
