// Time - O(n) Space - O(1)
class Solution {

    public int maxProfit(int[] prices) {
        if (prices == null || prices.length == 0)
            return 0;
        return getMaxProfit(prices, 0, Integer.MAX_VALUE, 0);
    }

    public int getMaxProfit(int[] prices, int index, int param1, int maxDiff) {
        if (prices.length == index) {
            return maxDiff;
        }
        int earn = prices[index] - param1;
        maxDiff = Math.max(earn, maxDiff);
        param1 = Math.min(param1, prices[index]);
        return getMaxProfit(prices, ++index, param1, maxDiff);
    }
}

// Time - O(n) Space - O(1)
class Solution {

    public int maxProfit(int[] prices) {
        if (prices == null || prices.length == 0)
            return 0;
        return getMaxProfit(prices);
    }

    public int getMaxProfit(int[] prices) {
        int param1 = Integer.MAX_VALUE, maxDiff = 0;
        for (int i = 0; i < prices.length; i++) {
            int earn = prices[i] - param1;
            maxDiff = Math.max(earn, maxDiff);
            param1 = Math.min(param1, prices[i]);
        }
        return maxDiff;
    }
}
