class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        // List to store the quadruplets that sum to the target
        List<List<Integer>> results = new ArrayList<>();
        // Sort the array to make it easier to handle duplicates and use the two-pointer technique
        Arrays.sort(nums);
        // Outer loop: Iterate through the array with the first pointer \'i\'
        for (int i = 0; i < nums.length - 3; i++) {
            // Skip duplicate elements for the first number in the quadruplet
            while ((i > 0 && i < nums.length - 3) && nums[i] == nums[i - 1]) i++;
            // Second loop: Iterate with the second pointer \'j\' starting from \'i+1\'
            for (int j = i + 1; j < nums.length - 2; j++) {
                // Skip duplicate elements for the second number in the quadruplet
                while ((j != i + 1 && j < nums.length - 2) && nums[j] == nums[j - 1]) j++;
                // Third pointer starts from the next element after \'j\'
                int left = j + 1;
                // Fourth pointer starts from the end of the array
                int right = nums.length - 1;
                // Use two-pointer technique to find remaining two numbers
                while (left < right) {
                    // Initialize sum with the first number
                    long sum = nums[i];
                    // Add the second number
                    sum += nums[j];
                    // Add the third number
                    sum += nums[left];
                    // Add the fourth number
                    sum += nums[right];
                    // Check if the current sum matches the target
                    if (sum == target) {
                        // List to store the current quadruplet
                        List<Integer> result = new ArrayList<>();
                        result.add(nums[i]);
                        result.add(nums[j]);
                        result.add(nums[left]);
                        result.add(nums[right]);
                        // Add the quadruplet to the results list
                        results.add(result);
                        // Move the left pointer to the right to look for other combinations
                        left++;
                        // Move the right pointer to the left to look for other combinations
                        right--;
                        // Skip duplicate elements for the third number
                        while (left < right && nums[left] == nums[left - 1]) left++;
                        // Skip duplicate elements for the fourth number
                        while (left < right && nums[right] == nums[right + 1]) right--;
                    } else // If the sum is less than the target, move the left pointer to increase the sum
                    if (sum < target)
                        left++;
                    else // If the sum is greater than the target, move the right pointer to decrease the sum
                    if (sum > target)
                        right--;
                }
            }
        }
        // Return the list of all quadruplets that sum to the target
        return results;
    }
}
