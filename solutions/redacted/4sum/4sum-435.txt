class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> answer = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (i > 0 && nums[i - 1] == nums[i])
                continue;
            double newTarget = (double) target - (double) nums[i];
            List<List<Integer>> threeSums = threeSum(nums, i + 1, newTarget);
            if (threeSums.size() > 0) {
                for (List<Integer> three : threeSums) {
                    List<Integer> four = new ArrayList<>();
                    four.add(nums[i]);
                    four.addAll(three);
                    answer.add(four);
                }
            }
        }
        return answer;
    }

    public List<List<Integer>> threeSum(int[] nums, int index, double target) {
        List<List<Integer>> answer = new ArrayList<>();
        for (int i = index; i < nums.length; i++) {
            //skip
            if (i > index && nums[i - 1] == nums[i])
                continue;
            int left = i + 1, right = nums.length - 1;
            while (left < right) {
                double sum = (double) nums[i] + (double) nums[left] + (double) nums[right];
                if (sum > target) {
                    right--;
                } else if (sum < target) {
                    left++;
                } else {
                    answer.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    left++;
                    while (left < right && nums[left - 1] == nums[left]) left++;
                }
            }
        }
        return answer;
    }
}
