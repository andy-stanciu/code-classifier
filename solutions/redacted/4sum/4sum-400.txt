class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        Set<List<Integer>> ans = new HashSet<>();
        HashMap<Integer, Integer> map = new HashMap<>();
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < nums.length; i++) {
            map.put(nums[i], i);
            min = Math.min(nums[i], min);
            max = Math.max(nums[i], max);
        }
        if ((min > target / 4 || max < target / 4))
            return new ArrayList();
        int n = nums.length;
        for (int i = 0; i < n - 3; i++) {
            for (int j = i + 1; j < n - 2; j++) {
                for (int k = j + 1; k < n - 1; k++) {
                    long sum = (long) nums[i] + (long) nums[j] + (long) nums[k];
                    if (sum > Integer.MAX_VALUE || sum < Integer.MIN_VALUE)
                        continue;
                    long test = (long) target - (long) sum;
                    if (test > Integer.MAX_VALUE || test < Integer.MIN_VALUE)
                        continue;
                    int r = target - (int) sum;
                    if (map.containsKey(r) && map.get(r) > k) {
                        List<Integer> curr = new ArrayList(List.of(nums[i], nums[j], nums[k], r));
                        Collections.sort(curr);
                        ans.add(curr);
                    }
                }
            }
        }
        return new ArrayList(ans);
    }
}
