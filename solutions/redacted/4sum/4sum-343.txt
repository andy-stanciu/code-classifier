class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        if (nums == null || nums.length < 4) {
            return new LinkedList<>();
        }
        Arrays.sort(nums);
        List<List<Integer>> ans = new LinkedList<>();
        for (int i = 0; i < nums.length - 3; i++) {
            // Avoid duplicates for the first num
            if (i > 0 && nums[i - 1] == nums[i])
                continue;
            for (int j = i + 1; j < nums.length - 2; j++) {
                // Avoid duplicates for the second num
                if (j > i + 1 && nums[j - 1] == nums[j])
                    continue;
                // Set pointers
                int left = j + 1;
                int right = nums.length - 1;
                while (left < right) {
                    // Cast to long to handle overflow
                    long sum = (long) nums[i] + (long) nums[j] + (long) nums[left] + (long) nums[right];
                    if (sum < target) {
                        left++;
                    } else if (sum > target) {
                        right--;
                    } else {
                        // sum == target
                        ans.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));
                        // Avoid duplicates for the third num
                        while (left < right && nums[left] == nums[left + 1]) left++;
                        // Avoid duplicates for the fourth num
                        while (left < right && nums[right - 1] == nums[right]) right--;
                        left++;
                        right--;
                    }
                }
            }
        }
        return ans;
    }
}
