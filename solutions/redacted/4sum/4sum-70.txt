class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        int sum = 0;
        for (int i = 0; i < nums.length - 3; i++) {
            if (i != 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            for (int j = i + 1; j < nums.length - 2; j++) {
                if (j != i + 1 && nums[j] == nums[j - 1]) {
                    continue;
                }
                int m = j + 1;
                int n = nums.length - 1;
                sum = target - (nums[i] + nums[j]);
                while (m < n) {
                    if (nums[m] + nums[n] == sum) {
                        // why do we need this condition:
                        // we need to prevent the integer overflow.
                        // how do we detect it?
                        // we know that nums[i] is the smallest element in the 4sum
                        // if nums[i] > 0, and the array is sorted, the sum can only be positive.
                        // at the same time, we know nums[n] is the largest element
                        // if nums[n] < 0, it is impossible for us to get a positive sum.
                        if ((nums[i] > 0 && target < 0) || (nums[n] < 0 && target > 0)) {
                            break;
                        }
                        ans.add(new ArrayList<Integer>(Arrays.asList(nums[i], nums[j], nums[m], nums[n])));
                        while (m < n && nums[m] + nums[n] == sum) {
                            m++;
                        }
                    } else {
                        if (nums[m] + nums[n] < sum) {
                            m++;
                        } else {
                            n--;
                        }
                    }
                }
            }
        }
        return ans;
    }
}
