class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        int n = nums.length;
        for (int n1 = 0; n1 < n; ) {
            for (int n2 = n1 + 1; n2 < n; ) {
                long tar = (long) target - (long) nums[n1] - (long) nums[n2];
                int st = n2 + 1, end = n - 1;
                while (st < end) {
                    if ((long) ((long) nums[st] + (long) nums[end]) == tar) {
                        res.add(new ArrayList<>(Arrays.asList(nums[n1], nums[n2], nums[st], nums[end])));
                        st++;
                        while (st < end && (nums[st] == nums[st - 1])) st++;
                        end--;
                        while (end > st && (nums[end] == nums[end + 1])) end--;
                    } else if ((nums[st] + nums[end]) < tar) {
                        st++;
                        while (st < end && (nums[st] == nums[st - 1])) st++;
                    } else {
                        end--;
                        while (end > st && (nums[end] == nums[end + 1])) end--;
                    }
                }
                n2++;
                while (n2 < n && (nums[n2] == nums[n2 - 1])) n2++;
            }
            n1++;
            while (n1 < n && (nums[n1] == nums[n1 - 1])) n1++;
        }
        return res;
    }
}
