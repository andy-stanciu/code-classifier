class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        /* NAIVE SOLUTION */
        // int n = nums.length;
        // Set<List<Integer>> set = new HashSet<>();
        // for(int i=0; i<n; i++){
        //     for(int j=i+1; j<n; j++){
        //         for(int k=j+1; k<n; k++){
        //             for(int l=k+1; l<n; l++){
        //                 List<Integer> lis = new ArrayList<>();
        //                 int sum = nums[i] + nums[j] + nums[k] + nums[l];
        //                 if(sum == target){
        //                     lis.add(nums[i]);
        //                     lis.add(nums[j]);
        //                     lis.add(nums[k]);
        //                     lis.add(nums[l]);
        //                     Collections.sort(lis);
        //                     set.add(lis);
        //                 }
        //             }
        //         }
        //     }
        // }
        // List<List<Integer>> res = new ArrayList<>(set);
        // return res;
        /* OPTIMAL SOLUTION */
        Arrays.sort(nums);
        int n = nums.length;
        List<List<Integer>> res = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (i > 0 && nums[i] == nums[i - 1])
                continue;
            for (int j = i + 1; j < n; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1])
                    continue;
                int k = j + 1;
                int l = n - 1;
                while (k < l) {
                    long sum = (long) nums[i] + nums[j] + nums[k] + nums[l];
                    if (sum > target) {
                        l--;
                    } else if (sum < target) {
                        k++;
                    } else {
                        res.add(Arrays.asList(nums[i], nums[j], nums[k], nums[l]));
                        k++;
                        l--;
                        while (k < l && nums[k] == nums[k - 1]) k++;
                        while (k < l && nums[l] == nums[l + 1]) l--;
                    }
                }
            }
        }
        return res;
    }
}
