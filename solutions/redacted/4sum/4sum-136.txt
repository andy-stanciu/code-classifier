class Solution {

    List<List<Integer>> ans = new ArrayList<>();

    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        int start = 0;
        int end = nums.length - 1;
        for (int i = 0; i < nums.length; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            for (int j = nums.length - 1; j > i; j--) {
                if (j < nums.length - 1 && nums[j] == nums[j + 1]) {
                    continue;
                }
                possible(nums, i + 1, j - 1, target);
            }
        }
        return ans;
    }

    public void possible(int[] nums, int i, int j, int target) {
        // long tar=(long)(target-nums[i-1]-nums[j+1]);
        int a = nums[i - 1];
        int b = nums[j + 1];
        while (i < j) {
            // long sum1=(long)(nums[i]+nums[j]);
            if (a + b + nums[i] + nums[j] == target && !((a < 0 && b < 0 && nums[i] < 0 && nums[j] < 0 && target > 0) || (a > 0 && b > 0 && nums[i] > 0 && nums[j] > 0 && target < 0))) {
                List<Integer> t = new ArrayList<>();
                t.add(a);
                t.add(nums[i]);
                t.add(nums[j]);
                t.add(b);
                if (!ans.contains(t)) {
                    ans.add(t);
                }
                i++;
                j--;
                while (i < j && nums[i] == nums[i - 1]) {
                    i++;
                }
                while (i < j && nums[j + 1] == nums[j]) {
                    j--;
                }
            } else if (a + b + nums[i] + nums[j] < target) {
                i++;
            } else {
                j--;
            }
        }
        return;
    }
}
//     if(nums.length>=4 && nums[0]==nums[nums.length-1] && 4*(double)nums[0]==(double)target){
//         List<Integer> tmp = new ArrayList<>();
//         tmp.add(nums[0]);
//         tmp.add(nums[1]);
//         tmp.add(nums[2]);
//         tmp.add(nums[3]);
//         ans.add(tmp);
//         return ans;
//     }
//     int s=0;
//     int e=nums.length-1;
//     while(s<e){
//         twoSum(s,e,nums,target);
//         if(s<e-1){
//             s++;
//         }
//         else{
//             s=0;
//             e--;
//         }
//     }
//     return ans;
// }
// public void twoSum(int s, int e,int[] nums, int target){
//     int start = s+1;
//     int end = e-1;
//     while(end>start){
//         if((double)nums[s]+(double)nums[e]+(double)nums[start]+(double)nums[end]==(double)target){
//             List<Integer> tmp = new ArrayList<>();
//             tmp.add(nums[s]);
//             tmp.add(nums[start]);
//             tmp.add(nums[end]);
//             tmp.add(nums[e]);
//             if(!ans.contains(tmp)){
//                 ans.add(tmp);
//             }
//         }
//         if(start<end-1){
//             start++;
//         }
//         else{
//             start=s+1;
//             end--;
//         }
//     }
//     }
// }
