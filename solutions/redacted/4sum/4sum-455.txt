class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        // HashSet<List<Integer>> set = new HashSet<>();
        // for (int i = 0; i < nums.length; i++) {
        //     for (int j = i+1; j < nums.length; j++) {
        //         for (int j2 = j+1; j2 < nums.length; j2++) {
        //             int sum=0;
        //             for (int k = j2+1; k < nums.length; k++) {
        //             if(nums[i]+ nums[j]+nums[j2]+nums[k]== target){
        //              List<Integer> temp = Arrays.asList(nums[i], nums[j2], nums[j], nums[k]);
        //              temp.sort(null);
        //              set.add(temp);}
        //             }
        //         }
        //     }
        // }
        //   List<List<Integer>> ans = new ArrayList<>(set);
        //         return ans;
        // HashSet<List<Integer>> set = new HashSet<>();
        // for (int i = 0; i < nums.length; i++) {
        //     for (int j = i+1; j < nums.length; j++) {
        //  HashSet<Long> BetweenSet = new HashSet<>();
        //         for (int j2 = j+1; j2 < nums.length; j2++) {
        //             long sum= nums[i]+ nums[j];
        //             sum+= nums[j2];
        //  long fourth = target- sum;
        //             if(BetweenSet.contains(fourth)){
        //              List<Integer> temp = new ArrayList<>();
        //              temp.add(nums[i]);
        //                         temp.add(nums[j]);
        //                         temp.add(nums[j2]);
        //                         temp.add((int) fourth);
        //                         temp.sort(Integer::compareTo);
        //                         set.add(temp);}
        // BetweenSet.add((long)nums[j2]);}
        //         }
        //     }
        //   List<List<Integer>> ans = new ArrayList<>(set);
        //         return ans;
        List<List<Integer>> ans = new ArrayList<>();
        int n = nums.length;
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[j] == nums[j - 1] && j > i + 1) {
                    continue;
                }
                int k = j + 1;
                int l = n - 1;
                while (k < l) {
                    long sum = nums[i] + nums[j];
                    sum += nums[k];
                    sum += nums[l];
                    if (sum == target) {
                        List<Integer> temp = new ArrayList<>();
                        temp.add(nums[i]);
                        temp.add(nums[j]);
                        temp.add(nums[k]);
                        temp.add(nums[l]);
                        ans.add(temp);
                        k++;
                        l--;
                        while (k < l && nums[k] == nums[k - 1]) {
                            k++;
                        }
                        while (k < l && nums[l] == nums[l + 1]) {
                            l--;
                        }
                    } else if (sum > target) {
                        l--;
                    } else {
                        k++;
                    }
                }
            }
        }
        return ans;
    }
}
