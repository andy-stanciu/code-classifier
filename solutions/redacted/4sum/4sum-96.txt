// BRUTE FORCE APPROACH
// class Solution {
//     public List<List<Integer>> fourSum(int[] nums, int target) {
//         List<List<Integer>> result = new ArrayList<>();
//         int n = nums.length;
//         for(int i=0; i<n; i++){
//             for(int j=i+1; j<n; j++){
//                 for(int k=j+1; k<n; k++){
//                     for(int l=k+1; l<n; l++){
//                     if(nums[i] + nums[j] + nums[k] + nums[l] == target){
//                         List<Integer> quadruplets = Arrays.asList(nums[i], nums[j], nums[k], nums[l]);
//                         Collections.sort(quadruplets);
//                         if(!result.contains(quadruplets)){
//                             result.add(quadruplets);
//                         }
//                     }
//                 }
//                 }
//             }
//         }
//         return result;
//     }
// }
//BETTER APPROACH
// class Solution {
//     public List<List<Integer>> fourSum(int[] nums, int target) {
//         int n = nums.length;
//         Set<List<Integer>> set = new HashSet<>();
//         for(int i=0; i<n; i++){
//             for(int j= i+1; j<n; j++){
//                 Set<Integer> hashSet = new HashSet<>();
//                 for(int k= j+1; k<n; k++){
//                 //Calculate the 3rd element:
//                 int sum = nums[i] + nums[j] + nums[k];
//                 int fourth = target - sum;
//                 //Find the element in the set:
//                 if (hashSet.contains(fourth)) {
//                     List<Integer> temp = Arrays.asList(nums[i], nums[j], nums[k], fourth);
//                     temp.sort(null); //used to sort a list based on the natural ordering of the elements.Passing null to the sort() method tells the method to use the natural comparator of the elements
//                     set.add(temp);
//                 }
//                 hashSet.add(nums[k]);
//             }
//         }
//     }
//         // store the set elements in the answer:
//         List<List<Integer>> ans = new ArrayList<>(set);
//         return ans;
//     }
// }
//OPTIMIZED APPROACH
class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> result = new ArrayList<>();
        int n = nums.length;
        if (n < 4)
            return result;
        Arrays.sort(nums);
        for (int i = 0; i < n - 3; i++) {
            // Avoid duplicates for i
            if (i > 0 && nums[i] == nums[i - 1])
                continue;
            for (int j = i + 1; j < n - 2; j++) {
                // Avoid duplicates for j
                if (j > i + 1 && nums[j] == nums[j - 1])
                    continue;
                int k = j + 1;
                int l = n - 1;
                while (k < l) {
                    // Use long to avoid overflow
                    long sum = (long) nums[i] + nums[j] + nums[k] + nums[l];
                    if (sum == target) {
                        result.add(Arrays.asList(nums[i], nums[j], nums[k], nums[l]));
                        k++;
                        l--;
                        // Avoid duplicates for k and l
                        while (k < l && nums[k] == nums[k - 1]) k++;
                        while (k < l && nums[l] == nums[l + 1]) l--;
                    } else if (sum < target) {
                        k++;
                    } else {
                        l--;
                    }
                }
            }
        }
        return result;
    }
}
