class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        // Create a list which stores list list of unique quadruplets
        ArrayList<List<Integer>> ans = new ArrayList<>();
        // Sort an Array
        Arrays.sort(nums);
        // Set variable i equals to 0 which will go to length-3
        for (int i = 0; i < nums.length - 3; i++) {
            // Here we are checking for duplicates,if duplicates occurs then we sill simply continue process
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            // set another variable to i+1 which will go yo length-2
            for (int j = i + 1; j < nums.length - 2; j++) {
                // Here also we are checking for duplicates for variable j
                if (j > i + 1 && nums[j] == nums[j - 1]) {
                    continue;
                }
                // Set pointer to j+1
                int k = j + 1;
                // Set another pointer at length-1
                int l = nums.length - 1;
                while (k < l) {
                    // We are storing sum of four pointers in sum variable and we are taking sum as long because it will be efficient if the size of digits in input long
                    long sum = (long) nums[i] + nums[j] + nums[k] + nums[l];
                    // if sum==target let\'s store pointers at ans list
                    if (sum == target) {
                        ans.add(Arrays.asList(nums[i], nums[j], nums[k], nums[l]));
                        // check for duplicates for both of the two pointers
                        while (k < l && nums[k] == nums[k + 1]) {
                            k++;
                        }
                        while (k < l && nums[l] == nums[l - 1]) {
                            l--;
                        }
                        k++;
                        l--;
                    } else // If sum>target then simply decrement l otherwise increment k
                    if (sum > target) {
                        l--;
                    } else {
                        k++;
                    }
                }
            }
        }
        // return ans
        return ans;
    }
}
