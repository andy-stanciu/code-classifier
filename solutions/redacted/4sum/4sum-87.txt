class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> result = new ArrayList<>();
        // Sort the array to handle duplicates and use the two-pointer technique
        Arrays.sort(nums);
        // Outer loops to fix the first two elements of the quadruplet
        for (int i = 0; i < nums.length - 3; i++) {
            // Skip duplicate elements for i
            if (i > 0 && nums[i] == nums[i - 1])
                continue;
            for (int j = i + 1; j < nums.length - 2; j++) {
                // Skip duplicate elements for j
                if (j > i + 1 && nums[j] == nums[j - 1])
                    continue;
                // Define the new target for the remaining two numbers
                long newTarget = (long) target - nums[i] - nums[j];
                // Two-pointer approach for the remaining elements
                int left = j + 1;
                int right = nums.length - 1;
                while (left < right) {
                    long sum = (long) nums[left] + nums[right];
                    if (sum == newTarget) {
                        // Add quadruplet to result
                        result.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));
                        // Skip duplicates for left and right
                        while (left < right && nums[left] == nums[left + 1]) left++;
                        while (left < right && nums[right] == nums[right - 1]) right--;
                        // Move pointers after finding a valid pair
                        left++;
                        right--;
                    } else if (sum < newTarget) {
                        left++;
                    } else {
                        right--;
                    }
                }
            }
        }
        return result;
    }
}
