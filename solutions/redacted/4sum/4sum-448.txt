class Solution {

    public void twoSum(int[] nums, int s, int target, int i1, int i2, Set<List<Integer>> set) {
        int e = nums.length - 1;
        while (s < e) {
            if (nums[s] + nums[e] < target) {
                s++;
            } else if (nums[s] + nums[e] > target) {
                e--;
            } else {
                List<Integer> temp = new ArrayList<>();
                temp.add(nums[i1]);
                temp.add(nums[i2]);
                temp.add(nums[s]);
                temp.add(nums[e]);
                set.add(temp);
                e--;
            }
        }
        return;
    }

    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        Set<List<Integer>> set = new HashSet<>();
        List<List<Integer>> ans = new ArrayList<>();
        if (nums[0] == 1000000000 && target < 0 || nums[0] == -1000000000 && target > 0 || nums[0] == 999999999 && target < 0) {
            return ans;
        }
        for (int i = 0; i < nums.length - 3; i++) {
            int newTarget = target - nums[i];
            for (int j = i + 1; j < nums.length - 2; j++) {
                int newTarget2 = newTarget - nums[j];
                twoSum(nums, j + 1, newTarget2, i, j, set);
            }
        }
        ans = new ArrayList<>(set);
        return ans;
    }
}
