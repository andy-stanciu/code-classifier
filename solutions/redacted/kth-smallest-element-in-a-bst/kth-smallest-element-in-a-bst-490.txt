/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int cnt = 0;

    int ans = 0;

    public int method1(TreeNode root, int k) {
        // As we know INORDER traversal of BST given sorted array;
        // so while doing inorder traversal (L D R)
        // inorder(root,k);
        // return ans;
        return method2(root, k);
    }

    // public void inorder(TreeNode root, int k){
    //     if(root  == null) return;
    //     inorder(root.left,k);
    //     cnt++;
    //     if(cnt == k) {
    //         ans = root.val;
    //         return;
    //     }
    //     inorder(root.right,k);
    // }
    public int method2(TreeNode root, int k) {
        TreeNode curr = root;
        while (curr != null) {
            if (curr.left == null) {
                cnt++;
                if (cnt == k) {
                    return curr.val;
                }
                curr = curr.right;
            } else {
                TreeNode temp = curr.left;
                while (temp.right != null && temp.right != curr) {
                    temp = temp.right;
                }
                if (temp.right == null) {
                    temp.right = curr;
                    curr = curr.left;
                } else {
                    temp.right = null;
                    cnt++;
                    if (cnt == k) {
                        return curr.val;
                    }
                    curr = curr.right;
                }
            }
        }
        return 0;
    }
}
