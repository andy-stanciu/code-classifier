class Solution {

    public int method1(TreeNode root, int k) {
        // Create a list to store the values of the tree nodes
        List<Integer> arr = new ArrayList<>();
        // Traverse the tree to populate the list
        dfs(root, arr);
        // Sort the list in ascending order
        arr.sort((a, b) -> a - b);
        // If k is 0, return the smallest element in the list
        if (k == 0) {
            return arr.get(0);
        }
        // Return the kth smallest element from the sorted list
        return arr.get(k - 1);
    }

    // Depth First Search (DFS) function to traverse the tree
    private void dfs(TreeNode root, List<Integer> arr) {
        // Base case: If the root is null, return
        if (root == null) {
            return;
        }
        // Add the value of the current node to the list
        arr.add(root.val);
        // Recursively traverse the left subtree
        dfs(root.left, arr);
        // Recursively traverse the right subtree
        dfs(root.right, arr);
    }
}
