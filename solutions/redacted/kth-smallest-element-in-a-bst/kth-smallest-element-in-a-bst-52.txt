/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int method1(TreeNode root, int k) {
        //Approach: using extra space, T.C: O(n), S.C: O(n)
        //Idea: We know, inorder traversal in a binary search tree gives a sorted list
        //so, we can add the values in a ArrayList, then we can get the value by index
        //initialize a ArrayList
        ArrayList<Integer> res = new ArrayList<>();
        //call inOrder function
        method2(root, res);
        //k-1 because, in question it was mentioned that 1-indexed, but ArrayList is 0 indexed
        return res.get(k - 1);
    }

    public void method2(TreeNode root, List<Integer> res) {
        if (root == null)
            return;
        method2(root.left, res);
        res.add(root.val);
        method2(root.right, res);
    }
}
