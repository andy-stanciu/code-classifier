/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    private void method1(TreeNode root, List<Integer> list) {
        if (root == null) {
            return;
        }
        method1(root.left, list);
        list.add(root.val);
        method1(root.right, list);
    }

    public int method2(TreeNode root, int k) {
        if (root == null) {
            return 0;
        }
        List<Integer> list = new ArrayList<>();
        method1(root, list);
        int ans = 0;
        for (int i = 0; i < list.size(); i++) {
            if (i == k - 1) {
                ans = list.get(i);
                break;
            }
        }
        return ans;
    }
}
/*

                3
               /  \\  
              1    4
               \\ 
                2


We can do inorder 

We will get the sorted arr 

We go till k and return the elem
*/
