class Solution {

    // declare two variable count and ans
    int count = 0;

    int ans = 0;

    // Find Kth Element Function
    public void method1(TreeNode root, int k) {
        // if, root left is not null
        // recursive call for left subtree
        if (root.left != null) {
            method1(root.left, k);
        }
        // Each left subtree iteration increase the count by one
        // if, count is equal to k,
        // then add the value of node in variable ans, then return
        count++;
        if (count == k) {
            ans = root.val;
            return;
        }
        // if, root right is not null
        // recursive call for right subtree
        if (root.right != null) {
            method1(root.right, k);
        }
    }

    // Kth Smallest Element Function
    public int method2(TreeNode root, int k) {
        // call findKthElement Function
        method1(root, k);
        // return ans
        return ans;
    }
}
// Output -
/*
Input: root = [3,1,4,null,2], k = 1
Output: 1
*/
// Time & Space Complexity -
/*
Time - O(n)
Space - O(n) , because of recursive stack
*/
