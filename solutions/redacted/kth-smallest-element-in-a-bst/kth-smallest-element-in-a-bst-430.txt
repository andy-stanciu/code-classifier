/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    // Stack pointer
    private int k = 0;

    public int method1(TreeNode root, int k) {
        // Traverse binary tree, in-order, and stop at kth element
        this.k = k;
        TreeNode var1 = method2(root);
        // 1 <= k <= n <= 10^4
        return var1.val;
    }

    private TreeNode method2(TreeNode node) {
        if (node.left != null) {
            TreeNode leftNode = method2(node.left);
            if (leftNode != null) {
                return leftNode;
            }
        }
        k--;
        if (k == 0) {
            return node;
        }
        if (node.right != null) {
            return method2(node.right);
        }
        return null;
    }
}
