// class Solution {
//     public void inorderTraversal(TreeNode root ,List<Integer> ans){
//         if(root == null)
//             return ;
//         inorderTraversal(root.left,ans);
//         ans.add(root.val);
//         inorderTraversal(root.right,ans);
//     }
//     public int kthSmallest(TreeNode root, int k) {
//         List<Integer> ans = new ArrayList<>();
//         inorderTraversal(root,ans);
//         return ans.get(k-1);
//     }
// }
class Solution {

    int ans = 0;

    int count = 0;

    public void method1(TreeNode root, int k) {
        if (root == null)
            return;
        method1(root.left, k);
        // count ++ , check for count== k
        count++;
        if (count == k) {
            ans = root.val;
            return;
        }
        method1(root.right, k);
    }

    public int method2(TreeNode root, int k) {
        method1(root, k);
        return ans;
    }
}
