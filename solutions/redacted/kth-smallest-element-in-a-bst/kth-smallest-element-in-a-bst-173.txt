/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    //////////////// RECURSIVE APPROACH /////////////////
    private void method1(TreeNode root, int k, int[] ans, int[] param1) {
        if (root == null)
            return;
        method1(root.left, k, ans, param1);
        param1[0]++;
        if (param1[0] == k)
            ans[0] = root.val;
        method1(root.right, k, ans, param1);
    }

    public int method2(TreeNode root, int k) {
        int[] ans = { -1 };
        int[] var1 = { 0 };
        method1(root, k, ans, var1);
        return ans[0];
    }
    /////////////// ITRERATIVE APPROACH /////////////////
    // public int kthSmallest(TreeNode root, int k) {
    //     Stack<TreeNode> st = new Stack<>();
    //     TreeNode curr = root;
    //     while(true){
    //         while(curr!=null){
    //             st.push(curr);
    //             curr = curr.left;
    //         }
    //         curr = st.pop();
    //         k--;
    //         if(k==0) return curr.val;
    //         curr = curr.right;
    //     }
    // }
}
