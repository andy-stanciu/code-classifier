/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int method1(TreeNode root, int k) {
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(new Comparator<Integer>() {

            public int compare(Integer a, Integer b) {
                if (a == b) {
                    return 0;
                }
                return a > b ? -1 : 1;
            }
        });
        helper(root, k, maxHeap);
        return maxHeap.peek();
    }

    private void helper(TreeNode root, int k, PriorityQueue<Integer> maxHeap) {
        if (root == null) {
            return;
        }
        if (maxHeap.size() < k) {
            maxHeap.offer(root.val);
        } else {
            if (maxHeap.peek() > root.val) {
                maxHeap.poll();
                maxHeap.offer(root.val);
            }
        }
        helper(root.left, k, maxHeap);
        helper(root.right, k, maxHeap);
    }
}
