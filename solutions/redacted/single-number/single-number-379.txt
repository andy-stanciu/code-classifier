class Solution {

    public int method1(int[] nums) {
        //variable to store the xor result of a
        int var1 = nums[0];
        //start a loop for all elements
        for (int i = 1; i < nums.length; i++) {
            //xor the element with the previous result
            var1 = var1 ^ nums[i];
        }
        //return the result
        return var1;
    }
}
// OR
// class Solution {
//     public int singleNumber(int[] nums) {
//         int result = 0;
//         for (int num : nums) {
//             result ^= num;  // XOR each element
//         }
//         return result;  // The result will be the single number
//     }
// }
// Hash Map Approach
// class Solution{
//     public int singleNumber(int[] nums) {
//     HashMap<Integer, Integer> map = new HashMap<>();
//     //Store the frequency of each number
//     for(int num : nums){
//         map.put(num, map.getOrDefault(num, 0) + 1 );
//     }
//     //Find the number with a frquency of 1
//     for(int num : nums){
//         if(map.get(num) == 1){
//             return num;
//         }
//     }
//     return -1;
//     }
// }
//Sorting Approach
// class Solution {
//     public int singleNumber(int[] nums) {
//         Arrays.sort(nums);  // Sort the array
//         // Iterate through the sorted array in pairs
//         for (int i = 0; i < nums.length - 1; i += 2) {
//             if (nums[i] != nums[i + 1]) {
//                 return nums[i];  // Return the element if it doesn\'t match its neighbor
//             }
//         }
//         return nums[nums.length - 1];  // If not found, the last element is the single one
//     }
// }
