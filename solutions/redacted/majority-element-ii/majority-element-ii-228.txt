// class Solution {
//     // Brute force
//     public List<Integer> majorityElement(int[] nums) {
//    ArrayList<Integer> list = new ArrayList<>();
//         int n = nums.length/3;int count=0;
//         for(int i=0;i<nums.length;i++){
//             if((list.size()==0 || list.get(0)!=nums[i]) &&
//              !list.contains(nums[i])){
//                 count=0;
//             for(int j=0;j<nums.length;j++){
//                 if(nums[i]==nums[j])
//                 count++;
//             }
//              if(count>n)list.add(nums[i]);
//             }
//         }
//         return list;
//     }
// }
class Solution {

    // Optimal Approach
    public List<Integer> method1(int[] nums) {
        ArrayList<Integer> list = new ArrayList<>();
        int a = nums.length / 3;
        int x1 = Integer.MIN_VALUE;
        int x2 = Integer.MIN_VALUE;
        int count1 = 0;
        int count2 = 0;
        for (int i = 0; i < nums.length; i++) {
            if (count1 == 0 && x2 != nums[i]) {
                x1 = nums[i];
                count1++;
            } else if (count2 == 0 && x1 != nums[i]) {
                x2 = nums[i];
                count2++;
            } else if (x1 == nums[i])
                count1++;
            else if (x2 == nums[i])
                count2++;
            else {
                count1--;
                count2--;
            }
        }
        count1 = 0;
        count2 = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == x1)
                count1++;
            if (nums[i] == x2)
                count2++;
        }
        if (count1 > a)
            list.add(x1);
        if (count2 > a)
            list.add(x2);
        Collections.sort(list);
        return list;
    }
}
