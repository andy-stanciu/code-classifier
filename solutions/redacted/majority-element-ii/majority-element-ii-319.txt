class Solution {

    public List<Integer> method1(int[] nums) {
        //       Map<Integer,Integer> map= new HashMap<>();
        // int n=nums.length;
        //        for (int num : nums) {
        //        map.put(num, map.getOrDefault(num,0)+1);
        //         }
        // List<Integer> list = new ArrayList<>();
        //        for(int key:map.keySet()){
        //         if(map.get(key)>n/3)
        //         list.add(key);
        //        }
        //        return list;
        int count1 = 0, count2 = 0, ele1 = -1, ele2 = -1;
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            if (count1 == 0 && nums[i] != ele2) {
                count1 = 1;
                ele1 = nums[i];
            } else if (count2 == 0 && nums[i] != ele1) {
                count2 = 1;
                ele2 = nums[i];
            } else if (nums[i] == ele1)
                count1++;
            else if (nums[i] == ele2)
                count2++;
            else {
                count1--;
                count2--;
            }
        }
        List<Integer> list = new ArrayList<>();
        count1 = 0;
        count2 = 0;
        for (int i : nums) {
            if (i == ele1)
                count1++;
            if (i == ele2)
                count2++;
        }
        if (count1 > n / 3)
            list.add(ele1);
        if (count2 > n / 3 && ele1 != ele2)
            list.add(ele2);
        return list;
    }
}
