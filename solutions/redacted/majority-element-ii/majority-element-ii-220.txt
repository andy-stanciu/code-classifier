class Solution {

    // Here, 1/3 = 0.34, and hence possibly 2 major elements can be found
    public List<Integer> method1(int[] nums) {
        int len = nums.length;
        int count1 = 0;
        int var1 = -1;
        int count2 = 0;
        int var2 = -1;
        // to find the potential majority element
        for (int i = 0; i < len; i++) {
            if (count1 == 0 && var2 != nums[i]) {
                var1 = nums[i];
                count1++;
            } else if (count2 == 0 && var1 != nums[i]) {
                var2 = nums[i];
                count2++;
            } else if (var1 == nums[i]) {
                count1++;
            } else if (var2 == nums[i]) {
                count2++;
            } else {
                count1--;
                count2--;
            }
        }
        // to count number of times the potential majority elements are occuring
        count1 = 0;
        count2 = 0;
        for (int num : nums) {
            if (num == var1) {
                count1++;
            } else if (num == var2) {
                count2++;
            }
        }
        List<Integer> ans = new ArrayList<>();
        int threshold = len / 3;
        if (count1 > threshold)
            ans.add(var1);
        if (count2 > threshold)
            ans.add(var2);
        return ans;
    }
}
