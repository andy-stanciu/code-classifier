class Solution {

    public List<Integer> method1(int[] nums) {
        int c = 0, c1 = 0;
        int n = nums.length;
        int el = Integer.MIN_VALUE;
        int el2 = Integer.MIN_VALUE;
        // Step 1: Find the potential majority elements
        for (int i = 0; i < nums.length; i++) {
            if (c == 0 && el2 != nums[i]) {
                c = 1;
                el = nums[i];
            } else if (c1 == 0 && el != nums[i]) {
                c1 = 1;
                el2 = nums[i];
            } else if (nums[i] == el) {
                c++;
            } else if (nums[i] == el2) {
                c1++;
            } else {
                c--;
                c1--;
            }
        }
        // Step 2: Count occurrences of potential majority elements
        c = 0;
        c1 = 0;
        for (int j = 0; j < n; j++) {
            if (nums[j] == el) {
                c++;
            }
            if (nums[j] == el2) {
                c1++;
            }
        }
        // Step 3: Check if occurrences meet the minimum threshold
        List<Integer> result = new ArrayList<>();
        int mini = (int) (n / 3) + 1;
        if (c >= mini) {
            result.add(el);
        }
        if (c1 >= mini) {
            result.add(el2);
        }
        return result;
    }
}
