// class Solution {
//     // Brute force
//     public List<Integer> majorityElement(int[] nums) {
//    ArrayList<Integer> list = new ArrayList<>();
//         int n = nums.length/3;int count=0;
//         for(int i=0;i<nums.length;i++){
//             if((list.size()==0 || list.get(0)!=nums[i]) &&
//              !list.contains(nums[i])){
//                 count=0;
//             for(int j=0;j<nums.length;j++){
//                 if(nums[i]==nums[j])
//                 count++;
//             }
//              if(count>n)list.add(nums[i]);
//             }
//         }
//         return list;
//     }
// }
class Solution {

    // Better Approach
    public List<Integer> method1(int[] nums) {
        ArrayList<Integer> list = new ArrayList<>();
        int a = nums.length / 3;
        HashMap<Integer, Integer> mp = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            mp.put(nums[i], mp.getOrDefault(nums[i], 0) + 1);
            // if(mp.get(nums[i])>a){
            //     list.add(nums[i]);
            // }
            // if(list.size()==2)break;
        }
        for (int x : mp.keySet()) {
            if (mp.get(x) > a)
                list.add(x);
        }
        return list;
    }
}
