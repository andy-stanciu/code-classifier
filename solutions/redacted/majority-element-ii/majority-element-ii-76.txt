class Solution {

    public List<Integer> method1(int[] nums) {
        int num1 = 0, count1 = 0, num2 = 0, count2 = 0;
        // Find the numbers which exist in the array most
        for (int num : nums) {
            if (num == num1) {
                ++count1;
            } else if (num == num2) {
                ++count2;
            } else if (count1 == 0) {
                num1 = num;
                count1 = 1;
            } else if (count2 == 0) {
                num2 = num;
                count2 = 1;
            } else {
                --count1;
                --count2;
            }
        }
        // Find the total number of times {num1} and {nums2} are present in the array
        count1 = 0;
        count2 = 0;
        for (int num : nums) {
            if (num == num1) {
                ++count1;
            } else if (num == num2) {
                ++count2;
            }
        }
        // n/3 of array size (no need to Math.floor as the operations are performed on integers)
        int required = nums.length / 3;
        List<Integer> result = new ArrayList<Integer>();
        // Add the numbers to the result if they exist more than {n/3} times.
        if (count1 > required) {
            result.add(num1);
        }
        if (count2 > required) {
            result.add(num2);
        }
        return result;
    }
}
