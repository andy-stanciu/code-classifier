class Solution {

    public List<Integer> method1(int[] nums) {
        /**
         * ********          using map 1st approach **********
         */
        //         HashMap<Integer,Integer> mp = new HashMap<>();
        //         for(int item : nums){
        //             mp.put(item,mp.getOrDefault(item,0)+1);
        //         }
        //      double times = nums.length/3;
        //    List<Integer> l =  mp.entrySet().stream().filter((entry) -> entry.getValue() > times).map(Map.Entry :: getKey).collect(Collectors.toList());
        //      return l;
        /**
         * ********          using counting technique 2nd approach **********
         */
        // time complexity       O(N)
        // space complexity O(1)
        int cnt1 = 0, cnt2 = 0, el1 = Integer.MIN_VALUE, el2 = Integer.MIN_VALUE;
        for (int it : nums) {
            if (cnt1 == 0 && el2 != it) {
                el1 = it;
                cnt1 = 1;
            } else if (cnt2 == 0 && el1 != it) {
                el2 = it;
                cnt2 = 1;
            } else if (el1 == it)
                cnt1++;
            else if (el2 == it)
                cnt2++;
            else {
                cnt1--;
                cnt2--;
            }
        }
        List<Integer> ar = new ArrayList<>();
        cnt1 = 0;
        cnt2 = 0;
        for (int item : nums) {
            if (item == el1)
                cnt1++;
            if (item == el2)
                cnt2++;
        }
        int len = nums.length;
        if (cnt1 > len / 3)
            ar.add(el1);
        if (cnt2 > len / 3)
            ar.add(el2);
        return ar;
    }
}
