class Solution {

    public int method1(int[][] points) {
        // If there are no balloons, return 0
        if (points.length == 0) {
            return 0;
        }
        // Sort the balloons by their end position
        Arrays.sort(points, (a, b) -> Integer.compare(a[1], b[1]));
        // Start with one arrow for the first balloon
        int var1 = 1;
        // Position of the last shot arrow
        int lastArrowPosition = points[0][1];
        // Iterate over the sorted balloons
        for (int i = 1; i < points.length; i++) {
            // If the start of the current balloon is greater than the last arrow\'s position
            if (points[i][0] > lastArrowPosition) {
                // We need a new arrow
                var1++;
                // Update the position of the last arrow
                lastArrowPosition = points[i][1];
            }
        }
        // Return the total count of arrows needed
        return var1;
    }
}
