class Solution {

    public int method1(int[][] points) {
        // sort points based on the last index
        Arrays.sort(points, (a, b) -> Integer.compare(a[1], b[1]));
        // we need atleast one arrow
        int res = 1;
        // initially the first xEnd if the end
        int curEnd = points[0][1];
        for (int i = 1; i < points.length; i++) {
            int xStart = points[i][0], xEnd = points[i][1];
            // this means that the arrow we placed before this will
            // cover this balloon too. So no need to count this
            if (xStart <= curEnd)
                continue;
            // otherwise place a new arrow, so increment the count
            res++;
            // this is the greedy strategy
            // choose the rightmost point to place the arrow
            // this will ensure that we cover the most number of balloons
            curEnd = xEnd;
        }
        return res;
    }
}
