class Solution {

    public int method1(int[][] points) {
        return intervalSchedule(points);
    }

    //\u8D2A\u5FC3\u7B97\u6CD5 - \u533A\u95F4\u8C03\u5EA6\u95EE\u9898 - \u8BA1\u7B97\u4E0D\u76F8\u4EA4\u533A\u95F4\u7684\u4E2A\u6570
    private static int intervalSchedule(int[][] intervals) {
        //\u6839\u636Eend\u8FDB\u884C\u5347\u5E8F\u6392\u5E8F
        Arrays.sort(intervals, new Comparator<int[]>() {

            public int compare(int[] a, int[] b) {
                if (a[1] < b[1]) {
                    return -1;
                } else if (a[1] == b[1]) {
                    return 0;
                } else {
                    return 1;
                }
            }
        });
        //\u88ABx_end\u8986\u76D6\u5230\u7684\u533A\u95F4\u6709\u51E0\u4E2A
        int count = 1;
        int x_end = intervals[0][1];
        for (int i = 1; i < intervals.length; i++) {
            if (x_end < intervals[i][0]) {
                count++;
                x_end = intervals[i][1];
            }
        }
        return count;
    }
}
