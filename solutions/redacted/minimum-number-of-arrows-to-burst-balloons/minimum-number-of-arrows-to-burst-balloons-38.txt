class Solution {

    public int method1(int[][] arr) {
        // extract size
        int n = arr.length;
        // intially arrow will be 1 (see constraint 1 <= points.length <= 10^5)
        // atleast 1 ballon will be required so, arrow = 1
        // we will require atleast 1 arrow to burst the ballons
        int arrow = 1;
        // as we said, sort it on the basis of starting point
        Arrays.sort(arr, (a, b) -> Integer.compare(a[0], b[0]));
        //intially start and end position will be of zero index
        int start = arr[0][0];
        int end = arr[0][1];
        // Run the loop i.e from (1 to n)
        for (int i = 1; i < n; i++) {
            if (// active set and ith index interval does not overlap
            arr[i][0] > end) {
                // so we have to create new active set
                start = arr[i][0];
                end = arr[i][1];
                // and also now we need one more arrow
                arrow++;
            } else // if  active set and ith index interval does overlap
            {
                // we just rearranging our active set
                start = Math.max(start, arr[i][0]);
                end = Math.min(end, arr[i][1]);
            }
        }
        // finally, loop ends return count of arrow
        return arrow;
    }
}
