class Solution {

    public int method1(int[][] p) {
        //sorting array on basis of closest to origin and ending
        Arrays.sort(p, (a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);
        // updating min. Max with first line
        int min = p[0][0], max = p[0][1];
        // if there\u2019s any ballon minnimum 1 arrow will be required
        int ans = 1;
        for (int i = 1; i < p.length; i++) {
            // System.out.println(p[i][0]+" "+ p[i][1]);
            if (p[i][0] >= min && p[i][0] <= max) {
                // if there\u2019s any intersection between previous baloon and new baloon then we\u2019ll update our min and max as intersection points
                min = Math.max(p[i][0], min);
                max = Math.min(p[i][1], max);
            } else {
                // if there\u2019s no intersection. Meaning we\u2019ll new need arrow
                ans++;
                // updating min max as new baloon
                min = p[i][0];
                max = p[i][1];
            }
        }
        // number of arrows we\u2019ll need
        return ans;
    }
}
