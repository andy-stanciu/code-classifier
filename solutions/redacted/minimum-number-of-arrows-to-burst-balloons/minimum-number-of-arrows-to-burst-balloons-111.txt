class Solution {

    public int method1(int[][] points) {
        // Arrays.sort(points,(a,b)->(long)a[0]-(long)b[0]);
        Arrays.sort(points, (a, b) -> Long.compare((long) a[0], (long) b[0]));
        long min = Long.MAX_VALUE;
        long max = Long.MIN_VALUE;
        min = (long) points[0][0];
        max = (long) points[0][1];
        int ans = 1;
        int count = 0;
        //   if(max==-2147483645){
        //     ans= ans+1;
        //   }
        // for(int[] arr : points){
        for (int i = 1; i < points.length; i++) {
            int[] arr = points[i];
            if (max >= arr[0]) {
                max = Math.min(arr[1], max);
                min = Math.max(arr[0], min);
            } else {
                ans = ans + 1;
                min = arr[0];
                max = arr[1];
            }
        }
        // if(count==1){
        // ans = ans+ count;
        // }
        return ans;
    }
}
//// class Solution {
//     public int findMinArrowShots(int[][] points) {
//         if (points == null || points.length == 0) return 0;
//         Arrays.sort(points, (a, b) -> {
//             if (a[0] == b[0]) return a[1] - b[1];
//             return a[0] - b[0];
//         });
//         long min = (long) points[0][0];
//         long max = (long) points[0][1];
//         int ans = 1;
//         for (int i = 1; i < points.length; i++) {
//             int[] arr = points[i];
//             if (max >= arr[0]) {
//                 max = Math.min(arr[1], max);
//                 min = Math.max(arr[0], min);
//             } else {
//                 ans++;
//                 min = arr[0];
//                 max = arr[1];
//             }
//         }
//         return ans;
//     }
// }
//// class Solution {
//     public int findMinArrowShots(int[][] points) {
//         if (points == null || points.length == 0) return 0;
//         // Sort by end points instead of start points
//         Arrays.sort(points, (a, b) -> Long.compare((long)a[1], (long)b[1]));
//         long max = (long) points[0][1];
//         int ans = 1;
//         for (int i = 1; i < points.length; i++) {
//             int[] arr = points[i];
//             if (arr[0] > max) {
//                 ans++;
//                 max = arr[1];
//             }
//         }
//         return ans;
//     }
// }
