class Solution {

    public int method1(int[][] points) {
        // Sort the points array based on the starting points of each interval
        Arrays.sort(points, (o1, o2) -> Long.compare(o1[0], o2[0]));
        // Initialize a list to store merged intervals
        List<long[]> ans = new ArrayList<>();
        // Iterate through each interval in the sorted array
        for (int i = 0; i < points.length; i++) {
            // Initialize variables to store the starting and ending points of the current
            // interval
            // Starting point
            long st = points[i][0];
            // Ending point
            long end = points[i][1];
            // Merge overlapping intervals
            while (i + 1 < points.length && points[i + 1][0] <= end) {
                // Move to the next interval
                i++;
                // Update the ending point if necessary
                end = Math.min(end, points[i][1]);
            }
            // Add the merged interval to the list
            ans.add(new long[] { st, end });
        }
        // Return the number of merged intervals, which represents the minimum number of
        // arrows needed
        return ans.size();
    }
}
