/*
    Strategy: Intervals
    1) Merge intervals => n non overlapping intervals = n arrows  WRONG
    2) Count balloons for every x cordinate , start with Max update rest . Repeat . IN EFFICIENT
    3) Sort , (1,6)(2,8) => (2,6)(7,12)(10,16) (2,6)(10,12) = WORKS
              (1,2)(3,4) => (1,3)(3,4)(5,6)(7,8)
              (1,2)(2,3) => ()
*/
class Solution {

    private static final boolean debugTrace = false;

    public int method1(int[][] points) {
        Arrays.sort(points, (p1, p2) -> (p1[0] == p2[0] ? p1[1] - p2[1] : p1[0] - p2[0]));
        if (debugTrace) {
            System.out.println("Points after sorting:" + Arrays.deepToString(points));
        }
        int n = points.length;
        List<int[]> arrowRanges = new ArrayList<int[]>();
        int prevStart = points[0][0];
        int prevEnd = points[0][1];
        for (int i = 1; i < n; i++) {
            if (debugTrace) {
                System.out.println("[" + prevStart + "," + prevEnd + "], " + Arrays.toString(points[i]));
            }
            int currStart = points[i][0];
            int currEnd = points[i][1];
            //At least one over lapping point
            if (currStart >= prevStart && currStart <= prevEnd) {
                if (debugTrace) {
                    System.out.println("At lesst one overlapped: " + "[" + prevStart + "," + prevEnd + "]" + ", " + Arrays.toString(points[i]));
                }
                prevStart = Math.max(prevStart, currStart);
                prevEnd = Math.min(prevEnd, currEnd);
                if (debugTrace) {
                    System.out.println("Post merge " + "[" + prevStart + "," + prevEnd + "]");
                }
            } else {
                if (debugTrace) {
                    System.out.print("No Overlaps, Founds one Range:");
                    System.out.println("[" + prevStart + "," + prevEnd + "]");
                }
                arrowRanges.add(new int[] { prevStart, prevEnd });
                prevStart = currStart;
                prevEnd = currEnd;
            }
            //prevStart = currStart;
            //prevEnd = currEnd;
        }
        arrowRanges.add(new int[] { prevStart, prevEnd });
        if (debugTrace) {
            System.out.println("Post Merges:");
            arrowRanges.forEach(range -> System.out.print(Arrays.toString(range)));
        }
        return arrowRanges.size();
    }
}
