class Solution {

    public int method1(int[][] points) {
        // sort the array
        Arrays.sort(points, (a, b) -> Integer.compare(a[1], b[1]));
        // At start we need a one arrow to burst
        int arrow = 1;
        // End of an first balloon point
        int end = points[0][1];
        for (int i = 1; i < points.length; i++) {
            int curstart = points[i][0];
            int curend = points[i][1];
            // if end point is not lying between next balloon points then we need one more arrow so increment the arrow and update the end
            if (end < curstart) {
                arrow++;
                end = curend;
            } else // if end is between nextballoon points take the min of end and curstart
            {
                Math.min(end, curstart);
            }
        }
        return arrow;
    }
}
