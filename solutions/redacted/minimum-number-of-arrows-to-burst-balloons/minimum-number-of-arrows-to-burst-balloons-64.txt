class Solution {

    public int method1(int[][] points) {
        //Sort the array with respect to end position i.e. points[i][1].
        //We will use lambda expression to customize the sorting.
        Arrays.sort(points, (a, b) -> Integer.compare(a[1], b[1]));
        //Initialize arrow count from 1 because at least 1 arrow is needed.
        int arrowCount = 1;
        int previous = 0;
        for (int current = 0; current < points.length; current++) {
            // If the start position of current balloon is after the end
            // position of previous balloon then increment arrow counter.
            if (points[current][0] > points[previous][1]) {
                arrowCount++;
                // Update the index of the previously burst balloon
                previous = current;
            }
        }
        //Finally return the arrow count.
        return arrowCount;
    }
}
