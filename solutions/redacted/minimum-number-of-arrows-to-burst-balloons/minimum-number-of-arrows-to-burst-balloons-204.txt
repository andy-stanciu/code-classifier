class Solution {

    public int method1(int[][] points) {
        // If there are no balloons, no arrows are needed
        if (points.length == 0)
            return 0;
        // Sort the balloons based on their end coordinates
        // This allows us to process the balloons from left to right
        Arrays.sort(points, (x, y) -> Integer.compare(x[1], y[1]));
        // Initialize the number of arrows needed
        int var1 = 1;
        // Initialize the end boundary of the current arrow
        int endBoundary = points[0][1];
        // Iterate through the balloons
        for (int i = 1; i < points.length; i++) {
            // If the start coordinate of the current balloon is greater than
            // the end boundary of the current arrow, a new arrow is needed
            if (points[i][0] > endBoundary) {
                // Increase the number of arrows
                var1++;
                // Update the end boundary of the arrow
                endBoundary = points[i][1];
            }
        }
        // Return the total number of arrows needed
        return var1;
    }
}
