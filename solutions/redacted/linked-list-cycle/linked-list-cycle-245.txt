/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
/**
 * Use floyd circle finding algo: use 2 pointer slow(moves 1 step) and
 * fast(moves 2 steps) and increment pointers accordingly. Circle is formed if
 * slow and fast pointers meet.
 */
public class Solution {

    public boolean method1(ListNode head) {
        if (head == null || head.next == null) {
            return false;
        }
        ListNode sp = head;
        ListNode fp = sp.next;
        while (sp != null && fp != null && sp != fp) {
            sp = sp.next;
            if (fp.next == null)
                return false;
            else
                fp = fp.next.next;
        }
        if (sp == null || fp == null) {
            return false;
        } else
            return true;
    }
}
