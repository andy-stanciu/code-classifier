/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public boolean method1(ListNode head) {
        // Initialize two pointers, n1 (slow pointer) and n2 (fast pointer), both starting at the head of the list
        ListNode n1 = head;
        ListNode n2 = head;
        // Check if the list is empty; if so, there is no cycle
        if (head == null) {
            return false;
        }
        // Traverse the list with two pointers
        do {
            // If n1 or n2 reaches the end of the list (null), there is no cycle
            if (n1.next == null || n2.next == null || n2.next.next == null) {
                return false;
            }
            // Move the slow pointer (n1) by one step
            n1 = n1.next;
            // Move the fast pointer (n2) by two steps
            n2 = n2.next.next;
        } while (// If n1 meets n2, a cycle exists
        n1 != n2);
        // If the loop exits, it means n1 and n2 met, so return true indicating a cycle
        return true;
    }
}
