public class Solution {

    public boolean method1(ListNode head) {
        // If the list is empty or has only one node, it cannot have a cycle
        if (head == null || head.next == null)
            return false;
        // Two pointers: fast moves two steps, slow moves one step
        ListNode slow = head;
        ListNode fast = head;
        // Traverse the list
        while (fast != null && fast.next != null) {
            // Fast pointer moves 2 steps
            fast = fast.next.next;
            // Slow pointer moves 1 step
            slow = slow.next;
            // If fast and slow meet, a cycle exists
            if (fast == slow)
                return true;
        }
        // If fast reaches the end, no cycle exists
        return false;
    }
}
