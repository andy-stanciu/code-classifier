/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public boolean method1(ListNode head) {
        // Initialize fast pointer to head
        ListNode fast = head;
        // Initialize slow pointer to head
        ListNode slow = head;
        while (fast != null && fast.next != null) {
            // Traverse the list until fast pointer reaches end or NULL
            // Move fast pointer two steps ahead
            fast = fast.next.next;
            // Move slow pointer one step ahead
            slow = slow.next;
            if (fast == slow) {
                // If fast meets slow, there is a cycle
                return true;
            }
        }
        // If fast reaches NULL, there is no cycle
        return false;
    }
}
