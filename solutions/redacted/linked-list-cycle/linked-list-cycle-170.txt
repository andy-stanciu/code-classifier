/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public boolean method1(ListNode head) {
        // Initialize fast pointer
        ListNode fast = head;
        // Initialize slow pointer
        ListNode slow = head;
        // Initialize boolean variable to track cycle
        boolean ans = false;
        // Iterate until fast pointer reaches the end of the list (null) or a cycle is detected
        while (fast != null && fast.next != null) {
            // Move slow pointer one step forward
            slow = slow.next;
            // Move fast pointer two steps forward
            fast = fast.next.next;
            if (// If they meet, it indicates a cycle in the list
            slow == fast) {
                ans = true;
                break;
            }
        }
        // Return the boolean indicating whether a cycle was found
        return ans;
    }
}
