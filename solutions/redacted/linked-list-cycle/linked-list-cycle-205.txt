/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public boolean method1(ListNode head) {
        if (// Checking if head is null or head.next is null, If null then no cycle
        head == null || head.next == null)
            return false;
        ListNode slow, fast;
        //Assigned head of the linked list to slow and fast node
        slow = fast = head;
        while (//if this is false then there is no cycle as we reached to end of the list
        fast.next != null && fast.next.next != null) {
            // incresing fast pointer by 2 step
            fast = fast.next.next;
            // incresing slow pointer by 1 step
            slow = slow.next;
            if (// checking if slow equals to fast if true there is a cycle
            slow == fast)
                return true;
        }
        return false;
    }
}
