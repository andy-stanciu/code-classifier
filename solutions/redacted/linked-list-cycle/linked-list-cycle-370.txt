/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public boolean method1(ListNode head) {
        // First check whether head itself is null
        if (head == null)
            return false;
        // Get one reference that loops through the cycle fast
        // and another that loops slowly
        // if there is a loop in the list, then fast and slow will converge
        // at some point, otherwise, there\'s no loop
        // Using a while loop
        ListNode fast = head;
        ListNode slow = head;
        while (fast.next != null && fast.next.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow)
                return true;
        }
        return false;
    }
}
