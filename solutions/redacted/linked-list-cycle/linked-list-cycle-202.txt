public class Solution {

    // Function to detect a cycle in a linked list
    public boolean method1(ListNode head) {
        // Initialize two pointers, \'fast\' and \'slow\', both pointing to the head of the linked list
        ListNode fast = head;
        ListNode slow = head;
        // Traverse the linked list until \'fast\' pointer reaches the end or becomes null
        while (fast != null && fast.next != null) {
            // Move \'slow\' pointer one step forward
            slow = slow.next;
            // Move \'fast\' pointer two steps forward
            fast = fast.next.next;
            // Check if \'slow\' and \'fast\' pointers meet at the same node, indicating a cycle
            if (slow == fast)
                // Cycle detected, return true
                return true;
        }
        // If \'fast\' reaches the end of the list (null), no cycle is detected, return false
        return false;
    }
}
