/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public boolean method1(ListNode head) {
        // HashSet-based approach (Code 1):
        // HashSet<ListNode> storeValue = new HashSet<ListNode>();
        // ListNode temp = head;
        // while(temp != null){
        //     if(storeValue.contains(temp.next)){
        //         return true;
        //     }
        //     storeValue.add(temp);
        //     temp = temp.next;
        // }
        // return false;
        //Floyd\u2019s Cycle Detection (Code 2):
        ListNode fast = head;
        ListNode slow = head;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow) {
                return true;
            }
        }
        return false;
    }
}
