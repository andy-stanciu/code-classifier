class Solution {

    public boolean method1(ListNode head) {
        if (head == null || head.next == null) {
            // No cycle in an empty list or a single node
            return false;
        }
        // Initialize slow and fast pointers
        ListNode slow = head;
        ListNode fast = head;
        // Traverse the list with slow and fast pointers
        while (fast != null && fast.next != null) {
            // Move slow pointer by 1 step
            slow = slow.next;
            // Move fast pointer by 2 steps
            fast = fast.next.next;
            // If slow and fast meet, there is a cycle
            if (slow == fast) {
                return true;
            }
        }
        // If we reach here, there is no cycle
        return false;
    }
}
