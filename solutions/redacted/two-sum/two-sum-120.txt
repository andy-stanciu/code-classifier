class Solution {

    public int[] method1(int[] nums, int target) {
        // Initialize an array to store the result indices, initialized with {-1, -1}
        int[] ans = { -1, -1 };
        // Get the length of the input array
        int n = nums.length;
        // Create a HashMap to store the array elements and their indices
        HashMap<Integer, Integer> numMap = new HashMap<>();
        // Iterate through the array and populate the HashMap
        for (int i = 0; i < n; i++) {
            numMap.put(nums[i], i);
        }
        // Iterate through the array again
        for (int i = 0; i < n; i++) {
            // Calculate the complement needed to achieve the target sum
            int complement = target - nums[i];
            // Check if the complement is present in the HashMap and the index is not the same as the current index
            if (numMap.containsKey(complement) && numMap.get(complement) != i) {
                // If found, update the ans array with the current index and the complement\'s index
                return new int[] { i, numMap.get(complement) };
            }
        }
        // If no valid pair is found, return the initialized ans array
        return ans;
    }
}
