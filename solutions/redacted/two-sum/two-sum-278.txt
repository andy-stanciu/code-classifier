// ----------------------- SOLUTION 1 - O(n^2) -----------------------
class Solution {

    public int[] method1(int[] nums, int target) {
        int n = nums.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] + nums[j] == target) {
                    return new int[] { i, j };
                }
            }
        }
        return null;
    }
}

// ----------------------- SOLUTION 2 - O(n) -----------------------
class Solution {

    public int[] method1(int[] nums, int target) {
        Map<Integer, Integer> m = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            m.put(nums[i], i);
        }
        for (int i = 0; i < nums.length; i++) {
            int diff = target - nums[i];
            if (m.containsKey(diff) && m.get(diff) != i) {
                return new int[] { i, m.get(diff) };
            }
        }
        return null;
    }
}
