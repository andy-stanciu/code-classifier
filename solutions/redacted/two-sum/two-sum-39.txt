class Solution {

    public int[] method1(int[] nums, int target) {
        //Brute-Force Method  Time Complexity -- >o(n^2)
        //    int n=nums.length;
        //    for(int i=0;i<n;i++)
        //     {
        //         for(int j=i+1;j<n;j++){
        //             if(nums[i]+nums[j]==target){
        //                 return new int[]{i,j};
        //             }
        //         }
        //     }
        //     return new int[]{};
        // Two pointer Approach  Time Complexity --> o(nlogn)
        // int i=0;
        // int j=nums.length-1;
        // while(i<j)
        // {
        //     if(nums[i]+nums[j]==target){
        //         return new int[]{i,j};
        //     }
        //     else if(nums[i]+nums[j]<target){
        //         i++;
        //     }
        //     else{
        //         j--;
        //     }
        // }
        // return new int[] {};
        //Better Approach Time Complexity  --> o(n)
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int numtofind = target - nums[i];
            if (map.containsKey(numtofind)) {
                return new int[] { map.get(numtofind), i };
            }
            map.put(nums[i], i);
        }
        return new int[] {};
    }
}
