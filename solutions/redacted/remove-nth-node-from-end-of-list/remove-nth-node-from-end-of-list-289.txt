/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head, int n) {
        // Step 1: Count the total number of nodes in the list
        ListNode temp = head;
        int count = 0;
        while (temp != null) {
            count++;
            temp = temp.next;
        }
        // Step 2: Find the position of the node to remove from the beginning
        int var1 = count - n;
        // If the node to be removed is the head node
        if (var1 == 0) {
            return head.next;
        }
        // Step 3: Traverse to the node just before the one to be removed
        ListNode current = head;
        for (int i = 1; i < var1; i++) {
            current = current.next;
        }
        // Step 4: Remove the nth node from the end
        current.next = current.next.next;
        return head;
    }
}
// ListNode dummy = new ListNode(0);
// dummy.next = head;
// ListNode fast = dummy;
// ListNode slow = dummy;
// // Move fast pointer n+1 steps ahead
// for (int i = 0; i <= n; i++) {
//     fast = fast.next;
// }
// // Move both pointers until fast reaches the end
// while (fast != null) {
//     fast = fast.next;
//     slow = slow.next;
// }
// // Remove the nth node from the end
// slow.next = slow.next.next;
// return dummy.next;
