class Solution {

    public ListNode method1(ListNode head, int n) {
        // Two-Pointer Approach (One-Pass)
        // Input: head = [1,2,3,4,5], n = 2
        // Fast should be n nodes ahead of slow
        // When fast hits 5 (tail), slow hits 3
        // Then slow.next = slow.next.next
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode fast = dummy;
        ListNode slow = dummy;
        for (int i = 1; i <= n; i++) {
            fast = fast.next;
        }
        // Iteration terminates when fast hits the tail
        while (fast.next != null) {
            fast = fast.next;
            slow = slow.next;
        }
        slow.next = slow.next.next;
        return dummy.next;
    }
}
