/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head, int n) {
        // Make length variable and store length of Linked List.
        int length = size(head);
        //  Make traverseTill variable for traverse in the Linked List, we traverse from last to n-1 node for remove nth element.
        int i = 0, traverseTill = length - n - 1;
        if (traverseTill == -1) {
            // If traverTill is equal to -1, it means remove first elemen of the linked list so return haed\'s next.
            return head.next;
        }
        //  Store head into the temp because, we can\'t traverse back in the Linked List.
        ListNode temp = head;
        while (i < traverseTill) {
            // Iterate the loop and go 0 to traverseTill and set temp is equal to temp\'s next.
            temp = temp.next;
            i++;
        }
        //  after Iteration we set temp to temp\'s next of next because, we ignore the nth element & removed from the Linked List.
        temp.next = temp.next.next;
        // return head.
        return head;
    }

    int size(ListNode head) {
        // Make size function that is return the length(size) of given Head of Linked List.
        ListNode temp = head;
        int size = 0;
        while (temp != null) {
            size++;
            temp = temp.next;
        }
        return size;
    }
}
