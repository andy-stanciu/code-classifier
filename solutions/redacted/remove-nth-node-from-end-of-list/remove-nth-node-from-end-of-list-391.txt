/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head, int n) {
        //exit condition 1. if head is null, returl null
        if (head == null)
            return null;
        ListNode var1 = head;
        int length = 0;
        while (var1 != null) {
            var1 = var1.next;
            length++;
        }
        //exit condition 2. if if total length is 1, only one node can be deleted.
        if (length == 1)
            return null;
        //exit condition 3. if \'n\' is same as length, head need to be deleted.
        if (length == n)
            return head.next;
        //(length-n-1)nt node from head will be nth node from tail.
        //iterate (length-n-1) times to reach previous node to the node-to-delete
        int counter = 0;
        var1 = head;
        while (counter < length - n - 1) {
            var1 = var1.next;
            counter++;
        }
        //delete (length-n)th node from head.
        var1.next = var1.next.next;
        //return head.
        return head;
    }
}
