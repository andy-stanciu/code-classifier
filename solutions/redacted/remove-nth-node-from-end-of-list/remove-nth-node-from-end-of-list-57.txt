/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head, int n) {
        //size
        int sz = 0;
        ListNode temp = head;
        //calculating the size of a linked list;
        while (temp != null) {
            temp = temp.next;
            sz++;
        }
        // if nth node from the last is equal to the size of the list
        // then it is head of the list.
        if (n == sz) {
            head = head.next;
            return head;
        }
        //else we will find the previous Node of the Node we are supposed to delete
        // and then we will point its next to next of next....
        int i = 1;
        //previous Nodes position
        int indexx = sz - n;
        ListNode prev = head;
        while (i < indexx) {
            prev = prev.next;
            i++;
        }
        // final job of deleting Node!!
        prev.next = prev.next.next;
        return head;
    }
}
