/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head, int n) {
        if (head == null || head.next == null) {
            return null;
        }
        int len = 1;
        ListNode curr = head;
        while (curr.next != null) {
            curr = curr.next;
            len++;
        }
        System.out.println("Length is " + len);
        len = len - n;
        System.out.println("Remove ngth " + len);
        if (len == 0) {
            curr.next = null;
            return head.next;
        }
        // decrease the first point from stack
        curr = head;
        // move to the node which needs to be rewinded, that;s why we have > 1 and not > 0
        while (len > 1) {
            curr = curr.next;
            len--;
        }
        curr.next = curr.next.next;
        return head;
    }
}
