/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head, int n) {
        // if LL has only one element then return null
        if (head == null || head.next == null) {
            return null;
        }
        // find the size of the LL
        int size = 0;
        ListNode curr = head;
        while (curr != null) {
            size++;
            curr = curr.next;
        }
        // now nth node from end is size-n+1 so its prev node is at size-n
        int var1 = size - n;
        int i = 1;
        ListNode prev = head;
        // if we are deleting the nth node from end and in this case that node is our head so we need to return its next
        if (n == size) {
            return head.next;
        }
        while (i < var1) {
            prev = prev.next;
            i++;
        }
        prev.next = prev.next.next;
        return head;
    }
}
