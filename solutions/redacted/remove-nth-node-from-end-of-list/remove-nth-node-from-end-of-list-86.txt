class Solution {

    public ListNode method1(ListNode head, int n) {
        // Step 1: Initialize variables
        // Counter for total number of nodes
        int k = 0;
        // Pointer to traverse the linked list
        ListNode curr = head;
        // Step 2: Count the number of nodes in the linked list
        if (curr == null) {
            // If the list is empty, return head
            return head;
        }
        while (curr != null) {
            // Increment the counter
            k++;
            // Move to the next node
            curr = curr.next;
        }
        // Step 3: Calculate the position of the node to remove from the end
        int pos = k - n;
        // Step 4: Handle the case where the node to be removed is the head
        if (pos == 0) {
            // Update the head to the next node
            head = head.next;
            // Return the updated head
            return head;
        }
        // Step 5: Find the node before the node to be removed
        int data = 0;
        ListNode point = head;
        while (data < pos - 1) {
            // Move to the next node
            point = point.next;
            // Increment the counter
            data++;
        }
        // Step 6: Remove the node by updating the pointers
        point.next = point.next.next;
        // Step 7: Return the head of the updated linked list
        return head;
    }
}
