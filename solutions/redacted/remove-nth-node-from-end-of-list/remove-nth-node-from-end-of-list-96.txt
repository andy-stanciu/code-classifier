class Solution {

    private int count = 0;

    public ListNode method1(ListNode head, int n) {
        // Recursive calling stops once we reach the end of the list
        if (head == null) {
            return null;
        }
        // Keep calling remove recursively
        ListNode var1 = method1(head.next, n);
        // Once the function calls start returning, start counting
        count++;
        // Think of \'head\' as the current node we are pointing to and \'node\' as the next node in the list.
        // If the count is equal to n, that means the current node is the one that needs to be deleted.
        // So instead of returning back the current node, we return next node in the list in this instance.
        if (count == n) {
            return var1;
        }
        // If the count is not equal to n, we just keep returning the current node.
        // We also keep assigning the next pointer to ensure we erase the link to the node we are deleting.
        head.next = var1;
        return head;
    }
}
