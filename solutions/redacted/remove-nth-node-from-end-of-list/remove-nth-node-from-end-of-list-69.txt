/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head, int n) {
        ListNode fast = head;
        // make fast poointer point at Nth node from front to keep the pointer ahead
        // run the loop till the n
        for (int i = 0; i < n; i++) {
            fast = fast.next;
        }
        // create a slow pointer
        ListNode slow = head;
        // if the case is to delete the first node i.e. head refer example-2
        if (fast == null) {
            return head.next;
        }
        // traverse till the fast is at last node
        while (fast.next != null) {
            //this will make slow point at previous node of the delete node
            slow = slow.next;
            // and fast node to the next of the delete node
            fast = fast.next;
        }
        //link the slow pointer which is at previous of delete node to the next of delete node
        slow.next = slow.next.next;
        return head;
    }
}
