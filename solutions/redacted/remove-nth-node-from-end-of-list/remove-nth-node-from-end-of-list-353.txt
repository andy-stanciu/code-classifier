class Solution {

    public ListNode method1(ListNode head, int n) {
        ListNode fast = head;
        ListNode slow = head;
        // Move the fast pointer `n` steps ahead
        for (int i = 0; i < n; i++) {
            fast = fast.next;
        }
        // If fast is null after moving `n` steps, it means we need to remove the head node
        if (fast == null) {
            return head.next;
        }
        // Move both fast and slow pointers until fast reaches the last node
        while (fast.next != null) {
            slow = slow.next;
            fast = fast.next;
        }
        // Now, slow is at the node before the one that needs to be removed
        slow.next = slow.next.next;
        return head;
    }
}
