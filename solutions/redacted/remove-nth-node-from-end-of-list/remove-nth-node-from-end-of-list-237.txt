class Solution {

    public ListNode method1(ListNode head, int n) {
        // Set two Nodes to head Fast and Slow
        ListNode slow = head;
        ListNode fast = head;
        //If LinkedList has only 1 element we have to delete that one so returning null
        if (head == null || head.next == null)
            return null;
        //We will set Fast pointers N position ahead of Slow Pointer, So that when Fast Pointer reaches the end, Slow pointer will be one position behind the node to be deleted
        while (n > 0) {
            fast = fast.next;
            n--;
        }
        //When Fast Pointer reaches the end, Slow pointer will be one position behind the node to be deleted
        while (fast != null && fast.next != null) {
            fast = fast.next;
            slow = slow.next;
        }
        //Delete the node just by changing the next node of the current node in slow pointer
        if (fast != null && slow.next != null)
            slow.next = slow.next.next;
        //This is a case where N==Size of LinkedList, In that Case first Node has to be deleted, In this case Head is moved from its current position to next position
        if (fast == null)
            head = head.next;
        return head;
    }
}
