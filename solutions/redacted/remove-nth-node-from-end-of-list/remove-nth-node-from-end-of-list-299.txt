/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head, int n) {
        // First pass: Determine the size of the list
        ListNode curr = head;
        int var1 = 0;
        while (curr != null) {
            var1++;
            curr = curr.next;
        }
        // Calculate the position from the start to remove
        int var2 = var1 - n;
        // If removing the first node (head)
        if (var2 == 0) {
            return head.next;
        }
        // Second pass: Traverse to the node just before the one to remove
        ListNode prev = null;
        curr = head;
        int track = 0;
        while (curr != null) {
            if (track == var2) {
                // Remove the node by skipping it
                prev.next = curr.next;
                break;
            }
            prev = curr;
            curr = curr.next;
            track++;
        }
        // Return the modified head
        return head;
    }
}
