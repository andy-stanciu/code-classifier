/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head, int n) {
        if (head == null) {
            return null;
        }
        // Compute the size of the linked list
        int size = 0;
        ListNode var1 = head;
        while (var1 != null) {
            var1 = var1.next;
            size++;
        }
        // If n is equal to the size, remove the head node
        if (n == size) {
            return head.next;
        }
        // Find the node just before the one we want to remove
        int indexToSearch = size - n;
        int i = 1;
        ListNode var2 = head;
        while (i < indexToSearch) {
            var2 = var2.next;
            i++;
        }
        // Remove the nth node from the end
        var2.next = var2.next.next;
        return head;
    }
}
