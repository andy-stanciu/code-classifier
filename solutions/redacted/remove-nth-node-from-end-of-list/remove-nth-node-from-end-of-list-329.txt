/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head, int n) {
        // Pointer to traverse the list
        ListNode slow = head;
        // Pointer to find the N-th node from the end
        ListNode fast = head;
        // Pointer to keep track of the previous node
        ListNode prev = null;
        // Move the fast pointer n steps ahead
        for (int i = 1; i <= n; i++) {
            fast = fast.next;
        }
        // If fast is null, it means we need to remove the head
        if (fast == null)
            return head.next;
        // Move both pointers until fast reaches the end
        while (fast != null) {
            // Update previous node
            prev = slow;
            // Move fast pointer
            fast = fast.next;
            // Move slow pointer
            slow = slow.next;
        }
        // Remove the N-th node from the end
        // Bypass the node to be removed
        prev.next = slow.next;
        // Return the modified list
        return head;
    }
}
