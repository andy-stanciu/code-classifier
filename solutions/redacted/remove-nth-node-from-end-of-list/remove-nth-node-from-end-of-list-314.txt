/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head, int n) {
        if (n == 0)
            return head;
        if (n == 1 && head.next == null)
            return null;
        List<ListNode> var1 = new ArrayList<>();
        ListNode current = head;
        while (current != null) {
            var1.add(current);
            current = current.next;
        }
        if (n > var1.size())
            throw new IllegalArgumentException("Invalid Case!");
        if (n == 1) {
            var1.get(var1.size() - 2).next = null;
        } else if (n == var1.size()) {
            head = head.next;
        } else {
            ListNode var2 = var1.get(var1.size() - n - 1);
            var2.next = var2.next.next;
        }
        return head;
    }
}
