class Solution {

    public ListNode method1(ListNode head, int n) {
        // step 1, reverse the linked list, prev is head of reversed list
        ListNode prev = null;
        while (head != null) {
            ListNode next = head.next;
            head.next = prev;
            prev = head;
            head = next;
        }
        //Step-2 store elements before the Nth-element, let use Store
        // and node points to head of store, node.next =>[head of Store]
        ListNode var1 = new ListNode(0);
        ListNode Store = var1;
        while (n > 1) {
            Store.next = new ListNode(prev.val);
            Store = Store.next;
            prev = prev.next;
            n--;
        }
        // Step-3, connect Store and prev after removing Nth-element
        // after (N-1) iteration, prev is the Nth element. so remove it
        // remove Nth element
        prev = prev.next;
        // connect Store and prev
        Store.next = prev;
        // get the head of the pointer, node.next => [points to head of Store]
        // Step-4, so to reverse the whole list after removing Nth element we need to grab the head
        // grab head of the new list
        head = var1.next;
        prev = null;
        // step-5, reverse
        while (head != null) {
            ListNode next = head.next;
            head.next = prev;
            prev = head;
            head = next;
        }
        return prev;
    }
}
