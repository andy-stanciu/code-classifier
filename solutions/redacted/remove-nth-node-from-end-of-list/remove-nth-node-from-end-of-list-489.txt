/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode method1(ListNode head, int n) {
        Stack<Integer> s = new Stack<Integer>();
        ListNode dummy = head;
        while (dummy != null) {
            s.push(dummy.val);
            dummy = dummy.next;
        }
        ListNode reverse = new ListNode(0);
        dummy = reverse;
        while (!s.isEmpty()) {
            dummy.next = new ListNode(s.pop());
            dummy = dummy.next;
        }
        dummy = reverse;
        for (int i = 0; i < n - 1; i++) {
            dummy = dummy.next;
        }
        dummy.next = dummy.next.next;
        reverse = reverse.next;
        while (reverse != null) {
            s.push(reverse.val);
            reverse = reverse.next;
        }
        ListNode var1 = new ListNode(0);
        dummy = var1;
        while (!s.isEmpty()) {
            dummy.next = new ListNode(s.pop());
            dummy = dummy.next;
        }
        return var1.next;
    }
}
