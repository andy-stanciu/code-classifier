class Solution {

    public ListNode method1(ListNode head, int n) {
        ListNode cur = head;
        ListNode result = cur;
        int count = 0;
        //to count how many total nodes are there.
        while (cur != null) {
            count++;
            cur = cur.next;
        }
        //reset the currect pointer to head again.
        cur = head;
        //if there is only one Node
        if (count == 1) {
            result = null;
        }
        //if there are more than one node
        if (count > 1) {
            //we want to reach to the Node before the note to be deleted
            if (count > n) {
                for (int i = 1; i < count - n; i++) {
                    cur = cur.next;
                }
            }
            //if first node is to be deleted
            if (count == n) {
                result = cur.next;
            }
        }
        /*if next pointer is not null, we are removing node 
        which we are supposed to delete (cur.next),****Bold**** because
![87bab3dd-fabf-4b71-9ac5-984d9015438e_1678160362.0612018.jpeg](https://assets.leetcode.com/users/images/d74762a6-dedf-48bf-b89f-7d30011dcce0_1728221995.313664.jpeg)
****![87bab3dd-fabf-4b71-9ac5-984d9015438e_1678160362.0612018.jpeg](https://assets.leetcode.com/users/images/10e5bf7d-6f98-40dd-84d3-17a63cf0d3f6_1728222017.3358147.jpeg)****
        first we reached to the Node before the note to be deleted.*/
        if (cur.next != null) {
            cur.next = cur.next.next;
        }
        return result;
    }
}
