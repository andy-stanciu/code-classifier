class Solution {

    public int compress(char[] chars) {
        // EDGE CASE: If char len is 1 then return 1.
        if (chars.length == 1)
            return 1;
        // better than string as we have to mutate this stringbuilder many times it will give better performance than string
        StringBuilder sb = new StringBuilder();
        int count = 1;
        for (int i = 1; i < chars.length; i++) {
            if (// check if adjacent chars are equal if true increase count
            chars[i] == chars[i - 1])
                // check if adjacent chars are equal if true increase count
                count++;
            else {
                // else add the char to string builder and check the count before adding. If count is 1 then dont add.
                sb.append(chars[i - 1]);
                sb.append((count > 1) ? count : "");
                // Reset the count value.
                count = 1;
            }
        }
        // Till now all the chars and there respective count would have been added except for the last char(s) count so add it
        sb.append(chars[chars.length - 1]);
        sb.append((count > 1) ? count : "");
        // Copying string builder content to char array
        for (int i = 0; i < sb.length(); i++) {
            chars[i] = sb.charAt(i);
        }
        // return the string builder length as indicates the answer length.
        return sb.length();
    }
}
