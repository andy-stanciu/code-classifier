class Solution {

    public int method1(int[] nums, int param1) {
        //target can be negative so just make it abs
        param1 = Math.abs(param1);
        int w = 0;
        int var1 = 0;
        for (int i : nums) var1 += i;
        if (var1 < param1 || (param1 + var1) % 2 != 0)
            return 0;
        w = (param1 + var1) / 2;
        int[][] dp = new int[nums.length + 1][w + 1];
        findSubset(nums, dp, w);
        return dp[nums.length][w];
    }

    public void findSubset(int[] nums, int[][] dp, int w) {
        for (int i = 0; i < nums.length + 1; i++) {
            for (int j = 0; j < w + 1; j++) {
                if (i == 0) {
                    dp[i][j] = 0;
                }
                if (j == 0) {
                    dp[i][j] = 1;
                }
            }
        }
        /*Below WHY j = 0 ??   
-> In partition subset problem we start j from 1 because we know that no. of ways in which we get sum = 0 is 1 for each ith number of elements. But here the nums[i] can take values from 0 so the number of ways in which we can make the sum 0 is not 1 but can vary. Therefor we fill the matrix from sum(j) 0 and not 1.	*/
        for (int i = 1; i < nums.length + 1; i++) {
            for (int j = 0; j < w + 1; j++) {
                if (nums[i - 1] <= j) {
                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
    }
}
