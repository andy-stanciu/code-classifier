class Solution {

    // Cache map
    private int[][] map;

    private int method1(int[] nums, int param1, int start) {
        // +/- symmetry
        int var1 = Math.abs(param1);
        int n = nums[start];
        // Reached end of array
        if (start == (nums.length - 1)) {
            // Only add if meet target
            if (n == var1) {
                map[n][start] = 1;
                // Edge case where array ends in 0 - can be added *or* subtracted
                if (n == 0) {
                    map[n][start] = 2;
                    return 2;
                }
                return 1;
            }
            return 0;
        } else {
            // Use cache if available
            if (map[var1][start] > 0) {
                return map[var1][start];
            } else {
                // These lines can be concatenated (was like this for debugging purposes), any way . .
                // Add current
                int var2 = method1(nums, var1 - n, start + 1);
                // Subtract current
                int var3 = method1(nums, var1 + n, start + 1);
                int var4 = var2 + var3;
                // Store in cache
                map[var1][start] = var4;
                return var4;
            }
        }
    }

    public int method2(int[] nums, int param1) {
        // Initialize cache
        map = new int[2002][nums.length];
        for (int t = 0; t < 2002; t++) {
            for (int n = 0; n < nums.length; n++) {
                map[t][n] = 0;
            }
        }
        // Again these 2 lines can be combined (was there for debugging)
        int ret = method1(nums, param1, 0);
        return ret;
    }
}
