class Solution {

    int method1(int[] nums, int param1) {
        int var1 = 0;
        for (int n : nums) var1 += n;
        if (var1 < Math.abs(param1) || (var1 + param1) % 2 == 1) {
            return 0;
        }
        return subsets(nums, (var1 + param1) / 2);
    }

    //     int subsets(int[] nums, int target) {
    //         int n = nums.length;
    //         int dp[][] = new int[n+1][target+1];
    //         dp[0][0] = 1;
    //         // for( int i = 1; i <= n; i++ ) dp[i][0] = 1;
    //         for(int i = 1; i <= n; i++) {
    //             for( int j = 0; j <= target; j++) {
    //                 if( j - nums[i-1] < 0) {
    //                     dp[i][j] = dp[i-1][j];
    //                 } else{
    //                     dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i-1]];
    //                 }
    //             }
    //         }
    //         return dp[n][target];
    //     }
    int subsets(int[] nums, int param1) {
        int[] dp = new int[param1 + 1];
        dp[0] = 1;
        for (int i = 0; i < nums.length; i++) {
            for (int j = param1; j >= 0; j--) {
                if (j - nums[i] < 0) {
                    dp[j] = dp[j];
                } else {
                    dp[j] = dp[j] + dp[j - nums[i]];
                }
            }
        }
        return dp[param1];
    }
}
