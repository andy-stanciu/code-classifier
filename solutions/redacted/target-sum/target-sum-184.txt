class Solution {

    //Recurrsion
    // public int findTargetSumWays(int[] nums, int target) {
    //     int totalSum = 0;
    //     for (int i : nums) {
    //         totalSum += i;
    //     }
    //     if (totalSum < target || (totalSum - target) % 2 != 0) {
    //         return 0;
    //     }
    //     int s2 = (totalSum - target) / 2;
    //     return f(nums, s2, nums.length - 1);
    // }
    // public int f(int[] nums, int k, int ind) {
    //     if (ind == 0) {
    //         if (k == 0 && nums[ind] == 0) {
    //             return 2;
    //         }
    //         if (k == 0 || k == nums[0]) {
    //             return 1;
    //         }
    //         return 0;
    //     }
    //     int take = 0;
    //     if (nums[ind] <= k) {
    //         take = f(nums, k - nums[ind], ind - 1);
    //     }
    //     int notTake = f(nums, k, ind - 1);
    //     return take + notTake;
    // }
    //Memoization
    // public int findTargetSumWays(int[] nums, int target) {
    //     int totalSum = 0;
    //     for (int i : nums) {
    //         totalSum += i;
    //     }
    //     if (totalSum < target || (totalSum - target) % 2 != 0) {
    //         return 0;
    //     }
    //     int s2 = (totalSum - target) / 2;
    //     int dp[][]= new int[nums.length][s2+1];
    //     for(int[] rows : dp){
    //         Arrays.fill(rows, -1);
    //     }
    //     return f(nums, s2, nums.length - 1, dp);
    // }
    // public int f(int[] nums, int k, int ind, int[][] dp) {
    //     if (ind == 0) {
    //         if (k == 0 && nums[ind] == 0) {
    //             return 2;
    //         }
    //         if (k == 0 || k == nums[0]) {
    //             return 1;
    //         }
    //         return 0;
    //     }
    //     if(dp[ind][k] != -1){
    //         return dp[ind][k];
    //     }
    //     int take = 0;
    //     if (nums[ind] <= k) {
    //         take = f(nums, k - nums[ind], ind - 1, dp);
    //     }
    //     int notTake = f(nums, k, ind - 1, dp);
    //     return dp[ind][k]= take + notTake;
    // }
    //Tabulation
    static final int MOD = 1000000007;

    public int tabulation(int[] nums, int param1) {
        int n = nums.length;
        // Create a 2D array to store results of subproblems
        int[][] dp = new int[n][param1 + 1];
        // Initialize the dp array for the first element of the array
        if (nums[0] == 0)
            // 2 cases - pick and not pick
            dp[0][0] = 2;
        else
            // 1 case - not pick
            dp[0][0] = 1;
        if (nums[0] != 0 && nums[0] <= param1)
            // 1 case - pick
            dp[0][nums[0]] = 1;
        // Fill the dp array using dynamic programming
        for (int ind = 1; ind < n; ind++) {
            for (int tar = 0; tar <= param1; tar++) {
                int notTaken = dp[ind - 1][tar];
                int taken = 0;
                if (nums[ind] <= tar)
                    taken = dp[ind - 1][tar - nums[ind]];
                dp[ind][tar] = (notTaken + taken) % MOD;
            }
        }
        return dp[n - 1][param1];
    }

    public int method1(int[] nums, int param1) {
        int n = nums.length;
        int var1 = 0;
        // Calculate the total sum of elements in the array
        for (int i : nums) {
            var1 += i;
        }
        // Checking for edge cases
        if (var1 - param1 < 0 || (var1 - param1) % 2 == 1)
            return 0;
        // Calculate the second sum based on the total sum and the target
        int s2 = (var1 - param1) / 2;
        // Call the countPartitionsUtil function to calculate the number of ways
        return tabulation(nums, s2);
    }
}
