class Solution {

    public int method1(int[] nums, int param1) {
        // p
        //(s-p) -- sum of nums to be neg
        // t = p - (s-p)
        // 2p-s = t
        // p = (s+t)/2 -- how many p to be selected
        int s = 0;
        int n = nums.length;
        for (int num : nums) s += num;
        param1 += s;
        // s+t must be non neg, or cannot reach target
        if (param1 < 0 || param1 % 2 != 0)
            return 0;
        param1 /= 2;
        // use only two arrays to optimize
        int[][] dp = new int[2][param1 + 1];
        dp[0][0] = 1;
        for (int i = 0; i < n; ++i) {
            for (int c = 0; c <= param1; ++c) {
                if (c < nums[i]) {
                    dp[(i + 1) % 2][c] = dp[i % 2][c];
                } else {
                    dp[(i + 1) % 2][c] = dp[i % 2][c] + dp[i % 2][c - nums[i]];
                }
            }
        }
        return dp[n % 2][param1];
    }
}
