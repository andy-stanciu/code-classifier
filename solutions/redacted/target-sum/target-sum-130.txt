class Solution {

    private int subset(int[] nums, int n, int param1) {
        int[][] dp = new int[n + 1][param1 + 1];
        for (int i = 0; i < n + 1; i++) {
            dp[i][0] = 1;
        }
        for (int j = 1; j < param1 + 1; j++) {
            dp[0][j] = 0;
        }
        for (int i = 1; i < n + 1; i++) {
            for (int j = 0; j < param1 + 1; j++) {
                if (nums[i - 1] <= j) {
                    dp[i][j] = dp[i - 1][j - nums[i - 1]] + dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[n][param1];
    }

    public int method1(int[] nums, int param2) {
        int param1 = 0;
        for (int k : nums) {
            param1 += k;
        }
        if (param1 < param2)
            return 0;
        if ((param1 + param2) < 0 || ((param1 + param2) % 2) != 0)
            return 0;
        int s1 = (param2 + param1) / 2;
        return subset(nums, nums.length, s1);
    }
}
