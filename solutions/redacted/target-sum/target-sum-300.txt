class Solution {

    public int method1(int[] arr, int n, int param1) {
        // Your code goes here
        int[][] dp = new int[n][param1 + 1];
        // for(int i = 0;i<n;i++){
        //     Arrays.fill(dp[i] , -1);
        // }
        int[] prev = new int[param1 + 1];
        int[] cur = new int[param1 + 1];
        cur[0] = 1;
        prev[0] = 1;
        if (arr[0] <= param1)
            prev[arr[0]] = 1;
        if (arr[0] == 0)
            prev[0] = 2;
        for (int i = 1; i < n; i++) {
            for (int var1 = param1; var1 >= 0; var1--) {
                int notPick = prev[var1] % (int) (1e9 + 7);
                int pick = 0;
                if (arr[i] <= var1)
                    pick = prev[var1 - arr[i]] % (int) (1e9 + 7);
                cur[var1] = (pick + notPick) % (int) (1e9 + 7);
            }
            prev = cur;
        }
        return prev[param1];
    }

    public int countPartitions(int n, int d, int[] arr) {
        // Code here
        int param1 = 0;
        for (int i = 0; i < n; i++) {
            param1 = param1 + arr[i];
        }
        if (param1 - d < 0 || (param1 - d) % 2 == 1)
            return 0;
        return method1(arr, n, (param1 - d) / 2);
    }

    public int method2(int[] nums, int param2) {
        int n = nums.length;
        return countPartitions(n, param2, nums);
    }
}
