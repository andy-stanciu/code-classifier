class Solution {

    public int method1(int[] nums, int param1) {
        int n = nums.length;
        return func(n - 1, nums, param1);
    }

    int func(int ind, int[] nums, int param1) {
        int var1 = 0;
        for (int x : nums) {
            var1 += x;
        }
        if (var1 - param1 < 0)
            return 0;
        if ((var1 - param1) % 2 == 1)
            return 0;
        int s2 = (var1 - param1) / 2;
        return countsubset(nums.length - 1, nums, s2);
    }

    int countsubset(int i, int[] nums, int param1) {
        int n = nums.length;
        int[] prev = new int[param1 + 1];
        Arrays.fill(prev, 0);
        if (// 2 cases -pick and not pick
        nums[0] == 0)
            // 2 cases -pick and not pick
            prev[0] = 2;
        else
            // 1 case - not pick
            prev[0] = 1;
        //pick
        if (nums[0] != 0 && nums[0] <= param1)
            prev[nums[0]] = 1;
        for (int ind = 1; ind < n; ind++) {
            int[] cur = new int[param1 + 1];
            Arrays.fill(cur, 0);
            for (int tar = 0; tar <= param1; tar++) {
                int nottake = prev[tar];
                int take = 0;
                if (nums[ind] <= tar) {
                    take = prev[tar - nums[ind]];
                }
                cur[tar] = take + nottake;
            }
            prev = cur;
        }
        return prev[param1];
    }
}
