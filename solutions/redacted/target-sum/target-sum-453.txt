class Solution {

    public int method1(int[] nums, int param1) {
        dp = new HashMap<String, Integer>();
        return recur(nums, 0, param1);
    }

    static HashMap<String, Integer> dp;

    public int recur(int[] nums, int idx, int param1) {
        if (idx == nums.length && param1 == 0) {
            return 1;
        }
        if (idx == nums.length && param1 != 0) {
            return 0;
        }
        if (dp.get(idx + "$" + param1) != null) {
            return dp.get(idx + "$" + param1);
        }
        // e.g. if we take the element 1 as +1 , we need our smaller problem to return us the number of ways to form (target-1) value
        int sp1 = recur(nums, idx + 1, param1 - nums[idx]);
        // and the second option is if we take 1 as -1, we need our smaller problem to return us the number of ways to form (target+1) value
        int sp2 = recur(nums, idx + 1, param1 + nums[idx]);
        dp.put(idx + "$" + param1, sp1 + sp2);
        return sp1 + sp2;
    }
}
