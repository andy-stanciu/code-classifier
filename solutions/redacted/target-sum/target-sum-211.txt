class Solution {

    public int method1(int[] nums, int param1) {
        // Memory Table to store subproblem result...
        Map<String, Integer> memory = new HashMap<String, Integer>();
        // Function Call...
        return Memonise(nums, 0, 0, param1, 0, memory);
    }

    public int Memonise(int[] nums, int index, int param2, int param1, int totalWays, Map<String, Integer> memo) {
        if (index == nums.length) {
            // If the array is traversed...
            // If the sum equals target...
            return param2 == param1 ? 1 : 0;
        }
        // generating a unique key (the sum at every instance will be unique)...
        String key = index + "|" + param2;
        if (// Checking memory...
        memo.containsKey(key))
            return memo.get(key);
        // If current number is signed positive...
        int positive = Memonise(nums, index + 1, param2 + nums[index], param1, totalWays, memo);
        // If current number is signed negative...
        int negative = Memonise(nums, index + 1, param2 - nums[index], param1, totalWays, memo);
        totalWays = positive + negative;
        // Updating the memory...
        memo.put(key, totalWays);
        // Returning the final output of the problem...
        return totalWays;
    }
}
