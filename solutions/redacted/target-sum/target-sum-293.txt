class Solution {

    public int method1(int[] nums, int param1) {
        return countPartitions(nums.length, param1, nums);
    }

    int countPartitions(int n, int d, int[] arr) {
        int var1 = 0;
        for (int x : arr) var1 += x;
        if (var1 - d < 0)
            return 0;
        if ((var1 - d) % 2 == 1)
            return 0;
        int s2 = (var1 - d) / 2;
        int[][] dp = new int[n][s2 + 1];
        if (arr[0] == 0) {
            dp[0][0] = 2;
        } else {
            dp[0][0] = 1;
        }
        //arr[0]= 0 ;
        if (arr[0] != 0 && arr[0] <= s2) {
            dp[0][arr[0]] = 1;
        }
        for (int idx = 1; idx < n; idx++) {
            for (int var2 = 0; var2 <= s2; var2++) {
                int notake = 0 + dp[idx - 1][var2];
                int take = 0;
                if (arr[idx] <= var2) {
                    take = dp[idx - 1][var2 - arr[idx]];
                }
                dp[idx][var2] = (take + notake);
            }
        }
        return dp[n - 1][s2];
    }
}
// memoization---------------------
// class Solution {
//     public int findTargetSumWays(int[] nums, int target) {
//         return countPartitions(nums.length,target,nums);
//     }
//     int countPartitions(int n, int d, int[] arr) {
//         int totalsum = 0;
//         for (int x : arr)
//             totalsum += x;
//         if (totalsum - d < 0)
//             return 0;
//         if ((totalsum - d) % 2 == 1)
//             return 0;
//         int s2 = (totalsum - d) / 2;
//         int[][] dp = new int[n][s2 + 1];
//         for (int[] row : dp)
//             Arrays.fill(row, -1);
//         return helper(arr, n - 1, s2, dp);
//     }
//     int helper(int[] arr, int idx, int sum, int[][] dp) {
//         if (idx == 0) {
//             if (arr[0] == 0 && sum == 0)
//                 return 2;
//             if (sum == 0 || arr[0] == sum)
//                 return 1;
//             return 0;
//         }
//         if (dp[idx][sum] != -1)
//             return dp[idx][sum];
//         int notpick = helper(arr, idx - 1, sum, dp);
//         int pick = 0;
//         if (arr[idx] <= sum)
//             pick = helper(arr, idx - 1, sum - arr[idx], dp);
//         return dp[idx][sum] = (pick + notpick);
//     }
// }
