class Solution {

    public int method1(int[] nums, int param1) {
        if (nums.length == 0)
            return 0;
        return dp(nums, 0, param1);
    }

    // \u5907\u5FD8\u5F55
    HashMap<String, Integer> memo = new HashMap<>();

    int dp(int[] nums, int i, int remain) {
        // base case
        if (i == nums.length) {
            if (remain == 0)
                return 1;
            return 0;
        }
        // \u628A\u5B83\u4FE9\u8F6C\u6210\u5B57\u7B26\u4E32\u624D\u80FD\u4F5C\u4E3A\u54C8\u5E0C\u8868\u7684\u952E
        String key = i + "," + remain;
        // \u907F\u514D\u91CD\u590D\u8BA1\u7B97
        if (memo.containsKey(key)) {
            return memo.get(key);
        }
        // \u8FD8\u662F\u7A77\u4E3E
        int result = dp(nums, i + 1, remain - nums[i]) + dp(nums, i + 1, remain + nums[i]);
        // \u8BB0\u5165\u5907\u5FD8\u5F55
        memo.put(key, result);
        return result;
    }
}
