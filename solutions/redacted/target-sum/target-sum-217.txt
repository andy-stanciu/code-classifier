class Solution {

    public int method1(int[] nums, int param1) {
        int n = nums.length;
        int var1 = 0;
        for (int i = 0; i < n; i++) {
            var1 += nums[i];
        }
        if (var1 - param1 < 0 || (var1 - param1) % 2 == 1)
            return 0;
        return method2(nums, n, (var1 - param1) / 2);
    }

    public int method2(int[] arr, int n, int k) {
        int[][] dp = new int[n][k + 1];
        if (arr[0] == 0)
            dp[0][0] = 2;
        else
            // 1 case - not pick
            dp[0][0] = 1;
        if (arr[0] != 0 && arr[0] <= k)
            dp[0][arr[0]] = 1;
        for (int i = 1; i < n; i++) {
            for (int param1 = 0; param1 <= k; param1++) {
                int withOutCurrent = dp[i - 1][param1];
                int withCurrent = 0;
                if (arr[i] <= param1) {
                    withCurrent = dp[i - 1][param1 - arr[i]];
                }
                dp[i][param1] = withOutCurrent + withCurrent;
            }
        }
        return dp[n - 1][k];
    }
}
