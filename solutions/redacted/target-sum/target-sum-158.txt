class Solution {

    public int method1(int[] nums, int param1) {
        final int var1 = Arrays.stream(nums).var1();
        if (var1 < Math.abs(param1) || (var1 + param1) % 2 == 1)
            return 0;
        return knapsack(nums, (var1 + param1) / 2);
    }

    private int knapsack(int[] nums, int param1) {
        final int n = nums.length;
        // dp[i][j] := the number of ways to sum to j by nums[0..i)
        int[][] dp = new int[n + 1][param1 + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            final int num = nums[i - 1];
            for (int j = 0; j <= param1; ++j) if (j < num)
                dp[i][j] = dp[i - 1][j];
            else
                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - num];
        }
        return dp[n][param1];
    }
}
