class Solution {

    int[] dp;

    public int method1(int[] nums, int param1) {
        int var1 = 0;
        for (int i : nums) {
            var1 += i;
        }
        if ((var1 - param1) % 2 != 0)
            return 0;
        int var2 = (var1 - param1) / 2;
        if (var2 < 0)
            return 0;
        dp = new int[var2 + 1];
        dp[0] = 1;
        for (int i = 1; i <= nums.length; i++) {
            for (int s = var2; s >= 0; s--) {
                int take = 0;
                if (nums[i - 1] <= s) {
                    take = dp[s - nums[i - 1]];
                }
                int notTake = dp[s];
                dp[s] = take + notTake;
            }
        }
        return dp[var2];
    }
}
//Recursive
//         int tsum = 0;
//         for(int i: nums){
//             tsum +=i;
//         }
//         if((tsum-target) % 2 != 0) return 0;
//         int sum = (tsum-target)/2;
//         if(sum < 0) return 0;
//         dp = new int[nums.length][sum+1];
//         for(int i=0; i<dp.length; i++){
//             Arrays.fill(dp[i], -1);
//         }
//         return ways(nums, nums.length-1, sum);
//     }
//     int ways(int[] nums, int i, int s){
//         if(i < 0){
//             if(s == 0) return 1;
//             return 0;
//         }
//         if(dp[i][s] != -1) return dp[i][s];
//         int take = 0;
//         if(nums[i] <= s){
//             take = ways(nums, i-1, s-nums[i]);
//         }
//         int notTake = ways(nums, i-1, s);
//         return dp[i][s] = take + notTake;
//     }
// }
