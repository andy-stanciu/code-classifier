// In this questions, writing base case is very very crucial....
class Solution {

    // Memoization Code
    // Time Complexity : O(n)
    // Space Compelxity : O(n + n*(sum+1))... Recursive Stack Space + DP-DS
    private static int fun(int index, int[] nums, int param1, int[][] dp) {
        // Base Case
        if (index < 0) {
            return (param1 == 0) ? 1 : 0;
        }
        if (dp[index][param1] != -1)
            return dp[index][param1];
        // notPick
        int notPick = fun(index - 1, nums, param1, dp);
        // pick
        int pick = 0;
        if (nums[index] <= param1)
            pick = fun(index - 1, nums, param1 - nums[index], dp);
        return dp[index][param1] = notPick + pick;
    }

    public int method1(int[] nums, int param2) {
        int len = nums.length, var1 = Arrays.stream(nums).param1();
        // Base Case
        if ((var1 + param2) % 2 != 0 || var1 < param2)
            return 0;
        // Code
        int param1 = (var1 - param2) / 2;
        int[][] dp = new int[len][param1 + 1];
        Arrays.stream(dp).forEach(a -> Arrays.fill(a, -1));
        return fun(len - 1, nums, param1, dp);
    }
}
