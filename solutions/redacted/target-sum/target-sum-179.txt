class Solution {

    public int method1(int[] arr, int n, int tar, int param1) {
        if (tar < 0) {
            tar = tar * -1;
        }
        int[][] t = new int[n + 1][tar + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= tar; j++) {
                if (i == 0) {
                    t[i][j] = 0;
                } else if (j == 0) {
                    t[i][j] = 1;
                }
            }
        }
        t[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= tar; j++) {
                if (arr[i - 1] <= j) {
                    t[i][j] = t[i - 1][j] + t[i - 1][j - arr[i - 1]];
                } else {
                    t[i][j] = t[i - 1][j];
                }
            }
        }
        return t[n][tar];
    }

    public int method2(int[] nums, int param2) {
        //same as count partitions with given difference
        //how many ways can it be divided to givr target
        //(1+1+1+1) - (1) = +1+1+1+1 -1  = 3
        int n = nums.length;
        int param1 = 0;
        int var1 = 0;
        for (int i = 0; i < n; i++) {
            param1 += nums[i];
        }
        if ((param1 + param2) % 2 != 0)
            return 0;
        if (param2 > param1)
            return 0;
        if (param2 < 0 && param2 * -1 > param1)
            return 0;
        var1 = (param1 + param2) / 2;
        return method1(nums, n, var1, param1);
    }
}
