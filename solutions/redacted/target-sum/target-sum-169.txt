class Solution {

    public int count(int ind, int param1, int[][] dp, int[] arr) {
        if (ind == 0) {
            if (param1 == 0 && arr[0] == 0)
                return 2;
            if (param1 == 0 || param1 == arr[0])
                return 1;
            return 0;
        }
        if (dp[ind][param1] != -1)
            return dp[ind][param1];
        int notTaken = count(ind - 1, param1, dp, arr);
        int taken = 0;
        if (arr[ind] <= param1)
            taken = count(ind - 1, param1 - arr[ind], dp, arr);
        return dp[ind][param1] = (taken + notTaken) % ((int) (Math.pow(10, 9) + 7));
    }

    public int countPartitions(int n, int d, int[] arr) {
        // code here
        int var1 = 0;
        for (int i = 0; i < arr.length; i++) {
            var1 += arr[i];
        }
        if (var1 - d < 0) {
            return 0;
        }
        if ((var1 - d) % 2 == 1) {
            return 0;
        }
        int param1 = (var1 - d) / 2;
        int[][] dp = new int[n][param1 + 1];
        for (int[] rows : dp) {
            Arrays.fill(rows, -1);
        }
        return count(n - 1, param1, dp, arr);
    }

    public int method1(int[] nums, int param1) {
        return countPartitions(nums.length, param1, nums);
    }
}
