class Solution {

    public int mySqrt(int x) {
        // Incase number given is 0 or 1
        if (x <= 1) {
            return x;
        }
        int end = x / 2;
        int start = 0;
        while (end > start + 1) {
            // The reason for doing (end-start) is to avoid mid getting out of range of int
            int mid = start + (end - start) / 2;
            // multiplying big int like ex. 23423552 would be out of range, so dividing is better
            // no need to use long int
            int squarert = x / mid;
            // if these are equal return mid as answer
            if (squarert == mid) {
                return mid;
            }
            // Just like binary search keep checking whether mid value is lesser or greater
            // and keep updating start and end value
            if (mid < squarert) {
                // as we need to find lower int than sqrt so sometimes even if mid is lesser than
                // sqaurert value, we still need to keep it in our range, so assigning mid not mid + 1
                start = mid;
            } else {
                end = mid - 1;
            }
        }
        // while loop will break when end = start + 1 ex (start = 3,  end = 4)
        if (end == start + 1) {
            // if checking if end is sqrt or not other wise return start as answer.
            int endsq = x / end;
            if (end <= endsq) {
                return end;
            } else {
                return start;
            }
        } else // sometimes end == start when getting out of while loop
        if (end == start) {
            return start;
        }
        return -1;
    }
}
