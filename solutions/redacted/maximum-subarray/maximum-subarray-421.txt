class Solution {

    public int method1(int[] nums) {
        /* Initialize maxSub to the first element of the array to handle cases where the array contains negative values, 
        ensuring we have a valid starting point. */
        int maxSub = nums[0];
        // currSum keeps track of the current subarray sum.
        int currSum = 0;
        for (int num : nums) {
            /* If currSum is negative, reset it to 0 because 
            adding a negative sum to the next subarray would only decrease the overall sum. */
            if (currSum < 0)
                currSum = 0;
            // Add the current number to currSum.
            currSum += num;
            /* Update maxSub to hold the maximum value between the current maxSub and the current currSum. 
            This ensures that maxSub always holds the largest sum encountered so far. */
            maxSub = Math.max(maxSub, currSum);
        }
        // After iterating through the array, maxSub will contain the largest sum of any contiguous subarray, so return it.
        return maxSub;
    }
}
