class Solution {

    Random var1 = new Random();

    public int method1(int[] nums, int k) {
        int low = 0;
        int high = nums.length - 1;
        while (low < high) {
            int p = partition(nums, low, high);
            if (p == k - 1) {
                // k-th largest element is at the correct position
                return nums[p];
            } else if (p < k - 1) {
                // number must be on right side of partition
                low = p + 1;
            } else {
                // number must be on left side of partition
                high = p - 1;
            }
        }
        return nums[low];
    }

    private int partition(int[] A, int low, int high) {
        swap(A, low, method2(low, high));
        int pivot = A[low];
        int i = low;
        for (int j = low + 1; j <= high; j++) {
            if (A[j] > pivot) {
                i++;
                swap(A, i, j);
            }
        }
        swap(A, low, i);
        return i;
    }

    private void swap(int[] A, int i, int j) {
        int temp = A[i];
        A[i] = A[j];
        A[j] = temp;
    }

    private int method2(int l, int r) {
        return var1.nextInt(r - l + 1) + l;
    }
}
