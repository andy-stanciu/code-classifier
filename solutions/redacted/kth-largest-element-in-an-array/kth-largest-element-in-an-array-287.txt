class Solution {

    public int method1(int[] nums, int k) {
        int var1 = nums.length - k;
        return quickselect(nums, 0, nums.length - 1, var1);
    }

    private int quickselect(int[] nums, int left, int right, int k) {
        if (left == right) {
            return nums[left];
        }
        int var2 = partition(nums, left, right);
        if (var2 == k) {
            return nums[var2];
        } else if (var2 < k) {
            return quickselect(nums, var2 + 1, right, k);
        } else {
            return quickselect(nums, left, var2 - 1, k);
        }
    }

    private int partition(int[] nums, int left, int right) {
        Random var3 = new Random();
        int var2 = left + var3.nextInt(right - left + 1);
        int pivotValue = nums[var2];
        swap(nums, var2, right);
        int var4 = left;
        for (int i = left; i < right; i++) {
            if (nums[i] < pivotValue) {
                swap(nums, i, var4);
                var4++;
            }
        }
        swap(nums, var4, right);
        return var4;
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
