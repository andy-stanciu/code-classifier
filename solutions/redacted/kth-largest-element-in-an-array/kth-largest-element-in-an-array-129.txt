class Solution {

    public int method1(int[] nums, int k) {
        //Finding (nums.length-k)th smallest instead of kth largest
        k = nums.length - k;
        return quickSelect(nums, k, 0, nums.length - 1);
    }

    public int quickSelect(int[] nums, int k, int l, int r) {
        //optimising using random function for next pivot selection, here the (r>l) check is just
        //because random function works for only values greater than 0
        if (r > l) {
            Random var1 = new Random();
            int tempPivot = l + var1.nextInt(r - l);
            int tempSwap = nums[r];
            nums[r] = nums[tempPivot];
            nums[tempPivot] = tempSwap;
        }
        //taking rightmost element as pivotElement
        int var2 = nums[r];
        int pivot = l;
        for (int i = l; i < r; i++) {
            if (nums[i] <= var2) {
                int temp = nums[i];
                nums[i] = nums[pivot];
                nums[pivot] = temp;
                pivot++;
            }
        }
        int temp = nums[r];
        nums[r] = nums[pivot];
        nums[pivot] = temp;
        if (pivot > k) {
            return quickSelect(nums, k, l, pivot - 1);
        } else if (pivot < k) {
            return quickSelect(nums, k, pivot + 1, r);
        } else {
            return nums[pivot];
        }
    }
}
