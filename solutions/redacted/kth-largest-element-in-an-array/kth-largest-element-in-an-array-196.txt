class Solution {

    public int method1(int[] nums, int k) {
        // Sort the array using quicksort
        quickSort(nums, 0, nums.length - 1);
        // Return the k-th largest element from the end
        return nums[nums.length - k];
    }

    // Function to perform quicksort
    static void quickSort(int[] arr, int low, int high) {
        if (low >= high) {
            // Base case: array is already sorted
            return;
        }
        int start = low;
        int end = high;
        int mid = start + (end - start) / 2;
        // Choose pivot element from middle
        int pivot = arr[mid];
        // Partitioning step
        while (start <= end) {
            while (arr[start] < pivot) {
                start++;
            }
            while (arr[end] > pivot) {
                end--;
            }
            // Swap elements to ensure correct order around the pivot
            if (start <= end) {
                int temp = arr[start];
                arr[start] = arr[end];
                arr[end] = temp;
                start++;
                end--;
            }
        }
        // Recursively sort left and right halves
        quickSort(arr, low, end);
        quickSort(arr, start, high);
    }
}
