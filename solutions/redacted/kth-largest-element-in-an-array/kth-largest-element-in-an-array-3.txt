class Solution {

    public int method1(int[] nums, int k) {
        // Initialize an empty list
        PriorityQueue<Integer> var1 = new PriorityQueue<Integer>((n1, n2) -> n1 - n2);
        // Add first k elements to the list
        for (int i = 0; i < k; i++) {
            var1.add(nums[i]);
        }
        // Loop through the remaining elements in the \'nums\' array
        for (int i = k; i < nums.length; i++) {
            // Compare the current element with the minimum
            // element (root) of the min-heap
            if (nums[i] > var1.peek()) {
                // Remove the smallest element
                var1.poll();
                // Add the current element
                var1.add(nums[i]);
            }
        }
        // The root of the heap has the Kth largest element
        return var1.peek();
    }
}
