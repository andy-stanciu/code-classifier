class Solution {

    public static int method1(int[] nums, int k) {
        // Create a min-heap (PriorityQueue)
        PriorityQueue<Integer> var1 = new PriorityQueue<>();
        // Normal loop to add elements to the min-heap
        for (int i = 0; i < nums.length; i++) {
            // Add current element to the heap
            var1.add(nums[i]);
            // If heap size exceeds k, remove the smallest element
            if (var1.size() > k) {
                // Removes the smallest element
                var1.poll();
            }
        }
        // The root of the heap is now the Kth largest element
        //This function returns the smallest element from the min-heap without removing i,
        return var1.peek();
        //it is returning the Kth largest element to the main function.
    }

    public static void method2(String[] args) {
        Scanner var2 = new Scanner(System.in);
        // Read the size of the array
        int n = var2.nextInt();
        int[] nums = new int[n];
        // Read array elements
        for (int i = 0; i < nums.length; i++) {
            nums[i] = var2.nextInt();
        }
        // Read value of k
        int k = var2.nextInt();
        // Call the function to find the Kth largest element
        int res = method1(nums, k);
        // Output the result
        System.out.print(res);
        // Close the scanner
        var2.close();
    }
}
