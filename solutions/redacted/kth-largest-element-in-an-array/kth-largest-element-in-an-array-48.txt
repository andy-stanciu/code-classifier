class Solution {

    public int method1(int[] nums, int k) {
        int n = nums.length - k;
        return method2(nums, n + 1, 0, nums.length - 1);
        /*
        n+1 : coz not 0 based index. 
        [3,2,1,5,6,4] becomes [1,2,3,4,5,6] after sorting. 
        s0 now we need 5 as ans (coz k=2). so we pass n+1
        ex :
        int n = 6-2 = 4. but here we need 5th elt, coz that is 2nd largest. 
        
        **also code is for smallest, depensind on what we pass as k, 
        we can use same code for findign largest 
        */
    }

    private int method2(int[] arr, int k, int low, int high) {
        int var1 = method3(arr, low, high);
        if (var1 == k - 1)
            return arr[var1];
        else if (var1 < k - 1)
            return method2(arr, k, var1 + 1, high);
        else
            return method2(arr, k, low, var1 - 1);
    }

    private int method3(int[] arr, int low, int high) {
        int var2 = arr[high];
        int var1 = low;
        for (int i = low; i <= high; i++) {
            if (arr[i] < var2) {
                int tmp = arr[i];
                arr[i] = arr[var1];
                arr[var1] = tmp;
                var1++;
            }
        }
        int tmp = arr[var1];
        arr[var1] = arr[high];
        arr[high] = tmp;
        return var1;
    }
}
