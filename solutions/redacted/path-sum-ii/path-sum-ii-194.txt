/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<List<Integer>> ans = new ArrayList<>();

    int var1 = 0;

    private void dfs(TreeNode root, int param1, List<Integer> subList) {
        if (root == null) {
            return;
        }
        var1 = var1 + root.val;
        subList.add(root.val);
        if (root.left == null && root.right == null) {
            if (var1 == param1) {
                ans.add(new ArrayList<>(subList));
            }
        }
        dfs(root.left, param1, subList);
        dfs(root.right, param1, subList);
        int removedNodeValue = subList.get(subList.size() - 1);
        subList.remove(subList.size() - 1);
        var1 = var1 - removedNodeValue;
    }

    public List<List<Integer>> method1(TreeNode root, int param1) {
        dfs(root, param1, new ArrayList<Integer>());
        if (ans.size() == 0)
            return new ArrayList<>();
        else
            return ans;
    }
}
