/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    List<List<Integer>> fAns;

    public void helper(TreeNode root, int param1, List<Integer> ans, int param2) {
        if (root == null) {
            return;
        }
        if (root.left == null && root.right == null) {
            param2 += root.val;
            if (param2 == param1) {
                ans.add(root.val);
                List<Integer> tAns = new ArrayList<>(ans);
                fAns.add(tAns);
                ans.remove(ans.size() - 1);
            }
            return;
        }
        param2 += root.val;
        ans.add(root.val);
        if (root.left != null) {
            helper(root.left, param1, ans, param2);
        }
        if (root.right != null) {
            helper(root.right, param1, ans, param2);
        }
        if (ans.size() >= 1)
            ans.remove(ans.size() - 1);
        return;
    }

    public List<List<Integer>> method1(TreeNode root, int param1) {
        fAns = new ArrayList<>();
        helper(root, param1, new ArrayList<Integer>(), 0);
        return fAns;
    }
}
