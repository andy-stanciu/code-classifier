/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        if (root == null)
            return new ArrayList<>();
        List<List<Integer>> res = new ArrayList<>();
        helper(root, root.val, param1, res, new ArrayList<>());
        return res;
    }

    void helper(TreeNode root, int param2, int target, List<List<Integer>> res, List<Integer> list) {
        // keep on adding the nodes to the list
        list.add(root.val);
        // add the list only in case of leaf and if targetsum matches the sum
        if (root.left == null && root.right == null && target == param2) {
            res.add(new ArrayList<>(list));
            return;
        }
        if (root.left != null) {
            int var1 = param2 + root.left.val;
            helper(root.left, var1, target, res, list);
            // since we already considered this node , remove it
            list.remove(list.size() - 1);
        }
        if (root.right != null) {
            int var2 = param2 + root.right.val;
            helper(root.right, var2, target, res, list);
            // since we already considered this node , remove it
            list.remove(list.size() - 1);
        }
    }
}
