/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> answer = new ArrayList<List<Integer>>();
        //TreeNode ptr = new TreeNode();
        // ptr= root;
        List<Integer> temp = new ArrayList<Integer>();
        if (root == null)
            return answer;
        DFS(root, root.val, answer, param1, 0, temp);
        return answer;
    }

    void DFS(TreeNode root, int origroot, List<List<Integer>> answer, int target, int param2, List<Integer> temp) {
        temp.add(root.val);
        //YOU DONT REMOVE AN ELEMENT ONLY WHEN YOU REACH THE END. YOU REMOVE THE ELEMENT WHEN YOU BACKTRACK.
        if (root.left != null) {
            DFS(root.left, origroot, answer, target, param2, temp);
        }
        if (root.right != null) {
            DFS(root.right, origroot, answer, target, param2, temp);
        }
        int var1 = 0;
        for (int i = 0; i < temp.size(); i++) {
            var1 = var1 + temp.get(i);
            System.out.print(" " + temp.get(i));
        }
        System.out.println(" ");
        System.out.println("sumnew= " + var1);
        if ((var1 == target) && (root.left == null) && (root.right == null)) {
            ArrayList<Integer> copyList = new ArrayList<Integer>(temp);
            System.out.println("yesss");
            answer.add(copyList);
        }
        if (!temp.isEmpty()) {
            int index = temp.size() - 1;
            param2 = param2 - temp.get(index);
            temp.remove(index);
        }
        // when an element is popped off , the modified arraylist should be returned to its parent.
    }
}
