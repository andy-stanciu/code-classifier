/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    // add temp list elements to result list
    List<List<Integer>> result = new ArrayList<>();

    public List<List<Integer>> method1(TreeNode root, int target) {
        int var1 = 0;
        List<Integer> temp = new ArrayList<>();
        fill(root, var1, temp, target);
        return result;
    }

    // Recursive method to fill the paths that sum up to the target
    void fill(TreeNode root, int var1, List<Integer> temp, int target) {
        if (root == null)
            return;
        var1 += root.val;
        temp.add(root.val);
        if (root.left == null && root.right == null) {
            // Leaf node
            if (var1 == target) {
                //if target == sum then only add!!
                result.add(new ArrayList<>(temp));
            }
            return;
        }
        fill(root.left, var1, new ArrayList<>(temp), target);
        fill(root.right, var1, new ArrayList<>(temp), target);
    }
}
