/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        List<Integer> var1 = new ArrayList<>();
        int var2 = 0;
        solve(root, param1, var2, var1, ans);
        return ans;
    }

    public void solve(TreeNode root, int param1, int var2, List<Integer> var1, List<List<Integer>> ans) {
        if (root == null)
            return;
        if (root.left == null && root.right == null) {
            var2 += root.val;
            if (var2 == param1) {
                var1.add(root.val);
                // Add a new instance of path to the answer list
                ans.add(new ArrayList<>(var1));
                // Backtrack to explore other paths
                var1.remove(var1.size() - 1);
            }
            return;
        }
        //include curr node
        var1.add(root.val);
        var2 += root.val;
        solve(root.left, param1, var2, var1, ans);
        solve(root.right, param1, var2, var1, ans);
        // Backtrack
        var1.remove(var1.size() - 1);
    }
}
