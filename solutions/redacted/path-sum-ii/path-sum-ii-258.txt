/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<Integer> list = new LinkedList<>();
        List<List<Integer>> res = new LinkedList<>();
        if (root == null) {
            return res;
        }
        helper(root, param1, list, res);
        return res;
    }

    private void helper(TreeNode curr, int param1, List<Integer> list, List<List<Integer>> res) {
        list.add(curr.val);
        if (curr.left != null && curr.right != null) {
            helper(curr.left, param1 - curr.val, list, res);
            helper(curr.right, param1 - curr.val, list, res);
        } else if (curr.left != null && curr.right == null) {
            helper(curr.left, param1 - curr.val, list, res);
        } else if (curr.left == null && curr.right != null) {
            helper(curr.right, param1 - curr.val, list, res);
        } else {
            //reach leaf
            if (param1 - curr.val == 0) {
                res.add(new ArrayList<>(list));
            }
        }
        list.remove(list.size() - 1);
    }
}
