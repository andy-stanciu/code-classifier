/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> result = helper(root, param1);
        return result == null ? new ArrayList<>() : result;
    }

    private List<List<Integer>> helper(TreeNode root, int param1) {
        if (root == null)
            return null;
        if (param1 == root.val && root.left == null && root.right == null) {
            List<Integer> temp = new ArrayList<>();
            temp.add(root.val);
            List<List<Integer>> result = new ArrayList<>();
            result.add(temp);
            return result;
        }
        if (root.left == null && root.right == null && param1 != 0) {
            return null;
        }
        List<List<Integer>> left = helper(root.left, param1 - root.val);
        List<List<Integer>> right = helper(root.right, param1 - root.val);
        List<List<Integer>> result = new ArrayList<>();
        if (left != null) {
            for (List<Integer> temp : left) {
                temp.add(0, root.val);
            }
            result.addAll(left);
        }
        if (right != null) {
            for (List<Integer> temp : right) {
                temp.add(0, root.val);
            }
            result.addAll(right);
        }
        return result;
    }
}
