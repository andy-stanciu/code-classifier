/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        find(root, param1, new ArrayList<>(), result);
        return result;
    }

    public void find(TreeNode root, int param1, List<Integer> list, List<List<Integer>> result) {
        if (root == null)
            return;
        list.add(root.val);
        //adding the list to result
        if (root.left == null && root.right == null && param1 == root.val) {
            result.add(new ArrayList<>(list));
        } else {
            find(root.left, param1 - root.val, list, result);
            find(root.right, param1 - root.val, list, result);
        }
        //this is to backtrack to the previous root and change the direction
        list.remove(list.size() - 1);
    }
}
