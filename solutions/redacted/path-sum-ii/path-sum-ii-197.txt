/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> answerlist = new ArrayList<>();
        List<Integer> locallist = new ArrayList<>();
        return method2(root, param1, answerlist, locallist);
    }

    public List<List<Integer>> method2(TreeNode root, int param1, List<List<Integer>> answerlist, List<Integer> locallist) {
        if (root == null) {
            return answerlist;
        }
        locallist.add(root.val);
        if (root.val == param1 && root.left == null && root.right == null) {
            // If it\'s a leaf node and its value equals targetSum, add the path to
            // answerlist
            // Create a new list object
            answerlist.add(new ArrayList<>(locallist));
        }
        // Recursively traverse left and right subtrees
        method2(root.left, param1 - root.val, answerlist, locallist);
        method2(root.right, param1 - root.val, answerlist, locallist);
        // Backtrack: Remove the last element to backtrack when moving up the tree
        locallist.remove(locallist.size() - 1);
        return answerlist;
    }
}
