/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<List<Integer>> result = new ArrayList<List<Integer>>();

    public void helper(TreeNode root, int param1, ArrayList<Integer> tempList, int param2) {
        //Base case
        if (root.left == null && root.right == null) {
            tempList.add(root.val);
            if ((param1 + root.val) == param2) {
                result.add(new ArrayList<Integer>(tempList));
            }
            tempList.remove(tempList.size() - 1);
            return;
        }
        tempList.add(root.val);
        if (root.left != null) {
            helper(root.left, param1 + root.val, tempList, param2);
        }
        if (root.right != null) {
            helper(root.right, param1 + root.val, tempList, param2);
        }
        if (tempList.size() > 0) {
            tempList.remove(tempList.size() - 1);
        }
    }

    public List<List<Integer>> method1(TreeNode root, int param2) {
        ArrayList<Integer> temp = new ArrayList<Integer>();
        if (root == null) {
            return result;
        }
        helper(root, 0, temp, param2);
        return result;
    }
}
