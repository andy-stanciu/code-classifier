/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        List<Integer> temp = new ArrayList<Integer>();
        int var1 = 0;
        method2(root, ans, temp, var1, param1);
        return ans;
    }

    public void method2(TreeNode node, List<List<Integer>> res, List<Integer> temp, int var1, int param1) {
        if (node == null) {
            return;
        }
        var1 += node.val;
        temp.add(node.val);
        if (var1 == param1 && isLeaf(node)) {
            List<Integer> t = new ArrayList<>(temp);
            res.add(t);
        }
        method2(node.left, res, temp, var1, param1);
        method2(node.right, res, temp, var1, param1);
        var1 -= node.val;
        temp.remove(temp.size() - 1);
        return;
    }

    public boolean isLeaf(TreeNode node) {
        if (node.left == null && node.right == null) {
            return true;
        }
        return false;
    }
}
