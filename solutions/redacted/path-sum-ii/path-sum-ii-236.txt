/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public static List<List<Integer>> method1(TreeNode root, int target) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> var1 = new ArrayList<>();
        dfs(root, var1, result, target);
        return result;
    }

    private static void dfs(TreeNode node, List<Integer> var1, List<List<Integer>> result, int target) {
        if (node == null)
            return;
        // Add current node to the current path
        var1.add(node.val);
        target = target - node.val;
        // If it\'s a leaf node, add current path to result
        if (node.left == null && node.right == null && target == 0) {
            // Make a copy of current path
            result.add(new ArrayList<>(var1));
        } else {
            // Recursively traverse left and right subtrees
            dfs(node.left, var1, result, target);
            dfs(node.right, var1, result, target);
        }
        // Backtrack: Remove the current node from the current path
        var1.remove(var1.size() - 1);
    }
}
