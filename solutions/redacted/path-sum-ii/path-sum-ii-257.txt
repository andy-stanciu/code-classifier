/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> list = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        if (root == null)
            return list;
        int var1 = 0;
        TreeNode node = root;
        TreeNode prev = null;
        while (node != null || !stack.isEmpty()) {
            while (node != null) {
                var1 += node.val;
                stack.push(node);
                if (var1 == param1 && node.left == null && node.right == null) {
                    List<Integer> var2 = new ArrayList<>();
                    for (TreeNode a : stack) {
                        var2.add(a.val);
                    }
                    list.add(var2);
                }
                node = node.left;
            }
            node = stack.pop();
            var1 -= node.val;
            if (node.right == null || node.right == prev) {
                prev = node;
                node = null;
            } else {
                stack.push(node);
                var1 += node.val;
                node = node.right;
            }
        }
        return list;
    }
}
