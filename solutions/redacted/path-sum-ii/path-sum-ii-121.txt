class Solution {

    List<List<Integer>> result = new ArrayList<>();

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<Integer> list = new ArrayList<>();
        int counter = 0;
        dfs(list, counter, root, param1);
        return result;
    }

    private void dfs(List<Integer> list, int counter, TreeNode node, int param1) {
        if (node == null) {
            return;
        }
        List<Integer> listNew = new ArrayList<>();
        listNew.addAll(list);
        if (node.left == null && node.right == null) {
            if (counter + node.val == param1) {
                result.add(listNew);
            } else {
                return;
            }
        }
        listNew.add(node.val);
        dfs(listNew, counter + node.val, node.left, param1);
        dfs(listNew, counter + node.val, node.right, param1);
    }
}
