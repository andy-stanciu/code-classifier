/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {

    public static void helper(List<List<Integer>> mainlist, TreeNode root, int target, List<Integer> sublist) {
        if (root == null) {
            return;
        }
        sublist.add(root.val);
        if (root.left == null && root.right == null && root.val == target) {
            mainlist.add(new ArrayList<>(sublist));
        }
        helper(mainlist, root.left, target - root.val, new ArrayList<>(sublist));
        helper(mainlist, root.right, target - root.val, new ArrayList<>(sublist));
    }

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> mainlist = new ArrayList<>();
        if (root == null) {
            return mainlist;
        }
        helper(mainlist, root, param1, new ArrayList<>());
        return mainlist;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        TreeNode root = new TreeNode(5);
        root.left = new TreeNode(4);
        root.right = new TreeNode(8);
        root.left.left = new TreeNode(11);
        root.right.left = new TreeNode(13);
        root.right.right = new TreeNode(4);
        List<List<Integer>> arr = new ArrayList<>();
        arr = sol.method1(root, 9);
        System.out.print(arr);
    }
}
