/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        List<Integer> list = new ArrayList<>();
        helper(result, list, root, param1, 0);
        return result;
    }

    public void helper(List<List<Integer>> result, List<Integer> list, TreeNode root, int target, int param2) {
        if (root == null) {
            return;
        }
        param2 += root.val;
        list.add(root.val);
        if (root.left == null && root.right == null) {
            if (param2 == target) {
                // Add a copy of the current path
                result.add(new ArrayList<>(list));
            }
        } else {
            helper(result, list, root.left, target, param2);
            helper(result, list, root.right, target, param2);
        }
        // Remove the last element to backtrack
        list.remove(list.size() - 1);
    }
}
