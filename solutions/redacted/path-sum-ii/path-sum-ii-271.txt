/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> lastList = new ArrayList<>();
        //returning in empty list case
        if (root == null) {
            return lastList;
        }
        List<Integer> innerlist = new ArrayList<>();
        //usage of recursion
        method2(root, param1, lastList, innerlist);
        return lastList;
    }

    private void method2(TreeNode node, int param1, List<List<Integer>> lastList, List<Integer> innerlist) {
        //reached end of list
        if (node == null) {
            return;
        }
        innerlist.add(node.val);
        //calculation of sum of innerlist
        int var1 = innerlist.stream().reduce(0, Integer::sum);
        //if sum matches and this is a leaf
        if (var1 == param1 && node.right == null && node.left == null) {
            lastList.add(innerlist);
        }
        //creating sublist that is identical to inner list for paths
        List<Integer> sublist = new ArrayList<>();
        sublist.addAll(innerlist);
        //recursion on till leaves
        method2(node.left, param1, lastList, sublist);
        method2(node.right, param1, lastList, innerlist);
    }
}
