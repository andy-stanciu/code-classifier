/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> var1 = new ArrayList<>();
        dfs(root, var1, param1, res);
        return res;
    }

    public void dfs(TreeNode root, List<Integer> var1, int param1, List<List<Integer>> res) {
        if (root == null) {
            return;
        }
        var1.add(root.val);
        if (root.left == null && root.right == null && root.val == param1) {
            res.add(new ArrayList<>(var1));
        } else {
            dfs(root.left, var1, param1 - root.val, res);
            dfs(root.right, var1, param1 - root.val, res);
        }
        // backtrack karre hain
        var1.remove(var1.size() - 1);
    }
}
