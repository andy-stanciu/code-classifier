/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    void dfs(TreeNode root, int param1, List<Integer> temp, List<List<Integer>> result) {
        // base case when root is null
        if (root == null)
            return;
        param1 -= root.val;
        temp.add(root.val);
        // when leaf node reached check for (targetSum == 0).
        if (root.left == null && root.right == null && param1 == 0) {
            result.add(new ArrayList<>(temp));
            return;
        }
        // check for both nodes
        dfs(root.left, param1, new ArrayList<>(temp), result);
        dfs(root.right, param1, new ArrayList<>(temp), result);
        // now backtrack add previous node sum and also remove previous node from temp List<Integer>
        param1 += root.val;
        temp.remove(temp.size() - 1);
        return;
    }

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        if (root != null)
            dfs(root, param1, temp, result);
        return result;
    }
}
