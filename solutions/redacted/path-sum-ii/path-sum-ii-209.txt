/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<List<Integer>> res = new ArrayList<>();

    public List<List<Integer>> method1(TreeNode root, int param1) {
        dfs(root, param1, new LinkedList<>());
        return res;
    }

    void dfs(TreeNode node, int remaining, LinkedList<Integer> pres) {
        if (node == null) {
            return;
        }
        pres.add(node.val);
        if (isLeaf(node) && remaining == node.val) {
            res.add(new ArrayList<>(pres));
        }
        dfs(node.left, remaining - node.val, pres);
        dfs(node.right, remaining - node.val, pres);
        pres.removeLast();
    }

    boolean isLeaf(TreeNode root) {
        return root.left == null && root.right == null;
    }
}
