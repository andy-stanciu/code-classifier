/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null)
            return result;
        backtrack(root, 0, param1, result, new ArrayList<Integer>());
        return result;
    }

    private void backtrack(TreeNode node, int param2, int param1, List<List<Integer>> result, List<Integer> current) {
        param2 += node.val;
        current.add(node.val);
        if (node.left == null && node.right == null) {
            if (param2 == param1)
                result.add(new ArrayList<Integer>(current));
            param2 -= node.val;
            current.remove(current.size() - 1);
            return;
        }
        if (node.left != null)
            backtrack(node.left, param2, param1, result, current);
        if (node.right != null)
            backtrack(node.right, param2, param1, result, current);
        param2 -= node.val;
        current.remove(current.size() - 1);
    }
}
