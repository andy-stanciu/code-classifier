class Solution {

    public int[] intersect(int[] nums1, int[] nums2) {
        List<Integer> ans = new ArrayList<>();
        int n1 = nums1.length;
        int n2 = nums2.length;
        HashMap<Integer, Integer> map1 = new HashMap<>();
        HashMap<Integer, Integer> map2 = new HashMap<>();
        for (int i = 0; i < n1; i++) {
            if (map1.containsKey(nums1[i])) {
                map1.put(nums1[i], map1.get(nums1[i]) + 1);
            } else {
                map1.put(nums1[i], 1);
            }
        }
        for (int i = 0; i < n2; i++) {
            if (map2.containsKey(nums2[i])) {
                map2.put(nums2[i], map2.get(nums2[i]) + 1);
            } else {
                map2.put(nums2[i], 1);
            }
        }
        for (Map.Entry<Integer, Integer> e : map1.entrySet()) {
            if (map2.containsKey(e.getKey())) {
                int len = e.getValue();
                len = Math.min(len, map2.get(e.getKey()));
                for (int i = 0; i < len; i++) {
                    ans.add(e.getKey());
                }
            }
        }
        return ans.stream().mapToInt(Integer::intValue).toArray();
    }
}
