class Solution {

    public int[] intersect(int[] nums1, int[] nums2) {
        // Failed approach
        // int ol = Math.max(n, m);
        // int il = Math.min(n, m);
        // List<Integer> hs = new ArrayList<>();
        // if(n > m){
        //     for(int i = 0 ;i < il; i++){
        //         for(int j = 0 ; j < ol; j++){
        //             if(nums1[j] == nums2[i]){
        //                 hs.add(nums1[j]);
        //                 break;
        //             }
        //         }
        //     }
        // }else{
        //     for(int i = 0 ;i < il; i++){
        //         for(int j = 0 ; j < ol; j++){
        //             if(nums1[i] == nums2[j]){
        //                 hs.add(nums2[j]);
        //                 break;
        //             }
        //         }
        //     }
        // }
        // int ans[] = new int[hs.size()];
        // int i = 0 ;
        // for(Integer value : hs){
        //     ans[i] = value;
        //     i++;
        // }
        // return ans;
        // Map approach
        int n = nums1.length;
        int m = nums2.length;
        Map<Integer, Integer> hm = new HashMap<>();
        for (int i = 0; i < n; i++) {
            hm.put(nums1[i], hm.getOrDefault(nums1[i], 0) + 1);
        }
        // int [] ans = new int[]
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            int num = nums2[i];
            if (hm.getOrDefault(num, 0) > 0) {
                hm.put(num, hm.get(num) - 1);
                ans.add(num);
            }
        }
        int[] result = new int[ans.size()];
        for (int i = 0; i < ans.size(); i++) {
            result[i] = ans.get(i);
        }
        return result;
    }
}
