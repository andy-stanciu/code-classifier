class Solution {

    public int[] intersect(int[] nums1, int[] nums2) {
        // In both arrays we have only items between 0 and 1000, so we do not need to use a hash map, but a hash table backed by an array
        int[] nums1_hashtable = new int[1001];
        for (int i = 0; i < nums1.length; i++) {
            // We iterate over the nums1 array and identify frequencies of the items in the array
            nums1_hashtable[nums1[i]]++;
        }
        // Now we find the intersection items
        // As we do not have any preliminary info about the intersection, we need an array or list with flexible length
        List<Integer> intersec = new LinkedList<>();
        for (int i = 0; i < nums2.length; i++) {
            if (nums1_hashtable[nums2[i]] > 0) {
                // Both arrays have the item, so it is intersection
                intersec.add(nums2[i]);
                // Each element in the result must appear as many times as it shows in both arrays
                nums1_hashtable[nums2[i]]--;
            }
        }
        // Let\'s convert the list to an array
        int[] ans = new int[intersec.size()];
        for (int i = 0; i < intersec.size(); i++) {
            ans[i] = intersec.get(i);
        }
        return ans;
    }
}
