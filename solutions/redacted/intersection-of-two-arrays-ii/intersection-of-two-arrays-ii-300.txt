class Solution {

    public int[] intersect(int[] nums1, int[] nums2) {
        // Map<Integer, Integer> map1 = new TreeMap<>();
        // Map<Integer, Integer> map2 = new TreeMap<>();
        // for(int i=0;i<nums1.length;i++){
        //     if(!map1.containsKey(nums1[i])){
        //         map1.put(nums1[i],1);
        //     }else{
        //         map1.put(nums1[i], map1.get(nums1[i])+1);
        //     }
        // }
        // for(int i=0;i<nums2.length;i++){
        //     if(!map2.containsKey(nums2[i])){
        //         map2.put(nums2[i],1);
        //     }else{
        //         map2.put(nums2[i], map2.get(nums2[i])+1);
        //     }
        // }
        //  List<Integer> resultList = new ArrayList<>();
        // // Iterate over the keys of the first map
        // for (Integer key : map1.keySet()) {
        //     // Check if the second map contains the same key
        //     if (map2.containsKey(key)) {
        //         // Get the values from both maps
        //         int value1 = map1.get(key);
        //         int value2 = map2.get(key);
        //         // Get the minimum occurrence value
        //         int minOccurrence = Math.min(value1, value2);
        //         // Add the key to the result list minOccurrence times
        //         for (int i = 0; i < minOccurrence; i++) {
        //             resultList.add(key);
        //         }
        //     }
        // }
        // // Convert the result list to an array (if needed)
        //  int[] resultArray = new int[resultList.size()];
        // for (int i = 0; i < resultList.size(); i++) {
        //     resultArray[i] = resultList.get(i);
        // }
        // return resultArray;
        // Approach 2
        List<Integer> resultList = new ArrayList<>();
        for (int i = 0; i < nums1.length; i++) {
            if (check(nums1[i], nums2)) {
                resultList.add(nums1[i]);
            }
        }
        int[] result = new int[resultList.size()];
        for (int i = 0; i < resultList.size(); i++) {
            result[i] = resultList.get(i);
        }
        return result;
    }

    public boolean check(int n, int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            if (n == nums[i]) {
                nums[i] = -1;
                return true;
            }
        }
        return false;
    }
}
