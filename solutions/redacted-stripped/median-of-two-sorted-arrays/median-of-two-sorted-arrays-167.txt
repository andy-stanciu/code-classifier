class Solution {

    public static double BinarySolution(int[] arr1, int[] arr2) {
        int n1 = arr1.length;
        int n2 = arr2.length;
        int totalLeft = (n1 + n2 + 1) / 2;
        if (n1 > n2)
            return BinarySolution(arr2, arr1);
        int n = n1 + n2;
        int s = 0;
        int e = n1;
        while (s <= e) {
            int l1 = Integer.MIN_VALUE;
            int l2 = Integer.MIN_VALUE;
            int r1 = Integer.MAX_VALUE;
            int r2 = Integer.MAX_VALUE;
            int mid = (s + e) / 2;
            int mid1 = mid;
            int mid2 = totalLeft - mid1;
            if (mid1 > 0)
                l1 = arr1[mid1 - 1];
            if (mid2 > 0)
                l2 = arr2[mid2 - 1];
            if (mid1 < n1)
                r1 = arr1[mid1];
            if (mid2 < n2)
                r2 = arr2[mid2];
            if (l1 <= r2 && l2 <= r1) {
                if (n % 2 == 0) {
                    return (double) (Math.max(l1, l2) + Math.min(r1, r2)) / (double) 2;
                } else {
                    return Math.max(l1, l2);
                }
            }
            if (l1 > r2) {
                e = mid - 1;
            } else if (l2 > r1) {
                s = mid + 1;
            }
        }
        return -1;
    }

    public static double LinearSolution(int[] arr1, int[] arr2) {
        int n1 = arr1.length;
        int n2 = arr2.length;
        int ind1 = ((n1 + n2) / 2) - 1;
        int ind2 = ind1 + 1;
        int ptr1Val = -1, ptr2Val = -1;
        int count = 0;
        int i = 0, j = 0;
        while (i < n1 && j < n2) {
            if (arr1[i] <= arr2[j]) {
                if (count == ind1)
                    ptr1Val = arr1[i];
                if (count == ind2)
                    ptr2Val = arr1[i];
                i++;
                count++;
            } else {
                if (count == ind1)
                    ptr1Val = arr2[j];
                if (count == ind2)
                    ptr2Val = arr2[j];
                j++;
                count++;
            }
        }
        while (i < n1) {
            if (count == ind1)
                ptr1Val = arr1[i];
            if (count == ind2)
                ptr2Val = arr1[i];
            i++;
            count++;
        }
        while (j < n2) {
            if (count == ind1)
                ptr1Val = arr2[j];
            if (count == ind2)
                ptr2Val = arr2[j];
            j++;
            count++;
        }
        if ((n1 + n2) % 2 == 0)
            return (double) (ptr1Val + ptr2Val) / (double) 2;
        else
            return (double) ptr2Val;
    }

    public double method1(int[] nums1, int[] nums2) {
        return BinarySolution(nums1, nums2);
    }
}
