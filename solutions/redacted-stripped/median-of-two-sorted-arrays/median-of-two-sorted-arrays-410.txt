class Solution {

    public double method1(int[] nums1, int[] nums2) {
        PriorityQueue<Integer> maxheap = new PriorityQueue<>(Collections.reverseOrder());
        int len = nums1.length + nums2.length;
        int heaplen = (int) (len / 2) + 1;
        int i = 0, j = 0;
        while (maxheap.size() < heaplen) {
            int curr_val = 0;
            if (i < nums1.length && j < nums2.length) {
                if (nums1[i] < nums2[j]) {
                    curr_val = nums1[i];
                    i++;
                } else {
                    curr_val = nums2[j];
                    j++;
                }
            } else if (i >= nums1.length && j < nums2.length) {
                curr_val = nums2[j];
                j++;
            } else if (j >= nums2.length && i < nums1.length) {
                curr_val = nums1[i];
                i++;
            }
            maxheap.add(curr_val);
        }
        if (len % 2 != 0) {
            return (double) maxheap.poll();
        }
        return (maxheap.poll() + maxheap.poll()) / 2.0;
    }
}
