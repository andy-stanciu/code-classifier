class Solution {

    public double method1(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        if (n1 == 0 && n2 % 2 != 0) {
            return nums2[n2 / 2];
        }
        if (n2 == 0 && n1 % 2 != 0) {
            return nums1[n1 / 2];
        }
        if (n1 > n2)
            return method1(nums2, nums1);
        int l = 0;
        int r = n1;
        int total = n1 + n2;
        while (l <= r) {
            int mid1 = l + (r - l) / 2;
            int mid2 = (total + 1) / 2 - mid1;
            if (mid1 > 0 && mid2 < n2 && nums1[mid1 - 1] > nums2[mid2])
                r = mid1 - 1;
            else if (mid2 > 0 && mid1 < n1 && nums2[mid2 - 1] > nums1[mid1]) {
                l = mid1 + 1;
            } else {
                int maxLeft = Integer.MIN_VALUE;
                if (mid1 > 0)
                    maxLeft = Math.max(maxLeft, nums1[mid1 - 1]);
                if (mid2 > 0)
                    maxLeft = Math.max(maxLeft, nums2[mid2 - 1]);
                if (total % 2 != 0)
                    return maxLeft;
                int minRight = Integer.MAX_VALUE;
                if (mid1 < n1)
                    minRight = Math.min(minRight, nums1[mid1]);
                if (mid2 < n2)
                    minRight = Math.min(minRight, nums2[mid2]);
                return (maxLeft + minRight) / 2.0;
            }
        }
        System.out.println("Returning 0");
        return 0;
    }
}
