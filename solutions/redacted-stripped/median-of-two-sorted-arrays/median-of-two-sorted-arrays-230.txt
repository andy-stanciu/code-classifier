class Solution {

    public double method1(int[] nums1, int[] nums2) {
        boolean isEven = (nums1.length + nums2.length) % 2 == 0;
        int midIdx = (nums1.length + nums2.length) / 2;
        if (isEven)
            midIdx--;
        if (nums1.length == 0) {
            return isEven ? ((double) nums2[midIdx] + (double) nums2[midIdx + 1]) / 2 : nums2[midIdx];
        } else if (nums2.length == 0) {
            return isEven ? ((double) nums1[midIdx] + (double) nums1[midIdx + 1]) / 2 : nums1[midIdx];
        }
        int p1 = 0;
        int p2 = 0;
        int mid1 = 0;
        int mid2 = 0;
        int count = -1;
        while (count <= midIdx && p1 < nums1.length && p2 < nums2.length) {
            if (nums1[p1] < nums2[p2]) {
                if (count < midIdx)
                    mid1 = nums1[p1];
                else
                    mid2 = nums1[p1];
                p1++;
            } else {
                if (count < midIdx)
                    mid1 = nums2[p2];
                else
                    mid2 = nums2[p2];
                p2++;
            }
            count++;
        }
        while (count <= midIdx && p1 < nums1.length) {
            if (count < midIdx)
                mid1 = nums1[p1];
            else
                mid2 = nums1[p1];
            p1++;
            count++;
        }
        while (count <= midIdx && p2 < nums2.length) {
            if (count < midIdx)
                mid1 = nums2[p2];
            else
                mid2 = nums2[p2];
            p2++;
            count++;
        }
        return isEven ? ((double) (mid1 + mid2)) / 2 : (double) mid1;
    }
}
