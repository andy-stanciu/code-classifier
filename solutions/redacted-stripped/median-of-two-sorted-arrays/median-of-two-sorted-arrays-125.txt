class Solution {

    public double method1(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        if (n > m) {
            return method1(nums2, nums1);
        }
        int start = 0;
        int end = n;
        double res = 0;
        while (start <= end) {
            int i1 = (start + end) / 2;
            int i2 = (n + m + 1) / 2 - i1;
            int min1 = (i1 == n) ? Integer.MAX_VALUE : nums1[i1];
            int max1 = (i1 == 0) ? Integer.MIN_VALUE : nums1[i1 - 1];
            int min2 = (i2 == m) ? Integer.MAX_VALUE : nums2[i2];
            int max2 = (i2 == 0) ? Integer.MIN_VALUE : nums2[i2 - 1];
            if ((max1 <= min2) && (max2 <= min1)) {
                if ((n + m) % 2 == 0) {
                    res = (Math.max(max1, max2) + Math.min(min1, min2)) * 0.5;
                } else {
                    res = Math.max(max1, max2);
                }
                break;
            } else if (max1 > min2) {
                end = i1 - 1;
            } else {
                start = i1 + 1;
            }
        }
        return res;
    }
}
