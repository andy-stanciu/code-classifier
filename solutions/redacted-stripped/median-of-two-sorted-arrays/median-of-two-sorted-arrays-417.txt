class Solution {

    public double method1(int[] nums1, int[] nums2) {
        if (nums1.length > nums2.length) {
            return method1(nums2, nums1);
        }
        int m = nums1.length;
        int n = nums2.length;
        int left = 0, right = m;
        while (left <= right) {
            int mid1 = left + (right - left) / 2;
            int mid2 = (m + n + 1) / 2 - mid1;
            int maxleft1 = (mid1 == 0) ? Integer.MIN_VALUE : nums1[mid1 - 1];
            int maxleft2 = (mid2 == 0) ? Integer.MIN_VALUE : nums2[mid2 - 1];
            int maxright1 = (mid1 == m) ? Integer.MAX_VALUE : nums1[mid1];
            int maxright2 = (mid2 == n) ? Integer.MAX_VALUE : nums2[mid2];
            if (maxleft1 <= maxright2 && maxleft2 <= maxright1) {
                if ((m + n) % 2 == 1) {
                    return Math.max(maxleft1, maxleft2);
                } else {
                    return (Math.max(maxleft1, maxleft2) + Math.min(maxright1, maxright2)) / 2.0;
                }
            } else if (maxleft1 > maxright2) {
                right = mid1 - 1;
            } else {
                left = mid1 + 1;
            }
        }
        return -1;
    }
}
