class Solution {

    public double method1(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        int n = n1 + n2;
        int halfLen = (n + 1) / 2;
        if (n1 > n2)
            return method1(nums2, nums1);
        int low = 0;
        int high = n1;
        while (low <= high) {
            int mid1 = (low + high) / 2;
            int mid2 = halfLen - mid1;
            long l1 = mid1 >= 1 ? nums1[mid1 - 1] : Long.MIN_VALUE;
            long r1 = mid1 < n1 ? nums1[mid1] : Long.MAX_VALUE;
            long l2 = mid2 >= 1 ? nums2[mid2 - 1] : Long.MIN_VALUE;
            long r2 = mid2 < n2 ? nums2[mid2] : Long.MAX_VALUE;
            if (l1 <= r2 && l2 <= r1) {
                if (n % 2 == 0) {
                    double left = Math.max(l1, l2);
                    double right = Math.min(r1, r2);
                    return (left + right) / 2;
                } else {
                    return Math.max(l1, l2);
                }
            } else if (l2 > r1)
                low = mid1 + 1;
            else if (l1 > r2)
                high = mid1 - 1;
        }
        return 0;
    }
}
