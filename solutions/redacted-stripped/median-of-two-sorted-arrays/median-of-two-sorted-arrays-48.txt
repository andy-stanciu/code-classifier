class Solution {

    public double method1(int[] nums1, int[] nums2) {
        if (nums1.length > nums2.length) {
            return method1(nums2, nums1);
        }
        int n = nums1.length;
        int m = nums2.length;
        int start = 0;
        int end = n;
        while (start <= end) {
            int mid1 = start + (end - start) / 2;
            int mid2 = (n + m + 1) / 2 - mid1;
            int left1 = (mid1 == 0) ? Integer.MIN_VALUE : nums1[mid1 - 1];
            int right1 = (mid1 == n) ? Integer.MAX_VALUE : nums1[mid1];
            int left2 = (mid2 == 0) ? Integer.MIN_VALUE : nums2[mid2 - 1];
            int right2 = (mid2 == m) ? Integer.MAX_VALUE : nums2[mid2];
            if (right1 >= left2 && right2 >= left1) {
                if ((n + m) % 2 == 0) {
                    return (double) (Math.max(left1, left2) + Math.min(right1, right2)) / 2.0;
                } else {
                    return (double) Math.max(left1, left2);
                }
            } else if (right2 < left1) {
                end = mid1 - 1;
            } else {
                start = mid1 + 1;
            }
        }
        return 0.0;
    }
}
