class Solution {

    public double method1(int[] nums1, int[] nums2) {
        final int[] arr1, arr2;
        if (nums1.length < nums2.length) {
            arr1 = nums2;
            arr2 = nums1;
        } else {
            arr1 = nums1;
            arr2 = nums2;
        }
        final int s, e;
        s = 0;
        e = arr1.length;
        int i1 = search(s, e, arr1, arr2);
        int i2 = ((arr1.length + arr2.length) / 2) - i1;
        int v1, n1, v2, n2;
        v1 = i1 == 0 ? -Integer.MAX_VALUE : arr1[i1 - 1];
        n1 = i1 + 1 > arr1.length ? Integer.MAX_VALUE : arr1[i1];
        v2 = i2 == 0 ? -Integer.MAX_VALUE : arr2[i2 - 1];
        n2 = i2 + 1 > arr2.length ? Integer.MAX_VALUE : arr2[i2];
        if ((arr1.length + arr2.length) % 2 == 0) {
            return ((double) Math.max(v1, v2) + (double) Math.min(n1, n2)) / 2.0d;
        } else {
            return (double) Math.min(n1, n2);
        }
    }

    private int search(int s, int e, int[] arr1, int[] arr2) {
        int m = (s + e) / 2;
        int mc = ((arr1.length + arr2.length) / 2) - m;
        if (mc < 0) {
            return search(s, m - 1, arr1, arr2);
        } else if (mc > arr2.length) {
            return search(m + 1, e, arr1, arr2);
        } else if (mc != arr2.length && arr2[mc] < arr1[m - 1]) {
            return search(s, m - 1, arr1, arr2);
        } else if (mc > 0 && arr1[m] < arr2[mc - 1]) {
            return search(m + 1, e, arr1, arr2);
        } else {
            return m;
        }
    }
}
