class Solution {

    public double method1(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        if (m < n) {
            return method1(nums2, nums1);
        }
        int left, right;
        left = 0;
        right = n;
        int mid = (n + m + 1) / 2;
        while (left <= right) {
            int mid1 = (left + right) / 2;
            int mid2 = mid - mid1;
            int left1 = (mid1 == 0) ? Integer.MIN_VALUE : nums1[mid1 - 1];
            int left2 = (mid2 == 0) ? Integer.MIN_VALUE : nums2[mid2 - 1];
            int right1 = (mid1 == n) ? Integer.MAX_VALUE : nums1[mid1];
            int right2 = (mid2 == m) ? Integer.MAX_VALUE : nums2[mid2];
            if (left1 <= right2 && left2 <= right1) {
                if ((m + n) % 2 == 0) {
                    return (double) ((double) (Math.max(left1, left2) + Math.min(right1, right2))) / 2;
                } else {
                    return (double) (Math.max(left1, left2));
                }
            } else if (left1 > right2) {
                right = mid1 - 1;
            } else {
                left = mid1 + 1;
            }
        }
        return 0.0;
    }
}
