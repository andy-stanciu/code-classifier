class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums.length < 3) {
            return result;
        }
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            if (i != 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            findPairs(nums, i, result);
        }
        return result;
    }

    private void findPairs(int[] nums, int i, List<List<Integer>> result) {
        int target = -nums[i];
        int start = i + 1;
        int end = nums.length - 1;
        while (start < end) {
            if (nums[start] + nums[end] == target) {
                result.add(Arrays.asList(-target, nums[start], nums[end]));
                start++;
                end--;
                while (start < end && nums[start] == nums[start - 1]) {
                    start++;
                }
                while (start < end && nums[end] == nums[end + 1]) {
                    end--;
                }
            } else if (nums[start] + nums[end] > target) {
                end--;
            } else {
                start++;
            }
        }
    }
}
