class Solution {

    public String method1(String s) {
        Map<Character, Integer> count = new HashMap<>();
        PriorityQueue<Map.Entry<Character, Integer>> minHeap = new PriorityQueue<>((a, b) -> {
            int keyComparison = b.getValue().compareTo(a.getValue());
            if (keyComparison != 0)
                return keyComparison;
            return a.getKey().compareTo(b.getKey());
        });
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            count.put(s.charAt(i), count.getOrDefault(s.charAt(i), 0) + 1);
        }
        for (Map.Entry<Character, Integer> entry : count.entrySet()) {
            minHeap.add(entry);
        }
        while (!minHeap.isEmpty()) {
            Map.Entry<Character, Integer> pair = minHeap.poll();
            char character = pair.getKey();
            int var1 = pair.getValue();
            for (int i = 0; i < var1; i++) {
                result.append(character);
            }
        }
        return result.toString();
    }
}
