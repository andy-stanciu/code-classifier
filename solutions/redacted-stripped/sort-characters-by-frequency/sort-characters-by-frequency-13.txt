class Pair implements Comparable<Pair> {

    char c;

    int value;

    public Pair(char c, int value) {
        this.c = c;
        this.value = value;
    }

    @Override
    public int compareTo(Pair p) {
        int x = p.value - this.value;
        if (x == 0) {
            return this.c - p.c;
        }
        return x;
    }
}

class Solution {

    public String method1(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            pq.add(new Pair(entry.getKey(), entry.getValue()));
        }
        StringBuilder result = new StringBuilder();
        while (!pq.isEmpty()) {
            Pair pair = pq.poll();
            for (int i = 0; i < pair.value; i++) {
                result.append(pair.c);
            }
        }
        return result.toString();
    }
}
