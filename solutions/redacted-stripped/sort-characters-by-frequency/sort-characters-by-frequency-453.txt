class Solution {

    public String method1(String s) {
        HashMap<Character, Integer> charMap = new HashMap<Character, Integer>();
        char[] unorderedChars = s.toCharArray();
        char currChar;
        int currOccurences;
        for (int i = 0; i < unorderedChars.length; i++) {
            currChar = unorderedChars[i];
            if (charMap.containsKey(currChar)) {
                currOccurences = charMap.get(currChar);
                charMap.put(currChar, currOccurences + 1);
            } else {
                charMap.put(currChar, 1);
            }
        }
        PriorityQueue<CountItem> countQ = new PriorityQueue<CountItem>(new ItemComparator());
        for (char c : charMap.keySet()) {
            countQ.add(new CountItem(c, charMap.get(c)));
        }
        StringBuilder strBuilder = new StringBuilder();
        CountItem countTemp;
        while (!countQ.isEmpty()) {
            countTemp = countQ.poll();
            for (int i = 0; i < countTemp.occurences; i++) {
                strBuilder.append(countTemp.character);
            }
        }
        return strBuilder.toString();
    }

    class CountItem {

        public char character;

        public int occurences;

        public CountItem(char c, int amount) {
            character = c;
            occurences = amount;
        }
    }

    class ItemComparator implements Comparator<CountItem> {

        public int compare(CountItem o1, CountItem o2) {
            if (o1.occurences > o2.occurences)
                return -1;
            else if (o1.occurences < o2.occurences)
                return 1;
            else
                return 0;
        }
    }
}
