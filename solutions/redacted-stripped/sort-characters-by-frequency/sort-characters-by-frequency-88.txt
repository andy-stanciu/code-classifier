class Solution {

    class pair implements Comparable<pair> {

        char c;

        int f;

        public pair(char c, int f) {
            this.c = c;
            this.f = f;
        }

        public int compareTo(pair p) {
            return f - p.f;
        }
    }

    public String method1(String s) {
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        for (int i = 0; i < s.length(); i++) {
            int count = (map.containsKey(s.charAt(i)) ? map.get(s.charAt(i)) : 0) + 1;
            map.put(s.charAt(i), count);
        }
        PriorityQueue<pair> maxheap = new PriorityQueue<pair>(Collections.reverseOrder());
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            maxheap.offer(new pair(entry.getKey(), entry.getValue()));
        }
        StringBuilder sb = new StringBuilder();
        String ans = "";
        sb.append(ans);
        while (maxheap.size() != 0) {
            String temp;
            pair p = maxheap.poll();
            temp = String.valueOf(p.c).repeat(p.f);
            sb.append(temp);
        }
        return sb.toString();
    }
}
