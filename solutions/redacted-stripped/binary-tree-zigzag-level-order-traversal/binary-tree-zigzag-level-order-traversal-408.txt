class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        Queue<TreeNode> que = new LinkedList<>();
        que.offer(root);
        boolean lefttoright = true;
        while (!que.isEmpty()) {
            int lvlsize = que.size();
            List<Integer> lvllist = new ArrayList<>();
            for (int i = 0; i < lvlsize; i++) {
                TreeNode node;
                if (lefttoright) {
                    node = que.poll();
                    lvllist.add(node.val);
                    if (node.left != null) {
                        que.offer(node.left);
                    }
                    if (node.right != null) {
                        que.offer(node.right);
                    }
                } else {
                    node = que.poll();
                    lvllist.add(0, node.val);
                    if (node.left != null) {
                        que.offer(node.left);
                    }
                    if (node.right != null) {
                        que.offer(node.right);
                    }
                }
            }
            result.add(lvllist);
            lefttoright = !lefttoright;
        }
        return result;
    }
}
