class Solution {

    public List<List<Integer>> method1(TreeNode param1) {
        List<List<Integer>> method1 = new ArrayList<>();
        boolean reverseNext = true;
        if (param1 == null) {
            return method1;
        }
        int var1;
        TreeNode var2;
        List<Integer> var3;
        Deque<TreeNode> deque = new ArrayDeque<>();
        deque.offer(param1);
        while (deque.isEmpty() == false) {
            var1 = deque.size();
            var3 = new ArrayList<>();
            for (int index = 0; index < var1; index++) {
                if (reverseNext == true) {
                    var2 = deque.pollLast();
                    if (var2.left != null) {
                        deque.offerFirst(var2.left);
                    }
                    if (var2.right != null) {
                        deque.offerFirst(var2.right);
                    }
                } else {
                    var2 = deque.pollFirst();
                    if (var2.right != null) {
                        deque.offerLast(var2.right);
                    }
                    if (var2.left != null) {
                        deque.offerLast(var2.left);
                    }
                }
                var3.add(Integer.valueOf(var2.val));
            }
            reverseNext = !reverseNext;
            method1.add(var3);
        }
        return method1;
    }
}
