class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> ans = method2(root);
        for (int i = 0; i < ans.size(); i++) {
            if (i % 2 != 0) {
                Collections.reverse(ans.get(i));
            }
        }
        return ans;
    }

    public List<List<Integer>> method2(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null) {
            return ans;
        }
        while (q.size() > 0) {
            List<Integer> list = new ArrayList<>();
            int qLen = q.size();
            for (int i = 0; i < qLen; i++) {
                TreeNode curr = q.poll();
                list.add(curr.val);
                if (curr.left != null) {
                    q.offer(curr.left);
                }
                if (curr.right != null) {
                    q.offer(curr.right);
                }
            }
            ans.add(list);
        }
        return ans;
    }
}
