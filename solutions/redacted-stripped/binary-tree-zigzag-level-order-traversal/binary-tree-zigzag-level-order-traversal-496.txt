class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        Stack<TreeNode> current = new Stack<TreeNode>();
        Stack<TreeNode> next = new Stack<TreeNode>();
        if (root == null)
            return result;
        current.push(root);
        List<Integer> var1 = new ArrayList<Integer>();
        boolean leftToRight = true;
        while (current.size() > 0) {
            TreeNode temp = current.pop();
            var1.add(temp.val);
            if (leftToRight) {
                if (temp.left != null) {
                    next.push(temp.left);
                }
                if (temp.right != null) {
                    next.push(temp.right);
                }
            } else {
                if (temp.right != null) {
                    next.push(temp.right);
                }
                if (temp.left != null) {
                    next.push(temp.left);
                }
            }
            if (current.size() == 0) {
                current = next;
                result.add(var1);
                next = new Stack<TreeNode>();
                var1 = new ArrayList<Integer>();
                leftToRight = !leftToRight;
            }
        }
        return result;
    }
}
