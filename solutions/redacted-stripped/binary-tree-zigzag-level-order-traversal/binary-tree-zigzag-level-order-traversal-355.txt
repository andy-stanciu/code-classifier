class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null) {
            return ans;
        }
        Deque<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        boolean rev = false;
        while (!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> var1 = new ArrayList<>(size);
            for (int i = 0; i < size; i++) {
                if (!rev) {
                    TreeNode current_node = queue.pollFirst();
                    var1.add(current_node.val);
                    if (current_node.left != null) {
                        queue.addLast(current_node.left);
                    }
                    if (current_node.right != null) {
                        queue.addLast(current_node.right);
                    }
                } else {
                    TreeNode current_node = queue.pollLast();
                    var1.add(current_node.val);
                    if (current_node.right != null) {
                        queue.addFirst(current_node.right);
                    }
                    if (current_node.left != null) {
                        queue.addFirst(current_node.left);
                    }
                }
            }
            rev = !rev;
            ans.add(var1);
        }
        return ans;
    }
}
