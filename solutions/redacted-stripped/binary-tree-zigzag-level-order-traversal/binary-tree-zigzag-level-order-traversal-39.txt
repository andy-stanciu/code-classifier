class Solution {

    private List<List<Integer>> result;

    public List<List<Integer>> method1(TreeNode root) {
        result = new ArrayList<>();
        if (root == null)
            return result;
        Deque<TreeNode> deque = new ArrayDeque<>();
        deque.offer(root);
        boolean leftToRight = true;
        while (!deque.isEmpty()) {
            int size = deque.size();
            List<Integer> var1 = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                if (leftToRight) {
                    TreeNode node = deque.pollFirst();
                    var1.add(node.val);
                    if (node.left != null)
                        deque.offerLast(node.left);
                    if (node.right != null)
                        deque.offerLast(node.right);
                } else {
                    TreeNode node = deque.pollLast();
                    var1.add(node.val);
                    if (node.right != null)
                        deque.offerFirst(node.right);
                    if (node.left != null)
                        deque.offerFirst(node.left);
                }
            }
            result.add(var1);
            leftToRight = !leftToRight;
        }
        return result;
    }
}
