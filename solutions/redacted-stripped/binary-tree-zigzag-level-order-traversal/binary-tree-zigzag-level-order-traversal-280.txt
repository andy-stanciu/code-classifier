class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        Deque<TreeNode> deque = new LinkedList<>();
        deque.offerFirst(root);
        boolean reverse = true;
        while (!deque.isEmpty()) {
            int var1 = deque.size();
            List<Integer> var2 = new ArrayList<>(var1);
            for (int i = 0; i < var1; i++) {
                if (reverse) {
                    TreeNode currentNode = deque.removeLast();
                    var2.add(currentNode.val);
                    if (currentNode.left != null) {
                        deque.addFirst(currentNode.left);
                    }
                    if (currentNode.right != null) {
                        deque.addFirst(currentNode.right);
                    }
                } else {
                    TreeNode currentNode = deque.removeFirst();
                    var2.add(currentNode.val);
                    if (currentNode.right != null) {
                        deque.addLast(currentNode.right);
                    }
                    if (currentNode.left != null) {
                        deque.addLast(currentNode.left);
                    }
                }
            }
            result.add(var2);
            if (reverse == true) {
                reverse = false;
            } else {
                reverse = true;
            }
        }
        return result;
    }
}
