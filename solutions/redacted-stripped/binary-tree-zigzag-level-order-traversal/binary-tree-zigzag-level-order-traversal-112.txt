class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        if (root == null) {
            return (new ArrayList<>());
        }
        Queue<TreeNode> queue = new LinkedList<>();
        List<List<Integer>> ans = new ArrayList<>();
        queue.add(root);
        int var1 = 0;
        while (!queue.isEmpty()) {
            int nodes = queue.size();
            List<Integer> temp = new ArrayList<>();
            for (int i = 0; i < nodes; i++) {
                TreeNode node = queue.remove();
                if (node.left != null) {
                    queue.add(node.left);
                }
                if (node.right != null) {
                    queue.add(node.right);
                }
                temp.add(node.val);
            }
            if (var1 % 2 != 0) {
                temp = reverse(temp);
                ans.add(temp);
            } else {
                ans.add(temp);
            }
            var1++;
        }
        return ans;
    }

    public List<Integer> reverse(List<Integer> temp) {
        int left = 0;
        int right = temp.size() - 1;
        while (left < right) {
            int t = temp.get(left);
            temp.set(left, temp.get(right));
            temp.set(right, t);
            left++;
            right--;
        }
        return temp;
    }
}
