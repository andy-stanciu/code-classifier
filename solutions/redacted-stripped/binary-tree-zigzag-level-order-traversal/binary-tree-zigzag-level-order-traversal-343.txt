class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null)
            return res;
        Stack<TreeNode> stack = new Stack<>();
        Queue<TreeNode> queue = new LinkedList<>();
        int i = 0;
        queue.add(root);
        while (!queue.isEmpty() || !stack.isEmpty()) {
            List<Integer> list = new ArrayList<>();
            if (i++ % 2 == 0) {
                int size = queue.size();
                for (int j = 0; j < size; j++) {
                    TreeNode node = queue.poll();
                    list.add(node.val);
                    if (node.left != null)
                        stack.add(node.left);
                    if (node.right != null)
                        stack.add(node.right);
                }
            } else {
                int size = stack.size();
                for (int j = 0; j < size; j++) {
                    TreeNode node = stack.pop();
                    list.add(node.val);
                    if (node.right != null)
                        queue.add(node.right);
                    if (node.left != null)
                        queue.add(node.left);
                }
                reverseQueue(queue);
            }
            res.add(list);
        }
        return res;
    }

    private void reverseQueue(Queue<TreeNode> q) {
        Stack<TreeNode> stack = new Stack();
        while (!q.isEmpty()) {
            TreeNode node = q.poll();
            stack.add(node);
        }
        while (!stack.isEmpty()) {
            TreeNode node = stack.pop();
            q.add(node);
        }
    }
}
