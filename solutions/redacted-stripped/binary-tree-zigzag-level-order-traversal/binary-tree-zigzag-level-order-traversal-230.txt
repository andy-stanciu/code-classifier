class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null)
            return ans;
        Deque<TreeNode> q = new ArrayDeque<>();
        q.offer(root);
        int dir = 1;
        while (!q.isEmpty()) {
            int n = q.size();
            List<Integer> list = new ArrayList<>();
            Deque<Integer> stack = new ArrayDeque<>();
            while (n-- > 0) {
                TreeNode polled = q.poll();
                if (dir > 0) {
                    list.add(polled.val);
                } else {
                    stack.push(polled.val);
                }
                if (polled.left != null)
                    q.offer(polled.left);
                if (polled.right != null)
                    q.offer(polled.right);
            }
            while (!stack.isEmpty()) {
                list.add(stack.pop());
            }
            ans.add(list);
            dir *= -1;
        }
        return ans;
    }
}
