class Solution {

    private List<List<Integer>> ans = new ArrayList<>();

    public List<List<Integer>> method1(TreeNode root) {
        if (root == null) {
            return ans;
        }
        List<Integer> temp;
        boolean z = false;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while (!q.isEmpty()) {
            int n = q.size();
            temp = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                TreeNode t = q.poll();
                temp.add(t.val);
                if (t.left != null) {
                    q.add(t.left);
                }
                if (t.right != null) {
                    q.add(t.right);
                }
            }
            if (z) {
                rev(temp);
            }
            ans.add(temp);
            z = !z;
        }
        return ans;
    }

    private void rev(List<Integer> l) {
        int i = 0, j = l.size() - 1;
        while (i < j) {
            int temp = l.get(i);
            l.set(i, l.get(j));
            l.set(j, temp);
            i++;
            j--;
        }
    }
}
