class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        Stack<TreeNode> s1 = new Stack<>();
        Stack<TreeNode> s2 = new Stack<>();
        if (root != null) {
            s1.push(root);
        } else {
            return ans;
        }
        while (!s1.isEmpty() || !s2.isEmpty()) {
            List<Integer> tempAns1 = new ArrayList<>();
            List<Integer> tempAns2 = new ArrayList<>();
            while (!s1.isEmpty()) {
                TreeNode temp = s1.peek();
                s1.pop();
                tempAns1.add(temp.val);
                if (temp.left != null) {
                    s2.push(temp.left);
                }
                if (temp.right != null) {
                    s2.push(temp.right);
                }
            }
            if (!tempAns1.isEmpty()) {
                ans.add(tempAns1);
            }
            while (!s2.isEmpty()) {
                TreeNode temp = s2.peek();
                s2.pop();
                tempAns2.add(temp.val);
                if (temp.right != null) {
                    s1.push(temp.right);
                }
                if (temp.left != null) {
                    s1.push(temp.left);
                }
            }
            if (!tempAns2.isEmpty()) {
                ans.add(tempAns2);
            }
        }
        return ans;
    }
}
