class Solution {

    static void traverse(TreeNode node, List<List<Integer>> arr) {
        if (node.left == null && node.right == null) {
            ArrayList<Integer> sub = new ArrayList<>();
            sub.add(node.val);
            arr.add(sub);
            return;
        }
        Queue<TreeNode> q = new ArrayDeque<>();
        q.add(node);
        int var1 = 0;
        while (!q.isEmpty()) {
            int size = q.size();
            ArrayList<Integer> sub = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                TreeNode n = q.peek();
                if (n.left != null)
                    q.add(n.left);
                if (n.right != null)
                    q.add(n.right);
                sub.add(n.val);
                q.poll();
            }
            if (var1 % 2 != 0)
                Collections.reverse(sub);
            arr.add(sub);
            var1++;
        }
    }

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> var2 = new ArrayList<>();
        if (root == null)
            return var2;
        traverse(root, var2);
        return var2;
    }
}
