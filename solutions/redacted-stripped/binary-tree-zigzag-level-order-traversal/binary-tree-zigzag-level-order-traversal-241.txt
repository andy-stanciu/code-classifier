class Solution {

    class pair {

        int var1;

        TreeNode node;

        public pair(TreeNode n, int l) {
            var1 = l;
            node = n;
        }
    }

    public List<List<Integer>> method1(TreeNode root) {
        if (root == null)
            return new ArrayList<>();
        Queue<pair> q = new LinkedList<>();
        Map<Integer, List<Integer>> map = new TreeMap<>();
        q.add(new pair(root, 0));
        while (!q.isEmpty()) {
            pair curr = q.poll();
            int var1 = curr.var1;
            TreeNode node = curr.node;
            if (!map.containsKey(var1)) {
                map.put(var1, new ArrayList());
            }
            map.get(var1).add(node.val);
            if (node.left != null) {
                q.add(new pair(node.left, var1 + 1));
            }
            if (node.right != null) {
                q.add(new pair(node.right, var1 + 1));
            }
        }
        List<List<Integer>> list = new ArrayList<>();
        for (int i = 0; i < map.size(); i++) {
            List<Integer> x = map.get(i);
            if (i % 2 != 0) {
                Collections.reverse(x);
            }
            list.add(x);
        }
        return list;
    }
}
