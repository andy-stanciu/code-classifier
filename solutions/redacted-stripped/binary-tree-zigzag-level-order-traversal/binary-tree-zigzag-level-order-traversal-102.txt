class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> list = new LinkedList<>();
        if (root == null) {
            return list;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        int k = 0;
        while (!queue.isEmpty()) {
            List<Integer> subList = new LinkedList<>();
            var numberOfNodes = queue.size();
            for (int i = 0; i < numberOfNodes; i++) {
                if (queue.peek().left != null) {
                    queue.offer(queue.peek().left);
                }
                if (queue.peek().right != null) {
                    queue.offer(queue.peek().right);
                }
                subList.add(queue.poll().val);
            }
            if (k % 2 != 0) {
                Collections.reverse(subList);
            }
            list.add(subList);
            ++k;
        }
        return list;
    }
}
