class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();
        List<List<Integer>> list = new ArrayList<>();
        if (root == null)
            return list;
        q.add(root);
        int var1 = 0;
        while (!q.isEmpty()) {
            int nodeCount = q.size();
            List<Integer> subList = new ArrayList<>();
            Stack<Integer> st = new Stack<>();
            for (int i = 0; i < nodeCount; i++) {
                TreeNode curr = q.poll();
                if (var1 % 2 == 0) {
                    subList.add(curr.val);
                } else {
                    st.push(curr.val);
                }
                if (curr.left != null) {
                    q.add(curr.left);
                }
                if (curr.right != null) {
                    q.add(curr.right);
                }
            }
            if (var1 % 2 != 0) {
                while (!st.isEmpty()) {
                    subList.add(st.pop());
                }
            }
            list.add(subList);
            var1++;
        }
        return list;
    }
}
