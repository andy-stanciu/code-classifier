class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> ans = new ArrayList();
        Deque<TreeNode> deque = new LinkedList();
        if (root != null)
            deque.push(root);
        int count = 0;
        while (!deque.isEmpty()) {
            Deque<TreeNode> tempDeque = new LinkedList();
            List<Integer> currentList = new ArrayList();
            while (!deque.isEmpty()) {
                TreeNode node = deque.poll();
                currentList.add(node.val);
                if (count % 2 == 0) {
                    if (node.left != null)
                        tempDeque.push(node.left);
                    if (node.right != null)
                        tempDeque.push(node.right);
                } else {
                    if (node.right != null)
                        tempDeque.push(node.right);
                    if (node.left != null)
                        tempDeque.push(node.left);
                }
            }
            ans.add(currentList);
            count++;
            deque = tempDeque;
        }
        return ans;
    }
}
