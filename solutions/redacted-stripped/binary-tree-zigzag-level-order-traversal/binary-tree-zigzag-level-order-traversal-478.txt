class Solution {

    public void help(TreeNode root, List<List<Integer>> res) {
        if (root == null) {
            return;
        }
        ArrayDeque<TreeNode> q = new ArrayDeque<>();
        q.add(root);
        int count = 0;
        while (!q.isEmpty()) {
            int n = q.size();
            List<Integer> temp = new LinkedList<>();
            for (int i = 0; i < n; i++) {
                if (q.peek().left != null) {
                    q.add(q.peek().left);
                }
                if (q.peek().right != null) {
                    q.add(q.peek().right);
                }
                temp.add(q.peek().val);
                q.pop();
            }
            if (count % 2 == 0) {
                res.add(temp);
            } else {
                ArrayList<Integer> arr = new ArrayList<>();
                for (int i = temp.size() - 1; i >= 0; i--) {
                    arr.add(temp.get(i));
                }
                res.add(arr);
            }
            count++;
        }
    }

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> res = new LinkedList<>();
        help(root, res);
        return res;
    }
}
