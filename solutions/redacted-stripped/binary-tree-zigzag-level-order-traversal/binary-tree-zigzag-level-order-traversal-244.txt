class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        return method2(root);
    }

    List<List<Integer>> method2(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) {
            return res;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        boolean leftToRight = true;
        queue.add(root);
        while (!queue.isEmpty()) {
            int len = queue.size();
            List<Integer> li = new ArrayList<>();
            Stack<Integer> stack = new Stack<>();
            for (int i = 0; i < len; i++) {
                TreeNode node = queue.remove();
                if (leftToRight) {
                    li.add(node.val);
                } else {
                    stack.push(node.val);
                }
                if (node.left != null) {
                    queue.add(node.left);
                }
                if (node.right != null) {
                    queue.add(node.right);
                }
            }
            if (!leftToRight) {
                while (!stack.isEmpty()) {
                    li.add(stack.pop());
                }
            }
            res.add(li);
            leftToRight = !leftToRight;
        }
        return res;
    }
}
