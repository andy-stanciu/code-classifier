class Solution {

    void zbfs(TreeNode n, int param1, List<List<Integer>> ans) {
        if (n == null) {
            return;
        }
        List<Integer> currLvl;
        if (ans.size() > param1) {
            currLvl = ans.get(param1);
        } else {
            currLvl = new LinkedList();
            ans.add(currLvl);
        }
        if (param1 % 2 == 0) {
            currLvl.add(n.val);
        } else {
            currLvl.add(0, n.val);
        }
        if (n.left != null) {
            zbfs(n.left, param1 + 1, ans);
        }
        if (n.right != null) {
            zbfs(n.right, param1 + 1, ans);
        }
    }

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> ans = new LinkedList();
        zbfs(root, 0, ans);
        return ans;
    }
}
