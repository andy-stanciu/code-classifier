class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) {
            return res;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            int var1 = queue.size();
            List<Integer> current = new ArrayList<>();
            for (int i = 0; i < var1; i++) {
                TreeNode currNode = queue.poll();
                current.add(currNode.val);
                if (currNode.left != null) {
                    queue.offer(currNode.left);
                }
                if (currNode.right != null) {
                    queue.offer(currNode.right);
                }
            }
            res.add(current);
        }
        for (int i = 0; i < res.size(); i++) {
            if (i % 2 == 1) {
                res.set(i, rev(res.get(i)));
            }
        }
        return res;
    }

    public List<Integer> rev(List<Integer> a) {
        List<Integer> res = new ArrayList<>();
        for (int i = a.size() - 1; i >= 0; i--) {
            res.add(a.get(i));
        }
        return res;
    }
}
