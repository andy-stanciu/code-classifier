class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> var1 = new ArrayList<>();
        if (root == null) {
            return var1;
        }
        int var2 = 1;
        Queue<List<TreeNode>> queue = new LinkedList<>();
        queue.offer(Collections.singletonList(root));
        while (!queue.isEmpty()) {
            List<TreeNode> nodes = queue.remove();
            List<TreeNode> toPush = new ArrayList<>();
            List<Integer> valuesToAdd = new ArrayList<>();
            for (TreeNode node : nodes) {
                valuesToAdd.add(node.val);
                if (node.left != null) {
                    toPush.add(node.left);
                }
                if (node.right != null) {
                    toPush.add(node.right);
                }
            }
            if (var2 == -1) {
                Collections.reverse(valuesToAdd);
            }
            var1.add(valuesToAdd);
            if (toPush.isEmpty()) {
                break;
            }
            queue.offer(toPush);
            var2 *= -1;
        }
        return var1;
    }

    private void display(List<List<Integer>> ans) {
        for (List<Integer> list : ans) {
            for (Integer val : list) {
                System.out.print(" " + val);
            }
            System.out.println("");
        }
    }
}
