class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        Deque<TreeNode> deque = new ArrayDeque<>();
        int flag = 0;
        if (root == null) {
            return result;
        }
        deque.addFirst(root);
        while (!deque.isEmpty()) {
            int var1 = deque.size();
            List<Integer> subList = new ArrayList<>();
            for (int i = 0; i < var1; i++) {
                if (flag % 2 == 0) {
                    TreeNode target = deque.pollFirst();
                    subList.add(target.val);
                    if (target.left != null) {
                        deque.addLast(target.left);
                    }
                    if (target.right != null) {
                        deque.addLast(target.right);
                    }
                } else {
                    TreeNode target = deque.pollLast();
                    subList.add(target.val);
                    if (target.right != null) {
                        deque.addFirst(target.right);
                    }
                    if (target.left != null) {
                        deque.addFirst(target.left);
                    }
                }
            }
            flag = flag + 1;
            result.add(subList);
        }
        return result;
    }
}
