class Solution {

    List<List<Integer>> l;

    Queue<TreeNode> q;

    public List<List<Integer>> method1(TreeNode root) {
        l = new ArrayList<>();
        q = new LinkedList<>();
        if (root == null)
            return l;
        q.add(root);
        bfs(root, true);
        return l;
    }

    void bfs(TreeNode root, boolean param1) {
        while (!q.isEmpty()) {
            int size = q.size();
            List<Integer> temp = new ArrayList<>();
            while (size != 0) {
                TreeNode n = q.poll();
                temp.add(n.val);
                if (n.left != null)
                    q.add(n.left);
                if (n.right != null)
                    q.add(n.right);
                size--;
            }
            if (param1 == true) {
                l.add(temp);
                param1 = false;
            } else {
                Collections.reverse(temp);
                l.add(temp);
                param1 = true;
            }
        }
    }
}
