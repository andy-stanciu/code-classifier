class Solution {

    public List<List<Integer>> method1(TreeNode root) {
        List<List<Integer>> outerList = new ArrayList<>();
        if (root == null)
            return outerList;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while (true) {
            if (queue.isEmpty()) {
                return outerList;
            }
            int size = queue.size();
            List<Integer> list = new ArrayList<>();
            while (size >= 1) {
                TreeNode curNode = queue.poll();
                System.out.println("curNode is " + curNode.val);
                list.add(curNode.val);
                if (curNode.left != null)
                    queue.add(curNode.left);
                if (curNode.right != null)
                    queue.add(curNode.right);
                size--;
            }
            if (outerList.size() % 2 != 0) {
                Collections.reverse(list);
            }
            outerList.add(list);
            System.out.println("outerList is " + outerList);
        }
    }
}
