class Solution {

    public int method1(int[] param1, int amount) {
        int n = param1.length;
        int[][] dp = new int[n + 1][amount + 1];
        for (int[] row : dp) Arrays.fill(row, -1);
        int ans = method2(n - 1, param1, amount, dp);
        if (ans >= (int) Math.pow(10, 9))
            return -1;
        return ans;
    }

    public int method2(int ind, int[] param1, int amount, int[][] dp) {
        if (ind == 0) {
            if (amount % param1[0] == 0)
                return amount / param1[0];
            else
                return (int) Math.pow(10, 9);
        }
        if (dp[ind][amount] != -1) {
            return dp[ind][amount];
        }
        int notpick = 0 + method2(ind - 1, param1, amount, dp);
        int pick = (int) Math.pow(10, 9);
        if (param1[ind] <= amount) {
            pick = 1 + method2(ind, param1, amount - param1[ind], dp);
        }
        return dp[ind][amount] = Math.min(pick, notpick);
    }
}
