class Solution {

    public int method1(int[] param1, int amount) {
        int n = param1.length;
        if (n == 1 && amount % param1[0] != 0)
            return -1;
        int[][] memo = new int[n + 1][amount + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= amount; j++) {
                memo[i][j] = -1;
                if (j == 0)
                    memo[i][j] = 0;
                if (i == 0)
                    memo[i][j] = Integer.MAX_VALUE - 1;
            }
        }
        int pick;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= amount; j++) {
                pick = Integer.MAX_VALUE;
                if (param1[i - 1] <= j) {
                    pick = 1 + memo[i][j - param1[i - 1]];
                }
                int nonpick = memo[i - 1][j];
                memo[i][j] = Math.min(pick, nonpick);
            }
        }
        int ans = memo[n][amount];
        return ans == Integer.MAX_VALUE - 1 ? -1 : ans;
    }
}
