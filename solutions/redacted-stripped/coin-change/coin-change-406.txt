class Solution {

    public int method1(int[] param1, int amount) {
        if (param1 == null || param1.length == 0 || amount < 1)
            return 0;
        Deque<Integer> diffCosts = new ArrayDeque<Integer>();
        boolean[] visited = new boolean[amount + 1];
        diffCosts.addFirst(amount);
        int level = 0;
        while (!diffCosts.isEmpty()) {
            int size = diffCosts.size();
            while (size-- > 0) {
                int curAmount = diffCosts.removeLast();
                if (curAmount == 0)
                    return level;
                for (int n : param1) {
                    int currentCost = curAmount - n;
                    if (currentCost >= 0 && !visited[currentCost]) {
                        visited[currentCost] = true;
                        diffCosts.addFirst(currentCost);
                    }
                }
            }
            ++level;
        }
        return -1;
    }

    public int method2(int[] param1, int amount) {
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, amount + 1);
        dp[0] = 0;
        for (int i = 1; i <= amount; i++) {
            for (int c : param1) {
                if (i >= c) {
                    dp[i] = Math.min(dp[i], dp[i - c] + 1);
                }
            }
        }
        return dp[amount] == amount + 1 ? -1 : dp[amount];
    }
}
