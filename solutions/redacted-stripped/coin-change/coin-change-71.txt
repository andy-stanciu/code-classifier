class Solution {

    public int method1(int[] param1, int amount) {
        if (amount == 0) {
            return 0;
        }
        Map<Integer, Integer> cache = new HashMap<>();
        int ans = dfs(param1, amount, cache);
        return ans == Integer.MAX_VALUE ? -1 : ans;
    }

    public int dfs(int[] param1, int amount, Map<Integer, Integer> cache) {
        if (cache.containsKey(amount)) {
            return cache.get(amount);
        }
        if (amount < 0) {
            return Integer.MAX_VALUE;
        }
        if (amount == 0) {
            return 0;
        }
        List<Integer> results = new ArrayList<>();
        for (int var1 : param1) {
            int res = dfs(param1, amount - var1, cache);
            if (res != Integer.MAX_VALUE)
                results.add(res + 1);
        }
        int ans = Integer.MAX_VALUE;
        for (int res : results) ans = Math.min(ans, res);
        cache.put(amount, ans);
        return ans;
    }
}
