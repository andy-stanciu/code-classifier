class Solution {

    public int method1(int[] param1, int amount) {
        int[] prev = new int[amount + 1];
        for (int amt = 0; amt <= amount; amt++) {
            if (amt % param1[0] == 0) {
                prev[amt] = amt / param1[0];
            } else {
                prev[amt] = (int) 1e8;
            }
        }
        for (int i = 1; i <= param1.length - 1; i++) {
            int[] curr = new int[amount + 1];
            for (int amt = 0; amt <= amount; amt++) {
                int notTake = prev[amt];
                int take = (int) 1e8;
                if (param1[i] <= amt) {
                    take = 1 + curr[amt - param1[i]];
                }
                curr[amt] = Math.min(notTake, take);
            }
            prev = curr;
        }
        return prev[amount] >= (int) 1e8 ? -1 : prev[amount];
    }

    int f(int idx, int[] param1, int amount, int[][] dp) {
        if (idx == 0) {
            if (amount % param1[0] == 0)
                return amount / param1[0];
            return (int) 1e8;
        }
        if (dp[idx][amount] != -1) {
            return dp[idx][amount];
        }
        int notTake = f(idx - 1, param1, amount, dp);
        int take = Integer.MAX_VALUE;
        if (param1[idx] <= amount) {
            take = 1 + f(idx, param1, amount - param1[idx], dp);
        }
        return dp[idx][amount] = Math.min(notTake, take);
    }
}
