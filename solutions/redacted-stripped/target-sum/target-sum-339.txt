class Solution {

    public int method1(int[] nums, int param1) {
        return countPartitions(nums.length, param1, nums);
    }

    public int findWays(int[] num, int tar) {
        int n = num.length;
        int[][] dp = new int[n][tar + 1];
        if (num[0] == 0)
            dp[0][0] = 2;
        else
            dp[0][0] = 1;
        if (num[0] != 0 && num[0] <= tar)
            dp[0][num[0]] = 1;
        for (int ind = 1; ind < n; ind++) {
            for (int param1 = 0; param1 <= tar; param1++) {
                int notTaken = dp[ind - 1][param1];
                int taken = 0;
                if (num[ind] <= param1)
                    taken = dp[ind - 1][param1 - num[ind]];
                dp[ind][param1] = (notTaken + taken);
            }
        }
        return dp[n - 1][tar];
    }

    public int countPartitions(int n, int d, int[] arr) {
        int var1 = 0;
        for (int i = 0; i < n; i++) {
            var1 += arr[i];
        }
        if (var1 - d < 0 || (var1 - d) % 2 == 1)
            return 0;
        return findWays(arr, (var1 - d) / 2);
    }
}
