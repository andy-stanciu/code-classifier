class Solution {

    private int count(int index, int param1, int[] nums, int[][] dp) {
        if (index == 0) {
            if (param1 == 0 && nums[0] == 0)
                return 2;
            if (param1 == 0 || param1 == nums[0])
                return 1;
            return 0;
        }
        if (dp[index][param1] != -1)
            return dp[index][param1];
        int notPick = 0 + count(index - 1, param1, nums, dp);
        int pick = 0;
        if (nums[index] <= param1)
            pick = count(index - 1, param1 - nums[index], nums, dp);
        return dp[index][param1] = pick + notPick;
    }

    public int method1(int[] nums, int param1) {
        int len = nums.length;
        int total = 0;
        for (int i : nums) total += i;
        if ((total - param1 < 0) || ((total - param1) % 2 == 1))
            return 0;
        int s = (total - param1) / 2;
        int[][] dp = new int[len][s + 1];
        for (int[] row : dp) Arrays.fill(row, -1);
        return count(len - 1, s, nums, dp);
    }
}
