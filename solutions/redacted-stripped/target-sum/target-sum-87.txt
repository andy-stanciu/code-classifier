class Solution {

    static int[][] dp;

    static int offset = 1000;

    public int method1(int[] a, int param1) {
        int n = a.length;
        dp = new int[n + 1][2 * offset + 1];
        for (int i = 0; i < dp.length; i++) {
            Arrays.fill(dp[i], -1);
        }
        return ways(a, param1, n, 0, "");
    }

    public int ways(int[] a, int param1, int n, int param2, String ans) {
        if (n == 0) {
            if (param2 == param1) {
                return dp[n][param2 + offset] = 1;
            } else {
                return dp[n][param2 + offset] = 0;
            }
        } else {
            if (dp[n][param2 + offset] != -1) {
                return dp[n][param2 + offset];
            } else {
                int ans1, ans2, index = n - 1;
                ans1 = ways(a, param1, n - 1, param2 + a[index], ans + "+" + a[index]);
                ans2 = ways(a, param1, n - 1, param2 - a[index], ans + "-" + a[index]);
                return dp[n][param2 + offset] = ans1 + ans2;
            }
        }
    }
}
