class Solution {

    public int method1(int[] nums, int param1) {
        int var1 = method2(nums);
        int var2 = (var1 + param1) / 2;
        if ((var1 + param1) % 2 != 0 || var1 < Math.abs(param1))
            return 0;
        return dpPartition(nums, nums.length, var2);
    }

    int method2(int[] nums) {
        int var1 = 0;
        for (int i = 0; i < nums.length; i++) {
            var1 += nums[i];
        }
        return var1;
    }

    int dpPartition(int[] nums, int N, int var1) {
        int[][] dp = new int[N + 1][var1 + 1];
        for (int i = 0; i <= N; i++) {
            dp[i][0] = 1;
        }
        for (int i = 1; i <= var1; i++) {
            dp[0][i] = 0;
        }
        for (int i = 1; i <= N; i++) {
            for (int j = 0; j <= var1; j++) {
                if (nums[i - 1] <= j) {
                    dp[i][j] = dp[i - 1][j - nums[i - 1]] + dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[N][var1];
    }
}
