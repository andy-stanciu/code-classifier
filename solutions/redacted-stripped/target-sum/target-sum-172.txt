class Solution {

    private int[] nums;

    private int[][] cache;

    public int method1(int[] nums, int param1) {
        int s = 0;
        int n = nums.length;
        this.nums = nums;
        for (int num : nums) s += num;
        param1 += s;
        if (param1 < 0 || param1 % 2 != 0)
            return 0;
        param1 /= 2;
        cache = new int[n][param1 + 1];
        for (int i = 0; i < n; ++i) {
            Arrays.fill(cache[i], -1);
        }
        return dfs(n - 1, param1);
    }

    private int dfs(int i, int c) {
        if (i < 0) {
            return c == 0 ? 1 : 0;
        }
        if (cache[i][c] != -1)
            return cache[i][c];
        if (c < nums[i]) {
            return cache[i][c] = dfs(i - 1, c);
        }
        return cache[i][c] = dfs(i - 1, c) + dfs(i - 1, c - nums[i]);
    }
}
