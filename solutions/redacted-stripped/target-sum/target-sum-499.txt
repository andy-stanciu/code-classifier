class Solution {

    Integer n = null;

    public int method1(int[] nums, int param1) {
        n = nums.length;
        int var1 = 0;
        for (int s : nums) var1 += s;
        int[][] dp = new int[n + 1][2 * var1 + 1];
        for (int i = 0; i <= n; i++) {
            Arrays.fill(dp[i], -1);
        }
        return findWays(nums, param1, 0, 0, 0, dp, var1);
    }

    private int findWays(int[] nums, int param1, int param2, int index, int count, int[][] dp, int param3) {
        if (n == index && param2 == param1) {
            return ++count;
        }
        if (n == index) {
            return 0;
        }
        if (dp[index][param2 + param3] != -1)
            return dp[index][param2 + param3];
        dp[index][param2 + param3] = findWays(nums, param1, param2 + nums[index], index + 1, count, dp, param3) + findWays(nums, param1, param2 - nums[index], index + 1, count, dp, param3);
        return dp[index][param2 + param3];
    }
}
