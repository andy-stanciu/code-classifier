class Solution {

    private int fn(int i, int k, int[] arr, int[][] dp) {
        if (i == 0) {
            if (k == 0 && arr[0] == 0)
                return 2;
            if (k == 0 || arr[0] == k)
                return 1;
            return 0;
        }
        if (dp[i][k] != -1)
            return dp[i][k];
        int notTake = fn(i - 1, k, arr, dp);
        int take = 0;
        if (arr[i] <= k) {
            take = fn(i - 1, k - arr[i], arr, dp);
        }
        return dp[i][k] = (take + notTake);
    }

    public int countPartitions(int n, int d, int[] arr) {
        int var1 = 0;
        for (int i = 0; i < n; i++) var1 += arr[i];
        if ((var1 - d) % 2 != 0 || var1 - d < 0)
            return 0;
        int k = (var1 - d) / 2;
        int[][] dp = new int[n][k + 1];
        for (int i = 0; i < n; i++) Arrays.fill(dp[i], -1);
        return fn(n - 1, k, arr, dp);
    }

    public int method1(int[] nums, int k) {
        int n = nums.length;
        return countPartitions(n, k, nums);
    }
}
