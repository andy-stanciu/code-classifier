class Solution {

    public int method1(int[] nums, int param1) {
        int n = nums.length;
        int var1 = 0;
        for (int i : nums) {
            var1 += i;
        }
        if (var1 < param1 || var1 + param1 < 0 || (var1 + param1) % 2 != 0) {
            return 0;
        }
        int w = (param1 + var1) / 2;
        return countSubsetDiff(nums, w, n);
    }

    public int countSubsetDiff(int[] nums, int w, int n) {
        int[][] dp = new int[n + 1][w + 1];
        for (int i = 0; i < n + 1; i++) {
            for (int j = 0; j < w + 1; j++) {
                if (i == 0)
                    dp[i][j] = 0;
                if (j == 0)
                    dp[i][j] = 1;
            }
        }
        for (int i = 1; i < n + 1; i++) {
            for (int j = 0; j < w + 1; j++) {
                if (nums[i - 1] <= j) {
                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[n][w];
    }
}
