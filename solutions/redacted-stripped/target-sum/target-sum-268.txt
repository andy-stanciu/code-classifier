class Solution {

    private static int f(int ind, int param1, int[] arr, int[][] dp) {
        if (ind == 0) {
            if (param1 == 0 && arr[0] == 0) {
                return 2;
            }
            if (param1 == 0 || param1 == arr[0]) {
                return 1;
            }
            return 0;
        }
        if (dp[ind][param1] != -1) {
            return dp[ind][param1];
        }
        int notake = f(ind - 1, param1, arr, dp);
        int take = 0;
        if (arr[ind] <= param1) {
            take = f(ind - 1, param1 - arr[ind], arr, dp);
        }
        return dp[ind][param1] = take + notake;
    }

    public int method1(int[] nums, int s) {
        int n = nums.length;
        int var1 = 0;
        for (int i = 0; i < n; i++) {
            var1 += nums[i];
        }
        if (var1 - s < 0) {
            return 0;
        }
        if ((var1 - s) % 2 == 1) {
            return 0;
        }
        int s2 = (var1 - s) / 2;
        int[][] dp = new int[n][s2 + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return f(n - 1, s2, nums, dp);
    }
}
