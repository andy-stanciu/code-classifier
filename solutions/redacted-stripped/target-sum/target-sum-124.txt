class Solution {

    public int method1(int[] nums, int param1) {
        int var1 = 0;
        for (int i = 0; i < nums.length; i++) {
            var1 += nums[i];
        }
        if ((var1 - param1) % 2 != 0 || (var1 - param1) < 0)
            return 0;
        param1 = (var1 - param1) / 2;
        int[][] dp = new int[nums.length][param1 + 1];
        for (int i = 0; i < nums.length; i++) {
            Arrays.fill(dp[i], -1);
        }
        return recursion(nums.length - 1, param1, nums, dp);
    }

    public int recursion(int index, int param1, int[] nums, int[][] dp) {
        if (index == 0) {
            if (param1 == 0 && nums[index] == 0)
                return 2;
            if (param1 == 0 || nums[index] == param1)
                return 1;
            return 0;
        }
        if (dp[index][param1] != -1)
            return dp[index][param1];
        int take = 0;
        if (nums[index] <= param1) {
            take = recursion(index - 1, param1 - nums[index], nums, dp);
        }
        int notTake = recursion(index - 1, param1, nums, dp);
        return dp[index][param1] = take + notTake;
    }
}
