class Solution {

    public int method1(int[] nums, int param1) {
        int n = nums.length;
        return countPartitions(n, param1, nums);
    }

    public int countPartitions(int n, int d, int[] arr) {
        int var1 = 0;
        for (int ele : arr) {
            var1 += ele;
        }
        if (var1 - d < 0 || ((var1 - d) & 1) == 1) {
            return 0;
        }
        int param1 = (var1 - d) / 2;
        return findWays(arr, param1);
    }

    private static int findWays(int[] arr, int k) {
        int n = arr.length;
        int[] prev = new int[k + 1];
        if (arr[0] == 0) {
            prev[0] = 2;
        } else {
            prev[0] = 1;
        }
        if (arr[0] != 0 && arr[0] <= k) {
            prev[arr[0]] = 1;
        }
        for (int ind = 1; ind < n; ind++) {
            int[] cur = new int[k + 1];
            for (int param1 = 0; param1 <= k; param1++) {
                int notTake = prev[param1];
                int take = 0;
                if (arr[ind] <= param1) {
                    take = prev[param1 - arr[ind]];
                }
                cur[param1] = (notTake + take);
            }
            prev = cur;
        }
        return prev[k];
    }
}
