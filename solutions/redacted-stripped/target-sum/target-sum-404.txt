class Solution {

    public int method1(int[] arr, int param1) {
        int sigma = 0;
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            sigma += arr[i];
        }
        if (param1 > sigma || (sigma + param1) % 2 != 0) {
            return 0;
        }
        int var1 = 0;
        var1 = (sigma + param1) / 2;
        int var2 = Math.abs(var1 + 1);
        int[][] t = new int[n + 1][var2];
        for (int j = 0; j < var2; j++) {
            t[0][j] = 0;
        }
        for (int i = 0; i < n + 1; i++) {
            int k = countnoofzeroestillindex(arr, i);
            t[i][0] = (int) Math.round(Math.pow(2, k));
        }
        for (int i = 1; i < n + 1; i++) {
            for (int j = 1; j < var2; j++) {
                if (arr[i - 1] <= j) {
                    t[i][j] = t[i - 1][j - arr[i - 1]] + t[i - 1][j];
                } else {
                    t[i][j] = t[i - 1][j];
                }
            }
        }
        return t[n][var2 - 1];
    }

    public static int countnoofzeroestillindex(int[] arr, int i) {
        int countofzeroes = 0;
        for (int j = 0; j < i; j++) {
            if (arr[j] == 0) {
                countofzeroes += 1;
            }
        }
        return countofzeroes;
    }
}
