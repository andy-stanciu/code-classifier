class Solution {

    public int method1(int[] nums, int param1) {
        return countPartitions(nums.length, param1, nums);
    }

    public static int countPartitions(int n, int d, int[] arr) {
        int var1 = 0;
        for (int i = 0; i < n; i++) {
            var1 += arr[i];
        }
        if (var1 - d < 0 || (var1 - d) % 2 != 0)
            return 0;
        return findWays(arr, (var1 - d) / 2);
    }

    public static int findWays(int[] num, int tar) {
        int n = num.length;
        int[] dp = new int[tar + 1];
        if (num[0] == 0)
            dp[0] = 2;
        else
            dp[0] = 1;
        if (num[0] != 0 && num[0] <= tar)
            dp[num[0]] = 1;
        for (int ind = 1; ind < n; ind++) {
            int[] temp = new int[tar + 1];
            for (int param1 = 0; param1 <= tar; param1++) {
                int nt = dp[param1];
                int take = 0;
                if (num[ind] <= param1)
                    take = dp[param1 - num[ind]];
                temp[param1] = (nt + take);
            }
            dp = temp;
        }
        return dp[tar];
    }

    static int totalSubset(int ind, int[] arr, int param1, int[][] memo) {
        if (ind == 0) {
            if (param1 == 0 && arr[0] == 0)
                return 2;
            if (param1 == 0 || param1 == arr[0])
                return 1;
            return 0;
        }
        if (memo[ind][param1] != -1)
            return memo[ind][param1];
        int notTaken = totalSubset(ind - 1, arr, param1, memo);
        int taken = 0;
        if (arr[ind] <= param1)
            taken = totalSubset(ind - 1, arr, param1 - arr[ind], memo);
        return memo[ind][param1] = (notTaken + taken);
    }
}
