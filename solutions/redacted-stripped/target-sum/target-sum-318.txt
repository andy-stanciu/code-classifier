class Solution {

    public int method1(int[] nums, int param1) {
        int var1 = 0;
        for (int i = 0; i < nums.length; i++) {
            var1 = var1 + nums[i];
        }
        if (param1 > var1 || (var1 - param1) % 2 != 0) {
            return 0;
        }
        int[][] dp = new int[nums.length][((var1 - param1) / 2) + 1];
        return memo(nums, nums.length - 1, (var1 - param1) / 2, dp);
    }

    public int memo(int[] nums, int index, int var1, int[][] dp) {
        if (index == 0) {
            if (var1 == 0 && nums[0] == 0) {
                return 2;
            }
            if (var1 == 0 || nums[0] == var1) {
                return 1;
            }
            return 0;
        }
        int notpick = memo(nums, index - 1, var1, dp);
        int pick = 0;
        if (nums[index] <= var1) {
            pick = memo(nums, index - 1, var1 - nums[index], dp);
        }
        return dp[index][var1] = pick + notpick;
    }
}
