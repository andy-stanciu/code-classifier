class Solution {

    public int method1(int[] nums, int param1) {
        int var1 = 0;
        for (int i : nums) var1 += i;
        int t = (param1 + var1) / 2;
        int[][] dp = new int[nums.length][t + 1];
        return countNumberOfWays(nums, t, nums.length - 1, dp);
    }

    public int countNumberOfWays(int[] nums, int param1, int index, int[][] dp) {
        if (index == 0) {
            if (nums[0] == 0 && param1 == 0)
                return 2;
            if (param1 == 0)
                return 1;
            if (nums[0] == param1)
                return 1;
            return 0;
        }
        if (dp[index][param1] != 0)
            return dp[index][param1];
        int notPick = countNumberOfWays(nums, param1, index - 1, dp);
        int pick = 0;
        if (nums[index] <= param1)
            pick = countNumberOfWays(nums, param1 - nums[index], index - 1, dp);
        return dp[index][param1] = pick + notPick;
    }
}
