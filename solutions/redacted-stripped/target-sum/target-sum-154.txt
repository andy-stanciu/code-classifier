class Solution {

    int mod = (int) (Math.pow(10, 9) + 7);

    public int method1(int[] arr, int param1) {
        int n = arr.length;
        int var1 = 0;
        for (int i = 0; i < n; i++) {
            var1 += arr[i];
        }
        if (var1 - param1 < 0 || (var1 - param1) % 2 == 1)
            return 0;
        return findWays(arr, (var1 - param1) / 2);
    }

    int findWays(int[] num, int tar) {
        int n = num.length;
        int[] prev = new int[tar + 1];
        if (num[0] == 0)
            prev[0] = 2;
        else
            prev[0] = 1;
        if (num[0] != 0 && num[0] <= tar)
            prev[num[0]] = 1;
        for (int ind = 1; ind < n; ind++) {
            int[] cur = new int[tar + 1];
            for (int param1 = 0; param1 <= tar; param1++) {
                int notTaken = prev[param1];
                int taken = 0;
                if (num[ind] <= param1)
                    taken = prev[param1 - num[ind]];
                cur[param1] = (notTaken + taken) % mod;
            }
            prev = cur;
        }
        return prev[tar];
    }
}
