class Solution {

    public int method1(int[] nums, int param1) {
        int n = nums.length;
        return countPartitions(n, param1, nums);
    }

    private int countPartitions(int n, int d, int[] arr) {
        int var1 = 0;
        for (int ele : arr) {
            var1 += ele;
        }
        if (var1 - d < 0 || ((var1 - d) & 1) == 1) {
            return 0;
        }
        int param1 = (var1 - d) / 2;
        return findWays(arr, param1);
    }

    private int findWays(int[] num, int tar) {
        int n = num.length;
        int[][] dp = new int[n][tar + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return f(n - 1, tar, num, dp);
    }

    private int f(int ind, int param1, int[] arr, int[][] dp) {
        if (ind == 0) {
            if (param1 == 0 && arr[0] == 0)
                return 2;
            if (param1 == 0 || param1 == arr[0])
                return 1;
            return 0;
        }
        if (dp[ind][param1] != -1) {
            return dp[ind][param1];
        }
        int notTake = f(ind - 1, param1, arr, dp);
        int take = 0;
        if (arr[ind] <= param1) {
            take = f(ind - 1, param1 - arr[ind], arr, dp);
        }
        return dp[ind][param1] = notTake + take;
    }
}
