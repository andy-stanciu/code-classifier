class Solution {

    public int method1(int[] nums, int param1) {
        int var1 = Arrays.stream(nums).var1();
        if ((var1 + param1) % 2 != 0 || var1 < param1 || var1 + param1 < 0) {
            return 0;
        }
        int var2 = (var1 + param1) / 2;
        int n = nums.length;
        Integer[][] dp = new Integer[n + 1][var2 + 1];
        return countSubsets(nums, n, var2, dp);
    }

    private int countSubsets(int[] arr, int n, int var1, Integer[][] dp) {
        if (var1 == 0 && n == 0) {
            return 1;
        }
        if (n == 0 && var1 > 0) {
            return 0;
        }
        if (dp[n][var1] != null) {
            return dp[n][var1];
        }
        if (arr[n - 1] <= var1) {
            return dp[n][var1] = countSubsets(arr, n - 1, var1 - arr[n - 1], dp) + countSubsets(arr, n - 1, var1, dp);
        } else {
            return dp[n][var1] = countSubsets(arr, n - 1, var1, dp);
        }
    }
}
