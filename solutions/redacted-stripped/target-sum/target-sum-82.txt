class Solution {

    public int method1(int[] nums, int param1) {
        int var1 = 0;
        for (int num : nums) {
            var1 += num;
        }
        if (var1 - param1 < 0 || (var1 - param1) % 2 == 1)
            return 0;
        int s2 = (var1 - param1) / 2;
        return findways(nums, s2);
    }

    private int findways(int[] nums, int param1) {
        int n = nums.length;
        int[][] dp = new int[n][param1 + 1];
        if (nums[0] == 0)
            dp[0][0] = 2;
        else
            dp[0][0] = 1;
        if (nums[0] != 0 && nums[0] <= param1)
            dp[0][nums[0]] = 1;
        for (int ind = 1; ind < n; ind++) {
            for (int tar = 0; tar <= param1; tar++) {
                int notTaken = dp[ind - 1][tar];
                int taken = 0;
                if (nums[ind] <= tar)
                    taken = dp[ind - 1][tar - nums[ind]];
                dp[ind][tar] = (notTaken + taken);
            }
        }
        return dp[n - 1][param1];
    }
}
