class Solution {

    public int method1(int[] nums, int param1) {
        return countPartitions(nums.length, param1, nums);
    }

    int countPartitions(int n, int d, int[] arr) {
        int var1 = 0;
        for (int x : arr) var1 += x;
        if (var1 - d < 0)
            return 0;
        if ((var1 - d) % 2 == 1)
            return 0;
        int s2 = (var1 - d) / 2;
        int[][] dp = new int[n][s2 + 1];
        if (arr[0] == 0) {
            dp[0][0] = 2;
        } else {
            dp[0][0] = 1;
        }
        if (arr[0] != 0 && arr[0] <= s2) {
            dp[0][arr[0]] = 1;
        }
        for (int idx = 1; idx < n; idx++) {
            for (int var2 = 0; var2 <= s2; var2++) {
                int notake = 0 + dp[idx - 1][var2];
                int take = 0;
                if (arr[idx] <= var2) {
                    take = dp[idx - 1][var2 - arr[idx]];
                }
                dp[idx][var2] = (take + notake);
            }
        }
        return dp[n - 1][s2];
    }
}
