class Solution {

    private static int fun(int[] nums, int param1) {
        int len = nums.length;
        int[] prev = new int[param1 + 1], curr = new int[param1 + 1];
        for (int s = 0; s <= param1; s++) {
            prev[s] = (s == 0) ? 1 : 0;
        }
        for (int index = 1; index <= len; index++) {
            for (int s = 0; s <= param1; s++) {
                int notPick = prev[s];
                int pick = 0;
                if (nums[index - 1] <= s)
                    pick = prev[s - nums[index - 1]];
                curr[s] = notPick + pick;
            }
            for (int s = 0; s <= param1; s++) prev[s] = curr[s];
        }
        return prev[param1];
    }

    public int method1(int[] nums, int param2) {
        int len = nums.length, var1 = Arrays.stream(nums).param1();
        if ((var1 + param2) % 2 != 0 || var1 < param2)
            return 0;
        int param1 = (var1 - param2) / 2;
        return fun(nums, param1);
    }
}
