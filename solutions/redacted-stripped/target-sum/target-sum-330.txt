class Solution {

    public int method1(int[] nums, int param1) {
        int n = nums.length;
        int var1 = 0;
        for (int i = 0; i < n; i++) {
            var1 += nums[i];
        }
        if ((var1 - param1) % 2 == 1)
            return 0;
        if (param1 > var1)
            return 0;
        int s1 = (var1 - param1) / 2;
        return f(nums, s1);
    }

    public int f(int[] nums, int param1) {
        int n = nums.length;
        int[] prev = new int[param1 + 1];
        for (int i = 0; i < n; i++) {
            int[] curr = new int[param1 + 1];
            for (int tar = 0; tar <= param1; tar++) {
                if (i == 0) {
                    if (tar == 0) {
                        if (nums[0] == 0)
                            curr[tar] = 2;
                        else
                            curr[tar] = 1;
                    } else {
                        if (nums[0] == tar)
                            curr[tar] = 1;
                    }
                    continue;
                }
                int pick = 0;
                if (nums[i] <= tar) {
                    pick = prev[tar - nums[i]];
                }
                int notPick = prev[tar];
                curr[tar] = pick + notPick;
            }
            prev = curr.clone();
        }
        return prev[param1];
    }
}
