class Solution {

    public static int Ways_Memoization(int[] arr, int index, int param1, int param2, int param3, int[][] dp) {
        int var1 = param3 - param1;
        if ((var1 - param1 == param2) && index < 0)
            return 1;
        if (index < 0)
            return 0;
        if (dp[index][param1] != -1)
            return dp[index][param1];
        int take = Ways_Memoization(arr, index - 1, param1 - arr[index], param2, param3, dp);
        int non_take = Ways_Memoization(arr, index - 1, param1, param2, param3, dp);
        return dp[index][param1] = take + non_take;
    }

    public static int Ways_Tabulation(int[] arr, int[][] dp, int param2, int param3) {
        for (int i = 0; i < dp[0].length; i++) {
            int var1 = param3 - i;
            if (var1 - i == param2)
                dp[0][i] = 1;
        }
        for (int i = 1; i < dp.length; i++) {
            for (int j = 0; j < dp[0].length; j++) {
                int Non_take = dp[i - 1][j];
                int take = 0;
                if (j - arr[i - 1] >= 0) {
                    take = dp[i - 1][j - arr[i - 1]];
                }
                dp[i][j] = take + Non_take;
            }
        }
        return dp[dp.length - 1][dp[0].length - 1];
    }

    public int method1(int[] arr, int param2) {
        int n = arr.length;
        int param3 = 0;
        for (int i = 0; i < n; i++) param3 += arr[i];
        int[][] dp1 = new int[n + 1][param3 + 1];
        for (int i = 0; i < n; i++) Arrays.fill(dp1[i], -1);
        int[][] dp2 = new int[n + 1][param3 + 1];
        return Ways_Tabulation(arr, dp2, param2, param3);
    }
}
