class Solution {

    public int method1(int[] nums, int param1) {
        int var1 = 0;
        for (int i : nums) {
            var1 += i;
        }
        if (Math.abs(param1) > var1)
            return 0;
        if ((param1 + var1) % 2 != 0 || (var1 - param1) % 2 != 0)
            return 0;
        int var2 = (-param1 + var1) / 2;
        int[][] mem = new int[nums.length][var2 + 1];
        for (int i = 0; i < mem.length; i++) {
            Arrays.fill(mem[i], -1);
        }
        return method2(nums, nums.length, var2);
    }

    int method2(int[] a, int n, int var1) {
        int[][] dp = new int[n][var1 + 1];
        if (a[0] <= var1) {
            dp[0][a[0]] = 1;
        }
        if (a[0] == 0) {
            dp[0][0] = 2;
        } else {
            dp[0][0] = 1;
        }
        for (int i = 1; i < n; i++) {
            dp[i][0] = 1;
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j <= var1; j++) {
                dp[i][j] = dp[i - 1][j];
                if (a[i] <= j) {
                    dp[i][j] += dp[i - 1][j - a[i]];
                }
            }
        }
        return dp[n - 1][var1];
    }

    int rec(int pos, int[] nums, int param1, int var1, int[][] mem) {
        if (pos == nums.length) {
            if (param1 == 0)
                return 1;
            return 0;
        }
        if (mem[pos][param1] != -1)
            return mem[pos][param1];
        int take = 0;
        if (param1 >= nums[pos]) {
            take = rec(pos + 1, nums, param1 - nums[pos], var1, mem);
        }
        int nonTake = rec(pos + 1, nums, param1, var1, mem);
        mem[pos][param1] = nonTake + take;
        return mem[pos][param1];
    }
}
