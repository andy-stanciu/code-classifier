class Solution {

    public int method1(int[] arr, int d) {
        int range = 0;
        for (int i : arr) {
            range += i;
        }
        if (range < Math.abs(d) || (range + d) % 2 != 0) {
            return 0;
        }
        int var1 = (range + d) / 2;
        int[][] dp = new int[arr.length + 1][var1 + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return helper(arr, arr.length, var1, dp);
    }

    public int helper(int[] arr, int n, int var1, int[][] dp) {
        if (n == 0) {
            if (var1 == 0 && arr[0] == 0) {
                return 1;
            }
            if (var1 == 0) {
                return 1;
            }
            return 0;
        }
        if (dp[n][var1] != -1) {
            return dp[n][var1];
        }
        int notTake = helper(arr, n - 1, var1, dp);
        int take = 0;
        if (arr[n - 1] <= var1) {
            take = helper(arr, n - 1, var1 - arr[n - 1], dp);
        }
        return dp[n][var1] = (take + notTake);
    }
}
