class Solution {

    public List<String> method1(int n) {
        String combination = "";
        List<String> listOfValidCombinations = new ArrayList<String>();
        int countOfOpen = 0;
        int countOfClose = 0;
        backtrack(listOfValidCombinations, combination, countOfOpen, countOfClose, n);
        return listOfValidCombinations;
    }

    public void backtrack(List<String> listOfValidCombinations, String combination, int countOfOpen, int countOfClose, int maxCount) {
        if ((countOfOpen == maxCount) && (countOfClose == maxCount)) {
            listOfValidCombinations.add(combination);
            return;
        }
        if (countOfOpen < maxCount) {
            backtrack(listOfValidCombinations, combination + "(", countOfOpen + 1, countOfClose, maxCount);
        }
        if (countOfClose < countOfOpen) {
            backtrack(listOfValidCombinations, combination + ")", countOfOpen, countOfClose + 1, maxCount);
        }
    }
}
