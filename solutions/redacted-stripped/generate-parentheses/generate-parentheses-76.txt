class Class1 {

    String str;

    int openCount;

    int closeCount;

    public Class1(String s, int openCount, int closeCount) {
        str = s;
        this.openCount = openCount;
        this.closeCount = closeCount;
    }
}

class Solution {

    public List<String> method1(int n) {
        List<String> result = new ArrayList<>();
        Queue<Class1> queue = new LinkedList<>();
        queue.add(new Class1("", 0, 0));
        while (!queue.isEmpty()) {
            Class1 ps = queue.poll();
            if (ps.openCount == n && ps.closeCount == n) {
                result.add(ps.str);
            } else {
                if (ps.openCount < n) {
                    queue.add(new Class1(ps.str + "(", ps.openCount + 1, ps.closeCount));
                }
                if (ps.openCount > ps.closeCount) {
                    queue.add(new Class1(ps.str + ")", ps.openCount, ps.closeCount + 1));
                }
            }
        }
        return result;
    }
}
