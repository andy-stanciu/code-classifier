class Solution {

    public String convert(String s, int numRows) {
        char[] original = s.toCharArray();
        char[] res = new char[original.length];
        int n = numRows - 1;
        int i = 0, j = 0, k = 0;
        if (numRows >= original.length || numRows == 1)
            return s;
        if (numRows == 2) {
            for (i = 0; i < original.length; i += 2) {
                res[k] = original[i];
                ++k;
            }
            for (i = 1; i < original.length; i += 2) {
                res[k] = original[i];
                ++k;
            }
            return new String(res);
        }
        while (j < original.length) {
            res[k] = original[j];
            ++k;
            j += 2 * n;
        }
        for (i = 1; i < n; ++i) {
            for (j = 0; true; ++j) {
                boolean lastChanged = false;
                if (j % 2 == 0) {
                    if (j * n + i < original.length) {
                        res[k] = original[j * n + i];
                        ++k;
                        lastChanged = true;
                    } else if (!lastChanged)
                        break;
                } else {
                    if ((j + 1) * n < original.length + i) {
                        res[k] = original[(j + 1) * n - i];
                        ++k;
                        lastChanged = true;
                    } else if (!lastChanged)
                        break;
                }
            }
        }
        for (i = 0; k < original.length; i += 2) {
            res[k] = original[(i + 1) * n];
            ++k;
        }
        return new String(res);
    }
}
