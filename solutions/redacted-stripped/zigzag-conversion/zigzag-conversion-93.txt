class Solution {

    public String convert(String s, int numRows) {
        if (s.length() == 1 || numRows == 1 || s.length() < numRows) {
            return s;
        }
        int cycle = 2 * numRows - 2;
        Map<Integer, List<Character>> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            int row = i % cycle < numRows ? i % cycle : cycle - i % cycle;
            if (map.containsKey(row)) {
                map.get(row).add(s.charAt(i));
            } else {
                List<Character> list = new ArrayList<>();
                list.add(s.charAt(i));
                map.put(row, list);
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < numRows; i++) {
            List<Character> list = map.get(i);
            for (char c : list) {
                sb.append(c);
            }
        }
        return sb.toString();
    }
}
