class Solution {

    public String convert(String s, int numRows) {
        ArrayDeque<StringBuilder> strings = getStringBuilders(numRows);
        StringBuilder[] orderRetainedStrings = strings.toArray(new StringBuilder[0]);
        char[] charArray = s.toCharArray();
        for (int i = 0; i < s.length(); i++) {
            StringBuilder sb = strings.pop();
            sb.append(charArray[i]);
            strings.add(sb);
        }
        StringBuilder finalString = orderRetainedStrings[0];
        for (int i = 1; i < numRows; i++) {
            finalString.append(orderRetainedStrings[i].toString());
        }
        return finalString.toString();
    }

    private ArrayDeque<StringBuilder> getStringBuilders(int numRows) {
        ArrayDeque<StringBuilder> firstBuilders = new ArrayDeque<>();
        for (int i = 0; i < numRows; i++) {
            firstBuilders.add(new StringBuilder());
        }
        ArrayDeque<StringBuilder> builders = new ArrayDeque<>(firstBuilders);
        firstBuilders.pollLast();
        for (int i = firstBuilders.size() - 1; i > 0; i--) {
            builders.add(firstBuilders.pollLast());
        }
        return builders;
    }
}
