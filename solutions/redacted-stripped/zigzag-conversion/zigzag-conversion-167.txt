class Solution {

    public String convert(String s, int numRows) {
        if (numRows == 1 || numRows == s.length()) {
            return s;
        }
        int zigLength = (2 * numRows) - 2;
        int nearestZig = ((int) Math.ceil(((double) s.length()) / ((double) zigLength))) * zigLength;
        StringBuilder sb = new StringBuilder();
        for (int j = 0; j < s.length(); j += zigLength) {
            sb.append(s.charAt(j));
        }
        for (int i = 1; i < numRows - 1; i++) {
            for (int j = 0; j <= nearestZig; j += zigLength) {
                int behind = j - i, ahead = j + i;
                if (behind > 0 && behind < s.length()) {
                    sb.append(s.charAt(behind));
                }
                if (ahead < s.length()) {
                    sb.append(s.charAt(ahead));
                }
            }
        }
        for (int j = numRows - 1; j < s.length(); j += zigLength) {
            sb.append(s.charAt(j));
        }
        return sb.toString();
    }
}
