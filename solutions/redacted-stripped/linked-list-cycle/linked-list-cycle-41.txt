public class Solution {

    public boolean method1(ListNode head) {
        return floydsTortoiseAndHareAlgorithm(head);
    }

    private boolean solve(ListNode head) {
        if (head == null)
            return false;
        ListNode temp = head;
        List<ListNode> visited = new ArrayList<>();
        while (temp.next != null) {
            if (visited.contains(temp.next))
                return true;
            visited.add(temp);
            temp = temp.next;
        }
        return false;
    }

    private boolean floydsTortoiseAndHareAlgorithm(ListNode head) {
        if (head == null)
            return false;
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast)
                return true;
        }
        return false;
    }
}
