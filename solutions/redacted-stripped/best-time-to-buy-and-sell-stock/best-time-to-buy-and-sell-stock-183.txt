class Solution {

    public int maxProfit(int[] prices) {
        var n = prices.length;
        var var1 = 0;
        var var2 = 0;
        var var3 = -prices[0];
        var var4 = 0;
        var justSoldYesterday = Integer.MIN_VALUE;
        var var5 = 0;
        for (int day = 1; day < n; day++) {
            var2 = Math.max(var1, justSoldYesterday);
            var4 = Math.max(var3, var1 - prices[day]);
            var5 = var3 + prices[day];
            var1 = var2;
            var3 = var4;
            justSoldYesterday = var5;
        }
        return Math.max(var5, var2);
    }

    private int maxProfit(int[] prices, int day, int isCooldown, int param1, Integer[][][] memo) {
        if (day == prices.length) {
            return 0;
        }
        if (memo[day][param1][isCooldown] != null) {
            return memo[day][param1][isCooldown];
        }
        var doNothingDay = maxProfit(prices, day + 1, 0, param1, memo);
        var operationDay = 0;
        if (param1 == 1) {
            operationDay = prices[day] + maxProfit(prices, day + 1, 1, 0, memo);
        } else {
            if (isCooldown == 0) {
                operationDay = maxProfit(prices, day + 1, 0, 1, memo) - prices[day];
            }
        }
        return memo[day][param1][isCooldown] = Math.max(doNothingDay, operationDay);
    }
}
