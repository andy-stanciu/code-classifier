class Solution {

    public void combineUtil(int n, int k, int num, int pos, boolean[] visited, List<List<Integer>> param1) {
        if (pos == k) {
            List<Integer> combination = new ArrayList<>();
            for (int i = 1; i <= n; i++) {
                if (visited[i])
                    combination.add(i);
            }
            if (combination.size() > 0)
                param1.add(combination);
            return;
        }
        if (num > n)
            return;
        visited[num] = true;
        combineUtil(n, k, num + 1, pos + 1, visited, param1);
        visited[num] = false;
        combineUtil(n, k, num + 1, pos, visited, param1);
    }

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> param1 = new ArrayList<>();
        boolean[] visited = new boolean[n + 1];
        combineUtil(n, k, 1, 0, visited, param1);
        return param1;
    }
}
