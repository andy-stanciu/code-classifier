class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> curr_combination = new ArrayList<>();
        backtrack(1, n, k, curr_combination, result);
        return result;
    }

    private void backtrack(int start, int n, int k, List<Integer> curr_combination, List<List<Integer>> result) {
        if (curr_combination.size() == k) {
            result.add(new ArrayList<>(curr_combination));
            return;
        }
        for (int i = start; i <= n; ++i) {
            curr_combination.add(i);
            backtrack(i + 1, n, k, curr_combination, result);
            curr_combination.remove(curr_combination.size() - 1);
        }
    }
}
