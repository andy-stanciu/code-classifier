class Solution {

    public List<List<Integer>> combine(int n, int k) {
        var list = new ArrayList<List<Integer>>();
        combine(n, k, 1, 0, new Integer[k], list);
        return list;
    }

    private void combine(int n, int k, int cur, int index, Integer[] combo, List<List<Integer>> acc) {
        if (index == k) {
            acc.add(List.of(combo));
            return;
        }
        for (int i = cur; i <= n; i++) {
            combo[index] = i;
            combine(n, k, i + 1, index + 1, combo, acc);
        }
    }

    public static void main(String[] args) {
        var solution = new Solution();
        var expected = new ArrayList<List<Integer>>();
        expected.add(List.of(1, 2));
        expected.add(List.of(1, 3));
        expected.add(List.of(1, 4));
        expected.add(List.of(2, 3));
        expected.add(List.of(2, 4));
        expected.add(List.of(3, 4));
        test(solution, 4, 2, expected);
        expected.clear();
        expected.add(List.of(1));
        test(solution, 1, 1, expected);
        expected.clear();
        expected.add(List.of(1, 2, 3));
        expected.add(List.of(1, 2, 4));
        expected.add(List.of(1, 3, 4));
        expected.add(List.of(2, 3, 4));
        test(solution, 4, 3, expected);
        expected.clear();
        expected.add(List.of(1, 2, 3));
        expected.add(List.of(1, 2, 4));
        expected.add(List.of(1, 3, 4));
        expected.add(List.of(2, 3, 4));
        test(solution, 4, 3, expected);
        expected.clear();
        expected.add(List.of(1, 2, 3, 4));
        test(solution, 4, 4, expected);
        expected.clear();
        expected.add(List.of(1, 2));
        expected.add(List.of(1, 3));
        expected.add(List.of(1, 4));
        expected.add(List.of(1, 5));
        expected.add(List.of(2, 3));
        expected.add(List.of(2, 4));
        expected.add(List.of(2, 5));
        expected.add(List.of(3, 4));
        expected.add(List.of(3, 5));
        expected.add(List.of(4, 5));
        test(solution, 5, 2, expected);
        expected.clear();
        expected.add(List.of(1, 2, 3));
        expected.add(List.of(1, 2, 4));
        expected.add(List.of(1, 2, 5));
        expected.add(List.of(1, 3, 4));
        expected.add(List.of(1, 3, 5));
        expected.add(List.of(1, 4, 5));
        expected.add(List.of(2, 3, 4));
        expected.add(List.of(2, 3, 5));
        expected.add(List.of(2, 4, 5));
        expected.add(List.of(3, 4, 5));
        test(solution, 5, 3, expected);
        expected.clear();
        expected.add(List.of(1, 2, 3, 4));
        expected.add(List.of(1, 2, 3, 5));
        expected.add(List.of(1, 2, 4, 5));
        expected.add(List.of(1, 3, 4, 5));
        expected.add(List.of(2, 3, 4, 5));
        test(solution, 5, 4, expected);
        expected.clear();
        expected.add(List.of(1, 2, 3, 4, 5));
        test(solution, 5, 5, expected);
    }

    private static void test(Solution solution, int n, int k, List<List<Integer>> expected) {
        var actual = solution.combine(n, k);
        if (!actual.equals(expected)) {
            System.err.println("Expected: " + expected);
            System.err.println("Actual  : " + actual);
            throw new RuntimeException();
        }
    }
}
