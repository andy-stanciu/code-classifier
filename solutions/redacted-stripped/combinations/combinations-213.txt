class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> answer = new ArrayList<>();
        backtrack(1, new ArrayDeque<>(), n, k, answer);
        return answer;
    }

    private void backtrack(int start, Deque<Integer> subList, int n, int k, List<List<Integer>> answer) {
        if (subList.size() == k) {
            answer.add(new ArrayList<>(subList));
            return;
        }
        int maxStart = n - (k - subList.size()) + 1;
        for (int i = start; i <= maxStart; i++) {
            subList.addLast(i);
            backtrack(i + 1, subList, n, k, answer);
            subList.removeLast();
        }
    }
}
