class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> comb = new ArrayList<>();
        backtracking(1, n, k, result, comb);
        return result;
    }

    private void backtracking(int current, int n, int k, List<List<Integer>> result, List<Integer> comb) {
        if (comb.size() == k) {
            result.add(new ArrayList<>(comb));
            return;
        }
        for (int i = current; i <= n; i++) {
            comb.add(i);
            backtracking(i + 1, n, k, result, comb);
            comb.remove(comb.size() - 1);
        }
    }
}
