class Solution {

    List<List<Integer>> result = new LinkedList<>();

    public List<List<Integer>> combine(int n, int k) {
        int start = 1;
        backtracking(start, n, new LinkedList<>(), k);
        return result;
    }

    private void backtracking(int start, int comb, List<Integer> list, int target) {
        if (list.size() == target) {
            result.add(new LinkedList<>(list));
            return;
        } else {
            for (int i = start; i <= comb; i++) {
                if (list.contains(i)) {
                    return;
                }
                list.add(i);
                backtracking(i + 1, comb, list, target);
                list.remove(list.size() - 1);
            }
        }
    }
}
