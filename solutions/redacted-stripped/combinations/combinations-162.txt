class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> res = new ArrayList<>();
        helper2(1, n, k, res, new ArrayList<>());
        return res;
    }

    private void helper1(int i, int n, int k, List<List<Integer>> res, List<Integer> out) {
        if (out.size() == k) {
            res.add(new ArrayList(out));
            return;
        }
        if (i > n) {
            return;
        }
        out.add(i);
        helper1(i + 1, n, k, res, out);
        out.remove(out.size() - 1);
        helper1(i + 1, n, k, res, out);
    }

    private void helper2(int i, int n, int k, List<List<Integer>> res, List<Integer> out) {
        if (out.size() == k) {
            res.add(new ArrayList(out));
            return;
        }
        for (int j = i; j <= n; j++) {
            out.add(j);
            helper2(j + 1, n, k, res, out);
            out.remove(out.size() - 1);
        }
    }
}
