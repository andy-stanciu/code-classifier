class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> allCombination = new ArrayList<>();
        backtrack(1, n, k, new ArrayList<>(), allCombination);
        return allCombination;
    }

    public void backtrack(int idx, int n, int k, List<Integer> combination, List<List<Integer>> allCombination) {
        if (combination.size() == k) {
            allCombination.add(new ArrayList<>(combination));
            return;
        }
        for (int i = idx; i <= n; i++) {
            combination.add(i);
            backtrack(i + 1, n, k, combination, allCombination);
            combination.remove(combination.size() - 1);
        }
    }
}
