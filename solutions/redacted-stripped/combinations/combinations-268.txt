class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<>(), new boolean[n + 1], n, k, 1);
        return result;
    }

    public void backtrack(List<List<Integer>> result, List<Integer> current, boolean[] used, int n, int k, int start) {
        if (current.size() == k) {
            result.add(new ArrayList<>(current));
            return;
        }
        for (int i = start; i <= n; i++) {
            if (!used[i]) {
                used[i] = true;
                current.add(i);
                backtrack(result, current, used, n, k, i + 1);
                current.remove(current.size() - 1);
                used[i] = false;
            }
        }
    }
}
