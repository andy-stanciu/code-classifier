class Solution {

    private void backtrack(int start, int n, int k, List<List<Integer>> result, LinkedList<Integer> curr) {
        if (curr.size() == k) {
            result.add(new LinkedList<>(curr));
        }
        for (int i = start; i <= n && curr.size() < k; i++) {
            curr.add(i);
            backtrack(i + 1, n, k, result, curr);
            curr.removeLast();
        }
    }

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new LinkedList<>();
        if (k == 0) {
            result.add(new LinkedList<>());
            return result;
        }
        backtrack(1, n, k, result, new LinkedList<>());
        return result;
    }
}
