class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> currentCombination = new ArrayList<>();
        backtracking(n, k, 1, result, currentCombination);
        return result;
    }

    public void backtracking(int n, int k, int start, List<List<Integer>> result, List<Integer> currentCombination) {
        if (currentCombination.size() == k) {
            result.add(new ArrayList<Integer>(currentCombination));
            return;
        }
        for (int i = start; i <= n; i++) {
            currentCombination.add(i);
            backtracking(n, k, i + 1, result, currentCombination);
            currentCombination.remove(currentCombination.size() - 1);
        }
    }
}
