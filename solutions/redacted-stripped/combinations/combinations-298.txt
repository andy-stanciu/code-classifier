class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<Integer> numbers = IntStream.rangeClosed(1, n).boxed().collect(Collectors.toList());
        List<List<Integer>> result = new ArrayList<>();
        method1(result, numbers, new HashSet<>(), k);
        return result;
    }

    public void method1(List<List<Integer>> result, List<Integer> numbersToExplore, Set<Integer> combination, int k) {
        if (combination.size() == k) {
            result.add(new ArrayList<>(combination));
        } else {
            for (int i = 0; i < numbersToExplore.size(); i++) {
                combination.add(numbersToExplore.get(i));
                method1(result, numbersToExplore.subList(i + 1, numbersToExplore.size()), combination, k);
                combination.remove(numbersToExplore.get(i));
            }
        }
    }
}
