class Solution {

    ArrayList<Integer> ans;

    public TreeNode getRightMost(TreeNode lnode, TreeNode curr) {
        TreeNode temp = lnode;
        while (temp.right != null && temp.right != curr) {
            temp = temp.right;
        }
        return temp;
    }

    public void method1(TreeNode root) {
        TreeNode curr = root;
        while (curr != null) {
            TreeNode lnode = curr.left;
            if (lnode == null) {
                ans.add(curr.val);
                curr = curr.right;
            } else {
                TreeNode rmnode = getRightMost(lnode, curr);
                if (rmnode.right == null) {
                    rmnode.right = curr;
                    curr = curr.left;
                } else {
                    ans.add(curr.val);
                    rmnode.right = null;
                    curr = curr.right;
                }
            }
        }
    }

    public List<Integer> method2(TreeNode root) {
        ans = new ArrayList<>();
        method1(root);
        return ans;
    }
}
