class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        int n = prerequisites.length;
        List<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < n; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        int[] indegree = new int[param1];
        for (int i = 0; i < param1; i++) {
            for (int x : adj.get(i)) {
                indegree[x]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        int[] topo = new int[param1];
        int topoIndex = 0;
        while (!q.isEmpty()) {
            int curr = q.poll();
            topo[topoIndex++] = curr;
            for (int neighbour : adj.get(curr)) {
                indegree[neighbour]--;
                if (indegree[neighbour] == 0) {
                    q.add(neighbour);
                }
            }
        }
        if (topoIndex == param1) {
            return topo;
        } else {
            return new int[0];
        }
    }
}
