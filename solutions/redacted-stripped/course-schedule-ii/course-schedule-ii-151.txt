class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        List<List<Integer>> graph = new ArrayList<>();
        int[] indeg = new int[param1];
        for (int i = 0; i < param1; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] prereq : prerequisites) {
            int var1 = prereq[0];
            int prerequisite = prereq[1];
            graph.get(prerequisite).add(var1);
            indeg[var1]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (indeg[i] == 0) {
                q.offer(i);
            }
        }
        int[] result = new int[param1];
        int idx = 0;
        while (!q.isEmpty()) {
            int curr = q.poll();
            result[idx++] = curr;
            for (int next : graph.get(curr)) {
                indeg[next]--;
                if (indeg[next] == 0) {
                    q.offer(next);
                }
            }
        }
        if (idx != param1) {
            return new int[0];
        }
        return result;
    }
}
