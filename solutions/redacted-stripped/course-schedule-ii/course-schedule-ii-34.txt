class Solution {

    static int[] res;

    int k = 0;

    static int[] isVisited, isPath;

    private boolean dfsCheck(ArrayList<ArrayList<Integer>> adj, int i) {
        isVisited[i] = 1;
        isPath[i] = 1;
        for (int it : adj.get(i)) {
            if (isVisited[it] == 0) {
                if (dfsCheck(adj, it)) {
                } else {
                    res = new int[] {};
                    return false;
                }
            } else {
                if (isPath[it] == 1) {
                    res = new int[] {};
                    return false;
                }
            }
        }
        isPath[i] = 0;
        res[k++] = i;
        return true;
    }

    public int[] findOrder(int param1, int[][] preq) {
        res = new int[param1];
        isVisited = new int[param1];
        isPath = new int[param1];
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] row : preq) {
            ArrayList<Integer> arr = adj.get(row[0]);
            arr.add(row[1]);
            adj.set(row[0], arr);
        }
        for (int i = 0; i < param1; i++) {
            if (isVisited[i] == 0) {
                boolean b = dfsCheck(adj, i);
                if (!b) {
                    return new int[] {};
                }
            }
        }
        return res;
    }
}
