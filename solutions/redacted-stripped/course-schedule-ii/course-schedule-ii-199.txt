class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            graph.add(new ArrayList<>());
        }
        ArrayList<Integer> ans = new ArrayList<>();
        int[] inDegree = new int[param1];
        for (int i = 0; i < prerequisites.length; i++) {
            int v1 = prerequisites[i][0];
            int v2 = prerequisites[i][1];
            inDegree[v1]++;
            graph.get(v2).add(v1);
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (inDegree[i] == 0) {
                queue.add(i);
            }
        }
        while (!queue.isEmpty()) {
            int curr = queue.poll();
            ans.add(curr);
            for (int i : graph.get(curr)) {
                inDegree[i]--;
                if (inDegree[i] == 0) {
                    queue.add(i);
                }
            }
        }
        if (ans.size() == param1) {
            int[] arr = new int[param1];
            for (int i = 0; i < ans.size(); i++) {
                arr[i] = ans.get(i);
            }
            return arr;
        } else {
            return new int[0];
        }
    }
}
