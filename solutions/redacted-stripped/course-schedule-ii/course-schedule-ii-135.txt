class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            int var1 = prerequisites[i][0];
            int prerequisite = prerequisites[i][1];
            adj.get(prerequisite).add(var1);
        }
        boolean[] visited = new boolean[param1];
        boolean[] recStack = new boolean[param1];
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < param1; i++) {
            if (!visited[i]) {
                if (dfs(adj, i, visited, recStack, stack)) {
                    return new int[0];
                }
            }
        }
        int[] result = new int[param1];
        for (int i = 0; i < param1; i++) {
            result[i] = stack.pop();
        }
        return result;
    }

    private boolean dfs(ArrayList<ArrayList<Integer>> adj, int curr, boolean[] visited, boolean[] recStack, Stack<Integer> stack) {
        visited[curr] = true;
        recStack[curr] = true;
        for (int neighbor : adj.get(curr)) {
            if (!visited[neighbor]) {
                if (dfs(adj, neighbor, visited, recStack, stack)) {
                    return true;
                }
            } else if (recStack[neighbor]) {
                return true;
            }
        }
        recStack[curr] = false;
        stack.push(curr);
        return false;
    }
}
