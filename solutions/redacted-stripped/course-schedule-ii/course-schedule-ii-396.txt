class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        int[] inDegree = new int[param1];
        int[] ans = new int[param1];
        List<Integer>[] graph = new List[param1];
        for (int i = 0; i < param1; i++) graph[i] = new ArrayList<>();
        for (int i = 0; i < prerequisites.length; i++) {
            ++inDegree[prerequisites[i][0]];
            graph[prerequisites[i][1]].add(prerequisites[i][0]);
        }
        Queue<Integer> q = new LinkedList<>();
        int ind = 0, count = 0;
        for (int i = 0; i < param1; i++) if (inDegree[i] == 0)
            q.add(i);
        while (!q.isEmpty()) {
            int node = q.poll();
            ans[ind++] = node;
            count++;
            for (int adjNode : graph[node]) {
                --inDegree[adjNode];
                if (inDegree[adjNode] == 0)
                    q.add(adjNode);
            }
        }
        if (count < param1)
            return ans = new int[] {};
        return ans;
    }
}
