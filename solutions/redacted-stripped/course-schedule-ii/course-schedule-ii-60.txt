class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        Map<Integer, List<Integer>> adjacencyList = new HashMap<>();
        int[] inDegree = new int[param1];
        for (int[] prerequisite : prerequisites) {
            adjacencyList.computeIfAbsent(prerequisite[1], x -> new ArrayList<>()).add(prerequisite[0]);
            inDegree[prerequisite[0]]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (inDegree[i] == 0) {
                queue.add(i);
            }
        }
        int[] order = new int[param1];
        int var1 = 0;
        while (!queue.isEmpty()) {
            int var2 = queue.poll();
            order[var1++] = var2;
            if (adjacencyList.containsKey(var2)) {
                for (int var3 : adjacencyList.get(var2)) {
                    inDegree[var3]--;
                    if (inDegree[var3] == 0) {
                        queue.offer(var3);
                    }
                }
            }
        }
        return var1 == param1 ? order : new int[] {};
    }
}
