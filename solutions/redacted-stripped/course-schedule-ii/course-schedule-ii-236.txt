class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        HashMap<Integer, List<Integer>> dependencyMap = new HashMap<>();
        int[] indegreeCount = new int[param1];
        int[] result = new int[param1];
        Queue<Integer> bfsQueue = new LinkedList<>();
        int idx = 0;
        for (int[] prereq : prerequisites) {
            int var1 = prereq[1];
            int var2 = prereq[0];
            indegreeCount[var2]++;
            if (!dependencyMap.containsKey(var1)) {
                dependencyMap.put(var1, new ArrayList<>());
            }
            dependencyMap.get(var1).add(var2);
        }
        for (int i = 0; i < param1; i++) {
            if (indegreeCount[i] == 0) {
                bfsQueue.add(i);
            }
        }
        while (!bfsQueue.isEmpty()) {
            int var3 = bfsQueue.poll();
            result[idx++] = var3;
            List<Integer> var4 = dependencyMap.getOrDefault(var3, Collections.emptyList());
            for (int var5 : var4) {
                indegreeCount[var5]--;
                if (indegreeCount[var5] == 0) {
                    bfsQueue.add(var5);
                }
            }
        }
        if (idx == param1)
            return result;
        return new int[0];
    }
}
