class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        int[] inDegree = new int[param1];
        for (int i = 0; i < param1; i++) {
            inDegree[i] = 0;
        }
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        for (int i = 0; i < param1; i++) {
            for (int node : adj.get(i)) {
                inDegree[node]++;
            }
        }
        Queue<Integer> q = new LinkedList<Integer>();
        for (int i = 0; i < param1; i++) {
            if (inDegree[i] == 0) {
                q.offer(i);
            }
        }
        int[] toposort = new int[param1];
        int index = 0;
        while (!q.isEmpty()) {
            int num = q.peek();
            q.remove();
            toposort[index++] = num;
            for (int neighbour : adj.get(num)) {
                System.out.println("indegree of " + neighbour + " is " + inDegree[neighbour]);
                inDegree[neighbour]--;
                if (inDegree[neighbour] == 0) {
                    q.offer(neighbour);
                }
            }
        }
        if (index == param1) {
            return toposort;
        }
        int[] arr = {};
        return arr;
    }
}
