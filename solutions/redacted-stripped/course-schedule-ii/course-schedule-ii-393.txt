class Solution {

    public int[] findOrder(int n, int[][] p) {
        List<List<Integer>> adj = new ArrayList<>();
        int[] inDegree = new int[n];
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < p.length; i++) {
            inDegree[p[i][0]]++;
            adj.get(p[i][1]).add(p[i][0]);
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            if (inDegree[i] == 0) {
                q.offer(i);
            }
        }
        List<Integer> ans = new ArrayList<>();
        while (!q.isEmpty()) {
            int curr = q.poll();
            ans.add(curr);
            for (int a : adj.get(curr)) {
                if (--inDegree[a] == 0) {
                    q.offer(a);
                }
            }
        }
        if (ans.size() != n) {
            int[] emptyArr = new int[0];
            return emptyArr;
        }
        int[] ansArr = new int[ans.size()];
        for (int j = 0; j < ansArr.length; j++) {
            ansArr[j] = ans.get(j);
        }
        return ansArr;
    }
}
