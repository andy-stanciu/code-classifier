class Solution {

    public class Edge {

        int src;

        int dest;

        public Edge(int s, int d) {
            this.src = s;
            this.dest = d;
        }
    }

    public void create(ArrayList<Edge>[] graph, int[][] arr) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < arr.length; i++) {
            graph[arr[i][1]].add(new Edge(arr[i][1], arr[i][0]));
        }
    }

    public void calcIndeg(ArrayList<Edge>[] graph, int[] indeg) {
        for (int i = 0; i < graph.length; i++) {
            for (int j = 0; j < graph[i].size(); j++) {
                Edge e = graph[i].get(j);
                indeg[e.dest]++;
            }
        }
    }

    public int[] findOrder(int param1, int[][] arr) {
        if (param1 == 1) {
            return new int[1];
        }
        ArrayList<Edge>[] graph = new ArrayList[param1];
        create(graph, arr);
        int[] indeg = new int[param1];
        calcIndeg(graph, indeg);
        int[] ans = new int[param1];
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < indeg.length; i++) {
            if (indeg[i] == 0) {
                q.add(i);
            }
        }
        int j = 0;
        while (!q.isEmpty()) {
            int curr = q.remove();
            ans[j++] = curr;
            for (int i = 0; i < graph[curr].size(); i++) {
                Edge e = graph[curr].get(i);
                indeg[e.dest]--;
                if (indeg[e.dest] == 0) {
                    q.add(e.dest);
                }
            }
        }
        if (j == param1) {
            return ans;
        }
        int[] ar = {};
        return ar;
    }
}
