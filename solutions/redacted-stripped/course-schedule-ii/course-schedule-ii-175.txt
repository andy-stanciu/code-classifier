class Solution {

    List<List<Integer>> ls;

    Set<Integer> vs = new HashSet<Integer>();

    List<Integer> var1;

    public int[] findOrder(int param1, int[][] prerequisites) {
        ls = new ArrayList<>(param1);
        var1 = new ArrayList<>(param1);
        int lenpre = prerequisites.length;
        for (int i = 0; i < param1; i++) {
            ls.add(new ArrayList<>());
        }
        for (int i = 0; i < lenpre; i++) {
            ls.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        for (int i = 0; i < param1; i++) {
            if (!dfs(i))
                return new int[0];
        }
        return var1.stream().mapToInt(Integer::intValue).toArray();
    }

    private boolean dfs(Integer crs) {
        if (ls.get(crs).isEmpty()) {
            if (!var1.contains(crs))
                var1.add(crs);
            return true;
        } else if (!vs.add(crs))
            return false;
        for (Integer dcrs : ls.get(crs)) {
            if (!dfs(dcrs))
                return false;
        }
        vs.remove(crs);
        ls.set(crs, new ArrayList<>());
        var1.add(crs);
        return true;
    }
}
