class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adjacencyList = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adjacencyList.add(new ArrayList<>());
        }
        int numOfPrerequisites = prerequisites.length;
        for (int i = 0; i < numOfPrerequisites; i++) {
            int var1 = prerequisites[i][0];
            int prerequisite = prerequisites[i][1];
            adjacencyList.get(prerequisite).add(var1);
        }
        int[] inDegree = new int[param1];
        for (int i = 0; i < param1; i++) {
            for (int neighbor : adjacencyList.get(i)) {
                inDegree[neighbor]++;
            }
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (inDegree[i] == 0) {
                queue.add(i);
            }
        }
        int[] topologicalOrder = new int[param1];
        int index = 0;
        while (!queue.isEmpty()) {
            int var1 = queue.peek();
            queue.remove();
            topologicalOrder[index++] = var1;
            for (int neighbor : adjacencyList.get(var1)) {
                inDegree[neighbor]--;
                if (inDegree[neighbor] == 0) {
                    queue.add(neighbor);
                }
            }
        }
        if (index == param1) {
            return topologicalOrder;
        }
        int[] emptyArray = {};
        return emptyArray;
    }
}
