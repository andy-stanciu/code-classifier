class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adjList.add(new ArrayList<>());
        }
        int m = prerequisites.length;
        for (int i = 0; i < m; i++) {
            adjList.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        int[] indegree = new int[param1];
        for (int i = 0; i < param1; i++) {
            for (int node : adjList.get(i)) {
                indegree[node]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        int cnt = 0;
        int[] res = new int[param1];
        while (!q.isEmpty()) {
            int node = q.poll();
            res[cnt] = node;
            cnt++;
            for (int i : adjList.get(node)) {
                indegree[i]--;
                if (indegree[i] == 0) {
                    q.add(i);
                }
            }
        }
        if (cnt == param1) {
            int[] result = new int[param1];
            int j = 0;
            for (int i = param1 - 1; i >= 0; i--) {
                result[j++] = res[i];
            }
            return result;
        }
        return new int[0];
    }
}
