class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        int[] topoSort = new int[param1];
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        int[] indegree = new int[param1];
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            int u = prerequisites[i][1];
            int v = prerequisites[i][0];
            adj.get(u).add(v);
        }
        for (int i = 0; i < param1; i++) {
            for (Integer it : adj.get(i)) {
                indegree[it]++;
            }
        }
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        int i = 0;
        while (!q.isEmpty()) {
            int node = q.poll();
            topoSort[i] = node;
            i++;
            for (Integer it : adj.get(node)) {
                indegree[it]--;
                if (indegree[it] == 0) {
                    q.add(it);
                }
            }
        }
        if (i != param1) {
            return new int[] {};
        }
        return topoSort;
    }
}
