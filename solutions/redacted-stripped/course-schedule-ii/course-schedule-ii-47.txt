class Solution {

    private List<Integer> orderList;

    public int[] findOrder(int param1, int[][] prerequisites) {
        orderList = new ArrayList<>();
        if (canFinish(param1, prerequisites)) {
            return orderList.stream().mapToInt(i -> i).toArray();
        } else {
            return new int[] {};
        }
    }

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList<Integer>[] adj = new ArrayList[param1];
        for (int i = 0; i < param1; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int[] pre : prerequisites) {
            adj[pre[0]].add(pre[1]);
        }
        int[] visited = new int[param1];
        for (int i = 0; i < param1; i++) {
            if (!dfs(i, visited, adj))
                return false;
        }
        return true;
    }

    public boolean dfs(int node, int[] visited, ArrayList<Integer>[] adj) {
        if (visited[node] == 1) {
            return false;
        }
        if (visited[node] == 2) {
            return true;
        }
        visited[node] = 1;
        for (int n : adj[node]) {
            if (!dfs(n, visited, adj))
                return false;
        }
        visited[node] = 2;
        orderList.add(node);
        return true;
    }
}
