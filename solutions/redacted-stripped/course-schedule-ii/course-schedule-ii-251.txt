class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        GraphNode[] nodes = new GraphNode[param1];
        int[] result = new int[param1];
        Queue<GraphNode> queue = new ArrayDeque<>();
        for (int i = 0; i < param1; ++i) {
            nodes[i] = new GraphNode(i);
        }
        for (int[] prerequisite : prerequisites) {
            GraphNode dest = nodes[prerequisite[0]];
            GraphNode src = nodes[prerequisite[1]];
            src.addOutGoingNode(dest);
            dest.incrIncomingNodesCount();
        }
        for (GraphNode node : nodes) {
            if (node.getIncomingNodesCount() == 0) {
                queue.offer(node);
            }
        }
        int idx = 0;
        while (!queue.isEmpty()) {
            GraphNode node = queue.poll();
            result[idx++] = node.getValue();
            for (GraphNode gNode : node.getOutGoingNodes()) {
                gNode.decrIncomingNodesCount();
                if (gNode.getIncomingNodesCount() == 0) {
                    queue.offer(gNode);
                }
            }
        }
        return idx < param1 ? new int[0] : result;
    }

    static class GraphNode {

        private final int value;

        private final List<GraphNode> outGoingNodes;

        private int incomingNodesCount;

        GraphNode(int value) {
            this.value = value;
            this.outGoingNodes = new ArrayList<>();
            this.incomingNodesCount = 0;
        }

        public int getValue() {
            return this.value;
        }

        public List<GraphNode> getOutGoingNodes() {
            return this.outGoingNodes;
        }

        public void addOutGoingNode(GraphNode node) {
            this.outGoingNodes.add(node);
        }

        public void incrIncomingNodesCount() {
            this.incomingNodesCount++;
        }

        public void decrIncomingNodesCount() {
            this.incomingNodesCount--;
        }

        public int getIncomingNodesCount() {
            return this.incomingNodesCount;
        }
    }
}
