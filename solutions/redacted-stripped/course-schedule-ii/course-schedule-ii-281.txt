class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        int[] incomingEdges = new int[param1];
        List<List<Integer>> orders = new ArrayList<>();
        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            orders.add(new ArrayList<>());
        }
        for (int[] pre : prerequisites) {
            incomingEdges[pre[0]]++;
            orders.get(pre[1]).add(pre[0]);
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (incomingEdges[i] == 0) {
                queue.offer(i);
                res.add(i);
            }
        }
        while (!queue.isEmpty()) {
            int curr = queue.poll();
            for (int n : orders.get(curr)) {
                incomingEdges[n]--;
                if (incomingEdges[n] == 0) {
                    queue.offer(n);
                    res.add(n);
                }
            }
        }
        if (res.size() != param1)
            return new int[0];
        int[] ans = new int[param1];
        for (int i = 0; i < param1; i++) {
            ans[i] = res.get(i);
        }
        return ans;
    }
}
