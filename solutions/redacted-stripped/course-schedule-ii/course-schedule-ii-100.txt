class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adjList.add(new ArrayList<>());
        }
        int[] inDegree = new int[param1];
        for (int[] prerequisite : prerequisites) {
            int var1 = prerequisite[0];
            int pre = prerequisite[1];
            adjList.get(pre).add(var1);
            inDegree[var1]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (inDegree[i] == 0) {
                queue.add(i);
            }
        }
        List<Integer> order = new ArrayList<>();
        while (!queue.isEmpty()) {
            int current = queue.poll();
            order.add(current);
            for (int neighbor : adjList.get(current)) {
                inDegree[neighbor]--;
                if (inDegree[neighbor] == 0) {
                    queue.add(neighbor);
                }
            }
        }
        if (order.size() == param1) {
            int[] result = new int[param1];
            for (int i = 0; i < param1; i++) {
                result[i] = order.get(i);
            }
            return result;
        } else {
            return new int[0];
        }
    }
}
