class Solution {

    public int[] findOrder(int param1, int[][] pre) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) adj.add(new ArrayList<>());
        for (int i = 0; i < pre.length; i++) {
            adj.get(pre[i][1]).add(pre[i][0]);
        }
        int[] indegree = new int[param1];
        for (int i = 0; i < param1; i++) {
            for (int j : adj.get(i)) {
                indegree[j]++;
            }
        }
        List<Integer> ans = new ArrayList<>();
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0)
                q.add(i);
        }
        while (!q.isEmpty()) {
            int temp = q.poll();
            ans.add(temp);
            for (int j : adj.get(temp)) {
                indegree[j]--;
                if (indegree[j] == 0) {
                    q.add(j);
                }
            }
        }
        if (ans.size() != param1)
            return new int[] {};
        return ans.stream().mapToInt(i -> i).toArray();
    }
}
