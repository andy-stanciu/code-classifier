class Solution {

    private boolean dfs(int node, boolean[] visited, boolean[] pathVis, Stack<Integer> st, ArrayList<ArrayList<Integer>> adj) {
        visited[node] = true;
        pathVis[node] = true;
        ArrayList<Integer> neighbors = adj.get(node);
        for (int it : neighbors) {
            if (pathVis[it] == true) {
                return false;
            } else if (visited[it] == false) {
                if (!dfs(it, visited, pathVis, st, adj)) {
                    return false;
                }
            }
        }
        pathVis[node] = false;
        st.push(node);
        return true;
    }

    public int[] findOrder(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        Stack<Integer> st = new Stack<>();
        boolean[] visited = new boolean[param1];
        boolean[] pathVis = new boolean[param1];
        for (int i = 0; i < param1; i++) {
            if (!visited[i]) {
                if (!dfs(i, visited, pathVis, st, adj)) {
                    return new int[0];
                }
            }
        }
        int[] topoSort = new int[param1];
        int i = -1;
        while (!st.isEmpty()) {
            topoSort[++i] = st.pop();
        }
        return topoSort;
    }
}
