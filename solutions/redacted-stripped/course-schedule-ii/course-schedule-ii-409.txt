class Solution {

    public int[] findOrder(int num, int[][] pre) {
        ArrayList<Integer>[] arr = new ArrayList[num];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = new ArrayList<>();
        }
        for (int i = 0; i < pre.length; i++) {
            arr[pre[i][1]].add(pre[i][0]);
        }
        int[] indegree = new int[num];
        for (int i = 0; i < num; i++) {
            for (int x : arr[i]) {
                indegree[x]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < num; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        int[] res = new int[num];
        int ind = 0;
        while (!q.isEmpty()) {
            int temp = q.poll();
            res[ind++] = temp;
            for (int i = 0; i < arr[temp].size(); i++) {
                indegree[arr[temp].get(i)]--;
                if (indegree[arr[temp].get(i)] == 0) {
                    q.add(arr[temp].get(i));
                }
            }
        }
        if (ind == num) {
            return res;
        } else {
            int[] t = {};
            return t;
        }
    }
}
