class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        int cdone = param1 - 1;
        Queue<Integer> q = new LinkedList<>();
        int[] var1 = new int[param1];
        HashMap<Integer, ArrayList<Integer>> hm = new HashMap<>();
        int[] indegree = new int[param1];
        Arrays.fill(indegree, 0);
        for (int i = 0; i < prerequisites.length; i++) {
            ArrayList<Integer> n = hm.getOrDefault(prerequisites[i][0], new ArrayList<>());
            n.add(prerequisites[i][1]);
            hm.put(prerequisites[i][0], n);
            indegree[prerequisites[i][1]]++;
        }
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0)
                q.add(i);
        }
        while (!q.isEmpty()) {
            int curr = q.remove();
            var1[cdone--] = curr;
            if (hm.containsKey(curr)) {
                for (int v : hm.get(curr)) {
                    indegree[v]--;
                    if (indegree[v] == 0)
                        q.add(v);
                }
            }
        }
        if (cdone >= 0)
            return new int[] {};
        else
            return var1;
    }
}
