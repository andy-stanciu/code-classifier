class Solution {

    public static Stack<Integer> stack;

    public static int[] visited;

    public int[] findOrder(int param1, int[][] prerequisites) {
        stack = new Stack<Integer>();
        visited = new int[param1];
        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<Integer>());
        }
        for (int[] i : prerequisites) {
            adj.get(i[1]).add(i[0]);
        }
        for (int i = 0; i < param1; i++) {
            if (visited[i] == 0) {
                if (dfs(adj, i)) {
                    return new int[] {};
                }
            }
        }
        int[] result = new int[param1];
        int x = 0;
        while (!stack.isEmpty()) {
            result[x++] = stack.pop();
        }
        return result;
    }

    public static boolean dfs(ArrayList<ArrayList<Integer>> adj, int node) {
        if (visited[node] == 1) {
            return true;
        }
        if (visited[node] == 2) {
            return false;
        }
        visited[node] = 1;
        for (int i : adj.get(node)) {
            if (dfs(adj, i)) {
                return true;
            }
        }
        visited[node] = 2;
        stack.push(node);
        return false;
    }
}
