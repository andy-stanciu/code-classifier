class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
        int len = prerequisites.length;
        for (int i = 0; i < param1; i++) adj.add(new ArrayList<Integer>());
        for (int i = 0; i < len; i++) adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        int[] inDeg = new int[param1];
        int[] ans = new int[param1];
        int x = 0;
        for (int i = 0; i < param1; i++) for (int val : adj.get(i)) inDeg[val]++;
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < inDeg.length; i++) if (inDeg[i] == 0)
            q.add(i);
        while (!q.isEmpty()) {
            int node = q.poll();
            ans[x++] = node;
            for (int neighbour : adj.get(node)) {
                inDeg[neighbour]--;
                if (inDeg[neighbour] == 0)
                    q.add(neighbour);
            }
        }
        if (x != param1)
            return new int[] {};
        return ans;
    }
}
