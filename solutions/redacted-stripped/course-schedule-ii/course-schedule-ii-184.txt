class Solution {

    public static boolean DFS(int u, ArrayList<ArrayList<Integer>> adj, boolean[] visited, boolean[] recStack, Stack<Integer> stack) {
        if (recStack[u]) {
            return true;
        }
        if (visited[u]) {
            return false;
        }
        visited[u] = true;
        recStack[u] = true;
        for (Integer m : adj.get(u)) {
            if (DFS(m, adj, visited, recStack, stack)) {
                return true;
            }
        }
        recStack[u] = false;
        stack.push(u);
        return false;
    }

    public int[] findOrder(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        boolean[] visited = new boolean[param1];
        boolean[] recStack = new boolean[param1];
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < param1; i++) {
            if (!visited[i]) {
                if (DFS(i, adj, visited, recStack, stack)) {
                    return new int[0];
                }
            }
        }
        int[] array = new int[param1];
        for (int i = 0; i < param1; i++) {
            array[i] = stack.pop();
        }
        return array;
    }
}
