class Solution {

    List<Integer> list;

    boolean[] vis;

    boolean[] onPath;

    boolean cycle;

    public int[] findOrder(int param1, int[][] prerequisites) {
        vis = new boolean[param1];
        onPath = new boolean[param1];
        list = new ArrayList<>();
        List<Integer>[] graph = new List[param1];
        for (int i = 0; i < param1; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] p : prerequisites) {
            graph[p[1]].add(p[0]);
        }
        for (int i = 0; i < param1; i++) {
            if (!vis[i]) {
                traverse(graph, i);
            }
        }
        Collections.reverse(list);
        if (cycle) {
            return new int[] {};
        }
        int[] res = new int[param1];
        for (int i = 0; i < param1; i++) {
            res[i] = list.get(i);
        }
        return res;
    }

    public void traverse(List<Integer>[] graph, int start) {
        if (onPath[start]) {
            cycle = true;
            return;
        }
        if (vis[start] || cycle) {
            return;
        }
        vis[start] = true;
        onPath[start] = true;
        for (int n : graph[start]) {
            traverse(graph, n);
        }
        list.add(start);
        onPath[start] = false;
    }
}
