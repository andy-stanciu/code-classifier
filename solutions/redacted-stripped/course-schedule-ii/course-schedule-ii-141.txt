class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        List<List<Integer>> list = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            list.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            list.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        int[] indegree = new int[param1];
        for (int i = 0; i < param1; i++) {
            for (int node : list.get(i)) {
                indegree[node]++;
            }
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0)
                queue.add(i);
        }
        ArrayList<Integer> result = new ArrayList<>();
        while (!queue.isEmpty()) {
            int node = queue.remove();
            result.add(node);
            for (int adjacentNode : list.get(node)) {
                indegree[adjacentNode]--;
                if (indegree[adjacentNode] == 0)
                    queue.add(adjacentNode);
            }
        }
        return result.size() == param1 ? result.stream().mapToInt(i -> i).toArray() : new int[0];
    }
}
