class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            graph.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            graph.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        int[] indegree = new int[param1];
        for (int[] curr : prerequisites) {
            indegree[curr[0]]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        ArrayList<Integer> topo = new ArrayList<>();
        while (!q.isEmpty()) {
            int curr = q.remove();
            topo.add(curr);
            for (int temp : graph.get(curr)) {
                if (--indegree[temp] == 0) {
                    q.add(temp);
                }
            }
        }
        if (topo.size() == param1) {
            int[] res = new int[param1];
            for (int i = 0; i < param1; i++) {
                res[i] = topo.get(i);
            }
            return res;
        }
        return new int[0];
    }
}
