class Solution {

    public void fun(int[] num, int[][] arr) {
        for (int i = 0; i < arr.length; i++) {
            num[arr[i][0]]++;
        }
    }

    public int[] findOrder(int param1, int[][] prerequisites) {
        int[] indegree = new int[param1];
        fun(indegree, prerequisites);
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                queue.add(i);
            }
        }
        ArrayList<Integer> order = new ArrayList<>();
        while (!queue.isEmpty()) {
            int current = queue.poll();
            order.add(current);
            for (int i = 0; i < prerequisites.length; i++) {
                if (prerequisites[i][1] == current) {
                    indegree[prerequisites[i][0]]--;
                    if (indegree[prerequisites[i][0]] == 0) {
                        queue.add(prerequisites[i][0]);
                    }
                }
            }
        }
        if (order.size() != param1) {
            return new int[0];
        }
        int[] result = new int[order.size()];
        for (int i = 0; i < order.size(); i++) {
            result[i] = order.get(i);
        }
        return result;
    }
}
