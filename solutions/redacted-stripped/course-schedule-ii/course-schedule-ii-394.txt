class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        ArrayList<Integer>[] graph = new ArrayList[param1];
        for (int i = 0; i < param1; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] pre : prerequisites) {
            graph[pre[1]].add(pre[0]);
        }
        int[] in = new int[param1];
        for (int[] pre : prerequisites) {
            in[pre[0]]++;
        }
        List<Integer> ans = new ArrayList<>();
        Queue<Integer> que = new ArrayDeque<>();
        for (int i = 0; i < in.length; i++) {
            if (in[i] == 0) {
                que.add(i);
            }
        }
        int idx = 0;
        while (que.size() > 0) {
            int rem = que.remove();
            ans.add(rem);
            idx++;
            for (int nbr : graph[rem]) {
                in[nbr]--;
                if (in[nbr] == 0) {
                    que.add(nbr);
                }
            }
        }
        if (ans.size() != param1) {
            return new int[] {};
        } else {
            int[] as = new int[ans.size()];
            for (int i = 0; i < ans.size(); i++) {
                as[i] = ans.get(i);
            }
            return as;
        }
    }
}
