class Solution {

    static class Edge {

        int src;

        int dest;

        public Edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }

    public int[] findOrder(int param1, int[][] prerequisites) {
        if (param1 == 0) {
            return new int[0];
        }
        ArrayList<Edge>[] graph = new ArrayList[param1];
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            graph[prerequisites[i][0]].add(new Edge(prerequisites[i][0], prerequisites[i][1]));
        }
        if (isCycle(graph)) {
            return new int[0];
        }
        ArrayList<Integer> list = new ArrayList();
        return answer(list, graph);
    }

    public static int[] answer(ArrayList<Integer> list, ArrayList<Edge>[] graph) {
        boolean[] vis = new boolean[graph.length];
        Stack<Integer> s = new Stack();
        for (int i = 0; i < graph.length; i++) {
            if (!vis[i])
                schedule(graph, i, vis, s);
        }
        while (!s.isEmpty()) {
            list.add(s.pop());
        }
        Collections.reverse(list);
        return list.stream().mapToInt(i -> i).toArray();
    }

    public static void answer_util(ArrayList<Edge>[] graph, int curr, boolean[] vis, Stack<Integer> s) {
        vis[curr] = true;
        for (int i = 0; i < graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);
            if (!vis[e.dest]) {
                answer_util(graph, e.dest, vis, s);
            }
        }
        s.push(curr);
    }

    public static boolean isCycle(ArrayList<Edge>[] graph) {
        boolean[] visited = new boolean[graph.length];
        boolean[] stack = new boolean[graph.length];
        for (int i = 0; i < graph.length; i++) {
            if (!visited[i]) {
                if (isCycleUtil(graph, i, visited, stack)) {
                    return true;
                }
            }
        }
        return false;
    }

    public static boolean isCycleUtil(ArrayList<Edge>[] graph, int curr, boolean[] visited, boolean[] stack) {
        visited[curr] = true;
        stack[curr] = true;
        for (int i = 0; i < graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);
            if (stack[e.dest] == true) {
                return true;
            }
            if (!visited[e.dest] && isCycleUtil(graph, e.dest, visited, stack)) {
                return true;
            }
        }
        stack[curr] = false;
        return false;
    }
}
