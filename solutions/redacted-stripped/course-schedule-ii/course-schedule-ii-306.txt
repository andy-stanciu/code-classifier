class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        int[] res = new int[param1];
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        int[] indegree = new int[param1];
        for (int i = 0; i < prerequisites.length; i++) {
            indegree[prerequisites[i][0]]++;
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        int count = 0;
        List<Integer> ans = new ArrayList<>();
        while (!q.isEmpty()) {
            int p = q.poll();
            for (int u : adj.get(p)) {
                indegree[u]--;
                if (indegree[u] == 0) {
                    q.add(u);
                }
            }
            ans.add(p);
            count++;
        }
        if (count == param1) {
            for (int i = 0; i < param1; i++) {
                res[i] = ans.get(i);
            }
            return res;
        } else {
            return new int[0];
        }
    }
}
