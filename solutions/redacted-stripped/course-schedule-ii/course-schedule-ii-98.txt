class Solution {

    class Edge {

        int src;

        int dest;

        Edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }

    public void createGraph(int[][] prerequisites, ArrayList<Edge>[] graph) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            graph[prerequisites[i][1]].add(new Edge(prerequisites[i][1], prerequisites[i][0]));
        }
    }

    public int[] findOrder(int param1, int[][] prerequisites) {
        ArrayList<Edge>[] graph = new ArrayList[param1];
        createGraph(prerequisites, graph);
        boolean[] vis = new boolean[param1];
        boolean[] recStack = new boolean[param1];
        Stack<Integer> s = new Stack<>();
        int[] ans = new int[param1];
        int y = 0;
        for (int i = 0; i < param1; i++) {
            if (!vis[i]) {
                if (!topSortUtil(graph, i, vis, recStack, s)) {
                    return new int[0];
                }
            }
        }
        while (!s.isEmpty()) {
            ans[y] = s.pop();
            y++;
        }
        return ans;
    }

    public boolean topSortUtil(ArrayList<Edge>[] graph, int curr, boolean[] vis, boolean[] recStack, Stack<Integer> s) {
        vis[curr] = true;
        recStack[curr] = true;
        for (int i = 0; i < graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);
            if (recStack[e.dest]) {
                return false;
            }
            if (!vis[e.dest]) {
                if (!topSortUtil(graph, e.dest, vis, recStack, s)) {
                    return false;
                }
            }
        }
        recStack[curr] = false;
        s.push(curr);
        return true;
    }
}
