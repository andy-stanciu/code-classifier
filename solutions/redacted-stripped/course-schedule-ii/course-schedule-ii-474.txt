class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        boolean[] visited = new boolean[param1];
        HashMap<Integer, List<Integer>> hm = new HashMap<>();
        for (int i = 0; i < param1; i++) {
            hm.put(i, new ArrayList<>());
        }
        for (int[] pr : prerequisites) {
            hm.get(pr[0]).add(pr[1]);
        }
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < param1; i++) {
            if (!visited[i]) {
                visit(hm, stack, visited, i, new HashSet<Integer>());
            }
            if (stack.isEmpty())
                break;
        }
        if (stack.isEmpty())
            return new int[0];
        int[] res = new int[param1];
        for (int i = param1 - 1; i >= 0; i--) {
            res[i] = stack.pop();
        }
        return res;
    }

    void visit(HashMap<Integer, List<Integer>> hm, Stack<Integer> stack, boolean[] visited, int index, HashSet<Integer> hs) {
        if (!hs.add(index)) {
            stack.clear();
            return;
        }
        if (visited[index])
            return;
        visited[index] = true;
        for (int i : hm.get(index)) {
            visit(hm, stack, visited, i, hs);
            if (stack.isEmpty())
                return;
            hs.remove(i);
        }
        stack.push(index);
    }
}
