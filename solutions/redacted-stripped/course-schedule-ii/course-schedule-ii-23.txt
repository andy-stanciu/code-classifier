public class Solution {

    public int[] findOrder(int param1, int[][] prerequisites) {
        int[] result = new int[param1];
        int[] indegree = new int[param1];
        List<Integer>[] map = new List[param1];
        Queue<Integer> queue = new LinkedList<Integer>();
        int var1 = param1;
        for (int[] pair : prerequisites) {
            indegree[pair[0]]++;
            if (map[pair[1]] == null)
                map[pair[1]] = new ArrayList<>();
            map[pair[1]].add(pair[0]);
        }
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                queue.add(i);
            }
        }
        while (!queue.isEmpty()) {
            int var2 = queue.poll();
            result[param1 - var1] = var2;
            var1--;
            if (map[var2] == null)
                continue;
            for (int item : map[var2]) {
                indegree[item]--;
                if (indegree[item] == 0)
                    queue.add(item);
            }
        }
        return var1 == 0 ? result : new int[0];
    }
}
