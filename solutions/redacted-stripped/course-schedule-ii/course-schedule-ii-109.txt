class Solution {

    int[] nodeStatus;

    Queue<Integer> result;

    int currIndex = 0;

    ArrayList<HashSet<Integer>> tree;

    public boolean helper(int param1) {
        if (nodeStatus[param1] == 2) {
            return true;
        }
        if (nodeStatus[param1] == 1) {
            return false;
        }
        nodeStatus[param1] = 1;
        for (int dest : tree.get(param1)) {
            if (!helper(dest)) {
                return false;
            }
        }
        nodeStatus[param1] = 2;
        result.add(param1);
        return true;
    }

    public int[] findOrder(int param2, int[][] prerequisites) {
        nodeStatus = new int[param2];
        result = new LinkedList<Integer>();
        tree = new ArrayList<HashSet<Integer>>(param2);
        for (int i = 0; i < param2; ++i) {
            tree.add(new HashSet());
        }
        for (int i = 0; i < prerequisites.length; ++i) {
            tree.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        for (int i = 0; i < param2; ++i) {
            if (!helper(i)) {
                return new int[0];
            }
        }
        int[] ans = new int[param2];
        for (int i = 0; i < param2; ++i) {
            ans[i] = result.poll();
        }
        return ans;
    }
}
