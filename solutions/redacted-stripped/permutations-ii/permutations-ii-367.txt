class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        HashSet<Integer> visited = new HashSet<>();
        HashSet<List<Integer>> var1 = new HashSet<>();
        method1(nums, new ArrayList<Integer>(), var1, visited);
        List<List<Integer>> result = new ArrayList<>();
        for (List<Integer> temp : var1) {
            result.add(temp);
        }
        return result;
    }

    public HashSet<List<Integer>> method1(int[] nums, List<Integer> temp, HashSet<List<Integer>> var1, HashSet<Integer> visited) {
        if (temp.size() == nums.length) {
            var1.add(new ArrayList<>(temp));
            temp = new ArrayList<>();
            return method1(nums, temp, var1, visited);
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited.contains(i)) {
                continue;
            }
            temp.add(nums[i]);
            visited.add(i);
            method1(nums, temp, var1, visited);
            temp.remove(temp.size() - 1);
            visited.remove(i);
        }
        return var1;
    }
}
