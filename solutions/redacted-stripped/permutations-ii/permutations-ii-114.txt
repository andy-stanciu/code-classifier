class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> m = new ArrayList<>();
        for (int num : nums) {
            m.add(num);
        }
        recurPerm(nums, ans, m, 0);
        return ans;
    }

    private static void swap(List<Integer> list, int i, int j) {
        int temp = list.get(i);
        list.set(i, list.get(j));
        list.set(j, temp);
    }

    public static void recurPerm(int[] nums, List<List<Integer>> ans, List<Integer> m, int l) {
        if (l == nums.length) {
            if (!ans.contains(m))
                ans.add(new ArrayList<>(m));
            return;
        }
        for (int i = l; i < nums.length; i++) {
            swap(m, l, i);
            recurPerm(nums, ans, m, l + 1);
            swap(m, i, l);
        }
    }
}
