class Solution {

    List<List<Integer>> lists;

    public List<List<Integer>> permuteUnique(int[] nums) {
        lists = new ArrayList<>();
        permuteUniqueHelper(nums, new boolean[nums.length], new ArrayList<>());
        return lists;
    }

    private void permuteUniqueHelper(int[] nums, boolean[] added, List<Integer> list) {
        if (list.size() == nums.length) {
            lists.add(new ArrayList(list));
            return;
        }
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < nums.length; i++) {
            if (added[i])
                continue;
            if (set.contains(nums[i]))
                continue;
            set.add(nums[i]);
            list.add(nums[i]);
            added[i] = true;
            permuteUniqueHelper(nums, added, list);
            list.remove(list.size() - 1);
            added[i] = false;
        }
    }
}
