class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Set<List<Integer>> result = new HashSet<>();
        Arrays.sort(nums);
        backTrackUniquePermutation(result, nums, 0);
        return List.copyOf(result);
    }

    private void backTrackUniquePermutation(Set<List<Integer>> result, int[] nums, int start) {
        if (nums.length == start) {
            result.add(arrayIntToList(nums));
            return;
        }
        ;
        for (int i = start; i < nums.length; i++) {
            if (i != start && nums[i] == nums[start]) {
                continue;
            }
            swap(nums, start, i);
            backTrackUniquePermutation(result, nums, start + 1);
            swap(nums, start, i);
        }
    }

    private List<Integer> arrayIntToList(int[] nums) {
        List<Integer> result = new ArrayList<>();
        for (Integer num : nums) {
            result.add(num);
        }
        return result;
    }

    private void swap(int[] nums, int firstIdx, int secondIdx) {
        int temp = nums[firstIdx];
        nums[firstIdx] = nums[secondIdx];
        nums[secondIdx] = temp;
    }
}
