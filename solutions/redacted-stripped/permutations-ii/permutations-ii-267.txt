class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<>(), nums, new boolean[nums.length]);
        return result;
    }

    public static void backtrack(List<List<Integer>> result, ArrayList<Integer> temp, int[] nums, boolean[] used) {
        if (temp.size() == nums.length && !result.contains(temp)) {
            result.add(new ArrayList<Integer>(temp));
            return;
        }
        for (int num = 0; num < nums.length; num++) {
            if (used[num] == true) {
                continue;
            }
            used[num] = true;
            temp.add(nums[num]);
            backtrack(result, temp, nums, used);
            used[num] = false;
            temp.remove(temp.size() - 1);
        }
    }
}
