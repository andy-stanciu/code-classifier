class Solution {

    List<List<Integer>> res = new ArrayList<>();

    HashMap<Integer, Integer> map = new HashMap<>();

    public List<List<Integer>> permuteUnique(int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(nums[i])) {
                map.put(nums[i], map.get(nums[i]) + 1);
            } else {
                map.put(nums[i], 1);
            }
        }
        choices(new ArrayList<>(), 0, nums.length);
        return res;
    }

    private void choices(ArrayList<Integer> temp, int index, int n) {
        if (temp.size() == n || index == n) {
            res.add(new ArrayList<>(temp));
            return;
        }
        for (int key : map.keySet()) {
            if (map.get(key) > 0) {
                temp.add(key);
                map.put(key, map.get(key) - 1);
                choices(temp, index + 1, n);
                temp.remove(temp.size() - 1);
                map.put(key, map.get(key) + 1);
            }
        }
    }
}
