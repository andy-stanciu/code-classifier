class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        ArrayList<List<Integer>> result = new ArrayList<>();
        boolean[] used = new boolean[nums.length];
        Arrays.sort(nums);
        backtrack(result, nums, new ArrayList<>(), used);
        return result;
    }

    private void backtrack(ArrayList<List<Integer>> result, int[] nums, List<Integer> permutation, boolean[] used) {
        if (permutation.size() == nums.length) {
            result.add(new ArrayList<>(permutation));
        } else {
            for (int i = 0; i < used.length; i++) {
                if (used[i] || (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])) {
                    continue;
                }
                used[i] = true;
                permutation.add(nums[i]);
                backtrack(result, nums, permutation, used);
                permutation.remove(permutation.size() - 1);
                used[i] = false;
            }
        }
    }
}
