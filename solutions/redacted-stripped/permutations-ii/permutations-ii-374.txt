class Solution {

    public void getans(LinkedHashSet<List<Integer>> hm, int[] arr, List<Integer> temp) {
        if (arr.length == 0) {
            List<Integer> tmp = new ArrayList<>();
            tmp.addAll(temp);
            hm.add(tmp);
            return;
        }
        for (int j = 0; j < arr.length; j++) {
            int[] arrnew = new int[arr.length - 1];
            int m = 0;
            for (int k = 0; k < arr.length; k++) {
                if (k == j)
                    continue;
                arrnew[m++] = arr[k];
            }
            temp.add(arr[j]);
            getans(hm, arrnew, temp);
            temp.remove(temp.size() - 1);
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        LinkedHashSet<List<Integer>> hm = new LinkedHashSet<>();
        getans(hm, nums, new ArrayList<>());
        for (List<Integer> i : hm) {
            ans.add(i);
        }
        return ans;
    }
}
