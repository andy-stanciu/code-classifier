class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        HashSet<List<Integer>> ans = new HashSet<>();
        List<List<Integer>> finalAns = new ArrayList<>();
        List<Integer> ds = new ArrayList<>();
        boolean[] check = new boolean[nums.length];
        rec(nums, ds, check, ans);
        for (List<Integer> l : ans) {
            finalAns.add(l);
        }
        return finalAns;
    }

    public void rec(int[] nums, List<Integer> ds, boolean[] check, HashSet<List<Integer>> ans) {
        if (ds.size() == nums.length) {
            ans.add(new ArrayList<>(ds));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!check[i]) {
                ds.add(nums[i]);
                check[i] = true;
                rec(nums, ds, check, ans);
                ds.remove(ds.size() - 1);
                check[i] = false;
            }
        }
    }
}
