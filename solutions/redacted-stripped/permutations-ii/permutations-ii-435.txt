class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> resultList = new ArrayList<>();
        permuteRecursive(nums, resultList, 0, nums.length);
        return resultList;
    }

    public void permuteRecursive(int[] nums, List<List<Integer>> resultList, int index, int length) {
        if (index == length) {
            List<Integer> results = new ArrayList<Integer>();
            for (int n : nums) results.add(n);
            resultList.add(results);
            return;
        }
        Set<Integer> set = new HashSet();
        for (int i = index; i < length; i++) {
            if (set.add(nums[i])) {
                swap(nums, index, i);
                permuteRecursive(nums, resultList, index + 1, length);
                swap(nums, index, i);
            }
        }
    }

    public void swap(int[] nums, int firstIndex, int secondIndex) {
        int temp = nums[firstIndex];
        nums[firstIndex] = nums[secondIndex];
        nums[secondIndex] = temp;
    }
}
