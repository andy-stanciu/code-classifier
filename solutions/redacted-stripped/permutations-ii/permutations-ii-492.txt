class Solution {

    List<List<Integer>> result;

    public List<List<Integer>> permuteUnique(int[] nums) {
        result = new ArrayList<>();
        helper(0, nums);
        return result;
    }

    private void helper(int strt, int[] nums) {
        if (strt == nums.length) {
            List<Integer> ll = new ArrayList<>();
            for (int i = 0; i < nums.length; i++) {
                ll.add(nums[i]);
            }
            if (!result.contains(ll)) {
                result.add(ll);
            }
            return;
        }
        for (int i = strt; i < nums.length; i++) {
            swap(strt, i, nums);
            helper(strt + 1, nums);
            swap(strt, i, nums);
        }
    }

    private void swap(int i, int j, int[] nums) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
