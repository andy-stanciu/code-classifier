public class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        helper(nums, 0, list);
        return list;
    }

    public static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    public static void helper(int[] nums, int idx, List<List<Integer>> list) {
        if (idx == nums.length) {
            List<Integer> result = new ArrayList<>();
            for (int num : nums) {
                result.add(num);
            }
            list.add(result);
        } else {
            Set<Integer> hashSet = new HashSet<>();
            for (int i = idx; i < nums.length; i++) {
                if (hashSet.contains(nums[i]))
                    continue;
                hashSet.add(nums[i]);
                swap(nums, idx, i);
                helper(nums, idx + 1, list);
                swap(nums, idx, i);
            }
        }
    }
}
