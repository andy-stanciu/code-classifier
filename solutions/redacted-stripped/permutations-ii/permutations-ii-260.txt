class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        boolean[] check = new boolean[nums.length];
        Set<List<Integer>> ans = new HashSet<>();
        perm(0, nums, ans);
        return new ArrayList(ans);
    }

    private void perm(int idx, int[] nums, Set<List<Integer>> ans) {
        if (idx == nums.length) {
            ArrayList<Integer> ds = new ArrayList<>();
            for (int i = 0; i < nums.length; i++) {
                ds.add(nums[i]);
            }
            ans.add(ds);
            return;
        }
        for (int i = idx; i < nums.length; i++) {
            swap(i, idx, nums);
            perm(idx + 1, nums, ans);
            swap(i, idx, nums);
        }
    }

    void swap(int i, int j, int[] nums) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
