class Solution {

    List<List<Integer>> res;

    HashMap<Integer, Integer> map;

    public List<List<Integer>> permuteUnique(int[] nums) {
        res = new ArrayList<>();
        map = new HashMap<>();
        for (int num : nums) map.put(num, map.getOrDefault(num, 0) + 1);
        backTrack(nums, new ArrayList<Integer>());
        return res;
    }

    public void backTrack(int[] nums, List<Integer> curr) {
        if (curr.size() == nums.length) {
            res.add(new ArrayList<>(curr));
            return;
        }
        for (int a : map.keySet()) {
            if (map.get(a) > 0) {
                curr.add(a);
                map.put(a, map.get(a) - 1);
                backTrack(nums, curr);
                map.put(a, map.get(a) + 1);
                curr.remove(curr.size() - 1);
            }
        }
    }
}
