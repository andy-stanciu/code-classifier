class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        boolean[] vis = new boolean[nums.length];
        backtrack(nums, ans, new ArrayList<>(), vis);
        return ans;
    }

    private static void backtrack(int[] nums, List<List<Integer>> ans, ArrayList<Integer> set, boolean[] vis) {
        if (set.size() == nums.length) {
            if (!ans.contains(set))
                ans.add(new ArrayList<>(set));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!vis[i]) {
                set.add(nums[i]);
                vis[i] = true;
                backtrack(nums, ans, set, vis);
                set.removeLast();
                vis[i] = false;
            }
        }
    }
}
