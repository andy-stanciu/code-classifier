class Solution {

    private HashSet<List<Integer>> set = new HashSet<>();

    private List<Integer> item = new ArrayList<>();

    private List<Integer> usedIndex = new ArrayList<>();

    public List<List<Integer>> permuteUnique(int[] nums) {
        backTracing(nums, nums.length, 0);
        return set.stream().collect(Collectors.toList());
    }

    private void backTracing(int[] nums, int k, int start) {
        if (k == 0) {
            set.add(new ArrayList<>(item));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (start - 1 == i) {
                continue;
            }
            if (usedIndex.contains(i)) {
                continue;
            }
            usedIndex.add(i);
            item.add(nums[i]);
            backTracing(nums, k - 1, i + 1);
            item.remove(item.size() - 1);
            usedIndex.remove(usedIndex.size() - 1);
        }
    }
}
