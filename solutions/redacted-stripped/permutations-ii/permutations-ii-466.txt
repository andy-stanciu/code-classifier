class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        HashSet<List<Integer>> set = new HashSet<>();
        boolean[] visited = new boolean[nums.length];
        helper(nums, set, visited, 0, new ArrayList<>());
        List<List<Integer>> result = new ArrayList<>();
        for (List<Integer> list : set) {
            result.add(list);
        }
        return result;
    }

    void helper(int[] nums, HashSet<List<Integer>> set, boolean[] visited, int idx, List<Integer> curr) {
        if (idx == nums.length) {
            set.add(new ArrayList<>(curr));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited[i] == false) {
                visited[i] = true;
                curr.add(nums[i]);
                helper(nums, set, visited, idx + 1, curr);
                curr.remove(curr.size() - 1);
                visited[i] = false;
            }
        }
    }
}
