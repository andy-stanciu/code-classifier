class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        boolean[] visited = new boolean[nums.length];
        getPermutation(nums, visited, ans, list);
        return ans;
    }

    public void getPermutation(int[] nums, boolean[] visited, List<List<Integer>> ans, List<Integer> list) {
        if (list.size() == nums.length) {
            ans.add(new ArrayList(list));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!visited[i]) {
                if (i > 0 && nums[i] == nums[i - 1] && visited[i - 1] == false) {
                    continue;
                }
                list.add(nums[i]);
                visited[i] = true;
                getPermutation(nums, visited, ans, list);
                list.remove(list.size() - 1);
                visited[i] = false;
            }
        }
    }
}
