class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Set<List<Integer>> set = new HashSet<>();
        List<Integer> p = new ArrayList<>();
        boolean[] chosen = new boolean[nums.length];
        backtrace(set, p, 0, nums.length, nums, chosen);
        return new ArrayList<>(set);
    }

    private void backtrace(Set<List<Integer>> set, List<Integer> p, int idx, int n, int[] nums, boolean[] chosen) {
        if (idx == n) {
            if (!set.contains(p)) {
                set.add(new ArrayList<>(p));
            }
            return;
        }
        for (int i = 0; i < n; i++) {
            if (chosen[i])
                continue;
            chosen[i] = true;
            p.add(nums[i]);
            backtrace(set, p, idx + 1, n, nums, chosen);
            p.remove(p.size() - 1);
            chosen[i] = false;
        }
    }
}
