class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> templist = new ArrayList<>();
        Map<Integer, Integer> map = new HashMap<>();
        backtrack(result, templist, map, nums);
        return result;
    }

    public void backtrack(List<List<Integer>> result, List<Integer> templist, Map<Integer, Integer> map, int[] nums) {
        if (templist.size() == nums.length) {
            if (!result.contains(templist)) {
                result.add(new ArrayList<>(templist));
            }
        }
        for (int j = 0; j < nums.length; j++) {
            if (!map.containsKey(j)) {
                map.put(j, 1);
                templist.add(nums[j]);
                backtrack(result, templist, map, nums);
                templist.remove(templist.size() - 1);
                map.remove(j);
            }
        }
    }
}
