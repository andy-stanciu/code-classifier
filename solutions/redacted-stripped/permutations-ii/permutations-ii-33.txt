class Solution {

    HashSet<List<Integer>> set;

    public List<List<Integer>> permuteUnique(int[] nums) {
        set = new HashSet<>();
        method1(nums, 0);
        List<List<Integer>> ml = new ArrayList<>(set);
        return ml;
    }

    public void method1(int[] nums, int idx) {
        if (idx == nums.length) {
            List<Integer> cl = new ArrayList<>();
            for (int i = 0; i < nums.length; i++) {
                cl.add(nums[i]);
            }
            set.add(cl);
            return;
        }
        for (int i = idx; i < nums.length; i++) {
            swap(nums, i, idx);
            method1(nums, idx + 1);
            swap(nums, i, idx);
        }
    }

    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
