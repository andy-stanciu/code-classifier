class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> numList = new ArrayList<>();
        for (int n : nums) {
            numList.add(n);
        }
        Collections.sort(numList);
        dfs(numList, 0, result);
        return result;
    }

    private void dfs(List<Integer> numList, int index, List<List<Integer>> result) {
        if (index == numList.size()) {
            result.add(new ArrayList(numList));
            return;
        }
        for (int i = index; i < numList.size(); i++) {
            if (i != index && numList.get(i) == numList.get(i - 1))
                continue;
            Collections.swap(numList, index, i);
            dfs(numList, index + 1, result);
            Collections.swap(numList, index, i);
        }
    }
}
