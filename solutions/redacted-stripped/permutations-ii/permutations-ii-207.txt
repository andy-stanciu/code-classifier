class Solution {

    private void solveRecBacktracking(int[] nums, List<List<Integer>> res, List<Integer> l, boolean[] used) {
        if (nums.length == l.size()) {
            res.add(new ArrayList<>(l));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (used[i] || (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])) {
                continue;
            }
            l.add(nums[i]);
            used[i] = true;
            solveRecBacktracking(nums, res, l, used);
            used[i] = false;
            l.remove(l.size() - 1);
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        solveRecBacktracking(nums, res, new ArrayList<>(), new boolean[nums.length]);
        return res;
    }
}
