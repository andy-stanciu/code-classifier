class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        int n = nums.length;
        List<List<Integer>> ans = new ArrayList<>();
        Set<List<Integer>> res = new HashSet<>();
        boolean[] visited = new boolean[n];
        solve(nums, res, visited, new ArrayList<>());
        for (List<Integer> e : res) {
            ans.add(e);
        }
        return ans;
    }

    static void solve(int[] nums, Set<List<Integer>> res, boolean[] visited, List<Integer> temp) {
        if (temp.size() == nums.length) {
            res.add(new ArrayList<>(temp));
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited[i] == false) {
                visited[i] = true;
                temp.add(nums[i]);
                solve(nums, res, visited, temp);
                temp.remove(temp.size() - 1);
                visited[i] = false;
            }
        }
    }
}
