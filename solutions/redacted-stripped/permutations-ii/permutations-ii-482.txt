class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        if (nums.length == 1)
            return new ArrayList<>() {

                {
                    add(Arrays.stream(nums).boxed().collect(Collectors.toList()));
                }
            };
        Set<List<Integer>> var1 = new HashSet<>();
        for (int i = 0; i < nums.length; i++) {
            if (i != 0) {
                nums[0] ^= nums[i];
                nums[i] ^= nums[0];
                nums[0] ^= nums[i];
            }
            for (List<Integer> permutation : permuteUnique(Arrays.copyOfRange(nums, 1, nums.length))) {
                permutation.add(0, nums[0]);
                var1.add(permutation);
            }
        }
        return var1.stream().toList();
    }
}
