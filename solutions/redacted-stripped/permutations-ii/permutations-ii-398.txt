class Solution {

    Set<List<Integer>> list;

    public List<List<Integer>> permuteUnique(int[] nums) {
        list = new HashSet<>();
        List<Integer> ans = new ArrayList<>();
        boolean[] visited = new boolean[nums.length];
        solve(0, nums, ans, visited);
        List<List<Integer>> res = new ArrayList<>(list);
        return res;
    }

    public void solve(int count, int[] nums, List<Integer> ans, boolean[] visited) {
        if (count == nums.length) {
            list.add(new ArrayList<Integer>(ans));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!visited[i]) {
                ans.add(nums[i]);
                visited[i] = true;
                solve(count + 1, nums, ans, visited);
                ans.remove(ans.size() - 1);
                visited[i] = false;
            }
        }
    }
}
