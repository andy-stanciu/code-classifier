class Solution {

    public void permute(int[] nums, boolean[] vis, List<Integer> temp, List<List<Integer>> ans) {
        if (temp.size() == nums.length) {
            ans.add(new ArrayList<>(temp));
            return;
        }
        int i = 0;
        while (i < nums.length) {
            if (!vis[i]) {
                vis[i] = true;
                temp.add(nums[i]);
                permute(nums, vis, temp, ans);
                temp.remove(temp.size() - 1);
                vis[i] = false;
                int prev = nums[i];
                while (i < nums.length && prev == nums[i]) {
                    i++;
                }
                i--;
            }
            i++;
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        boolean[] vis = new boolean[nums.length];
        permute(nums, vis, new ArrayList<>(), ans);
        return ans;
    }
}
