class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        method1(nums, 0, ans);
        return ans;
    }

    public void method1(int[] nums, int pos, List<List<Integer>> ans) {
        if (pos == nums.length - 1) {
            List<Integer> onePermutation = new ArrayList<>();
            for (int element : nums) {
                onePermutation.add(element);
            }
            ans.add(onePermutation);
            return;
        }
        HashSet<Integer> checkDuplicates = new HashSet<>();
        for (int i = pos; i < nums.length; i++) {
            if (!checkDuplicates.contains(nums[i])) {
                checkDuplicates.add(nums[i]);
                swap(nums, pos, i);
                method1(nums, pos + 1, ans);
                swap(nums, pos, i);
            }
        }
    }

    public void swap(int[] nums, int indexOne, int indexTwo) {
        int temp = nums[indexOne];
        nums[indexOne] = nums[indexTwo];
        nums[indexTwo] = temp;
    }
}
