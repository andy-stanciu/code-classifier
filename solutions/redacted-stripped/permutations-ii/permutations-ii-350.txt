class Solution {

    List<List<Integer>> ls = new ArrayList<List<Integer>>();

    HashSet<List<Integer>> set = new HashSet<>();

    public void permute(List<Integer> arr, int start, int end) {
        if (start == end) {
            set.add(new ArrayList<Integer>(arr));
            return;
        }
        for (int i = start; i <= end; i++) {
            if (i > start && arr.get(i) == arr.get(i - 1)) {
                continue;
            }
            Collections.swap(arr, start, i);
            permute(arr, start + 1, end);
            Collections.swap(arr, start, i);
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<Integer> arr = new ArrayList<Integer>();
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            arr.add(nums[i]);
        }
        permute(arr, 0, nums.length - 1);
        return new ArrayList(set);
    }
}
