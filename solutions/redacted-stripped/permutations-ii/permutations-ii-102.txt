class Solution {

    List<List<Integer>> list = new ArrayList<>();

    public List<List<Integer>> permuteUnique(int[] nums) {
        boolean[] visit = new boolean[nums.length];
        Arrays.fill(visit, true);
        permute(nums, visit, new ArrayList<>(), 0);
        return list;
    }

    public void permute(int[] nums, boolean[] visit, List<Integer> sublist, int idx) {
        if (sublist.size() == nums.length) {
            if (!list.contains(sublist)) {
                list.add(new ArrayList<>(sublist));
            }
            return;
        }
        int n = nums.length;
        for (int i = 0; i < nums.length; i++) {
            if (visit[idx]) {
                visit[idx] = false;
                sublist.add(nums[idx]);
                permute(nums, visit, sublist, (idx + 1) % n);
                sublist.remove(sublist.size() - 1);
                visit[idx] = true;
            }
            idx = (idx + 1) % n;
        }
    }
}
