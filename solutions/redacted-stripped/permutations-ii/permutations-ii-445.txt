class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList();
        helper(nums, 0, nums.length, ans);
        return ans;
    }

    private void helper(int[] nums, int i, int n, List<List<Integer>> ans) {
        if (i >= n) {
            List<Integer> list = new ArrayList<>();
            for (int a : nums) {
                list.add(a);
            }
            ans.add(list);
            return;
        }
        HashSet<Integer> set = new HashSet<>();
        for (int j = i; j < n; j++) {
            if (set.contains(nums[j]))
                continue;
            swap(nums, j, i);
            set.add(nums[j]);
            helper(nums, i + 1, n, ans);
            swap(nums, j, i);
        }
    }

    private void swap(int[] nums, int p, int q) {
        int temp = nums[p];
        nums[p] = nums[q];
        nums[q] = temp;
    }
}
