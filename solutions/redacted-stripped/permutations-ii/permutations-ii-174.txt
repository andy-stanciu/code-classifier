class Solution {

    public static void Backtrack(int[] nums, int idx, List<Integer> ip, Set<List<Integer>> ik, boolean[] stat) {
        if (nums.length == ip.size()) {
            ik.add(new ArrayList<>(ip));
            return;
        } else {
            for (int i = 0; i < nums.length; i++) {
                if (stat[i] == true) {
                    continue;
                } else {
                    stat[i] = true;
                    ip.add(nums[i]);
                    Backtrack(nums, idx + 1, ip, ik, stat);
                    ip.remove(ip.size() - 1);
                    stat[i] = false;
                }
            }
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        boolean[] stat = new boolean[nums.length];
        List<Integer> itr = new ArrayList<>();
        Set<List<Integer>> ipr = new HashSet<>();
        Backtrack(nums, 0, itr, ipr, stat);
        List<List<Integer>> ikrr = new ArrayList<>(ipr);
        return ikrr;
    }
}
