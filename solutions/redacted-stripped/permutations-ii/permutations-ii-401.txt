class Solution {

    static void permut(List<Integer> arr, int size, int n, List<List<Integer>> m) {
        if (size == 1 && !m.contains(arr)) {
            List<Integer> tl = new ArrayList<Integer>(arr);
            m.add(tl);
        }
        for (int i = 0; i < size; i++) {
            permut(arr, size - 1, n, m);
            if (size % 2 == 0) {
                int t = arr.get(i);
                arr.set(i, arr.get(size - 1));
                arr.set(size - 1, t);
            } else {
                int t = arr.get(0);
                arr.set(0, arr.get(size - 1));
                arr.set(size - 1, t);
            }
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<Integer> l = new ArrayList<Integer>();
        List<List<Integer>> m = new ArrayList<List<Integer>>();
        for (int i = 0; i < nums.length; i++) l.add(nums[i]);
        permut(l, nums.length, nums.length, m);
        return m;
    }
}
