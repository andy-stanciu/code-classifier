class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> var1 = new ArrayList<>();
        backTracking(nums, 0, var1, new ArrayList<>(), new boolean[nums.length]);
        return var1;
    }

    private static void backTracking(int[] nums, int index, List<List<Integer>> var1, List<Integer> currList, boolean[] visited) {
        if (currList.size() == nums.length) {
            var1.add(new ArrayList<>(currList));
        } else {
            for (int i = 0; i < nums.length; i++) {
                if (visited[i]) {
                    continue;
                }
                if (i > 0 && visited[i - 1] && nums[i] == nums[i - 1]) {
                    continue;
                }
                currList.add(nums[i]);
                visited[i] = true;
                backTracking(nums, i + 1, var1, currList, visited);
                currList.remove(currList.size() - 1);
                visited[i] = false;
            }
        }
    }
}
