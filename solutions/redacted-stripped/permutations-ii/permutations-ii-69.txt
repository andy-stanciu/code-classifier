class Solution {

    public void permuteUtil(int[] nums, HashSet<List<Integer>> set, int[] taken, List<Integer> cur) {
        if (cur.size() == nums.length) {
            set.add(new ArrayList<>(cur));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (taken[i] == 0) {
                taken[i] = 1;
                cur.add(nums[i]);
                permuteUtil(nums, set, taken, cur);
                cur.remove(cur.size() - 1);
                taken[i] = 0;
            }
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        HashSet<List<Integer>> set = new HashSet<>();
        int[] taken = new int[nums.length];
        List<Integer> cur = new ArrayList<>();
        permuteUtil(nums, set, taken, cur);
        return new ArrayList<>(set);
    }
}
