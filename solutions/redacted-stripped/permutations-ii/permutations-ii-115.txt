class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        int l = 0;
        int r = nums.length;
        List<List<Integer>> ans = new ArrayList<>();
        permuteUniqueHelper(nums, l, r, ans);
        return ans;
    }

    static void permuteUniqueHelper(int[] nums, int l, int r, List<List<Integer>> ans) {
        if (l == r) {
            List<Integer> permutation = new ArrayList<>();
            for (Integer re : nums) {
                permutation.add(re);
            }
            if (!ans.contains(permutation)) {
                ans.add(permutation);
            }
            return;
        }
        for (int i = l; i < r; i++) {
            swap(nums, i, l);
            permuteUniqueHelper(nums, l + 1, r, ans);
            swap(nums, i, l);
        }
    }

    static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
