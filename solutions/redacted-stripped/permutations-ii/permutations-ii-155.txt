class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        boolean[] judge = new boolean[nums.length];
        List<Integer> tempList = new ArrayList<>();
        List<List<Integer>> mainList = new ArrayList<>();
        backTracking(tempList, mainList, nums, judge);
        return mainList;
    }

    static void backTracking(List<Integer> tempList, List<List<Integer>> mainList, int[] nums, boolean[] judge) {
        if (tempList.size() == nums.length && !mainList.contains(tempList)) {
            mainList.add(new ArrayList<>(tempList));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (judge[i]) {
                continue;
            }
            judge[i] = true;
            tempList.add(nums[i]);
            backTracking(tempList, mainList, nums, judge);
            judge[i] = false;
            tempList.remove(tempList.size() - 1);
        }
    }
}
