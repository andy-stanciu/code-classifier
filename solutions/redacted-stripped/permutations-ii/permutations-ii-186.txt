class Solution {

    List<List<Integer>> res = new ArrayList<>();

    static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public void solve(int[] nums, int idx) {
        if (idx == nums.length) {
            List<Integer> temp = new ArrayList<>();
            for (int i = 0; i < nums.length; i++) {
                temp.add(nums[i]);
            }
            res.add(temp);
        }
        boolean[] arr = new boolean[21];
        for (int i = idx; i < nums.length; i++) {
            if (arr[nums[i] + 10] == false) {
                swap(nums, idx, i);
                solve(nums, idx + 1);
                swap(nums, idx, i);
                arr[nums[i] + 10] = true;
            }
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        solve(nums, 0);
        return res;
    }
}
