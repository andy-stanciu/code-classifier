class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> Fans = new ArrayList<List<Integer>>();
        List<Integer> qos = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            qos.add(nums[i]);
        }
        List<Integer> al = new ArrayList<>();
        fun(qos, al, Fans);
        return Fans;
    }

    static void fun(List<Integer> qos, List<Integer> ans, List<List<Integer>> Fans) {
        if (qos.size() == 0) {
            if (!Fans.contains(ans))
                Fans.add(new ArrayList<>(ans));
            return;
        }
        for (int i = 0; i < qos.size(); i++) {
            ans.add(qos.get(i));
            int val = qos.get(i);
            qos.remove(i);
            fun(qos, ans, Fans);
            ans.remove(ans.size() - 1);
            qos.add(i, val);
        }
    }
}
