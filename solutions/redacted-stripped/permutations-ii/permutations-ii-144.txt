class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        List<Integer> out = new ArrayList<>();
        backtrack(nums, res, out, map);
        return res;
    }

    private void backtrack(int[] nums, List<List<Integer>> res, List<Integer> curr, Map<Integer, Integer> map) {
        if (curr.size() == nums.length) {
            res.add(new ArrayList(curr));
            return;
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            Integer num = entry.getKey();
            Integer count = entry.getValue();
            if (count > 0) {
                curr.add(num);
                map.put(num, count - 1);
                backtrack(nums, res, curr, map);
                curr.remove(curr.size() - 1);
                map.put(num, count);
            }
        }
    }
}
