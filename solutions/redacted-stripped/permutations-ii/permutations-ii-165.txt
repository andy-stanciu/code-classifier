class Solution {

    public List<List<Integer>> permuteUnique(int[] arr) {
        List<List<Integer>> resultList = new ArrayList<>();
        Arrays.sort(arr);
        backTrack(resultList, new ArrayList<>(), arr, new boolean[arr.length]);
        return resultList;
    }

    private void backTrack(List<List<Integer>> resultList, ArrayList<Integer> tempList, int[] arr, boolean[] used) {
        if (tempList.size() == arr.length && !resultList.contains(tempList)) {
            resultList.add(new ArrayList<>(tempList));
            return;
        }
        for (int i = 0; i < arr.length; i++) {
            if (used[i]) {
                continue;
            }
            used[i] = true;
            tempList.add(arr[i]);
            backTrack(resultList, tempList, arr, used);
            used[i] = false;
            tempList.remove(tempList.size() - 1);
        }
    }
}
