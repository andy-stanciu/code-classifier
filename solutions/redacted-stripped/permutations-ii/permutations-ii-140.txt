class Solution {

    public List<List<Integer>> permuteUnique(int[] A) {
        List<List<Integer>> resultList = new ArrayList<>();
        Arrays.sort(A);
        backtracking(A, resultList, new ArrayList<>(), new boolean[A.length]);
        return resultList;
    }

    private void backtracking(int[] A, List<List<Integer>> resultList, List<Integer> templist, boolean[] used) {
        if (templist.size() == A.length && !resultList.contains(templist)) {
            resultList.add(new ArrayList<>(templist));
            return;
        }
        for (int i = 0; i < A.length; i++) {
            if (used[i] == true) {
                continue;
            }
            used[i] = true;
            templist.add(A[i]);
            backtracking(A, resultList, templist, used);
            used[i] = false;
            templist.remove(templist.size() - 1);
        }
    }
}
