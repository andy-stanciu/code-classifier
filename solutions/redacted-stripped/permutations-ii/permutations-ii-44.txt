class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);
        backTracking(result, new ArrayList<>(), nums, new boolean[nums.length]);
        return result;
    }

    public static void backTracking(List<List<Integer>> result, List<Integer> tempList, int[] nums, boolean[] vis) {
        if (tempList.size() == nums.length) {
            result.add(new ArrayList<>(tempList));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (vis[i])
                continue;
            if (i > 0 && nums[i] == nums[i - 1] && !vis[i - 1])
                continue;
            vis[i] = true;
            tempList.add(nums[i]);
            backTracking(result, tempList, nums, vis);
            vis[i] = false;
            tempList.remove(tempList.size() - 1);
        }
    }
}
