class Solution {

    HashSet<List<Integer>> set = new HashSet<>();

    List<List<Integer>> result = new ArrayList<>();

    public List<List<Integer>> permuteUnique(int[] nums) {
        permuteHelper(nums, 0);
        for (List<Integer> li : set) result.add(li);
        return result;
    }

    public void permuteHelper(int[] nums, int p) {
        if (p == nums.length) {
            List<Integer> li = new ArrayList<>();
            for (int i : nums) li.add(i);
            set.add(li);
            return;
        }
        for (int i = p; i < nums.length; i++) {
            swap(p, i, nums);
            permuteHelper(nums, p + 1);
            swap(p, i, nums);
        }
    }

    public void swap(int p, int q, int[] nums) {
        int temp = nums[p];
        nums[p] = nums[q];
        nums[q] = temp;
    }
}
