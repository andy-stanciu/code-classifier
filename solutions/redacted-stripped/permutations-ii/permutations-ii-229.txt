class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        HashSet<List<Integer>> set = new HashSet<>();
        Arrays.sort(nums);
        f(0, nums.length, nums, res, set);
        return res;
    }

    public static void f(int s, int n, int[] nums, List<List<Integer>> res, HashSet<List<Integer>> set) {
        if (s == n) {
            List<Integer> temp = new ArrayList<>();
            for (int i : nums) {
                temp.add(i);
            }
            if (!set.contains(temp)) {
                set.add(temp);
                res.add(temp);
            }
            return;
        }
        for (int i = s; i < n; i++) {
            swap(i, s, nums);
            f(s + 1, n, nums, res, set);
            swap(i, s, nums);
        }
    }

    public static void swap(int i, int s, int[] arr) {
        int t = arr[i];
        arr[i] = arr[s];
        arr[s] = t;
    }
}
