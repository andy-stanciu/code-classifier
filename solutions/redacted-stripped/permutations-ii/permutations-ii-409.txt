class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        int index = 0;
        solve(ans, index, nums);
        return ans;
    }

    public void solve(List<List<Integer>> ans, int index, int[] nums) {
        if (index >= nums.length) {
            ArrayList<Integer> arr = new ArrayList<>();
            for (int num : nums) {
                arr.add(num);
            }
            ans.add(arr);
            return;
        }
        HashSet<Integer> s = new HashSet<>();
        for (int j = index; j < nums.length; j++) {
            if (s.contains(nums[j])) {
                continue;
            }
            s.add(nums[j]);
            swap(nums, index, j);
            solve(ans, index + 1, nums);
            swap(nums, index, j);
        }
    }

    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
