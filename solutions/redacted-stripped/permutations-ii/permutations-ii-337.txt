class Solution {

    List<List<Integer>> res = new LinkedList<>();

    Map<Integer, Integer> mp = new HashMap<>();

    Set<List<Integer>> set = new HashSet<>();

    public List<List<Integer>> permuteUnique(int[] arr) {
        for (int i = 0; i < arr.length; i++) mp.put(i, -1);
        permute(0, arr, new LinkedList<>());
        return res;
    }

    public void permute(int ind, int[] arr, List<Integer> list) {
        if (ind == arr.length) {
            if (list.size() == arr.length && !set.contains(list)) {
                res.add(new LinkedList(list));
                set.add(list);
            }
            return;
        }
        if (mp.get(ind) == -1) {
            list.add(arr[ind]);
            mp.put(ind, 1);
            permute(0, arr, list);
            mp.put(ind, -1);
            list.remove(list.size() - 1);
        }
        permute(ind + 1, arr, list);
        return;
    }
}
