class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Set<List<Integer>> ans = new HashSet<>();
        List<Integer> help = new ArrayList<>();
        boolean[] mark = new boolean[nums.length];
        calculate(ans, help, nums, mark);
        return new ArrayList<>(ans);
    }

    private void calculate(Set<List<Integer>> ans, List<Integer> help, int[] nums, boolean[] mark) {
        if (help.size() == nums.length) {
            ans.add(new ArrayList<>(help));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!mark[i]) {
                mark[i] = true;
                help.add(nums[i]);
                calculate(ans, help, nums, mark);
                help.remove(help.size() - 1);
                mark[i] = false;
            }
        }
    }
}
