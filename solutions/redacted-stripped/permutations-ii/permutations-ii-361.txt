class Solution {

    public void myRecur(Boolean[] arr, int[] nums, List<List<Integer>> ds, List<Integer> l) {
        if (l.size() == nums.length) {
            if (!ds.contains(l)) {
                ds.add(new ArrayList<>(l));
            }
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!arr[i]) {
                l.add(nums[i]);
                arr[i] = true;
                myRecur(arr, nums, ds, l);
                l.remove(l.size() - 1);
                arr[i] = false;
            }
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> ls = new ArrayList<>();
        Boolean[] ar = new Boolean[nums.length];
        Arrays.fill(ar, false);
        myRecur(ar, nums, ans, ls);
        return ans;
    }
}
