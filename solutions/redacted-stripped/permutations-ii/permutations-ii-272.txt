class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> output = new ArrayList<>();
        HashSet<Integer> h = new HashSet<>();
        backtrack(ans, output, nums, h);
        return ans;
    }

    public void backtrack(List<List<Integer>> ans, List<Integer> output, int[] nums, HashSet<Integer> h) {
        if (output.size() == nums.length) {
            ans.add(new ArrayList<>(output));
        }
        for (int i = 0; i < nums.length; i++) {
            if (h.contains(i) || (i > 0 && nums[i - 1] == nums[i]) && !h.contains(i - 1)) {
                continue;
            }
            h.add(i);
            output.add(nums[i]);
            backtrack(ans, output, nums, h);
            h.remove(i);
            output.remove(output.size() - 1);
        }
    }
}
