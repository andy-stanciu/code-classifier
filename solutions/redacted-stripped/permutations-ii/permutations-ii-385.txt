class Solution {

    HashSet<List<Integer>> set = new HashSet<>();

    void method1(List<List<Integer>> res, List<Integer> tmp, boolean[] visited, int[] nums) {
        if (tmp.size() == nums.length) {
            set.add(new ArrayList<>(tmp));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited[i] == false) {
                visited[i] = true;
                tmp.add(nums[i]);
                method1(res, tmp, visited, nums);
                tmp.remove(tmp.size() - 1);
                visited[i] = false;
            }
        }
        return;
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        int n = nums.length;
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> tmp = new ArrayList<>();
        boolean[] visited = new boolean[n];
        method1(res, tmp, visited, nums);
        Iterator<List<Integer>> iterator = set.iterator();
        while (iterator.hasNext()) {
            res.add(iterator.next());
        }
        return res;
    }
}
