class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> list = new ArrayList<>();
        List<Integer> sublist = new ArrayList<>();
        boolean[] arr = new boolean[nums.length];
        recur(nums, list, sublist, arr);
        return list;
    }

    public void recur(int[] nums, List<List<Integer>> list, List<Integer> sublist, boolean[] arr) {
        if (sublist.size() == nums.length) {
            list.add(new ArrayList<>(sublist));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (arr[i] || i > 0 && nums[i] == nums[i - 1] && !arr[i - 1])
                continue;
            sublist.add(nums[i]);
            arr[i] = true;
            recur(nums, list, sublist, arr);
            sublist.remove(sublist.size() - 1);
            arr[i] = false;
        }
    }
}
