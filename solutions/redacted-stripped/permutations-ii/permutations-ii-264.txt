class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> ds = new ArrayList<>();
        boolean[] vis = new boolean[nums.length];
        DFS(res, ds, vis, nums);
        return res;
    }

    static void DFS(List<List<Integer>> res, List<Integer> ds, boolean[] vis, int[] nums) {
        if (ds.size() == nums.length) {
            res.add(new ArrayList<>(ds));
            return;
        } else {
            for (int i = 0; i < nums.length; i++) {
                if (vis[i] || i > 0 && nums[i - 1] == nums[i] && !vis[i - 1])
                    continue;
                vis[i] = true;
                ds.add(nums[i]);
                DFS(res, ds, vis, nums);
                vis[i] = false;
                ds.remove(ds.size() - 1);
            }
        }
    }
}
