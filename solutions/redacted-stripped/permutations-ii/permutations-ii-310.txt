class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        permuteNums(nums, new ArrayList<Integer>(), list, new boolean[nums.length]);
        return list;
    }

    private void permuteNums(int[] nums, List<Integer> temp, List<List<Integer>> list, boolean[] used) {
        if (temp.size() == nums.length && !list.contains(temp)) {
            list.add(new ArrayList<>(temp));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (used[i]) {
                continue;
            }
            used[i] = true;
            temp.add(nums[i]);
            permuteNums(nums, temp, list, used);
            used[i] = false;
            temp.remove(temp.size() - 1);
        }
    }
}
