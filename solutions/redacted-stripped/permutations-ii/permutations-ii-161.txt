class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Set<List<Integer>> tmp = new HashSet<>();
        List<List<Integer>> res = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return res;
        }
        Queue<List<Integer>> que = new LinkedList<>();
        que.offer(new ArrayList<>());
        for (int n : nums) {
            int size = que.size();
            while (size-- > 0) {
                List<Integer> cur = que.poll();
                for (int j = 0; j <= cur.size(); j++) {
                    List<Integer> cp = new ArrayList<>(cur);
                    cp.add(j, n);
                    if (cp.size() == nums.length) {
                        tmp.add(cp);
                    } else {
                        que.offer(cp);
                    }
                }
            }
        }
        for (List<Integer> t : tmp) {
            res.add(t);
        }
        return res;
    }
}
