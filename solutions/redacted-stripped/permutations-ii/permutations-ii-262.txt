class Solution {

    Set<String> set = new HashSet<>();

    public List<List<Integer>> result = new ArrayList<>();

    public List<List<Integer>> permuteUnique(int[] nums) {
        var list = Arrays.stream(nums).boxed().collect(Collectors.toList());
        compute(list, new ArrayList<>(), "");
        return result;
    }

    public void compute(List<Integer> nums, List<Integer> asf, String sasf) {
        if (nums.size() == 0) {
            if (!set.contains(sasf)) {
                List<Integer> interim = new ArrayList<>();
                interim.addAll(asf);
                result.add(interim);
                set.add(sasf);
            }
            return;
        }
        for (int i = 0; i < nums.size(); i++) {
            var val = nums.remove(i);
            asf.add(val);
            compute(nums, asf, sasf + val);
            asf.remove(asf.size() - 1);
            nums.add(i, val);
        }
    }
}
