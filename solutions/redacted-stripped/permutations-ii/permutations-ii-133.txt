class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> list = new ArrayList(), resList = new ArrayList();
        Set<String> set = new HashSet();
        int[] nums1 = new int[nums.length];
        for (int i = 0; i < nums1.length; i++) nums1[i] = i;
        bt(list, new ArrayList<>(), nums1);
        for (List<Integer> elem : list) {
            for (int i = 0; i < elem.size(); i++) elem.set(i, nums[elem.get(i)]);
            if (!set.contains(elem.toString())) {
                resList.add(elem);
                set.add(elem.toString());
            }
        }
        return resList;
    }

    private void bt(List<List<Integer>> list, List<Integer> temp, int[] nums) {
        if (temp.size() == nums.length) {
            list.add(new ArrayList<>(temp));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (temp.contains(nums[i])) {
                continue;
            } else {
                temp.add(nums[i]);
                bt(list, temp, nums);
                temp.remove(temp.size() - 1);
            }
        }
    }
}
