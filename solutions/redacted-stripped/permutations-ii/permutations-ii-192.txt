class Solution {

    public List<List<Integer>> permuteUnique(int[] A) {
        this.A = A;
        this.n = A.length;
        heaps(0);
        return res;
    }

    void heaps(int start) {
        if (start == n) {
            save();
            return;
        }
        Set<Integer> usedAsStart = new HashSet<>();
        for (int i = start; i < n; i++) {
            if (!usedAsStart.add(A[i]))
                continue;
            swap(start, i);
            heaps(start + 1);
            swap(start, i);
        }
    }

    void swap(int i, int j) {
        int temp = A[i];
        A[i] = A[j];
        A[j] = temp;
    }

    void save() {
        ArrayList<Integer> perm = new ArrayList<>(n);
        for (int a : A) perm.add(a);
        res.add(perm);
    }

    List<List<Integer>> res = new ArrayList<>();

    int[] A;

    int n;
}
