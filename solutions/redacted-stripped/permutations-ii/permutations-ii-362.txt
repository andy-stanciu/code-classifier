class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        Arrays.sort(nums);
        backtrack(list, new ArrayList<>(), nums);
        return list;
    }

    private void backtrack(List<List<Integer>> list, List<Integer> tempList, int[] nums) {
        if (tempList.size() == nums.length) {
            list.add(new ArrayList<>(tempList));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == -999)
                continue;
            if (i > 0 && nums[i] == nums[i - 1])
                continue;
            tempList.add(nums[i]);
            int temp = nums[i];
            nums[i] = -999;
            backtrack(list, tempList, nums);
            tempList.remove(tempList.size() - 1);
            nums[i] = temp;
        }
    }
}
