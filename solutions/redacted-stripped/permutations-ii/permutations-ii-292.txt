class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<Integer> temp = new ArrayList<Integer>();
        List<List<Integer>> list = new ArrayList<>();
        Arrays.sort(nums);
        boolean[] f = new boolean[nums.length];
        return permuteDuplicates(nums, list, temp, f);
    }

    public List<List<Integer>> permuteDuplicates(int[] nums, List<List<Integer>> list, List<Integer> temp, boolean[] f) {
        if (temp.size() == nums.length)
            list.add(new ArrayList<>(temp));
        for (int i = 0; i < nums.length; i++) {
            if (f[i] == false) {
                if (i > 0 && f[i - 1] != true && nums[i] == nums[i - 1])
                    continue;
                f[i] = true;
                temp.add(nums[i]);
                permuteDuplicates(nums, list, temp, f);
                temp.remove(temp.size() - 1);
                f[i] = false;
            }
        }
        return list;
    }
}
