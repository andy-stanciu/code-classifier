class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        HashSet<ArrayList<Integer>> set = new HashSet<>();
        List<List<Integer>> res = new ArrayList<>();
        ArrayList<Integer> temp = new ArrayList<>();
        boolean[] vis = new boolean[nums.length];
        method1(nums, vis, temp, nums.length, set);
        for (ArrayList<Integer> t : set) {
            res.add(t);
        }
        set.clear();
        return res;
    }

    public static void method1(int[] nums, boolean[] vis, ArrayList<Integer> al, int k, HashSet<ArrayList<Integer>> set) {
        if (k == 0) {
            set.add(new ArrayList<>(al));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (vis[i] == false) {
                vis[i] = true;
                al.add(nums[i]);
                method1(nums, vis, al, k - 1, set);
                vis[i] = false;
                al.remove(al.size() - 1);
            }
        }
    }
}
