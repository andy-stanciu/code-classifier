class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        int[] next = new int[nums.length + 1];
        next[0] = 1;
        for (int i = 0; i < nums.length; ) {
            int j = i + 1;
            while (j < nums.length && nums[j] == nums[i]) {
                ++j;
            }
            next[i + 1] = j + 1;
            i = j;
        }
        List<List<Integer>> var1 = new ArrayList<>();
        permute(nums, next, new ArrayList<>(), var1);
        return new ArrayList<>(var1);
    }

    private static void permute(int[] nums, int[] next, List<Integer> permutation, List<List<Integer>> var1) {
        if (permutation.size() == nums.length) {
            var1.add(new ArrayList<>(permutation));
        } else {
            for (int i = next[0], ip = 0; i <= nums.length; i = next[ip = i]) {
                permutation.add(nums[i - 1]);
                if (i < nums.length && nums[i] == nums[i - 1]) {
                    next[++next[ip]] = next[i];
                } else {
                    next[ip] = next[i];
                }
                permute(nums, next, permutation, var1);
                next[ip] = i;
                permutation.remove(permutation.size() - 1);
            }
        }
    }
}
