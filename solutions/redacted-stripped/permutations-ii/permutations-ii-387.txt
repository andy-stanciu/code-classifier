class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> resultList = new ArrayList<>();
        backtracking(resultList, new ArrayList<>(), nums, new boolean[nums.length]);
        return resultList;
    }

    public void backtracking(List<List<Integer>> resultList, List<Integer> tempList, int[] nums, boolean[] used) {
        if (tempList.size() == nums.length && !resultList.contains(tempList)) {
            resultList.add(new ArrayList<>(tempList));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (used[i])
                continue;
            tempList.add(nums[i]);
            used[i] = true;
            backtracking(resultList, tempList, nums, used);
            used[i] = false;
            tempList.remove(tempList.size() - 1);
        }
    }
}
