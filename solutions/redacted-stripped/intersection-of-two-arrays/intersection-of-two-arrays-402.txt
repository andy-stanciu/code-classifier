class Solution {

    private Map<Integer, Boolean> buildMap(int[] nums) {
        Map<Integer, Boolean> map = new HashMap<>();
        for (int number : nums) {
            if (!map.containsKey(number)) {
                map.put(number, true);
            }
        }
        return map;
    }

    private List<Integer> method1(int[] nums, Map<Integer, Boolean> map) {
        List<Integer> result = new ArrayList<>();
        for (int number : nums) {
            if (map.containsKey(number)) {
                result.add(number);
                map.remove(number);
            }
        }
        return result;
    }

    public int[] method2(int[] nums1, int[] nums2) {
        if (nums1 == null && nums2 == null) {
            return nums1;
        }
        if (nums1 == null || nums2 == null) {
            return null;
        }
        List<Integer> result = null;
        Map<Integer, Boolean> map = null;
        int n = nums1.length;
        int m = nums2.length;
        if (n <= m) {
            map = buildMap(nums1);
            result = method1(nums2, map);
        } else {
            map = buildMap(nums2);
            result = method1(nums1, map);
        }
        int[] resultArray = new int[result.size()];
        int index = 0;
        for (int number : result) {
            resultArray[index++] = number;
        }
        return resultArray;
    }
}
