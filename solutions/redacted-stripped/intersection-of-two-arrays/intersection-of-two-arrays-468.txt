class Solution {

    public int[] method1(int[] nums1, int[] nums2) {
        ArrayList<Integer> ans = new ArrayList<>();
        quickSort(nums1, 0, nums1.length - 1);
        for (int i = 0; i < nums2.length; i++) {
            if (bs(nums1, nums2[i])) {
                if (ans.size() == 0 || !ans.contains(nums2[i])) {
                    ans.add(nums2[i]);
                }
            }
        }
        int[] result = new int[ans.size()];
        for (int j = 0; j < result.length; j++) {
            result[j] = ans.get(j);
        }
        return result;
    }

    public boolean bs(int[] arr, int target) {
        int s = 0;
        int e = arr.length - 1;
        while (s <= e) {
            int m = s + (e - s) / 2;
            if (target == arr[m]) {
                return true;
            } else if (target > arr[m]) {
                s = m + 1;
            } else {
                e = m - 1;
            }
        }
        return false;
    }

    public static void quickSort(int[] arr, int low, int high) {
        if (low >= high) {
            return;
        }
        int i = low;
        int j = high;
        int m = (i + (j - i) / 2);
        int pivot = arr[m];
        while (i <= j) {
            while (arr[i] < pivot) {
                i++;
            }
            while (arr[j] > pivot) {
                j--;
            }
            if (i <= j) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                i++;
                j--;
            }
        }
        quickSort(arr, low, j);
        quickSort(arr, i, high);
    }
}
