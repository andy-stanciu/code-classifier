class Solution {

    public int[] method1(int[] nums1, int[] nums2) {
        int len1 = nums1.length;
        int len2 = nums2.length;
        if (len1 == 0 || len2 == 0)
            return new int[0];
        if (len1 <= len2) {
            return commonitems(nums1, nums2, len1, len2);
        } else {
            return commonitems(nums2, nums1, len2, len1);
        }
    }

    public int[] commonitems(int[] nums1, int[] nums2, int len1, int len2) {
        HashSet<Integer> result = new HashSet<>();
        for (int i : nums1) {
            if ((binarySearch(nums2, i, len2)) != -1) {
                result.add(i);
            }
        }
        int[] commonitems = new int[result.size()];
        int index = 0;
        for (int num : result) {
            commonitems[index++] = num;
        }
        return commonitems;
    }

    public int binarySearch(int[] nums, int i, int leng) {
        Arrays.sort(nums);
        int start = 0;
        int end = leng - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (i == nums[mid]) {
                return mid;
            } else if (i < nums[mid]) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return -1;
    }
}
