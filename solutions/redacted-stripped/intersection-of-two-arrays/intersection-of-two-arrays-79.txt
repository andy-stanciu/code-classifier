class Solution {

    public int[] method1(int[] nums1, int[] nums2) {
        int i;
        int[] result;
        Set<Integer> set = new HashSet<>();
        if (nums1.length < nums2.length) {
            Arrays.sort(nums2);
            for (i = 0; i < nums1.length; i++) {
                if (binarySearch(nums2, nums1[i]) != -1) {
                    set.add(nums1[i]);
                }
            }
        } else {
            Arrays.sort(nums1);
            for (i = 0; i < nums2.length; i++) {
                if (binarySearch(nums1, nums2[i]) != -1) {
                    set.add(nums2[i]);
                }
            }
        }
        result = new int[set.size()];
        i = 0;
        for (int num : set) {
            result[i++] = num;
        }
        return result;
    }

    public int binarySearch(int[] arr, int target) {
        int left = 0, right = arr.length - 1, mid;
        while (left <= right) {
            mid = left + ((right - left) >> 1);
            if (target < arr[mid]) {
                right = mid - 1;
            } else if (target > arr[mid]) {
                left = mid + 1;
            } else {
                return arr[mid];
            }
        }
        return -1;
    }
}
