class Solution {

    private static boolean result;

    private static boolean continueSearching;

    public boolean method1(TreeNode root, int param1) {
        result = false;
        continueSearching = true;
        if (root != null) {
            Stack<Node> searchStack = new Stack<>();
            searchStack.add(new Node(0, root));
            while (!searchStack.empty() && continueSearching) {
                Node node = searchStack.pop();
                if (node.treeNode.left == null && node.treeNode.right == null) {
                    boolean eval = (node.treeNode.val + node.var1) == param1;
                    result = (eval) ? true : false;
                    continueSearching = (eval) ? false : true;
                } else {
                    if (node.treeNode.left != null) {
                        searchStack.push(new Node((node.treeNode.val + node.var1), node.treeNode.left));
                    }
                    if (node.treeNode.right != null) {
                        searchStack.push(new Node((node.treeNode.val + node.var1), node.treeNode.right));
                    }
                }
            }
        }
        return result;
    }

    public static class Node {

        public final int var1;

        public final TreeNode treeNode;

        public Node(int var1, TreeNode treeNode) {
            this.var1 = var1;
            this.treeNode = treeNode;
        }
    }
}
