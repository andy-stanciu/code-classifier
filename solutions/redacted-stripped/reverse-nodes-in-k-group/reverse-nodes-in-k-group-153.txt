class Solution {

    public ListNode method1(ListNode head, int k) {
        if (head == null) {
            return null;
        }
        int listLength = 0;
        ListNode curr = head;
        while (curr != null) {
            listLength++;
            curr = curr.next;
        }
        int traversalTimes = listLength / k;
        ListNode var1 = method2(head, k, traversalTimes);
        return var1;
    }

    static ListNode method2(ListNode head, int k, int traversal) {
        if (traversal == 0) {
            return head;
        }
        ListNode next = null;
        ListNode prev = null;
        ListNode curr = head;
        int count = 0;
        while (curr != null && count < k) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
            count++;
        }
        if (next != null) {
            head.next = method2(next, k, traversal - 1);
        }
        return prev;
    }
}
