class Solution {

    public ListNode method1(ListNode head, int k) {
        return approach2Optimised(head, k);
    }

    private ListNode approach2Optimised(ListNode head, int k) {
        if (head == null)
            return null;
        if (k == 1)
            return head;
        int count = k;
        ListNode var1 = head;
        ListNode[] var2 = method2(var1, count);
        ListNode result = var2[0];
        ListNode start = var2[1];
        ListNode curr = null;
        while (start != null) {
            if (k == count)
                curr = start;
            if (k >= 1) {
                start = start.next;
                k--;
            }
            if (k == 0) {
                var2 = method2(curr, count);
                var1.next = var2[0];
                var1 = curr;
                k = count;
            }
        }
        var1.next = var2[1];
        return result;
    }

    private ListNode[] method2(ListNode temp, int k) {
        ListNode prev = null;
        while (k > 0) {
            ListNode next = temp.next;
            temp.next = prev;
            prev = temp;
            temp = next;
            k--;
        }
        return new ListNode[] { prev, temp };
    }
}
