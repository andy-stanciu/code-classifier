class Solution {

    public ListNode method1(ListNode head, int k) {
        int len = this.method3(head);
        int itr = len / k;
        ListNode tail = head;
        ListNode temp;
        ListNode ret = null;
        ListNode prev = null;
        while (itr > 0) {
            temp = this.method2(tail, prev, k);
            if (ret == null)
                ret = temp;
            prev = tail;
            tail = tail.next;
            itr -= 1;
        }
        return ret;
    }

    public ListNode method2(ListNode head, ListNode prev, int k) {
        ListNode tail = head;
        ListNode currNode = head;
        ListNode prevNode = null;
        ListNode nextNode = null;
        while (k > 0) {
            nextNode = currNode.next;
            currNode.next = prevNode;
            prevNode = currNode;
            currNode = nextNode;
            tail.next = nextNode;
            k -= 1;
        }
        if (prev != null)
            prev.next = prevNode;
        return prevNode;
    }

    public int method3(ListNode head) {
        ListNode node = head;
        int len = 1;
        while (node.next != null) {
            if (node.next != null && node.next.next != null) {
                len += 2;
                node = node.next.next;
                continue;
            }
            len += 1;
            node = node.next;
        }
        return len;
    }
}
