class Solution {

    public ListNode method1(ListNode head, int k) {
        if (head == null || k == 1)
            return head;
        ListNode temp = head;
        ListNode prevnode = null;
        while (temp != null) {
            ListNode knode = method2(temp, k);
            if (knode == null) {
                if (prevnode != null) {
                    prevnode.next = temp;
                }
                break;
            }
            ListNode nextnode = knode.next;
            knode.next = null;
            ListNode revhead = method3(temp);
            if (prevnode == null) {
                head = revhead;
            } else {
                prevnode.next = revhead;
            }
            prevnode = temp;
            temp = nextnode;
        }
        return head;
    }

    public static ListNode method2(ListNode temp, int k) {
        while (temp != null && --k > 0) {
            temp = temp.next;
        }
        return temp;
    }

    private ListNode method3(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        while (curr != null) {
            ListNode nextnode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextnode;
        }
        return prev;
    }
}
