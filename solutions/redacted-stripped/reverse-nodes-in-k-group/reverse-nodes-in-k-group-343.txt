class Solution {

    ListNode method1(ListNode head) {
        ListNode temp = head, prev = null, front;
        while (temp != null) {
            front = temp.next;
            temp.next = prev;
            prev = temp;
            temp = front;
        }
        return prev;
    }

    ListNode method2(ListNode head, int k) {
        int count = 1;
        ListNode temp = head;
        while (temp != null) {
            temp = temp.next;
            count++;
            if (count == k)
                return temp;
        }
        return temp;
    }

    public ListNode method3(ListNode head, int k) {
        ListNode temp = head, kth, nextnode, newnode, prev = null;
        while (temp != null) {
            kth = method2(temp, k);
            if (kth == null) {
                if (prev != null)
                    prev.next = temp;
                break;
            }
            nextnode = kth.next;
            kth.next = null;
            newnode = method1(temp);
            if (temp == head)
                head = newnode;
            else
                prev.next = newnode;
            prev = temp;
            temp = nextnode;
        }
        return head;
    }
}
