class Solution {

    public int len(ListNode h) {
        int count = 0;
        if (h == null)
            return 0;
        while (h != null) {
            h = h.next;
            count++;
        }
        return count;
    }

    public ListNode rev(ListNode h, int k) {
        ListNode prev = null;
        ListNode curr = h;
        while (k != 0 && curr != null) {
            ListNode n = curr.next;
            curr.next = prev;
            prev = curr;
            curr = n;
            k--;
        }
        return prev;
    }

    public ListNode method1(ListNode head, int k) {
        ListNode temp = head;
        int tl = len(head);
        ListNode prevHead = null;
        ListNode prevTail = null;
        ListNode var1 = temp;
        while (tl >= k) {
            ListNode var2 = temp;
            for (int i = 0; i < k; i++) var1 = var1.next;
            ListNode newHead = rev(temp, k);
            if (prevHead == null) {
                prevHead = newHead;
            }
            if (prevTail != null) {
                prevTail.next = newHead;
            }
            prevTail = var2;
            temp = var1;
            tl -= k;
        }
        if (prevTail != null) {
            prevTail.next = var1;
        }
        return prevHead == null ? head : prevHead;
    }
}
