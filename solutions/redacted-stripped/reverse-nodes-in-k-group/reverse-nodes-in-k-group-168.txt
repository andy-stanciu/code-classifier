class Solution {

    public ListNode method1(ListNode head, int k) {
        if (k <= 1)
            return head;
        return LLR(head, k);
    }

    public ListNode LLR(ListNode head, int k) {
        ListNode tail = null, tempHead = head;
        int tempk = k - 1;
        while (tempHead != null && tempk-- > 0) {
            tempHead = tempHead.next;
        }
        if (tempHead != null) {
            tail = tempHead;
            ListNode newHead = tail.next;
            tail.next = null;
            ListNode node = method2(head, tail);
            node.next = LLR(newHead, k);
            return tempHead;
        }
        return head;
    }

    public void l(ListNode node) {
        node = null;
    }

    public ListNode method2(ListNode head, ListNode tail) {
        ListNode temph = head;
        ListNode prev = null, curr = head, next = curr.next;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return temph;
    }

    public void method3(ListNode node) {
        while (node != null) {
            System.out.method3(node.val + "->");
            node = node.next;
        }
    }
}
