class Solution {

    public int len(ListNode node) {
        int c = 0;
        while (node != null) {
            node = node.next;
            c++;
        }
        return c;
    }

    public ListNode[] method1(ListNode head, int val, ListNode prevNode) {
        ListNode prev = prevNode;
        ListNode curr = head;
        ListNode next = head.next;
        int count = 0;
        while (next != null && count < val - 1) {
            curr.next = prev;
            prev = curr;
            curr = next;
            next = next.next;
            count++;
        }
        head.next = next;
        curr.next = prev;
        ListNode[] arr = { curr, next };
        return arr;
    }

    public ListNode method2(ListNode head, int k) {
        int n = len(head);
        int i = 0;
        ListNode temp = head;
        ListNode[] arr = method1(temp, k, null);
        ListNode newHead = arr[0];
        i = i + k;
        while (arr[1] != null && (n - i >= k)) {
            temp = arr[1];
            arr = method1(temp, k, null);
            temp.next = arr[1];
            head.next = arr[0];
            head = temp;
            i = i + k;
        }
        return newHead;
    }
}
