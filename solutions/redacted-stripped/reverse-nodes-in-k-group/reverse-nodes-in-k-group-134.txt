class Solution {

    public ListNode method1(ListNode head, int k) {
        ListNode var1 = method2(head, k);
        return var1;
    }

    ListNode getLast(ListNode head, int k) {
        if (head == null) {
            return new ListNode(-1);
        }
        if (k == 1) {
            return head;
        }
        return getLast(head.next, k - 1);
    }

    ListNode doSwap(ListNode head, int k) {
        if (k > 1) {
            ListNode nextNode = doSwap(head.next, k - 1);
            nextNode.next = head;
        }
        return head;
    }

    ListNode method2(ListNode head, int k) {
        ListNode lastNode = getLast(head, k);
        if (lastNode.val == -1) {
            return head;
        }
        ListNode nextIterationHead = lastNode.next;
        ListNode var2 = doSwap(head, k);
        ListNode nextIterationFirst = method2(nextIterationHead, k);
        var2.next = nextIterationFirst;
        return lastNode;
    }
}
