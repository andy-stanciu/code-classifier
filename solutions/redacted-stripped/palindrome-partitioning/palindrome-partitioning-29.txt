public class Solution {

    public List<List<String>> partition(String s) {
        int length = s.length();
        boolean[][] var1 = new boolean[length][length];
        method1(s, var1);
        List<List<String>> allPartitions = new ArrayList<>();
        generatePartitions(s, 0, var1, new ArrayList<>(), allPartitions);
        return allPartitions;
    }

    private static void method1(String s, boolean[][] var1) {
        int length = s.length();
        for (int start = length - 1; start >= 0; start--) {
            for (int end = start; end < length; end++) {
                if (s.charAt(start) == s.charAt(end)) {
                    if (end - start < 3) {
                        var1[start][end] = true;
                    } else {
                        var1[start][end] = var1[start + 1][end - 1];
                    }
                }
            }
        }
    }

    private static void generatePartitions(String s, int start, boolean[][] var1, List<String> currentPartition, List<List<String>> allPartitions) {
        if (start == s.length()) {
            allPartitions.add(new ArrayList<>(currentPartition));
            return;
        }
        for (int end = start; end < s.length(); end++) {
            if (var1[start][end]) {
                currentPartition.add(s.substring(start, end + 1));
                generatePartitions(s, end + 1, var1, currentPartition, allPartitions);
                currentPartition.remove(currentPartition.size() - 1);
            }
        }
    }
}
