class Solution {

    public boolean method1(String s) {
        int start = 0;
        int end = s.length() - 1;
        while (start <= end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }

    public void findPartitions(int index, String s, ArrayList<String> temp, List<List<String>> ans) {
        if (index == s.length()) {
            ans.add(new ArrayList<>(temp));
            return;
        }
        for (int i = index; i < s.length(); i++) {
            if (method1(s.substring(index, i + 1))) {
                temp.add(s.substring(index, i + 1));
                findPartitions(i + 1, s, temp, ans);
                temp.remove(temp.size() - 1);
            }
        }
        return;
    }

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        findPartitions(0, s, new ArrayList<String>(), ans);
        return ans;
    }
}
