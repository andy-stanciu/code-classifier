class Solution {

    List<List<String>> partition = new ArrayList<>();

    public List<List<String>> partition(String s) {
        dfs(s, new ArrayList<String>());
        return partition;
    }

    public void dfs(String cur, ArrayList<String> elements) {
        if (cur.length() == 0) {
            partition.add(new ArrayList<>(elements));
            return;
        }
        for (int i = 1; i <= cur.length(); i++) {
            String d = cur.substring(0, i);
            if (method1(d)) {
                elements.add(d);
                dfs(cur.substring(i), elements);
                elements.remove(elements.size() - 1);
            }
        }
    }

    public boolean method1(String a) {
        int l = 0, r = a.length() - 1;
        while (l < r) {
            if (a.charAt(l++) != a.charAt(r--))
                return false;
        }
        return true;
    }
}
