class Solution {

    public List<List<String>> partition(String s) {
        int n = s.length();
        boolean[][] dp = new boolean[n][n];
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i; j < n; j++) {
                if (i == j)
                    dp[i][j] = true;
                else if (s.charAt(i) == s.charAt(j)) {
                    if (i + 1 > j - 1 || dp[i + 1][j - 1]) {
                        dp[i][j] = true;
                    }
                }
            }
        }
        List<List<String>> res = new ArrayList<>();
        dfs(s, 0, new ArrayList<>(), res, dp);
        return res;
    }

    public void dfs(String s, int start, List<String> cur, List<List<String>> res, boolean[][] dp) {
        if (s.length() == start) {
            res.add(new ArrayList<>(cur));
            return;
        }
        for (int i = start; i < s.length(); i++) {
            if (dp[start][i]) {
                cur.add(s.substring(start, i + 1));
                dfs(s, i + 1, cur, res, dp);
                cur.remove(cur.size() - 1);
            }
        }
    }
}
