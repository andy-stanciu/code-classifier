class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        dfs(result, new ArrayList<String>(), s, 0);
        return result;
    }

    public void dfs(List<List<String>> result, List<String> part, String s, int start) {
        if (start == s.length()) {
            List<String> li = new ArrayList<>(part);
            result.add(li);
        } else {
            for (int end = start; end < s.length(); end++) {
                if (!method1(s.substring(start, end + 1)))
                    continue;
                part.add(s.substring(start, end + 1));
                dfs(result, part, s, end + 1);
                part.remove(part.size() - 1);
            }
        }
    }

    public boolean method1(String s) {
        int left = 0;
        int right = s.length() - 1;
        while (left <= right) {
            if (s.charAt(left) != s.charAt(right))
                return false;
            left++;
            right--;
        }
        return true;
    }
}
