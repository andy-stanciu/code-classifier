class Solution {

    public boolean method1(String str, int start, int end) {
        while (start <= end) {
            if (str.charAt(start) != str.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }

    public void solve(int ind, String str, List<String> temp, List<List<String>> res) {
        if (ind == str.length()) {
            res.add(new ArrayList<>(temp));
            return;
        }
        for (int i = ind; i < str.length(); i++) {
            if (method1(str, ind, i)) {
                temp.add(str.substring(ind, i + 1));
                solve(i + 1, str, temp, res);
                temp.remove(temp.size() - 1);
            }
        }
    }

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> temp = new ArrayList<>();
        solve(0, s, temp, res);
        return res;
    }
}
