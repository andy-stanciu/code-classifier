class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> li = new ArrayList<>();
        f(s, li, res);
        return res;
    }

    public void f(String s, List<String> li, List<List<String>> res) {
        if (s.length() == 0) {
            res.add(new ArrayList<>(li));
            return;
        }
        for (int i = 1; i <= s.length(); i++) {
            String up = s.substring(0, i);
            System.out.print(up + " ");
            if (isPalin(up)) {
                li.add(up);
                System.out.println("->li mai add  ");
                f(s.substring(i), li, res);
                System.out.println("BackTracking");
                for (int ii = 0; ii < li.size(); ii++) {
                    System.out.print("[" + li.get(ii) + "]");
                }
                System.out.print(" -> List before remove statement ");
                li.remove(li.size() - 1);
                System.out.println();
                for (int ii = 0; ii < li.size(); ii++) {
                    System.out.print("[" + li.get(ii) + "]");
                }
                System.out.println("->list after remove ");
            } else {
                System.out.println(" Not a palin   ");
            }
        }
    }

    public boolean isPalin(String s) {
        int st = 0;
        int e = s.length() - 1;
        while (st < e) {
            if (s.charAt(st) != s.charAt(e))
                return false;
            st++;
            e--;
        }
        return true;
    }
}
