public class Solution {

    public List<List<String>> partition(String s) {
        int len = s.length();
        boolean[][] dp = new boolean[len][len];
        List<List<String>> result = new ArrayList<>();
        dfs(s, 0, new ArrayList<>(), result, dp);
        return result;
    }

    private void dfs(String s, int start, List<String> currentList, List<List<String>> result, boolean[][] dp) {
        if (start >= s.length()) {
            result.add(new ArrayList<>(currentList));
            return;
        }
        for (int end = start; end < s.length(); end++) {
            if (s.charAt(start) == s.charAt(end) && (end - start <= 2 || dp[start + 1][end - 1])) {
                dp[start][end] = true;
                currentList.add(s.substring(start, end + 1));
                dfs(s, end + 1, currentList, result, dp);
                currentList.remove(currentList.size() - 1);
            }
        }
    }
}
