class Solution {

    private void solve(int i, int n, List<String> temp, String s, List<List<String>> ans, boolean[][] param1) {
        if (i >= n) {
            ans.add(new ArrayList<>(temp));
            return;
        }
        for (int index = i; index < n; index++) {
            String str = s.substring(i, index + 1);
            if (param1[i][index]) {
                temp.add(str);
                solve(index + 1, n, temp, s, ans, param1);
                temp.remove(temp.size() - 1);
            }
        }
    }

    public List<List<String>> partition(String s) {
        int n = s.length();
        List<List<String>> ans = new ArrayList<>();
        List<String> temp = new ArrayList<>();
        boolean[][] param1 = new boolean[n][n];
        for (int len = 1; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                if (s.charAt(i) == s.charAt(j) && (len <= 2 || param1[i + 1][j - 1])) {
                    param1[i][j] = true;
                }
            }
        }
        solve(0, n, temp, s, ans, param1);
        return ans;
    }
}
