class Solution {

    ArrayList<List<String>> ans;

    public List<List<String>> partition(String s) {
        ans = new ArrayList<List<String>>();
        partitionHelper(s, 0, 1, new ArrayList<String>());
        return ans;
    }

    private void partitionHelper(String s, int i, int j, ArrayList<String> l) {
        if (i == s.length()) {
            ans.add(new ArrayList<String>(l));
            return;
        }
        if (j > s.length())
            return;
        if (method2(s, i, j)) {
            l.add(s.substring(i, j));
            partitionHelper(s, j, j + 1, l);
            l.remove(l.size() - 1);
        }
        partitionHelper(s, i, j + 1, l);
    }

    private boolean method1(String s) {
        int i = 0;
        int j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }

    private boolean method2(String s, int start, int end) {
        while (start < end - 1) {
            if (s.charAt(start) != s.charAt(end - 1)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}
