class Solution {

    public static List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> part = new ArrayList<>();
        dfs(0, s, part, res);
        return res;
    }

    private static void dfs(int idx, String s, List<String> part, List<List<String>> res) {
        if (idx == s.length()) {
            res.add(new ArrayList<>(part));
            return;
        }
        for (int i = idx; i < s.length(); ++i) {
            if (isPalidrome(s, idx, i)) {
                part.add(s.substring(idx, i + 1));
                dfs(i + 1, s, part, res);
                part.remove(part.size() - 1);
            }
        }
    }

    private static boolean isPalidrome(String s, int l, int r) {
        while (l < r) {
            if (s.charAt(l) != s.charAt(r)) {
                return false;
            }
            l += 1;
            r -= 1;
        }
        return true;
    }
}
