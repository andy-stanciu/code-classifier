class Solution {

    private boolean[][] getDp(char[] sArr, int n) {
        boolean[][] dp = new boolean[n][n];
        for (int i = 0; i < n; i++) {
            dp[i][i] = true;
        }
        for (int i = 0; i < n - 1; i++) {
            if (sArr[i] == sArr[i + 1]) {
                dp[i][i + 1] = true;
            }
        }
        for (int len = 3; len <= n; len++) {
            for (int start = 0; start + len - 1 < n; start++) {
                int end = start + len - 1;
                if (dp[start + 1][end - 1] && sArr[start] == sArr[end]) {
                    dp[start][end] = true;
                }
            }
        }
        return dp;
    }

    private void getSolution(String s, int n, List<List<String>> solution, boolean[][] dp, int lastCut, List<String> partition) {
        if (lastCut + 1 == n) {
            solution.add(new ArrayList<>(partition));
            return;
        }
        for (int i = lastCut + 1; i < n; i++) {
            if (dp[lastCut + 1][i]) {
                partition.add(s.substring(lastCut + 1, i + 1));
                getSolution(s, n, solution, dp, i, partition);
                partition.remove(partition.size() - 1);
            }
        }
    }

    public List<List<String>> partition(String s) {
        char[] sArr = s.toCharArray();
        int n = s.length();
        boolean[][] dp = getDp(sArr, n);
        List<List<String>> solution = new ArrayList<>();
        getSolution(s, n, solution, dp, -1, new ArrayList<>());
        return solution;
    }
}
