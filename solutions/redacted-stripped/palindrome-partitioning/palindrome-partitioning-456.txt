class Solution {

    int n;

    List<List<String>> ans;

    public List<List<String>> partition(String s) {
        n = s.length();
        ans = new ArrayList<List<String>>();
        FindSubstrings(s, 0, new ArrayList<String>());
        return ans;
    }

    void FindSubstrings(String ss, int ind, ArrayList<String> list) {
        if (ind == n) {
            ans.add(new ArrayList<String>(list));
            return;
        }
        for (int i = ind + 1; i <= n; i++) {
            if (!method1(ss.substring(ind, i)))
                continue;
            list.add(ss.substring(ind, i));
            FindSubstrings(ss, i, list);
            list.remove(list.size() - 1);
        }
    }

    boolean method1(String s) {
        int lower = 0;
        int higher = s.length() - 1;
        while (lower < higher) {
            if (s.charAt(lower) != s.charAt(higher))
                return false;
            lower++;
            higher--;
        }
        return true;
    }
}
