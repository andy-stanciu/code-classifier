class Solution {

    public static List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        partitionHelper(s, 0, ans, new ArrayList<String>());
        return ans;
    }

    public static void partitionHelper(String s, int start, List<List<String>> ans, List<String> currentList) {
        if (start >= s.length()) {
            ans.add(new ArrayList<>(currentList));
            return;
        }
        for (int end = start; end < s.length(); end++) {
            if (method1(s, start, end)) {
                currentList.add(s.substring(start, end + 1));
                partitionHelper(s, end + 1, ans, currentList);
                currentList.remove(currentList.size() - 1);
            }
        }
    }

    public static boolean method1(String s, int start, int end) {
        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}
