class Solution {

    public List<List<String>> partition(String s) {
        ArrayList<List<String>> ans = new ArrayList<>();
        helper(s, 0, new ArrayList<>(), ans);
        return ans;
    }

    private void helper(String str, int idx, ArrayList<String> list, ArrayList<List<String>> ans) {
        if (idx == str.length()) {
            ans.add(new ArrayList<>(list));
            return;
        }
        for (int i = idx; i < str.length(); i++) {
            String s = str.substring(idx, i + 1);
            if (!method1(s))
                continue;
            list.add(s);
            helper(str, i + 1, list, ans);
            list.remove(list.size() - 1);
        }
    }

    private boolean method1(String str) {
        int mid = (str.length() - 1) / 2;
        for (int i = 0; i <= mid; i++) {
            if (str.charAt(i) != str.charAt(str.length() - 1 - i)) {
                return false;
            }
        }
        return true;
    }
}
