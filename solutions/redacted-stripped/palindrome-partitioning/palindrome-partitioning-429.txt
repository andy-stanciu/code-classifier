class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> list = new ArrayList<>();
        dfs(s, new ArrayList<>(), list, 0);
        return list;
    }

    private void dfs(String s, List<String> part, List<List<String>> list, int index) {
        if (index >= s.length()) {
            list.add(new ArrayList<>(part));
            return;
        }
        for (int i = index; i < s.length(); i++) {
            if (isPalin(s, index, i)) {
                part.add(s.substring(index, i + 1));
                dfs(s, part, list, i + 1);
                part.remove(part.size() - 1);
            }
        }
    }

    private boolean isPalin(String s, int i, int j) {
        while (i < j) {
            if (s.charAt(i) != s.charAt(j))
                return false;
            i++;
            j--;
        }
        return true;
    }
}
