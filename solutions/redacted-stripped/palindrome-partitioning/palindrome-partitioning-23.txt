class Solution {

    private void method1(String s, boolean[][] dp) {
        int n = s.length();
        for (int len = 1; len <= n; len++) {
            for (int i = 0, j; i <= n - len; i++) {
                j = i + len - 1;
                dp[i][j] = (s.charAt(i) == s.charAt(j) && (len <= 2 || dp[i + 1][j - 1]));
            }
        }
    }

    private void backtrack(int index, String s, List<String> curr, List<List<String>> result, boolean[][] dp) {
        if (index >= s.length()) {
            result.add(new ArrayList<>(curr));
            return;
        }
        for (int i = index; i < s.length(); i++) {
            if (dp[index][i]) {
                curr.add(s.substring(index, i + 1));
                backtrack(i + 1, s, curr, result, dp);
                curr.remove(curr.size() - 1);
            }
        }
    }

    public List<List<String>> partition(String s) {
        int n = s.length();
        List<String> t = new ArrayList<>();
        List<List<String>> result = new ArrayList<>();
        boolean[][] dp = new boolean[n][n];
        method1(s, dp);
        backtrack(0, s, t, result, dp);
        return result;
    }
}
