class Solution {

    private boolean method1(String s) {
        int i = 0, j = s.length() - 1;
        while (i <= j) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }

    private void DFS(String s, List<String> temp, List<List<String>> res) {
        if (s.length() == 0) {
            res.add(new ArrayList<>(temp));
            return;
        }
        for (int i = 1; i <= s.length(); i++) {
            String substr = s.substring(0, i);
            temp.add(substr);
            if (method1(substr)) {
                DFS(s.substring(i), temp, res);
            }
            temp.remove(temp.size() - 1);
        }
    }

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> temp = new ArrayList<>();
        DFS(s, temp, res);
        return res;
    }
}
