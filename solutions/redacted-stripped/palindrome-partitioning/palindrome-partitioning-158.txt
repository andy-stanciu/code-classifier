class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        backtrack(s, 0, new ArrayList<>(), result);
        return result;
    }

    private void backtrack(String s, int i, List<String> path, List<List<String>> result) {
        if (i == s.length()) {
            result.add(new ArrayList<>(path));
            return;
        }
        for (int j = i + 1; j <= s.length(); j++) {
            if (method1(s, i, j - 1)) {
                path.add(s.substring(i, j));
                backtrack(s, j, path, result);
                path.remove(path.size() - 1);
            }
        }
    }

    private boolean method1(String s, int left, int right) {
        while (left < right) {
            if (s.charAt(left++) != s.charAt(right--)) {
                return false;
            }
        }
        return true;
    }
}
