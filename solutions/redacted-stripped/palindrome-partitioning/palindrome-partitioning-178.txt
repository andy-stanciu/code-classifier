class Solution {

    public boolean isP(String s, int start, int end) {
        while (start < end) {
            if (s.charAt(start++) != s.charAt(end--))
                return false;
        }
        return true;
    }

    public void dfs(int start, int end, String s, List<String> path, List<List<String>> res) {
        if (end == s.length() - 1) {
            if (isP(s, start, end)) {
                path.add(s.substring(start, end + 1));
                res.add(path);
            }
            return;
        }
        if (isP(s, start, end)) {
            List<String> li = new ArrayList<>(path);
            li.add(s.substring(start, end + 1));
            dfs(end + 1, end + 1, s, li, res);
        }
        dfs(start, end + 1, s, path, res);
    }

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        dfs(0, 0, s, new ArrayList<>(), res);
        return res;
    }
}
