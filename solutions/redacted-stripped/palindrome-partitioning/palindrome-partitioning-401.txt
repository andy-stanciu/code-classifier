class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList();
        List<String> a1 = new ArrayList();
        dfs(s, 0, res, a1);
        return res;
    }

    public static void dfs(String s, int i, List<List<String>> res, List<String> a1) {
        if (i == s.length()) {
            res.add(new ArrayList(a1));
            return;
        }
        for (int ind = i; ind < s.length(); ind++) {
            if (checkp(s.substring(i, ind + 1))) {
                a1.add(s.substring(i, ind + 1));
                dfs(s, ind + 1, res, a1);
                a1.remove(a1.size() - 1);
            }
        }
    }

    public static boolean checkp(String p) {
        int i = 0, j = p.length() - 1;
        while (i < j) {
            if (p.charAt(i) != p.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}
