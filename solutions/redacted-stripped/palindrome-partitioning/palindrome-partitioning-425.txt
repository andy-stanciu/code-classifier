class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        dfs(s.toCharArray(), 0, new ArrayList<>(), res);
        return res;
    }

    private void dfs(char[] s, int i, List<String> par, List<List<String>> res) {
        if (i == s.length) {
            res.add(new ArrayList<>(par));
            return;
        }
        for (int j = i; j < s.length; j++) {
            if (method1(s, i, j)) {
                par.add(new String(s, i, j - i + 1));
                dfs(s, j + 1, par, res);
                par.remove(par.size() - 1);
            }
        }
    }

    private boolean method1(char[] s, int i, int j) {
        while (i < j && s[i] == s[j]) {
            i++;
            j--;
        }
        return i >= j;
    }
}
