class Solution {

    public boolean method1(String s, int start, int end) {
        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }

    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        List<String> list = new ArrayList<>();
        solve(s, result, list, 0);
        return result;
    }

    public void solve(String s, List<List<String>> result, List<String> list, int start) {
        if (start == s.length()) {
            result.add(new ArrayList<>(list));
            return;
        }
        for (int i = start; i < s.length(); i++) {
            if (method1(s, start, i)) {
                list.add(s.substring(start, i + 1));
                solve(s, result, list, i + 1);
                list.remove(list.size() - 1);
            }
        }
    }
}
