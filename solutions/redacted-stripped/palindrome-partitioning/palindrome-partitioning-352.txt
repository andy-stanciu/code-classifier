class Solution {

    List<List<String>> result;

    public List<List<String>> partition(String s) {
        result = new ArrayList<>();
        partition(s, 0, new ArrayList<String>());
        return result;
    }

    private void partition(String s, int idx, List<String> ls) {
        if (idx == s.length()) {
            result.add(new ArrayList<>(ls));
            return;
        }
        for (int end = idx + 1; end <= s.length(); end++) {
            String temp = s.substring(idx, end);
            if (palindrom(temp)) {
                ls.add(temp);
                partition(s, end, ls);
                ls.remove(ls.size() - 1);
            }
        }
    }

    private boolean palindrom(String s) {
        int l = 0, h = s.length() - 1;
        while (l <= h) {
            if (s.charAt(l) != s.charAt(h))
                return false;
            l++;
            h--;
        }
        return true;
    }
}
