class Solution {

    List<List<String>> answer = new ArrayList<>();

    boolean[][] polindCache;

    boolean method1(String s, int start, int end) {
        while (start < end) {
            if (s.charAt(start++) != s.charAt(end--))
                return false;
        }
        return true;
    }

    public void dfs(int start, List<String> currList, String s) {
        if (start == s.length()) {
            answer.add(new ArrayList<String>(currList));
        }
        for (int i = start; i < s.length(); i++) {
            if (polindCache[start][i]) {
                currList.add(s.substring(start, i + 1));
                dfs(i + 1, currList, s);
                currList.remove(currList.size() - 1);
            }
        }
    }

    public List<List<String>> partition(String s) {
        polindCache = new boolean[s.length()][s.length()];
        for (int start = 0; start < s.length(); start++) {
            for (int end = start; end < s.length(); end++) {
                polindCache[start][end] = method1(s, start, end);
            }
        }
        dfs(0, new ArrayList<>(), s);
        return answer;
    }
}
