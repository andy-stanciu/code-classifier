class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        List<String> path = new ArrayList<>();
        part(0, s, path, ans);
        return ans;
    }

    public void part(int index, String s, List<String> path, List<List<String>> ans) {
        if (index == s.length()) {
            ans.add(new ArrayList<>(path));
            return;
        }
        for (int i = index; i < s.length(); i++) {
            if (isPalindrom(s, index, i)) {
                path.add(s.substring(index, i + 1));
                part(i + 1, s, path, ans);
                path.removeLast();
            }
        }
    }

    public boolean isPalindrom(String str, int s, int e) {
        while (s <= e) {
            if (str.charAt(s++) != str.charAt(e--)) {
                return false;
            }
        }
        return true;
    }
}
