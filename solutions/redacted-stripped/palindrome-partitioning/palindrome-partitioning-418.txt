class Solution {

    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        return backtrack(candidates, target, 0, new ArrayList<Integer>());
    }

    private List<List<Integer>> backtrack(int[] arr, int target, int index, List<Integer> list) {
        List<List<Integer>> ans = new ArrayList<>();
        if (target < 0)
            return ans;
        if (target == 0) {
            ans.add(new ArrayList<>(list));
            return ans;
        }
        for (int i = index; i < arr.length; i++) {
            list.add(arr[i]);
            ans.addAll(backtrack(arr, target - arr[i], i, list));
            list.remove(list.size() - 1);
        }
        return ans;
    }
}
