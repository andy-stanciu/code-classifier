class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        recursion(s, 0, ans, new ArrayList<>());
        return ans;
    }

    public void recursion(String s, int index, List<List<String>> ans, List<String> res) {
        if (index == s.length()) {
            ans.add(new ArrayList<>(res));
            return;
        }
        for (int i = index; i < s.length(); i++) {
            String substring = s.substring(index, i + 1);
            if (method1(substring)) {
                res.add(substring);
                recursion(s, i + 1, ans, res);
                res.remove(res.size() - 1);
            }
        }
    }

    public boolean method1(String s) {
        int start = 0;
        int end = s.length() - 1;
        while (start <= end) {
            if (s.charAt(start) != s.charAt(end))
                return false;
            start++;
            end--;
        }
        return true;
    }
}
