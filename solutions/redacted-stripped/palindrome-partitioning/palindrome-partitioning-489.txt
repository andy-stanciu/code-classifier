class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> allPartition = new ArrayList<>();
        Deque<String> currPartition = new LinkedList<>();
        generatePartition(s, allPartition, currPartition, 0, s.length());
        return allPartition;
    }

    public void generatePartition(String str, List<List<String>> allPartition, Deque<String> currPartition, int s, int e) {
        if (s >= e) {
            allPartition.add(new ArrayList<>(currPartition));
            return;
        }
        for (int i = s; i < e; i++) {
            if (method1(str, s, i)) {
                currPartition.add(str.substring(s, i + 1));
                generatePartition(str, allPartition, currPartition, i + 1, e);
                currPartition.removeLast();
            }
        }
    }

    public boolean method1(String str, int s, int e) {
        while (s <= e) {
            if (str.charAt(s++) != str.charAt(e--)) {
                return false;
            }
        }
        return true;
    }
}
