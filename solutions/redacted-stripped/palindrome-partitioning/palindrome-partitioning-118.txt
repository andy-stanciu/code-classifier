class Solution {

    public List<List<String>> partition(String s) {
        int n = s.length();
        List<List<String>> result = new ArrayList<>();
        helper(s, n, 0, result, new ArrayList<>());
        return result;
    }

    private static void helper(String s, int n, int index, List<List<String>> Result, List<String> curr) {
        if (index == n) {
            Result.add(new ArrayList<>(curr));
            return;
        }
        for (int i = index; i < n; i++) {
            if (isPalidrome(s, index, i)) {
                curr.add(s.substring(index, i + 1));
                helper(s, n, i + 1, Result, curr);
                curr.remove(curr.size() - 1);
            }
        }
    }

    private static boolean isPalidrome(String s, int start, int end) {
        while (start <= end) {
            if (s.charAt(start++) != s.charAt(end--)) {
                return false;
            }
        }
        return true;
    }
}
