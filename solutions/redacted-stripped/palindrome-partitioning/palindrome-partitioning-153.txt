class Solution {

    public void solve(int idx, String s, List<String> path, List<List<String>> ans) {
        if (idx == s.length()) {
            ans.add(new ArrayList<>(path));
            return;
        }
        for (int i = idx; i < s.length(); ++i) {
            if (method1(idx, i, s)) {
                path.add(s.substring(idx, i + 1));
                solve(i + 1, s, path, ans);
                path.remove(path.size() - 1);
            }
        }
    }

    public boolean method1(int start, int end, String s) {
        while (start <= end) {
            if (s.charAt(start++) != s.charAt(end--)) {
                return false;
            }
        }
        return true;
    }

    public List<List<String>> partition(String s) {
        List<String> path = new ArrayList<>();
        List<List<String>> ans = new ArrayList<>();
        solve(0, s, path, ans);
        return ans;
    }
}
