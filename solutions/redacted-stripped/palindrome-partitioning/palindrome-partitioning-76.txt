class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList();
        List<String> part = new ArrayList();
        backTracking(s, ans, part, 0);
        return ans;
    }

    public void backTracking(String s, List<List<String>> ans, List<String> part, int index) {
        if (index >= s.length()) {
            ans.add(new ArrayList(part));
            return;
        }
        for (int i = index; i < s.length(); i++) {
            if (isPalidrome(s, index, i)) {
                String str = s.substring(index, i + 1);
                part.add(str);
                backTracking(s, ans, part, i + 1);
                part.remove(part.size() - 1);
            }
        }
    }

    public boolean isPalidrome(String s, int left, int right) {
        while (left < right) {
            if (s.charAt(left) != s.charAt(right))
                return false;
            left++;
            right--;
        }
        return true;
    }
}
