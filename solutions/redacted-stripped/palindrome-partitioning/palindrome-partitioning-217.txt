class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        findPartition(s, 0, new ArrayList<>(), ans);
        return ans;
    }

    private void findPartition(String s, int start, List<String> path, List<List<String>> ans) {
        if (start == s.length()) {
            ans.add(new ArrayList<>(path));
            return;
        }
        for (int end = start + 1; end <= s.length(); end++) {
            if (palindrom(s, start, end - 1)) {
                path.add(s.substring(start, end));
                findPartition(s, end, path, ans);
                path.remove(path.size() - 1);
            }
        }
    }

    private boolean palindrom(String s, int start, int end) {
        while (start < end) {
            if (s.charAt(start++) != s.charAt(end--))
                return false;
        }
        return true;
    }
}
