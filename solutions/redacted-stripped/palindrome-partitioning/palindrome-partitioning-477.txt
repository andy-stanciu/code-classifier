class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        backtracking(0, s, result, new ArrayList<>());
        return result;
    }

    private void backtracking(int index, String s, List<List<String>> result, List<String> currList) {
        if (index == s.length()) {
            result.add(new ArrayList<>(currList));
            return;
        }
        for (int i = index; i < s.length(); i++) {
            if (method1(s, index, i)) {
                currList.add(s.substring(index, i + 1));
                backtracking(i + 1, s, result, currList);
                currList.remove(currList.size() - 1);
            }
        }
    }

    private boolean method1(String s, int left, int right) {
        while (left < right) if (s.charAt(left++) != s.charAt(right--))
            return false;
        return true;
    }
}
