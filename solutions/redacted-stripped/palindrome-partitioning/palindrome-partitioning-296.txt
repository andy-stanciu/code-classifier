class olution {

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        List<String> curr = new ArrayList<>();
        partition(ans, s, 0, curr);
        return ans;
    }

    public void helper(String s, int index, List<List<String>> ans, List<String> curr) {
        if (index == s.length()) {
            ans.add(new ArrayList<String>(curr));
            return;
        }
        String temp = "";
        for (int i = index; i < s.length(); i++) {
            temp += s.charAt(i);
            if (palin(temp)) {
                System.out.println(temp);
                curr.add(temp);
                helper(s, i + 1, ans, curr);
                curr.remove(curr.size() - 1);
            }
        }
    }

    boolean palin(String s) {
        int start = 0;
        int end = s.length() - 1;
        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }

    public void partition(List<List<String>> res, String s, int ind, List<String> curr) {
        if (ind == s.length()) {
            res.add(new ArrayList<String>(curr));
            return;
        }
        String temp = "";
        for (int i = ind; i < s.length(); i++) {
            temp += s.charAt(i);
            if (palin(temp)) {
                System.out.println(temp);
                curr.add(temp);
                partition(res, s, i + 1, curr);
                curr.remove(curr.size() - 1);
            }
        }
    }
}

class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        List<String> curr = new ArrayList<>();
        helper(ans, curr, 0, s);
        return ans;
    }

    void helper(List<List<String>> ans, List<String> curr, int index, String s) {
        if (index == s.length()) {
            ans.add(new ArrayList<>(curr));
            return;
        }
        for (int i = index; i < s.length(); i++) {
            if (ispalin(s, index, i)) {
                curr.add(s.substring(index, i + 1));
                helper(ans, curr, i + 1, s);
                curr.remove(curr.size() - 1);
            }
        }
    }

    boolean ispalin(String s, int start, int end) {
        while (start <= end) {
            if (s.charAt(start++) != s.charAt(end--)) {
                return false;
            }
        }
        return true;
    }
}
