class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> possPart = new ArrayList<>();
        findPossPart(s, possPart, new ArrayList<>());
        return possPart;
    }

    private void findPossPart(String s, List<List<String>> possPart, List<String> currPart) {
        if (s.length() == 0) {
            possPart.add(new ArrayList<>(currPart));
            return;
        }
        for (int k = 1; k <= s.length(); k++) {
            String fstPart = s.substring(0, k);
            if (!method1(fstPart))
                continue;
            currPart.add(fstPart);
            findPossPart(s.substring(k, s.length()), possPart, currPart);
            currPart.remove(currPart.size() - 1);
        }
    }

    private boolean method1(String s) {
        int i = 0, j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i++) != s.charAt(j--))
                return false;
        }
        return true;
    }
}
