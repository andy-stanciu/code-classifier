class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> list = new ArrayList<>();
        helperPartition(s, list, new ArrayList<>());
        return list;
    }

    private void helperPartition(String unProcessed, List<List<String>> list, List<String> temp) {
        if (unProcessed.isEmpty()) {
            list.add(new ArrayList<>(temp));
            return;
        }
        for (int i = 0; i < unProcessed.length(); i++) {
            String leftPart = unProcessed.substring(0, i + 1);
            if (method1(leftPart)) {
                temp.add(leftPart);
                helperPartition(unProcessed.substring(i + 1), list, temp);
                temp.remove(temp.size() - 1);
            }
        }
    }

    private boolean method1(String leftPart) {
        StringBuilder sb = new StringBuilder(leftPart);
        if (leftPart.equals(sb.reverse().toString())) {
            return true;
        }
        return false;
    }
}
