class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        generateAllCombinations(s, 0, s.length() - 1, new ArrayList<>(), result);
        return result;
    }

    private void generateAllCombinations(String s, int start, int end, ArrayList<String> currentConfiguration, List<List<String>> result) {
        if (start > end) {
            result.add(new ArrayList<>(currentConfiguration));
            return;
        }
        for (int i = start; i <= end; i++) {
            String sub = s.substring(start, i + 1);
            if (method1(sub)) {
                currentConfiguration.add(sub);
                generateAllCombinations(s, i + 1, end, currentConfiguration, result);
                currentConfiguration.remove(currentConfiguration.size() - 1);
            }
        }
    }

    private boolean method1(String s) {
        int start = 0;
        int end = s.length() - 1;
        while (start <= end) {
            if (s.charAt(start) != s.charAt(end))
                return false;
            start++;
            end--;
        }
        return true;
    }
}
