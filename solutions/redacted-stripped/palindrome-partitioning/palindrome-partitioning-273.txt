class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        backtrack(new ArrayList<>(), 0, s, result);
        return result;
    }

    public void backtrack(List<String> path, int start, String s, List<List<String>> result) {
        if (start >= s.length()) {
            result.add(new ArrayList<>(path));
            return;
        }
        for (int i = start; i < s.length(); i++) {
            String junction = s.substring(start, i + 1);
            if (!method1(junction))
                continue;
            path.add(junction);
            backtrack(path, i + 1, s, result);
            path.remove(path.size() - 1);
        }
    }

    public boolean method1(String s) {
        int left = 0;
        int right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left) != s.charAt(right))
                return false;
            left++;
            right--;
        }
        return true;
    }
}
