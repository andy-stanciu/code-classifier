class Solution {

    public void method1(int[] nums1, int m, int[] nums2, int n) {
        Stack<Integer> s1 = new Stack<Integer>();
        Stack<Integer> s2 = new Stack<Integer>();
        for (int i = m - 1; i >= 0; i--) s1.push(nums1[i]);
        for (int i = nums2.length - 1; i >= 0; i--) s2.push(nums2[i]);
        int c = 0;
        while (!s1.isEmpty() && !s2.isEmpty()) {
            if (s1.peek() < s2.peek()) {
                nums1[c] = s1.pop();
                c += 1;
            } else if (s1.peek() == s2.peek()) {
                nums1[c] = s1.pop();
                c += 1;
                nums1[c] = s2.pop();
                c += 1;
            } else {
                nums1[c] = s2.pop();
                c += 1;
            }
        }
        while (!s1.isEmpty()) {
            nums1[c] = s1.pop();
            c++;
        }
        while (!s2.isEmpty()) {
            nums1[c] = s2.pop();
            c++;
        }
    }
}
