class Solution {

    private boolean isPalindrome(List<Integer> arr) {
        int l = 0, r = arr.size() - 1;
        while (l < r) {
            if (arr.get(l) != arr.get(r))
                return false;
            l++;
            r--;
        }
        return true;
    }

    public boolean method1(TreeNode root) {
        if (root == null)
            return true;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> ans = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                TreeNode curr = queue.poll();
                if (curr.left != null) {
                    queue.offer(curr.left);
                    ans.add(curr.left.val);
                } else
                    ans.add(-101);
                if (curr.right != null) {
                    queue.offer(curr.right);
                    ans.add(curr.right.val);
                } else
                    ans.add(-101);
            }
            if (!isPalindrome(ans))
                return false;
        }
        return true;
    }
}
