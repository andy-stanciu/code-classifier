class Solution {

    public String method1(String s, String t) {
        Map<Character, Integer> targetMap = new HashMap<>();
        Map<Character, Integer> var1 = new HashMap<>();
        for (char c : t.toCharArray()) {
            targetMap.put(c, targetMap.getOrDefault(c, 0) + 1);
        }
        int left = 0;
        int minLen = Integer.MAX_VALUE;
        int minLeft = 0;
        int count = 0;
        for (int right = 0; right < s.length(); right++) {
            char currentChar = s.charAt(right);
            var1.put(currentChar, var1.getOrDefault(currentChar, 0) + 1);
            if (targetMap.containsKey(currentChar) && var1.get(currentChar) <= targetMap.get(currentChar)) {
                count++;
            }
            while (count == t.length()) {
                if (right - left + 1 < minLen) {
                    minLen = right - left + 1;
                    minLeft = left;
                }
                char leftChar = s.charAt(left);
                var1.put(leftChar, var1.get(leftChar) - 1);
                if (targetMap.containsKey(leftChar) && var1.get(leftChar) < targetMap.get(leftChar)) {
                    count--;
                }
                left++;
            }
        }
        if (minLen == Integer.MAX_VALUE) {
            return "";
        }
        return s.substring(minLeft, minLeft + minLen);
    }
}
