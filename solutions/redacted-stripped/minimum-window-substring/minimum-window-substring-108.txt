class Solution {

    public String method1(String s, String t) {
        if (s.length() < t.length())
            return "";
        Map<Character, Integer> tCount = new HashMap<>();
        for (char c : t.toCharArray()) {
            tCount.put(c, tCount.getOrDefault(c, 0) + 1);
        }
        Map<Character, Integer> var1 = new HashMap<>();
        int have = 0;
        int need = tCount.size();
        int left = 0, right = 0;
        int minLen = Integer.MAX_VALUE;
        int start = 0;
        while (right < s.length()) {
            char c = s.charAt(right);
            var1.put(c, var1.getOrDefault(c, 0) + 1);
            if (tCount.containsKey(c) && var1.get(c).intValue() == tCount.get(c).intValue()) {
                have++;
            }
            while (have == need) {
                if (right - left + 1 < minLen) {
                    minLen = right - left + 1;
                    start = left;
                }
                char leftChar = s.charAt(left);
                var1.put(leftChar, var1.get(leftChar) - 1);
                if (tCount.containsKey(leftChar) && var1.get(leftChar).intValue() < tCount.get(leftChar).intValue()) {
                    have--;
                }
                left++;
            }
            right++;
        }
        return minLen == Integer.MAX_VALUE ? "" : s.substring(start, start + minLen);
    }
}
