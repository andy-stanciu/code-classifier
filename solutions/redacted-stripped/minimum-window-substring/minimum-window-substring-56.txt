class Solution {

    public String method1(String s, String t) {
        int n = s.length(), targetLen = t.length();
        HashMap<Character, Integer> reqMap = new HashMap<Character, Integer>();
        for (//filling the req Map with req chars from "t" string
        int i = 0; //filling the req Map with req chars from "t" string
        i < targetLen; i++) {
            char ch = t.charAt(i);
            int prevCount = reqMap.getOrDefault(ch, 0);
            reqMap.put(ch, prevCount + 1);
        }
        int low = 0;
        int mnLen = Integer.MAX_VALUE;
        String mnString = "";
        int matchCount = 0;
        for (int high = low; high < n; high++) {
            char ch = s.charAt(high);
            int prevCount = reqMap.getOrDefault(ch, 0);
            if (prevCount > 0)
                matchCount++;
            reqMap.put(ch, prevCount - 1);
            if (matchCount == targetLen) {
                while (low <= high) {
                    int len = high - low + 1;
                    if (len < mnLen) {
                        mnLen = len;
                        mnString = s.substring(low, high + 1);
                    }
                    char currCh = s.charAt(low);
                    int prevChCount = reqMap.get(currCh);
                    reqMap.put(currCh, prevChCount + 1);
                    low++;
                    if (reqMap.get(currCh) > 0) {
                        matchCount--;
                        break;
                    }
                }
            }
        }
        return mnString;
    }
}
