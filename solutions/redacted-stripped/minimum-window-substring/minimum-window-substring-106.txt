class Solution {

    public String method1(String s, String t) {
        int i = 0, j = 0, slen = s.length(), tlen = t.length(), minwin = Integer.MAX_VALUE;
        String ans = "";
        HashMap<Character, Integer> tmap = new HashMap<>();
        HashMap<Character, Integer> origmap = new HashMap<>();
        for (int p = 0; p < tlen; p++) origmap.put(t.charAt(p), origmap.getOrDefault(t.charAt(p), 0) + 1);
        int required = origmap.size();
        int formed = 0;
        while (j < slen) {
            char ch = s.charAt(j);
            if (origmap.containsKey(ch)) {
                tmap.put(ch, tmap.getOrDefault(ch, 0) + 1);
                if (origmap.get(ch).intValue() == tmap.get(ch).intValue())
                    formed++;
            }
            while (i <= j && required == formed) {
                int currwin = j - i + 1;
                if (currwin < minwin) {
                    minwin = currwin;
                    ans = s.substring(i, j + 1);
                }
                if (origmap.containsKey(s.charAt(i))) {
                    tmap.put(s.charAt(i), tmap.get(s.charAt(i)) - 1);
                    if (tmap.get(s.charAt(i)) < origmap.get(s.charAt(i)))
                        formed--;
                }
                i++;
            }
            j++;
        }
        return ans;
    }
}
