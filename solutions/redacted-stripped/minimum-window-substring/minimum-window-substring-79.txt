class Solution {

    public String method1(String s, String t) {
        int start = 0;
        int var1 = 0;
        int minLength = s.length() + 1;
        int end = 0;
        int matched = 0;
        HashMap<Character, Integer> map = new HashMap<>();
        if (s.length() < t.length())
            return "";
        for (int i = 0; i < t.length(); i++) {
            char character = t.charAt(i);
            map.put(character, map.getOrDefault(character, 0) + 1);
        }
        while (end < s.length()) {
            char end_char = s.charAt(end);
            if (map.containsKey(end_char)) {
                map.put(end_char, map.get(end_char) - 1);
                if (map.get(end_char) >= 0)
                    matched++;
            }
            while (matched == t.length()) {
                if (minLength > end - start + 1) {
                    minLength = end - start + 1;
                    var1 = start;
                }
                char start_char = s.charAt(start);
                start++;
                if (map.containsKey(start_char)) {
                    if (map.get(start_char) == 0)
                        matched--;
                    map.put(start_char, map.get(start_char) + 1);
                }
            }
            end++;
        }
        return minLength > s.length() ? "" : s.substring(var1, var1 + minLength);
    }
}
