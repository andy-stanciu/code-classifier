class Solution {

    public String method1(String s, String t) {
        if (s == null || t == null || s.length() == 0 || t.length() == 0 || s.length() < t.length()) {
            return new String();
        }
        HashMap<Character, Integer> tMap = new HashMap<>();
        HashMap<Character, Integer> sMap = new HashMap<>();
        for (char x : t.toCharArray()) {
            tMap.put(x, tMap.getOrDefault(x, 0) + 1);
        }
        int minLen = s.length() + 1;
        int[] resIndex = new int[2];
        int matched = 0;
        int start = 0;
        int end = 0;
        for (end = 0; end < s.length(); end++) {
            char c = s.charAt(end);
            if (tMap.containsKey(c)) {
                sMap.put(c, sMap.getOrDefault(c, 0) + 1);
                if (sMap.get(c) == tMap.get(c)) {
                    matched += 1;
                }
            }
            while (matched == tMap.size()) {
                if ((end - start + 1) < minLen) {
                    minLen = end - start + 1;
                    resIndex[0] = start;
                    resIndex[1] = end;
                }
                c = s.charAt(start++);
                if (tMap.containsKey(c)) {
                    sMap.put(c, sMap.get(c) - 1);
                    if (sMap.get(c) < tMap.get(c)) {
                        matched -= 1;
                    }
                }
            }
        }
        if (minLen > s.length()) {
            return new String();
        } else {
            return s.substring(resIndex[0], resIndex[0] + minLen);
        }
    }
}
