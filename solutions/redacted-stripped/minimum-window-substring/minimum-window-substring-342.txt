class Solution {

    public String method1(String s, String t) {
        if (s.isEmpty() || t.isEmpty()) {
            return "";
        } else if (s.equals(t)) {
            return s;
        }
        Map<Character, Integer> required = new HashMap<>();
        for (char c : t.toCharArray()) {
            required.put(c, required.getOrDefault(c, 0) + 1);
        }
        int requiredUniqueCharacters = required.size();
        int foundUniqueCharacters = 0;
        int left = 0, right = 0;
        Map<Character, Integer> var1 = new HashMap<>();
        int[] answer = new int[] { 0, Integer.MAX_VALUE };
        while (right < s.length()) {
            char c = s.charAt(right);
            var1.put(c, var1.getOrDefault(c, 0) + 1);
            if (required.containsKey(c) && var1.get(c).equals(required.get(c))) {
                foundUniqueCharacters++;
            }
            while (left <= right && foundUniqueCharacters == requiredUniqueCharacters) {
                c = s.charAt(left);
                if (right - left < answer[1] - answer[0]) {
                    answer[0] = left;
                    answer[1] = right;
                }
                var1.put(c, var1.getOrDefault(c, 0) - 1);
                if (required.containsKey(c) && var1.get(c).intValue() < required.get(c).intValue()) {
                    foundUniqueCharacters--;
                }
                left++;
            }
            right++;
        }
        if (answer[1] == Integer.MAX_VALUE) {
            return "";
        }
        return s.substring(answer[0], answer[1] + 1);
    }
}
