class Solution {

    public String method1(String s, String t) {
        if (s == null || t == null)
            return "";
        HashMap<Character, Integer> map = new HashMap<>();
        for (char c : t.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        int i = 0, j = 0;
        int start = 0;
        int minLen = Integer.MAX_VALUE;
        int countNeeded = t.length();
        while (j < s.length()) {
            char jCurrChar = s.charAt(j);
            if (map.containsKey(jCurrChar)) {
                int jCount = map.get(jCurrChar);
                if (jCount > 0)
                    countNeeded--;
                map.put(jCurrChar, jCount - 1);
            }
            while (countNeeded == 0) {
                int currLen = j - i + 1;
                if (currLen < minLen) {
                    minLen = currLen;
                    start = i;
                }
                char iCurrChar = s.charAt(i);
                if (map.containsKey(iCurrChar)) {
                    int iCount = map.get(iCurrChar);
                    if (iCount == 0) {
                        countNeeded++;
                    }
                    map.put(iCurrChar, iCount + 1);
                }
                i++;
            }
            j++;
        }
        return minLen == Integer.MAX_VALUE ? "" : s.substring(start, start + minLen);
    }
}
