class Solution {

    public List<String> method1(TreeNode root) {
        List<String> answer = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        if (root == null) {
            return answer;
        }
        traverse(root, answer, path);
        return answer;
    }

    private void traverse(TreeNode root, List<String> answer, List<Integer> path) {
        path.add(root.val);
        if (root.left == null && root.right == null) {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < path.size() - 1; i++) {
                sb.append(path.get(i)).append("->");
            }
            sb.append(path.get(path.size() - 1));
            answer.add(sb.toString());
            return;
        }
        if (root.left != null) {
            traverse(root.left, answer, path);
            path.remove(path.size() - 1);
        }
        if (root.right != null) {
            traverse(root.right, answer, path);
            path.remove(path.size() - 1);
        }
    }
}
