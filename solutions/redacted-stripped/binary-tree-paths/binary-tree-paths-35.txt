class Solution {

    private List<String> var1 = new ArrayList<>();

    public List<String> method1(TreeNode root) {
        if (root != null) {
            dfsFindLeafsAndAddToResult(root, new StringBuilder());
        }
        return var1;
    }

    private void dfsFindLeafsAndAddToResult(TreeNode root, StringBuilder sb) {
        checkRootIsNotNullAndAddValueToPath(root, sb);
        if (root.left != null && root.right != null) {
            method2(root, sb);
        } else {
            if (root.left != null) {
                dfsFindLeafsAndAddToResult(root.left, sb.append("->"));
            } else {
                if (root.right != null) {
                    dfsFindLeafsAndAddToResult(root.right, sb.append("->"));
                } else {
                    var1.add(sb.toString());
                }
            }
        }
    }

    private void checkRootIsNotNullAndAddValueToPath(TreeNode root, StringBuilder sb) {
        if (root != null) {
            sb.append(root.val);
        }
    }

    private void method2(TreeNode root, StringBuilder sb) {
        sb.append("->");
        dfsFindLeafsAndAddToResult(root.left, new StringBuilder(sb.toString()));
        dfsFindLeafsAndAddToResult(root.right, new StringBuilder(sb.toString()));
    }
}
