class Solution {

    public List<String> method1(TreeNode root) {
        List<String> list = new ArrayList<>();
        StringBuilder st = new StringBuilder();
        int left = 0;
        int right = 0;
        int total = 0;
        if (root != null) {
            st = st.append(root.val);
            left = leftTravese(root, st, list);
            right = rightTravese(root, st, list);
        }
        if (left == -1 && right == -1)
            list.add(st.toString());
        return list;
    }

    int leftTravese(TreeNode root, StringBuilder st, List<String> list) {
        root = root.left;
        int left = 0;
        int right = 0;
        StringBuilder str = new StringBuilder();
        int val = -1;
        if (root != null) {
            val = root.val;
            str = str.append(st);
            str = str.append("->");
            str = str.append(val);
            left = leftTravese(root, str, list);
            right = rightTravese(root, str, list);
            if (left == -1 && right == -1)
                list.add(str.toString());
        }
        return val;
    }

    int rightTravese(TreeNode root, StringBuilder st, List<String> list) {
        root = root.right;
        int left = 0;
        int right = 0;
        StringBuilder str = new StringBuilder();
        int val = -1;
        if (root != null) {
            val = root.val;
            str = str.append(st);
            str = str.append("->");
            str = str.append(val);
            left = leftTravese(root, str, list);
            right = rightTravese(root, str, list);
            if (left == -1 && right == -1)
                list.add(str.toString());
        }
        return val;
    }
}
