class Solution {

    public List<String> method1(TreeNode root) {
        List<String> var1 = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        dfs(root, var1, path);
        return var1;
    }

    private void dfs(TreeNode root, List<String> var1, List<Integer> path) {
        if (root != null) {
            path.add(root.val);
            if (root.left == null && root.right == null)
                var1.add(pathAsString(path));
            else {
                dfs(root.left, var1, path);
                dfs(root.right, var1, path);
            }
            path.remove(path.size() - 1);
        }
    }

    private String pathAsString(List<Integer> path) {
        StringBuilder sb = new StringBuilder();
        sb.append(path.get(0));
        for (int i = 1; i < path.size(); i++) sb.append("->").append(path.get(i));
        return sb.toString();
    }
}
