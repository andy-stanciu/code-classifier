class Solution {

    public List<String> method1(TreeNode root) {
        LinkedList<String> result = new LinkedList<>();
        if (root == null) {
            return result;
        }
        Queue<TreeNode> nodesQueue = new LinkedList<>();
        nodesQueue.add(root);
        Queue<StringBuilder> var1 = new LinkedList<>();
        var1.add(new StringBuilder().append(root.val));
        TreeNode currNode;
        StringBuilder currPath;
        while (!nodesQueue.isEmpty()) {
            currNode = nodesQueue.remove();
            currPath = var1.remove();
            if (currNode.left == null && currNode.right == null) {
                result.add(currPath.toString());
            }
            if (currNode.left != null) {
                nodesQueue.add(currNode.left);
                var1.add(new StringBuilder(currPath).append("->").append(currNode.left.val));
                ;
            }
            if (currNode.right != null) {
                nodesQueue.add(currNode.right);
                var1.add(new StringBuilder(currPath).append("->").append(currNode.right.val));
            }
        }
        return result;
    }
}
