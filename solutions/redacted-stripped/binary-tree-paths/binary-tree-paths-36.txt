class Solution {

    private List<String> l = new ArrayList<>();

    public List<String> method1(TreeNode root) {
        if (root == null)
            return l;
        dfs(root, new StringBuilder());
        return l;
    }

    private void dfs(TreeNode root, StringBuilder sb) {
        check(root, sb);
        if (root.left != null && root.right != null) {
            split(root, sb);
        } else {
            if (root.left != null) {
                dfs(root.left, sb.append("->"));
            } else {
                if (root.right != null) {
                    dfs(root.right, sb.append("->"));
                } else {
                    l.add(sb.toString());
                }
            }
        }
    }

    private void check(TreeNode root, StringBuilder sb) {
        if (root != null)
            sb.append(root.val);
    }

    private void split(TreeNode root, StringBuilder sb) {
        sb.append("->");
        dfs(root.left, new StringBuilder(sb.toString()));
        dfs(root.right, new StringBuilder(sb.toString()));
    }
}
