class Solution {

    public List<String> method1(TreeNode root) {
        return method2(root, new Stack<Integer>(), new ArrayList<String>());
    }

    public List<String> method2(TreeNode root, Stack<Integer> stack, List<String> list) {
        if (root == null)
            return list;
        if (root.left == null && root.right == null) {
            stack.push(root.val);
            list.add(FillPath(stack));
            stack.pop();
            return list;
        }
        stack.push(root.val);
        method2(root.left, stack, list);
        method2(root.right, stack, list);
        stack.pop();
        return list;
    }

    public String FillPath(Stack<Integer> stack) {
        String path = "";
        Stack<Integer> temp = new Stack<Integer>();
        while (!stack.isEmpty()) temp.push(stack.pop());
        while (!temp.isEmpty()) {
            int value = temp.pop();
            path += String.valueOf(value) + "->";
            stack.push(value);
        }
        return path.substring(0, path.length() - 2);
    }
}
