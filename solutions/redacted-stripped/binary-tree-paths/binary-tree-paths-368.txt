class Solution {

    public List<String> method1(TreeNode root) {
        List<String> var1 = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        Set<TreeNode> visitedNodes = new HashSet<>();
        stack.push(root);
        visitedNodes.add(root);
        while (!stack.isEmpty()) {
            var curNode = stack.peek();
            if (curNode.left != null && !visitedNodes.contains(curNode.left)) {
                stack.push(curNode.left);
                visitedNodes.add(curNode.left);
            } else if (curNode.right != null && !visitedNodes.contains(curNode.right)) {
                stack.push(curNode.right);
                visitedNodes.add(curNode.right);
            } else if (curNode.left == null && curNode.right == null) {
                String patch = String.valueOf(stack.get(0).val);
                for (int i = 1; i < stack.size(); i++) {
                    patch += "->";
                    patch += stack.get(i).val;
                }
                var1.add(patch);
                stack.pop();
            } else {
                stack.pop();
            }
        }
        return var1;
    }
}
