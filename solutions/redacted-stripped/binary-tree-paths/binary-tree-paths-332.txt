class Solution {

    List<String> res = new ArrayList<>();

    public List<String> method1(TreeNode root) {
        if (root == null)
            return res;
        backtrack(root, new ArrayList<>());
        return res;
    }

    private void backtrack(TreeNode node, List<Integer> currPath) {
        if (node.left == null && node.right == null) {
            currPath.add(node.val);
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < currPath.size() - 1; i++) {
                sb.append(currPath.get(i));
                sb.append("->");
            }
            sb.append(currPath.get(currPath.size() - 1));
            res.add(sb.toString());
            return;
        }
        currPath.add(node.val);
        if (node.left != null) {
            backtrack(node.left, currPath);
            currPath.remove(currPath.size() - 1);
        }
        if (node.right != null) {
            backtrack(node.right, currPath);
            currPath.remove(currPath.size() - 1);
        }
    }
}
