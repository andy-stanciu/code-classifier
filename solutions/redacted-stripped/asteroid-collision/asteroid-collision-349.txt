class Solution {

    public int[] method1(int[] ast) {
        Stack<Integer> s = new Stack<>();
        int cnt = 0;
        int count = 0;
        int neg = 0;
        for (int i = 0; i < ast.length; i++) {
            if (ast[i] < 0)
                count++;
        }
        if (ast.length == count)
            return ast;
        for (int i = 0; i < ast.length; i++) {
            if (ast[i] < 0 && !(s.isEmpty())) {
                if (s.peek() < 0 && ast[i] < 0) {
                    s.push(ast[i]);
                    cnt++;
                } else if (Math.abs(s.peek()) > Math.abs(ast[i]) && neg <= 0) {
                    continue;
                } else if (Math.abs(s.peek()) < Math.abs(ast[i]) && neg <= 0) {
                    s.pop();
                    cnt--;
                    i--;
                } else if (s.peek() > 0 && ast[i] < 0) {
                    s.pop();
                    cnt--;
                } else {
                    s.pop();
                    cnt--;
                }
            } else {
                if (ast[i] < 0) {
                    neg++;
                } else {
                    neg--;
                }
                s.push(ast[i]);
                cnt++;
            }
        }
        int[] copy = new int[cnt];
        for (int i = copy.length - 1; i >= 0; i--) {
            copy[i] = s.peek();
            s.pop();
        }
        return copy;
    }
}
