class Solution {

    public int[] method1(int[] param1) {
        ArrayList<Integer> list = new ArrayList<>();
        Stack<Integer> s = new Stack<>();
        for (int i = 0; i < param1.length; i++) {
            if (s.isEmpty()) {
                s.push(param1[i]);
                continue;
            }
            if ((!s.isEmpty()) && (s.peek() > 0 && param1[i] > 0) || (s.peek() < 0 && param1[i] < 0) || s.peek() < 0 && param1[i] > 0) {
                s.push(param1[i]);
                continue;
            } else {
                if (!s.isEmpty() && s.peek() > 0 && param1[i] < 0) {
                    if (Math.abs(s.peek()) > Math.abs(param1[i])) {
                        continue;
                    } else if (!s.isEmpty() && Math.abs(s.peek()) == Math.abs(param1[i])) {
                        s.pop();
                        continue;
                    } else {
                        s.pop();
                        i--;
                        continue;
                    }
                }
            }
        }
        while (!s.isEmpty()) {
            list.add(s.pop());
        }
        int[] arr = new int[list.size()];
        for (int i = list.size() - 1; i >= 0; i--) {
            arr[i] = list.get(list.size() - i - 1);
        }
        return arr;
    }
}
