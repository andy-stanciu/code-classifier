class Solution {

    public int[] method1(int[] param1) {
        Stack<Integer> stack = new Stack<Integer>();
        stack.push(param1[0]);
        for (int i = 1; i < param1.length; i++) {
            if (!stack.isEmpty()) {
                int temp = stack.peek();
                if (param1[i] * temp > 0) {
                    stack.push(param1[i]);
                } else {
                    if (temp > 0) {
                        while (!stack.isEmpty() && param1[i] * stack.peek() < 0 && Math.abs(param1[i]) > stack.peek()) {
                            stack.pop();
                        }
                        if (!stack.isEmpty() && stack.peek() == Math.abs(param1[i]))
                            stack.pop();
                        else if ((!stack.isEmpty() && stack.peek() > Math.abs(param1[i])))
                            continue;
                        else
                            stack.push(param1[i]);
                    } else {
                        stack.push(param1[i]);
                    }
                }
            } else
                stack.push(param1[i]);
        }
        Stack<Integer> rev = new Stack<Integer>();
        while (!stack.isEmpty()) {
            rev.push(stack.pop());
        }
        int[] res = new int[rev.size()];
        int n = rev.size();
        for (int i = 0; i < n; i++) res[i] = rev.pop();
        return res;
    }
}
