class Solution {

    public int[] method1(int[] param1) {
        class Stack {

            int[] stack;

            int top;

            public Stack(int size) {
                stack = new int[size];
                top = 0;
            }

            public void push(int num) {
                if (top == stack.length) {
                    System.out.println("Stack is full.");
                } else {
                    stack[top] = num;
                    top++;
                }
            }

            public int pop() {
                if (isEmpty()) {
                    System.out.println("Stack is empty.");
                    return 0;
                } else {
                    top--;
                    int num = stack[top];
                    stack[top] = 0;
                    return num;
                }
            }

            public boolean isEmpty() {
                return top == 0;
            }

            public int peek() {
                if (isEmpty()) {
                    System.out.println("Stack is empty.");
                    return 0;
                } else {
                    return stack[top - 1];
                }
            }

            public int size() {
                return top;
            }
        }
        Stack stack = new Stack(param1.length);
        for (int a : param1) {
            if (a > 0) {
                stack.push(a);
            } else {
                while (!stack.isEmpty() && stack.peek() > 0 && stack.peek() < Math.abs(a)) {
                    stack.pop();
                }
                if (stack.isEmpty() || stack.peek() < 0) {
                    stack.push(a);
                } else if (stack.peek() == Math.abs(a)) {
                    stack.pop();
                }
            }
        }
        int[] result = new int[stack.size()];
        int i = stack.size() - 1;
        while (!stack.isEmpty()) {
            result[i--] = stack.pop();
        }
        return result;
    }
}
