class Solution {

    public int[] method1(int[] param1) {
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < param1.length; i++) {
            boolean var1 = false;
            if (!stack.isEmpty() && (stack.peek() > 0 && param1[i] < 0)) {
                while (!stack.isEmpty() && (stack.peek() > 0 && param1[i] < 0)) {
                    if (Math.abs(stack.peek()) > Math.abs(param1[i])) {
                        var1 = true;
                        break;
                    } else if (Math.abs(stack.peek()) < Math.abs(param1[i])) {
                        stack.pop();
                    } else if (Math.abs(stack.peek()) == Math.abs(param1[i])) {
                        stack.pop();
                        var1 = true;
                        break;
                    }
                }
            }
            if (var1 == false)
                stack.push(param1[i]);
        }
        ArrayList<Integer> ans = new ArrayList<>();
        while (!stack.isEmpty()) {
            ans.add(stack.pop());
        }
        int[] res = new int[ans.size()];
        for (int i = 0, j = ans.size() - 1; i < ans.size(); i++) {
            res[i] = ans.get(j--);
        }
        return res;
    }
}
