class Solution {

    public int[] method1(int[] arr) {
        Stack<Integer> s = new Stack<>();
        for (int i = 0; i < arr.length; i++) {
            if (s.isEmpty()) {
                s.push(arr[i]);
            } else if (s.peek() < 0 && arr[i] < 0) {
                s.push(arr[i]);
            } else if (s.peek() > 0 && arr[i] > 0) {
                s.push(arr[i]);
            } else if (s.peek() < 0 && arr[i] > 0) {
                s.push(arr[i]);
            } else if (s.peek() > 0 && arr[i] < 0) {
                if (s.peek() == Math.abs(arr[i])) {
                    s.pop();
                } else if (s.peek() < Math.abs(arr[i])) {
                    if (!s.isEmpty() && s.peek() > 0 && s.peek() <= Math.abs(arr[i])) {
                        s.pop();
                        i--;
                        continue;
                    }
                }
            }
        }
        int[] ans = new int[s.size()];
        int i = s.size() - 1;
        while (!s.isEmpty()) {
            ans[i] = s.pop();
            i--;
        }
        return ans;
    }
}
