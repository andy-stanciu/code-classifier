class Solution {

    public int[] method1(int[] param1) {
        Stack<Integer> st = new Stack();
        int n = param1.length;
        if (n > 0) {
            st.push(param1[0]);
        }
        int k = 1;
        while (k < n) {
            if (!st.isEmpty() && ((st.peek() < 0 && 0 > param1[k]) || (st.peek() > 0 && 0 < param1[k]) || (st.peek() < 0 && 0 < param1[k]))) {
                st.push(param1[k]);
                k++;
            } else if (!st.isEmpty() && (st.peek() > 0 && 0 > param1[k])) {
                if (st.peek() > Math.abs(param1[k])) {
                    k++;
                } else if (st.peek() < Math.abs(param1[k])) {
                    st.pop();
                } else {
                    st.pop();
                    k++;
                }
            } else {
                st.push(param1[k]);
                k++;
            }
        }
        int size = st.size();
        int[] arr = new int[size];
        int i = 1;
        while (!st.isEmpty()) {
            arr[size - i] = (st.pop());
            i++;
        }
        return arr;
    }
}
