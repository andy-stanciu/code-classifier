class Solution {

    public int[] method1(int[] a) {
        Stack<Integer> s = new Stack<>();
        for (int i = 0; i < a.length; i++) {
            if (s.size() == 0)
                s.push(a[i]);
            else if (s.size() > 0 && s.peek() < 0) {
                s.push(a[i]);
            } else if (s.size() > 0 && s.peek() * a[i] > 0) {
                s.push(a[i]);
            } else if (s.size() > 0 && s.peek() * a[i] < 0 && s.peek() > 0) {
                int cur = a[i];
                while (s.size() > 0 && s.peek() * cur < 0 && s.peek() > 0) {
                    if (Math.abs(s.peek()) == Math.abs(cur)) {
                        cur = 0;
                        s.pop();
                    } else {
                        if (Math.abs(s.peek()) > Math.abs(cur)) {
                            cur = s.pop();
                        } else {
                            cur = a[i];
                            s.pop();
                        }
                    }
                }
                if (cur != 0)
                    s.push(cur);
            }
        }
        if (s.size() != 0) {
            int top = s.pop();
            if (s.size() == 0)
                s.push(top);
            else if (s.size() != 0 && s.peek() * top > 0) {
                s.push(top);
            } else if (s.size() != 0 && s.peek() < 0 && top > 0)
                s.push(top);
            else {
                while (s.size() > 0 && s.peek() * top < 0 && s.peek() > 0) {
                    if (Math.abs(s.peek()) == Math.abs(top)) {
                        s.pop();
                    } else {
                        if (Math.abs(s.peek()) > Math.abs(top)) {
                            top = s.pop();
                            s.push(top);
                        } else {
                            s.pop();
                            s.push(top);
                        }
                    }
                }
            }
        }
        int[] res = new int[s.size()];
        int k = res.length - 1;
        while (s.size() != 0) {
            res[k] = s.pop();
            k--;
        }
        return res;
    }
}
