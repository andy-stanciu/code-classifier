class Solution {

    public int[] method1(int[] a) {
        int n = a.length;
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            int current = a[i];
            if (stack.isEmpty()) {
                stack.push(current);
                continue;
            }
            int prev = Integer.signum(stack.peek());
            int curr = Integer.signum(current);
            if ((curr == prev) || (prev == -1 && curr == 1)) {
                stack.push(current);
            } else {
                while (true) {
                    if (current == stack.peek() || (Integer.signum(current) == Integer.signum(stack.peek()))) {
                        stack.push(current);
                        break;
                    } else if (!stack.isEmpty() && (Math.abs(current) < Math.abs(stack.peek()))) {
                        break;
                    } else if (!stack.isEmpty() && Math.abs(current) > Math.abs(stack.peek())) {
                        stack.pop();
                        if (stack.isEmpty()) {
                            stack.push(current);
                            break;
                        }
                    }
                }
            }
        }
        int[] result = new int[stack.size()];
        for (int i = result.length - 1; i >= 0; i--) {
            result[i] = stack.pop();
        }
        return result;
    }
}
