class Solution {

    public int[] method1(int[] param1) {
        Stack<Integer> stack = new Stack<>();
        int i = 0;
        while (param1.length > i && param1[i] < 0) {
            stack.push(param1[i]);
            i++;
        }
        while (param1.length > i && param1[i] > 0) {
            stack.push(param1[i]);
            i++;
        }
        while (param1.length > i) {
            if (!stack.isEmpty() && param1[i] < 0 && stack.peek() > 0 && stack.peek() < Math.abs(param1[i])) {
                stack.pop();
            } else if (!stack.isEmpty() && param1[i] < 0 && stack.peek() > 0 && stack.peek() > Math.abs(param1[i])) {
                i++;
            } else if (!stack.isEmpty() && param1[i] < 0 && stack.peek() > 0 && stack.peek() == Math.abs(param1[i])) {
                stack.pop();
                i++;
            } else {
                stack.push(param1[i]);
                i++;
            }
        }
        int[] ans = new int[stack.size()];
        for (int j = ans.length - 1; j >= 0; j--) {
            ans[j] = stack.pop();
        }
        return ans;
    }
}
