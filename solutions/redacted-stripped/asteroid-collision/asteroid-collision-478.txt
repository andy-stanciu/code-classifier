class Solution {

    public int[] method1(int[] A) {
        Stack<Integer> left = new Stack<>();
        Stack<Integer> right = new Stack<>();
        for (int i : A) {
            if (i > 0) {
                right.push(i);
            } else {
                if (right.isEmpty()) {
                    left.push(i);
                } else {
                    int a = Math.abs(i);
                    boolean areEqual = false;
                    while (!right.isEmpty() && a >= right.peek()) {
                        if (a == right.peek()) {
                            right.pop();
                            areEqual = true;
                            break;
                        }
                        right.pop();
                    }
                    if (!areEqual && right.isEmpty()) {
                        left.push(i);
                    }
                }
            }
        }
        List<Integer> ll = new ArrayList<>();
        List<Integer> rr = new ArrayList<>();
        while (!left.isEmpty()) {
            ll.add(left.pop());
        }
        while (!right.isEmpty()) {
            rr.add(right.pop());
        }
        Collections.reverse(ll);
        Collections.reverse(rr);
        int[] res = new int[ll.size() + rr.size()];
        int idx = 0;
        for (Integer il : ll) {
            res[idx++] = il;
        }
        for (Integer il : rr) {
            res[idx++] = il;
        }
        return res;
    }
}
