class Solution {

    public int[] method1(int[] param1) {
        Deque<Integer> dq = new ArrayDeque<>();
        for (int i = 0; i < param1.length; ++i) {
            int currAst = param1[i];
            if (dq.size() > 0 && dq.getLast() > 0 && currAst < 0) {
                boolean flag = true;
                while (dq.size() > 0 && dq.getLast() > 0 && currAst < 0) {
                    if (dq.getLast() == Math.abs(currAst)) {
                        dq.removeLast();
                        flag = false;
                        break;
                    } else if (dq.getLast() < Math.abs(currAst)) {
                        dq.removeLast();
                    } else {
                        flag = false;
                        break;
                    }
                }
                if (flag == true)
                    dq.addLast(currAst);
            } else if (dq.size() > 0 && dq.getLast() > 0 && currAst > 0) {
                dq.addLast(currAst);
            } else if (dq.size() > 0 && dq.getLast() < 0 && currAst < 0) {
                dq.addLast(currAst);
            } else if (dq.size() > 0 && dq.getLast() < 0 && currAst > 0) {
                dq.addLast(currAst);
            } else {
                dq.addLast(currAst);
            }
        }
        int[] res = new int[dq.size()];
        int idx = 0;
        while (dq.size() > 0) {
            res[idx++] = dq.removeFirst();
        }
        return res;
    }
}
