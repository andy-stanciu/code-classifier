public class Solution {

    private static final int CHAR_POSITION_OFFSET = 97;

    public boolean method1(String s, String t) {
        if (s.length() != t.length())
            return false;
        int[] sFrequency = getCharFrequency(s);
        for (int i = 0; i < t.length(); i++) {
            boolean charDidNotExist = reduceCharFrequency(sFrequency, t.charAt(i));
            if (charDidNotExist)
                return false;
        }
        return true;
    }

    private boolean reduceCharFrequency(int[] charFrequency, char c) {
        int positionInAlphabet = charPositionInAlphabet(c);
        return --charFrequency[positionInAlphabet] < 0;
    }

    private int[] getCharFrequency(String s) {
        int[] charFrequency = new int[26];
        for (int i = 0; i < s.length(); i++) {
            char currentChar = s.charAt(i);
            int charPosition = charPositionInAlphabet(currentChar);
            charFrequency[charPosition]++;
        }
        return charFrequency;
    }

    private static int charPositionInAlphabet(char c) {
        return c - CHAR_POSITION_OFFSET;
    }
}
