public class Solution {

    public ListNode method1(ListNode head) {
        ListNode slow = head, fast = head, end;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                end = slow;
                return findFirstSame(head, slow, end);
            }
        }
        return null;
    }

    public ListNode findFirstSame(ListNode headA, ListNode headB, ListNode end) {
        int lenA = getLen(headA, end), lenB = getLen(headB, end);
        while (lenA > lenB) {
            headA = headA.next;
            lenA--;
        }
        while (lenB > lenA) {
            headB = headB.next;
            lenB--;
        }
        while (headA != headB) {
            headA = headA.next;
            headB = headB.next;
        }
        return headA;
    }

    public int getLen(ListNode head, ListNode end) {
        int len = 1;
        head = head.next;
        while (head != end) {
            len++;
            head = head.next;
        }
        return len;
    }
}
