class Solution {

    public int method1(int[] nums, int target) {
        Arrays.sort(nums);
        int n = nums.length;
        if (nums[0] + nums[1] + nums[2] >= target)
            return nums[0] + nums[1] + nums[2];
        if (nums[n - 1] + nums[n - 2] + nums[n - 3] <= target)
            return nums[n - 1] + nums[n - 2] + nums[n - 3];
        int var1 = nums[0] + nums[1] + nums[n - 1];
        int dif = Integer.MAX_VALUE;
        for (int i = 0; i < n - 2; i++) {
            int l = i + 1, r = n - 1;
            while (l < r) {
                int sum = nums[i] + nums[l] + nums[r];
                int mid = l + (r - l) / 2;
                if (sum == target)
                    return target;
                int curDif = (sum > target) ? sum - target : target - sum;
                if (curDif < dif) {
                    dif = curDif;
                    var1 = sum;
                }
                if (sum - target > 0) {
                    if (r != mid && nums[i] + nums[l] + nums[mid] > target) {
                        r = mid;
                    } else {
                        while (--r > l && nums[r] == nums[r + 1]) ;
                    }
                } else {
                    if (l != mid && nums[i] + nums[mid] + nums[r] < target) {
                        l = mid;
                    } else {
                        while (++l < r && nums[l] == nums[l - 1]) ;
                    }
                }
            }
        }
        return var1;
    }
}
