class Solution {

    public List<Integer> method1(int[] nums) {
        List<Integer> ans = new ArrayList<>();
        qSort(nums, 0, nums.length - 1, ans);
        return ans;
    }

    public void qSort(int[] nums, int L, int R, List<Integer> ans) {
        int len = nums.length / 3;
        if (R - L < len)
            return;
        int less = L;
        int more = R;
        int index = L + 1;
        while (index <= more) {
            if (nums[index] == nums[less])
                index++;
            else if (nums[index] < nums[less]) {
                swap(nums, less, index);
                index++;
                less++;
            } else {
                if (nums[index] > nums[more])
                    swap(nums, more, index);
                more--;
            }
        }
        if (more - less >= len)
            ans.add(nums[more]);
        qSort(nums, L, less - 1, ans);
        qSort(nums, more + 1, R, ans);
    }

    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
