class Solution {

    public boolean method1(String s, List<String> param1) {
        HashMap<String, Boolean> cache = new HashMap<>();
        int[] memo = new int[s.length() + 1];
        Arrays.fill(memo, -1);
        return checkString(0, s, param1, memo);
    }

    public boolean checkString(int index, String s, List<String> param1, int[] memo) {
        if (index == s.length()) {
            return true;
        }
        if (index > s.length() - 1) {
            return false;
        }
        if (memo[index] != -1) {
            if (memo[index] == 0) {
                return false;
            }
            return true;
        }
        for (String str : param1) {
            if (index + str.length() > s.length()) {
                continue;
            }
            if (s.substring(index, index + str.length()).equals(str)) {
                if (checkString(index + str.length(), s, param1, memo)) {
                    memo[index] = 1;
                    return true;
                }
            }
        }
        memo[index] = 0;
        return false;
    }

    public boolean findString(String res, String s, List<String> param1, HashMap<String, Boolean> cache) {
        if (res.equals(s)) {
            return true;
        }
        if (res.length() > s.length()) {
            return false;
        }
        if (cache.containsKey(res)) {
            return cache.get(res);
        }
        for (String str : param1) {
            if (findString(res + str, s, param1, cache)) {
                cache.put(res, true);
                return true;
            }
        }
        cache.put(res, false);
        return false;
    }
}
