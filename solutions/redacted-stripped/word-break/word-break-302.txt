class Solution {

    public boolean method1(String s, List<String> param1) {
        int n = s.length();
        int[][] memo = new int[n][n];
        for (int[] a : memo) {
            Arrays.fill(a, -1);
        }
        return fn(s, 0, n - 1, new HashSet<>(param1), memo);
    }

    boolean fn(String s, int i, int j, Set<String> dictionary) {
        if (i > j) {
            return false;
        } else if (dictionary.contains(s.substring(i, j + 1))) {
            return true;
        } else {
            for (int k = i; k < j; k++) {
                boolean left = fn(s, i, k, dictionary);
                boolean right = fn(s, k + 1, j, dictionary);
                if (left && right) {
                    return true;
                }
            }
            return false;
        }
    }

    boolean fn(String s, int i, int j, Set<String> dictionary, int[][] memo) {
        if (i > j) {
            return false;
        } else if (memo[i][j] != -1) {
            return memo[i][j] == 1;
        } else if (dictionary.contains(s.substring(i, j + 1))) {
            memo[i][j] = 1;
            return true;
        } else {
            for (int k = i; k < j; k++) {
                boolean left = fn(s, i, k, dictionary, memo);
                boolean right = fn(s, k + 1, j, dictionary, memo);
                if (left && right) {
                    memo[i][j] = 1;
                    return true;
                }
            }
            memo[i][j] = 0;
            return false;
        }
    }
}
