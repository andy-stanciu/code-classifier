class Solution {

    public List<Integer> method1(TreeNode root) {
        List<Integer> preT = new ArrayList<>();
        method3(root, preT);
        return preT;
    }

    public void method1(TreeNode root, List<Integer> preT) {
        if (root == null)
            return;
        preT.add(root.val);
        method1(root.left, preT);
        method1(root.right, preT);
    }

    public void method2(TreeNode root, List<Integer> preT) {
        if (root == null)
            return;
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while (!stack.isEmpty()) {
            root = stack.pop();
            preT.add(root.val);
            if (root.right != null)
                stack.push(root.right);
            if (root.left != null)
                stack.push(root.left);
        }
    }

    public void method3(TreeNode root, List<Integer> preT) {
        if (root == null)
            return;
        TreeNode temp = null;
        while (null != root) {
            if (root.left == null) {
                preT.add(root.val);
                root = root.right;
            } else {
                temp = root.left;
                while (temp.right != null && temp.right != root) {
                    temp = temp.right;
                }
                if (temp.right == null) {
                    preT.add(root.val);
                    temp.right = root;
                    root = root.left;
                } else {
                    temp.right = null;
                    root = root.right;
                }
            }
        }
    }
}
