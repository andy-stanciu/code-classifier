class Solution {

    public boolean method1(int n) {
        int stableSpeed = n;
        int unstableSpeed = breakAndSquare(n);
        while (unstableSpeed != 1 && stableSpeed != unstableSpeed) {
            stableSpeed = breakAndSquare(stableSpeed);
            unstableSpeed = breakAndSquare(breakAndSquare(unstableSpeed));
        }
        return (unstableSpeed == 1);
    }

    public int breakAndSquare(int n) {
        int totalSum = 0;
        while (n > 0) {
            totalSum += (n % 10) * (n % 10);
            n = n / 10;
        }
        return totalSum;
    }
}

class Solution {

    public boolean method1(int n) {
        HashSet<Integer> dp = new HashSet<>();
        while (n != 1) {
            if (dp.contains(n)) {
                return false;
            } else {
                dp.add(n);
            }
            n = breakAndSquare(n);
        }
        return true;
    }

    public int breakAndSquare(int n) {
        int totalSum = 0;
        while (n > 0) {
            totalSum += (n % 10) * (n % 10);
            n = n / 10;
        }
        return totalSum;
    }
}
