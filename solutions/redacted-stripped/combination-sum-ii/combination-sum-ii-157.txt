class Solution {

    public List<List<Integer>> method1(int[] candidates, int target) {
        Arrays.sort(candidates);
        Set<List<Integer>> var1 = new HashSet<>();
        backtrack(var1, new ArrayList<>(), candidates, 0, target, 0);
        return new ArrayList<>(var1);
    }

    public void backtrack(Set<List<Integer>> var1, List<Integer> param1, int[] candidates, int start, int target, int param2) {
        if (param2 == target) {
            var1.add(new ArrayList<>(param1));
            return;
        }
        int prev = -1;
        for (int i = start; i < candidates.length; i++) {
            if (param2 + candidates[i] > target) {
                break;
            }
            if (prev == candidates[i]) {
                continue;
            }
            param1.add(candidates[i]);
            backtrack(var1, param1, candidates, i + 1, target, param2 + candidates[i]);
            param1.remove(param1.size() - 1);
            prev = candidates[i];
        }
    }
}
