class Solution {

    public List<List<Integer>> method1(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(candidates);
        backtrack(candidates, target, 0, new ArrayList<>(), ans);
        return ans;
    }

    private void backtrack(int[] candidates, int target, int i, List<Integer> curr, List<List<Integer>> ans) {
        int n = candidates.length;
        if (target == 0) {
            ans.add(new ArrayList<>(curr));
            return;
        }
        if (i >= n || target < 0) {
            return;
        }
        curr.add(candidates[i]);
        backtrack(candidates, target - candidates[i], i + 1, curr, ans);
        curr.remove(curr.size() - 1);
        while (i < n - 1 && candidates[i] == candidates[i + 1]) {
            i++;
        }
        backtrack(candidates, target, i + 1, curr, ans);
    }
}
