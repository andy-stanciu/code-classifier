class Solution {

    public List<List<Integer>> method1(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(candidates);
        backtracking(result, new ArrayList<>(), candidates, target, 0, 0);
        return result;
    }

    private void backtracking(List<List<Integer>> result, List<Integer> path, int[] candidates, int target, int start, int param1) {
        if (param1 == target) {
            result.add(new ArrayList<>(path));
            return;
        }
        for (int i = start; i < candidates.length; i++) {
            if (i > start && candidates[i] == candidates[i - 1])
                continue;
            if (param1 + candidates[i] > target)
                break;
            path.add(candidates[i]);
            backtracking(result, path, candidates, target, i + 1, param1 + candidates[i]);
            path.remove(path.size() - 1);
        }
    }
}
