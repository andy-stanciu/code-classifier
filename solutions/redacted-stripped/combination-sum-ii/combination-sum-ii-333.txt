class Solution {

    public List<List<Integer>> method1(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(candidates);
        backtracking(candidates, target, 0, ans, new ArrayList<>());
        return ans;
    }

    private void backtracking(int[] candidates, int target, int index, List<List<Integer>> ans, List<Integer> current) {
        if (target == 0) {
            ans.add(new ArrayList<>(current));
            return;
        }
        if (index >= candidates.length || target < 0) {
            return;
        }
        for (int i = index; i < candidates.length; i++) {
            if (i > index && candidates[i] == candidates[i - 1]) {
                continue;
            }
            current.add(candidates[i]);
            backtracking(candidates, target - candidates[i], i + 1, ans, current);
            current.remove(current.size() - 1);
        }
    }
}
