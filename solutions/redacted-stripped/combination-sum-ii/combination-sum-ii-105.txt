class Solution {

    private void backtrack(int start, List<List<Integer>> res, List<Integer> param1, int[] candidates, int target) {
        if (target < 0)
            return;
        if (target == 0) {
            res.add(new ArrayList<>(param1));
            return;
        }
        for (int i = start; i < candidates.length; i++) {
            if (i > start && candidates[i] == candidates[i - 1])
                continue;
            param1.add(candidates[i]);
            backtrack(i + 1, res, param1, candidates, target - candidates[i]);
            param1.remove(param1.size() - 1);
        }
    }

    public List<List<Integer>> method1(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> param1 = new ArrayList<>();
        Arrays.sort(candidates);
        backtrack(0, res, param1, candidates, target);
        return res;
    }
}
