class Solution {

    private int[] candidates;

    private int target;

    private List<List<Integer>> results;

    public List<List<Integer>> method1(int[] candidates, int target) {
        this.candidates = candidates;
        this.target = target;
        results = new ArrayList<List<Integer>>();
        Arrays.sort(candidates);
        return solve(1);
    }

    private List<List<Integer>> solve(int method) {
        switch(method) {
            case 1:
                method2(target, 0, new ArrayList<Integer>());
                break;
            default:
                break;
        }
        return results;
    }

    private void method2(int param1, int idx, List<Integer> result) {
        if (param1 < 0)
            return;
        if (param1 == 0) {
            results.add(new ArrayList<>(result));
            return;
        }
        if (idx > candidates.length - 1)
            return;
        result.addLast(candidates[idx]);
        method2(param1 - candidates[idx], idx + 1, result);
        result.remove(result.size() - 1);
        while (idx + 1 < candidates.length && candidates[idx + 1] == candidates[idx]) idx++;
        method2(param1, idx + 1, result);
    }
}
