class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        Set<List<Integer>> list = new HashSet<>();
        int len = nums.length;
        int dLast = len - 1;
        int aLast = 0;
        int a;
        int d;
        int b;
        int c;
        long sum = 0;
        while (dLast >= aLast + 3) {
            a = aLast;
            d = dLast;
            while (d >= a + 3) {
                b = a + 1;
                c = d - 1;
                while (b < c) {
                    sum = nums[a];
                    sum += nums[b];
                    sum += nums[c];
                    sum += nums[d];
                    if (sum > target) {
                        c--;
                        while (nums[c] == nums[c + 1] && c > b) {
                            c--;
                        }
                    } else if (sum < target) {
                        b++;
                        while (nums[b] == nums[b - 1] && b < c) {
                            b++;
                        }
                    } else {
                        List<Integer> l = new ArrayList<>();
                        l.add(nums[a]);
                        l.add(nums[b]);
                        l.add(nums[c]);
                        l.add(nums[d]);
                        list.add(l);
                        b++;
                        while (nums[b] == nums[b - 1] && b < c) {
                            b++;
                        }
                        c--;
                        while (nums[c] == nums[c + 1] && b < c) {
                            c--;
                        }
                    }
                }
                a++;
                while (nums[a] == nums[a - 1] && a <= d - 3) {
                    a++;
                }
            }
            a = aLast;
            d--;
            while (d >= a + 3) {
                b = a + 1;
                c = d - 1;
                while (b < c) {
                    sum = nums[a];
                    sum += nums[b];
                    sum += nums[c];
                    sum += nums[d];
                    if (sum > target) {
                        c--;
                        while (nums[c] == nums[c + 1] && c > b) {
                            c--;
                        }
                    } else if (sum < target) {
                        b++;
                        while (nums[b] == nums[b - 1] && c > b) {
                            b++;
                        }
                    } else {
                        List<Integer> l = new ArrayList<>();
                        l.add(nums[a]);
                        l.add(nums[b]);
                        l.add(nums[c]);
                        l.add(nums[d]);
                        list.add(l);
                        b++;
                        while (nums[b] == nums[b - 1] && b < c) {
                            b++;
                        }
                        c--;
                        while (nums[c] == nums[c + 1] && b < c) {
                            c--;
                        }
                    }
                }
                d--;
                while (nums[d] == nums[d + 1] && a <= d - 3) {
                    d--;
                }
            }
            aLast++;
            while (nums[aLast] == nums[aLast - 1] && aLast <= dLast - 3) {
                aLast++;
            }
            dLast--;
            while (nums[dLast] == nums[dLast + 1] && aLast <= dLast - 3) {
                dLast--;
            }
        }
        return list.stream().toList();
    }
}
