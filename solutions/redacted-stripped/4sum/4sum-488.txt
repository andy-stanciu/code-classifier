class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> soln = new ArrayList<>();
        Set<List<Integer>> s = new HashSet<>();
        for (int i = 0; i < nums.length - 3; i++) {
            for (int j = i + 1; j < nums.length - 2; j++) {
                long first = nums[i];
                long second = nums[j];
                long currSum = first + second;
                long ttarg = target;
                HashSet<Long> set = new HashSet();
                for (int k = j + 1; k < nums.length; k++) {
                    if (!set.isEmpty() && set.contains((long) nums[k])) {
                        List<Integer> tempList = Arrays.asList(nums[i], nums[j], nums[k], (int) (ttarg - (currSum + (long) nums[k])));
                        Collections.sort(tempList);
                        s.add(new ArrayList<>(tempList));
                    } else {
                        set.add((ttarg - (currSum + (long) nums[k])));
                    }
                }
            }
        }
        soln.addAll(s);
        return soln;
    }
}
