class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        int l, r;
        long sum;
        int n = nums.length;
        List<List<Integer>> list = new ArrayList<>();
        if (n < 4)
            return new ArrayList<>();
        for (int i = 0; i < n - 3; i++) {
            if (i > 0 && nums[i - 1] == nums[i])
                continue;
            if (target > (long) nums[i] + nums[n - 3] + nums[n - 2] + nums[n - 1])
                continue;
            if (target < (long) nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3])
                continue;
            for (int j = i + 1; j < n - 2; j++) {
                if (j > i + 1 && nums[j - 1] == nums[j])
                    continue;
                if (target > (long) nums[i] + nums[j] + nums[n - 2] + nums[n - 1])
                    continue;
                if (target < (long) nums[i] + nums[j] + nums[j + 2] + nums[j + 1])
                    continue;
                l = j + 1;
                r = n - 1;
                while (l < r) {
                    sum = (long) nums[i] + nums[j] + nums[l] + nums[r];
                    if (sum > target)
                        r--;
                    else if (sum < target)
                        l++;
                    else {
                        list.add(Arrays.asList(nums[i], nums[j], nums[l], nums[r]));
                        l++;
                        r--;
                        while (l < r && nums[l - 1] == nums[l]) {
                            l++;
                        }
                        while (r > l && nums[r + 1] == nums[r]) {
                            r--;
                        }
                    }
                }
            }
        }
        return list;
    }
}
