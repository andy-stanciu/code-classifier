class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> output = new ArrayList<List<Integer>>();
        if (nums == null || nums.length < 4)
            return output;
        Arrays.sort(nums);
        for (int i = 0; i < nums.length - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1])
                continue;
            for (int j = i + 1; j < nums.length - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1])
                    continue;
                searchPairs(nums, i, j, target, output);
            }
        }
        return output;
    }

    private void searchPairs(int[] nums, int i, int j, int target, List<List<Integer>> result) {
        int left = j + 1, right = nums.length - 1;
        while (left < right) {
            long sum = (long) nums[i] + nums[j] + nums[left] + nums[right];
            if (sum == (long) target) {
                result.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));
                left++;
                right--;
                while (left < right && nums[left] == nums[left - 1]) left++;
                while (left < right && nums[right] == nums[right + 1]) right--;
            } else if (sum < target) {
                left++;
            } else {
                right--;
            }
        }
    }
}
