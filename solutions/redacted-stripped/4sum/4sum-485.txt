class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        Set<List<Integer>> set = new HashSet<>();
        int n = nums.length;
        if (n < 4) {
            return new ArrayList<>(set);
        }
        Arrays.sort(nums);
        for (int i = 0; i < nums.length - 3; i++) {
            int val1 = nums[i];
            List<List<Integer>> subRes = threeSum(Arrays.copyOfRange(nums, i + 1, nums.length), (target - val1) % ((int) Math.pow(10, 9) + 7));
            for (List<Integer> l : subRes) {
                l.add(val1);
                Collections.sort(l);
                set.add(l);
            }
        }
        return new ArrayList<>(set);
    }

    public List<List<Integer>> threeSum(int[] nums, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Set<List<Integer>> set = new HashSet<>();
        for (int i = 0; i < nums.length - 2; i++) {
            int s = i + 1;
            int e = nums.length - 1;
            while (s < e) {
                int sum = nums[s] + nums[e] + nums[i];
                if (sum == target) {
                    List<Integer> ls = new ArrayList<>();
                    ls.add(nums[s]);
                    ls.add(nums[e]);
                    ls.add(nums[i]);
                    Collections.sort(ls);
                    set.add(ls);
                    System.out.println(set);
                    s++;
                    e--;
                } else if (sum > target) {
                    e--;
                } else {
                    s++;
                }
            }
        }
        return new ArrayList<>(set);
    }
}
