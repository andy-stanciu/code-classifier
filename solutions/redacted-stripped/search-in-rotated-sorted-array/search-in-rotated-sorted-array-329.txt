class Solution {

    public int method1(int[] nums, int target) {
        int n = nums.length;
        if (n == 1) {
            if (nums[0] == target)
                return 0;
            else
                return -1;
        }
        if (nums[0] < nums[n - 1])
            return method1(nums, 0, n - 1, target);
        int var1 = method2(nums, 0, n - 1);
        int a = method1(nums, 0, var1 - 1, target);
        int b = method1(nums, var1, n - 1, target);
        return a == -1 ? b : a;
    }

    int method2(int[] nums, int l, int r) {
        int n = nums.length;
        while (l <= r) {
            int m = l + (r - l) / 2;
            int prev = nums[(m - 1 + n) % n];
            int next = nums[(m + 1) % n];
            if (prev > nums[m] && next > nums[m])
                return m;
            else if (nums[m] >= nums[n - 1])
                l = m + 1;
            else if (nums[m] <= nums[n - 1])
                r = m - 1;
        }
        return -1;
    }

    int method1(int[] nums, int l, int r, int t) {
        while (l <= r) {
            int m = l + (r - l) / 2;
            if (nums[m] == t)
                return m;
            else if (nums[m] > t)
                r = m - 1;
            else if (nums[m] < t)
                l = m + 1;
        }
        return -1;
    }
}
