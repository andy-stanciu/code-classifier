class Solution {

    public int method1(int[] nums, int target) {
        int n = nums.length;
        int start = 0;
        int end = n - 1;
        int mid = (start + end) / 2;
        if (n == 1) {
            if (nums[0] == target) {
                return 0;
            }
            return -1;
        }
        if (n == 2) {
            if (nums[0] == target) {
                return 0;
            } else if (nums[1] == target) {
                return 1;
            }
            return -1;
        }
        if (nums[n - 1] > nums[0]) {
            return method2(nums, 0, n - 1, target);
        }
        boolean status = false;
        int var1 = -1;
        while (start <= end) {
            mid = (start + end) / 2;
            if (nums[mid - 1] > nums[mid]) {
                if (mid + 1 >= n) {
                    var1 = mid;
                    break;
                }
                if (mid + 1 < n && nums[mid] < nums[mid + 1]) {
                    var1 = mid;
                    break;
                }
            }
            if (start + 1 == end) {
                start = end;
                mid = (start + end) / 2;
            }
            if (nums[start] > nums[mid]) {
                end = mid;
            } else {
                start = mid;
            }
        }
        if (target > nums[n - 1]) {
            return method2(nums, 0, var1, target);
        } else {
            return method2(nums, var1, n - 1, target);
        }
    }

    public int method2(int[] nums, int start, int end, int target) {
        int mid = (start + end) / 2;
        while (start <= end) {
            mid = (start + end) / 2;
            if (nums[mid] == target) {
                return mid;
            }
            if (nums[mid] > target) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return -1;
    }
}
