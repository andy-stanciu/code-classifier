class Solution {

    public static int method1(int[] nums, int start, int end) {
        if (nums.length == 1) {
            return 0;
        }
        if (nums[0] < nums[nums.length - 1]) {
            return 0;
        }
        int mid1 = start + (end - start) / 2;
        int mid2 = mid1 + 1;
        if (nums[mid1] > nums[mid2]) {
            return mid2;
        } else if (nums[0] > nums[mid1]) {
            return method1(nums, start, mid1);
        } else {
            return method1(nums, mid1, end);
        }
    }

    public static int method2(int[] nums, int start, int end, int target) {
        if (nums.length == 1 && nums[0] == target) {
            return 0;
        } else if (nums.length == 1 && nums[0] != target) {
            return -1;
        }
        int mid = start + (end - start) / 2;
        if (nums[mid] == target) {
            return mid;
        }
        if (mid == end && nums[start] != target) {
            return -1;
        }
        if (nums[mid + 1] == target) {
            return mid + 1;
        }
        if (start == mid && nums[mid] != target && nums[end] != target) {
            return -1;
        }
        if (nums[mid] > target) {
            return method2(nums, start, mid, target);
        } else {
            return method2(nums, mid, end, target);
        }
    }

    public int method3(int[] nums, int target) {
        int var1 = method1(nums, 0, nums.length - 1);
        int len = nums.length;
        if (var1 == 0) {
            return method2(nums, 0, len - 1, target);
        } else if (var1 != 0 && nums[0] > target) {
            int var = method2(nums, var1, len - 1, target);
            return var;
        } else if (var1 != 0 && nums[0] <= target) {
            return method2(nums, 0, var1 - 1, target);
        } else {
            return -1;
        }
    }
}
