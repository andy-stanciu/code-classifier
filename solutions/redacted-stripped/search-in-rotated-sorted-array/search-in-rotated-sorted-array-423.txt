class Solution {

    public int method1(int[] nums, int target) {
        return (method2(nums, target));
    }

    private int pivot(int[] arr) {
        int s = 0;
        int e = arr.length - 1;
        while (s <= e) {
            int mid = s + (e - s) / 2;
            if (mid < e && arr[mid] > arr[mid + 1])
                return mid;
            if (mid > s && arr[mid] < arr[mid - 1])
                return mid - 1;
            if (arr[mid] <= arr[s])
                e = mid - 1;
            else
                s = mid + 1;
        }
        return -1;
    }

    private int method2(int[] a, int target) {
        int pvt = pivot(a);
        if (pvt == -1)
            return (method3(a, target, 0, a.length - 1));
        if (target == a[pvt]) {
            return pvt;
        }
        if (target >= a[0]) {
            return (method3(a, target, 0, pvt - 1));
        }
        return (method3(a, target, pvt + 1, a.length - 1));
    }

    private int method3(int[] a, int target, int s, int e) {
        while (s <= e) {
            int mid = s + (e - s) / 2;
            if (a[mid] > target)
                e = mid - 1;
            else if (a[mid] < target)
                s = mid + 1;
            else
                return mid;
        }
        return -1;
    }
}
