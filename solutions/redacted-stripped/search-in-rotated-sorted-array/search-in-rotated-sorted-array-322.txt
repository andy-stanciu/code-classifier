class Solution {

    public int method1(int[] nums, int target) {
        return method3(nums, 0, nums.length - 1, target);
    }

    private int method2(int[] arr, int start, int end, int target) {
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (arr[mid] == target) {
                return mid;
            } else if (arr[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return -1;
    }

    private int method3(int[] arr, int start, int end, int target) {
        if (start > end) {
            return -1;
        }
        int mid = start + (end - start) / 2;
        if (arr[mid] == target) {
            return mid;
        }
        if (method4(arr, start, mid)) {
            if (arr[start] <= target && target < arr[mid]) {
                return method2(arr, start, mid - 1, target);
            } else {
                return method3(arr, mid + 1, end, target);
            }
        } else {
            if (arr[mid] < target && target <= arr[end]) {
                return method2(arr, mid + 1, end, target);
            } else {
                return method3(arr, start, mid - 1, target);
            }
        }
    }

    private boolean method4(int[] arr, int start, int end) {
        return arr[start] <= arr[end];
    }
}
