class Solution {

    private BigInteger factorial(BigInteger n) {
        BigInteger result = BigInteger.valueOf(1);
        while (n.compareTo(BigInteger.ONE) >= 0) {
            result = result.multiply(n);
            n = n.subtract(BigInteger.ONE);
        }
        return result;
    }

    public int method1(int n) {
        int numOfOnes = n;
        int numOfTwos = 0;
        int totalPermutations = 1;
        while (numOfOnes - 2 >= 0) {
            n--;
            numOfOnes -= 2;
            numOfTwos += 1;
            BigInteger nBig = BigInteger.valueOf(n);
            BigInteger onesBig = BigInteger.valueOf(numOfOnes);
            BigInteger twosBig = BigInteger.valueOf(numOfTwos);
            if (numOfOnes > 0) {
                BigInteger temp = factorial(onesBig).multiply(factorial(twosBig));
                totalPermutations += factorial(nBig).divide(temp).intValue();
            } else
                totalPermutations += 1;
        }
        return totalPermutations;
    }
}
