class Solution {

    public ListNode method1(ListNode list1, ListNode list2) {
        if (list1 == null)
            return list2;
        if (list2 == null)
            return list1;
        ListNode curr1 = list1;
        ListNode curr2 = list2;
        List<Integer> al = new ArrayList();
        while (curr1 != null && curr2 != null) {
            if (curr1.val < curr2.val) {
                al.add(curr1.val);
                curr1 = curr1.next;
            } else if (curr1.val == curr2.val) {
                al.add(curr1.val);
                al.add(curr1.val);
                curr1 = curr1.next;
                curr2 = curr2.next;
            } else {
                al.add(curr2.val);
                curr2 = curr2.next;
            }
        }
        while (curr1 != null) {
            al.add(curr1.val);
            curr1 = curr1.next;
        }
        while (curr2 != null) {
            al.add(curr2.val);
            curr2 = curr2.next;
        }
        ListNode head = new ListNode(al.get(0));
        ListNode curr = head;
        for (int i = 1; i < al.size(); i++) {
            ListNode temp = new ListNode(al.get(i));
            curr.next = temp;
            curr = curr.next;
        }
        return head;
    }
}
