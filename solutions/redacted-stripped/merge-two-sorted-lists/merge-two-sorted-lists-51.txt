class Solution {

    public ListNode method1(ListNode list1, ListNode list2) {
        ListNode temp1 = list1;
        ListNode temp2 = list2;
        ListNode ans = new ListNode(-1);
        ListNode current = ans;
        while (temp1 != null || temp2 != null) {
            if (temp1 != null && temp2 != null && temp1.val == temp2.val) {
                current.next = new ListNode(temp1.val);
                current.next.next = new ListNode(temp2.val);
                temp2 = temp2.next;
                temp1 = temp1.next;
                current = current.next.next;
            }
            if (temp1 != null && temp1.next != null && temp2 != null && temp1.val <= temp2.val && temp1.next.val >= temp2.val) {
                current.next = new ListNode(temp1.val);
                temp1 = temp1.next;
                current = current.next;
            }
            if (temp1 != null && temp2 != null && temp1.val <= temp2.val) {
                current.next = new ListNode(temp1.val);
                temp1 = temp1.next;
                current = current.next;
            }
            if (temp1 != null && temp2 != null && temp2.next != null && temp2.val <= temp1.val && temp2.next.val >= temp1.val) {
                current.next = new ListNode(temp2.val);
                temp2 = temp2.next;
                current = current.next;
            }
            if (temp1 != null && temp2 != null && temp2.val <= temp1.val) {
                current.next = new ListNode(temp2.val);
                temp2 = temp2.next;
                current = current.next;
            }
            if (temp1 == null && temp2 != null) {
                current.next = new ListNode(temp2.val);
                temp2 = temp2.next;
                current = current.next;
            }
            if (temp2 == null && temp1 != null) {
                current.next = new ListNode(temp1.val);
                temp1 = temp1.next;
                current = current.next;
            }
        }
        return ans.next;
    }
}
