class Solution {

    private boolean dfsCheck(int node, ArrayList<ArrayList<Integer>> adj, int[] vis, int[] pathVis) {
        vis[node] = 1;
        pathVis[node] = 1;
        for (int neighbor : adj.get(node)) {
            if (vis[neighbor] == 0) {
                if (dfsCheck(neighbor, adj, vis, pathVis)) {
                    return true;
                }
            } else if (pathVis[neighbor] == 1) {
                return true;
            }
        }
        pathVis[node] = 0;
        return false;
    }

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] prerequisite : prerequisites) {
            adj.get(prerequisite[1]).add(prerequisite[0]);
        }
        int[] vis = new int[param1];
        int[] pathVis = new int[param1];
        for (int i = 0; i < param1; i++) {
            if (vis[i] == 0) {
                if (dfsCheck(i, adj, vis, pathVis)) {
                    return false;
                }
            }
        }
        return true;
    }
}
