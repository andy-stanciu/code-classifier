class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        List<List<Integer>> adjList = new ArrayList<>();
        int count = 0;
        for (int i = 0; i < param1; i++) adjList.add(new ArrayList<>());
        int[] inDegree = new int[param1];
        for (int i = 0; i < prerequisites.length; i++) {
            adjList.get(prerequisites[i][1]).add(prerequisites[i][0]);
            inDegree[prerequisites[i][0]]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < param1; i++) if (inDegree[i] == 0)
            queue.offer(i);
        while (!queue.isEmpty()) {
            int node = queue.poll();
            count += 1;
            for (Integer it : adjList.get(node)) {
                inDegree[it]--;
                if (inDegree[it] == 0)
                    queue.offer(it);
            }
        }
        return count == param1;
    }
}
