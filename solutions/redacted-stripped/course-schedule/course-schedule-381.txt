class Solution {

    public boolean canFinish(int n, int[][] pre) {
        int[] indeg = new int[n];
        int cnt = 0;
        Queue<Integer> q = new LinkedList<>();
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] i : pre) {
            adj.get(i[0]).add(i[1]);
        }
        for (int i = 0; i < n; i++) {
            for (int it : adj.get(i)) {
                indeg[it]++;
            }
        }
        for (int i = 0; i < n; i++) {
            if (indeg[i] == 0) {
                q.add(i);
            }
        }
        while (!q.isEmpty()) {
            int node = q.poll();
            cnt++;
            for (int it : adj.get(node)) {
                indeg[it]--;
                if (indeg[it] == 0) {
                    q.add(it);
                }
            }
        }
        return (cnt == n);
    }
}
