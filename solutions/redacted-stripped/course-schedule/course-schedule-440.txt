class Solution {

    public boolean canFinish(int V, int[][] mat) {
        List<List<Integer>> adjL = new ArrayList<>(V);
        for (int i = 0; i < V; i++) adjL.add(new ArrayList<>());
        int n = mat.length;
        int[] indeg = new int[V];
        for (int i = 0; i < n; i++) {
            adjL.get(mat[i][1]).add(mat[i][0]);
            indeg[mat[i][0]]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < V; i++) {
            if (indeg[i] == 0)
                q.add(i);
        }
        List<Integer> res = new ArrayList<>();
        while (!q.isEmpty()) {
            int node = q.remove();
            for (int i = 0; i < adjL.get(node).size(); i++) {
                int m = adjL.get(node).get(i);
                indeg[m]--;
                if (indeg[m] == 0)
                    q.add(m);
            }
            res.add(node);
        }
        return res.size() == V ? true : false;
    }
}
