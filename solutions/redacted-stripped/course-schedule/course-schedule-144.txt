class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        int[] indegree = new int[param1];
        Queue<Integer> q = new LinkedList<>();
        int cdone = 0;
        HashMap<Integer, ArrayList<Integer>> hm = new HashMap<>();
        Arrays.fill(indegree, 0);
        for (int i = 0; i < prerequisites.length; i++) {
            indegree[prerequisites[i][1]]++;
            ArrayList<Integer> neighb = hm.getOrDefault(prerequisites[i][0], new ArrayList<>());
            neighb.add(prerequisites[i][1]);
            hm.put(prerequisites[i][0], neighb);
        }
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0)
                q.add(i);
        }
        if (q.isEmpty())
            return false;
        while (!q.isEmpty()) {
            int curr = q.remove();
            cdone++;
            if (hm.containsKey(curr)) {
                for (int n : hm.get(curr)) {
                    indegree[n]--;
                    if (indegree[n] == 0)
                        q.add(n);
                }
            }
        }
        return cdone == param1;
    }
}
