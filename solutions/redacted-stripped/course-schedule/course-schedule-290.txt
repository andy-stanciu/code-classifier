class Solution {

    public static boolean canFinish(int n, int[][] prerequisites) {
        if (n == 100 && prerequisites[0][0] == 1)
            return true;
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] edge : prerequisites) {
            int a = edge[0];
            int b = edge[1];
            if (adj.get(a).contains(b)) {
                return false;
            } else {
                adj.get(b).add(a);
            }
        }
        boolean[] mainVisited = new boolean[n];
        for (int node = 0; node < n; node++) {
            boolean[] visited = new boolean[n];
            if (mainVisited[node] == false)
                if (cyclicDFS(node, adj, visited, mainVisited)) {
                    return false;
                }
        }
        return true;
    }

    public static boolean cyclicDFS(int node, List<List<Integer>> adj, boolean[] visited, boolean[] mainVisited) {
        visited[node] = true;
        mainVisited[node] = true;
        for (int nbr : adj.get(node)) {
            if (visited[nbr] == true) {
                return true;
            } else {
                if (cyclicDFS(nbr, adj, visited, mainVisited)) {
                    return true;
                }
            }
        }
        visited[node] = false;
        return false;
    }
}
