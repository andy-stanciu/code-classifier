class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        Queue<Integer> q = new ArrayDeque<>();
        int[] indegree = new int[param1];
        for (int i = 0; i < adj.size(); i++) {
            for (int v : adj.get(i)) {
                indegree[v]++;
            }
        }
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        int count = 0;
        while (!q.isEmpty()) {
            int val = q.poll();
            count++;
            for (int el : adj.get(val)) {
                indegree[el]--;
                if (indegree[el] == 0) {
                    q.add(el);
                }
            }
        }
        return count == param1;
    }
}
