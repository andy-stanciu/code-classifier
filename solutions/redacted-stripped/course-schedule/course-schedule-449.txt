class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        List<List<Integer>> g = new ArrayList<>();
        int cnt = 0;
        int[] d = new int[param1 + 10];
        for (int i = 0; i < param1; i++) g.add(new ArrayList<>());
        for (int[] p : prerequisites) {
            int a = p[1], b = p[0];
            g.get(a).add(b);
            d[b]++;
        }
        Deque<Integer> q = new LinkedList<>();
        for (int i = 0; i < param1; i++) if (d[i] == 0)
            q.offer(i);
        while (!q.isEmpty()) {
            int top = q.poll();
            cnt++;
            for (int e : g.get(top)) if (--d[e] == 0)
                q.offer(e);
        }
        return cnt == param1;
    }
}
