class Solution {

    public boolean cycleChecker(int i, boolean[] visited, boolean[] dfsvisited, ArrayList<ArrayList<Integer>> adj) {
        visited[i] = true;
        dfsvisited[i] = true;
        for (Integer neighbor : adj.get(i)) {
            if (!visited[neighbor]) {
                boolean ans = cycleChecker(neighbor, visited, dfsvisited, adj);
                if (ans) {
                    return true;
                }
            } else if (dfsvisited[neighbor]) {
                return true;
            }
        }
        dfsvisited[i] = false;
        return false;
    }

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] pair : prerequisites) {
            adj.get(pair[0]).add(pair[1]);
        }
        boolean[] visited = new boolean[param1];
        boolean[] dfsVisited = new boolean[param1];
        for (int i = 0; i < adj.size(); i++) {
            if (!visited[i]) {
                boolean ans = cycleChecker(i, visited, dfsVisited, adj);
                if (ans) {
                    return false;
                }
            }
        }
        return true;
    }
}
