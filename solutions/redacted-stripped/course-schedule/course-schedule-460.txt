class Solution {

    private List<List<Integer>> var1 = new ArrayList<>();

    private int[] visited;

    public boolean canFinish(int param1, int[][] prerequisites) {
        if (prerequisites.length == 0)
            return true;
        visited = new int[param1];
        for (int i = 0; i < param1; i++) {
            var1.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            int var2 = prerequisites[i][0];
            int var3 = prerequisites[i][1];
            var1.get(var3).add(var2);
        }
        for (int i = 0; i < param1; i++) {
            if (!canBeFinished(i)) {
                return false;
            }
        }
        return true;
    }

    private boolean canBeFinished(int param2) {
        visited[param2] = 1;
        for (int var2 : var1.get(param2)) {
            if (visited[var2] == 1) {
                return false;
            }
            if (visited[var2] == 0) {
                if (!canBeFinished(var2)) {
                    return false;
                }
            }
        }
        visited[param2] = 2;
        return true;
    }
}
