class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList<>(param1);
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] prerequisite : prerequisites) {
            adj.get(prerequisite[0]).add(prerequisite[1]);
        }
        Set<Integer> visitedSet = new HashSet();
        for (int i = 0; i < param1; i++) {
            if (!dfs(adj, visitedSet, i))
                return false;
        }
        return true;
    }

    private boolean dfs(List<List<Integer>> adjList, Set<Integer> visitedSet, int node) {
        if (visitedSet.contains(node))
            return false;
        if (adjList.get(node).isEmpty())
            return true;
        visitedSet.add(node);
        for (int currentNode : adjList.get(node)) {
            if (!dfs(adjList, visitedSet, currentNode))
                return false;
        }
        visitedSet.remove(node);
        adjList.get(node).clear();
        return true;
    }
}
