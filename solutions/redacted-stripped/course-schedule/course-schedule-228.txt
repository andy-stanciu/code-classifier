class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] prereq : prerequisites) {
            graph.get(prereq[0]).add(prereq[1]);
        }
        boolean[] visited = new boolean[param1];
        boolean[] isBeingVisited = new boolean[param1];
        for (int i = 0; i < param1; i++) {
            if (checkForCycle(graph, i, visited, isBeingVisited))
                return false;
        }
        return true;
    }

    public boolean checkForCycle(List<List<Integer>> graph, int index, boolean[] visited, boolean[] isBeingVisited) {
        if (isBeingVisited[index])
            return true;
        if (visited[index])
            return false;
        visited[index] = true;
        isBeingVisited[index] = true;
        for (int adj : graph.get(index)) {
            if (checkForCycle(graph, adj, visited, isBeingVisited))
                return true;
        }
        isBeingVisited[index] = false;
        return false;
    }
}
