class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        int[] indegree = new int[param1];
        for (int i = 0; i < param1; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] goof : prerequisites) {
            int u = goof[0];
            int v = goof[1];
            graph.get(u).add(v);
        }
        for (int i = 0; i < param1; i++) {
            for (int neighbor : graph.get(i)) {
                indegree[neighbor]++;
            }
        }
        Queue<Integer> queue = new LinkedList<>();
        boolean[] visited = new boolean[param1];
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0) {
                queue.add(i);
            }
        }
        while (!queue.isEmpty()) {
            int node = queue.poll();
            visited[node] = true;
            for (int neighbor : graph.get(node)) {
                indegree[neighbor]--;
                if (indegree[neighbor] == 0) {
                    queue.add(neighbor);
                }
            }
        }
        for (int i = 0; i < param1; i++) {
            if (visited[i] == false) {
                return false;
            }
        }
        return true;
    }
}
