class Solution {

    List<List<Integer>> adjList;

    int[] visited;

    public boolean canFinish(int param1, int[][] prerequisites) {
        adjList = new ArrayList<>();
        visited = new int[param1];
        buildGraph(param1, prerequisites);
        for (int i = 0; i < param1; i++) {
            if (visited[i] == 0)
                if (isCycle(i))
                    return false;
        }
        return true;
    }

    private void buildGraph(int vertices, int[][] edges) {
        for (int i = 0; i < vertices; i++) adjList.add(new ArrayList<Integer>());
        for (int i = 0; i < edges.length; i++) adjList.get(edges[i][0]).add(edges[i][1]);
    }

    private boolean isCycle(int vertex) {
        if (visited[vertex] == 2)
            return true;
        visited[vertex] = 2;
        for (int neighbourVertex : adjList.get(vertex)) {
            if (visited[neighbourVertex] != 1)
                if (isCycle(neighbourVertex))
                    return true;
        }
        visited[vertex] = 1;
        return false;
    }
}
