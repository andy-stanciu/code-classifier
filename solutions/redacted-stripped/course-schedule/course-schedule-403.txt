class Solution {

    public boolean canFinish(int V, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        int n = prerequisites.length;
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < n; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        int[] inDegree = new int[V];
        for (int i = 0; i < V; i++) {
            for (int it : adj.get(i)) {
                inDegree[it]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < V; i++) {
            if (inDegree[i] == 0) {
                q.add(i);
            }
        }
        int[] top = new int[V];
        int i = 0;
        while (!q.isEmpty()) {
            int x = q.remove();
            top[i++] = x;
            for (int it : adj.get(x)) {
                inDegree[it]--;
                if (inDegree[it] == 0)
                    q.add(it);
            }
        }
        if (i == V) {
            return true;
        }
        return false;
    }
}
