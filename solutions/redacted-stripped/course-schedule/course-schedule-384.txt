class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        Set<Integer> var1 = new HashSet<>();
        Set<Integer> var2 = new HashSet<>();
        for (int i = 0; i < prerequisites.length; i++) {
            var1 = new HashSet<>();
            var1.add(prerequisites[i][0]);
            if (!recurse(prerequisites, var1, prerequisites[i][1], var2)) {
                return false;
            }
        }
        return true;
    }

    private boolean recurse(int[][] preReqs, Set var1, int param2, Set var2) {
        if (var1.contains(param2)) {
            return false;
        }
        if (var2.contains(param2)) {
            return true;
        }
        for (int i = 0; i < preReqs.length; i++) {
            if (param2 == preReqs[i][0]) {
                var1.add(param2);
                param2 = preReqs[i][1];
                return recurse(preReqs, var1, param2, var2);
            }
        }
        var2.add(param2);
        return true;
    }
}
