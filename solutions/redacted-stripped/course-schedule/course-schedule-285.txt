class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        Map<Integer, Set<Integer>> prereqMap = new HashMap<>();
        for (int[] prereq : prerequisites) {
            prereqMap.computeIfAbsent(prereq[0], k -> new HashSet<>()).add(prereq[1]);
        }
        Set<Integer> visited = new HashSet<>();
        for (int i = 0; i < param1; i++) {
            if (!canFinish(i, prereqMap, visited)) {
                return false;
            }
        }
        return true;
    }

    static boolean canFinish(int param2, Map<Integer, Set<Integer>> prereqMap, Set<Integer> visited) {
        if (visited.contains(param2)) {
            return false;
        }
        Set<Integer> prereqs = prereqMap.get(param2);
        if (prereqs == null) {
            return true;
        }
        visited.add(param2);
        for (int p : prereqs) {
            if (!canFinish(p, prereqMap, visited)) {
                return false;
            }
        }
        visited.remove(param2);
        prereqs.clear();
        return true;
    }
}
