class Solution {

    boolean[] vis = null;

    boolean[] track = null;

    public boolean canFinish(int param1, int[][] prerequisites) {
        if (prerequisites.length == 1)
            return true;
        List<Integer>[] vertices = new List[param1];
        int v = 0;
        for (int[] c : prerequisites) {
            if (vertices[c[0]] != null) {
                vertices[c[0]].add(c[1]);
            } else {
                v++;
                List<Integer> neighbors = new ArrayList<>();
                neighbors.add(c[1]);
                vertices[c[0]] = neighbors;
            }
        }
        vis = new boolean[param1];
        track = new boolean[param1];
        for (int i = 0; i < param1; i++) {
            if (vertices[i] != null && isCyclic(i, vertices)) {
                return false;
            }
        }
        return true;
    }

    boolean isCyclic(int i, List<Integer>[] vertices) {
        if (track[i]) {
            return true;
        }
        if (vis[i]) {
            return false;
        }
        track[i] = true;
        vis[i] = true;
        if (vertices[i] != null)
            for (int n : vertices[i]) {
                if (isCyclic(n, vertices)) {
                    return true;
                }
            }
        track[i] = false;
        return false;
    }
}
