class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        int n = param1;
        ArrayList<Integer>[] graph = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] p : prerequisites) {
            graph[p[1]].add(p[0]);
        }
        int[] vis = new int[n];
        for (int i = 0; i < n; i++) {
            if (vis[i] == 0) {
                Queue<Integer> q = new LinkedList<>();
                q.add(i);
                while (!q.isEmpty()) {
                    int curr = q.poll();
                    vis[i] = 1;
                    for (int next : graph[curr]) {
                        if (vis[next] == 1)
                            return false;
                        q.add(next);
                    }
                    vis[i] = 0;
                }
            }
        }
        return true;
    }
}
