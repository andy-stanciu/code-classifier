class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        int[] var1 = new int[param1];
        Map<Integer, List<Integer>> map = new HashMap<>();
        Queue<Integer> q = new LinkedList<>();
        int result = 0;
        for (int[] prereq : prerequisites) {
            map.computeIfAbsent(prereq[1], val -> new LinkedList<>()).add(prereq[0]);
            var1[prereq[0]]++;
        }
        for (int i = 0; i < param1; i++) {
            if (var1[i] == 0) {
                q.offer(i);
                result++;
            }
        }
        while (!q.isEmpty()) {
            int var2 = q.poll();
            if (map.containsKey(var2)) {
                for (int i : map.get(var2)) {
                    var1[i]--;
                    if (var1[i] == 0) {
                        q.offer(i);
                        result++;
                    }
                }
            }
        }
        return result == param1;
    }
}
