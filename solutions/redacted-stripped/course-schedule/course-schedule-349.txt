class Solution {

    boolean hasCycle = false;

    boolean[] visited = null;

    boolean[] paths = null;

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList<Integer>[] graph = new ArrayList[param1];
        for (int i = 0; i < prerequisites.length; i++) {
            int idx = prerequisites[i][1];
            if (graph[idx] == null) {
                graph[idx] = new ArrayList<>();
            }
            graph[idx].add(prerequisites[i][0]);
        }
        visited = new boolean[param1];
        paths = new boolean[param1];
        for (int i = 0; i < param1; i++) {
            dfs(graph, i);
        }
        return !hasCycle;
    }

    private void dfs(ArrayList<Integer>[] graph, int s) {
        if (paths[s]) {
            hasCycle = true;
        }
        if (visited[s] || hasCycle) {
            return;
        }
        visited[s] = true;
        paths[s] = true;
        if (graph[s] != null) {
            for (int next : graph[s]) {
                dfs(graph, next);
            }
        }
        paths[s] = false;
    }
}
