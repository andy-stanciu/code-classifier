class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adjList.add(new ArrayList<>());
        }
        for (int[] prerequisite : prerequisites) {
            adjList.get(prerequisite[1]).add(prerequisite[0]);
        }
        int[] visited = new int[param1];
        for (int i = 0; i < param1; i++) {
            if (visited[i] == 0 && !dfs(adjList, i, visited)) {
                return false;
            }
        }
        return true;
    }

    private boolean dfs(List<List<Integer>> adjList, int param2, int[] visited) {
        visited[param2] = 1;
        for (int neighbor : adjList.get(param2)) {
            if (visited[neighbor] == 1) {
                return false;
            } else if (visited[neighbor] == 0 && !dfs(adjList, neighbor, visited)) {
                return false;
            }
        }
        visited[param2] = 2;
        return true;
    }
}
