class Solution {

    static class Edge {

        int src;

        int dest;

        public Edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList<Edge>[] graph = new ArrayList[param1];
        for (int i = 0; i < param1; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            graph[prerequisites[i][1]].add(new Edge(prerequisites[i][1], prerequisites[i][0]));
        }
        boolean[] visited = new boolean[param1];
        boolean[] recStack = new boolean[param1];
        boolean isCycle = false;
        for (int i = 0; i < param1; i++) {
            isCycle = detectCycle(graph, visited, i, recStack);
            if (isCycle) {
                return false;
            }
        }
        Stack<Integer> stack = new Stack();
        visited = new boolean[param1];
        topoSort(graph, visited, 0, stack);
        int var1 = 0;
        while (!stack.isEmpty()) {
            stack.pop();
            var1++;
        }
        if (var1 <= param1) {
            return true;
        }
        return false;
    }

    public static boolean detectCycle(ArrayList<Edge>[] graph, boolean[] visited, int curr, boolean[] recStack) {
        visited[curr] = true;
        recStack[curr] = true;
        for (int i = 0; i < graph[curr].size(); i++) {
            Edge edge = graph[curr].get(i);
            if (recStack[edge.dest]) {
                return true;
            }
            if (!visited[edge.dest] && detectCycle(graph, visited, edge.dest, recStack)) {
                return true;
            }
        }
        recStack[curr] = false;
        return false;
    }

    public static void topoSort(ArrayList<Edge>[] graph, boolean[] visited, int curr, Stack<Integer> stack) {
        visited[curr] = true;
        for (int i = 0; i < graph[curr].size(); i++) {
            Edge edge = graph[curr].get(i);
            if (!visited[edge.dest]) {
                topoSort(graph, visited, edge.dest, stack);
            }
        }
        stack.push(curr);
    }
}
