class Solution {

    public boolean canFinish(int param1, int[][] pre) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<Integer>());
        }
        for (int i = 0; i < pre.length; i++) {
            int node = pre[i][1];
            adj.get(node).add(pre[i][0]);
        }
        int n = adj.size();
        int[] inde = new int[n];
        for (int i = 0; i < n; i++) {
            for (int it : adj.get(i)) {
                inde[it]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            if (inde[i] == 0) {
                q.offer(i);
            }
        }
        int count = 0;
        while (!q.isEmpty()) {
            int node = q.peek();
            q.poll();
            count++;
            for (int j : adj.get(node)) {
                inde[j]--;
                if (inde[j] == 0) {
                    q.offer(j);
                }
            }
        }
        if (count == param1)
            return true;
        return false;
    }
}
