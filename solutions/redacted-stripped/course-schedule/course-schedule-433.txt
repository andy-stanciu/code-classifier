class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        boolean[][] graph = new boolean[param1][param1];
        Set<Integer> visited = new HashSet<>();
        for (int[] edge : prerequisites) graph[edge[0]][edge[1]] = true;
        for (int i = 0; i < graph.length; i++) if (!dfs(i, new HashSet<>(), graph, visited))
            return false;
        return true;
    }

    public boolean dfs(int cur, Set<Integer> seen, boolean[][] graph, Set<Integer> visited) {
        if (visited.contains(cur))
            return true;
        if (seen.contains(cur))
            return false;
        else
            seen.add(cur);
        for (int n = 0; n < graph[cur].length; n++) if (graph[cur][n])
            if (!dfs(n, new HashSet<>(seen), graph, visited))
                return false;
        visited.add(cur);
        return true;
    }
}
