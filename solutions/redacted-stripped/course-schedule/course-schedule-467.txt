class Solution {

    boolean[] visited;

    boolean[] onPath;

    boolean hasCycle = false;

    public boolean canFinish(int param1, int[][] prerequisites) {
        visited = new boolean[param1];
        onPath = new boolean[param1];
        List<Integer>[] graph = buildGraph(param1, prerequisites);
        for (int s = 0; s < param1; s++) {
            if (!visited[s]) {
                traverse(graph, s);
            }
        }
        return !hasCycle;
    }

    public List<Integer>[] buildGraph(int param1, int[][] prerequisites) {
        List<Integer>[] graph = new LinkedList[param1];
        for (int i = 0; i < param1; i++) {
            graph[i] = new LinkedList<>();
        }
        for (int[] p : prerequisites) {
            int from = p[0];
            int to = p[1];
            graph[from].add(to);
        }
        return graph;
    }

    public void traverse(List<Integer>[] graph, int s) {
        if (onPath[s]) {
            hasCycle = true;
        }
        if (hasCycle || visited[s])
            return;
        visited[s] = true;
        onPath[s] = true;
        for (int neighbor : graph[s]) {
            traverse(graph, neighbor);
        }
        onPath[s] = false;
    }
}
