class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] elem : prerequisites) {
            int var1 = elem[0];
            int prereq = elem[1];
            adj.get(var1).add(prereq);
        }
        int[] visited = new int[param1];
        boolean[] hasCycle = new boolean[1];
        for (int i = 0; i < param1; i++) {
            topoSort(i, adj, visited, hasCycle);
            if (hasCycle[0]) {
                return false;
            }
        }
        return true;
    }

    public void topoSort(int i, List<List<Integer>> adj, int[] visited, boolean[] hasCycle) {
        if (visited[i] == 1) {
            hasCycle[0] = true;
            return;
        }
        if (visited[i] == 2) {
            return;
        }
        visited[i] = 1;
        List<Integer> nbr = adj.get(i);
        for (int nb : nbr) {
            topoSort(nb, adj, visited, hasCycle);
        }
        visited[i] = 2;
    }
}
