class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        List<Integer>[] preMap = new List[param1];
        int[] indegree = new int[param1];
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < prerequisites.length; i++) {
            int var1 = prerequisites[i][0];
            int pre = prerequisites[i][1];
            if (preMap[pre] == null) {
                preMap[pre] = new ArrayList<>();
            }
            preMap[pre].add(var1);
            indegree[var1]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0) {
                queue.offer(i);
            }
        }
        while (!queue.isEmpty()) {
            int current = queue.poll();
            ans.add(current);
            if (preMap[current] != null) {
                for (int i = 0; i < preMap[current].size(); i++) {
                    int target = preMap[current].get(i);
                    indegree[target]--;
                    if (indegree[target] == 0)
                        queue.offer(target);
                }
            }
        }
        return ans.size() == param1;
    }
}
