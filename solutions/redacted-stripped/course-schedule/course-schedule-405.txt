class Solution {

    class Edge {

        int dest;

        Edge(int d) {
            this.dest = d;
        }
    }

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList<Edge>[] graph = new ArrayList[param1];
        createGraph(graph, param1, prerequisites);
        boolean[] visited = new boolean[param1];
        boolean[] recursionStack = new boolean[param1];
        for (int i = 0; i < param1; i++) {
            if (!visited[i]) {
                if (isCyclic(graph, i, visited, recursionStack)) {
                    return false;
                }
            }
        }
        return true;
    }

    public void createGraph(ArrayList<Edge>[] graph, int param1, int[][] prerequisites) {
        for (int i = 0; i < param1; i++) {
            graph[i] = new ArrayList<Edge>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            int src = prerequisites[i][1];
            int dest = prerequisites[i][0];
            graph[src].add(new Edge(dest));
        }
    }

    public boolean isCyclic(ArrayList<Edge>[] graph, int curr, boolean[] visited, boolean[] recursionStack) {
        visited[curr] = true;
        recursionStack[curr] = true;
        for (Edge neighbor : graph[curr]) {
            int dest = neighbor.dest;
            if (!visited[dest]) {
                if (isCyclic(graph, dest, visited, recursionStack)) {
                    return true;
                }
            } else if (recursionStack[dest]) {
                return true;
            }
        }
        recursionStack[curr] = false;
        return false;
    }
}
