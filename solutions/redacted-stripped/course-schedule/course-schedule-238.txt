class Solution {

    public static boolean dfs(int src, ArrayList<Integer>[] adj, int[] vis) {
        if (vis[src] == 0)
            return true;
        if (vis[src] == 1)
            return false;
        vis[src] = 0;
        for (int nbr : adj[src]) {
            boolean cycle = dfs(nbr, adj, vis);
            if (cycle == true)
                return true;
        }
        vis[src] = 1;
        return false;
    }

    public boolean canFinish(int n, int[][] prerequisites) {
        ArrayList<Integer>[] adj = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int[] pre : prerequisites) {
            int src = pre[1];
            int dest = pre[0];
            adj[src].add(dest);
        }
        int[] vis = new int[n];
        Arrays.fill(vis, -1);
        for (int idx = 0; idx < n; idx++) {
            if (vis[idx] == -1) {
                boolean cycle = dfs(idx, adj, vis);
                if (cycle == true)
                    return false;
            }
        }
        return true;
    }
}
