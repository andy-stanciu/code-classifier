class Solution {

    static class edge {

        int src;

        int dest;

        edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }

    public static boolean detectcycle(int i, ArrayList<Integer>[] graph, boolean[] vis, boolean[] stack) {
        vis[i] = true;
        stack[i] = true;
        for (int j = 0; j < graph[i].size(); j++) {
            int dest = graph[i].get(j);
            if (stack[dest]) {
                return true;
            }
            if (!vis[dest]) {
                if (detectcycle(dest, graph, vis, stack)) {
                    return true;
                }
            }
        }
        stack[i] = false;
        return false;
    }

    public boolean canFinish(int param1, int[][] prerequisites) {
        boolean[] vis = new boolean[param1];
        boolean[] stack = new boolean[param1];
        ArrayList<Integer>[] graph = new ArrayList[param1];
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<Integer>();
        }
        for (int[] p : prerequisites) {
            int src = p[1];
            int dest = p[0];
            graph[src].add(dest);
        }
        for (int i = 0; i < param1; i++) {
            if (!vis[i]) {
                if (detectcycle(i, graph, vis, stack)) {
                    return false;
                }
            }
        }
        return true;
    }
}
