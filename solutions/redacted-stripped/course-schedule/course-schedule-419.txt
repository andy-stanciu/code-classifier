class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        int[] degree = new int[param1];
        Queue<Integer> q = new LinkedList<>();
        int j = 0;
        for (int i = 0; i < prerequisites.length; i++) {
            degree[prerequisites[i][1]]++;
        }
        for (int i = 0; i < param1; i++) {
            if (degree[i] == 0)
                q.add(i);
        }
        if (q.isEmpty())
            return false;
        ArrayList<Integer> l = new ArrayList<>();
        while (!q.isEmpty()) {
            int s = q.peek();
            q.remove();
            for (int i = 0; i < prerequisites.length; i++) {
                if (prerequisites[i][0] == s) {
                    degree[prerequisites[i][1]]--;
                    if (degree[prerequisites[i][1]] == 0) {
                        q.add(prerequisites[i][1]);
                    }
                }
            }
            if (l.contains(s))
                return false;
            else
                l.add(s);
        }
        if (l.size() < param1)
            return false;
        return true;
    }
}
