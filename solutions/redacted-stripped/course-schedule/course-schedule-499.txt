class Solution {

    Map<Integer, List<Integer>> preReq = new HashMap<>();

    public boolean canFinish(int param1, int[][] prerequisites) {
        for (int[] pre : prerequisites) {
            preReq.computeIfAbsent(pre[0], k -> new ArrayList<>()).add(pre[1]);
        }
        Set<Integer> taken = new HashSet<>();
        for (int i = 0; i < param1; i++) {
            dfs(i, new HashSet<>(), taken);
        }
        return taken.size() == param1;
    }

    boolean dfs(int cur, Set<Integer> vis, Set<Integer> taken) {
        if (taken.contains(cur))
            return true;
        if (!preReq.containsKey(cur)) {
            taken.add(cur);
            return true;
        }
        if (vis.contains(cur))
            return false;
        vis.add(cur);
        for (int p : preReq.get(cur)) {
            if (!dfs(p, vis, taken))
                return false;
        }
        taken.add(cur);
        return true;
    }
}
