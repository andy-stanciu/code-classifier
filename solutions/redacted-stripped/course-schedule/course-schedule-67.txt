class Solution {

    private boolean isCycleExist(int currNode, ArrayList<ArrayList<Integer>> adj, int[] visited) {
        if (visited[currNode] == 2) {
            return true;
        }
        visited[currNode] = 2;
        for (int neighbour : adj.get(currNode)) {
            if (visited[neighbour] != 1) {
                if (isCycleExist(neighbour, adj, visited)) {
                    return true;
                }
            }
        }
        visited[currNode] = 1;
        return false;
    }

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>(param1);
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<Integer>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        int[] visited = new int[param1];
        for (int i = 0; i < param1; i++) {
            if (visited[i] == 0) {
                if (isCycleExist(i, adj, visited)) {
                    return false;
                }
            }
        }
        return true;
    }
}
