class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        List<Integer> li = new ArrayList<>();
        int[] freq = new int[param1];
        for (int i = 0; i < prerequisites.length; i++) {
            freq[prerequisites[i][1]]++;
        }
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < freq.length; i++) {
            if (freq[i] == 0) {
                q.add(i);
            }
        }
        while (!q.isEmpty()) {
            int x = q.poll();
            List<Integer> ab = adj.get(x);
            for (int i = 0; i < ab.size(); i++) {
                freq[ab.get(i)]--;
                if (freq[ab.get(i)] == 0) {
                    q.add(ab.get(i));
                }
            }
            li.add(x);
        }
        return li.size() == param1;
    }
}
