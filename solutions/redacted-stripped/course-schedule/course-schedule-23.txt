class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adjacencyList = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adjacencyList.add(new ArrayList<>());
        }
        int numOfPrerequisites = prerequisites.length;
        for (int i = 0; i < numOfPrerequisites; i++) {
            adjacencyList.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        int[] indegree = new int[param1];
        for (int i = 0; i < param1; i++) {
            for (int neighbor : adjacencyList.get(i)) {
                indegree[neighbor]++;
            }
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0) {
                queue.add(i);
            }
        }
        List<Integer> topologicalOrder = new ArrayList<>();
        while (!queue.isEmpty()) {
            int node = queue.poll();
            topologicalOrder.add(node);
            for (int neighbor : adjacencyList.get(node)) {
                indegree[neighbor]--;
                if (indegree[neighbor] == 0) {
                    queue.add(neighbor);
                }
            }
        }
        return topologicalOrder.size() == param1;
    }
}
