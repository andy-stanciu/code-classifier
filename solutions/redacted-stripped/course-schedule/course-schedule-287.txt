class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int[] i : prerequisites) {
            map.computeIfAbsent(i[0], v -> new ArrayList<>()).add(i[1]);
        }
        int[] visit = new int[param1];
        for (int i = 0; i < param1; i++) {
            if (visit[i] == 0) {
                if (!dfs(i, visit, map))
                    return false;
            }
        }
        return true;
    }

    private boolean dfs(int s, int[] visit, Map<Integer, List<Integer>> map) {
        visit[s] = 1;
        for (int next : map.getOrDefault(s, Collections.emptyList())) {
            if (visit[next] == 1) {
                return false;
            }
            if (visit[next] == 0) {
                if (!dfs(next, visit, map)) {
                    return false;
                }
            }
        }
        visit[s] = 2;
        return true;
    }
}
