class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] prerequisite : prerequisites) {
            adj.get(prerequisite[0]).add(prerequisite[1]);
        }
        boolean[] visited = new boolean[param1];
        boolean[] recursionStack = new boolean[param1];
        for (int i = 0; i < param1; i++) {
            if (!visited[i] && hasCycle(i, adj, visited, recursionStack)) {
                return false;
            }
        }
        return true;
    }

    private boolean hasCycle(int node, ArrayList<ArrayList<Integer>> adj, boolean[] visited, boolean[] recursionStack) {
        if (recursionStack[node]) {
            return true;
        }
        if (visited[node]) {
            return false;
        }
        visited[node] = true;
        recursionStack[node] = true;
        for (int neighbor : adj.get(node)) {
            if (hasCycle(neighbor, adj, visited, recursionStack)) {
                return true;
            }
        }
        recursionStack[node] = false;
        return false;
    }
}
