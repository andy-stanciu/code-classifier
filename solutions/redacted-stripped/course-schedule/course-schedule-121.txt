class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<Integer>());
        }
        int[] indegree = new int[param1];
        for (int i = 0; i < prerequisites.length; i++) {
            for (int j = 0; j < prerequisites[i].length - 1; j++) {
                adj.get(prerequisites[i][j + 1]).add(prerequisites[i][j]);
                indegree[prerequisites[i][j]]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0) {
                q.offer(i);
            }
        }
        int count = 0;
        while (!q.isEmpty()) {
            int u = q.poll();
            count++;
            for (int v : adj.get(u)) {
                indegree[v]--;
                if (indegree[v] == 0) {
                    q.add(v);
                }
            }
        }
        if (count == param1) {
            return true;
        }
        return false;
    }
}
