class Solution {

    boolean dfs(int curr, boolean[] vis, boolean[] stack, List<List<Integer>> l) {
        if (stack[curr]) {
            return true;
        }
        if (vis[curr]) {
            return false;
        }
        vis[curr] = true;
        stack[curr] = true;
        for (int n : l.get(curr)) {
            if (dfs(n, vis, stack, l)) {
                return true;
            }
        }
        stack[curr] = false;
        return false;
    }

    public boolean canFinish(int param1, int[][] pre) {
        if (pre.length == 1 || pre.length == 0) {
            return true;
        }
        List<List<Integer>> l = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            l.add(new ArrayList<>());
        }
        for (int i = 0; i < pre.length; i++) {
            l.get(pre[i][1]).add(pre[i][0]);
        }
        boolean[] vis = new boolean[param1];
        boolean[] stack = new boolean[param1];
        for (int i = 0; i < l.size(); i++) {
            if (!vis[i]) {
                if (dfs(i, vis, stack, l)) {
                    return false;
                }
            }
        }
        return true;
    }
}
