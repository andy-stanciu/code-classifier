class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        int[] degree = new int[param1];
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int i = 0; i < param1; i++) {
            graph.put(i, new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            degree[prerequisites[i][0]]++;
            List<Integer> var1 = new ArrayList<>();
            var1.add(prerequisites[i][0]);
            graph.putIfAbsent(prerequisites[i][1], var1).add(prerequisites[i][0]);
        }
        Queue<Integer> queue = new LinkedList<>();
        int count = 0;
        for (int i = 0; i < degree.length; i++) {
            if (degree[i] == 0) {
                queue.offer(i);
                count++;
            }
        }
        while (queue.size() != 0) {
            int var2 = queue.poll();
            List<Integer> pres = graph.get(var2);
            for (Integer pre : pres) {
                degree[pre]--;
                if (degree[pre] == 0) {
                    queue.offer(pre);
                    count++;
                }
            }
        }
        if (count == param1) {
            return true;
        } else {
            return false;
        }
    }
}
