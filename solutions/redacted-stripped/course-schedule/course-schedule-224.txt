class Solution {

    public boolean dfs(int node, int[] vis, int[] dfsVis, Stack<Integer> st, ArrayList<ArrayList<Integer>> adj) {
        vis[node] = 1;
        dfsVis[node] = 1;
        for (int it : adj.get(node)) {
            if (vis[it] == 0) {
                if (dfs(it, vis, dfsVis, st, adj)) {
                    return true;
                }
            } else if (dfsVis[it] == 1) {
                return true;
            }
        }
        dfsVis[node] = 0;
        st.push(node);
        return false;
    }

    public boolean canFinish(int param1, int[][] prerequisites) {
        int[] vis = new int[param1];
        int[] dfsVis = new int[param1];
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        Stack<Integer> st = new Stack<>();
        for (int i = 0; i < param1; i++) {
            if (vis[i] == 0) {
                if (dfs(i, vis, dfsVis, st, adj)) {
                    return false;
                }
            }
        }
        return true;
    }
}
