class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        int[] visited = new int[param1];
        Map<Integer, List<Integer>> adjList = new HashMap<>();
        for (int i = 0; i < param1; i++) {
            adjList.put(i, new ArrayList<>());
        }
        for (int[] edge : prerequisites) {
            adjList.get(edge[1]).add(edge[0]);
        }
        for (int var1 = 0; var1 < param1; var1++) {
            if (visited[var1] == 0 && !dfs(var1, adjList, visited)) {
                return false;
            }
        }
        return true;
    }

    boolean dfs(int var1, Map<Integer, List<Integer>> adjList, int[] visited) {
        if (visited[var1] == 1) {
            return false;
        }
        if (visited[var1] == 2) {
            return true;
        }
        visited[var1] = 1;
        for (int prereq : adjList.get(var1)) {
            if (!dfs(prereq, adjList, visited)) {
                return false;
            }
        }
        visited[var1] = 2;
        return true;
    }
}
