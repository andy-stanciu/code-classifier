class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        int[] inDegree = new int[param1];
        List<Integer>[] adj = new ArrayList[param1];
        for (int i = 0; i < param1; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int[] prerequisite : prerequisites) {
            int var1 = prerequisite[0];
            int pre = prerequisite[1];
            adj[pre].add(var1);
            inDegree[var1]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (inDegree[i] == 0) {
                q.offer(i);
            }
        }
        List<Integer> ans = new ArrayList<>();
        while (!q.isEmpty()) {
            int front = q.poll();
            ans.add(front);
            for (int nbr : adj[front]) {
                inDegree[nbr]--;
                if (inDegree[nbr] == 0) {
                    q.offer(nbr);
                }
            }
        }
        return ans.size() == param1;
    }
}
