class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> var1 = new ArrayList<>();
        int[] visited = new int[param1];
        for (int i = 0; i < param1; i++) {
            var1.add(new ArrayList<>());
        }
        for (int[] p : prerequisites) {
            var1.get(p[1]).add(p[0]);
        }
        for (int i = 0; i < param1; i++) {
            if (visited[i] == 0) {
                if (dfs(i, var1, visited) == false) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean dfs(int curr, ArrayList<ArrayList<Integer>> var1, int[] visited) {
        visited[curr] = 1;
        ArrayList<Integer> var2 = var1.get(curr);
        for (int i = 0; i < var2.size(); i++) {
            int child = var2.get(i);
            if (visited[child] == 1) {
                return false;
            } else if (visited[child] == 0) {
                if (dfs(child, var1, visited) == false) {
                    return false;
                }
            }
        }
        visited[curr] = 2;
        return true;
    }
}
