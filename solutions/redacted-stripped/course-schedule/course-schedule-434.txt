class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            graph.add(new ArrayList<>());
        }
        int[] inDegrees = new int[param1];
        for (int[] prerequisite : prerequisites) {
            int var1 = prerequisite[0];
            int prereq = prerequisite[1];
            graph.get(prereq).add(var1);
            inDegrees[var1]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (inDegrees[i] == 0) {
                queue.offer(i);
            }
        }
        int var2 = 0;
        while (!queue.isEmpty()) {
            int var1 = queue.poll();
            var2++;
            for (int var3 : graph.get(var1)) {
                inDegrees[var3]--;
                if (inDegrees[var3] == 0) {
                    queue.offer(var3);
                }
            }
        }
        return var2 == param1;
    }
}
