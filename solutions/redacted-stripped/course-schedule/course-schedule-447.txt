class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        Map<Integer, List<Integer>> adjList = new HashMap<>();
        for (int i = 0; i < prerequisites.length; i++) {
            int src = prerequisites[i][0];
            int dest = prerequisites[i][1];
            List<Integer> neighbours = adjList.getOrDefault(src, new ArrayList<Integer>());
            neighbours.add(dest);
            adjList.put(src, neighbours);
        }
        int[] visited = new int[param1];
        for (int i = 0; i < param1; i++) {
            if (visited[i] == 0 && detectCycle(adjList, visited, i) == true) {
                return false;
            }
        }
        return true;
    }

    private boolean detectCycle(Map<Integer, List<Integer>> adjList, int[] visited, int curr) {
        if (visited[curr] == -1) {
            return true;
        }
        if (visited[curr] == 1) {
            return false;
        }
        visited[curr] = -1;
        if (adjList.containsKey(curr)) {
            for (int neighbour : adjList.get(curr)) {
                if (detectCycle(adjList, visited, neighbour)) {
                    return true;
                }
            }
        }
        visited[curr] = 1;
        return false;
    }
}
