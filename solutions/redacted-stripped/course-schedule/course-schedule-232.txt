class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        int n = param1;
        ArrayList<Integer>[] graph = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] p : prerequisites) {
            graph[p[1]].add(p[0]);
        }
        int[] vis = new int[n];
        for (int i = 0; i < n; i++) {
            if (vis[i] == 0 && dfs_iscyclic(i, graph, vis)) {
                return false;
            }
        }
        return true;
    }

    private boolean dfs_iscyclic(int node, ArrayList<Integer>[] graph, int[] vis) {
        vis[node] = 1;
        for (int neigh : graph[node]) {
            if (vis[neigh] == 0 && dfs_iscyclic(neigh, graph, vis)) {
                return true;
            }
            if (vis[neigh] == 1) {
                return true;
            }
        }
        vis[node] = 2;
        return false;
    }
}
