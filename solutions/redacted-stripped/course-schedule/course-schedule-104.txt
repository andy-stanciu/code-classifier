class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adjList.add(new ArrayList<>());
        }
        for (int[] prerequisite : prerequisites) {
            adjList.get(prerequisite[1]).add(prerequisite[0]);
        }
        int[] visited = new int[param1];
        for (int i = 0; i < param1; i++) {
            if (hasCycle(i, adjList, visited)) {
                return false;
            }
        }
        return true;
    }

    private boolean hasCycle(int param2, List<List<Integer>> adjList, int[] visited) {
        if (visited[param2] == 1) {
            return true;
        }
        if (visited[param2] == 2) {
            return false;
        }
        visited[param2] = 1;
        for (int neighbor : adjList.get(param2)) {
            if (hasCycle(neighbor, adjList, visited)) {
                return true;
            }
        }
        visited[param2] = 2;
        return false;
    }
}
