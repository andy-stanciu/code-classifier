class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        int var1 = 0;
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < param1; i++) {
            adj.add(new ArrayList<>());
        }
        int[] inDegree = new int[param1];
        for (int[] pre : prerequisites) {
            adj.get(pre[1]).add(pre[0]);
            inDegree[pre[0]]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            if (inDegree[i] == 0)
                queue.add(i);
        }
        while (!queue.isEmpty()) {
            int node = queue.remove();
            var1++;
            if (var1 == param1)
                return true;
            for (int nei : adj.get(node)) {
                inDegree[nei]--;
                if (inDegree[nei] == 0)
                    queue.add(nei);
            }
        }
        return var1 == param1;
    }
}
