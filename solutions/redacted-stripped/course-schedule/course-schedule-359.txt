class Solution {

    public boolean canFinish(int param1, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < param1; i++) {
            graph.add(new ArrayList<Integer>());
        }
        int[] indegree = new int[param1];
        for (int i = 0; i < prerequisites.length; i++) {
            int u = prerequisites[i][1];
            int v = prerequisites[i][0];
            graph.get(u).add(v);
            indegree[v]++;
        }
        ;
        for (int i = 0; i < param1; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        while (!q.isEmpty()) {
            int rem = q.poll();
            ArrayList<Integer> neig = graph.get(rem);
            for (int val : neig) {
                indegree[val]--;
                if (indegree[val] == 0) {
                    q.add(val);
                }
            }
            param1--;
        }
        return param1 == 0;
    }
}
