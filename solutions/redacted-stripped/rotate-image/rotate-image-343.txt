class Solution {

    public void method1(int[][] matrix) {
        if (matrix.length < 2)
            return;
        int method1 = matrix.length / 2;
        int left, right, top, bottom, move;
        move = 0;
        ArrayList<Integer> data;
        while (method1 != 0) {
            left = top = 0 + move;
            right = bottom = (matrix.length - 1) - move;
            data = new ArrayList<Integer>();
            for (int i = left; i <= right; i++) data.add(matrix[top][i]);
            top++;
            for (int i = top; i <= bottom; i++) data.add(matrix[i][right]);
            right--;
            for (int i = right; i >= left; i--) data.add(matrix[bottom][i]);
            bottom--;
            for (int i = bottom; i >= top; i--) data.add(matrix[i][left]);
            left = top = 0 + move;
            right = bottom = matrix.length - 1 - move;
            int k = 0;
            for (int i = top; i <= bottom; i++) {
                matrix[i][right] = data.get(k);
                k++;
            }
            right--;
            for (int i = right; i >= left; i--) {
                matrix[bottom][i] = data.get(k);
                k++;
            }
            bottom--;
            for (int i = bottom; i >= top; i--) {
                matrix[i][left] = data.get(k);
                k++;
            }
            left++;
            for (int i = left; i <= right; i++) {
                matrix[top][i] = data.get(k);
                k++;
            }
            method1--;
            move++;
        }
    }
}
