class Solution {

    public int method1(int[] nums) {
        HashSet<Integer> set = new HashSet<>();
        int count = 0;
        int maxCount = 0;
        for (int i = 0; i < nums.length; i++) {
            set.add(nums[i]);
        }
        for (int key : set) {
            if (!set.contains(key - 1)) {
                while (set.contains(key)) {
                    count++;
                    key = key + 1;
                }
                maxCount = Math.max(count, maxCount);
                count = 0;
            }
        }
        return maxCount;
    }
}

class Solution {

    public int method1(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }
        Arrays.sort(nums);
        int count = 1;
        int maxCount = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != nums[i - 1]) {
                if (nums[i] == nums[i - 1] + 1) {
                    count++;
                } else {
                    maxCount = Math.max(count, maxCount);
                    count = 1;
                }
            }
        }
        return Math.max(maxCount, count);
    }
}
