class Solution {

    ArrayList<Integer> elements;

    int var1;

    TreeNode newRoot;

    void method1(int val) {
        if (newRoot == null) {
            newRoot = new TreeNode(val);
            return;
        }
        TreeNode tmp = newRoot;
        while (true) {
            if (val > tmp.val) {
                if (tmp.right != null) {
                    tmp = tmp.right;
                } else {
                    tmp.right = new TreeNode(val);
                    break;
                }
            } else if (val < tmp.val) {
                if (tmp.left != null) {
                    tmp = tmp.left;
                } else {
                    tmp.left = new TreeNode(val);
                    break;
                }
            }
        }
    }

    void preOrder(TreeNode root) {
        if (root != null) {
            if (root.val != var1) {
                elements.add(Integer.valueOf(root.val));
            }
        } else {
            return;
        }
        if (root.left != null) {
            preOrder(root.left);
        }
        if (root.right != null) {
            preOrder(root.right);
        }
    }

    public TreeNode method2(TreeNode root, int key) {
        elements = new ArrayList<Integer>();
        var1 = key;
        newRoot = null;
        preOrder(root);
        for (Integer var2 : elements) {
            method1(var2.intValue());
        }
        return newRoot;
    }
}
