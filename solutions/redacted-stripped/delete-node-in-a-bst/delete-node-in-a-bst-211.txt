class Solution {

    public TreeNode method1(TreeNode root, int key) {
        return tree(root, key);
    }

    public TreeNode tree(TreeNode root, int key) {
        if (root == null)
            return root;
        if (root.val == key) {
            if (root.left == null && root.right == null)
                return null;
            if (root.left == null && root.right != null) {
                return root.right;
            }
            if (root.right == null && root.left != null) {
                return root.left;
            }
            if (root.left != null && root.right != null) {
                Queue<TreeNode> queue = new LinkedList<>();
                queue.add(root.right);
                int newRoot = Integer.MAX_VALUE;
                List<Integer> list = new ArrayList<>();
                while (!queue.isEmpty()) {
                    TreeNode var1 = queue.remove();
                    if (newRoot > var1.val) {
                        newRoot = var1.val;
                    }
                    list.add(var1.val);
                    if (var1.left != null)
                        queue.add(var1.left);
                    if (var1.right != null)
                        queue.add(var1.right);
                }
                TreeNode var2 = new TreeNode(newRoot);
                for (int i : list) {
                    if (i == newRoot)
                        continue;
                    reconstruct(var2, i);
                }
                var2.left = root.left;
                return var2;
            }
        }
        root.left = tree(root.left, key);
        root.right = tree(root.right, key);
        return root;
    }

    public TreeNode reconstruct(TreeNode root, int val) {
        if (root == null)
            return new TreeNode(val);
        if (root.val > val) {
            root.left = reconstruct(root.left, val);
        } else
            root.right = reconstruct(root.right, val);
        return root;
    }
}
