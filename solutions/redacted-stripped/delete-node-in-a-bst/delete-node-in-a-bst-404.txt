class Solution {

    public TreeNode method1(TreeNode root, int key) {
        if (root == null) {
            return null;
        }
        if (root.val == key && root.left == null && root.right == null) {
            return null;
        } else if (root.val == key && root.left == null) {
            return root.right;
        } else if (root.val == key && root.right == null) {
            return root.left;
        } else if (root.val == key) {
            TreeNode left = root.left;
            TreeNode right = root.right;
            moveTo(right, left);
            return right;
        }
        if (method2(root.left, key)) {
            root.left = method1(root.left, key);
            return root;
        } else if (method2(root.right, key)) {
            root.right = method1(root.right, key);
            return root;
        }
        return root;
    }

    private void moveTo(TreeNode right, TreeNode left) {
        if (right == null) {
            return;
        }
        while (right.left != null) {
            right = right.left;
        }
        right.left = left;
    }

    private boolean method2(TreeNode root, int key) {
        if (root == null) {
            return false;
        }
        if (root.val == key) {
            return true;
        }
        return method2(root.left, key) || method2(root.right, key);
    }
}
