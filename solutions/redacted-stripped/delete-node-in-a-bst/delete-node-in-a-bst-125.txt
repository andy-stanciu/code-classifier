class Solution {

    public TreeNode method1(TreeNode root, int key) {
        if (root == null)
            return null;
        if (key < root.val) {
            root.left = method1(root.left, key);
        } else if (key > root.val) {
            root.right = method1(root.right, key);
        } else {
            if (root.left == null) {
                return root.right;
            } else if (root.right == null) {
                return root.left;
            } else {
                root.val = method2(root.right);
                root.right = method1(root.right, root.val);
            }
        }
        return root;
    }

    private int method2(TreeNode param1) {
        while (param1.left != null) {
            param1 = param1.left;
        }
        return param1.val;
    }

    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null) {
            return ans;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while (!q.isEmpty()) {
            List<Integer> level = new ArrayList<>();
            int levelSize = q.size();
            for (int i = 0; i < levelSize; i++) {
                TreeNode curr = q.poll();
                level.add(curr.val);
                if (curr.left != null) {
                    q.add(curr.left);
                }
                if (curr.right != null) {
                    q.add(curr.right);
                }
            }
            ans.add(level);
        }
        return ans;
    }
}
