class Solution {

    public int canCompleteCircuit(int[] param1, int[] cost) {
        int ans = -1, result = -1;
        Deque<Integer> q = new ArrayDeque<>();
        if (param1.length == 1 && param1[0] == cost[0])
            return 0;
        for (int i = 0; i < param1.length; i++) {
            if (param1[i] - cost[i] > 0)
                q.addLast(i);
        }
        while (q.isEmpty() == false) {
            int start = q.removeFirst();
            ans = param1[start];
            for (int i = start; i < param1.length; i++) {
                ans -= cost[i];
                if (ans < 0)
                    break;
                if (i + 1 < param1.length)
                    ans += param1[i + 1];
                else
                    ans += param1[0];
            }
            if (ans > 0) {
                for (int i = 0; i < start; i++) {
                    ans -= cost[i];
                    if (ans < 0)
                        break;
                    if (i + 1 != start)
                        ans += param1[i + 1];
                }
            }
            if (ans >= 0)
                result = start;
        }
        return result;
    }
}
