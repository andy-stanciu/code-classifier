class Solution {

    public int method1(int[][] obstacleGrid) {
        int rows = obstacleGrid.length;
        int cols = obstacleGrid[0].length;
        if (obstacleGrid[rows - 1][cols - 1] == 1 || obstacleGrid[0][0] == 1)
            return 0;
        if (rows == 1 && cols == 1 && obstacleGrid[0][0] == 0)
            return 1;
        int[][] dp = new int[rows][cols];
        dp[0][0] = 0;
        for (int i = 1; i < rows; i++) {
            int j = 0;
            if (obstacleGrid[i][j] == 0 && dp[i - 1][j] != Integer.MAX_VALUE)
                dp[i][j] = 1;
            else
                dp[i][j] = Integer.MAX_VALUE;
        }
        for (int j = 1; j < cols; j++) {
            int i = 0;
            if (obstacleGrid[i][j] == 0 && dp[i][j - 1] != Integer.MAX_VALUE)
                dp[i][j] = 1;
            else
                dp[i][j] = Integer.MAX_VALUE;
        }
        for (int i = 1; i < rows; i++) {
            for (int j = 1; j < cols; j++) {
                if (obstacleGrid[i][j] == 1)
                    dp[i][j] = Integer.MAX_VALUE;
                else if (dp[i - 1][j] != Integer.MAX_VALUE && dp[i][j - 1] != Integer.MAX_VALUE)
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                else if (dp[i - 1][j] == Integer.MAX_VALUE)
                    dp[i][j] = dp[i][j - 1];
                else
                    dp[i][j] = dp[i - 1][j];
            }
        }
        return (dp[rows - 1][cols - 1] == Integer.MAX_VALUE) ? 0 : dp[rows - 1][cols - 1];
    }
}
