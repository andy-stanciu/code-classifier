class Solution {

    public int method1(int[][] obstacleGrid) {
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        if (n == 0 || m == 0 || obstacleGrid[0][0] == 1)
            return 0;
        int[][] dp = new int[n][m];
        for (int i = 0; i < n; i++) {
            if (obstacleGrid[i][0] == 1)
                break;
            dp[i][0] = 1;
        }
        for (int i = 0; i < m; i++) {
            if (obstacleGrid[0][i] == 1)
                break;
            dp[0][i] = 1;
        }
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                if (obstacleGrid[i][j] == 0) {
                    if (dp[i - 1][j] != 0 && dp[i][j - 1] != 0) {
                        dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                    } else if (dp[i - 1][j] != 0) {
                        dp[i][j] = dp[i - 1][j];
                    } else if (dp[i][j - 1] != 0)
                        dp[i][j] = dp[i][j - 1];
                }
            }
        }
        return dp[n - 1][m - 1];
    }
}
