class Solution {

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        if (obstacleGrid[m - 1][n - 1] == 1 || obstacleGrid[0][0] == 1) {
            return 0;
        }
        obstacleGrid[m - 1][n - 1] = 1;
        for (int j = m - 2; j >= 0; j--) {
            if (obstacleGrid[j][n - 1] != 1) {
                obstacleGrid[j][n - 1] = obstacleGrid[j + 1][n - 1];
            } else {
                obstacleGrid[j][n - 1] = 0;
            }
        }
        for (int i = n - 2; i >= 0; i--) {
            if (obstacleGrid[m - 1][i] != 1) {
                obstacleGrid[m - 1][i] = obstacleGrid[m - 1][i + 1];
            } else {
                obstacleGrid[m - 1][i] = 0;
            }
            for (int j = m - 2; j >= 0; j--) {
                if (obstacleGrid[j][i] != 1) {
                    obstacleGrid[j][i] = obstacleGrid[j + 1][i] + obstacleGrid[j][i + 1];
                } else {
                    obstacleGrid[j][i] = 0;
                }
            }
        }
        return obstacleGrid[0][0];
    }
}
