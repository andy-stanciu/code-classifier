class Solution {

    public int method1(int[][] obstacleGrid, int i, int j, int[][] dp) {
        int rows = obstacleGrid.length;
        int cols = obstacleGrid[0].length;
        if (i >= rows || j >= cols)
            return 0;
        if (obstacleGrid[i][j] == 1)
            return 0;
        if (i == rows - 1 && j == cols - 1)
            return 1;
        if (dp[i][j] != -1)
            return dp[i][j];
        int var1 = method1(obstacleGrid, i, j + 1, dp);
        int var2 = method1(obstacleGrid, i + 1, j, dp);
        return dp[i][j] = var1 + var2;
    }

    public int method2(int[][] obstacleGrid) {
        int rows = obstacleGrid.length;
        int cols = obstacleGrid[0].length;
        if (rows == 0 && cols == 0)
            return 0;
        int[][] dp = new int[rows][cols];
        for (int i = 0; i < rows; i++) {
            Arrays.fill(dp[i], -1);
        }
        return method1(obstacleGrid, 0, 0, dp);
    }
}
