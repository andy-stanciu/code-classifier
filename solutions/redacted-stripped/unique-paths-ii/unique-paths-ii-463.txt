class Solution {

    public int method1(int[][] obst) {
        int[][] dp = new int[obst.length][obst[0].length];
        for (int i = 0; i < obst.length; i++) {
            Arrays.fill(dp[i], -1);
        }
        return find(obst.length - 1, obst[0].length - 1, obst, dp);
    }

    public int find(int m, int n, int[][] obst, int[][] dp) {
        if (m >= 0 && n >= 0 && obst[m][n] == 1) {
            return 0;
        }
        if (m == 0 && n == 0) {
            return 1;
        }
        if (m < 0 || n < 0) {
            return 0;
        }
        if (dp[m][n] != -1) {
            return dp[m][n];
        }
        int down = find(m - 1, n, obst, dp);
        int right = find(m, n - 1, obst, dp);
        return dp[m][n] = down + right;
    }
}
