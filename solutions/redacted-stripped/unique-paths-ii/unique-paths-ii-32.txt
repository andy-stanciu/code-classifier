class Solution {

    public int method1(int[][] obstacleGrid) {
        int row = obstacleGrid.length;
        int col = obstacleGrid[0].length;
        if (obstacleGrid[0][0] == 1) {
            return 0;
        }
        if (obstacleGrid[row - 1][col - 1] == 1) {
            return 0;
        }
        int[][] dp = new int[row][col];
        for (int[] d : dp) {
            Arrays.fill(d, -1);
        }
        return findPath(obstacleGrid, row - 1, col - 1, dp);
    }

    private int findPath(int[][] grid, int row, int col, int[][] dp) {
        if (row == 0 && col == 0) {
            return 1;
        }
        if (row >= 0 && col >= 0 && grid[row][col] == 1) {
            return 0;
        }
        if (row < 0 || col < 0) {
            return 0;
        }
        if (dp[row][col] != -1) {
            return dp[row][col];
        }
        int up = findPath(grid, row - 1, col, dp);
        int left = findPath(grid, row, col - 1, dp);
        return dp[row][col] = up + left;
    }
}
