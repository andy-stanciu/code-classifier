class Solution {

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return helper(0, 0, m, n, obstacleGrid, dp);
    }

    public int helper(int i, int j, int m, int n, int[][] og, int[][] dp) {
        if (i < 0 || j < 0 || i >= m || j >= n || og[i][j] == 1)
            return 0;
        if (dp[i][j] != -1)
            return dp[i][j];
        if (i == (m - 1) && j == (n - 1))
            return 1;
        dp[i][j] = helper(i + 1, j, m, n, og, dp) + helper(i, j + 1, m, n, og, dp);
        return dp[i][j];
    }
}
