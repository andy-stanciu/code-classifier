class Solution {

    public static int path(int i, int j, int[][] dp, int[][] grid) {
        if (i == 0 && j == 0) {
            return 1;
        }
        if (i < 0 || j < 0) {
            return 0;
        }
        if (grid[i][j] == 1) {
            return 0;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        int left = path(i, j - 1, dp, grid);
        int up = path(i - 1, j, dp, grid);
        return dp[i][j] = left + up;
    }

    public int method1(int[][] obstacleGrid) {
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        if (n == 1 && m == 1) {
            if (obstacleGrid[0][0] == 1) {
                return 0;
            } else {
                return 1;
            }
        }
        if (obstacleGrid[0][0] == 1) {
            return 0;
        }
        int[][] dp = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                dp[i][j] = -1;
            }
        }
        return path(n - 1, m - 1, dp, obstacleGrid);
    }
}
