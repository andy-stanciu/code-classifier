class Solution {

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        if (obstacleGrid[m - 1][n - 1] == 1) {
            return 0;
        }
        int[][] sol = new int[m][n];
        sol[m - 1][n - 1] = 1;
        int i, j;
        for (i = m - 1; i >= 0; i--) {
            for (j = n - 1; j >= 0; j--) {
                if (i == m - 1 && j == n - 1) {
                    continue;
                }
                if (obstacleGrid[i][j] == 1) {
                    sol[i][j] = 0;
                    continue;
                }
                int ways = 0;
                if (j + 1 <= n - 1 && obstacleGrid[i][j + 1] == 0) {
                    ways = sol[i][j + 1];
                }
                if (i + 1 <= m - 1 && obstacleGrid[i + 1][j] == 0) {
                    ways += sol[i + 1][j];
                }
                sol[i][j] = ways;
            }
        }
        return sol[0][0];
    }
}
