class Solution {

    int helper(int i, int j, int[][] grid, int[][] dp) {
        if (i == 0 && j == 0)
            return 1;
        if (i < 0 || j < 0)
            return 0;
        if (grid[i][j] == 1)
            return 0;
        if (dp[i][j] != -1)
            return dp[i][j];
        return dp[i][j] = helper(i - 1, j, grid, dp) + helper(i, j - 1, grid, dp);
    }

    public int method1(int[][] obstacleGrid) {
        if (obstacleGrid[0][0] == 1)
            return 0;
        int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
        for (int i = 0; i < obstacleGrid.length; i++) {
            Arrays.fill(dp[i], -1);
        }
        return helper(obstacleGrid.length - 1, obstacleGrid[0].length - 1, obstacleGrid, dp);
    }
}
