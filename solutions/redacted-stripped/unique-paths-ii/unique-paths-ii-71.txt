class Solution {

    int solve(int[][] g, int i, int j) {
        if (i == g.length || j == g[0].length)
            return 0;
        if (g[i][j] == 1)
            return 0;
        if (i == g.length - 1 && j == g[0].length - 1)
            return 1;
        if (dp[i][j] != -1)
            return dp[i][j];
        int a = solve(g, i + 1, j);
        int b = solve(g, i, j + 1);
        return dp[i][j] = a + b;
    }

    int solveMem(int[][] g, int i, int j) {
        if (i == g.length || j == g[0].length)
            return 0;
        if (g[i][j] == 1)
            return 0;
        if (i == g.length - 1 && j == g[0].length - 1)
            return 1;
        if (dp[i][j] != -1)
            return dp[i][j];
        int a = solveMem(g, i + 1, j);
        int b = solveMem(g, i, j + 1);
        return dp[i][j] = a + b;
    }

    int[][] dp;

    int solveTab(int[][] g) {
        int n = g.length, m = g[0].length;
        dp[n - 1][m - 1] = 1 - g[n - 1][m - 1];
        for (int i = n - 1; i >= 0; i--) {
            for (int j = m - 1; j >= 0; j--) {
                if (i == n - 1 && j == m - 1)
                    continue;
                if (g[i][j] == 0)
                    dp[i][j] = dp[i + 1][j] + dp[i][j + 1];
            }
        }
        return dp[0][0];
    }

    int solveTabOptimal(int[][] g) {
        int n = g.length, m = g[0].length;
        int[] curr = new int[m + 1];
        int[] next = new int[m + 1];
        curr[m - 1] = 1 - g[n - 1][m - 1];
        for (int i = n - 1; i >= 0; i--) {
            for (int j = m - 1; j >= 0; j--) {
                if (i == n - 1 && j == m - 1)
                    continue;
                if (g[i][j] == 0)
                    curr[j] = next[j] + curr[j + 1];
            }
            next = curr;
            curr = new int[m + 1];
        }
        return next[0];
    }

    public int method1(int[][] obstacleGrid) {
        return solveTabOptimal(obstacleGrid);
    }
}
