class Solution {

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = -1;
            }
        }
        return helper(obstacleGrid, m - 1, n - 1, dp);
    }

    public int helper(int[][] grid, int row, int col, int[][] dp) {
        if (row < 0 || col < 0)
            return 0;
        if (grid[row][col] == 1)
            return 0;
        if (row == 0 && col == 0)
            return 1;
        if (dp[row][col] != -1)
            return dp[row][col];
        int left = helper(grid, row, col - 1, dp);
        int up = helper(grid, row - 1, col, dp);
        dp[row][col] = left + up;
        return dp[row][col];
    }
}
