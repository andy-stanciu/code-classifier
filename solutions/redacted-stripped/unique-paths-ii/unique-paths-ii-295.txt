class Solution {

    public int help(int[][] ob, int m, int n, int i, int j) {
        int r = 0, d = 0;
        if (ob[0][0] == 1)
            return 0;
        if ((i == m - 1 && j == n - 1) && ob[j][i] == 0)
            return 1;
        if (i < m - 1 && ob[j][i + 1] != 1) {
            r = help(ob, m, n, i + 1, j);
        }
        if (j < n - 1 && ob[j + 1][i] != 1) {
            d = help(ob, m, n, i, j + 1);
        }
        return r + d;
    }

    public int method1(int[][] ob) {
        int n = ob.length, m = ob[0].length;
        if (ob[0][0] == 1)
            return 0;
        int[][] dp = new int[n][m];
        if (ob[n - 1][m - 1] == 0)
            dp[n - 1][m - 1] = 1;
        for (int j = n - 1; j >= 0; j--) {
            for (int i = m - 1; i >= 0; i--) {
                if (i < m - 1 && ob[j][i + 1] != 1)
                    dp[j][i] += dp[j][i + 1];
                if (j < n - 1 && ob[j + 1][i] != 1)
                    dp[j][i] += dp[j + 1][i];
            }
        }
        return dp[0][0];
    }
}
