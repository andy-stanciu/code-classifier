class Solution {

    public static int f(int i, int j, int[][] a, int[][] dp) {
        if (i >= 0 && j >= 0 && a[i][j] == 1)
            return 0;
        if (i < 0 || j < 0)
            return 0;
        if (i == 0 && j == 0)
            return 1;
        if (dp[i][j] != -1)
            return dp[i][j];
        int up = f(i - 1, j, a, dp);
        int left = f(i, j - 1, a, dp);
        return dp[i][j] = (int) ((up + left) % (2 * 10e9));
    }

    public int method1(int[][] a) {
        int n = a.length, m = a[0].length;
        int[][] dp = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (a[i][j] == 1)
                    dp[i][j] = 0;
                else if (i == 0 && j == 0)
                    dp[i][j] = 1;
                else {
                    int up = 0, left = 0;
                    if (i > 0)
                        up = dp[i - 1][j];
                    if (j > 0)
                        left = dp[i][j - 1];
                    dp[i][j] = (int) ((up + left) % (2 * 10e9));
                }
            }
        }
        return dp[n - 1][m - 1];
    }
}
