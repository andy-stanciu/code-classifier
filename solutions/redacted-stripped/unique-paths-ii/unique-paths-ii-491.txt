class Solution {

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n + 1];
        for (int[] a : dp) {
            for (int i = 0; i < a.length; i++) {
                a[i] = -1;
            }
        }
        return f(obstacleGrid, m - 1, n - 1, dp);
    }

    public static int f(int[][] obstacleGrid, int i, int j, int[][] dp) {
        if ((i == 0 && j == 0) && obstacleGrid[i][j] != 1) {
            return 1;
        }
        if ((i == 0 && j == 0) && obstacleGrid[i][j] == 1) {
            return 0;
        }
        if (i < 0 || j < 0) {
            return 0;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        if (obstacleGrid[i][j] == 1) {
            return 0;
        }
        int up = f(obstacleGrid, i - 1, j, dp);
        int left = f(obstacleGrid, i, j - 1, dp);
        return dp[i][j] = up + left;
    }
}
