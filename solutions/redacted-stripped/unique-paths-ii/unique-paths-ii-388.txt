class Solution {

    public int method1(int[][] obstacleGrid) {
        if (obstacleGrid[0][0] == 1)
            return 0;
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        if (obstacleGrid[n - 1][m - 1] == 1)
            return 0;
        int[][] dp = new int[n][m];
        for (int i = m - 1; i >= 0; i--) {
            if (obstacleGrid[n - 1][i] == 0) {
                dp[n - 1][i] = 1;
            } else {
                break;
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            if (obstacleGrid[i][m - 1] == 0) {
                dp[i][m - 1] = 1;
            } else {
                break;
            }
        }
        for (int i = n - 2; i >= 0; i--) {
            for (int j = m - 2; j >= 0; j--) {
                if (obstacleGrid[i][j] == 1) {
                    dp[i][j] = 0;
                } else {
                    dp[i][j] = dp[i + 1][j] + dp[i][j + 1];
                }
            }
        }
        return dp[0][0];
    }
}
