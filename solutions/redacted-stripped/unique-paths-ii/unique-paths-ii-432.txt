class Solution {

    public static int memoization(int[][] arr, int row, int col, int[][] dp) {
        if (row == 0 && col == 0)
            return 1;
        if (row < 0 || col < 0)
            return 0;
        if (arr[row][col] == 1)
            return 0;
        if (dp[row][col] != -1)
            return dp[row][col];
        int up = memoization(arr, row - 1, col, dp);
        int left = memoization(arr, row, col - 1, dp);
        return dp[row][col] = up + left;
    }

    public int method1(int[][] arr) {
        int m = arr.length;
        int n = arr[0].length;
        if (arr[0][0] == 1 || arr[m - 1][n - 1] == 1)
            return 0;
        int[][] dp = new int[arr.length][arr[0].length];
        for (int i = 0; i < dp.length; i++) {
            Arrays.fill(dp[i], -1);
        }
        return memoization(arr, arr.length - 1, arr[0].length - 1, dp);
    }
}
