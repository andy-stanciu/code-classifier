class Solution {

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length, n = obstacleGrid[0].length;
        int[][] dp = new int[m + 1][n + 1];
        for (int[] i : dp) {
            Arrays.fill(i, -1);
        }
        if (obstacleGrid[m - 1][n - 1] == 1) {
            return 0;
        }
        return f(obstacleGrid, 0, 0, m - 1, n - 1, dp);
    }

    int f(int[][] obstacleGrid, int row, int col, int m, int n, int[][] dp) {
        if (row == m && col == n) {
            return 1;
        }
        if (row > m || col > n) {
            return 0;
        }
        if (obstacleGrid[row][col] == 1) {
            return 0;
        }
        if (dp[row][col] != -1) {
            return dp[row][col];
        }
        return dp[row][col] = f(obstacleGrid, row + 1, col, m, n, dp) + f(obstacleGrid, row, col + 1, m, n, dp);
    }
}
