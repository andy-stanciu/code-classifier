class Solution {

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length, n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return solve(obstacleGrid, m - 1, n - 1, dp);
    }

    public int solve(int[][] obstacleGrid, int i, int j, int[][] dp) {
        if (obstacleGrid[i][j] == 1) {
            dp[i][j] = 0;
            return 0;
        }
        if (i == 0 && j == 0) {
            dp[i][j] = 1;
            return 1;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        if (i == 0) {
            dp[i][j] = solve(obstacleGrid, i, j - 1, dp);
        } else if (j == 0) {
            dp[i][j] = solve(obstacleGrid, i - 1, j, dp);
        } else {
            dp[i][j] = solve(obstacleGrid, i - 1, j, dp) + solve(obstacleGrid, i, j - 1, dp);
        }
        return dp[i][j];
    }
}
