class Solution {

    int[][] dp;

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        if (obstacleGrid[m - 1][n - 1] == 1)
            return 0;
        this.dp = new int[m][n];
        return helper(0, 0, m, n, obstacleGrid);
    }

    public int helper(int r, int c, int m, int n, int[][] obstacleGrid) {
        if (r == m || c == n)
            return 0;
        if (r == m - 1 && c == n - 1)
            return 1;
        if (obstacleGrid[r][c] == 1)
            return 0;
        if (dp[r][c] != 0)
            return dp[r][c];
        dp[r][c] = helper(r + 1, c, m, n, obstacleGrid) + helper(r, c + 1, m, n, obstacleGrid);
        return dp[r][c];
    }
}
