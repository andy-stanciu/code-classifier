class Solution {

    public int method1(int[][] arr) {
        int m = arr.length;
        int n = arr[0].length;
        if (arr[m - 1][n - 1] == 1 || arr[0][0] == 1)
            return 0;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (arr[i][j] != 1)
                    dp[i][j] = -1;
            }
        }
        return memoization(0, 0, arr, m - 1, n - 1, dp);
    }

    public int memoization(int row, int col, int[][] arr, int m, int n, int[][] dp) {
        if (row == m && col == n)
            return 1;
        if (arr[row][col] == 1)
            return 0;
        if (dp[row][col] != -1)
            return dp[row][col];
        if (col == n)
            return dp[row][col] = memoization(row + 1, col, arr, m, n, dp);
        if (row == m)
            return dp[row][col] = memoization(row, col + 1, arr, m, n, dp);
        else
            return dp[row][col] = memoization(row + 1, col, arr, m, n, dp) + memoization(row, col + 1, arr, m, n, dp);
    }
}
