class Solution {

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return fun(m - 1, n - 1, dp, obstacleGrid);
    }

    public int fun(int m, int n, int[][] dp, int[][] arr) {
        if (m < 0 || n < 0) {
            return 0;
        }
        if (arr[m][n] == 1) {
            return 0;
        }
        if (dp[m][n] != -1) {
            return dp[m][n];
        }
        if (m == 0 && n == 0) {
            return 1;
        }
        int down = fun(m - 1, n, dp, arr);
        int right = fun(m, n - 1, dp, arr);
        return dp[m][n] = down + right;
    }
}
