class Solution {

    public int method1(int[][] obstacleGrid) {
        if (obstacleGrid.length == 0) {
            return 0;
        }
        int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
        for (int i = 0; i < dp.length; i++) {
            for (int j = 0; j < dp[0].length; j++) {
                dp[i][j] = -1;
            }
        }
        return recur(obstacleGrid, 0, 0, dp);
    }

    public int recur(int[][] grid, int row, int col, int[][] dp) {
        if (row >= grid.length || col >= grid[0].length) {
            return 0;
        }
        if (grid[row][col] == 1) {
            return 0;
        }
        if (row == grid.length - 1 && col == grid[0].length - 1) {
            return 1;
        }
        if (dp[row][col] != -1) {
            return dp[row][col];
        }
        int down = recur(grid, row + 1, col, dp);
        int right = recur(grid, row, col + 1, dp);
        dp[row][col] = down + right;
        return dp[row][col];
    }
}
