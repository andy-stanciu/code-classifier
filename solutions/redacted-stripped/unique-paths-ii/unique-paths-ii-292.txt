class Solution {

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        if (obstacleGrid[0][0] == 1)
            return 0;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (obstacleGrid[i][j] == 1) {
                    dp[i][j] = 0;
                } else {
                    dp[i][j] = -1;
                }
            }
        }
        return f(m - 1, n - 1, dp);
    }

    public int f(int m, int n, int[][] dp) {
        if (m == 0 && n == 0) {
            return 1;
        }
        if (m < 0 || n < 0) {
            return 0;
        }
        if (dp[m][n] != -1)
            return dp[m][n];
        int up = f(m - 1, n, dp);
        int left = f(m, n - 1, dp);
        return dp[m][n] = up + left;
    }
}
