class Solution {

    public static int ways(int[][] M, int m, int n, int i, int j, int[][] dp) {
        if (i < m && j < n && M[i][j] == 1) {
            return 0;
        }
        if (i == m - 1 && j == n - 1) {
            return 1;
        }
        if (i > m - 1 || j > n - 1) {
            return 0;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        int Dir1 = ways(M, m, n, i + 1, j, dp);
        int Dir2 = ways(M, m, n, i, j + 1, dp);
        return dp[i][j] = Dir1 + Dir2;
    }

    public int method1(int[][] o) {
        int[][] dp = new int[o.length + 1][o[0].length + 1];
        for (int i = 0; i < dp.length; i++) {
            Arrays.fill(dp[i], -1);
        }
        return ways(o, o.length, o[0].length, 0, 0, dp);
    }
}
