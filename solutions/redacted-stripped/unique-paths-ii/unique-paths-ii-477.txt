class Solution {

    int[][] dirs = new int[][] { { 0, 1 }, { 1, 0 } };

    public int method1(int[][] obstacleGrid) {
        int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
        for (int i = 0; i < obstacleGrid.length; i++) {
            for (int j = 0; j < obstacleGrid[0].length; j++) {
                dp[i][j] = -1;
            }
        }
        return dfs(0, 0, obstacleGrid, dp);
    }

    public int dfs(int i, int j, int[][] obstacleGrid, int[][] dp) {
        if (obstacleGrid[i][j] == 1) {
            return 0;
        }
        if (i == obstacleGrid.length - 1 && j == obstacleGrid[0].length - 1) {
            return 1;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        int num = 0;
        for (int k = 0; k < 2; k++) {
            int nextI = dirs[k][0] + i;
            int nextJ = dirs[k][1] + j;
            if (nextI < 0 || nextJ < 0 || nextI > obstacleGrid.length - 1 || nextJ > obstacleGrid[0].length - 1 || obstacleGrid[nextI][nextJ] == 1) {
                continue;
            }
            num += dfs(nextI, nextJ, obstacleGrid, dp);
        }
        dp[i][j] = num;
        return num;
    }
}
