class Solution {

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) for (int j = 0; j < n; j++) dp[i][j] = -1;
        int res = method2(m - 1, n - 1, obstacleGrid, dp);
        return res;
    }

    public int method2(int m, int n, int[][] obstacleGrid, int[][] dp) {
        if (m == 0 && n == 0 && obstacleGrid[n][m] != 1)
            return 1;
        if (m < 0 || n < 0)
            return 0;
        if (obstacleGrid[m][n] == 1)
            return 0;
        if (dp[m][n] != -1)
            return dp[m][n];
        int left = method2(m, n - 1, obstacleGrid, dp);
        int up = method2(m - 1, n, obstacleGrid, dp);
        return dp[m][n] = left + up;
    }
}
