class Solution {

    int method1(int i, int j, int[][] grid, int[][] dp) {
        if (i == 0 && j == 0)
            return 1;
        if (grid[i][j] == 1)
            return 0;
        if (dp[i][j] != -1)
            return dp[i][j];
        int downWays = (i - 1) >= 0 ? method1(i - 1, j, grid, dp) : 0;
        int rightWays = (j - 1) >= 0 ? method1(i, j - 1, grid, dp) : 0;
        dp[i][j] = downWays + rightWays;
        return dp[i][j];
    }

    public int method2(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        if (grid[n - 1][m - 1] == 1 || grid[0][0] == 1)
            return 0;
        int[][] dp = new int[n][m];
        for (int[] I : dp) Arrays.fill(I, -1);
        return method1(n - 1, m - 1, grid, dp);
    }
}
