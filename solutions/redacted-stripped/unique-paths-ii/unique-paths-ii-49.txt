class Solution {

    int count = 0;

    public int method1(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        int[][] dp = new int[m][n];
        if (grid[0][0] == 1 || grid[m - 1][n - 1] == 1)
            return 0;
        dp[m - 1][n - 1] = 1;
        rb(grid, visited, m, n, 0, 0, dp);
        return dp[0][0];
    }

    private int rb(int[][] grid, boolean[][] visited, int m, int n, int i, int j, int[][] dp) {
        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == 1 || visited[i][j])
            return 0;
        if (i == m - 1 && j == n - 1) {
            return dp[i][j];
        }
        if (dp[i][j] != 0)
            return dp[i][j];
        visited[i][j] = true;
        int right = rb(grid, visited, m, n, i, j + 1, dp);
        int bottom = rb(grid, visited, m, n, i + 1, j, dp);
        visited[i][j] = false;
        dp[i][j] = right + bottom;
        return dp[i][j];
    }
}
