class Solution {

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        if (m == 0 || n == 0) {
            return 0;
        }
        if (m == 1 && n == 1) {
            if (obstacleGrid[0][0] == 1) {
                return 0;
            } else {
                return 1;
            }
        }
        int[][] dp = new int[m][n];
        dp[0][0] = 0;
        int Hflag = 0;
        for (int i = 1; i < m; i++) {
            if (obstacleGrid[i - 1][0] == 1 || obstacleGrid[i][0] == 1) {
                Hflag = 1;
            }
            if (Hflag == 0) {
                dp[i][0] = 1;
            } else {
                dp[i][0] = 0;
            }
        }
        int Vflag = 0;
        for (int i = 1; i < n; i++) {
            if (obstacleGrid[0][i - 1] == 1 || obstacleGrid[0][i] == 1) {
                Vflag = 1;
            }
            if (Vflag == 0) {
                dp[0][i] = 1;
            } else {
                dp[0][i] = 0;
            }
        }
        if (m == 1) {
            return dp[0][n - 1];
        }
        if (n == 1) {
            return dp[m - 1][0];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = obstacleGrid[i][j] == 1 ? 0 : ((obstacleGrid[i][j - 1] != 1 ? dp[i][j - 1] : 0) + (obstacleGrid[i - 1][j] != 1 ? dp[i - 1][j] : 0));
                System.out.print(dp[i][j] + " ");
            }
            System.out.println();
        }
        return dp[m - 1][n - 1];
    }
}
