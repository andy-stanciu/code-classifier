class Solution {

    public int path(int[][] obstacleGrid, int m, int n, int[][] dp) {
        if (m < 0 || n < 0) {
            return 0;
        }
        if (m == 0 && n == 0) {
            if (obstacleGrid[m][n] == 1) {
                return 0;
            } else {
                return 1;
            }
        }
        if (dp[m][n] != -1) {
            return dp[m][n];
        }
        if (obstacleGrid[m][n] == 1) {
            dp[m][n] = 0;
        } else {
            dp[m][n] = path(obstacleGrid, m - 1, n, dp) + path(obstacleGrid, m, n - 1, dp);
        }
        return dp[m][n];
    }

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m + 1][n + 1];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = -1;
            }
        }
        int ans = path(obstacleGrid, m - 1, n - 1, dp);
        return ans;
    }
}
