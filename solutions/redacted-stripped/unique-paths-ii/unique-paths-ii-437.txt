public class Solution {

    int[][] dp;

    public int method1(int[][] obstacleGrid) {
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        dp = new int[n][m];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        int ans = method2(n - 1, m - 1, dp, obstacleGrid);
        return ans;
    }

    private int method2(int i, int j, int[][] dp, int[][] maze) {
        if (i >= 0 && j >= 0 && maze[i][j] == 1) {
            return 0;
        }
        if (i == 0 && j == 0) {
            return 1;
        }
        if (i < 0 || j < 0) {
            return 0;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        int up = method2(i - 1, j, dp, maze);
        int left = method2(i, j - 1, dp, maze);
        return dp[i][j] = up + left;
    }
}
