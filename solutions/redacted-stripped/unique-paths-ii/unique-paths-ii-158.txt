class Solution {

    public int method1(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m + 1][n + 1];
        for (int i = 0; i < m + 1; i++) {
            for (int j = 0; j < n + 1; j++) {
                dp[i][j] = -1;
            }
        }
        return find(m - 1, n - 1, dp, obstacleGrid);
    }

    public int find(int m, int n, int[][] dp, int[][] a) {
        if (m >= 0 && n >= 0 && a[m][n] == 1)
            return 0;
        if (m == 0 && n == 0)
            return 1;
        if (m < 0 || n < 0)
            return 0;
        if (dp[m][n] != -1)
            return dp[m][n];
        int up = find(m - 1, n, dp, a);
        int right = find(m, n - 1, dp, a);
        return dp[m][n] = up + right;
    }

    public int find(int m, int n, int[][] a) {
        int[][] dp = new int[m][n];
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                if (a[m][n] == 1)
                    dp[i][j] = 0;
                else if (i == 0 && j == 0) {
                    dp[i][j] = 1;
                } else {
                    int up = 0, right = 0;
                    if (i > 0)
                        up = dp[i - 1][j];
                    if (j > 0)
                        right = dp[i][j - 1];
                    dp[i][j] = up + right;
                }
            }
        }
        return dp[m - 1][n - 1];
    }
}
