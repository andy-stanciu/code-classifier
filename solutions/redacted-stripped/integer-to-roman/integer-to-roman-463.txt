class Solution {

    private static Map<Integer, String> map = new TreeMap<>();

    private static void createMap() {
        map.put(1, "I");
        map.put(4, "IV");
        map.put(5, "V");
        map.put(9, "IX");
        map.put(10, "X");
        map.put(40, "XL");
        map.put(50, "L");
        map.put(90, "XC");
        map.put(100, "C");
        map.put(400, "CD");
        map.put(500, "D");
        map.put(900, "CM");
        map.put(1000, "M");
    }

    public static int findfloor(int n, List<Integer> list) {
        int ans = -1;
        int beg = 0, end = list.size() - 1;
        while (beg <= end) {
            int mid = (beg + end) / 2;
            if (list.get(mid) <= n) {
                ans = list.get(mid);
                beg = mid + 1;
            } else
                end = mid - 1;
        }
        return ans;
    }

    public String method1(int n) {
        createMap();
        List<Integer> standard = List.of(1, 5, 10, 50, 100, 500, 1000);
        List<Integer> other = List.of(4, 9, 40, 90, 400, 900);
        String ans = "";
        while (n > 0) {
            int floor = Math.max(findfloor(n, standard), findfloor(n, other));
            ans += map.get(floor);
            n -= floor;
        }
        return ans;
    }
}
