class Solution {

    public int strStr(String haystack, String needle) {
        int M = needle.length();
        int N = haystack.length();
        if (M > N)
            return -1;
        int i, j;
        int p = 0;
        int t = 0;
        int h = 1;
        int d = 256;
        int q = 31;
        char[] pat = needle.toCharArray();
        char[] txt = haystack.toCharArray();
        for (i = 0; i < M - 1; i++) h = (h * d) % q;
        for (i = 0; i < M; i++) {
            p = (d * p + pat[i]) % q;
            t = (d * t + txt[i]) % q;
        }
        for (i = 0; i <= N - M; i++) {
            if (p == t) {
                for (j = 0; j < M; j++) {
                    if (txt[i + j] != pat[j])
                        break;
                }
                if (j == M)
                    return i;
            }
            if (i < N - M) {
                t = (d * (t - txt[i] * h) + txt[i + M]) % q;
                if (t < 0)
                    t = (t + q);
            }
        }
        return -1;
    }
}
