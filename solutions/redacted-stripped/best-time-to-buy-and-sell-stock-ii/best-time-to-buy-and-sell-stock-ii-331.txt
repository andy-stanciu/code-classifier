class Solution {

    public int maxProfit(int[] prices) {
        return bySpaceOpt(prices);
    }

    public int byMemo(int[] prices, int[][] dp, int param1, int ind) {
        if (ind == prices.length)
            return 0;
        if (dp[ind][param1] != -1)
            return dp[ind][param1];
        int profit = 0;
        if (param1 == 0) {
            profit = Math.max(0 + byMemo(prices, dp, 0, ind + 1), -prices[ind] + byMemo(prices, dp, 1, ind + 1));
        }
        if (param1 == 1) {
            profit = Math.max(0 + byMemo(prices, dp, 1, ind + 1), prices[ind] + byMemo(prices, dp, 0, ind + 1));
        }
        return dp[ind][param1] = profit;
    }

    public int byTab(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n + 1][2];
        for (int ind = n - 1; ind >= 0; ind--) {
            for (int param1 = 0; param1 <= 1; param1++) {
                int profit = 0;
                if (param1 == 0) {
                    profit = Math.max(0 + dp[ind + 1][0], -prices[ind] + dp[ind + 1][1]);
                }
                if (param1 == 1) {
                    profit = Math.max(0 + dp[ind + 1][1], prices[ind] + dp[ind + 1][0]);
                }
                dp[ind][param1] = profit;
            }
        }
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= 1; j++) {
                System.out.print(dp[i][j] + " ");
            }
            System.out.println();
        }
        return dp[0][0];
    }

    public int bySpaceOpt(int[] prices) {
        int n = prices.length;
        int prev1 = 0;
        int prev2 = 0;
        int curr1 = 0, curr2 = 0;
        for (int ind = n - 1; ind >= 0; ind--) {
            curr1 = Math.max(prev1, -prices[ind] + prev2);
            curr2 = Math.max(prev2, prices[ind] + prev1);
            prev1 = curr1;
            prev2 = curr2;
        }
        return curr1;
    }
}
