class Solution {

    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dpMemo = new int[n][2];
        for (int[] r : dpMemo) Arrays.fill(r, -1);
        return method1(prices, 0, dpMemo, 1);
    }

    public int method1(int[] prices, int index, int[][] dpMemo, int param1) {
        if (index == prices.length)
            return 0;
        if (dpMemo[index][param1] != -1) {
            return dpMemo[index][param1];
        }
        int maxProfit = 0;
        if (param1 == 1) {
            int var2 = -prices[index] + method1(prices, index + 1, dpMemo, 0);
            int var3 = 0 + method1(prices, index + 1, dpMemo, 1);
            maxProfit = Math.max(var2, var3);
        } else {
            int var1 = prices[index] + method1(prices, index + 1, dpMemo, 1);
            int profitWhenSkipAtIndex = 0 + method1(prices, index + 1, dpMemo, 0);
            maxProfit = Math.max(var1, profitWhenSkipAtIndex);
        }
        dpMemo[index][param1] = maxProfit;
        return dpMemo[index][param1];
    }
}
