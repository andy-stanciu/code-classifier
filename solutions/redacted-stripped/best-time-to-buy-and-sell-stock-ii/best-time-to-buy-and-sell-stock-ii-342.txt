class Solution {

    public int maxProfit(int[] prices) {
        int len = prices.length;
        int[][] dp = new int[len][2];
        for (int i = 0; i < len; i++) {
            dp[i][0] = dp[i][1] = -1;
        }
        return f(0, 1, prices, len, dp);
    }

    int f(int idx, int param1, int[] prices, int n, int[][] dp) {
        if (idx == n)
            return 0;
        if (dp[idx][param1] != -1)
            return dp[idx][param1];
        if (param1 == 1) {
            return dp[idx][param1] = Math.max((-prices[idx] + f(idx + 1, 0, prices, n, dp)), f(idx + 1, 1, prices, n, dp));
        } else {
            return dp[idx][param1] = Math.max((prices[idx] + f(idx + 1, 1, prices, n, dp)), f(idx + 1, 0, prices, n, dp));
        }
    }
}
