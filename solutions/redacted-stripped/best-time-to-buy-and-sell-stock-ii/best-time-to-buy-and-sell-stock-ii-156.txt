class Solution {

    int solveRec(int index, int param1, int[] prices) {
        if (index == prices.length) {
            return 0;
        }
        int profit = 0;
        if (param1 == 1) {
            int var2 = -prices[index] + solveRec(index + 1, 0, prices);
            int forskip = solveRec(index + 1, 1, prices);
            profit = Math.max(var2, forskip);
        } else {
            int var1 = prices[index] + solveRec(index + 1, 1, prices);
            int forskip = solveRec(index + 1, 0, prices);
            profit = Math.max(var1, forskip);
        }
        return profit;
    }

    int solveMem(int index, int param1, int[] prices, int[][] dp) {
        if (index == prices.length) {
            return 0;
        }
        if (dp[index][param1] != -1) {
            return dp[index][param1];
        }
        int profit = 0;
        if (param1 == 1) {
            int var2 = -prices[index] + solveMem(index + 1, 0, prices, dp);
            int forskip = solveMem(index + 1, 1, prices, dp);
            profit = Math.max(var2, forskip);
        } else {
            int var1 = prices[index] + solveMem(index + 1, 1, prices, dp);
            int forskip = solveMem(index + 1, 0, prices, dp);
            profit = Math.max(var1, forskip);
        }
        return dp[index][param1] = profit;
    }

    int solveTab(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n + 1][2];
        for (int[] row : dp) {
            Arrays.fill(row, 0);
        }
        for (int index = n - 1; index >= 0; index--) {
            for (int param1 = 0; param1 <= 1; param1++) {
                int profit = 0;
                if (param1 == 1) {
                    int var2 = -prices[index] + dp[index + 1][0];
                    int forskip = dp[index + 1][1];
                    profit = Math.max(var2, forskip);
                } else {
                    int var1 = prices[index] + dp[index + 1][1];
                    int forskip = dp[index + 1][0];
                    profit = Math.max(var1, forskip);
                }
                dp[index][param1] = profit;
            }
        }
        return dp[0][1];
    }

    int spaceOptimize(int[] prices) {
        int n = prices.length;
        int[] curr = new int[n + 1];
        int[] next = new int[n + 1];
        for (int index = n - 1; index >= 0; index--) {
            for (int param1 = 0; param1 <= 1; param1++) {
                int profit = 0;
                if (param1 == 1) {
                    int var2 = -prices[index] + next[0];
                    int forskip = next[1];
                    profit = Math.max(var2, forskip);
                } else {
                    int var1 = prices[index] + next[1];
                    int forskip = next[0];
                    profit = Math.max(var1, forskip);
                }
                curr[param1] = profit;
            }
            next = curr.clone();
        }
        return next[1];
    }

    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n][2];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return spaceOptimize(prices);
    }
}
