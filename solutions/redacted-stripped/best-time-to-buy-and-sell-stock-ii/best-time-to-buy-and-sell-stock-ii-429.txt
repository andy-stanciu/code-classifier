class Solution {

    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n][2];
        for (int[] x : dp) {
            Arrays.fill(x, -1);
        }
        return helper(0, 1, n, prices, dp);
    }

    public int helper(int ind, int param1, int n, int[] prices, int[][] dp) {
        if (ind == n) {
            return 0;
        }
        if (dp[ind][param1] != -1) {
            return dp[ind][param1];
        }
        int profit = 0;
        if (param1 == 1) {
            profit = Math.max(-prices[ind] + helper(ind + 1, 0, n, prices, dp), helper(ind + 1, 1, n, prices, dp));
        } else {
            profit = Math.max(prices[ind] + helper(ind + 1, 1, n, prices, dp), helper(ind + 1, 0, n, prices, dp));
        }
        dp[ind][param1] = profit;
        return profit;
    }
}
