public class Solution {

    public int method1(int[] nums, int k) {
        return quickSelect(nums, 0, nums.length - 1, nums.length - k);
    }

    private int quickSelect(int[] nums, int left, int right, int k) {
        if (left == right)
            return nums[left];
        int var1 = new Random().nextInt(right - left + 1) + left;
        var1 = partition(nums, left, right, var1);
        if (var1 == k)
            return nums[k];
        else if (var1 < k)
            return quickSelect(nums, var1 + 1, right, k);
        else
            return quickSelect(nums, left, var1 - 1, k);
    }

    private int partition(int[] nums, int left, int right, int var1) {
        int pivot = nums[var1];
        swap(nums, var1, right);
        var1 = left;
        for (int i = left; i < right; i++) {
            if (nums[i] < pivot) {
                swap(nums, i, var1);
                var1++;
            }
        }
        swap(nums, var1, right);
        return var1;
    }

    private void swap(int[] nums, int x, int y) {
        int temp = nums[x];
        nums[x] = nums[y];
        nums[y] = temp;
    }
}
