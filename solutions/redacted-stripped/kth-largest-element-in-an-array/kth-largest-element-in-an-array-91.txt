class Solution {

    public int method1(int[] nums, int k) {
        k = nums.length - k;
        int var1 = quickSelect(nums, 0, nums.length - 1, k);
        return var1;
    }

    public int quickSelect(int[] nums, int lo, int hi, int k) {
        int pivot = nums[hi];
        int var2 = partion(nums, lo, hi, pivot);
        if (var2 == k) {
            return nums[var2];
        } else if (var2 < k) {
            return quickSelect(nums, var2 + 1, hi, k);
        } else {
            return quickSelect(nums, lo, var2 - 1, k);
        }
    }

    public int partion(int[] nums, int lo, int hi, int pivot) {
        int i = lo, j = lo;
        while (i <= hi) {
            if (nums[i] > pivot) {
                i++;
            } else {
                swap(nums, i, j);
                i++;
                j++;
            }
        }
        return j - 1;
    }

    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
