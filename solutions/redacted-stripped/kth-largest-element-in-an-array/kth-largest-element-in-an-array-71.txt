class Solution {

    public int method1(int[] nums, int k) {
        quicksort(nums, 0, nums.length - 1, k);
        return nums[nums.length - k];
    }

    private static void quicksort(int[] nums, int low, int high, int target) {
        if (low >= high) {
            return;
        }
        int left = low;
        int right = high;
        int var1 = new Random().nextInt(high - low) + low;
        int pivot = nums[var1];
        swap(nums, var1, high);
        method2(nums, low, high, target, left, right, pivot);
    }

    private static void method2(int[] nums, int low, int high, int target, int left, int right, int pivot) {
        while (left < right) {
            while (left < right && nums[left] <= pivot) {
                left++;
            }
            while (left < right && nums[right] >= pivot) {
                right--;
            }
            swap(nums, left, right);
        }
        swap(nums, left, high);
        if (left == nums.length - target) {
            return;
        } else if (left > nums.length - target) {
            quicksort(nums, low, left - 1, target);
        } else {
            quicksort(nums, left + 1, high, target);
        }
    }

    private static void swap(int[] nums, int left, int right) {
        int temp = nums[left];
        nums[left] = nums[right];
        nums[right] = temp;
    }
}
