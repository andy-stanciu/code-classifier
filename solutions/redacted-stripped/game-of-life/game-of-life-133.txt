class Solution {

    public void method1(int[][] board) {
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int l = 0;
                if (i > 0) {
                    if (board[i - 1][j] == 1 || board[i - 1][j] == -1)
                        l++;
                    if ((j < n - 1) && (board[i - 1][j + 1] == 1 || board[i - 1][j + 1] == -1))
                        l++;
                    if ((j > 0) && (board[i - 1][j - 1] == 1 || board[i - 1][j - 1] == -1))
                        l++;
                }
                if (i < m - 1) {
                    if (board[i + 1][j] == 1 || board[i + 1][j] == -1)
                        l++;
                    if ((j < n - 1) && (board[i + 1][j + 1] == 1 || board[i + 1][j + 1] == -1))
                        l++;
                    if ((j > 0) && (board[i + 1][j - 1] == 1 || board[i + 1][j - 1] == -1))
                        l++;
                }
                if (j > 0) {
                    if (board[i][j - 1] == 1 || board[i][j - 1] == -1)
                        l++;
                }
                if (j < n - 1) {
                    if (board[i][j + 1] == 1 || board[i][j + 1] == -1)
                        l++;
                }
                if ((board[i][j] == 0 || board[i][j] == 2) && l == 3) {
                    board[i][j] = 2;
                } else if ((board[i][j] == 1 || board[i][j] == -1) && (l != 2 && l != 3)) {
                    board[i][j] = -1;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 2 || board[i][j] == 1)
                    board[i][j] = 1;
                if (board[i][j] == -1 || board[i][j] == 0)
                    board[i][j] = 0;
            }
        }
    }
}
