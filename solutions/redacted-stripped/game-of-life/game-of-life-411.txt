class Solution {

    public void method1(int[][] board) {
        int m = board.length;
        int[][] tempB = new int[m][];
        for (int i = 0; i < m; i++) tempB[i] = board[i].clone();
        for (int i = 0; i < m; i++) {
            int n = tempB[i].length;
            for (int j = 0; j < n; j++) {
                int count = 0;
                if (i == 0 && j == 0 && i == m - 1 && j == n - 1) {
                } else if (i == 0 && i == m - 1) {
                    if (j == 0)
                        count = tempB[i][j + 1];
                    else if (j == n - 1)
                        count = tempB[i][j - 1];
                    else
                        count = tempB[i][j - 1] + tempB[i][j + 1];
                } else if (j == 0 && j == n - 1) {
                    if (i == 0)
                        count = tempB[i + 1][j];
                    else if (i == m - 1)
                        count = tempB[i - 1][j];
                    else
                        count = tempB[i + 1][j] + tempB[i - 1][j];
                } else if (i == 0 && j == 0) {
                    count = tempB[i + 1][j] + tempB[i][j + 1] + tempB[i + 1][j + 1];
                } else if (i == 0) {
                    if (j == n - 1) {
                        count = tempB[i][j - 1] + tempB[i + 1][j - 1] + tempB[i + 1][j];
                    } else {
                        count = tempB[i][j - 1] + tempB[i + 1][j - 1] + tempB[i + 1][j] + tempB[i + 1][j + 1] + tempB[i][j + 1];
                    }
                } else if (j == 0) {
                    if (i == m - 1) {
                        count = tempB[i - 1][j] + tempB[i - 1][j + 1] + tempB[i][j + 1];
                    } else {
                        count = tempB[i - 1][j] + tempB[i - 1][j + 1] + tempB[i][j + 1] + tempB[i + 1][j + 1] + tempB[i + 1][j];
                    }
                } else if (i == m - 1 && j == n - 1) {
                    count = tempB[i - 1][j] + tempB[i][j - 1] + tempB[i - 1][j - 1];
                } else if (i == m - 1) {
                    count = tempB[i][j - 1] + tempB[i - 1][j - 1] + tempB[i - 1][j] + tempB[i - 1][j + 1] + tempB[i][j + 1];
                } else if (j == n - 1) {
                    count = tempB[i - 1][j] + tempB[i - 1][j - 1] + tempB[i][j - 1] + tempB[i + 1][j - 1] + tempB[i + 1][j];
                } else {
                    count = tempB[i - 1][j] + tempB[i - 1][j + 1] + tempB[i][j + 1] + tempB[i + 1][j + 1] + tempB[i + 1][j] + tempB[i + 1][j - 1] + tempB[i][j - 1] + tempB[i - 1][j - 1];
                }
                if (tempB[i][j] == 1 && count < 2)
                    board[i][j] = 0;
                else if (tempB[i][j] == 1 && count > 3)
                    board[i][j] = 0;
                else if (tempB[i][j] == 0 && count == 3)
                    board[i][j] = 1;
            }
        }
        return;
    }
}
