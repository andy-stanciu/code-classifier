class Solution {

    public int countAlive(int i, int j, int[][] board, int m, int n, int[] delRow, int[] delCol) {
        int count = 0;
        for (int k = 0; k < 8; k++) {
            int newRow = i + delRow[k];
            int newCol = j + delCol[k];
            if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && board[newRow][newCol] == 1) {
                count++;
            }
        }
        return count;
    }

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] temp = new int[m][n];
        int[] delRow = { -1, 0, 1, 0, -1, 1, 1, -1 };
        int[] delCol = { 0, 1, 0, -1, 1, 1, -1, -1 };
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int aliveCount = countAlive(i, j, board, m, n, delRow, delCol);
                if (board[i][j] == 0) {
                    if (aliveCount == 3) {
                        temp[i][j] = 1;
                    }
                } else {
                    if (aliveCount < 2) {
                        temp[i][j] = 0;
                    } else if (aliveCount == 2 || aliveCount == 3) {
                        temp[i][j] = 1;
                    } else if (aliveCount > 3) {
                        temp[i][j] = 0;
                    }
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = temp[i][j];
            }
        }
    }
}
