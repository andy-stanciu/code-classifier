class Solution {

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int count = countOnes(i, j, board);
                if (board[i][j] == 1 && (count != 2 && count != 3)) {
                    board[i][j] = -1;
                } else if (board[i][j] == 0 && count == 3) {
                    board[i][j] = -2;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == -1) {
                    board[i][j] = 0;
                } else if (board[i][j] == -2) {
                    board[i][j] = 1;
                }
            }
        }
    }

    private int countOnes(int i, int j, int[][] board) {
        int total = 0;
        if (i > 0 && j > 0 && (board[i - 1][j - 1] == 1 || board[i - 1][j - 1] == -1)) {
            total++;
        }
        if (i > 0 && (board[i - 1][j] == 1 || board[i - 1][j] == -1)) {
            total++;
        }
        if (i > 0 && j < board[0].length - 1 && (board[i - 1][j + 1] == 1 || board[i - 1][j + 1] == -1)) {
            total++;
        }
        if (j > 0 && (board[i][j - 1] == 1 || board[i][j - 1] == -1)) {
            total++;
        }
        if (j < board[0].length - 1 && (board[i][j + 1] == 1 || board[i][j + 1] == -1)) {
            total++;
        }
        if (i < board.length - 1 && j > 0 && (board[i + 1][j - 1] == 1 || board[i + 1][j - 1] == -1)) {
            total++;
        }
        if (i < board.length - 1 && (board[i + 1][j] == 1 || board[i + 1][j] == -1)) {
            total++;
        }
        if (i < board.length - 1 && j < board[0].length - 1 && (board[i + 1][j + 1] == 1 || board[i + 1][j + 1] == -1)) {
            total++;
        }
        return total;
    }
}
