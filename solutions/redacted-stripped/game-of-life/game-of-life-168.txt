class Solution {

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] memo = new int[m + 2][n + 2];
        for (int i = 1; i < memo.length; i++) {
            for (int j = 1; j < memo[0].length; j++) {
                int upper = memo[i][j - 1];
                int left = memo[i - 1][j];
                int left_upper = memo[i - 1][j - 1];
                int sum = upper + left - left_upper;
                if (i - 1 >= 0 && i - 1 < board.length && j - 1 >= 0 && j - 1 < board[0].length && board[i - 1][j - 1] == 1) {
                    memo[i][j] = sum + 1;
                } else {
                    memo[i][j] = sum;
                }
            }
        }
        int[][] dp = new int[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int ci = i + 1;
                int cy = j + 1;
                int base = memo[ci + 1][cy + 1];
                int upper = ci - 2 >= 0 ? memo[ci - 2][cy + 1] : 0;
                int left = cy - 2 >= 0 ? memo[ci + 1][cy - 2] : 0;
                int left_upper = ci - 2 >= 0 && cy - 2 >= 0 ? memo[ci - 2][cy - 2] : 0;
                int sum = base - upper - left + left_upper;
                if (board[i][j] == 1) {
                    int surround = sum - 1;
                    if (surround > 3 || surround < 2) {
                        board[i][j] = 0;
                    }
                } else {
                    if (sum == 3) {
                        board[i][j] = 1;
                    }
                }
            }
        }
    }
}
