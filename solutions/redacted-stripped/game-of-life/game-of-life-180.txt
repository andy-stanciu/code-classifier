class Solution {

    private int find(int i, int j, int[][] board, int toreturn) {
        if (i < 0 || j < 0 || i >= board.length || j >= board[i].length) {
            return 0;
        }
        if (toreturn == 1) {
            return board[i][j];
        }
        return find(i + 1, j, board, 1) + find(i - 1, j, board, 1) + find(i, j + 1, board, 1) + find(i, j - 1, board, 1) + find(i + 1, j + 1, board, 1) + find(i + 1, j - 1, board, 1) + find(i - 1, j - 1, board, 1) + find(i - 1, j + 1, board, 1);
    }

    static class Block {

        int i, j, val;

        public Block(int x, int y, int v) {
            i = x;
            j = y;
            val = v;
        }
    }

    public void method1(int[][] board) {
        ArrayList<Block> list = new ArrayList<>();
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                int count = find(i, j, board, 0);
                if ((count == 2 || count == 3) && board[i][j] == 1) {
                    list.add(new Block(i, j, 1));
                } else if (count < 2 && board[i][j] == 1) {
                    list.add(new Block(i, j, 0));
                } else if (count > 3 && board[i][j] == 1) {
                    list.add(new Block(i, j, 0));
                } else if (count == 3 && board[i][j] == 0) {
                    list.add(new Block(i, j, 1));
                }
            }
        }
        for (Block b : list) {
            board[b.i][b.j] = b.val;
        }
    }
}
