class Solution {

    int[][] DIRECTIONS = new int[][] { { -1, 1 }, { 1, -1 }, { 1, 1 }, { -1, -1 }, { 0, 1 }, { 1, 0 }, { -1, 0 }, { 0, -1 } };

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                update_status(board, i, j);
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == -1)
                    board[i][j] = 0;
                else if (board[i][j] == 2)
                    board[i][j] = 1;
            }
        }
    }

    public void update_status(int[][] board, int row, int col) {
        int living_around = 0;
        for (int[] direction : DIRECTIONS) {
            int r = row + direction[0];
            int c = col + direction[1];
            if (r < 0 || c < 0 || r >= board.length || c >= board[0].length)
                continue;
            if (board[r][c] == 1 || board[r][c] == -1) {
                living_around++;
            }
        }
        if (board[row][col] == 1) {
            if (living_around < 2)
                board[row][col] = -1;
            else if (living_around == 2 || living_around == 3)
                board[row][col] = 1;
            else
                board[row][col] = -1;
        } else {
            if (living_around == 3)
                board[row][col] = 2;
            else
                board[row][col] = board[row][col];
        }
    }
}
