class Solution {

    int count(int row, int col, int[][] board) {
        int ones = 0;
        if (row - 1 >= 0 && board[row - 1][col] == 1)
            ones++;
        if (col - 1 >= 0 && board[row][col - 1] == 1)
            ones++;
        if (row + 1 <= board.length - 1 && board[row + 1][col] == 1)
            ones++;
        if (col + 1 <= board[0].length - 1 && board[row][col + 1] == 1)
            ones++;
        if (row - 1 >= 0 && col + 1 <= board[0].length - 1 && board[row - 1][col + 1] == 1)
            ones++;
        if (row + 1 <= board.length - 1 && col + 1 <= board[0].length - 1 && board[row + 1][col + 1] == 1)
            ones++;
        if (row + 1 <= board.length - 1 && col - 1 >= 0 && board[row + 1][col - 1] == 1)
            ones++;
        if (row - 1 >= 0 && col - 1 >= 0 && board[row - 1][col - 1] == 1)
            ones++;
        return ones;
    }

    public void method1(int[][] board) {
        int[][] temp = new int[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) temp[i][j] = board[i][j];
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int ones = count(i, j, temp);
                if (temp[i][j] == 0 && ones == 3)
                    board[i][j] = 1;
                else if (temp[i][j] == 1 && (ones < 2 || ones > 3))
                    board[i][j] = 0;
            }
        }
    }
}
