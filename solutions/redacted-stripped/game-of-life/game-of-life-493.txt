class Solution {

    public void method1(int[][] board) {
        method1(board, 0, 0);
    }

    public void method1(int[][] board, int i, int j) {
        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length) {
            return;
        }
        int tempI = i;
        int tempJ = j;
        int finalValue = getFuture(board, tempI, tempJ);
        j++;
        if (i == board.length && j == board[0].length) {
            return;
        } else if (j == board[0].length) {
            i++;
            j = 0;
        }
        method1(board, i, j);
        board[tempI][tempJ] = finalValue;
    }

    public int getFuture(int[][] board, int i, int j) {
        int curr = board[i][j];
        int aliveCount = 0;
        int row = board.length;
        int col = board[0].length;
        if (i - 1 >= 0) {
            aliveCount += board[i - 1][j];
        }
        if (i - 1 >= 0 && j + 1 < col) {
            aliveCount += board[i - 1][j + 1];
        }
        if (j + 1 < col) {
            aliveCount += board[i][j + 1];
        }
        if (i + 1 < row && j + 1 < col) {
            aliveCount += board[i + 1][j + 1];
        }
        if (i + 1 < row) {
            aliveCount += board[i + 1][j];
        }
        if (i + 1 < row && j - 1 >= 0) {
            aliveCount += board[i + 1][j - 1];
        }
        if (j - 1 >= 0) {
            aliveCount += board[i][j - 1];
        }
        if (i - 1 >= 0 && j - 1 >= 0) {
            aliveCount += board[i - 1][j - 1];
        }
        if (curr == 1) {
            if (aliveCount < 2) {
                return 0;
            } else if (aliveCount == 2 || aliveCount == 3) {
                return 1;
            } else {
                return 0;
            }
        } else if (aliveCount == 3) {
            return 1;
        }
        return 0;
    }
}
