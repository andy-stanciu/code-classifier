class Solution {

    private final int[] neighbour = { -1, 0, 1 };

    public void method1(int[][] board) {
        int[][] tempBoard = new int[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                tempBoard[i][j] = board[i][j];
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                int neighboursCount = neighbours(tempBoard, i, j);
                if (board[i][j] == 1) {
                    board[i][j] = (neighboursCount < 2 || neighboursCount > 3) ? 0 : 1;
                } else {
                    board[i][j] = (neighboursCount == 3) ? 1 : 0;
                }
            }
        }
    }

    private int neighbours(int[][] tempBoard, int row, int col) {
        int count = 0;
        for (int i = 0; i < neighbour.length; i++) {
            for (int j = 0; j < neighbour.length; j++) {
                int newRow = row + neighbour[i], newCol = col + neighbour[j];
                if ((newRow < 0 || newRow >= tempBoard.length || newCol < 0 || newCol >= tempBoard[0].length) || (newRow == row && newCol == col)) {
                    continue;
                }
                if (tempBoard[newRow][newCol] == 1) {
                    count++;
                }
            }
        }
        return count;
    }
}
