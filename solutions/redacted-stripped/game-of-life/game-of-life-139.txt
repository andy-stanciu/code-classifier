class Solution {

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] deepCopy = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                deepCopy[i][j] = board[i][j];
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int neigbhours = method2(deepCopy, i, j);
                if (board[i][j] == 0) {
                    if (neigbhours == 3) {
                        board[i][j] = 1;
                    }
                } else {
                    if (neigbhours > 3 || neigbhours <= 1) {
                        board[i][j] = 0;
                    } else {
                        board[i][j] = 1;
                    }
                }
            }
        }
    }

    private int method2(int[][] board, int m, int n) {
        int m1 = board.length;
        int n1 = board[0].length;
        boolean nPlus = n + 1 < n1 ? true : false;
        boolean nMinus = n - 1 >= 0 ? true : false;
        boolean mPlus = m + 1 < m1 ? true : false;
        boolean mMinus = m - 1 >= 0 ? true : false;
        int count = 0;
        if (nPlus) {
            count += board[m][n + 1];
        }
        if (nMinus) {
            count += board[m][n - 1];
        }
        if (mPlus) {
            count += board[m + 1][n];
        }
        if (mMinus) {
            count += board[m - 1][n];
        }
        if (nMinus && mMinus) {
            count += board[m - 1][n - 1];
        }
        if (nPlus && mPlus) {
            count += board[m + 1][n + 1];
        }
        if (nPlus && mMinus) {
            count += board[m - 1][n + 1];
        }
        if (nMinus && mPlus) {
            count += board[m + 1][n - 1];
        }
        return count;
    }
}
