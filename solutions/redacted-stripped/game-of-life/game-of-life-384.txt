class Solution {

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] directions = { { -1, 0 }, { -1, -1 }, { 0, -1 }, { 1, -1 }, { 1, 0 }, { 1, 1 }, { 0, 1 }, { -1, 1 } };
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int var1 = calculateLiveNeighbours(i, j, board, directions);
                if (board[i][j] == 1 || board[i][j] == -3) {
                    if (var1 < 2 || var1 > 3) {
                        board[i][j] = -3;
                    }
                } else {
                    if (var1 == 3) {
                        board[i][j] = 3;
                    }
                }
            }
        }
        update(board);
    }

    private void update(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 3) {
                    board[i][j] = 1;
                } else if (board[i][j] == -3) {
                    board[i][j] = 0;
                }
            }
        }
    }

    private int calculateLiveNeighbours(int i, int j, int[][] board, int[][] directions) {
        int count = 0;
        for (int k = 0; k < directions.length; k++) {
            int newX = i + directions[k][0];
            int newY = j + directions[k][1];
            if (newX < 0 || newY < 0 || newX >= board.length || newY >= board[0].length) {
                continue;
            }
            if (board[newX][newY] == 1 || board[newX][newY] == -3) {
                count++;
            }
        }
        return count;
    }
}
