class Solution {

    int m;

    int n;

    public void method1(int[][] board) {
        m = board.length;
        n = board[0].length;
        int[][] neighbour = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                neighbour[i][j] = count(board, i, j);
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (neighbour[i][j] < 2 || neighbour[i][j] > 3) {
                    board[i][j] = 0;
                } else if (neighbour[i][j] == 2 && board[i][j] == 1) {
                    board[i][j] = 1;
                } else if (neighbour[i][j] == 3) {
                    board[i][j] = 1;
                } else {
                    board[i][j] = 0;
                }
            }
        }
    }

    int count(int[][] grid, int i, int j) {
        int count = 0;
        int[] x = { -1, -1, -1, 0, 1, 1, 1, 0 };
        int[] y = { -1, 0, 1, 1, 1, 0, -1, -1 };
        for (int index = 0; index < 8; index++) {
            int newx = i - x[index];
            int newy = j - y[index];
            if (newx >= 0 && newx < m && newy >= 0 && newy < n && grid[newx][newy] == 1) {
                count++;
            }
        }
        return count;
    }
}
