class Solution {

    private int count(int[][] copy, int i, int j, int m, int n) {
        int count = 0;
        if (i + 1 < m) {
            count += copy[i + 1][j];
        }
        if (i + 1 < m && j + 1 < n) {
            count += copy[i + 1][j + 1];
        }
        if (j + 1 < n) {
            count += copy[i][j + 1];
        }
        if (i - 1 >= 0) {
            count += copy[i - 1][j];
        }
        if (i - 1 >= 0 && j - 1 >= 0) {
            count += copy[i - 1][j - 1];
        }
        if (j - 1 >= 0) {
            count += copy[i][j - 1];
        }
        if (i - 1 >= 0 && j + 1 < n) {
            count += copy[i - 1][j + 1];
        }
        if (i + 1 < m && j - 1 >= 0) {
            count += copy[i + 1][j - 1];
        }
        return count;
    }

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] copy = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                copy[i][j] = board[i][j];
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int count = count(copy, i, j, m, n);
                if (copy[i][j] == 1) {
                    if (count > 3)
                        board[i][j] = 0;
                    else if (count < 2) {
                        board[i][j] = 0;
                    }
                } else {
                    if (count == 3) {
                        board[i][j] = 1;
                    }
                }
            }
        }
    }
}
