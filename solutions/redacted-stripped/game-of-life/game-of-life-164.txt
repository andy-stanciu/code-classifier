class Solution {

    public void method1(int[][] board) {
        int rows = board.length;
        int cols = board[0].length;
        int[][] updatedBoard = new int[rows][cols];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int liveNeighbors = countLiveNeighbors(board, i, j);
                if (board[i][j] == 1) {
                    if (liveNeighbors < 2 || liveNeighbors > 3) {
                        updatedBoard[i][j] = 0;
                    } else {
                        updatedBoard[i][j] = 1;
                    }
                } else {
                    if (liveNeighbors == 3) {
                        updatedBoard[i][j] = 1;
                    } else {
                        updatedBoard[i][j] = 0;
                    }
                }
            }
        }
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                board[i][j] = updatedBoard[i][j];
            }
        }
    }

    private int countLiveNeighbors(int[][] board, int row, int col) {
        int count = 0;
        int[] rows = { -1, -1, -1, 0, 0, 1, 1, 1 };
        int[] cols = { -1, 0, 1, -1, 1, -1, 0, 1 };
        for (int i = 0; i < 8; i++) {
            int nCol = col + cols[i];
            int nRow = row + rows[i];
            if (nCol >= 0 && nRow >= 0 && nCol < board[0].length && nRow < board.length) {
                if (board[nRow][nCol] == 1) {
                    count++;
                }
            }
        }
        return count;
    }
}
