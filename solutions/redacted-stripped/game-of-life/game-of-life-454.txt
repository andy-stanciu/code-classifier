class Solution {

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] ans = new int[m][n];
        for (int i = 0; i < m; i++) {
            int live_neighbours = 0;
            int dead_neighbours = 0;
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 1) {
                    if (i > 0) {
                        if (board[i - 1][j] == 1) {
                            live_neighbours++;
                        } else {
                            dead_neighbours++;
                        }
                    }
                    if (i > 0 && j > 0) {
                        if (board[i - 1][j - 1] == 1) {
                            live_neighbours++;
                        } else {
                            dead_neighbours++;
                        }
                    }
                    if (i > 0 && j + 1 < n) {
                        if (board[i - 1][j + 1] == 1) {
                            live_neighbours++;
                        } else {
                            dead_neighbours++;
                        }
                    }
                    if (j - 1 >= 0) {
                        if (board[i][j - 1] == 1) {
                            live_neighbours++;
                        } else {
                            dead_neighbours++;
                        }
                    }
                    if (j + 1 < n) {
                        if (board[i][j + 1] == 1) {
                            live_neighbours++;
                        } else {
                            dead_neighbours++;
                        }
                    }
                    if (i + 1 < m) {
                        if (board[i + 1][j] == 1) {
                            live_neighbours++;
                        } else {
                            dead_neighbours++;
                        }
                    }
                    if (i + 1 < m && j - 1 >= 0) {
                        if (board[i + 1][j - 1] == 1) {
                            live_neighbours++;
                        } else {
                            dead_neighbours++;
                        }
                    }
                    if (i + 1 < m && j + 1 < n) {
                        if (board[i + 1][j + 1] == 1) {
                            live_neighbours++;
                        } else {
                            dead_neighbours++;
                        }
                    }
                    if (live_neighbours < 2)
                        ans[i][j] = 0;
                    if (live_neighbours == 2 || live_neighbours == 3)
                        ans[i][j] = 1;
                    if (live_neighbours > 3)
                        ans[i][j] = 0;
                } else {
                    if (i > 0) {
                        if (board[i - 1][j] == 1) {
                            live_neighbours++;
                        } else {
                            dead_neighbours++;
                        }
                    }
                    if (i > 0 && j > 0) {
                        if (board[i - 1][j - 1] == 1) {
                            live_neighbours++;
                        } else {
                            dead_neighbours++;
                        }
                    }
                    if (i > 0 && j + 1 < n) {
                        if (board[i - 1][j + 1] == 1) {
                            live_neighbours++;
                        } else {
                            dead_neighbours++;
                        }
                    }
                    if (j - 1 >= 0) {
                        if (board[i][j - 1] == 1) {
                            live_neighbours++;
                        } else {
                            dead_neighbours++;
                        }
                    }
                    if (j + 1 < n) {
                        if (board[i][j + 1] == 1) {
                            live_neighbours++;
                        } else {
                            dead_neighbours++;
                        }
                    }
                    if (i + 1 < m) {
                        if (board[i + 1][j] == 1) {
                            live_neighbours++;
                        } else {
                            dead_neighbours++;
                        }
                    }
                    if (i + 1 < m && j - 1 >= 0) {
                        if (board[i + 1][j - 1] == 1) {
                            live_neighbours++;
                        } else {
                            dead_neighbours++;
                        }
                    }
                    if (i + 1 < m && j + 1 < n) {
                        if (board[i + 1][j + 1] == 1) {
                            live_neighbours++;
                        } else {
                            dead_neighbours++;
                        }
                    }
                    if (live_neighbours == 3)
                        ans[i][j] = 1;
                }
                live_neighbours = 0;
                dead_neighbours = 0;
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = ans[i][j];
            }
        }
    }
}
