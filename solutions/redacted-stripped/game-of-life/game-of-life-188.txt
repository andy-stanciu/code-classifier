class Solution {

    public void method1(int[][] board) {
        int col = board[0].length;
        int row = board.length;
        int[][] zeroes = new int[row][col];
        int[][] ones = new int[row][col];
        int x = 0;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (i - 1 >= 0) {
                    x = board[i - 1][j] == 0 ? zeroes[i][j]++ : ones[i][j]++;
                    if (j - 1 >= 0)
                        x = board[i - 1][j - 1] == 0 ? zeroes[i][j]++ : ones[i][j]++;
                    if (j + 1 < col)
                        x = board[i - 1][j + 1] == 0 ? zeroes[i][j]++ : ones[i][j]++;
                }
                if (j - 1 >= 0)
                    x = board[i][j - 1] == 0 ? zeroes[i][j]++ : ones[i][j]++;
                if (j + 1 < col)
                    x = board[i][j + 1] == 0 ? zeroes[i][j]++ : ones[i][j]++;
                if (i + 1 < row) {
                    x = board[i + 1][j] == 0 ? zeroes[i][j]++ : ones[i][j]++;
                    if (j - 1 >= 0)
                        x = board[i + 1][j - 1] == 0 ? zeroes[i][j]++ : ones[i][j]++;
                    if (j + 1 < col)
                        x = board[i + 1][j + 1] == 0 ? zeroes[i][j]++ : ones[i][j]++;
                }
            }
        }
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (board[i][j] == 0) {
                    if (ones[i][j] == 3)
                        board[i][j] = 1;
                } else {
                    if (ones[i][j] < 2 || ones[i][j] > 3)
                        board[i][j] = 0;
                }
            }
        }
    }
}
