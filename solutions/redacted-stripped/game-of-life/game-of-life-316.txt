class Solution {

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] grid = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                grid[i][j] = board[i][j];
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                grid[i][j] = find(board, i, j);
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int x = find2(grid[i][j], board[i][j]);
                board[i][j] = x;
            }
        }
    }

    public int find2(int x, int orig) {
        int ele = x;
        if (orig == 1) {
            if (x < 2)
                return 0;
            else if (x == 2 || x == 3)
                return 1;
            else if (x > 3)
                return 0;
        } else {
            if (x == 3)
                return 1;
        }
        return 0;
    }

    public int find(int[][] grid, int i, int j) {
        int m = grid.length, n = grid[0].length;
        int[][] dir = new int[][] { { 1, 0 }, { 0, 1 }, { 1, 1 }, { -1, -1 }, { -1, 1 }, { 1, -1 }, { -1, 0 }, { 0, -1 } };
        int res = 0;
        for (int[] d : dir) {
            int x = i + d[0];
            int y = j + d[1];
            if (x < m && y < n && x >= 0 && y >= 0 && grid[x][y] == 1)
                res += 1;
        }
        return res;
    }
}
