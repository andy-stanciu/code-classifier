class Solution {

    public int neighbour(int[][] board, int r, int c) {
        if (r < 0 || r >= board.length || c < 0 || c >= board[0].length || board[r][c] == 0) {
            return 0;
        }
        return 1;
    }

    public void method1(int[][] board) {
        int row = board.length;
        int col = board[0].length;
        int[][] tempBoard = new int[row][col];
        for (int r = 0; r < row; r++) {
            for (int c = 0; c < col; c++) {
                int liveNeighbours = neighbour(board, r - 1, c - 1) + neighbour(board, r - 1, c) + neighbour(board, r - 1, c + 1) + neighbour(board, r + 1, c - 1) + neighbour(board, r + 1, c) + neighbour(board, r + 1, c + 1) + neighbour(board, r, c - 1) + neighbour(board, r, c + 1);
                if (board[r][c] == 1) {
                    tempBoard[r][c] = (liveNeighbours < 2 || liveNeighbours > 3) ? 0 : 1;
                } else {
                    tempBoard[r][c] = (liveNeighbours == 3) ? 1 : 0;
                }
            }
        }
        for (int r = 0; r < row; r++) {
            board[r] = tempBoard[r].clone();
        }
    }
}
