class Solution {

    public static int countNeighbors(int[][] boards, int i, int j) {
        int neighbors = 0;
        if (i - 1 >= 0 && j - 1 >= 0 && boards[i - 1][j - 1] == 1) {
            neighbors++;
        }
        if (i - 1 >= 0 && j + 1 < boards[0].length && boards[i - 1][j + 1] == 1) {
            neighbors++;
        }
        if (i + 1 < boards.length && j - 1 >= 0 && boards[i + 1][j - 1] == 1) {
            neighbors++;
        }
        if (i + 1 < boards.length && j + 1 < boards[0].length && boards[i + 1][j + 1] == 1) {
            neighbors++;
        }
        if (i - 1 >= 0 && boards[i - 1][j] == 1) {
            neighbors++;
        }
        if (i + 1 < boards.length && boards[i + 1][j] == 1) {
            neighbors++;
        }
        if (j - 1 >= 0 && boards[i][j - 1] == 1) {
            neighbors++;
        }
        if (j + 1 < boards[0].length && boards[i][j + 1] == 1) {
            neighbors++;
        }
        return neighbors;
    }

    public void method1(int[][] boards) {
        int m = boards.length;
        int n = boards[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = countNeighbors(boards, i, j);
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (dp[i][j] < 2) {
                    boards[i][j] = 0;
                } else if (dp[i][j] == 3) {
                    boards[i][j] = 1;
                } else if (dp[i][j] > 3) {
                    boards[i][j] = 0;
                }
            }
        }
    }
}
