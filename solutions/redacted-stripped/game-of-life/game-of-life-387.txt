class Solution {

    static class pair {

        int i;

        int j;

        public pair(int i, int j) {
            this.i = i;
            this.j = j;
        }
    }

    public void method1(int[][] board) {
        ArrayList<pair> gonnatog = new ArrayList<>();
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                pair p = new pair(i, j);
                int c = method2(board, i, j);
                if (board[i][j] == 0) {
                    if (c == 3)
                        gonnatog.add(p);
                } else {
                    if (c < 2)
                        gonnatog.add(p);
                    else if (c > 3)
                        gonnatog.add(p);
                }
            }
        }
        for (pair p : gonnatog) {
            if (board[p.i][p.j] == 0)
                board[p.i][p.j] = 1;
            else
                board[p.i][p.j] = 0;
        }
    }

    static int method2(int[][] arr, int i, int j) {
        int c = 0;
        if (j + 1 < arr[i].length && arr[i][j + 1] == 1)
            c++;
        if (j - 1 >= 0 && arr[i][j - 1] == 1)
            c++;
        if (i + 1 < arr.length && arr[i + 1][j] == 1)
            c++;
        if (i - 1 >= 0 && arr[i - 1][j] == 1)
            c++;
        if (i - 1 >= 0 && j - 1 >= 0 && arr[i - 1][j - 1] == 1)
            c++;
        if (i - 1 >= 0 && j + 1 < arr[i].length && arr[i - 1][j + 1] == 1)
            c++;
        if (i + 1 < arr.length && j + 1 < arr[i].length && arr[i + 1][j + 1] == 1)
            c++;
        if (i + 1 < arr.length && j - 1 >= 0 && arr[i + 1][j - 1] == 1)
            c++;
        return c;
    }
}
