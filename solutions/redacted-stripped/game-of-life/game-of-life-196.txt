class Solution {

    public void method1(int[][] board) {
        for (int ir = 0; ir < board.length; ir++) {
            for (int ic = 0; ic < board[0].length; ic++) {
                int cellsAlive = countLiveCellsAround(board, ir, ic);
                if (board[ir][ic] == 0 && cellsAlive == 3) {
                    setTmpState(board, ir, ic, 1);
                } else if (board[ir][ic] == 1 && (cellsAlive < 2 || cellsAlive > 3)) {
                    setTmpState(board, ir, ic, 0);
                }
            }
        }
        for (int ir = 0; ir < board.length; ir++) {
            for (int ic = 0; ic < board[0].length; ic++) {
                setFinalState(board, ir, ic);
            }
        }
    }

    private void setTmpState(int[][] board, int r, int c, int newState) {
        int previousState = board[r][c];
        if (previousState == 1 && newState == 0) {
            board[r][c] = 110;
        } else if (previousState == 0 && newState == 1) {
            board[r][c] = 101;
        }
    }

    private void setFinalState(int[][] board, int r, int c) {
        if (board[r][c] == 101) {
            board[r][c] = 1;
        } else if (board[r][c] == 110) {
            board[r][c] = 0;
        }
    }

    private int countLiveCellsAround(int[][] board, int r, int c) {
        int cellsAlive = 0;
        for (int ir = r - 1; ir <= r + 1; ir++) {
            for (int ic = c - 1; ic <= c + 1; ic++) {
                if (ir == r && ic == c) {
                    continue;
                }
                if (getState(board, ir, ic) == 1) {
                    cellsAlive++;
                }
            }
        }
        return cellsAlive;
    }

    private int getState(int[][] board, int r, int c) {
        if (r < 0 || c < 0 || r >= board.length || c >= board[0].length) {
            return 0;
        }
        switch(board[r][c]) {
            case 1:
                return 1;
            case 110:
                return 1;
            case 0:
                return 0;
            case 101:
                return 0;
        }
        return -1;
    }
}
