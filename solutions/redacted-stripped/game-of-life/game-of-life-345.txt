class Solution {

    int n, m;

    public int solve(int[][] a, int i, int j) {
        int c = 0;
        if (i - 1 >= 0 && j - 1 >= 0 && a[i - 1][j - 1] == 1)
            c++;
        if (i - 1 >= 0 && a[i - 1][j] == 1)
            c++;
        if (i - 1 >= 0 && j + 1 < m && a[i - 1][j + 1] == 1)
            c++;
        if (j + 1 < m && a[i][j + 1] == 1)
            c++;
        if (j - 1 >= 0 && a[i][j - 1] == 1)
            c++;
        if (i + 1 < n && j - 1 >= 0 && a[i + 1][j - 1] == 1)
            c++;
        if (i + 1 < n && a[i + 1][j] == 1)
            c++;
        if (i + 1 < n && j + 1 < m && a[i + 1][j + 1] == 1)
            c++;
        if (a[i][j] == 0 && c == 3)
            return 1;
        else if (a[i][j] == 1 && c < 2)
            return 0;
        else if (a[i][j] == 1 && (c == 2 || c == 3))
            return 1;
        else if (a[i][j] == 1 && c > 3)
            return 0;
        return a[i][j];
    }

    public void method1(int[][] board) {
        n = board.length;
        m = board[0].length;
        int[][] r = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                r[i][j] = board[i][j];
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                board[i][j] = solve(r, i, j);
            }
        }
    }
}
