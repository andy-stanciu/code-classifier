class Solution {

    public void method1(int[][] board) {
        int n = board.length, m = board[0].length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int cnt = 0;
                if (i != 0) {
                    if (Math.abs(board[i - 1][j]) == 1)
                        cnt++;
                    if (j != 0 && Math.abs(board[i - 1][j - 1]) == 1)
                        cnt++;
                    if (j != m - 1 && Math.abs(board[i - 1][j + 1]) == 1)
                        cnt++;
                }
                if (i != n - 1) {
                    if (j != 0 && Math.abs(board[i + 1][j - 1]) == 1)
                        cnt++;
                    if (Math.abs(board[i + 1][j]) == 1)
                        cnt++;
                    if (j != m - 1 && Math.abs(board[i + 1][j + 1]) == 1)
                        cnt++;
                }
                if (j != 0 && Math.abs(board[i][j - 1]) == 1)
                    cnt++;
                if (j != m - 1 && Math.abs(board[i][j + 1]) == 1)
                    cnt++;
                if (Math.abs(board[i][j]) == 1) {
                    if (cnt < 2)
                        board[i][j] = -1;
                    if (cnt == 2 || cnt == 3)
                        board[i][j] = 1;
                    if (cnt > 3)
                        board[i][j] = -1;
                }
                if (Math.abs(board[i][j]) != 1) {
                    if (cnt == 3)
                        board[i][j] = 2;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == -1)
                    board[i][j] = 0;
                if (board[i][j] == 2)
                    board[i][j] = 1;
            }
        }
    }
}
