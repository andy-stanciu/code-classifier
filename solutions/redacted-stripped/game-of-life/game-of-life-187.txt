class Solution {

    public void method1(int[][] board) {
        int[][] next = new int[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (willLive(board, i, j))
                    next[i][j] = 1;
                else
                    next[i][j] = 0;
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                board[i][j] = next[i][j];
            }
        }
    }

    public boolean willLive(int[][] board, int i, int j) {
        int totalLiveNeighbours = 0;
        if (i - 1 >= 0 && j - 1 >= 0 && board[i - 1][j - 1] == 1) {
            totalLiveNeighbours++;
        }
        if (i - 1 >= 0 && board[i - 1][j] == 1) {
            totalLiveNeighbours++;
        }
        if (i - 1 >= 0 && j + 1 < board[i].length && board[i - 1][j + 1] == 1) {
            totalLiveNeighbours++;
        }
        if (j - 1 >= 0 && board[i][j - 1] == 1) {
            totalLiveNeighbours++;
        }
        if (j + 1 < board[i].length && board[i][j + 1] == 1) {
            totalLiveNeighbours++;
        }
        if (i + 1 < board.length && j - 1 >= 0 && board[i + 1][j - 1] == 1) {
            totalLiveNeighbours++;
        }
        if (i + 1 < board.length && board[i + 1][j] == 1) {
            totalLiveNeighbours++;
        }
        if (i + 1 < board.length && j + 1 < board[i].length && board[i + 1][j + 1] == 1) {
            totalLiveNeighbours++;
        }
        if (board[i][j] == 0 && totalLiveNeighbours == 3) {
            return true;
        } else if (board[i][j] == 1) {
            if (totalLiveNeighbours == 2 || totalLiveNeighbours == 3)
                return true;
            else {
                return false;
            }
        }
        return false;
    }
}
