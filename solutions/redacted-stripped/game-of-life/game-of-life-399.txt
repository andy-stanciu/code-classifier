class Solution {

    public void method1(int[][] board) {
        for (int rIdx = 0; rIdx < board.length; rIdx++) {
            for (int cIdx = 0; cIdx < board[rIdx].length; cIdx++) {
                board[rIdx][cIdx] = nextState(rIdx, cIdx, board);
            }
        }
        for (int rIdx = 0; rIdx < board.length; rIdx++) {
            for (int cIdx = 0; cIdx < board[rIdx].length; cIdx++) {
                if (board[rIdx][cIdx] == 2) {
                    board[rIdx][cIdx] = 1;
                }
                if (board[rIdx][cIdx] == 3) {
                    board[rIdx][cIdx] = 0;
                }
            }
        }
    }

    public int nextState(int rIdx, int cIdx, int[][] board) {
        int[][] dirs = { { 0, 1 }, { 0, -1 }, { 1, 0 }, { -1, 0 }, { 1, 1 }, { 1, -1 }, { -1, 1 }, { -1, -1 } };
        int alive = 0;
        for (int[] dir : dirs) {
            int nextR = rIdx + dir[0];
            int nextC = cIdx + dir[1];
            if (nextR >= 0 && nextR < board.length && nextC >= 0 && nextC < board[nextR].length) {
                if (board[nextR][nextC] == 1 || board[nextR][nextC] == 3) {
                    alive++;
                }
            }
        }
        if (board[rIdx][cIdx] == 1 && alive < 2) {
            return 3;
        } else if (board[rIdx][cIdx] == 1 && alive <= 3) {
            return 1;
        } else if (board[rIdx][cIdx] == 1) {
            return 3;
        } else if (board[rIdx][cIdx] == 0 && alive == 3) {
            return 2;
        } else {
            return board[rIdx][cIdx];
        }
    }
}
