class Solution {

    public void method1(int[][] board) {
        for (int row = 0; row < board.length; row++) {
            for (int col = 0; col < board[0].length; col++) {
                if (board[row][col] == 1) {
                    evaluateOne(row, col, board);
                }
            }
        }
        for (int row = 0; row < board.length; row++) {
            for (int col = 0; col < board[0].length; col++) {
                if (board[row][col] > 0) {
                    board[row][col] = 1;
                } else {
                    board[row][col] = 0;
                }
            }
        }
    }

    void evaluateOne(int row, int col, int[][] board) {
        checkOneStatus(row, col, board);
        for (int neighborRow = -1; neighborRow <= 1; neighborRow++) {
            for (int neighborCol = -1; neighborCol <= 1; neighborCol++) {
                if (neighborRow == 0 && neighborCol == 0)
                    continue;
                int newRow = row + neighborRow;
                int newCol = col + neighborCol;
                if (newRow < 0 || newCol < 0)
                    continue;
                if (newRow >= board.length || newCol >= board[0].length)
                    continue;
                if (board[newRow][newCol] == 0) {
                    checkZeroStatus(newRow, newCol, board);
                }
            }
        }
    }

    void checkOneStatus(int row, int col, int[][] board) {
        int liveNeighbors = 0;
        for (int neighborRow = -1; neighborRow <= 1; neighborRow++) {
            for (int neighborCol = -1; neighborCol <= 1; neighborCol++) {
                if (neighborRow == 0 && neighborCol == 0)
                    continue;
                int newRow = row + neighborRow;
                int newCol = col + neighborCol;
                if (newRow < 0 || newCol < 0)
                    continue;
                if (newRow >= board.length || newCol >= board[0].length)
                    continue;
                if (board[newRow][newCol] == 1 || board[newRow][newCol] == 2 || board[newRow][newCol] == -1) {
                    liveNeighbors++;
                }
            }
        }
        if (liveNeighbors < 2) {
            board[row][col] = -1;
        } else if (liveNeighbors == 2 || liveNeighbors == 3) {
            board[row][col] = 2;
        } else if (liveNeighbors > 3) {
            board[row][col] = -1;
        }
    }

    void checkZeroStatus(int row, int col, int[][] board) {
        int liveNeighbors = 0;
        for (int neighborRow = -1; neighborRow <= 1; neighborRow++) {
            for (int neighborCol = -1; neighborCol <= 1; neighborCol++) {
                if (neighborRow == 0 && neighborCol == 0)
                    continue;
                int newRow = row + neighborRow;
                int newCol = col + neighborCol;
                if (newRow < 0 || newCol < 0)
                    continue;
                if (newRow >= board.length || newCol >= board[0].length)
                    continue;
                if (board[newRow][newCol] == 1 || board[newRow][newCol] == 2 || board[newRow][newCol] == -1) {
                    liveNeighbors++;
                }
            }
        }
        if (liveNeighbors == 3) {
            board[row][col] = 3;
        } else {
            board[row][col] = -2;
        }
    }
}
