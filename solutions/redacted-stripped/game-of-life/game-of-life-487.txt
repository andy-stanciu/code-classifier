class Solution {

    public void method1(int[][] board) {
        int m = board.length, n = board[0].length;
        int[][] nextState = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int liveNeighbors = liveNeighbors(board, m, n, i, j);
                if (board[i][j] == 0 && liveNeighbors == 3) {
                    nextState[i][j] = 1;
                } else if (board[i][j] == 1 && (liveNeighbors < 2 || liveNeighbors > 3)) {
                    nextState[i][j] = 0;
                } else {
                    nextState[i][j] = board[i][j];
                }
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                board[i][j] = nextState[i][j];
            }
        }
    }

    public int liveNeighbors(int[][] board, int m, int n, int i, int j) {
        int lives = 0;
        for (int x = Math.max(i - 1, 0); x <= Math.min(i + 1, m - 1); x++) {
            for (int y = Math.max(j - 1, 0); y <= Math.min(j + 1, n - 1); y++) {
                lives += board[x][y] & 1;
            }
        }
        lives -= board[i][j] & 1;
        return lives;
    }
}
