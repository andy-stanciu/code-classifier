class Solution {

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] nextState = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int liveNeighbors = getLiveNeighbors(board, i, j);
                if (board[i][j] == 0 && liveNeighbors == 3) {
                    nextState[i][j] = 1;
                } else if (board[i][j] == 1 && (liveNeighbors < 2 || liveNeighbors > 3)) {
                    nextState[i][j] = 0;
                } else {
                    nextState[i][j] = board[i][j];
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = nextState[i][j];
            }
        }
    }

    public int getLiveNeighbors(int[][] board, int i, int j) {
        int m = board.length;
        int n = board[0].length;
        int liveNeighbors = 0;
        for (int row = Math.max(0, i - 1); row < Math.min(i + 2, m); row++) {
            for (int col = Math.max(0, j - 1); col < Math.min(j + 2, n); col++) {
                if (row == i && col == j) {
                    continue;
                }
                liveNeighbors += board[row][col];
            }
        }
        return liveNeighbors;
    }
}
