class Solution {

    int neighbors(int i, int j, int[][] prev, int m, int n) {
        int res = 0;
        if (i + 1 < m && j + 1 < n)
            res += prev[i + 1][j + 1] & 1;
        if (i + 1 < m && j < n)
            res += prev[i + 1][j] & 1;
        if (i + 1 < m && j - 1 >= 0)
            res += prev[i + 1][j - 1] & 1;
        if (i < m && j + 1 < n)
            res += prev[i][j + 1] & 1;
        if (i < m && j - 1 >= 0)
            res += prev[i][j - 1] & 1;
        if (i - 1 >= 0 && j + 1 < n)
            res += prev[i - 1][j + 1] & 1;
        if (i - 1 >= 0 && j < n)
            res += prev[i - 1][j] & 1;
        if (i - 1 >= 0 && j - 1 >= 0)
            res += prev[i - 1][j - 1] & 1;
        return res;
    }

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int alives = neighbors(i, j, board, m, n);
                if (board[i][j] == 1 && alives >= 2 && alives <= 3) {
                    board[i][j] = 3;
                }
                if (board[i][j] == 0 && alives == 3) {
                    board[i][j] = 2;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] >>= 1;
            }
        }
    }
}
