class Solution {

    public void method1(int[][] board) {
        int[][] target = new int[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            System.arraycopy(board[i], 0, target[i], 0, board[i].length);
        }
        for (int i = 0; i < target.length; i++) {
            for (int j = 0; j < target[i].length; j++) {
                int neighborLiveCount = checkForNeighbors(target, i, j);
                if (target[i][j] == 1) {
                    if (neighborLiveCount < 2) {
                        board[i][j] = 0;
                    } else if (neighborLiveCount > 3) {
                        board[i][j] = 0;
                    }
                } else {
                    if (neighborLiveCount == 3) {
                        board[i][j] = 1;
                    }
                }
            }
        }
    }

    private int checkForNeighbors(int[][] board, int row, int col) {
        int count = 0;
        if (col - 1 >= 0 && board[row][col - 1] == 1) {
            count++;
        }
        if (col + 1 < board[0].length && board[row][col + 1] == 1) {
            count++;
        }
        if (row - 1 >= 0 && board[row - 1][col] == 1) {
            count++;
        }
        if (row + 1 < board.length && board[row + 1][col] == 1) {
            count++;
        }
        if (col - 1 >= 0 && row - 1 >= 0 && board[row - 1][col - 1] == 1) {
            count++;
        }
        if (col + 1 < board[0].length && row - 1 >= 0 && board[row - 1][col + 1] == 1) {
            count++;
        }
        if (row + 1 < board.length && col - 1 >= 0 && board[row + 1][col - 1] == 1) {
            count++;
        }
        if (row + 1 < board.length && col + 1 < board[0].length && board[row + 1][col + 1] == 1) {
            count++;
        }
        return count;
    }
}
