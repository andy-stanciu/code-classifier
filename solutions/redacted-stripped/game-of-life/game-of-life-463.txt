class Solution {

    public void method1(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int alive = 0;
                if (board[i][j] == 1) {
                    alive = getNeighboringAliveCount(i, j, board);
                    if (2 > alive) {
                        board[i][j] = -1;
                    } else if (alive > 3) {
                        board[i][j] = -1;
                    }
                } else {
                    alive = getNeighboringAliveCount(i, j, board);
                    if (alive == 3) {
                        board[i][j] = 2;
                    }
                }
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] > 0) {
                    board[i][j] = 1;
                } else {
                    board[i][j] = 0;
                }
            }
        }
    }

    public int getNeighboringAliveCount(int i, int j, int[][] board) {
        int alive = 0;
        int newI = 0, newJ = 0;
        int[][] directions = new int[][] { { -1, -1 }, { -1, 0 }, { -1, 1 }, { 0, -1 }, { 0, 1 }, { 1, -1 }, { 1, 0 }, { 1, 1 } };
        for (int[] direction : directions) {
            newI = i + direction[0];
            newJ = j + direction[1];
            if (newI >= board.length || newI < 0 || newJ >= board[0].length || newJ < 0) {
                continue;
            }
            if (board[newI][newJ] == 1 || board[newI][newJ] == -1) {
                alive++;
            }
        }
        return alive;
    }
}
