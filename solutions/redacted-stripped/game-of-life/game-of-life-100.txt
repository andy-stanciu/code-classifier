class Solution {

    public boolean checkNeighbours(int i, int j, int[][] board) {
        int[] arr = new int[8];
        if (i - 1 >= 0) {
            if (j - 1 >= 0)
                arr[0] = board[i - 1][j - 1];
            arr[1] = board[i - 1][j];
            if (j + 1 < board[0].length)
                arr[2] = board[i - 1][j + 1];
        }
        if (j - 1 >= 0)
            arr[3] = board[i][j - 1];
        if (j + 1 < board[0].length)
            arr[4] = board[i][j + 1];
        if (i + 1 < board.length) {
            if (j - 1 >= 0)
                arr[5] = board[i + 1][j - 1];
            arr[6] = board[i + 1][j];
            if (j + 1 < board[0].length)
                arr[7] = board[i + 1][j + 1];
        }
        int zeroes = 0;
        int ones = 0;
        for (int x = 0; x < arr.length; x++) {
            if (arr[x] == 0) {
                zeroes++;
            } else if (arr[x] == 1) {
                ones++;
            }
        }
        if (ones < 2) {
            return false;
        } else if (ones > 3) {
            return false;
        } else if (ones == 3) {
            return true;
        } else {
            if (board[i][j] == 0) {
                return false;
            }
            return true;
        }
    }

    public void method1(int[][] board) {
        int rows = board.length;
        int cols = board[0].length;
        int[][] copyBoard = new int[rows][cols];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                copyBoard[i][j] = board[i][j];
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (checkNeighbours(i, j, copyBoard)) {
                    board[i][j] = 1;
                } else {
                    board[i][j] = 0;
                }
            }
        }
    }
}
