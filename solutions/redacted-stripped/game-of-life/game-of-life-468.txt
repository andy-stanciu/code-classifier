class Solution {

    public void method1(int[][] board) {
        int[][] nextState = new int[board.length][board[0].length];
        for (int i = 0; i < board.length; ++i) {
            for (int j = 0; j < board[i].length; ++j) {
                nextState[i][j] = getCellState(i, j, board);
            }
        }
        for (int i = 0; i < board.length; ++i) {
            for (int j = 0; j < board[i].length; ++j) {
                board[i][j] = nextState[i][j];
            }
        }
    }

    public int getCellState(int row, int col, int[][] board) {
        int neighbourCount = 0;
        int rowLength = board.length - 1;
        int colLength = board[0].length - 1;
        if (row > 0 && col > 0)
            neighbourCount += board[row - 1][col - 1];
        if (row > 0) {
            neighbourCount += board[row - 1][col];
            if (col < colLength) {
                neighbourCount += board[row - 1][col + 1];
            }
        }
        if (col < colLength) {
            neighbourCount += board[row][col + 1];
        }
        if (col > 0) {
            neighbourCount += board[row][col - 1];
            if (row < rowLength) {
                neighbourCount += board[row + 1][col - 1];
            }
        }
        if (row < rowLength) {
            neighbourCount += board[row + 1][col];
        }
        if (row < rowLength && col < colLength)
            neighbourCount += board[row + 1][col + 1];
        if (board[row][col] == 0 && neighbourCount == 3)
            return 1;
        else if (board[row][col] == 1 && (neighbourCount == 2 || neighbourCount == 3))
            return 1;
        else
            return 0;
    }
}
