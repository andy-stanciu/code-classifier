class Solution {

    private int onesCount(int i, int j, int[][] board, int m, int n) {
        int count = 0;
        for (int a = -1; a <= 1; a++) {
            for (int b = -1; b <= 1; b++) {
                int checkRow = i + a;
                int checkColumn = j + b;
                if (checkRow >= 0 && checkColumn >= 0 && checkRow < m && checkColumn < n) {
                    int value = board[checkRow][checkColumn];
                    if (i == checkRow && j == checkColumn) {
                        continue;
                    } else if (value == 1 || value == 3) {
                        count++;
                    }
                }
            }
        }
        return count;
    }

    public int[][] method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int count = onesCount(i, j, board, m, n);
                if (board[i][j] == 1) {
                    if (count == 2 || count == 3) {
                        board[i][j] = 3;
                    } else {
                        board[i][j] = 1;
                    }
                } else if (count == 3) {
                    board[i][j] = 2;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 1) {
                    board[i][j] = 0;
                } else if (board[i][j] == 2) {
                    board[i][j] = 1;
                } else if (board[i][j] == 3) {
                    board[i][j] = 1;
                }
            }
        }
        return board;
    }
}
