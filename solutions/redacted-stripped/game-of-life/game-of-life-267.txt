class Solution {

    public void method1(int[][] board) {
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int nbr = getNeighbours(board, i, j);
                if (board[i][j] == 1 && (nbr < 2 || nbr > 3)) {
                    board[i][j] = 2;
                } else if (board[i][j] == 0 && nbr == 3) {
                    board[i][j] = -1;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == -1) {
                    board[i][j] = 1;
                } else if (board[i][j] == 2) {
                    board[i][j] = 0;
                }
            }
        }
    }

    public int getNeighbours(int[][] board, int i, int j) {
        int[][] dirs = { { 0, 1 }, { 1, 0 }, { 0, -1 }, { -1, 0 }, { -1, -1 }, { 1, 1 }, { -1, 1 }, { 1, -1 } };
        int count = 0;
        for (int t = 0; t < 8; t++) {
            int r = i + dirs[t][0];
            int c = j + dirs[t][1];
            if (r >= 0 && r < board.length && c >= 0 && c < board[0].length && board[r][c] > 0) {
                count++;
            }
        }
        return count;
    }
}
