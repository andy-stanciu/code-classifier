class Solution {

    public void method1(int[][] board) {
        int[][] temp = new int[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                temp[i][j] = checkNeighbor(board, i, j);
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                board[i][j] = temp[i][j];
            }
        }
    }

    public int checkNeighbor(int[][] board, int i, int j) {
        int countLives = 0;
        int[][] neighbors = { { i - 1, j - 1 }, { i - 1, j }, { i - 1, j + 1 }, { i, j - 1 }, { i, j + 1 }, { i + 1, j - 1 }, { i + 1, j }, { i + 1, j + 1 } };
        for (int[] neighbor : neighbors) {
            if (neighbor[0] < 0 || neighbor[1] < 0 || neighbor[0] >= board.length || neighbor[1] >= board[0].length) {
                continue;
            }
            if (board[neighbor[0]][neighbor[1]] == 1) {
                countLives++;
            }
        }
        if ((board[i][j] == 1) && (countLives < 2 || countLives > 3)) {
            return 0;
        } else if ((board[i][j] == 1) && (countLives == 2 || countLives == 3)) {
            return 1;
        } else if ((board[i][j] == 0) && countLives == 3) {
            return 1;
        } else {
            return 0;
        }
    }
}
