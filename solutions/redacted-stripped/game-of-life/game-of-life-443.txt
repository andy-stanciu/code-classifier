class Solution {

    public void method1(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int[] counts = getCounts(i, j, board);
                int zeroCount = counts[0];
                int oneCount = counts[1];
                if (board[i][j] == 0) {
                    if (oneCount == 3) {
                        board[i][j] = -1;
                    }
                } else {
                    if (oneCount < 2 || oneCount > 3) {
                        board[i][j] = 10;
                    }
                }
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == -1) {
                    board[i][j] = 1;
                } else if (board[i][j] == 10) {
                    board[i][j] = 0;
                }
            }
        }
    }

    public int[] getCounts(int i, int j, int[][] board) {
        int zeroes = 0;
        int ones = 0;
        if (i > 0) {
            if (board[i - 1][j] == 0 || board[i - 1][j] == -1) {
                zeroes++;
            } else {
                ones++;
            }
        }
        if (j > 0) {
            if (board[i][j - 1] == 0 || board[i][j - 1] == -1) {
                zeroes++;
            } else {
                ones++;
            }
        }
        if (i < board.length - 1) {
            if (board[i + 1][j] == 0 || board[i + 1][j] == -1) {
                zeroes++;
            } else {
                ones++;
            }
        }
        if (j < board[0].length - 1) {
            if (board[i][j + 1] == 0 || board[i][j + 1] == -1) {
                zeroes++;
            } else {
                ones++;
            }
        }
        if (i > 0 && j > 0) {
            if (board[i - 1][j - 1] == 0 || board[i - 1][j - 1] == -1) {
                zeroes++;
            } else {
                ones++;
            }
        }
        if (i < board.length - 1 && j < board[0].length - 1) {
            if (board[i + 1][j + 1] == 0 || board[i + 1][j + 1] == -1) {
                zeroes++;
            } else {
                ones++;
            }
        }
        if (i < board.length - 1 && j > 0) {
            if (board[i + 1][j - 1] == 0 || board[i + 1][j - 1] == -1) {
                zeroes++;
            } else {
                ones++;
            }
        }
        if (i > 0 && j < board[0].length - 1) {
            if (board[i - 1][j + 1] == 0 || board[i - 1][j + 1] == -1) {
                zeroes++;
            } else {
                ones++;
            }
        }
        return new int[] { zeroes, ones };
    }
}
