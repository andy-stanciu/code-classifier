class Solution {

    public void method1(int[][] board) {
        int n = board.length;
        int m = board[0].length;
        int[][] res = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int live = getLiveNeighbourCount(board, i, j, n, m);
                if (board[i][j] == 1) {
                    if (live < 2) {
                        res[i][j] = 0;
                    }
                    if (live > 3) {
                        res[i][j] = 0;
                    }
                    if (live == 2 || live == 3) {
                        res[i][j] = 1;
                    }
                }
                if (board[i][j] == 0) {
                    if (live == 3) {
                        res[i][j] = 1;
                    }
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                board[i][j] = res[i][j];
            }
        }
    }

    private int getLiveNeighbourCount(int[][] board, int i, int j, int n, int m) {
        int live = 0;
        if (i > 0 && j > 0 && board[i - 1][j - 1] == 1) {
            live++;
        }
        if (i > 0 && board[i - 1][j] == 1) {
            live++;
        }
        if (i > 0 && j < m - 1 && board[i - 1][j + 1] == 1) {
            live++;
        }
        if (j > 0 && board[i][j - 1] == 1) {
            live++;
        }
        if (j < m - 1 && board[i][j + 1] == 1) {
            live++;
        }
        if (i < n - 1 && j > 0 && board[i + 1][j - 1] == 1) {
            live++;
        }
        if (i < n - 1 && board[i + 1][j] == 1) {
            live++;
        }
        if (i < n - 1 && j < m - 1 && board[i + 1][j + 1] == 1) {
            live++;
        }
        return live;
    }
}
