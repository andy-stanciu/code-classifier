class Solution {

    int[][] dirs = new int[][] { { -1, -1 }, { -1, 0 }, { -1, 1 }, { 0, -1 }, { 0, 1 }, { 1, -1 }, { 1, 0 }, { 1, 1 } };

    public void method1(int[][] board) {
        int rows = board.length;
        int colums = board[0].length;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < colums; j++) {
                int liveNeighobour = getLiveNeighobourCount(board, i, j);
                if (board[i][j] == 1 && (liveNeighobour < 2 || liveNeighobour > 3)) {
                    board[i][j] = -1;
                } else if (board[i][j] == 0 && liveNeighobour == 3) {
                    board[i][j] = 2;
                }
            }
        }
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < colums; j++) {
                if (board[i][j] == -1) {
                    board[i][j] = 0;
                }
                if (board[i][j] == 2) {
                    board[i][j] = 1;
                }
            }
        }
    }

    private int getLiveNeighobourCount(int[][] board, int row, int col) {
        int count = 0;
        int rows = board.length;
        int colums = board[0].length;
        for (int[] dir : dirs) {
            int x = row + dir[0];
            int y = col + dir[1];
            if (x >= 0 && x < rows && y >= 0 && y < colums && (board[x][y] == 1 || board[x][y] == -1)) {
                count++;
            }
        }
        return count;
    }
}
