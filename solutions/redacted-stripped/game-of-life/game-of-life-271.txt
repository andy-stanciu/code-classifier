class Solution {

    public static int find(int i, int j, int[][] board, int n, int m) {
        int count = 0;
        if (i - 1 >= 0 && j - 1 >= 0 && board[i - 1][j - 1] == 1)
            count++;
        if (i - 1 >= 0 && board[i - 1][j] == 1)
            count++;
        if (i - 1 >= 0 && j + 1 < m && board[i - 1][j + 1] == 1)
            count++;
        if (j + 1 < m && board[i][j + 1] == 1)
            count++;
        if (i + 1 < n && j + 1 < m && board[i + 1][j + 1] == 1)
            count++;
        if (i + 1 < n && board[i + 1][j] == 1)
            count++;
        if (i + 1 < n && j - 1 >= 0 && board[i + 1][j - 1] == 1)
            count++;
        if (j - 1 >= 0 && board[i][j - 1] == 1)
            count++;
        System.out.print(count);
        if (board[i][j] == 1 && count < 2)
            return 0;
        if (board[i][j] == 1 && (count == 2 || count == 3))
            return 1;
        if (board[i][j] == 1 && count > 3)
            return 0;
        if (board[i][j] == 0 && count == 3)
            return 1;
        return board[i][j];
    }

    public void method1(int[][] board) {
        int n = board.length;
        int m = board[0].length;
        int[][] temp = new int[n][m];
        for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) temp[i][j] = find(i, j, board, n, m);
        for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) board[i][j] = temp[i][j];
    }
}
