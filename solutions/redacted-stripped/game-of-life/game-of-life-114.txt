class Solution {

    private int liveNeighbours(int[][] board, int m, int n, int row, int col) {
        int x = 0;
        if (row > 0 && col > 0 && board[row - 1][col - 1] == 1) {
            x++;
        }
        if (row > 0 && board[row - 1][col] == 1) {
            x++;
        }
        if (row > 0 && col < n - 1 && board[row - 1][col + 1] == 1) {
            x++;
        }
        if (col > 0 && board[row][col - 1] == 1) {
            x++;
        }
        if (col < n - 1 && board[row][col + 1] == 1) {
            x++;
        }
        if (row < m - 1 && col > 0 && board[row + 1][col - 1] == 1) {
            x++;
        }
        if (row < m - 1 && board[row + 1][col] == 1) {
            x++;
        }
        if (row < m - 1 && col < n - 1 && board[row + 1][col + 1] == 1) {
            x++;
        }
        return x;
    }

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] newBoard = new int[m][];
        for (int i = 0; i < m; i++) {
            newBoard[i] = new int[n];
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 1) {
                    if (liveNeighbours(board, m, n, i, j) < 2) {
                        newBoard[i][j] = 0;
                    } else if (liveNeighbours(board, m, n, i, j) > 3) {
                        newBoard[i][j] = 0;
                    } else {
                        newBoard[i][j] = 1;
                    }
                } else {
                    if (liveNeighbours(board, m, n, i, j) == 3) {
                        newBoard[i][j] = 1;
                    }
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = newBoard[i][j];
            }
        }
    }
}
