class Solution {

    public static int countAliveAround(int i, int j, int[][] board) {
        int count = 0;
        if (i - 1 >= 0 && j - 1 >= 0) {
            count += board[i - 1][j - 1] % 2;
        }
        if (j - 1 >= 0) {
            count += board[i][j - 1] % 2;
        }
        if (i + 1 < board.length && j - 1 >= 0) {
            count += board[i + 1][j - 1] % 2;
        }
        if (i + 1 < board.length) {
            count += board[i + 1][j] % 2;
        }
        if (i + 1 < board.length && j + 1 < board[0].length) {
            count += board[i + 1][j + 1] % 2;
        }
        if (j + 1 < board[0].length) {
            count += board[i][j + 1] % 2;
        }
        if (i - 1 >= 0 && j + 1 < board[0].length) {
            count += board[i - 1][j + 1] % 2;
        }
        if (i - 1 >= 0) {
            count += board[i - 1][j] % 2;
        }
        return count;
    }

    public static boolean canSurvive(int i, int j, int[][] board) {
        int state = board[i][j];
        int count = countAliveAround(i, j, board);
        if (state == 1) {
            if (count >= 2 && count <= 3) {
                return true;
            } else {
                return false;
            }
        } else {
            if (count == 3) {
                return true;
            } else {
                return false;
            }
        }
    }

    public void method1(int[][] board) {
        int cols = board.length;
        int rows = board[0].length;
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                if (canSurvive(i, j, board)) {
                    if (board[i][j] == 1) {
                        board[i][j] = 3;
                    } else if (board[i][j] == 0) {
                        board[i][j] = 2;
                    }
                }
            }
        }
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                board[i][j] /= 2;
            }
        }
    }
}
