class Solution {

    public void method1(int[][] board) {
        int[][] b = new int[board.length][board[0].length];
        for (int i = 0; i < b.length; i++) for (int j = 0; j < b[0].length; j++) b[i][j] = board[i][j];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int n = neighbour(b, i, j);
                if (b[i][j] == 1) {
                    if (n < 2)
                        board[i][j] = 0;
                    else if (n > 3)
                        board[i][j] = 0;
                } else {
                    if (n == 3)
                        board[i][j] = 1;
                }
            }
        }
    }

    private int neighbour(int[][] b, int x, int y) {
        int count = 0;
        if (x > 0)
            if (b[x - 1][y] == 1)
                count++;
        if (y > 0)
            if (b[x][y - 1] == 1)
                count++;
        if (x < b.length - 1)
            if (b[x + 1][y] == 1)
                count++;
        if (y < b[0].length - 1)
            if (b[x][y + 1] == 1)
                count++;
        if (x > 0 && y > 0)
            if (b[x - 1][y - 1] == 1)
                count++;
        if (x < b.length - 1 && y < b[0].length - 1)
            if (b[x + 1][y + 1] == 1)
                count++;
        if (x < b.length - 1 && y > 0)
            if (b[x + 1][y - 1] == 1)
                count++;
        if (x > 0 && y < b[0].length - 1)
            if (b[x - 1][y + 1] == 1)
                count++;
        return count;
    }
}
