class Solution {

    public void method1(int[][] board) {
        int live = 11, dead = 10, neighbor;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                neighbor = countNeighbor(i, j, board);
                if (board[i][j] == 0 && neighbor == 3) {
                    board[i][j] = live;
                }
                if (board[i][j] == 1) {
                    if (neighbor < 2 || neighbor > 3) {
                        board[i][j] = dead;
                    }
                }
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == dead) {
                    board[i][j] = 0;
                }
                if (board[i][j] == live) {
                    board[i][j] = 1;
                }
            }
        }
    }

    private int countNeighbor(int i, int j, int[][] board) {
        int[][] indexes = { { 0, 1 }, { 0, -1 }, { 1, 0 }, { -1, 0 }, { 1, 1 }, { -1, -1 }, { -1, 1 }, { 1, -1 } };
        int count = 0, x, y;
        for (int[] idx : indexes) {
            x = i + idx[0];
            y = j + idx[1];
            if (x >= 0 && y >= 0 && x < board.length && y < board[0].length) {
                if (board[x][y] == 1 || board[x][y] == 10)
                    count++;
            }
        }
        return count;
    }
}
