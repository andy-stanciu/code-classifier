class Solution {

    public void method1(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] nextState = new int[m][n];
        int[][] neighbors = { { 0, 1 }, { 0, -1 }, { 1, 0 }, { -1, 0 }, { 1, 1 }, { -1, -1 }, { 1, -1 }, { -1, 1 } };
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int curState = board[i][j];
                int neighborsCount = 0;
                for (int[] nb : neighbors) {
                    int nbI = i + nb[0];
                    int nbJ = j + nb[1];
                    if (nbI >= 0 && nbI < m && nbJ >= 0 && nbJ < n && board[nbI][nbJ] == 1) {
                        neighborsCount++;
                    }
                }
                if (neighborsCount < 2 || neighborsCount > 3) {
                    nextState[i][j] = 0;
                } else if (neighborsCount == 2) {
                    nextState[i][j] = curState;
                } else if (neighborsCount == 3) {
                    nextState[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = nextState[i][j];
            }
        }
    }
}
