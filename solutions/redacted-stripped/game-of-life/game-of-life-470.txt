class Solution {

    public void method1(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int neighbors = getNeighbors(i, j, board);
                if (board[i][j] == 1 && (neighbors < 2 || neighbors > 3))
                    board[i][j] = 3;
                if (board[i][j] == 0 && neighbors == 3)
                    board[i][j] = 2;
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == 2)
                    board[i][j] = 1;
                else if (board[i][j] == 3)
                    board[i][j] = 0;
            }
        }
    }

    private int getNeighbors(int i, int j, int[][] board) {
        int count = 0;
        if (i > 0 && (board[i - 1][j] == 1 || board[i - 1][j] == 3))
            count++;
        if (i < board.length - 1 && (board[i + 1][j] == 1 || board[i + 1][j] == 3))
            count++;
        if (j > 0 && (board[i][j - 1] == 1 || board[i][j - 1] == 3))
            count++;
        if (j < board[0].length - 1 && (board[i][j + 1] == 1 || board[i][j + 1] == 3))
            count++;
        if (i > 0 && j > 0 && (board[i - 1][j - 1] == 1 || board[i - 1][j - 1] == 3))
            count++;
        if (i < board.length - 1 && j < board[0].length - 1 && (board[i + 1][j + 1] == 1 || board[i + 1][j + 1] == 3))
            count++;
        if (i > 0 && j < board[0].length - 1 && (board[i - 1][j + 1] == 1 || board[i - 1][j + 1] == 3))
            count++;
        if (i < board.length - 1 && j > 0 && (board[i + 1][j - 1] == 1 || board[i + 1][j - 1] == 3))
            count++;
        return count;
    }
}
