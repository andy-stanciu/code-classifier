class Solution {

    int[] X = new int[] { 0, 1, 1, 1, 0, -1, -1, -1 };

    int[] Y = new int[] { 1, 1, 0, -1, -1, -1, 0, 1 };

    public int method1(int[][] board, int m, int n, int i, int j) {
        int c = 0;
        for (int k = 0; k < 8; k++) {
            int next_i = X[k] + i;
            int next_j = Y[k] + j;
            if (next_i >= 0 && next_i < m && next_j >= 0 && next_j < n && board[next_i][next_j] == 1)
                c++;
        }
        return c;
    }

    public void method2(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] temp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int c = method1(board, m, n, i, j);
                if (board[i][j] == 1) {
                    if (c < 2) {
                        temp[i][j] = 0;
                    } else if (c > 3) {
                        temp[i][j] = 0;
                    } else {
                        temp[i][j] = 1;
                    }
                } else {
                    if (c == 3) {
                        temp[i][j] = 1;
                    } else {
                        temp[i][j] = 0;
                    }
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = temp[i][j];
            }
        }
    }
}
