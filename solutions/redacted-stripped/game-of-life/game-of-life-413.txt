class Solution {

    private static final int[][] moves = { { 1, 0 }, { 0, 1 }, { 1, 1 }, { -1, 0 }, { 0, -1 }, { -1, -1 }, { 1, -1 }, { -1, 1 } };

    public void method1(int[][] board) {
        var rows = board.length;
        var cols = board[0].length;
        var state = new int[rows][cols];
        for (int i = 0; i < rows; i++) state[i] = Arrays.copyOf(board[i], cols);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                eval(state, board, r, c);
            }
        }
    }

    static void eval(int[][] prevState, int[][] nextState, int r, int c) {
        int count = 0;
        for (int[] m : moves) {
            count += count(prevState, r + m[0], c + m[1]);
        }
        if (prevState[r][c] == 1) {
            if (count < 2 || count > 3)
                nextState[r][c] = 0;
        } else {
            if (count == 3)
                nextState[r][c] = 1;
        }
    }

    static int count(int[][] grid, int r, int c) {
        if (r < 0 || r > grid.length - 1 || c < 0 || c > grid[0].length - 1)
            return 0;
        return grid[r][c];
    }
}
