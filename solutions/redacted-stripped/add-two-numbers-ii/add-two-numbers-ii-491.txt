class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        ListNode ans = null;
        int rem = 0;
        while (l1 != null && l2 != null) {
            int sum = l1.val + l2.val + rem;
            ListNode node = new ListNode(sum % 10);
            rem = sum / 10;
            if (ans == null) {
                ans = node;
            } else {
                node.next = ans;
                ans = node;
            }
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            int sum = l1.val + rem;
            ListNode node = new ListNode(sum % 10);
            rem = sum / 10;
            if (ans == null) {
                ans = node;
            } else {
                node.next = ans;
                ans = node;
            }
            l1 = l1.next;
        }
        while (l2 != null) {
            int sum = l2.val + rem;
            ListNode node = new ListNode(sum % 10);
            rem = sum / 10;
            if (ans == null) {
                ans = node;
            } else {
                node.next = ans;
                ans = node;
            }
            l2 = l2.next;
        }
        if (rem != 0) {
            ListNode node = new ListNode(rem);
            node.next = ans;
            ans = node;
        }
        return ans;
    }

    public ListNode reverse(ListNode head) {
        ListNode curr = null;
        ListNode temp = head;
        while (head != null) {
            temp = temp.next;
            head.next = curr;
            curr = head;
            head = temp;
        }
        return curr;
    }
}
