class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNodeWrapper w1 = new ListNodeWrapper(l1);
        ListNodeWrapper w2 = new ListNodeWrapper(l2);
        reverse(w1);
        reverse(w2);
        l1 = w1.head;
        l2 = w2.head;
        ListNode node = new ListNode();
        int sum = 0;
        int carry = 0;
        while (l1 != null || l2 != null) {
            if (l1 != null)
                sum += l1.val;
            if (l2 != null)
                sum += l2.val;
            node.val = sum % 10;
            carry = sum / 10;
            ListNode temp = new ListNode(carry);
            sum = carry;
            temp.next = node;
            node = temp;
            l1 = l1 != null ? l1.next : null;
            l2 = l2 != null ? l2.next : null;
        }
        return carry == 0 ? node.next : node;
    }

    private void reverse(ListNodeWrapper wrapper) {
        if (wrapper.head == null || wrapper.head.next == null)
            return;
        ListNode prev = null;
        ListNode cur = wrapper.head;
        ListNode next = null;
        while (cur != null) {
            next = cur.next;
            cur.next = prev;
            prev = cur;
            cur = next;
        }
        wrapper.head = prev;
    }
}

class ListNodeWrapper {

    ListNode head;

    public ListNodeWrapper(ListNode head) {
        this.head = head;
    }
}
