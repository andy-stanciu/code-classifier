class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode prev = null;
        ListNode first = l1;
        ListNode second = l2;
        int x = 0;
        while (first != null) {
            if (second != null) {
                first.val += second.val + x;
            } else {
                first.val += x;
            }
            x = 0;
            if (first.val >= 10) {
                x = first.val / 10;
                first.val %= 10;
            }
            prev = first;
            first = first.next;
            if (second != null) {
                second = second.next;
            }
        }
        if (x != 0) {
            ListNode newNode = new ListNode(x);
            newNode.next = null;
            prev.next = newNode;
        }
        return l1;
    }

    public ListNode reverseList(ListNode head) {
        if (head == null) {
            return head;
        }
        ListNode prev = null;
        ListNode present = head;
        ListNode next = present.next;
        while (present != null) {
            present.next = prev;
            prev = present;
            present = next;
            if (next != null) {
                next = next.next;
            }
        }
        return prev;
    }

    public ListNode method2(ListNode l1, ListNode l2) {
        if (l1 == null || (l1.val == 0 && l1.next == null)) {
            return l2;
        } else if (l2 == null || (l2.val == 0 && l2.next == null)) {
            return l1;
        }
        int len1 = 0, len2 = 0;
        ListNode first = l1;
        ListNode second = l2;
        while (first != null) {
            len1++;
            first = first.next;
        }
        while (second != null) {
            len2++;
            second = second.next;
        }
        if (len1 < len2) {
            first = l1;
            l1 = l2;
            l2 = first;
        }
        l1 = reverseList(l1);
        l2 = reverseList(l2);
        ListNode l3 = method1(l1, l2);
        return reverseList(l3);
    }
}
