class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<Integer> stackL1 = new Stack<>();
        while (l1 != null) {
            stackL1.push(l1.val);
            l1 = l1.next;
        }
        Stack<Integer> stackL2 = new Stack<>();
        while (l2 != null) {
            stackL2.push(l2.val);
            l2 = l2.next;
        }
        ListNode result = null;
        int carryOver = 0;
        while (!stackL1.isEmpty() || !stackL2.isEmpty() || carryOver != 0) {
            int digit1 = !stackL1.empty() ? stackL1.pop() : 0;
            int digit2 = !stackL2.empty() ? stackL2.pop() : 0;
            int sum = digit1 + digit2 + carryOver;
            int digit = sum % 10;
            carryOver = sum / 10;
            ListNode newNode = new ListNode(digit);
            newNode.next = result;
            result = newNode;
        }
        return result;
    }
}
