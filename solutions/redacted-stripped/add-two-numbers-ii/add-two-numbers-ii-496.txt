class Solution {

    public ListNode Reverse(ListNode h) {
        ListNode temp = null;
        ListNode cur = h;
        while (cur != null) {
            ListNode current = cur.next;
            cur.next = temp;
            temp = cur;
            cur = current;
        }
        return temp;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode m1 = Reverse(l1);
        ListNode m2 = Reverse(l2);
        ListNode d = new ListNode();
        ListNode curr = d;
        int carry = 0;
        while (m1 != null || m2 != null || carry == 1) {
            int sum = 0;
            if (m1 != null) {
                sum += m1.val;
                m1 = m1.next;
            }
            if (m2 != null) {
                sum += m2.val;
                m2 = m2.next;
            }
            sum += carry;
            carry = sum / 10;
            ListNode node = new ListNode(sum % 10);
            curr.next = node;
            curr = curr.next;
        }
        ListNode result = Reverse(d.next);
        return result;
    }
}
