class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<Integer> l1s = new Stack<Integer>();
        Stack<Integer> l2s = new Stack<Integer>();
        while (l1 != null) {
            l1s.push(l1.val);
            l1 = l1.next;
        }
        while (l2 != null) {
            l2s.push(l2.val);
            l2 = l2.next;
        }
        Stack<Integer> sum = new Stack<Integer>();
        int carry = 0;
        while ((!l1s.isEmpty()) && (!l2s.isEmpty())) {
            int tSum = carry + ((l1s.pop() + l2s.pop()));
            carry = tSum / 10;
            tSum = tSum % 10;
            sum.push(tSum);
        }
        while (!l1s.isEmpty()) {
            int tSum = carry + l1s.pop();
            carry = tSum / 10;
            tSum = tSum % 10;
            sum.push(tSum);
        }
        while (!l2s.isEmpty()) {
            int tSum = carry + l2s.pop();
            carry = tSum / 10;
            tSum = tSum % 10;
            sum.push(tSum);
        }
        if (carry != 0) {
            sum.push(carry);
        }
        ListNode node = new ListNode(sum.pop());
        ListNode temp = node;
        while (!sum.isEmpty()) {
            ListNode dummy = new ListNode(sum.pop());
            temp.next = dummy;
            temp = temp.next;
        }
        return node;
    }
}
