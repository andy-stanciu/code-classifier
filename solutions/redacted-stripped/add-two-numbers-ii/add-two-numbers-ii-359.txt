class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode temp = l1;
        ListNode temp1 = l2;
        Stack<Integer> st = new Stack<>();
        Stack<Integer> st1 = new Stack<>();
        while (temp != null && temp1 != null) {
            st.push(temp.val);
            temp = temp.next;
            st1.push(temp1.val);
            temp1 = temp1.next;
        }
        while (temp != null) {
            st.push(temp.val);
            temp = temp.next;
        }
        while (temp1 != null) {
            st1.push(temp1.val);
            temp1 = temp1.next;
        }
        int n = st.size();
        int n1 = st1.size();
        int look_ahead = 0;
        ListNode ans = new ListNode(0, null);
        while (true) {
            if (n != 0 && n1 != 0) {
                int x = st.pop() + st1.pop() + look_ahead;
                ans.val = x % 10;
                look_ahead = x / 10;
                ListNode ans1 = new ListNode(x, ans);
                ans = ans1;
                n--;
                n1--;
            } else if (n != 0) {
                int x = st.pop() + look_ahead;
                ans.val = x % 10;
                look_ahead = x / 10;
                ListNode ans1 = new ListNode(x, ans);
                ans = ans1;
                n--;
            } else if (n1 != 0) {
                int x = st1.pop() + look_ahead;
                ans.val = x % 10;
                look_ahead = x / 10;
                ListNode ans1 = new ListNode(x, ans);
                ans = ans1;
                n1--;
            } else {
                if (look_ahead != 0) {
                    System.out.println(look_ahead);
                    ans.val = look_ahead;
                    ListNode ans1 = new ListNode(look_ahead, ans);
                    ans = ans1;
                }
                break;
            }
        }
        return ans.next;
    }
}
