class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode reverse1 = reverse(l1);
        ListNode reverse2 = reverse(l2);
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        int carry = 0;
        while (reverse1 != null || reverse2 != null) {
            int val1 = (reverse1 != null ? reverse1.val : 0);
            int val2 = (reverse2 != null ? reverse2.val : 0);
            int sum = val1 + val2 + carry;
            carry = sum / 10;
            current.next = new ListNode(sum % 10);
            current = current.next;
            if (reverse1 != null)
                reverse1 = reverse1 = reverse1.next;
            if (reverse2 != null)
                reverse2 = reverse2 = reverse2.next;
        }
        if (carry > 0) {
            current.next = new ListNode(carry);
        }
        return reverse(dummy.next);
    }

    public ListNode reverse(ListNode head) {
        ListNode current = head;
        ListNode previous = null;
        ListNode next = null;
        while (current != null) {
            next = current.next;
            current.next = previous;
            previous = current;
            current = next;
        }
        return previous;
    }
}
