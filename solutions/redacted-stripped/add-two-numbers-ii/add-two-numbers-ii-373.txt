class Solution {

    ListNode head;

    ListNode tail;

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<Integer> st1 = new Stack<>();
        Stack<Integer> st2 = new Stack<>();
        while (l1 != null) {
            st1.push(l1.val);
            l1 = l1.next;
        }
        while (l2 != null) {
            st2.push(l2.val);
            l2 = l2.next;
        }
        int res = 0;
        while (st1.size() > 0 && st2.size() > 0) {
            int x = st1.pop() + st2.pop() + res;
            ListNode a = new ListNode(x % 10);
            method2(a);
            res = x / 10;
        }
        while (st1.size() > 0) {
            int x = st1.pop() + res;
            ListNode a = new ListNode(x % 10);
            method2(a);
            res = x / 10;
        }
        while (st2.size() > 0) {
            int x = st2.pop() + res;
            ListNode a = new ListNode(x % 10);
            method2(a);
            res = x / 10;
        }
        if (res != 0) {
            ListNode a = new ListNode(res);
            method2(a);
        }
        return this.head;
    }

    void method2(ListNode a) {
        if (tail == null) {
            head = tail = a;
        } else {
            a.next = head;
            head = a;
        }
    }
}
