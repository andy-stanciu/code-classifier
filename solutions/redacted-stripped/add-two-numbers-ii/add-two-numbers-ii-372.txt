class Solution {

    public ListNode reverse(ListNode a) {
        if (a == null || a.next == null) {
            return a;
        }
        ListNode nextnode = a;
        ListNode prev = null;
        ListNode curr = a;
        while (curr != null) {
            nextnode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextnode;
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode la = reverse(l1);
        ListNode lb = reverse(l2);
        int carry = 0;
        int sum = 0;
        ListNode dummy = new ListNode(-1);
        ListNode curr = dummy;
        while (la != null && lb != null) {
            int var = la.val + lb.val;
            sum = (var + carry);
            carry = sum / 10;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;
            la = la.next;
            lb = lb.next;
        }
        while (la != null) {
            sum = (la.val + carry);
            carry = sum / 10;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;
            la = la.next;
        }
        while (lb != null) {
            sum = (lb.val + carry);
            carry = sum / 10;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;
            lb = lb.next;
        }
        if (carry != 0) {
            curr.next = new ListNode(carry);
        }
        ListNode preans = dummy.next;
        dummy.next = null;
        ListNode ans = reverse(preans);
        return ans;
    }
}
