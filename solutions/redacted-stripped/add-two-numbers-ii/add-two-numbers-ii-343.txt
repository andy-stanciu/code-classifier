class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<Integer> st1 = new Stack();
        Stack<Integer> st2 = new Stack();
        ListNode t1 = l1;
        ListNode t2 = l2;
        while (t1 != null || t2 != null) {
            if (t1 != null) {
                st1.add(t1.val);
                t1 = t1.next;
            }
            if (t2 != null) {
                st2.add(t2.val);
                t2 = t2.next;
            }
        }
        Stack<Integer> st3 = new Stack();
        int carry = 0;
        int sum = 0;
        while (!st1.isEmpty() || !st2.isEmpty()) {
            if (!st1.isEmpty()) {
                sum = sum + st1.pop();
            }
            if (!st2.isEmpty()) {
                sum = sum + st2.pop();
            }
            sum = sum + carry;
            carry = sum / 10;
            st3.add(sum % 10);
            sum = 0;
        }
        if (carry > 0)
            st3.add(carry);
        ListNode res = new ListNode(st3.pop());
        ListNode tem = res;
        while (!st3.isEmpty()) {
            tem.next = new ListNode(st3.pop());
            tem = tem.next;
        }
        return res;
    }
}
