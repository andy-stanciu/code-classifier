class Solution {

    public ListNode reverse(ListNode head) {
        ListNode curr = head;
        ListNode prev = null;
        ListNode fwd = null;
        while (curr != null) {
            fwd = curr.next;
            curr.next = prev;
            prev = curr;
            curr = fwd;
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode t1 = reverse(l1);
        ListNode t2 = reverse(l2);
        ListNode ans = new ListNode(-1);
        ListNode t = ans;
        int num = 0, n = 0, r = 0, q = 0;
        while (t1 != null && t2 != null) {
            n = t1.val + t2.val + num;
            num = 0;
            if (n <= 9) {
                ListNode temp = new ListNode(n);
                t.next = temp;
                t = t.next;
            } else {
                r = n % 10;
                q = n / 10;
                ListNode temp = new ListNode(r);
                t.next = temp;
                t = t.next;
                num = q;
            }
            t1 = t1.next;
            t2 = t2.next;
        }
        if (t1 != null) {
            while (t1 != null) {
                n = t1.val + num;
                num = 0;
                if (n <= 9) {
                    ListNode temp = new ListNode(n);
                    t.next = temp;
                    t = t.next;
                } else {
                    r = n % 10;
                    q = n / 10;
                    ListNode temp = new ListNode(r);
                    t.next = temp;
                    t = t.next;
                    num = q;
                }
                t1 = t1.next;
            }
        }
        if (t2 != null) {
            while (t2 != null) {
                n = t2.val + num;
                num = 0;
                if (n <= 9) {
                    ListNode temp = new ListNode(n);
                    t.next = temp;
                    t = t.next;
                } else {
                    r = n % 10;
                    q = n / 10;
                    ListNode temp = new ListNode(r);
                    t.next = temp;
                    t = t.next;
                    num = q;
                }
                t2 = t2.next;
            }
        }
        if (num > 0) {
            ListNode temp = new ListNode(num);
            t.next = temp;
            t = t.next;
        }
        ans = ans.next;
        return reverse(ans);
    }
}
