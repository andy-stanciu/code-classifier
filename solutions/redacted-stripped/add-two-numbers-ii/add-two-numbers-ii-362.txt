class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<Integer> s1 = new Stack<Integer>();
        Stack<Integer> s2 = new Stack<Integer>();
        while (l1 != null) {
            s1.push(l1.val);
            l1 = l1.next;
        }
        while (l2 != null) {
            s2.push(l2.val);
            l2 = l2.next;
        }
        ListNode l3 = null;
        int carry = 0;
        while (!s1.empty() || !s2.empty() || carry != 0) {
            int val1 = !s1.empty() ? s1.pop() : 0;
            int val2 = !s2.empty() ? s2.pop() : 0;
            int sum = carry + val1 + val2;
            carry = sum / 10;
            int digit = sum % 10;
            ListNode newNode = new ListNode(digit);
            newNode.next = l3;
            l3 = newNode;
        }
        return l3;
    }
}
