class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<Integer> first = new Stack<>();
        Stack<Integer> second = new Stack<>();
        Stack<Integer> sum = new Stack<>();
        while (l1 != null && l2 != null) {
            first.push(l1.val);
            l1 = l1.next;
            second.push(l2.val);
            l2 = l2.next;
        }
        while (l1 != null) {
            first.push(l1.val);
            l1 = l1.next;
        }
        while (l2 != null) {
            second.push(l2.val);
            l2 = l2.next;
        }
        int carry = 0;
        while (!first.isEmpty() && !second.isEmpty()) {
            int f = first.pop();
            int s = second.pop();
            int var1 = f + s + carry;
            int ones = var1 % 10;
            int tens = var1 / 10;
            sum.push(ones);
            carry = tens;
        }
        while (!first.isEmpty()) {
            int f = first.pop();
            int var1 = f + carry;
            int ones = var1 % 10;
            int tens = var1 / 10;
            sum.push(ones);
            carry = tens;
        }
        while (!second.isEmpty()) {
            int s = second.pop();
            int var1 = s + carry;
            int ones = var1 % 10;
            int tens = var1 / 10;
            sum.push(ones);
            carry = tens;
        }
        ListNode head = new ListNode(-1);
        ListNode curr = head;
        while (!sum.isEmpty()) {
            ListNode recent = new ListNode(sum.pop());
            curr.next = recent;
            curr = curr.next;
        }
        if (carry != 0) {
            ListNode recent = new ListNode(carry);
            recent.next = head.next;
            head.next = recent;
        }
        return head.next;
    }
}
