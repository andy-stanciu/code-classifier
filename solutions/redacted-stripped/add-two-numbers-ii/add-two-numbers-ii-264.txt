class Solution {

    public static ListNode rev(ListNode head) {
        ListNode prev = null;
        while (head != null) {
            ListNode next_node = head.next;
            head.next = prev;
            prev = head;
            head = next_node;
            if (next_node != null) {
                next_node = next_node.next;
            }
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode t1 = rev(l1);
        ListNode t2 = rev(l2);
        ListNode dummy = new ListNode(0);
        ListNode temp = dummy;
        int carry = 0;
        while (t1 != null || t2 != null) {
            int x = 0;
            int y = 0;
            if (t1 != null) {
                x = t1.val;
            } else {
                x = 0;
            }
            if (t2 != null) {
                y = t2.val;
            } else {
                y = 0;
            }
            int sum = carry + x + y;
            carry = sum / 10;
            ListNode node = new ListNode(sum % 10);
            temp.next = node;
            temp = temp.next;
            if (t1 != null)
                t1 = t1.next;
            if (t2 != null)
                t2 = t2.next;
        }
        if (carry > 0) {
            temp.next = new ListNode(carry);
        }
        return rev(dummy.next);
    }
}
