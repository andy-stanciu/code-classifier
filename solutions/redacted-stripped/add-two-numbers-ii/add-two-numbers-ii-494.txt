class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        ListNode summed = sum(l1, l2);
        return reverse(summed);
    }

    private ListNode sum(ListNode l1, ListNode l2) {
        ListNode currL1 = l1;
        ListNode currL2 = l2;
        ListNode dummy = new ListNode(-1);
        ListNode curr = dummy;
        int carry = 0;
        while (currL1 != null && currL2 != null) {
            int sum = carry + currL1.val + currL2.val;
            if (sum >= 10) {
                sum = sum % 10;
                carry = 1;
            } else {
                carry = 0;
            }
            currL1 = currL1.next;
            currL2 = currL2.next;
            curr.next = new ListNode(sum);
            curr = curr.next;
        }
        while (currL1 != null) {
            int sum = carry + currL1.val;
            if (sum >= 10) {
                sum = sum % 10;
                carry = 1;
            } else {
                carry = 0;
            }
            currL1 = currL1.next;
            curr.next = new ListNode(sum);
            curr = curr.next;
        }
        while (currL2 != null) {
            int sum = carry + currL2.val;
            if (sum >= 10) {
                sum = sum % 10;
                carry = 1;
            } else {
                carry = 0;
            }
            currL2 = currL2.next;
            curr.next = new ListNode(sum);
            curr = curr.next;
        }
        if (carry != 0) {
            curr.next = new ListNode(1);
            curr = curr.next;
        }
        return dummy.next;
    }

    private ListNode reverse(ListNode head) {
        if (head == null)
            return null;
        ListNode prev = null;
        ListNode curr = head;
        ListNode next = curr.next;
        while (next != null) {
            curr.next = prev;
            prev = curr;
            curr = next;
            next = curr.next;
        }
        curr.next = prev;
        prev = curr;
        return prev;
    }
}
