class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        final Stack<Integer> stack1 = new Stack<>();
        final Stack<Integer> stack2 = new Stack<>();
        while (l1 != null || l2 != null) {
            if (l1 != null) {
                stack1.push(l1.val);
                l1 = l1.next;
            }
            if (l2 != null) {
                stack2.push(l2.val);
                l2 = l2.next;
            }
        }
        int extra = 0;
        ListNode head = null;
        int sum = 0;
        while (true) {
            if (!stack1.isEmpty() && !stack2.isEmpty()) {
                sum = stack1.pop() + stack2.pop() + extra;
            } else if (!stack1.isEmpty()) {
                sum = stack1.pop() + extra;
            } else if (!stack2.isEmpty()) {
                sum = stack2.pop() + extra;
            } else {
                break;
            }
            extra = sum > 9 ? 1 : 0;
            head = new ListNode(sum % 10, head);
        }
        return extra == 1 ? new ListNode(1, head) : head;
    }
}
