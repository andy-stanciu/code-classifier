class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode temp1 = reverse(l1);
        ListNode temp2 = reverse(l2);
        ListNode res = new ListNode(0);
        ListNode ans = res;
        int carry = 0;
        while (temp1 != null || temp2 != null) {
            if (temp1 != null) {
                carry = carry + temp1.val;
                temp1 = temp1.next;
            }
            if (temp2 != null) {
                carry = carry + temp2.val;
                temp2 = temp2.next;
            }
            res.next = new ListNode(carry % 10);
            res = res.next;
            carry /= 10;
        }
        if (carry == 1)
            res.next = new ListNode(1);
        ListNode head2 = ans.next;
        return reverse(head2);
    }

    ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode current = head;
        ListNode next = head.next;
        while (current != null) {
            current.next = prev;
            prev = current;
            current = next;
            if (next != null)
                next = next.next;
        }
        return prev;
    }
}
