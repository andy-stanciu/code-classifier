class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverseList(l1);
        l2 = reverseList(l2);
        int carry = 0;
        ListNode pre = new ListNode(0);
        ListNode currentNode = pre;
        while (l1 != null || l2 != null || carry > 0) {
            int s1 = (l1 == null) ? 0 : l1.val;
            int s2 = (l2 == null) ? 0 : l2.val;
            int sum = s1 + s2 + carry;
            carry = sum / 10;
            ListNode newNode = new ListNode(sum % 10);
            currentNode.next = newNode;
            currentNode = currentNode.next;
            l1 = (l1 == null) ? null : l1.next;
            l2 = (l2 == null) ? null : l2.next;
        }
        return reverseList(pre.next);
    }

    public ListNode reverseList(ListNode list) {
        ListNode pre = null;
        while (list != null) {
            ListNode nextNode = list.next;
            list.next = pre;
            pre = list;
            list = nextNode;
        }
        return pre;
    }
}
