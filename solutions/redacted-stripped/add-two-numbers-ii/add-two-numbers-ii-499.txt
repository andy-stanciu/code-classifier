class Solution {

    public ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        ListNode nextNode = null;
        while (curr != null) {
            nextNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextNode;
        }
        head = prev;
        return head;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        ListNode t1 = l1;
        ListNode t2 = l2;
        ListNode dummy = new ListNode(0);
        ListNode t = dummy;
        int n = 0, r = 0;
        while (t1 != null && t2 != null) {
            n = t1.val + t2.val + r;
            ListNode newNode = new ListNode(n % 10);
            r = n / 10;
            t.next = newNode;
            t = newNode;
            t1 = t1.next;
            t2 = t2.next;
        }
        while (t1 != null) {
            n = t1.val + r;
            ListNode newNode = new ListNode(n % 10);
            r = n / 10;
            t.next = newNode;
            t = newNode;
            t1 = t1.next;
        }
        while (t2 != null) {
            n = t2.val + r;
            ListNode newNode = new ListNode(n % 10);
            r = n / 10;
            t.next = newNode;
            t = newNode;
            t2 = t2.next;
        }
        if (r > 0) {
            ListNode newNode = new ListNode(r);
            t.next = newNode;
            t = newNode;
        }
        t = reverse(dummy.next);
        return t;
    }
}
