class Class1 {

    static class Solution {

        public ListNode method1(ListNode l1, ListNode l2) {
            if (l1 == null)
                return l2;
            if (l2 == null)
                return l1;
            l1 = reverse(l1);
            l2 = reverse(l2);
            return reverse(method2(l1, l2));
        }

        private ListNode method2(ListNode l1, ListNode l2) {
            if (l1 == null)
                return l2;
            if (l2 == null)
                return l1;
            ListNode resultHead = null;
            ListNode resultTail = null;
            int carry = 0;
            while (l1 != null || l2 != null) {
                int v1 = l1 == null ? 0 : l1.val;
                int v2 = l2 == null ? 0 : l2.val;
                int sum = v1 + v2 + carry;
                carry = sum / 10;
                sum = sum % 10;
                ListNode node = new ListNode(sum);
                if (resultTail == null) {
                    resultHead = node;
                } else {
                    resultTail.next = node;
                }
                resultTail = node;
                l1 = l1 == null ? null : l1.next;
                l2 = l2 == null ? null : l2.next;
            }
            if (carry > 0) {
                resultTail.next = new ListNode(carry);
            }
            return resultHead;
        }

        private ListNode reverse(ListNode head) {
            if (head == null || head.next == null)
                return head;
            ListNode prev = null;
            ListNode current = head;
            ListNode next = head.next;
            current.next = null;
            while (current != null) {
                current.next = prev;
                prev = current;
                current = next;
                if (next != null)
                    next = next.next;
            }
            return prev;
        }
    }
}
