class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<ListNode> s1 = new Stack<>();
        Stack<ListNode> s2 = new Stack<>();
        ListNode temp = l1;
        while (temp != null) {
            s1.add(temp);
            temp = temp.next;
        }
        temp = l2;
        while (temp != null) {
            s2.add(temp);
            temp = temp.next;
        }
        ListNode result = null;
        int carry = 0;
        while (!s1.isEmpty() && !s2.isEmpty()) {
            l1 = s1.pop();
            l2 = s2.pop();
            int sum = l1.val + l2.val + carry;
            carry = sum / 10;
            sum %= 10;
            temp = new ListNode(sum);
            temp.next = result;
            result = temp;
        }
        while (!s1.isEmpty()) {
            ListNode l = s1.pop();
            int sum = l.val + carry;
            carry = sum / 10;
            sum %= 10;
            temp = new ListNode(sum);
            temp.next = result;
            result = temp;
        }
        while (!s2.isEmpty()) {
            ListNode l = s2.pop();
            int sum = l.val + carry;
            carry = sum / 10;
            sum %= 10;
            temp = new ListNode(sum);
            temp.next = result;
            result = temp;
        }
        if (carry != 0) {
            temp = new ListNode(carry);
            temp.next = result;
            result = temp;
        }
        return result;
    }
}
