class Solution {

    ListNode reverselist(ListNode list) {
        ListNode newNode = null;
        while (list != null) {
            ListNode next = list.next;
            list.next = newNode;
            newNode = list;
            list = next;
        }
        return newNode;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverselist(l1);
        l2 = reverselist(l2);
        ListNode NewNode = new ListNode();
        ListNode cpy = NewNode;
        int count = 0;
        while (l1 != null || l2 != null || count != 0) {
            int sum = 0;
            if (l1 != null) {
                sum += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                sum += l2.val;
                l2 = l2.next;
            }
            sum += count;
            count = sum / 10;
            ListNode newNode = new ListNode(sum % 10);
            cpy.next = newNode;
            cpy = cpy.next;
        }
        NewNode.next = reverselist(NewNode.next);
        return NewNode.next;
    }
}
