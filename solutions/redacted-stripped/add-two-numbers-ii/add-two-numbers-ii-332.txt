class Solution {

    public ListNode Reverse(ListNode l1) {
        if (l1 == null || l1.next == null)
            return l1;
        ListNode cur = l1;
        ListNode nextNode = l1;
        ListNode prev = null;
        while (cur != null) {
            nextNode = cur.next;
            cur.next = prev;
            prev = cur;
            cur = nextNode;
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = Reverse(l1);
        l2 = Reverse(l2);
        int carry = 0;
        int sum = 0;
        ListNode res = new ListNode();
        ListNode temp = res;
        while (l1 != null || l2 != null) {
            if (l1 != null) {
                sum = sum + l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                sum = sum + l2.val;
                l2 = l2.next;
            }
            sum = sum + carry;
            carry = sum / 10;
            temp.next = new ListNode(sum % 10);
            temp = temp.next;
            sum = 0;
        }
        if (carry > 0)
            temp.next = new ListNode(carry);
        temp = res;
        res = res.next;
        temp.next = null;
        return Reverse(res);
    }
}
