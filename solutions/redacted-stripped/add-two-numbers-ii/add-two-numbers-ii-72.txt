class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<Integer> stack1 = new Stack<>();
        while (l1 != null) {
            stack1.push(l1.val);
            l1 = l1.next;
        }
        Stack<Integer> stack2 = new Stack<>();
        while (l2 != null) {
            stack2.push(l2.val);
            l2 = l2.next;
        }
        ListNode curr = null, node = null;
        int sum = 0, val = 0, carry = 0;
        while (!stack1.isEmpty() || !stack2.isEmpty()) {
            if (!stack1.isEmpty()) {
                sum += stack1.pop();
            }
            if (!stack2.isEmpty()) {
                sum += stack2.pop();
            }
            sum += carry;
            val = sum % 10;
            carry = sum / 10;
            curr = new ListNode(val);
            curr.next = node;
            node = curr;
            sum = 0;
        }
        if (carry > 0) {
            curr = new ListNode(carry);
            curr.next = node;
        }
        return curr;
    }
}
