class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<Integer> s1 = new Stack<>();
        Stack<Integer> s2 = new Stack<>();
        while (l1 != null) {
            s1.push(l1.val);
            l1 = l1.next;
        }
        while (l2 != null) {
            s2.push(l2.val);
            l2 = l2.next;
        }
        int carry = 0;
        Stack<Integer> s3 = new Stack<>();
        while (!s1.isEmpty() && !s2.isEmpty()) {
            int sum = s1.pop() + s2.pop() + carry;
            int rem = sum % 10;
            carry = sum / 10;
            s3.push(rem);
        }
        while (!s1.isEmpty()) {
            int sum = s1.pop() + carry;
            int rem = sum % 10;
            carry = sum / 10;
            s3.push(rem);
        }
        while (!s2.isEmpty()) {
            int sum = s2.pop() + carry;
            int rem = sum % 10;
            carry = sum / 10;
            s3.push(rem);
        }
        if (carry > 0)
            s3.push(carry);
        ListNode root = null;
        ListNode itr = root;
        while (!s3.isEmpty()) {
            ListNode nn = new ListNode(s3.pop());
            if (root == null) {
                root = nn;
                itr = root;
            } else {
                itr.next = nn;
                itr = itr.next;
            }
        }
        return root;
    }
}
