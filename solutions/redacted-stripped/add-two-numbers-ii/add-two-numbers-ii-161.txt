class Solution {

    public ListNode method1(ListNode reversedL1, ListNode reversedL2) {
        reversedL1 = reverseList(reversedL1);
        reversedL2 = reverseList(reversedL2);
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        int carry = 0;
        while (reversedL1 != null || reversedL2 != null || carry > 0) {
            int sum = 0;
            if (reversedL1 != null) {
                sum += reversedL1.val;
                reversedL1 = reversedL1.next;
            }
            if (reversedL2 != null) {
                sum += reversedL2.val;
                reversedL2 = reversedL2.next;
            }
            sum += carry;
            carry = sum / 10;
            ListNode newNode = new ListNode(sum % 10);
            current.next = newNode;
            current = current.next;
        }
        return reverseList(dummy.next);
    }

    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode current = head;
        while (current != null) {
            ListNode next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }
}
