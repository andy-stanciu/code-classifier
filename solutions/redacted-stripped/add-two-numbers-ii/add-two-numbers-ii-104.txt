class Class1 {

    static class Solution {

        public ListNode method1(ListNode l1, ListNode l2) {
            if (l1 == null)
                return l2;
            if (l2 == null)
                return l1;
            Stack<ListNode> first = stackUpList(l1);
            Stack<ListNode> second = stackUpList(l2);
            ListNode resultHead = null;
            int carry = 0;
            while (!first.isEmpty() || !second.isEmpty()) {
                int v1 = first.isEmpty() ? 0 : first.pop().val;
                int v2 = second.isEmpty() ? 0 : second.pop().val;
                int sum = v1 + v2 + carry;
                carry = sum / 10;
                sum = sum % 10;
                ListNode node = new ListNode(sum);
                node.next = resultHead;
                resultHead = node;
            }
            if (carry > 0) {
                ListNode node = new ListNode(carry);
                node.next = resultHead;
                resultHead = node;
            }
            return resultHead;
        }

        private Stack<ListNode> stackUpList(ListNode head) {
            if (head == null)
                return null;
            final Stack<ListNode> stack = new Stack<>();
            while (head != null) {
                stack.push(head);
                head = head.next;
            }
            return stack;
        }
    }
}
