class Solution {

    static ListNode rev(ListNode l) {
        ListNode temp = l;
        ListNode pre = null;
        while (temp != null) {
            ListNode n = temp.next;
            temp.next = pre;
            pre = temp;
            temp = n;
        }
        return pre;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        int n = 0;
        int m = 0;
        ListNode temp = l1;
        while (temp != null) {
            temp = temp.next;
            n++;
        }
        temp = l2;
        while (temp != null) {
            temp = temp.next;
            m++;
        }
        l1 = rev(l1);
        l2 = rev(l2);
        if (n > m) {
            ListNode t1 = l1;
            ListNode t2 = l2;
            int carry = 0;
            ListNode p = null;
            while (t2 != null) {
                p = t1;
                t1.val += t2.val + carry;
                carry = t1.val / 10;
                t1.val %= 10;
                t1 = t1.next;
                t2 = t2.next;
            }
            while (t1 != null) {
                p = t1;
                t1.val += carry;
                carry = t1.val / 10;
                t1.val %= 10;
                t1 = t1.next;
            }
            if (carry == 1)
                p.next = new ListNode(1);
            return rev(l1);
        }
        ListNode t1 = l1;
        ListNode t2 = l2;
        int carry = 0;
        ListNode p = null;
        while (t1 != null) {
            p = t2;
            t2.val += t1.val + carry;
            carry = t2.val / 10;
            t2.val %= 10;
            t1 = t1.next;
            t2 = t2.next;
        }
        while (t2 != null) {
            p = t2;
            t2.val += carry;
            carry = t2.val / 10;
            t2.val %= 10;
            t2 = t2.next;
        }
        if (carry == 1)
            p.next = new ListNode(1);
        return rev(l2);
    }
}
