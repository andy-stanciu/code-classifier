class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode t1 = l1;
        ListNode t2 = l2;
        int ll1 = 0;
        int ll2 = 0;
        while (t1 != null && t2 != null) {
            t1 = t1.next;
            t2 = t2.next;
            ll1++;
            ll2++;
        }
        while (t1 != null) {
            t1 = t1.next;
            ll1++;
        }
        while (t2 != null) {
            t2 = t2.next;
            ll2++;
        }
        int diff = Math.max(ll1, ll2) - Math.min(ll1, ll2);
        ListNode Head = l1;
        t2 = new ListNode(0);
        ListNode t = t2;
        if (ll1 > ll2) {
            while (diff > 1) {
                t2.next = new ListNode(0);
                t2 = t2.next;
                diff--;
            }
            t2.next = l2;
            t = getSum(l1, t);
        } else if (ll2 > ll1) {
            while (diff > 1) {
                t2.next = new ListNode(0);
                t2 = t2.next;
                diff--;
            }
            t2.next = l1;
            t = getSum(t, l2);
        } else {
            t = getSum(l1, l2);
        }
        if (t.val > 9) {
            int c = t.val / 10;
            Head.val = c;
            t.val = t.val % 10;
            Head.next = t;
            return Head;
        }
        return t;
    }

    ListNode getSum(ListNode l1, ListNode l2) {
        if (l1 == null || l2 == null)
            return null;
        ListNode x = new ListNode(0);
        x.next = getSum(l1.next, l2.next);
        int c = 0;
        if (x.next != null) {
            c = x.next.val / 10;
            x.next.val = x.next.val % 10;
        }
        x.val = l1.val + l2.val + c;
        return x;
    }
}
