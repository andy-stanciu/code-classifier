class Solution {

    public static ListNode ReverseTheNode(ListNode lr) {
        ListNode prev = null;
        ListNode curr = lr;
        while (curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = ReverseTheNode(l1);
        l2 = ReverseTheNode(l2);
        ListNode current1 = l1;
        ListNode current2 = l2;
        ListNode prev = null;
        int carry = 0;
        while (current1 != null || current2 != null || carry != 0) {
            int sum = carry;
            if (current1 != null) {
                sum += current1.val;
                current1 = current1.next;
            }
            if (current2 != null) {
                sum += current2.val;
                current2 = current2.next;
            }
            carry = sum / 10;
            ListNode newNode = new ListNode(sum % 10);
            newNode.next = prev;
            prev = newNode;
        }
        return prev;
    }
}
