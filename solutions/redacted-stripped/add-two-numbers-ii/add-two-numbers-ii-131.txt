class Solution {

    public ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode cur = head;
        while (cur != null) {
            ListNode temp = cur.next;
            cur.next = prev;
            prev = cur;
            cur = temp;
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode head1 = reverse(l1);
        ListNode head2 = reverse(l2);
        ListNode head3 = new ListNode((head1.val + head2.val) % 10);
        int carry = (head1.val + head2.val) / 10;
        ListNode cur1 = head1.next;
        ListNode cur2 = head2.next;
        ListNode cur3 = head3;
        while (cur1 != null && cur2 != null) {
            ListNode temp = new ListNode((cur1.val + cur2.val + carry) % 10);
            cur3.next = temp;
            carry = (cur1.val + cur2.val + carry) / 10;
            cur1 = cur1.next;
            cur2 = cur2.next;
            cur3 = cur3.next;
        }
        while (cur1 != null) {
            ListNode temp = new ListNode((cur1.val + carry) % 10);
            carry = (cur1.val + carry) / 10;
            cur3.next = temp;
            cur1 = cur1.next;
            cur3 = cur3.next;
        }
        while (cur2 != null) {
            ListNode temp = new ListNode((cur2.val + carry) % 10);
            carry = (cur2.val + carry) / 10;
            cur3.next = temp;
            cur2 = cur2.next;
            cur3 = cur3.next;
        }
        if (carry > 0) {
            cur3.next = new ListNode(carry);
        }
        head3 = reverse(head3);
        return head3;
    }
}
