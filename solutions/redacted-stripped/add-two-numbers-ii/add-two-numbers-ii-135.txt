class Solution {

    public ListNode method1(ListNode newl1, ListNode newl2) {
        int len1 = length(newl1);
        int len2 = length(newl2);
        if (len2 > len1) {
            ListNode temp = newl1;
            newl1 = newl2;
            newl2 = temp;
        }
        ListNode l1 = reverse(newl1);
        ListNode temp = l1;
        ListNode l2 = reverse(newl2);
        while (l1 != null && l2 != null) {
            int sum = l1.val + l2.val;
            if (sum > 9) {
                if (l1.next != null) {
                    l1.next.val += 1;
                } else {
                    ListNode lastNode = new ListNode();
                    l1.next = lastNode;
                    lastNode.val = 1;
                    lastNode.next = null;
                }
            }
            l1.val = sum % 10;
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            if (l1.val > 9) {
                if (l1.next != null) {
                    l1.next.val += 1;
                } else {
                    ListNode lastNode = new ListNode();
                    l1.next = lastNode;
                    lastNode.val = 1;
                    lastNode.next = null;
                }
            }
            l1.val = l1.val % 10;
            l1 = l1.next;
        }
        ListNode reverseNode = reverse(temp);
        return reverseNode;
    }

    public ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode current = head;
        ListNode nest = head.next;
        while (current != null) {
            current.next = prev;
            prev = current;
            current = nest;
            if (nest != null) {
                nest = nest.next;
            }
        }
        return prev;
    }

    public int length(ListNode head) {
        int l = 0;
        while (head != null) {
            l++;
            head = head.next;
        }
        return l;
    }
}
