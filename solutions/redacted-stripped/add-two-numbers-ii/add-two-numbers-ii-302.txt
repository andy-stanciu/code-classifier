class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        ListNode l = l1, prev = null;
        int carry = 0;
        while (l1 != null && l2 != null) {
            int sum = l1.val + l2.val + carry;
            if (sum >= 10)
                carry = 1;
            else
                carry = 0;
            sum = sum % 10;
            l1.val = sum;
            prev = l1;
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            int sum = l1.val + carry;
            if (sum >= 10)
                carry = 1;
            else
                carry = 0;
            sum = sum % 10;
            l1.val = sum;
            prev = l1;
            l1 = l1.next;
        }
        while (l2 != null) {
            int sum = l2.val + carry;
            if (sum >= 10)
                carry = 1;
            else
                carry = 0;
            sum = sum % 10;
            l2.val = sum;
            prev.next = l2;
            prev = prev.next;
            l2 = l2.next;
        }
        prev.next = null;
        if (carry == 1) {
            ListNode end = new ListNode(1);
            prev.next = end;
        }
        return reverse(l);
    }

    private static ListNode reverse(ListNode curr) {
        if (curr == null)
            return null;
        ListNode prev = null, forw = curr.next;
        while (curr != null) {
            curr.next = prev;
            prev = curr;
            curr = forw;
            if (forw != null)
                forw = forw.next;
        }
        return prev;
    }
}
