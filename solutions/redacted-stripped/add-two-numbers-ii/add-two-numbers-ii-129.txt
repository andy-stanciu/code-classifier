class Solution {

    private ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode current = head;
        while (current != null) {
            ListNode next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode h1 = l1;
        ListNode h2 = l2;
        int carry = 0;
        ListNode dummy = new ListNode(-1, null);
        ListNode mover = dummy;
        while ((h1 != null) && (h2 != null)) {
            int sum = h1.val + h2.val + carry;
            carry = sum >= 10 ? 1 : 0;
            ListNode temp = new ListNode(sum % 10, null);
            mover.next = temp;
            mover = temp;
            h1 = h1.next;
            h2 = h2.next;
        }
        while (h2 != null) {
            int sum = h2.val + carry;
            carry = sum >= 10 ? 1 : 0;
            ListNode temp = new ListNode(sum % 10, null);
            mover.next = temp;
            mover = temp;
            h2 = h2.next;
        }
        while (h1 != null) {
            int sum = h1.val + carry;
            carry = sum >= 10 ? 1 : 0;
            ListNode temp = new ListNode(sum % 10, null);
            mover.next = temp;
            mover = temp;
            h1 = h1.next;
        }
        if (carry == 1) {
            ListNode temp = new ListNode(1, null);
            mover.next = temp;
            mover = temp;
        }
        return dummy.next;
    }

    public ListNode method2(ListNode l1, ListNode l2) {
        l1 = reverseList(l1);
        l2 = reverseList(l2);
        l1 = method1(l1, l2);
        l1 = reverseList(l1);
        return l1;
    }
}
