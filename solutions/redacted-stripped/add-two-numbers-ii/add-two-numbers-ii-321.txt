class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode lr1 = reverse(l1);
        ListNode lr2 = reverse(l2);
        ListNode rr = method2(lr1, lr2);
        return reverse(rr);
    }

    private ListNode method2(ListNode l1, ListNode l2) {
        ListNode r = new ListNode(-1);
        ListNode rt = r;
        int c = 0;
        while (l1 != null && l2 != null) {
            int a = l1.val + l2.val + c;
            rt.next = new ListNode(a % 10);
            c = a / 10;
            rt = rt.next;
            l1 = l1.next;
            l2 = l2.next;
        }
        if (l1 != null) {
            rt.next = l1;
        }
        if (l2 != null) {
            rt.next = l2;
        }
        ListNode p = rt;
        rt = rt.next;
        while (c > 0 && rt != null) {
            int a = c + rt.val;
            rt.val = a % 10;
            c = a / 10;
            p = rt;
            rt = rt.next;
        }
        if (c > 0) {
            p.next = new ListNode(c);
        }
        return r.next;
    }

    private ListNode reverse(ListNode l) {
        ListNode prev = null;
        while (l != null) {
            ListNode next = l.next;
            l.next = prev;
            prev = l;
            l = next;
        }
        return prev;
    }
}
