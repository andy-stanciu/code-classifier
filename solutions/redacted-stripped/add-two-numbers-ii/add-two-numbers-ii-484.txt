class Solution {

    static ListNode reverse(ListNode head) {
        ListNode cur = head;
        ListNode temp1 = null;
        ListNode temp2 = head;
        while (cur != null) {
            temp2 = cur.next;
            cur.next = temp1;
            temp1 = cur;
            cur = temp2;
        }
        return temp1;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        ListNode head = null;
        ListNode cur = null;
        int carry = 0;
        while (l1 != null || l2 != null || carry == 1) {
            int sum = 0;
            if (l1 != null) {
                sum += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                sum += l2.val;
                l2 = l2.next;
            }
            sum += carry;
            carry = sum / 10;
            ListNode newNode = new ListNode(sum % 10);
            if (head == null) {
                head = newNode;
                cur = newNode;
            } else {
                cur.next = newNode;
                cur = newNode;
            }
        }
        return reverse(head);
    }
}
