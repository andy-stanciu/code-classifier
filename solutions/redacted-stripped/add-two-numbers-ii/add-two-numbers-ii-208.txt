class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        int carry = 0;
        l1 = reverse(l1);
        l2 = reverse(l2);
        ListNode l3 = new ListNode();
        ListNode ans = l3;
        while (l1 != null || l2 != null) {
            int s = 0;
            if (l1 != null) {
                s += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                s += l2.val;
                l2 = l2.next;
            }
            s += carry;
            carry = s / 10;
            l3.next = new ListNode(s % 10);
            l3 = l3.next;
        }
        if (carry > 0) {
            l3.next = new ListNode(carry);
        }
        return reverse(ans.next);
    }

    public ListNode reverse(ListNode head) {
        ListNode curr = head;
        ListNode prev = null;
        while (curr != null) {
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        return prev;
    }
}
