class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<Integer> s1 = new Stack<>();
        ListNode ans = null;
        ListNode temp = ans;
        while (l1 != null) {
            s1.push(l1.val);
            l1 = l1.next;
        }
        Stack<Integer> s2 = new Stack<>();
        while (l2 != null) {
            s2.push(l2.val);
            l2 = l2.next;
        }
        int c = 0;
        while (!s1.isEmpty() && !s2.isEmpty()) {
            int v = s1.pop() + s2.pop() + c;
            c = v / 10;
            v = v % 10;
            ListNode l = new ListNode(v);
            l.next = temp;
            temp = l;
        }
        while (!s1.isEmpty()) {
            int v = s1.pop() + c;
            c = v / 10;
            v = v % 10;
            ListNode l = new ListNode(v);
            l.next = temp;
            temp = l;
        }
        while (!s2.isEmpty()) {
            int v = s2.pop() + c;
            c = v / 10;
            v = v % 10;
            ListNode l = new ListNode(v);
            l.next = temp;
            temp = l;
        }
        if (c == 1) {
            ListNode l = new ListNode(1);
            l.next = temp;
            temp = l;
        }
        return temp;
    }
}
