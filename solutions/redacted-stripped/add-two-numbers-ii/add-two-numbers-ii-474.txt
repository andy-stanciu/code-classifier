class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode l3 = reverse(l1);
        ListNode l4 = reverse(l2);
        ListNode l5 = new ListNode(0);
        ListNode head = l5;
        int carry = 0;
        while (l3 != null && l4 != null) {
            int value = l3.val + l4.val + carry;
            carry = value / 10;
            l5.next = new ListNode(value % 10);
            l5 = l5.next;
            l3 = l3.next;
            l4 = l4.next;
        }
        while (l3 != null) {
            int value = l3.val + carry;
            carry = value / 10;
            l5.next = new ListNode(value % 10);
            l5 = l5.next;
            l3 = l3.next;
        }
        while (l4 != null) {
            int value = l4.val + carry;
            carry = value / 10;
            l5.next = new ListNode(value % 10);
            l5 = l5.next;
            l4 = l4.next;
        }
        if (carry > 0) {
            l5.next = new ListNode(carry);
        }
        ListNode l6 = reverse(head.next);
        return l6;
    }

    public ListNode reverse(ListNode l1) {
        ListNode prevNode = l1;
        ListNode currNode = l1.next;
        while (currNode != null) {
            ListNode nextNode = currNode.next;
            currNode.next = prevNode;
            prevNode = currNode;
            currNode = nextNode;
        }
        l1.next = null;
        l1 = prevNode;
        return l1;
    }
}
