class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<Integer> s1 = new Stack();
        Stack<Integer> s2 = new Stack();
        Stack<Integer> s3 = new Stack();
        while (l1 != null) {
            s1.push(l1.val);
            l1 = l1.next;
        }
        while (l2 != null) {
            s2.push(l2.val);
            l2 = l2.next;
        }
        int c = 0;
        while (!s1.isEmpty() || !s2.isEmpty()) {
            int s = (!s1.isEmpty() ? s1.pop() : 0) + (!s2.isEmpty() ? s2.pop() : 0) + c;
            s3.push(s % 10);
            c = s / 10;
        }
        ListNode ans = new ListNode(-1);
        ListNode tmp = ans;
        if (c != 0) {
            tmp.next = new ListNode(c);
            tmp = tmp.next;
        }
        while (!s3.isEmpty()) {
            tmp.next = new ListNode(s3.pop());
            tmp = tmp.next;
        }
        return ans.next;
    }
}
