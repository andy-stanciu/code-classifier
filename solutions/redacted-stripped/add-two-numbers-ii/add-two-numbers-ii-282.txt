class Solution {

    public ListNode reverse(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode prev = null;
        ListNode curr = head;
        while (curr != null) {
            ListNode newNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = newNode;
        }
        head = prev;
        return head;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode c1 = reverse(l1);
        ListNode c2 = reverse(l2);
        ListNode temp = new ListNode();
        ListNode curr = temp;
        int carry = 0;
        while (c1 != null || c2 != null || carry != 0) {
            int sum = 0;
            if (c1 != null) {
                sum += c1.val;
                c1 = c1.next;
            }
            if (c2 != null) {
                sum += c2.val;
                c2 = c2.next;
            }
            sum += carry;
            carry = sum / 10;
            ListNode a = new ListNode(sum % 10);
            curr.next = a;
            curr = curr.next;
        }
        return reverse(temp.next);
    }
}
