class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = rev(l1);
        l2 = rev(l2);
        if (size(l1) >= size(l2))
            return rev(method2(l1, l2));
        else
            return rev(method2(l2, l1));
    }

    public ListNode method2(ListNode l1, ListNode l2) {
        ListNode n = l1;
        int c = 0;
        while (n != null && l2 != null) {
            int x = c + n.val + l2.val;
            if (x > 9) {
                n.val = x % 10;
                c = x / 10;
            } else {
                n.val = x;
                c = 0;
            }
            n = n.next;
            l2 = l2.next;
        }
        while (l2 == null && n != null) {
            int x = c + n.val;
            if (x > 9) {
                n.val = x % 10;
                c = x / 10;
            } else {
                n.val = x;
                c = 0;
            }
            n = n.next;
        }
        if (c != 0) {
            ListNode z = new ListNode(1);
            ListNode m = l1;
            while (m.next != null) {
                m = m.next;
            }
            m.next = z;
        }
        return l1;
    }

    public int size(ListNode n) {
        int c = 0;
        while (n != null) {
            c++;
            n = n.next;
        }
        return c;
    }

    public ListNode rev(ListNode n) {
        ListNode l = null, c = n, r = null;
        while (c != null) {
            r = c.next;
            c.next = l;
            l = c;
            c = r;
        }
        return l;
    }
}
