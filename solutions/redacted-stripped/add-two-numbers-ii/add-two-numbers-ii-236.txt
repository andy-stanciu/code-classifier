class Solution {

    public ListNode method1(ListNode l11, ListNode l22) {
        ListNode l1 = reverse(l11);
        ListNode l2 = reverse(l22);
        ListNode l3 = new ListNode(0);
        ListNode curr = l3;
        int value, carry = 0;
        while (l1 != null && l2 != null) {
            value = l1.val + l2.val + carry;
            carry = value / 10;
            l3.next = new ListNode(value % 10);
            l1 = l1.next;
            l2 = l2.next;
            l3 = l3.next;
        }
        while (l1 != null) {
            value = l1.val + carry;
            carry = value / 10;
            l3.next = new ListNode(value % 10);
            l1 = l1.next;
            l3 = l3.next;
        }
        while (l2 != null) {
            value = l2.val + carry;
            carry = value / 10;
            l3.next = new ListNode(value % 10);
            l2 = l2.next;
            l3 = l3.next;
        }
        if (carry > 0) {
            l3.next = new ListNode(carry);
        }
        return reverse(curr.next);
    }

    public ListNode reverse(ListNode root) {
        ListNode prev = null;
        ListNode curr = root;
        ListNode ntr;
        while (curr != null) {
            ntr = curr.next;
            curr.next = prev;
            prev = curr;
            curr = ntr;
        }
        return prev;
    }
}
