class Solution {

    public ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        ListNode agla = null;
        while (curr != null) {
            agla = curr.next;
            curr.next = prev;
            prev = curr;
            curr = agla;
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode n1 = reverse(l1);
        ListNode n2 = reverse(l2);
        ListNode t1 = n1;
        ListNode t2 = n2;
        int carry = 0;
        ListNode t = new ListNode(-1);
        ListNode s = t;
        while (t1 != null && t2 != null) {
            int sum = t1.val + t2.val + carry;
            if (sum <= 9) {
                ListNode n = new ListNode(sum);
                t.next = n;
                t = n;
                carry = 0;
            } else {
                int x = sum % 10;
                carry = sum / 10;
                ListNode n = new ListNode(x);
                t.next = n;
                t = n;
            }
            t1 = t1.next;
            t2 = t2.next;
        }
        while (t2 != null) {
            int sum = t2.val + carry;
            if (sum <= 9) {
                ListNode n = new ListNode(sum);
                t.next = n;
                t = n;
                carry = 0;
            } else {
                int x = sum % 10;
                carry = sum / 10;
                ListNode n = new ListNode(x);
                t.next = n;
                t = n;
            }
            t2 = t2.next;
        }
        while (t1 != null) {
            int sum = t1.val + carry;
            if (sum <= 9) {
                ListNode n = new ListNode(sum);
                t.next = n;
                t = n;
                carry = 0;
            } else {
                int x = sum % 10;
                carry = sum / 10;
                ListNode n = new ListNode(x);
                t.next = n;
                t = n;
            }
            t1 = t1.next;
        }
        if (carry != 0) {
            ListNode n = new ListNode(carry);
            t.next = n;
            t = n;
        }
        ListNode m = s.next;
        s.next = null;
        m = reverse(m);
        return m;
    }
}
