class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverseList(l1);
        l2 = reverseList(l2);
        ListNode ans = getAns(l1, l2, false);
        return reverseList(ans);
    }

    public ListNode getAns(ListNode l1, ListNode l2, boolean carry) {
        if (l1 == null && l2 == null) {
            if (carry)
                return new ListNode(1);
            return null;
        }
        int sum = 0;
        if (l1 != null)
            sum += l1.val;
        if (l2 != null)
            sum += l2.val;
        if (carry)
            sum += 1;
        if (sum >= 10)
            carry = true;
        else
            carry = false;
        ListNode ans = new ListNode(sum % 10);
        if (l1 == null)
            ans.next = getAns(null, l2.next, carry);
        else if (l2 == null)
            ans.next = getAns(l1.next, null, carry);
        else
            ans.next = getAns(l1.next, l2.next, carry);
        return ans;
    }

    public ListNode reverseList(ListNode head) {
        if (head == null)
            return null;
        ListNode prev = null;
        ListNode temp = null;
        while (head.next != null) {
            temp = head.next;
            head.next = prev;
            prev = head;
            head = temp;
        }
        head.next = prev;
        return head;
    }
}
