class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        } else if (l2 == null) {
            return l1;
        }
        ListNode head1 = reverse(l1);
        ListNode head2 = reverse(l2);
        int carry = 0;
        ListNode dummy = new ListNode();
        ListNode summation = dummy;
        while (head1 != null && head2 != null) {
            int sum = head1.val + head2.val + carry;
            ListNode newNode = new ListNode(sum % 10);
            carry = sum / 10;
            dummy.next = newNode;
            dummy = dummy.next;
            head1 = head1.next;
            head2 = head2.next;
        }
        while (head1 != null) {
            int sum = head1.val + carry;
            ListNode newNode = new ListNode(sum % 10);
            carry = sum / 10;
            dummy.next = newNode;
            dummy = dummy.next;
            head1 = head1.next;
        }
        while (head2 != null) {
            int sum = head2.val + carry;
            ListNode newNode = new ListNode(sum % 10);
            carry = sum / 10;
            dummy.next = newNode;
            dummy = dummy.next;
            head2 = head2.next;
        }
        if (carry > 0) {
            ListNode newNode = new ListNode(carry);
            dummy.next = newNode;
        }
        return reverse(summation.next);
    }

    public ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        ListNode next = null;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}
