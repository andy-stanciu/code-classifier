class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode node1 = reverse(l1);
        ListNode node2 = reverse(l2);
        ListNode dummyHead = new ListNode(0);
        ListNode tail = dummyHead;
        int carry = 0;
        while (node1 != null || node2 != null || carry != 0) {
            int digit1 = (node1 != null) ? node1.val : 0;
            int digit2 = (node2 != null) ? node2.val : 0;
            int sum = digit1 + digit2 + carry;
            int digit = sum % 10;
            carry = sum / 10;
            ListNode newNode = new ListNode(digit);
            tail.next = newNode;
            tail = tail.next;
            node1 = (node1 != null) ? node1.next : null;
            node2 = (node2 != null) ? node2.next : null;
        }
        return reverse(dummyHead.next);
    }

    ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode present = head;
        ListNode next = present.next;
        while (present != null) {
            present.next = prev;
            prev = present;
            present = next;
            if (next != null) {
                next = next.next;
            }
        }
        return prev;
    }
}
