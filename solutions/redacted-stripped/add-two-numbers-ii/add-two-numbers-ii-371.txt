class Solution {

    private ListNode reverseList(ListNode list) {
        ListNode curr = list;
        ListNode prev = null;
        while (curr != null) {
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        list = prev;
        return list;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        if (l1 == null || l2 == null)
            return null;
        ListNode r1 = reverseList(l1);
        ListNode r2 = reverseList(l2);
        ListNode ans = null;
        int carry = 0;
        while (r1 != null || r2 != null || carry != 0) {
            int sum = 0;
            if (r1 != null) {
                sum += r1.val;
                r1 = r1.next;
            }
            if (r2 != null) {
                sum += r2.val;
                r2 = r2.next;
            }
            sum += carry;
            carry = sum / 10;
            ListNode newNode = new ListNode(sum % 10);
            newNode.next = ans;
            ans = newNode;
        }
        return carry == 0 ? ans : ans.next;
    }
}
