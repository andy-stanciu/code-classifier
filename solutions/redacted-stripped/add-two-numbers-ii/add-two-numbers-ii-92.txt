class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        ListNode res = null;
        int carry = 0;
        int ans = 0;
        while (l1 != null && l2 != null) {
            int sum = l1.val + l2.val + carry;
            ans = sum % 10;
            carry = sum / 10;
            ListNode node = new ListNode(ans);
            if (res == null)
                res = node;
            else {
                node.next = res;
                res = node;
            }
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            int sum = l1.val + carry;
            ans = sum % 10;
            carry = sum / 10;
            ListNode node = new ListNode(ans);
            node.next = res;
            res = node;
            l1 = l1.next;
        }
        while (l2 != null) {
            int sum = l2.val + carry;
            ans = sum % 10;
            carry = sum / 10;
            ListNode node = new ListNode(ans);
            node.next = res;
            res = node;
            l2 = l2.next;
        }
        if (carry != 0) {
            ListNode node = new ListNode(carry);
            node.next = res;
            res = node;
        }
        return res;
    }

    private static ListNode reverse(ListNode head) {
        ListNode curr = head;
        ListNode prev = null;
        ListNode post = curr.next;
        while (post != null) {
            curr.next = prev;
            prev = curr;
            curr = post;
            post = curr.next;
        }
        curr.next = prev;
        head = curr;
        return head;
    }
}
