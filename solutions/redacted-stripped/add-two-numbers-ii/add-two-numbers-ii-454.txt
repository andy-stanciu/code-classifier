class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<Integer> stack1 = new Stack<>();
        Stack<Integer> stack2 = new Stack<>();
        while (l1 != null) {
            stack1.push(l1.val);
            l1 = l1.next;
        }
        while (l2 != null) {
            stack2.push(l2.val);
            l2 = l2.next;
        }
        int carry = 0;
        ListNode result = null;
        while (!stack1.isEmpty() || !stack2.isEmpty() || carry != 0) {
            int sumVal = carry;
            if (!stack1.isEmpty()) {
                sumVal += stack1.pop();
            }
            if (!stack2.isEmpty()) {
                sumVal += stack2.pop();
            }
            ListNode node = new ListNode(sumVal % 10);
            node.next = result;
            result = node;
            carry = sumVal / 10;
        }
        return result;
    }
}
