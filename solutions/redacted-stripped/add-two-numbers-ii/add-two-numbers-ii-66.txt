class Solution {

    public ListNode reverse(ListNode head) {
        ListNode current = head;
        ListNode next = null;
        ListNode prev = null;
        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        ListNode dummy = new ListNode(-1);
        ListNode temp = dummy;
        int carry = 0;
        while (l1 != null || l2 != null) {
            int val1 = 0, val2 = 0;
            if (l1 != null)
                val1 = l1.val;
            if (l2 != null)
                val2 = l2.val;
            int total = val1 + val2 + carry;
            ListNode x = new ListNode(total % 10);
            if (total > 9)
                carry = 1;
            else
                carry = 0;
            temp.next = x;
            temp = temp.next;
            if (l1 != null)
                l1 = l1.next;
            if (l2 != null)
                l2 = l2.next;
        }
        if (carry == 1) {
            ListNode x = new ListNode(1);
            temp.next = x;
            temp = temp.next;
        }
        ListNode ans = reverse(dummy.next);
        return ans;
    }
}
