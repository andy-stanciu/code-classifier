class Solution {

    public ListNode reverse(ListNode head) {
        ListNode curr = head;
        ListNode next = null;
        ListNode prev = null;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode back1 = reverse(l1);
        ListNode back2 = reverse(l2);
        ListNode dummy = new ListNode(-1);
        ListNode tail = dummy;
        int carry = 0;
        while (back1 != null || back2 != null) {
            int val1 = back1 == null ? 0 : back1.val;
            int val2 = back2 == null ? 0 : back2.val;
            int sum = val1 + val2 + carry;
            carry = sum > 9 ? sum / 10 : 0;
            tail.next = new ListNode(sum % 10);
            tail = tail.next;
            if (back1 != null)
                back1 = back1.next;
            if (back2 != null)
                back2 = back2.next;
        }
        if (carry > 0) {
            tail.next = new ListNode(carry);
            tail = tail.next;
        }
        return reverse(dummy.next);
    }
}
