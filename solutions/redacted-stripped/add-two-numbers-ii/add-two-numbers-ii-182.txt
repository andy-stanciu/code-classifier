class Solution {

    ListNode head;

    public ListNode method1(ListNode h1, ListNode h2) {
        ListNode l1 = h1;
        ListNode l2 = h2;
        while (l1 != null && l2 != null) {
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            ListNode leadingZeros = new ListNode(0, h2);
            h2 = leadingZeros;
            l1 = l1.next;
        }
        while (l2 != null) {
            ListNode leadingZeros = new ListNode(0, h1);
            h1 = leadingZeros;
            l2 = l2.next;
        }
        head = null;
        int c = method2(h1, h2);
        if (c != 0) {
            ListNode newnode = new ListNode(c, head);
            return newnode;
        }
        return head;
    }

    private int method2(ListNode h1, ListNode h2) {
        if (h1 == null) {
            return 0;
        }
        int carry = method2(h1.next, h2.next);
        int sum = h1.val + h2.val + carry;
        ListNode newnode = new ListNode(sum % 10, head);
        head = newnode;
        return sum / 10;
    }
}
