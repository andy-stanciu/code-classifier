class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode first = reverse(l1);
        ListNode second = reverse(l2);
        ListNode temp1 = first;
        ListNode temp2 = second;
        ListNode head = null;
        ListNode temp = null;
        int carry = 0;
        while (temp1 != null && temp2 != null) {
            int x = (temp1.val + temp2.val + carry);
            carry = x / 10;
            ListNode newNode = new ListNode(x % 10);
            if (head == null) {
                head = newNode;
                temp = head;
            } else {
                temp.next = newNode;
                temp = temp.next;
            }
            temp1 = temp1.next;
            temp2 = temp2.next;
        }
        while (temp1 != null) {
            int x = (temp1.val + carry);
            carry = x / 10;
            ListNode newNode = new ListNode(x % 10);
            if (head == null) {
                head = newNode;
                temp = head;
            } else {
                temp.next = newNode;
                temp = temp.next;
            }
            temp1 = temp1.next;
        }
        while (temp2 != null) {
            int x = (temp2.val + carry);
            carry = x / 10;
            ListNode newNode = new ListNode(x % 10);
            if (head == null) {
                head = newNode;
                temp = head;
            } else {
                temp.next = newNode;
                temp = temp.next;
            }
            temp2 = temp2.next;
        }
        if (carry == 1) {
            temp.next = new ListNode(carry);
        }
        return reverse(head);
    }

    public ListNode reverse(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode temp = head;
        while (temp != null && temp.next != null) {
            ListNode temp2 = temp.next;
            temp.next = temp.next.next;
            temp2.next = head;
            head = temp2;
        }
        return head;
    }
}
