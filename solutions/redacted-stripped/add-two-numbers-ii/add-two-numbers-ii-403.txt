class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        Stack<Integer> first = new Stack<Integer>();
        Stack<Integer> second = new Stack<Integer>();
        while (l1 != null) {
            first.push(l1.val);
            l1 = l1.next;
        }
        while (l2 != null) {
            second.push(l2.val);
            l2 = l2.next;
        }
        int carry = 0;
        ListNode ans = new ListNode();
        while (!first.isEmpty() && !second.isEmpty()) {
            int numOne = first.pop();
            int var1 = second.pop();
            int sum = numOne + var1 + carry;
            ans.val = sum % 10;
            carry = sum / 10;
            ListNode newHead = new ListNode();
            newHead.next = ans;
            ans = newHead;
        }
        while (!first.isEmpty()) {
            int numOne = first.pop();
            int sum = carry + numOne;
            ans.val = sum % 10;
            carry = sum / 10;
            ListNode newHead = new ListNode();
            newHead.next = ans;
            ans = newHead;
        }
        while (!second.isEmpty()) {
            int numOne = second.pop();
            int sum = carry + numOne;
            ans.val = sum % 10;
            carry = sum / 10;
            ListNode newHead = new ListNode();
            newHead.next = ans;
            ans = newHead;
        }
        if (carry > 0) {
            ans.val = carry;
            ListNode newHead = new ListNode();
            newHead.next = ans;
            ans = newHead;
        }
        return ans.next;
    }
}
