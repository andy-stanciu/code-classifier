class Solution {

    ListNode res = null;

    public ListNode reverse(ListNode head) {
        ListNode prev = null, curr, next = null;
        curr = head;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    public void insertToRes(int val) {
        ListNode newNode = new ListNode(val);
        if (res == null)
            res = newNode;
        else {
            ListNode temp = res;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newNode;
        }
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        int carry = 0;
        while (l1 != null || l2 != null || carry > 0) {
            int n1 = 0;
            if (l1 != null) {
                n1 = l1.val;
                l1 = l1.next;
            }
            int n2 = 0;
            if (l2 != null) {
                n2 = l2.val;
                l2 = l2.next;
            }
            int sum = n1 + n2 + carry;
            insertToRes(sum % 10);
            carry = sum / 10;
        }
        ListNode rev = reverse(res);
        return rev;
    }
}
