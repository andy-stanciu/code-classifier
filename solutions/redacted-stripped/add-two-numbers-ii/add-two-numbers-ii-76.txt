class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        int s1 = size(l1);
        int s2 = size(l2);
        if (s1 > s2) {
            int carry = helper(l1, l2, s1 - s2);
            if (carry > 0) {
                ListNode temp = new ListNode(carry);
                temp.next = l1;
                l1 = temp;
            }
            return l1;
        }
        int carry = helper(l2, l1, s2 - s1);
        if (carry > 0) {
            ListNode temp = new ListNode(carry);
            temp.next = l2;
            l2 = temp;
        }
        return l2;
    }

    private int helper(ListNode l1, ListNode l2, int n) {
        if (l1 == null && l2 == null)
            return 0;
        int carry = 0;
        if (n > 0) {
            carry = helper(l1.next, l2, n - 1);
            carry += l1.val;
            l1.val = carry % 10;
            return carry / 10;
        } else {
            carry = helper(l1.next, l2.next, n);
            carry += l1.val + l2.val;
            l1.val = carry % 10;
            return carry / 10;
        }
    }

    public int size(ListNode node) {
        if (node == null)
            return 0;
        return 1 + size(node.next);
    }
}
