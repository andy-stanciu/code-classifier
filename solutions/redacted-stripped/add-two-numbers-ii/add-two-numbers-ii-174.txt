class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode rr = reverse(l1);
        ListNode ss = reverse(l2);
        ListNode result = new ListNode(0);
        ListNode store = result;
        int carry = 0;
        while (rr != null && ss != null) {
            int sum = rr.val + ss.val + carry;
            carry = sum / 10;
            ListNode tt = new ListNode(sum % 10);
            result.next = tt;
            result = result.next;
            rr = rr.next;
            ss = ss.next;
        }
        while (rr != null) {
            int sum = rr.val + carry;
            carry = sum / 10;
            ListNode tt = new ListNode(sum % 10);
            result.next = tt;
            result = result.next;
            rr = rr.next;
        }
        while (ss != null) {
            int sum = ss.val + carry;
            carry = sum / 10;
            ListNode tt = new ListNode(sum % 10);
            result.next = tt;
            result = result.next;
            ss = ss.next;
        }
        if (carry != 0) {
            ListNode tt = new ListNode(carry);
            result.next = tt;
            result = result.next;
        }
        return reverse(store.next);
    }

    public ListNode reverse(ListNode head) {
        ListNode next = head;
        ListNode pre = null;
        while (head != null) {
            next = head.next;
            head.next = pre;
            pre = head;
            head = next;
        }
        return pre;
    }
}
