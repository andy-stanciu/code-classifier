class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode ans = new ListNode();
        ListNode ret = new ListNode();
        l1 = reverse(l1);
        l2 = reverse(l2);
        ret = ans;
        int carry = 0;
        while (l1 != null && l2 != null) {
            ListNode temp = new ListNode();
            temp.val = (l1.val + l2.val + carry) % 10;
            if (l1.val + l2.val + carry >= 10) {
                carry = 1;
            } else {
                carry = 0;
            }
            ans.next = temp;
            ans = ans.next;
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            ListNode temp = new ListNode();
            temp.val = (l1.val + carry) % 10;
            if (l1.val + carry >= 10) {
                carry = 1;
            } else {
                carry = 0;
            }
            ans.next = temp;
            ans = ans.next;
            l1 = l1.next;
        }
        while (l2 != null) {
            ListNode temp = new ListNode();
            temp.val = (l2.val + carry) % 10;
            if (l2.val + carry >= 10) {
                carry = 1;
            } else {
                carry = 0;
            }
            ans.next = temp;
            ans = ans.next;
            l2 = l2.next;
        }
        if (carry == 1) {
            ListNode temp = new ListNode(1, null);
            ans.next = temp;
        }
        return reverse(ret.next);
    }

    public ListNode reverse(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode curr = head;
        ListNode prev = null;
        while (curr != null) {
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        return prev;
    }
}
