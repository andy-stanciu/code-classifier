class Solution {

    public ListNode reverse(ListNode head) {
        ListNode curr = head;
        ListNode prev = null;
        ListNode n = null;
        while (curr != null) {
            n = curr.next;
            curr.next = prev;
            prev = curr;
            curr = n;
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode head11 = reverse(l1);
        ListNode head22 = reverse(l2);
        ListNode head1 = head11;
        ListNode head2 = head22;
        ListNode ans = new ListNode(-1);
        ListNode re = ans;
        int carry = 0;
        while (head1 != null && head2 != null) {
            int sum = carry;
            sum += head1.val;
            sum += head2.val;
            ListNode var1 = new ListNode(sum % 10);
            ans.next = var1;
            ans = var1;
            carry = sum / 10;
            head1 = head1.next;
            head2 = head2.next;
        }
        while (head1 != null) {
            int sum = carry;
            sum += head1.val;
            ListNode var1 = new ListNode(sum % 10);
            ans.next = var1;
            ans = var1;
            carry = sum / 10;
            head1 = head1.next;
        }
        while (head2 != null) {
            int sum = carry;
            sum += head2.val;
            ListNode var1 = new ListNode(sum % 10);
            ans.next = var1;
            ans = var1;
            carry = sum / 10;
            head2 = head2.next;
        }
        if (carry != 0) {
            ListNode var1 = new ListNode(carry);
            ans.next = var1;
            ans = var1;
        }
        ListNode a = reverse(re.next);
        return a;
    }
}
