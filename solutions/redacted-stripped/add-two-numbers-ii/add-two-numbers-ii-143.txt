class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode rev1 = reverseList(l1);
        ListNode rev2 = reverseList(l2);
        ListNode dummy = new ListNode(0);
        ListNode res = dummy;
        int carry = 0;
        while (rev1 != null || rev2 != null) {
            int sum = 0 + carry;
            if (rev1 != null) {
                sum = sum + rev1.val;
                rev1 = rev1.next;
            }
            if (rev2 != null) {
                sum = sum + rev2.val;
                rev2 = rev2.next;
            }
            carry = sum / 10;
            sum = sum % 10;
            dummy.next = new ListNode(sum);
            dummy = dummy.next;
        }
        if (carry == 1) {
            dummy.next = new ListNode(1);
        }
        return reverseList(res.next);
    }

    public ListNode reverseList(ListNode list) {
        if (list == null) {
            return null;
        }
        ListNode prev = null;
        ListNode present = list;
        ListNode next = present.next;
        while (list != null && present != null) {
            present.next = prev;
            prev = present;
            present = next;
            if (next != null) {
                next = next.next;
            }
        }
        return prev;
    }
}
