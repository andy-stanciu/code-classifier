class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> result = new LinkedList<>();
        DFS(root, new LinkedList<>(), result, param1);
        return result;
    }

    private void DFS(TreeNode root, LinkedList<Integer> param2, List<List<Integer>> result, int param1) {
        if (null == root)
            return;
        if (isLeaf(root) && param1 == root.val) {
            param2.add(root.val);
            result.add(new LinkedList<>(param2));
            param2.removeLast();
            return;
        }
        if (root.left != null) {
            param2.add(root.val);
            DFS(root.left, param2, result, param1 - root.val);
            param2.removeLast();
        }
        if (root.right != null) {
            param2.add(root.val);
            DFS(root.right, param2, result, param1 - root.val);
            param2.removeLast();
        }
    }

    private boolean isLeaf(TreeNode root) {
        return null != root && root.left == null && root.right == null;
    }
}
