class Solution {

    List<List<Integer>> list = new ArrayList<List<Integer>>();

    public List<List<Integer>> method1(TreeNode root, int param1) {
        if (root == null) {
            return list;
        }
        List<Integer> inList = new ArrayList<>();
        backtracking(root, inList, param1, 0);
        return list;
    }

    public void backtracking(TreeNode root, List<Integer> inList, int param1, int param2) {
        if (root.left == null && root.right == null) {
            if (param2 + root.val == param1) {
                inList.add(root.val);
                list.add(new ArrayList<Integer>(inList));
                inList.remove(inList.size() - 1);
            }
            return;
        }
        param2 += root.val;
        inList.add(root.val);
        if (root.left != null) {
            backtracking(root.left, inList, param1, param2);
        }
        if (root.right != null) {
            backtracking(root.right, inList, param1, param2);
        }
        inList.remove(inList.size() - 1);
        param2 -= root.val;
    }
}
