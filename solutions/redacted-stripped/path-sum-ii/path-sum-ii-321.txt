class Solution {

    class TreeNodeM {

        TreeNode t;

        ArrayList<Integer> arr = new ArrayList<>();

        int target;

        public TreeNodeM(TreeNode t, ArrayList<Integer> arr, int target) {
            this.t = t;
            this.arr.addAll(arr);
            this.arr.add(t.val);
            this.target = target;
        }
    }

    public List<List<Integer>> method1(TreeNode root, int param1) {
        Queue<TreeNodeM> qq = new LinkedList<>();
        List<List<Integer>> result = new ArrayList<>();
        if (root != null)
            qq.add(new TreeNodeM(root, new ArrayList<>(), param1));
        while (!qq.isEmpty()) {
            TreeNodeM curr = qq.poll();
            param1 = curr.target - curr.t.val;
            if (curr.t.left == null && curr.t.right == null && param1 == 0) {
                result.add(curr.arr);
            }
            if (curr.t.left != null) {
                qq.add(new TreeNodeM(curr.t.left, curr.arr, param1));
            }
            if (curr.t.right != null) {
                qq.add(new TreeNodeM(curr.t.right, curr.arr, param1));
            }
        }
        return result;
    }
}
