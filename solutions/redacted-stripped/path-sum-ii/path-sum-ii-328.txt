class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> rs = new LinkedList<>();
        backtrack(root, param1, 0, new LinkedList<>(), rs);
        return rs;
    }

    public void backtrack(TreeNode root, int t, int curS, List<Integer> curL, List<List<Integer>> rs) {
        if (root != null && root.left == null && root.right == null) {
            if (curS == t - root.val) {
                List<Integer> temp = new LinkedList<>(curL);
                temp.add(root.val);
                rs.add(temp);
            }
            return;
        }
        if (root != null) {
            curL.add(root.val);
            curS += root.val;
            backtrack(root.left, t, curS, curL, rs);
            curL.remove(curL.size() - 1);
            curS -= root.val;
            curL.add(root.val);
            curS += root.val;
            backtrack(root.right, t, curS, curL, rs);
            curL.remove(curL.size() - 1);
            curS -= root.val;
        }
    }
}
