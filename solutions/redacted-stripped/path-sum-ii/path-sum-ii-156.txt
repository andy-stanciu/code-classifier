class Solution {

    List<List<Integer>> lli = new ArrayList<List<Integer>>();

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<Integer> li = new ArrayList<Integer>();
        backtracking(root, param1, 0, li);
        return lli;
    }

    void backtracking(TreeNode root, int param1, int param2, List<Integer> li) {
        if (root == null) {
            return;
        }
        if (root.left == null && root.right == null) {
            if ((param2 + root.val) == param1) {
                List<Integer> li1 = new ArrayList<Integer>(li);
                li1.add(root.val);
                lli.add(li1);
            }
            return;
        }
        li.add(root.val);
        param2 = param2 + root.val;
        backtracking(root.left, param1, param2, li);
        backtracking(root.right, param1, param2, li);
        li.remove(li.size() - 1);
        param2 = param2 - root.val;
    }
}
