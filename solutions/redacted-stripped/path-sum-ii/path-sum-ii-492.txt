class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> result = new ArrayList<>();
        return dfs(root, param1, result, new ArrayList<Integer>());
    }

    private List<List<Integer>> dfs(TreeNode node, int param1, List<List<Integer>> result, List<Integer> slate) {
        if (node == null)
            return result;
        if (node.left == null && node.right == null) {
            if (param1 == node.val) {
                slate.add(node.val);
                result.add(new ArrayList<Integer>(slate));
                slate.remove(slate.size() - 1);
            }
            return result;
        }
        slate.add(node.val);
        dfs(node.left, param1 - node.val, result, slate);
        dfs(node.right, param1 - node.val, result, slate);
        slate.remove(slate.size() - 1);
        return result;
    }
}
