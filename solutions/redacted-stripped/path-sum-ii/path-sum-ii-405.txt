class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> answer = new ArrayList<>();
        List<Integer> nodeList = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        TreeNode ptr = root;
        int var1 = 0;
        while (ptr != null || !stack.isEmpty()) {
            while (ptr != null) {
                stack.add(ptr);
                stack.add(ptr);
                nodeList.add(ptr.val);
                var1 += ptr.val;
                ptr = ptr.left;
            }
            ptr = stack.pop();
            if (!stack.isEmpty() && stack.peek() == ptr) {
                ptr = ptr.right;
            } else {
                if (isLeaf(ptr) && var1 == param1) {
                    answer.add(new ArrayList<>(nodeList));
                }
                nodeList.remove(nodeList.size() - 1);
                var1 -= ptr.val;
                ptr = null;
            }
        }
        return answer;
    }

    private boolean isLeaf(TreeNode root) {
        return root.left == null && root.right == null;
    }
}
