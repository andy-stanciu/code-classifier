class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> res = new ArrayList<>();
        dfs(root, param1, new ArrayList<>(), 0, res);
        return res;
    }

    private boolean dfs(TreeNode root, int param1, List<Integer> temp, int param2, List<List<Integer>> res) {
        if (root == null)
            return false;
        param2 += root.val;
        temp.add(root.val);
        boolean hasLeft = dfs(root.left, param1, temp, param2, res);
        boolean hasRight = dfs(root.right, param1, temp, param2, res);
        if (!hasLeft && !hasRight) {
            if (param2 == param1)
                res.add(new ArrayList<>(temp));
        }
        temp.remove(temp.size() - 1);
        return true;
    }
}
