class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (root == null)
            return result;
        dfs(root, param1, result, new ArrayList<Integer>());
        return result;
    }

    private void dfs(TreeNode node, int param1, List<List<Integer>> result, List<Integer> slate) {
        if (node.left == null && node.right == null) {
            if (node.val == param1) {
                List<Integer> newSlate = new ArrayList<Integer>(slate);
                newSlate.add(node.val);
                result.add(newSlate);
                return;
            }
        }
        slate.add(node.val);
        if (node.left != null) {
            dfs(node.left, param1 - node.val, result, slate);
        }
        if (node.right != null) {
            dfs(node.right, param1 - node.val, result, slate);
        }
        slate.remove(slate.size() - 1);
    }
}
