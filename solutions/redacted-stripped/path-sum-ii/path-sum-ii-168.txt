class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> var1 = new ArrayList();
        List<Integer> p1 = new ArrayList();
        if (root == null)
            return var1;
        dfs(root, param1, var1, p1, 0);
        return var1;
    }

    public void dfs(TreeNode root, int param1, List<List<Integer>> var1, List<Integer> p1, int param2) {
        if (root.left == null && root.right == null) {
            if (param2 + root.val == param1) {
                List<Integer> p = new ArrayList(p1);
                p.add(root.val);
                var1.add(p);
            }
            return;
        }
        param2 = param2 + root.val;
        p1.add(root.val);
        if (root.left != null)
            dfs(root.left, param1, var1, p1, param2);
        if (root.right != null)
            dfs(root.right, param1, var1, p1, param2);
        param2 = param2 - root.val;
        if (p1.size() >= 1) {
            p1.remove(p1.size() - 1);
        }
    }
}
