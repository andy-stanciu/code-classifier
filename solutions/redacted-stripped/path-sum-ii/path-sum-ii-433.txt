class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> answer = new ArrayList<List<Integer>>();
        List<Integer> temp = new ArrayList<Integer>();
        if (root == null)
            return answer;
        DFS(root, root.val, answer, param1, 0, temp);
        return answer;
    }

    void DFS(TreeNode root, int origroot, List<List<Integer>> answer, int target, int param2, List<Integer> temp) {
        temp.add(root.val);
        if (root.left != null) {
            DFS(root.left, origroot, answer, target, param2, temp);
        }
        if (root.right != null) {
            DFS(root.right, origroot, answer, target, param2, temp);
        }
        int var1 = 0;
        for (int i = 0; i < temp.size(); i++) {
            var1 = var1 + temp.get(i);
            System.out.print(" " + temp.get(i));
        }
        System.out.println(" ");
        System.out.println("sumnew= " + var1);
        if ((var1 == target) && (root.left == null) && (root.right == null)) {
            ArrayList<Integer> copyList = new ArrayList<Integer>(temp);
            System.out.println("yesss");
            answer.add(copyList);
        }
        if (!temp.isEmpty()) {
            int index = temp.size() - 1;
            param2 = param2 - temp.get(index);
            temp.remove(index);
        }
    }
}
