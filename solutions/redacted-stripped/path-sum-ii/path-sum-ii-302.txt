class Solution {

    List<List<Integer>> res = new ArrayList<>();

    public List<List<Integer>> method1(TreeNode root, int param1) {
        dfs(root, 0, param1, new ArrayList<Integer>());
        return res;
    }

    public void dfs(TreeNode node, int param2, int tar, List<Integer> l) {
        if (node != null && node.left == null && node.right == null && param2 + node.val == tar) {
            List<Integer> e = new ArrayList<>();
            e.addAll(l);
            e.add(node.val);
            if (!e.isEmpty()) {
                res.add(e);
            }
        } else if (node != null) {
            l.add(node.val);
            dfs(node.left, param2 + node.val, tar, l);
            dfs(node.right, param2 + node.val, tar, l);
            l.remove(l.size() - 1);
        }
    }
}
