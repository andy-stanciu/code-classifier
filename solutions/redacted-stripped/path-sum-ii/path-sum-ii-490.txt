class Solution {

    List<List<Integer>> resultList = new ArrayList<>();

    public List<List<Integer>> method1(TreeNode root, int param1) {
        if (root == null)
            return resultList;
        dfsHelper(root, param1, 0, new ArrayList<>());
        return resultList;
    }

    private void dfsHelper(TreeNode node, int param1, int param2, List<Integer> list) {
        if (node != null) {
            list.add(node.val);
            param2 += node.val;
        }
        if (node == null) {
            return;
        }
        if (node.left == null && node.right == null && param2 == param1) {
            resultList.add(new ArrayList<>(list));
        }
        if (node.left != null) {
            dfsHelper(node.left, param1, param2, list);
            list.remove(list.size() - 1);
        }
        if (node.right != null) {
            dfsHelper(node.right, param1, param2, list);
            list.remove(list.size() - 1);
        }
    }
}
