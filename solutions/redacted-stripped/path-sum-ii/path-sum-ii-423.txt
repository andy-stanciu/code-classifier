class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> result = new ArrayList<>();
        LinkedList<Integer> comb = new LinkedList<>();
        dfs(result, comb, root, param1);
        return result;
    }

    private void dfs(List<List<Integer>> result, LinkedList<Integer> comb, TreeNode root, int param1) {
        if (root == null) {
            return;
        }
        if (root.left == null && root.right == null) {
            if (param1 == root.val) {
                comb.add(root.val);
                result.add(new ArrayList<>(comb));
                comb.removeLast();
            }
            return;
        }
        comb.add(root.val);
        dfs(result, comb, root.left, param1 - root.val);
        dfs(result, comb, root.right, param1 - root.val);
        comb.removeLast();
    }
}
