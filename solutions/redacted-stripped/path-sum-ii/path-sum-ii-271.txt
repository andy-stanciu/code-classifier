class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> lastList = new ArrayList<>();
        if (root == null) {
            return lastList;
        }
        List<Integer> innerlist = new ArrayList<>();
        method2(root, param1, lastList, innerlist);
        return lastList;
    }

    private void method2(TreeNode node, int param1, List<List<Integer>> lastList, List<Integer> innerlist) {
        if (node == null) {
            return;
        }
        innerlist.add(node.val);
        int var1 = innerlist.stream().reduce(0, Integer::sum);
        if (var1 == param1 && node.right == null && node.left == null) {
            lastList.add(innerlist);
        }
        List<Integer> sublist = new ArrayList<>();
        sublist.addAll(innerlist);
        method2(node.left, param1, lastList, sublist);
        method2(node.right, param1, lastList, innerlist);
    }
}
