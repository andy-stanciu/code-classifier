class Solution {

    public List<List<Integer>> method1(TreeNode root, int param1) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        dfs(root, param1, res, temp);
        return res;
    }

    void dfs(TreeNode node, int param1, List<List<Integer>> res, List<Integer> temp) {
        if (node == null)
            return;
        param1 -= node.val;
        temp.add(node.val);
        if (node.left == null && node.right == null) {
            if (param1 == 0) {
                res.add(new ArrayList<>(temp));
                temp.remove(temp.size() - 1);
                param1 += node.val;
                return;
            } else {
                temp.remove(temp.size() - 1);
                param1 += node.val;
                return;
            }
        }
        if (node.left != null)
            dfs(node.left, param1, res, temp);
        if (node.right != null)
            dfs(node.right, param1, res, temp);
        param1 += node.val;
        if (temp.size() > 1) {
            temp.remove(temp.size() - 1);
        }
    }
}
