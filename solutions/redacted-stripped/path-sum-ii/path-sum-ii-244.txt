class Solution {

    List<List<Integer>> ans;

    public List<List<Integer>> method1(TreeNode root, int param1) {
        ans = new ArrayList<>();
        if (root == null) {
            return ans;
        }
        List<Integer> currList = new ArrayList<>();
        currList.add(root.val);
        dfs(root, param1 - root.val, currList);
        return ans;
    }

    public void dfs(TreeNode node, int remain, List<Integer> currList) {
        if (remain == 0) {
            if (node.left == null && node.right == null) {
                ans.add(new ArrayList<>(currList));
            }
        }
        if (node.left != null) {
            currList.add(node.left.val);
            dfs(node.left, remain - node.left.val, currList);
            currList.remove(currList.size() - 1);
        }
        if (node.right != null) {
            currList.add(node.right.val);
            dfs(node.right, remain - node.right.val, currList);
            currList.remove(currList.size() - 1);
        }
    }
}
