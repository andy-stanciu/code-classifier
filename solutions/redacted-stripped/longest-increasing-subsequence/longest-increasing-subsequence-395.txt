class Solution {

    public static int memoization(int[] arr, int index, int[][] dp, int prev) {
        if (index < 0) {
            return 0;
        }
        if (dp[index][prev] != -1) {
            return dp[index][prev];
        }
        int take = 0;
        if (prev == arr.length || arr[index] < arr[prev]) {
            take = 1 + memoization(arr, index - 1, dp, index);
        }
        int ntake = 0 + memoization(arr, index - 1, dp, prev);
        return dp[index][prev] = Math.max(take, ntake);
    }

    public int lengthOfLIS(int[] arr) {
        int max = 0;
        for (int i = 0; i < arr.length; i++) {
            max = Math.max(max, arr[i]);
        }
        int[][] dp = new int[arr.length][arr.length + 1];
        for (int i = 0; i < dp.length; i++) Arrays.fill(dp[i], -1);
        return memoization(arr, arr.length - 1, dp, arr.length);
    }
}
