class Solution {

    public int lengthOfLIS(int[] nums) {
        List<Integer> lis = new ArrayList<>();
        lis.add(nums[0]);
        for (int i = 1; i < nums.length; i++) {
            int num = nums[i];
            if (num > lis.get(lis.size() - 1)) {
                lis.add(num);
            } else {
                lis.set(findPos(lis, num), num);
            }
        }
        return lis.size();
    }

    private int findPos(List<Integer> lis, int num) {
        int low = 0, high = lis.size() - 1, mid, ans = -1;
        while (low <= high) {
            mid = low + (high - low) / 2;
            if (lis.get(mid) >= num) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }

    Map<Integer, Integer> LISMap = new HashMap<>();

    private int optimisedRecursive(int[] nums, int index) {
        if (index == nums.length - 1) {
            return 1;
        } else if (LISMap.containsKey(index)) {
            return LISMap.get(index);
        } else {
            int ans = 1;
            for (int next = index + 1; next < nums.length; next++) {
                if (nums[next] > nums[index]) {
                    ans = Math.max(ans, 1 + optimisedRecursive(nums, next));
                }
            }
            LISMap.put(index, ans);
            return ans;
        }
    }

    Map<String, Integer> seen = new HashMap<>();

    private int recursive(int[] nums, int index, int lastVisitedIndex) {
        if (index == nums.length) {
            return 0;
        }
        String key = index + "-" + lastVisitedIndex;
        if (seen.containsKey(key))
            return seen.get(key);
        int ans = 0;
        ans = Math.max(ans, recursive(nums, index + 1, lastVisitedIndex));
        if (lastVisitedIndex == -1 || nums[index] > nums[lastVisitedIndex]) {
            ans = Math.max(ans, 1 + recursive(nums, index + 1, index));
        }
        seen.put(key, ans);
        return ans;
    }
}
