class Solution {

    public static int solve(int idx, int[] nums, int prev, int[][] dp) {
        if (idx == nums.length) {
            return 0;
        }
        if (prev != -1 && dp[idx][prev] != -1) {
            return dp[idx][prev];
        }
        int pick = 0;
        if (prev == -1 || nums[idx] > nums[prev]) {
            pick = 1 + solve(idx + 1, nums, idx, dp);
        }
        int notpick = solve(idx + 1, nums, prev, dp);
        if (prev != -1) {
            dp[idx][prev] = Math.max(pick, notpick);
        }
        return Math.max(pick, notpick);
    }

    public static int lengthOfLIS(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int n = nums.length;
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        return solve(0, nums, -1, dp);
    }
}
