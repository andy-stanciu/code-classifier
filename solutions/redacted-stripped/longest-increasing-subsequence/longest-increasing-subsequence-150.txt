class Solution {

    public List<Integer> BinarySearch(int value, List<Integer> arr, int low, int high) {
        if (low > high) {
            return arr;
        }
        int mid = (low + high) / 2;
        if (mid == 0) {
            if (arr.get(0) >= value) {
                arr.set(0, value);
            } else {
                arr.set(1, value);
            }
            return arr;
        }
        if (arr.get(mid) >= value && arr.get(mid - 1) < value) {
            arr.set(mid, value);
            return arr;
        }
        if (arr.get(mid) > value && arr.get(mid - 1) >= value) {
            return BinarySearch(value, arr, low, mid - 1);
        }
        return BinarySearch(value, arr, mid + 1, high);
    }

    public int lengthOfLIS(int[] nums) {
        List<List<Integer>> dp = new ArrayList<>();
        dp.add(new ArrayList<>(Arrays.asList(nums[0])));
        int ptr = 0;
        for (int i = 1; i < nums.length; i++) {
            List<Integer> inner = dp.get(ptr);
            if (nums[i] > inner.get(inner.size() - 1)) {
                inner.add(nums[i]);
                dp.add(inner);
                ptr++;
            } else if (nums[i] == nums[i - 1]) {
                continue;
            } else {
                dp.add(BinarySearch(nums[i], inner, 0, inner.size()));
                ptr++;
            }
        }
        int MAX = -1;
        for (int i = 0; i < dp.size(); i++) {
            MAX = Math.max(MAX, dp.get(i).size());
        }
        return MAX;
    }
}
