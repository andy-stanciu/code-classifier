class Solution {

    public int f(int[] arr, int ind, int prev, int n, int[][] dp) {
        if (ind == n) {
            return 0;
        }
        if (dp[ind][prev + 1] != -1) {
            return dp[ind][prev + 1];
        }
        int nontake = 0 + f(arr, ind + 1, prev, n, dp);
        int take = 0;
        if (prev == -1 || arr[ind] > arr[prev]) {
            take = 1 + f(arr, ind + 1, ind, n, dp);
        }
        return dp[ind][prev + 1] = Math.max(take, nontake);
    }

    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int[][] dp = new int[n][n + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return f(nums, 0, -1, n, dp);
    }
}
