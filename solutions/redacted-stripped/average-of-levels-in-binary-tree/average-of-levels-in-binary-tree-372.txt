class Solution {

    List<Double> ans = new ArrayList<>();

    public List<Double> method1(TreeNode root) {
        traverseLevelOrder(root);
        return ans;
    }

    private int height(TreeNode root) {
        if (root == null) {
            return -1;
        }
        if (root.left == null && root.right == null) {
            return 0;
        }
        return 1 + Math.max(height(root.left), height(root.right));
    }

    public List<Integer> distanceAtKNode(int k, TreeNode root) {
        List<Integer> list = new ArrayList<>();
        distanceAtKNodeHelper(root, k, list);
        return list;
    }

    private void distanceAtKNodeHelper(TreeNode root, int k, List<Integer> list) {
        if (root == null) {
            return;
        }
        if (k == 0) {
            list.add(root.val);
            return;
        }
        distanceAtKNodeHelper(root.left, k - 1, list);
        distanceAtKNodeHelper(root.right, k - 1, list);
    }

    public void traverseLevelOrder(TreeNode root) {
        for (int i = 0; i <= height(root); i++) {
            double sum = 0.0;
            int num = 0;
            for (Integer value : distanceAtKNode(i, root)) {
                sum += value;
                num++;
            }
            ans.add(sum / num);
        }
    }
}
