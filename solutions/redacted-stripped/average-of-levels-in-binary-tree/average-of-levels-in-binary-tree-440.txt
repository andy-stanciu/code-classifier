class Solution {

    public List<Double> method1(TreeNode root) {
        return method2(root);
    }

    private List<Double> method2(TreeNode root) {
        if (root == null)
            return Collections.singletonList(0d);
        List<Double> ans = new ArrayList<>();
        Deque<TreeNode> queue = new ArrayDeque<>();
        queue.addLast(root);
        while (!queue.isEmpty()) {
            int nodeAtCurrLevel = queue.size();
            int nodesToProcessAtCurrLevel = queue.size();
            double var1 = 0d;
            while (nodesToProcessAtCurrLevel > 0) {
                TreeNode currNode = queue.removeFirst();
                var1 += (currNode.val);
                if (currNode.left != null)
                    queue.addLast(currNode.left);
                if (currNode.right != null)
                    queue.addLast(currNode.right);
                nodesToProcessAtCurrLevel -= 1;
            }
            ans.add(var1 / nodeAtCurrLevel);
        }
        return ans;
    }
}
