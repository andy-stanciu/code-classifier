class Solution {

    public List<Double> method1(TreeNode root) {
        return method2(root);
    }

    List<Double> method2(TreeNode root) {
        List<Double> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        Stack<Pair<TreeNode, Integer>> stack = new Stack<Pair<TreeNode, Integer>>();
        stack.add(new Pair<>(root, 1));
        Map<Integer, double[]> levelMap = new HashMap<>();
        while (!stack.isEmpty()) {
            Pair<TreeNode, Integer> pair = stack.pop();
            Integer label = pair.getValue();
            TreeNode node = pair.getKey();
            levelMap.putIfAbsent(label, new double[2]);
            double[] sumCount = levelMap.get(label);
            sumCount[0] += node.val;
            sumCount[1] += 1;
            if (node.right != null) {
                stack.push(new Pair<>(node.right, label + 1));
            }
            if (node.left != null) {
                stack.push(new Pair<>(node.left, label + 1));
            }
        }
        int maxLevel = Collections.max(levelMap.keySet());
        for (int i = 1; i <= maxLevel; i++) {
            double[] sumCount = levelMap.get(i);
            result.add(sumCount[0] / sumCount[1]);
        }
        return result;
    }
}
