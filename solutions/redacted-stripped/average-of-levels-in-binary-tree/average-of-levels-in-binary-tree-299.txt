class Solution {

    public List<Double> method1(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        ArrayList<Double> n = new ArrayList<Double>();
        q.offer(root);
        while (!q.isEmpty()) {
            List<Double> l = new LinkedList<Double>();
            int len = q.size();
            for (int i = 0; i < len; i++) {
                TreeNode current = q.poll();
                if (current.left != null)
                    q.offer(current.left);
                if (current.right != null)
                    q.offer(current.right);
                l.add((double) current.val);
            }
            double sum = l.stream().mapToDouble(Double::doubleValue).sum();
            double le = sum / len;
            n.add(le);
        }
        System.gc();
        return n;
    }
}
