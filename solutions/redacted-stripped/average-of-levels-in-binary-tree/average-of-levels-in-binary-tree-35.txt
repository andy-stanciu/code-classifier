class Solution {

    public List<Double> method1(TreeNode root) {
        List<Double> res = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while (!q.isEmpty()) {
            int size = q.size();
            double sum = 0, count = size;
            while (size-- > 0) {
                TreeNode cur = q.remove();
                sum += cur.val;
                if (cur.left != null)
                    q.add(cur.left);
                if (cur.right != null)
                    q.add(cur.right);
            }
            double avg = sum / count;
            res.add(avg);
        }
        return res;
    }
}

class Solution {

    List<double[]> store = new ArrayList<>();

    public List<Double> method1(TreeNode root) {
        List<Double> res = new ArrayList<>();
        traverse(root, 0);
        for (double[] cur : store) {
            res.add(cur[0] / cur[1]);
        }
        return res;
    }

    private void traverse(TreeNode node, int level) {
        if (node == null)
            return;
        if (store.size() <= level)
            store.add(new double[2]);
        store.get(level)[0] += node.val;
        store.get(level)[1]++;
        traverse(node.left, level + 1);
        traverse(node.right, level + 1);
    }
}
