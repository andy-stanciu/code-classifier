class Solution {

    public List<Double> method1(TreeNode root) {
        return usignRecusrion(root);
    }

    List<Double> usignRecusrion(TreeNode root) {
        List<Double> result = new ArrayList<>();
        if (root == null)
            return result;
        Map<Integer, double[]> levelMap = new HashMap<>();
        dfs(root, 0, levelMap);
        int maxLevel = Collections.max(levelMap.keySet());
        for (int i = 0; i <= maxLevel; i++) {
            double[] sumCount = levelMap.get(i);
            result.add(sumCount[0] / sumCount[1]);
        }
        return result;
    }

    void dfs(TreeNode node, int level, Map<Integer, double[]> levelMap) {
        if (node == null)
            return;
        levelMap.putIfAbsent(level, new double[2]);
        double[] sumCount = levelMap.get(level);
        sumCount[0] += node.val;
        sumCount[1] += 1;
        dfs(node.left, level + 1, levelMap);
        dfs(node.right, level + 1, levelMap);
    }
}
