class Solution {

    public ListNode method1(ListNode head) {
        Stack<ListNode> st = new Stack<ListNode>();
        ListNode temp = head;
        while (temp != null) {
            st.add(temp);
            temp = temp.next;
        }
        ListNode head2 = null;
        ListNode prev = null;
        while (!st.isEmpty()) {
            ListNode node = st.pop();
            node.next = null;
            if (head2 == null) {
                head2 = node;
                prev = node;
            } else {
                prev.next = node;
                prev = node;
            }
        }
        return head2;
    }

    public ListNode method2(ListNode head) {
        ListNode temp = head;
        ListNode prev = null;
        ListNode front = null;
        while (temp != null) {
            front = temp.next;
            temp.next = prev;
            prev = temp;
            temp = front;
        }
        return prev;
    }

    public ListNode method3(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode newHead = reverseList(head.next);
        ListNode front = head.next;
        front.next = head;
        head.next = null;
        return newHead;
    }
}
