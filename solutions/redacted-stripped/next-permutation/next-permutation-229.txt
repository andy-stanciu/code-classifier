class Solution {

    public void method1(int[] nums) {
        int k = 0, l = 0;
        while (k < nums.length) {
            if (k + 1 < nums.length && nums[k] < nums[k + 1]) {
                l = k + 1;
            }
            k++;
        }
        if (l == 0) {
            int i = nums.length - 1;
            while (i >= (nums.length + 1) / 2) {
                swap(nums, nums.length - 1 - i, i);
                i--;
            }
            return;
        }
        l--;
        k = l;
        int replace = 0;
        while (l < nums.length) {
            if (l + 1 < nums.length && nums[k] < nums[l + 1]) {
                replace = l + 1;
            }
            l++;
        }
        swap(nums, k, replace);
        replace = nums.length - 1;
        while (k + 1 < replace) {
            swap(nums, k + 1, replace);
            replace--;
            k++;
        }
    }

    public void swap(int[] nums, int i, int j) {
        nums[i] ^= nums[j];
        nums[j] ^= nums[i];
        nums[i] ^= nums[j];
    }
}
