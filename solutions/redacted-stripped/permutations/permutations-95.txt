class Solution {

    public List<List<Integer>> permute(int[] nums) {
        return permuteHelp(new ArrayList<>(), nums);
    }

    static List<List<Integer>> permuteHelp(List<Integer> up, int[] base) {
        if (base.length == 0) {
            List<List<Integer>> subList = new ArrayList<>();
            subList.add(up);
            return subList;
        }
        int firstMember = base[0];
        List<List<Integer>> answer = new ArrayList<>();
        for (int i = 0; i <= up.size(); i++) {
            List<Integer> temp = new ArrayList<>();
            temp.addAll(up.subList(0, i));
            temp.add(firstMember);
            temp.addAll(up.subList(i, up.size()));
            answer.addAll(permuteHelp(temp, Arrays.copyOfRange(base, 1, base.length)));
        }
        return answer;
    }
}
