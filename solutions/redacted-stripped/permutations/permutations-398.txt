class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> current = new ArrayList<>();
        for (int num : nums) {
            current.add(num);
        }
        recursion(result, current, nums.length);
        return result;
    }

    private void recursion(List<List<Integer>> result, List<Integer> current, int size) {
        if (size == 1) {
            result.add(new ArrayList<>(current));
            return;
        }
        for (int i = 0; i < size; i++) {
            recursion(result, current, size - 1);
            if (size % 2 == 1) {
                int temp = current.get(0);
                current.set(0, current.get(size - 1));
                current.set(size - 1, temp);
            } else {
                int temp = current.get(i);
                current.set(i, current.get(size - 1));
                current.set(size - 1, temp);
            }
        }
    }
}
