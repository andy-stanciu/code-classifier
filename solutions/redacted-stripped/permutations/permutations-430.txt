class Solution {

    List<List<Integer>> list = new ArrayList<>();

    public List<List<Integer>> permute(int[] nums) {
        List<Integer> curr = new ArrayList<>();
        boolean[] used = new boolean[nums.length];
        helper(nums, curr, used);
        return list;
    }

    void helper(int[] nums, List<Integer> curr, boolean[] used) {
        if (curr.size() == nums.length) {
            list.add(new ArrayList<>(curr));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (used[i] || (i > 0 && nums[i] == nums[i - 1] && used[i - 1])) {
                continue;
            }
            curr.add(nums[i]);
            used[i] = true;
            helper(nums, curr, used);
            curr.remove(curr.size() - 1);
            used[i] = false;
        }
    }
}
