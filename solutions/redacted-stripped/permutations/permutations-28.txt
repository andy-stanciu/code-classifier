class Solution {

    List<List<Integer>> res;

    public List<List<Integer>> permute(int[] nums) {
        res = new ArrayList<>();
        backtrack(0, nums);
        return res;
    }

    private void backtrack(int pos, int[] nums) {
        if (pos == nums.length) {
            List<Integer> permuation = new ArrayList<>(nums.length);
            for (int n : nums) permuation.add(n);
            res.add(permuation);
            return;
        }
        for (int i = pos; i < nums.length; i++) {
            swap(i, pos, nums);
            backtrack(pos + 1, nums);
            swap(i, pos, nums);
        }
    }

    private void swap(int i, int j, int[] nums) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
