class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        int start = 0;
        solve(ans, nums, start);
        return ans;
    }

    private void solve(List<List<Integer>> ans, int[] nums, int start) {
        HashSet<Integer> h = new HashSet<>();
        ArrayList<Integer> v = new ArrayList<>();
        if (start == nums.length - 1) {
            for (int i : nums) {
                v.add(i);
            }
            ans.add(v);
            return;
        }
        for (int i = start; i < nums.length; i++) {
            if (!h.contains(nums[i])) {
                h.add(nums[i]);
                v.add(nums[i]);
                swap(nums, i, start);
                solve(ans, nums, start + 1);
                swap(nums, i, start);
            }
        }
    }

    private void swap(int[] nums, int i, int start) {
        int temp = nums[i];
        nums[i] = nums[start];
        nums[start] = temp;
    }
}
