class Solution {

    private int[] nums;

    private List<Integer> path;

    private List<List<Integer>> ans = new ArrayList<>();

    private boolean[] opPath;

    public List<List<Integer>> permute(int[] nums) {
        int n = nums.length;
        this.nums = nums;
        this.path = Arrays.asList(new Integer[nums.length]);
        this.opPath = new boolean[n];
        dfs(0);
        return this.ans;
    }

    public void dfs(int i) {
        int n = nums.length;
        if (i == n) {
            ans.add(new ArrayList<>(path));
            return;
        }
        for (int j = 0; j < n; ++j) {
            if (!opPath[j]) {
                path.set(i, nums[j]);
                opPath[j] = true;
                dfs(i + 1);
                opPath[j] = false;
            }
        }
    }
}
