class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        Set<Integer> path_set = new HashSet<>();
        DFS(path, path_set, nums, result);
        return result;
    }

    private void DFS(List<Integer> path, Set<Integer> path_set, int[] nums, List<List<Integer>> result) {
        if (path.size() == nums.length) {
            result.add(new ArrayList<>(path));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (path_set.contains(nums[i]))
                continue;
            path.add(nums[i]);
            path_set.add(nums[i]);
            DFS(path, path_set, nums, result);
            path.remove(path.size() - 1);
            path_set.remove(nums[i]);
        }
    }
}
