class Solution {

    public List<List<Integer>> permute(int[] nums) {
        return util1(nums);
    }

    public List<List<Integer>> util1(int[] nums) {
        visited = new boolean[nums.length];
        ans = new ArrayList<>();
        helper(nums, new ArrayList<>());
        return ans;
    }

    List<List<Integer>> ans;

    boolean[] visited;

    public void helper(int[] arr, List<Integer> tillNow) {
        if (tillNow.size() == arr.length) {
            ans.add(new ArrayList<>(tillNow));
            return;
        }
        for (int i = 0; i < arr.length; i++) {
            if (visited[i] == false) {
                visited[i] = true;
                tillNow.add(arr[i]);
                helper(arr, tillNow);
                visited[i] = false;
                tillNow.remove(tillNow.size() - 1);
            }
        }
    }
}
