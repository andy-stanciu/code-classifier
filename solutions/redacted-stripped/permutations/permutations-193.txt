class Solution {

    int size = 0;

    public List<List<Integer>> permute(int[] nums) {
        size = nums.length;
        ArrayList<Integer> numList = new ArrayList<>();
        for (int i : nums) {
            numList.add(i);
        }
        List<List<Integer>> result = new ArrayList<>();
        backTrack(result, numList, new ArrayList<>());
        return result;
    }

    private void backTrack(List<List<Integer>> result, ArrayList<Integer> numList, ArrayList<Integer> val) {
        if (numList.size() == 0) {
            result.add(new ArrayList<>(val));
            return;
        }
        for (int i = 0; i < numList.size(); i++) {
            int value = numList.get(i);
            numList.remove(i);
            val.add(value);
            backTrack(result, numList, val);
            val.remove(val.size() - 1);
            numList.add(i, value);
        }
    }
}
