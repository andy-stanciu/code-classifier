class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        boolean[] vis = new boolean[nums.length];
        dfs(nums, list, ans, vis);
        return ans;
    }

    static void dfs(int[] nums, List<Integer> list, List<List<Integer>> ans, boolean[] vis) {
        if (list.size() == nums.length) {
            List<Integer> copy = new ArrayList<>(list);
            ans.add(copy);
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (vis[i] == true)
                continue;
            vis[i] = true;
            list.add(nums[i]);
            dfs(nums, list, ans, vis);
            vis[i] = false;
            list.remove(list.size() - 1);
        }
    }
}
