class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> output = new LinkedList<>();
        List<Integer> combination = new LinkedList<>();
        int index = 0;
        int k = nums.length;
        backtrack(index, nums, k, combination, output);
        return output;
    }

    public void backtrack(int index, int[] nums, int k, List<Integer> combination, List<List<Integer>> output) {
        if (k == 0) {
            output.add(new LinkedList<>(combination));
        } else {
            for (int i = 0; i < nums.length; i++) {
                if (nums[i] == -11)
                    continue;
                combination.add(nums[i]);
                int temp = nums[i];
                nums[i] = -11;
                backtrack(i + 1, nums, k - 1, combination, output);
                nums[i] = temp;
                combination.remove(combination.size() - 1);
            }
        }
    }
}
