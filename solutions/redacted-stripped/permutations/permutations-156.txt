class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        int n = nums.length;
        recursive(0, ans, nums, n);
        return ans;
    }

    void recursive(int start, List<List<Integer>> ans, int[] nums, int n) {
        if (start == n) {
            List<Integer> temp = new ArrayList<>();
            for (int it : nums) {
                temp.add(it);
            }
            ans.add(new ArrayList<>(temp));
            return;
        }
        for (int i = start; i < n; i++) {
            swap(i, start, nums);
            recursive(start + 1, ans, nums, n);
            swap(i, start, nums);
        }
    }

    void swap(int i, int start, int[] nums) {
        int a = nums[i];
        nums[i] = nums[start];
        nums[start] = a;
    }
}
