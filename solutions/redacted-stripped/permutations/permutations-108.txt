class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        List<Integer> numsList = Arrays.stream(nums).boxed().collect(Collectors.toList());
        solve(nums.length, ans, temp, numsList);
        return ans;
    }

    void solve(int n, List<List<Integer>> ans, List<Integer> temp, List<Integer> arr) {
        if (temp.size() == n) {
            ans.add(new ArrayList<>(temp));
        }
        int l = arr.size();
        for (int i = 0; i < l; i++) {
            List<Integer> pass = new ArrayList<>(arr);
            temp.add(pass.remove(i));
            solve(n, ans, temp, pass);
            temp.remove(temp.size() - 1);
        }
    }
}
