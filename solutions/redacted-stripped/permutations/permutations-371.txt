class Solution {

    public void swap(int i, int j, int[] s) {
        int temp = s[i];
        s[i] = s[j];
        s[j] = temp;
    }

    public void findperm(int i, List<List<Integer>> li, int[] nums) {
        if (i == nums.length - 1) {
            List<Integer> lis = new ArrayList<>();
            for (int ip = 0; ip < nums.length; ip++) {
                lis.add(nums[ip]);
            }
            li.add(lis);
            return;
        }
        for (int j = i; j < nums.length; j++) {
            swap(i, j, nums);
            findperm(i + 1, li, nums);
            swap(i, j, nums);
        }
    }

    public List<List<Integer>> permute(int[] nums) {
        int i = 0;
        List<List<Integer>> li = new ArrayList<>();
        findperm(i, li, nums);
        return li;
    }
}
