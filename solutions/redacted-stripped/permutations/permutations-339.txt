class Solution {

    List<List<Integer>> arr = new ArrayList<>();

    public List<List<Integer>> permute(int[] nums) {
        boolean[] bol = new boolean[20 + 1];
        Arrays.fill(bol, false);
        for (int i = 0; i < nums.length; i++) {
            bol[nums[i] + 10] = true;
        }
        backtrack(nums, bol, new ArrayList<Integer>());
        return arr;
    }

    void backtrack(int[] a, boolean[] b, List<Integer> ar) {
        if (ar.size() == a.length) {
            arr.add(new ArrayList<>(ar));
            return;
        }
        for (int i = 0; i < a.length; i++) {
            if (b[a[i] + 10] == true) {
                List<Integer> br = new ArrayList<>(ar);
                br.add(a[i]);
                b[a[i] + 10] = false;
                backtrack(a, b, br);
                b[a[i] + 10] = true;
            }
        }
    }
}
