class Solution {

    int n, comb[] = new int[20], ar[];

    List<Integer> perm = new ArrayList<Integer>();

    List<List<Integer>> s = new ArrayList<List<Integer>>();

    public List<List<Integer>> permute(int[] nums) {
        ar = nums;
        n = nums.length;
        comb = new int[n + 1];
        for (int i = 0; i < n; i++) comb[i] = 0;
        permutation(-1);
        return s;
    }

    void permutation(int i) {
        if ((i + 1) == n)
            s.add(new ArrayList<>(perm));
        for (int j = 0; j < n; j++) if (comb[j] == 0) {
            comb[j] = 1;
            perm.add(ar[j]);
            permutation(i + 1);
            perm.remove(perm.size() - 1);
            comb[j] = 0;
        }
    }
}
