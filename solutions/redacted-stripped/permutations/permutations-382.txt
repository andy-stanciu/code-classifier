class Solution {

    private List<List<Integer>> rs;

    private List<Integer> curList;

    private boolean[] usedIndex;

    public void backtracking(int[] nums) {
        if (curList.size() == nums.length) {
            rs.add(new ArrayList<>(curList));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!usedIndex[i]) {
                curList.add(nums[i]);
                usedIndex[i] = true;
                backtracking(nums);
                curList.remove(curList.size() - 1);
                usedIndex[i] = false;
            }
        }
    }

    public List<List<Integer>> permute(int[] nums) {
        rs = new ArrayList<>();
        curList = new ArrayList<>();
        usedIndex = new boolean[nums.length];
        backtracking(nums);
        return rs;
    }
}
