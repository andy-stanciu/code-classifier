class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> combinations = new ArrayList<>();
        List<Integer> curr = new ArrayList<>();
        Set<Integer> mem = new HashSet<>();
        backtrack(combinations, nums, curr, mem);
        return combinations;
    }

    public void backtrack(List<List<Integer>> combinations, int[] nums, List<Integer> l, Set<Integer> mem) {
        if (l.size() == nums.length) {
            combinations.add(new ArrayList<>(l));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (mem.contains(i)) {
                continue;
            }
            l.add(nums[i]);
            mem.add(i);
            backtrack(combinations, nums, l, mem);
            l.remove(l.size() - 1);
            mem.remove(i);
        }
    }
}
