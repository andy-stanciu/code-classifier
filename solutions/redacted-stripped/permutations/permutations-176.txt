class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        backtrack(new ArrayList<Integer>(), nums, res);
        return res;
    }

    private void backtrack(List<Integer> subset, int[] nums, List<List<Integer>> res) {
        if (subset.size() == nums.length) {
            res.add(new ArrayList<>(subset));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (subset.contains(nums[i]))
                continue;
            subset.add(nums[i]);
            backtrack(subset, nums, res);
            subset.remove(subset.size() - 1);
        }
    }
}
