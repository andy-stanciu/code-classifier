class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> out = new ArrayList<>();
        recurse(new ArrayList<>(), new boolean[nums.length], out, nums);
        return out;
    }

    void recurse(List<Integer> stack, boolean[] used, List<List<Integer>> out, int[] nums) {
        if (stack.size() == nums.length) {
            out.add(new ArrayList<>(stack));
            return;
        }
        for (int i = 0; i < used.length; i += 1) {
            if (used[i])
                continue;
            used[i] = true;
            stack.add(nums[i]);
            recurse(stack, used, out, nums);
            stack.remove((int) stack.size() - 1);
            used[i] = false;
        }
    }
}
