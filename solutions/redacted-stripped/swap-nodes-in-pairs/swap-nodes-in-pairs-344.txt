class Solution {

    public ListNode method1(ListNode head) {
        return reverseKGroup(head, 2);
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode cur = head;
        ListNode prev = null;
        ListNode newHead = head;
        while (cur != null) {
            int i = 0;
            ListNode end = cur;
            while (end != null && i < k) {
                end = end.next;
                i++;
            }
            if (i == k) {
                if (cur == head) {
                    newHead = reverse(cur, end);
                } else {
                    prev.next = reverse(cur, end);
                }
            }
            prev = cur;
            cur = end;
        }
        return newHead;
    }

    public ListNode reverse(ListNode cur1, ListNode end) {
        ListNode prev = end;
        ListNode cur = cur1;
        while (cur != end) {
            ListNode next = cur.next;
            cur.next = prev;
            prev = cur;
            cur = next;
        }
        return prev;
    }

    void method2(ListNode head) {
        System.out.println("");
        ListNode cur = head;
        while (cur != null) {
            System.out.method2(" " + cur.val);
            cur = cur.next;
        }
    }
}
