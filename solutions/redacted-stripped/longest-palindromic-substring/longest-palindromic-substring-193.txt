class Solution {

    public String method1(String s) {
        char[] charcters = new char[s.length()];
        charcters = s.toCharArray();
        String result = "";
        int pos = 0;
        for (char c : charcters) {
            int left = pos - 1;
            int right = pos + 1;
            StringBuilder palindrome = new StringBuilder(String.valueOf(c));
            while (left >= 0 && right < s.length()) {
                if (charcters[left] == charcters[right]) {
                    palindrome.insert(0, String.valueOf(charcters[left]));
                    palindrome.append(String.valueOf(charcters[right]));
                } else {
                    break;
                }
                left--;
                right++;
            }
            if (palindrome.length() > result.length()) {
                result = palindrome.toString();
            }
            left = pos;
            right = pos + 1;
            StringBuilder evenPalindrome = new StringBuilder();
            while (left >= 0 && right < s.length()) {
                if (charcters[left] == charcters[right]) {
                    evenPalindrome.insert(0, charcters[left]);
                    evenPalindrome.append(charcters[right]);
                } else {
                    break;
                }
                left--;
                right++;
            }
            if (evenPalindrome.length() > result.length()) {
                result = evenPalindrome.toString();
            }
            pos++;
        }
        return result;
    }
}
