class Solution {

    public String method1(String s) {
        if (s == null || s.length() == 0) {
            return "";
        }
        StringBuilder transformed = new StringBuilder("#");
        for (char c : s.toCharArray()) {
            transformed.append(c).append("#");
        }
        String T = transformed.toString();
        int n = T.length();
        int[] P = new int[n];
        int center = 0, right = 0;
        for (int i = 0; i < n; i++) {
            int mirror = 2 * center - i;
            if (i < right) {
                P[i] = Math.min(right - i, P[mirror]);
            }
            while (i + P[i] + 1 < n && i - P[i] - 1 >= 0 && T.charAt(i + P[i] + 1) == T.charAt(i - P[i] - 1)) {
                P[i]++;
            }
            if (i + P[i] > right) {
                center = i;
                right = i + P[i];
            }
        }
        int maxLen = 0;
        int maxCenter = 0;
        for (int i = 0; i < n; i++) {
            if (P[i] > maxLen) {
                maxLen = P[i];
                maxCenter = i;
            }
        }
        int start = (maxCenter - maxLen) / 2;
        return s.substring(start, start + maxLen);
    }
}
