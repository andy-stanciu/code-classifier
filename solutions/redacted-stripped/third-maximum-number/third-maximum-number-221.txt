class Solution {

    public int method1(int[] nums) {
        int[] arr = sort(nums);
        int count = 1;
        int max = arr[arr.length - 1];
        for (int i = arr.length - 1; i >= 0; i--) {
            if (arr[i] == max) {
                continue;
            } else if (count == 3) {
                break;
            } else {
                max = arr[i];
                count++;
            }
        }
        return (count == 3) ? max : arr[arr.length - 1];
    }

    private static int[] sort(int[] arr) {
        List<Integer> list = Arrays.stream(arr).boxed().toList();
        List<Integer> sortedList = mergeSortHelper(list);
        return sortedList.stream().mapToInt(Integer::intValue).toArray();
    }

    private static List<Integer> mergeSortHelper(List<Integer> arr) {
        if (arr.size() <= 1) {
            return arr;
        }
        int mid = arr.size() / 2;
        List<Integer> list1 = new ArrayList<>(arr.subList(0, mid));
        List<Integer> list2 = new ArrayList<>(arr.subList(mid, arr.size()));
        list1 = mergeSortHelper(list1);
        list2 = mergeSortHelper(list2);
        return merge(list1, list2);
    }

    private static List<Integer> merge(List<Integer> list1, List<Integer> list2) {
        List<Integer> sortedList = new ArrayList<>();
        int i = 0, j = 0;
        while (i < list1.size() && j < list2.size()) {
            if (list1.get(i) <= list2.get(j)) {
                sortedList.add(list1.get(i));
                i++;
            } else {
                sortedList.add(list2.get(j));
                j++;
            }
        }
        sortedList.addAll(list1.subList(i, list1.size()));
        sortedList.addAll(list2.subList(j, list2.size()));
        return sortedList;
    }
}
