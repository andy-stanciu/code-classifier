class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        int size1 = 0;
        int size2 = 0;
        ListNode tr, head;
        head = null;
        ListNode li, lii;
        li = l1;
        lii = l2;
        int rem = 0;
        String temp = "";
        int data = 0;
        int secd = 0;
        while (li != null && lii != null) {
            data = li.val + lii.val + rem;
            if (data < 10) {
                rem = 0;
                if (head == null) {
                    ListNode node = new ListNode(data);
                    head = node;
                } else {
                    tr = head;
                    while (tr.next != null) {
                        tr = tr.next;
                    }
                    ListNode node = new ListNode(data);
                    tr.next = node;
                }
            } else {
                rem = data;
                if (head == null) {
                    ListNode node = new ListNode(data % 10);
                    rem = rem / 10;
                    head = node;
                } else {
                    tr = head;
                    while (tr.next != null) {
                        tr = tr.next;
                    }
                    ListNode node = new ListNode(rem % 10);
                    tr.next = node;
                    rem = rem / 10;
                }
            }
            li = li.next;
            lii = lii.next;
        }
        if (li == null && lii == null) {
            if (rem > 0) {
                tr = head;
                while (tr.next != null) {
                    tr = tr.next;
                }
                ListNode node = new ListNode(rem);
                tr.next = node;
                return head;
            } else {
                return head;
            }
        }
        if (li != null) {
            while (li != null) {
                secd = li.val + rem;
                if (secd < 10) {
                    tr = head;
                    rem = 0;
                    while (tr.next != null) {
                        tr = tr.next;
                    }
                    ListNode node = new ListNode(secd);
                    tr.next = node;
                } else {
                    rem = secd;
                    if (head == null) {
                        ListNode node = new ListNode(rem % 10);
                        rem = rem / 10;
                        head = node;
                    } else {
                        tr = head;
                        while (tr.next != null) {
                            tr = tr.next;
                        }
                        ListNode node = new ListNode(rem % 10);
                        tr.next = node;
                        rem = rem / 10;
                    }
                }
                li = li.next;
            }
        }
        if (lii != null) {
            while (lii != null) {
                secd = lii.val + rem;
                if (secd < 10) {
                    tr = head;
                    rem = 0;
                    while (tr.next != null) {
                        tr = tr.next;
                    }
                    ListNode node = new ListNode(secd);
                    tr.next = node;
                } else {
                    rem = secd;
                    if (head == null) {
                        ListNode node = new ListNode(rem % 10);
                        rem = rem / 10;
                        head = node;
                    } else {
                        tr = head;
                        while (tr.next != null) {
                            tr = tr.next;
                        }
                        ListNode node = new ListNode(rem % 10);
                        tr.next = node;
                        rem = rem / 10;
                    }
                }
                lii = lii.next;
            }
        }
        if (rem > 0) {
            tr = head;
            while (tr.next != null) {
                tr = tr.next;
            }
            ListNode node = new ListNode(rem);
            tr.next = node;
        }
        return head;
    }
}
