class Solution {

    public ListNode reverse(ListNode head) {
        ListNode cur = head;
        ListNode prev = null;
        ListNode nextnode = null;
        while (cur != null) {
            nextnode = cur.next;
            cur.next = prev;
            prev = cur;
            cur = nextnode;
        }
        return prev;
    }

    public ListNode method1(ListNode l1, ListNode l2) {
        int carry = 0;
        ListNode cur1 = l1;
        ListNode cur2 = l2;
        ListNode newhead = new ListNode(-1);
        ListNode newcur = newhead;
        while (cur1 != null && cur2 != null) {
            int sum = cur1.val + cur2.val + carry;
            carry = sum / 10;
            sum = sum % 10;
            newcur.next = new ListNode(sum);
            newcur = newcur.next;
            cur1 = cur1.next;
            cur2 = cur2.next;
        }
        while (cur1 != null) {
            int sum = cur1.val + carry;
            carry = sum / 10;
            sum = sum % 10;
            newcur.next = new ListNode(sum);
            newcur = newcur.next;
            cur1 = cur1.next;
        }
        while (cur2 != null) {
            int sum = cur2.val + carry;
            carry = sum / 10;
            sum = sum % 10;
            newcur.next = new ListNode(sum);
            newcur = newcur.next;
            cur2 = cur2.next;
        }
        if (carry > 0) {
            newcur.next = new ListNode(carry);
        }
        newhead = newhead.next;
        return newhead;
    }
}
