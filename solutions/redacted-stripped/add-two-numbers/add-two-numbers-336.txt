class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        } else if (l2 == null) {
            return l1;
        }
        ListNode l1Current = l1;
        ListNode l2Current = l2;
        ListNode outputHead = null;
        ListNode outputCurrent = null;
        int carry = 0;
        while ((l1Current != null) || (l2Current != null)) {
            int sum = carry;
            if (l1Current != null) {
                sum += l1Current.val;
                l1Current = l1Current.next;
            }
            if (l2Current != null) {
                sum += l2Current.val;
                l2Current = l2Current.next;
            }
            ListNode newOutput = new ListNode(sum % 10);
            if (outputHead == null) {
                outputHead = newOutput;
                outputCurrent = newOutput;
            } else {
                outputCurrent.next = newOutput;
                outputCurrent = newOutput;
            }
            carry = sum / 10;
        }
        if (carry > 0) {
            outputCurrent.next = new ListNode(carry);
        }
        return outputHead;
    }
}
