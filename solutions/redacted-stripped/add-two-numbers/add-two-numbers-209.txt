public class SolutionTest {

    Solution solution;

    @Before
    public void setUp() {
        solution = new Solution();
    }

    @Test
    public void method1() {
        ListNode l1 = createList(2, 4, 3);
        ListNode l2 = createList(5, 6, 4);
        ListNode result = solution.addTwoNumbers(l1, l2);
        checkResult(result, 7, 0, 8);
    }

    @Test
    public void method2() {
        ListNode l1 = createList(0);
        ListNode l2 = createList(0);
        ListNode result = solution.addTwoNumbers(l1, l2);
        checkResult(result, 0);
    }

    @Test
    public void method3() {
        ListNode l1 = createList(9, 9, 9, 9, 9, 9, 9);
        ListNode l2 = createList(9, 9, 9, 9);
        ListNode result = solution.addTwoNumbers(l1, l2);
        checkResult(result, 8, 9, 9, 9, 0, 0, 0, 1);
    }

    @Test
    public void method4() {
        ListNode l2 = createList(0, 1);
        ListNode result = solution.addTwoNumbers(null, l2);
        checkResult(result, 0, 1);
    }

    @Test
    public void method5() {
        ListNode result = solution.addTwoNumbers(null, null);
        assertNull(result);
    }

    @Test
    public void method6() {
        ListNode l1 = createList(9, 9);
        ListNode l2 = createList(1);
        ListNode result = solution.addTwoNumbers(l1, l2);
        checkResult(result, 0, 0, 1);
    }

    private void checkResult(ListNode result, int... entries) {
        assertNotNull(result);
        ListNode current = result;
        for (int entry : entries) {
            assertNotNull(current);
            assertEquals(entry, current.val);
            current = current.next;
        }
    }

    private ListNode createList(int... entries) {
        ListNode result = new ListNode(0);
        ListNode current = result;
        for (int entry : entries) {
            current.next = new ListNode(entry);
            current = current.next;
        }
        return result.next;
    }
}
