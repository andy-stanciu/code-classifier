class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        int c1 = 0, c2 = 0;
        ListNode t1 = l1, t2 = l2;
        while (t1 != null) {
            t1 = t1.next;
            c1++;
        }
        while (t2 != null) {
            t2 = t2.next;
            c2++;
        }
        if (c1 > c2) {
            return method2(l1, l2);
        } else {
            return method2(l2, l1);
        }
    }

    public ListNode method2(ListNode l1, ListNode l2) {
        int n1, n2, carry = 0;
        ListNode t1 = l1, ans = l1, t3 = t1;
        while (true) {
            if (l1 == null && l2 == null)
                break;
            if (t3.next != null)
                t3 = t3.next;
            n1 = l1.val;
            l1 = l1.next;
            if (l2 != null) {
                n2 = l2.val;
                l2 = l2.next;
            } else
                n2 = 0;
            int sum = n1 + n2 + carry;
            if (sum < 10) {
                t1.val = sum;
                carry = 0;
            } else {
                t1.val = sum % 10;
                carry = sum / 10;
            }
            t1 = t1.next;
        }
        if (carry != 0) {
            ListNode t2 = new ListNode(carry);
            t3.next = t2;
        }
        return ans;
    }
}
