class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        String valueOfL1 = "";
        while (l1 != null) {
            valueOfL1 = l1.val + valueOfL1;
            l1 = l1.next;
        }
        String valueOfL2 = "";
        while (l2 != null) {
            valueOfL2 = l2.val + valueOfL2;
            l2 = l2.next;
        }
        BigInteger one = new BigInteger(valueOfL1);
        BigInteger second = new BigInteger(valueOfL2);
        BigInteger sum = one.add(second);
        if (sum.compareTo(BigInteger.ZERO) == 0)
            return new ListNode(0);
        return returnNode(sum, new ListNode());
    }

    private static ListNode returnNode(BigInteger sum, ListNode node) {
        if (sum.compareTo(BigInteger.ZERO) > 0) {
            node.val = sum.mod(new BigInteger(String.valueOf(10))).intValue();
            node.next = returnNode(sum.divide(BigInteger.valueOf(10)), new ListNode());
            return node;
        } else {
            return null;
        }
    }
}
