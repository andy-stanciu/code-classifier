class Solution {

    public static boolean checkCounts(Set<Character> set, String rn, String m) {
        int countRn, countM;
        for (char c : set) {
            countRn = counting(rn, c);
            countM = counting(m, c);
            if (countRn > countM)
                return false;
        }
        return true;
    }

    public static int counting(String ch, char c) {
        int count = 0;
        char[] charArray = ch.toCharArray();
        int first = ch.indexOf(c), last = ch.lastIndexOf(c);
        for (int i = first; i <= last; i++) if (c == charArray[i])
            count++;
        return count;
    }

    public boolean canConstruct(String param1, String magazine) {
        Set<Character> var1 = new HashSet(), setMagazine = new HashSet();
        for (char c : param1.toCharArray()) {
            var1.add(c);
        }
        for (char c : magazine.toCharArray()) {
            setMagazine.add(c);
        }
        for (char c : var1) {
            if (!setMagazine.contains(c)) {
                return false;
            }
        }
        return checkCounts(var1, param1, magazine);
    }
}
