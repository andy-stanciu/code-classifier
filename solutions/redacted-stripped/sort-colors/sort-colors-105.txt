class Solution {

    public static void method1(int[] nums, int start, int end) {
        if (start >= end) {
            return;
        }
        int middle = start + (end - start) / 2;
        method1(nums, start, middle);
        method1(nums, middle + 1, end);
        Merge(nums, start, middle, end);
    }

    public static void Merge(int[] nums, int start, int middle, int end) {
        int[] MergeArr = new int[end - start + 1];
        int index1 = start;
        int index2 = middle + 1;
        int x = 0;
        while (index1 <= middle && index2 <= end) {
            if (nums[index1] <= nums[index2]) {
                MergeArr[x++] = nums[index1++];
            } else {
                MergeArr[x++] = nums[index2++];
            }
        }
        while (index1 <= middle) {
            MergeArr[x++] = nums[index1++];
        }
        while (index2 <= end) {
            MergeArr[x++] = nums[index2++];
        }
        for (int i = 0; i < MergeArr.length; i++) {
            nums[start++] = MergeArr[i];
        }
    }

    public void method2(int[] nums) {
        int size = nums.length;
        method1(nums, 0, size - 1);
    }
}
