class Solution {

    public int method1(int[] piles, int h) {
        int left = 1;
        int right = getMaxElement(piles);
        while (left < right) {
            int currSpeed = left + (right - left) / 2;
            if (isFeasible(currSpeed, h, piles)) {
                right = currSpeed;
            } else {
                left = currSpeed + 1;
            }
        }
        return right;
    }

    private boolean isFeasible(int speed, int hoursRemaining, int[] piles) {
        boolean isFeasible = true;
        for (int var1 : piles) {
            int hoursNeeded = (int) Math.ceil((double) var1 / speed);
            hoursRemaining = hoursRemaining - hoursNeeded;
            if (hoursRemaining < 0) {
                isFeasible = false;
                break;
            }
        }
        return isFeasible;
    }

    private int getMaxElement(int[] piles) {
        int right = piles[0];
        for (int pile : piles) {
            right = Math.max(right, pile);
        }
        return right;
    }
}
