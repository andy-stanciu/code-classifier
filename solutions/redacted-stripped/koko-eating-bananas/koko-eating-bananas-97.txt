class Solution {

    boolean isPossible(int[] piles, int h, int mid) {
        int totalH = 0;
        for (int i = 0; i < piles.length; i++) {
            totalH += Math.ceil((double) piles[i] / (double) mid);
            if (totalH > h)
                return false;
        }
        return true;
    }

    int findHigh(int[] piles) {
        int high = Integer.MIN_VALUE;
        for (int i = 0; i < piles.length; i++) {
            if (piles[i] > high)
                high = piles[i];
        }
        return high;
    }

    public int method1(int[] piles, int h) {
        if (h < piles.length - 1)
            return -1;
        int low = 1;
        int high = findHigh(piles);
        int ans = -1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (isPossible(piles, h, mid)) {
                ans = mid;
                high = mid - 1;
            } else
                low = mid + 1;
        }
        return ans;
    }
}
