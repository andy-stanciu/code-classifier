class Solution {

    public int method1(int[] piles, int h) {
        if (piles.length <= 0)
            return 0;
        int l = 1, r = 0, mid = 0;
        for (int pile : piles) {
            r = Math.max(r, pile);
        }
        while (l <= r) {
            mid = (r - l) / 2 + l;
            if (canEatAll(mid, piles, h)) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }

    private boolean canEatAll(int speed, int[] piles, int h) {
        int tmpHours = 0;
        for (int pile : piles) {
            tmpHours += (int) Math.ceil((double) pile / (double) speed);
            if (tmpHours > h) {
                return false;
            }
        }
        return tmpHours <= h;
    }
}
