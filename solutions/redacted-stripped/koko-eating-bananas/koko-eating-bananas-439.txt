class Solution {

    public int method1(int[] piles, int h) {
        int minSpeed = 1, maxSpeed = maxSpeed(piles);
        while (minSpeed < maxSpeed) {
            int avgSpeed = minSpeed + (maxSpeed - minSpeed) / 2;
            if (canEatOrNot(piles, avgSpeed, h)) {
                maxSpeed = avgSpeed;
            } else {
                minSpeed = avgSpeed + 1;
            }
        }
        return maxSpeed;
    }

    private boolean canEatOrNot(int[] piles, int speed, int hoursAllowed) {
        int currentHoursNeeded = 0;
        for (int pile : piles) {
            currentHoursNeeded += (pile + speed - 1) / speed;
        }
        return currentHoursNeeded <= hoursAllowed;
    }

    private int maxSpeed(int[] piles) {
        int max = Integer.MIN_VALUE;
        for (int pile : piles) {
            max = Math.max(pile, max);
        }
        return max;
    }
}
