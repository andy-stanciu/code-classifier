class Solution {

    public boolean isPossible(int[] piles, int k, int h) {
        int res = 0;
        for (int i = 0; i < piles.length; i++) {
            res += Math.ceil((double) piles[i] / k);
            if (res > h)
                return false;
        }
        return true;
    }

    public int method1(int[] piles, int h) {
        int low = 1, high = 0, n = piles.length;
        for (int i = 0; i < n; i++) {
            high = Math.max(piles[i], high);
        }
        int speed = high;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (isPossible(piles, mid, h)) {
                speed = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
}
