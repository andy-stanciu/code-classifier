class Solution {

    public int findMax(int[] piles) {
        int mx = Integer.MIN_VALUE;
        for (int i = 0; i < piles.length; i++) {
            mx = Math.max(mx, piles[i]);
        }
        return mx;
    }

    public int calculateRequiredtime(int[] piles, int h) {
        int totalTime = 0;
        for (int i = 0; i < piles.length; i++) {
            totalTime += Math.ceil((double) (piles[i]) / (double) (h));
        }
        return totalTime;
    }

    public int method1(int[] piles, int h) {
        int left = 0;
        int right = findMax(piles);
        while (left <= right) {
            int mid = (left + right) / 2;
            int requiredTime = calculateRequiredtime(piles, mid);
            if (requiredTime <= h) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
}
