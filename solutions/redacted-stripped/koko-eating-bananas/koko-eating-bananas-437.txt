class Solution {

    public int method1(int[] piles, int h) {
        int start = 1;
        int end = getMaxPile(piles);
        while (start < end) {
            int mid = start + (end - start) / 2;
            if (canEatAll(piles, h, mid)) {
                end = mid;
            } else {
                start = mid + 1;
            }
        }
        return start;
    }

    boolean canEatAll(int[] piles, int h, int speed) {
        int hoursSpent = 0;
        for (int i = 0; i < piles.length; i++) {
            hoursSpent += piles[i] / speed;
            if (piles[i] % speed != 0) {
                hoursSpent += 1;
            }
        }
        return hoursSpent <= h;
    }

    private int getMaxPile(int[] piles) {
        int maxPile = 0;
        for (int pile : piles) {
            maxPile = Math.max(maxPile, pile);
        }
        return maxPile;
    }
}
