class Solution {

    public int method1(int[] piles, int h) {
        int low = 1;
        int high = getmax(piles);
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (caneat(piles, h, mid)) {
                high = mid;
            } else
                low = mid + 1;
        }
        return low;
    }

    public boolean caneat(int[] piles, int h, int k) {
        int hours = 0;
        for (int i = 0; i < piles.length; i++) {
            hours += (piles[i] + k - 1) / k;
        }
        return hours <= h;
    }

    public int getmax(int[] piles) {
        int m = Integer.MIN_VALUE;
        for (int i = 0; i < piles.length; i++) {
            if (m < piles[i])
                m = piles[i];
        }
        return m;
    }
}
