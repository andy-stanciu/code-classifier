class Solution {

    public int method1(int[] piles, int h) {
        int k = -1;
        int start = 1;
        int end = maxElement(piles);
        while (start <= end) {
            int mid = start + (end - start) / 2;
            int hours = method2(piles, mid);
            if (hours > h) {
                start = mid + 1;
            } else if (hours <= h) {
                k = mid;
                end = mid - 1;
            }
        }
        return k;
    }

    int method2(int[] piles, int speed) {
        int hours = 0;
        for (int pile : piles) {
            if (pile / speed == 0) {
                hours += 1;
                continue;
            }
            double hoursDouble = ((double) pile) / ((double) speed);
            hours += Math.ceil(hoursDouble);
        }
        return hours;
    }

    int maxElement(int[] piles) {
        int maximum = piles[0];
        for (int pile : piles) {
            if (pile > maximum)
                maximum = pile;
        }
        return maximum;
    }
}
