class Solution {

    public int maximumElementInPiles(int[] piles) {
        int maximumElementValue = Integer.MAX_VALUE;
        for (int i = 0; i < piles.length; i++) {
            maximumElementValue = Math.max(piles[i], maximumElementValue);
        }
        return maximumElementValue;
    }

    public int timeTakenByMid(int[] piles, int middleValue) {
        int timeTakenByMiddleValue = 0;
        for (int i = 0; i < piles.length; i++) {
            timeTakenByMiddleValue += Math.ceil((double) piles[i] / middleValue);
        }
        return timeTakenByMiddleValue;
    }

    public int method1(int[] piles, int h) {
        int low = 0;
        int high = maximumElementInPiles(piles);
        int minimumTimeTaken = -1;
        while (low <= high) {
            int mid = (high + low) / 2;
            int timeTakenWithMiddleValue = timeTakenByMid(piles, mid);
            if (timeTakenWithMiddleValue <= h) {
                minimumTimeTaken = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return minimumTimeTaken;
    }
}
