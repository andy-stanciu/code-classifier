class Solution {

    public int method1(int[] piles, int h) {
        Arrays.sort(piles);
        int minValue = Integer.MAX_VALUE, low = 1, high = piles[piles.length - 1];
        if (piles.length == h) {
            return high;
        }
        while (low < high) {
            int mid = low + ((high - low) / 2);
            int val = computeTotalTime(piles, mid);
            if (val > h) {
                low = mid + 1;
            } else {
                high = mid - 1;
                minValue = Math.min(mid, minValue);
            }
        }
        int val = computeTotalTime(piles, low);
        return val <= h ? Math.min(low, minValue) : minValue;
    }

    int computeTotalTime(int[] piles, int minValue) {
        int timeTaken = 0;
        for (int i = 0; i < piles.length; i++) {
            timeTaken += Math.ceil((double) piles[i] / (double) minValue);
        }
        return timeTaken;
    }
}
