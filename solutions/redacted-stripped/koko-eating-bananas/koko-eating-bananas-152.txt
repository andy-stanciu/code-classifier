class Solution {

    private long getRequiredHoursForGivenSpeed(int[] piles, int speed, int maxHoursAllowed) {
        long totalHours = 0;
        for (int pile : piles) {
            totalHours += (pile + speed - 1) / speed;
            if (totalHours > maxHoursAllowed) {
                break;
            }
        }
        return totalHours;
    }

    public int method1(int[] piles, int h) {
        int n = piles.length;
        int maxSpeed = 0;
        for (int var1 : piles) {
            maxSpeed = Math.max(maxSpeed, var1);
        }
        maxSpeed = Math.max(maxSpeed, h);
        int low = 1;
        int high = maxSpeed;
        while (low <= high) {
            int mid = (low + high) / 2;
            long requiredHours = getRequiredHoursForGivenSpeed(piles, mid, h);
            if (requiredHours > h) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return low;
    }
}
