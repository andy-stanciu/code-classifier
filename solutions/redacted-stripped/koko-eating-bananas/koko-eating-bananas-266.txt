class Solution {

    public int method1(int[] piles, int h) {
        int lo = 1;
        int hi = findMax(piles);
        int ans = -1;
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            boolean flag = isValid(mid, piles, h);
            if (flag) {
                ans = mid;
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
        return ans;
    }

    boolean isValid(int possibleAns, int[] nums, int maxHours) {
        int currentHours = 0;
        for (int i = 0; i < nums.length; i++) {
            currentHours += Math.ceil((double) (nums[i]) / (double) (possibleAns));
        }
        return currentHours <= maxHours;
    }

    int findMax(int[] piles) {
        int max = piles[0];
        for (int i = 1; i < piles.length; i++) {
            max = Math.max(max, piles[i]);
        }
        return max;
    }
}
