class Solution {

    private boolean isPossible(int[] piles, int h, int k) {
        long totalHours = 0;
        for (int var1 : piles) {
            totalHours += (int) Math.ceil((double) var1 / k);
        }
        return totalHours <= h;
    }

    private int findMaxValueInPiles(int[] piles) {
        int maxValue = Integer.MIN_VALUE;
        for (int value : piles) {
            maxValue = Math.max(maxValue, value);
        }
        return maxValue;
    }

    public int method1(int[] piles, int h) {
        if (piles == null || piles.length == 0) {
            return 0;
        }
        int left = 1;
        int right = findMaxValueInPiles(piles);
        int candidateForK = -1;
        int answer = 1;
        while (left <= right) {
            candidateForK = left + (right - left) / 2;
            if (isPossible(piles, h, candidateForK)) {
                answer = candidateForK;
                right = candidateForK - 1;
            } else {
                left = candidateForK + 1;
            }
        }
        return answer;
    }
}
