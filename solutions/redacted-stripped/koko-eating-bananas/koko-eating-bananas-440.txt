class Solution {

    public int method1(int[] piles, int h) {
        int minK = 1;
        int maxK = Arrays.stream(piles).max().getAsInt();
        while (minK <= maxK) {
            int guess = (minK + maxK) >>> 1;
            if (isPossible(piles, h, guess)) {
                maxK = guess - 1;
            } else {
                minK = guess + 1;
            }
        }
        return minK;
    }

    private boolean isPossible(int[] piles, int h, int k) {
        int hoursRequired = 0;
        int doubleHoursRequired = 0;
        for (int i = 0; i < piles.length; i++) {
            int hoursForPile = (int) Math.ceil((double) piles[i] / k);
            double hrsForPile = Math.ceil((double) piles[i] / k);
            hoursRequired += hoursForPile;
            doubleHoursRequired += hrsForPile;
        }
        return doubleHoursRequired <= h;
    }
}
