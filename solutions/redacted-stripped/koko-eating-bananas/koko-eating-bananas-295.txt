class Solution {

    public int method1(int[] piles, int h) {
        int low = 1;
        int high = 1;
        for (int pile : piles) high = Math.max(high, pile);
        int mid;
        int ans = 1;
        while (low <= high) {
            mid = low + (high - low) / 2;
            if (canEatAllPiles(piles, mid, h)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }

    private boolean canEatAllPiles(int[] piles, int param1, int hours) {
        int ans = 0;
        for (int pile : piles) {
            ans += (int) Math.ceil((double) pile / (double) param1);
            if (ans > hours)
                return false;
        }
        return ans <= hours;
    }
}
