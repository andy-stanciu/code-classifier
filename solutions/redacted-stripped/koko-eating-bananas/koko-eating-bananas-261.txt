class Solution {

    public boolean isPossible(int[] piles, int h, int mins) {
        int load = 0;
        int count = 0;
        for (int i = 0; i < piles.length; i++) {
            if (piles[i] % mins == 0)
                count += piles[i] / mins;
            else
                count += piles[i] / mins + 1;
        }
        if (count <= h)
            return true;
        else
            return false;
    }

    public int method1(int[] piles, int h) {
        int max = 0;
        for (int i = 0; i < piles.length; i++) {
            if (piles[i] > max)
                max = piles[i];
        }
        int hi = Integer.MAX_VALUE, lo = 1;
        int ans = max;
        while (hi >= lo) {
            int mid = lo + (hi - lo) / 2;
            if (isPossible(piles, h, mid)) {
                ans = mid;
                hi = mid - 1;
            } else
                lo = mid + 1;
        }
        return ans;
    }
}
