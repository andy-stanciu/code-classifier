class Solution {

    public int method1(int[] piles, int h) {
        int start = 1;
        int end = Integer.MAX_VALUE;
        int n = piles.length;
        for (int i = 0; i < n; i++) {
            end = Math.max(end, piles[i]);
        }
        int res = end;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (canEat(piles, n, h, mid)) {
                res = mid;
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return res;
    }

    boolean canEat(int[] piles, int n, int h, int max) {
        int hours = 0;
        for (int i = 0; i < n; i++) {
            hours += (piles[i] + max - 1) / max;
        }
        return hours <= h;
    }
}
