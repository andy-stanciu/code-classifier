class Solution {

    public int findMax(int[] v) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < v.length; i++) {
            max = Math.max(max, v[i]);
        }
        return max;
    }

    public int calculateH(int[] v, int mid) {
        int totalh = 0;
        for (int i = 0; i < v.length; i++) {
            totalh += Math.ceil((double) (v[i]) / (double) (mid));
        }
        return totalh;
    }

    public int method1(int[] piles, int h) {
        int start = 1;
        int end = findMax(piles);
        while (start <= end) {
            int mid = start + (end - start) / 2;
            int totalh = calculateH(piles, mid);
            if (totalh <= h) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return start;
    }
}
