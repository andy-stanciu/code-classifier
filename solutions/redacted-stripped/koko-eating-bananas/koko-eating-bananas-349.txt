class Solution {

    public int method1(int[] piles, int h) {
        int max = getMax(piles);
        if (h == piles.length)
            return max;
        return method1(piles, h, 1, max);
    }

    private int getMax(int[] piles) {
        int max = Integer.MIN_VALUE;
        for (int pile : piles) {
            if (pile > max)
                max = pile;
        }
        return max;
    }

    public int method1(int[] piles, int h, int start, int end) {
        long time = 0;
        if (start > end)
            return start;
        int mid = (start + end) / 2;
        for (int i = 0; i < piles.length; i++) {
            if (piles[i] <= mid)
                time++;
            else {
                time += piles[i] / mid;
                if (piles[i] % mid >= 1)
                    time++;
            }
        }
        if (time > h) {
            return method1(piles, h, mid + 1, end);
        } else
            return method1(piles, h, start, mid - 1);
    }
}
