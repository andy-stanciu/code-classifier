class Solution {

    public int method1(int[] piles, int h) {
        int n = piles.length;
        int max = Integer.MIN_VALUE;
        for (int i = 0; i <= n - 1; i++) {
            if (piles[i] > max) {
                max = piles[i];
            }
        }
        int minResult = max;
        int left = 1;
        int right = max;
        while (left <= right) {
            int mid = (left + right) / 2;
            int totalHrs = method2(piles, mid);
            if (totalHrs <= h) {
                right = mid - 1;
                if (minResult > mid) {
                    minResult = mid;
                }
            } else if (totalHrs > h) {
                left = mid + 1;
            }
        }
        return minResult;
    }

    public int method2(int[] piles, int k) {
        int n = piles.length;
        double sum = 0;
        for (int i = 0; i < n; i++) {
            sum = sum + Math.ceil((double) (piles[i]) / (double) (k));
        }
        return (int) sum;
    }
}
