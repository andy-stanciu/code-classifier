class Solution {

    ArrayList<Integer> list = new ArrayList<>();

    public int method1(TreeNode root, int k) {
        traverse(root);
        return method2(0, list.size() - 1, k);
    }

    private void traverse(TreeNode node) {
        if (node != null) {
            traverse(node.left);
            list.add(node.val);
            traverse(node.right);
        }
    }

    private int method2(int start, int end, int k) {
        if (start == end) {
            return list.get(start);
        }
        int q = partition(start, end);
        int var1 = q - start + 1;
        if (k == var1) {
            return list.get(q);
        } else if (k < var1) {
            return method2(start, q - 1, k);
        } else {
            return method2(q + 1, end, k - var1);
        }
    }

    private int partition(int start, int end) {
        int pivot = list.get(end);
        int i = start - 1;
        for (int j = start; j <= end - 1; j++) {
            if (list.get(j) <= pivot) {
                i++;
                swap(i, j);
            }
        }
        int var2 = i + 1;
        swap(var2, end);
        return var2;
    }

    private void swap(int i, int j) {
        int t = list.get(i);
        list.set(i, list.get(j));
        list.set(j, t);
    }
}
