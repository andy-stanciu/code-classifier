class Solution {

    public int findLastIndex(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        int result = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                result = mid;
                left = mid + 1;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return result;
    }

    public int findFirstIndex(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        int result = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                result = mid;
                right = mid - 1;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return result;
    }

    public int[] intersect(int[] nums1, int[] nums2) {
        List<Integer> set = new ArrayList<>();
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int n1 = nums1.length, n2 = nums2.length;
        int i1 = 0, i2 = 0;
        while (i1 < n1) {
            int target = nums1[i1];
            int lastIndex = findLastIndex(nums2, target);
            if (lastIndex == -1) {
                i1++;
                continue;
            }
            int firstIndex = findFirstIndex(nums2, target);
            int temp = i1;
            while (i1 < n1 - 1 && nums1[i1] == nums1[i1 + 1]) {
                i1++;
            }
            for (int i = 0; i < Math.min(lastIndex - firstIndex, i1 - temp) + 1; i++) {
                set.add(target);
            }
            i1++;
        }
        return set.stream().mapToInt(i -> i).toArray();
    }
}
