class Solution {

    public ListNode method1(ListNode[] param1) {
        if (param1 == null || param1.length == 0) {
            return null;
        }
        return method1(param1, 0, param1.length - 1);
    }

    private ListNode method1(ListNode[] param1, int start, int end) {
        if (start == end) {
            return param1[start];
        }
        int mid = start + (end - start) / 2;
        ListNode left = method1(param1, start, mid);
        ListNode right = method1(param1, mid + 1, end);
        return method2(left, right);
    }

    private ListNode method2(ListNode left, ListNode right) {
        ListNode head = new ListNode(-1);
        ListNode temp = head;
        while (left != null && right != null) {
            if (left.val < right.val) {
                temp.next = left;
                left = left.next;
            } else {
                temp.next = right;
                right = right.next;
            }
            temp = temp.next;
        }
        while (left != null) {
            temp.next = left;
            left = left.next;
            temp = temp.next;
        }
        while (right != null) {
            temp.next = right;
            right = right.next;
            temp = temp.next;
        }
        return head.next;
    }
}
