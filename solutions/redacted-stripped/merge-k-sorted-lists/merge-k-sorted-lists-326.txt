class Solution {

    public ListNode method1(ListNode[] param1) {
        if (param1 == null || param1.length == 0)
            return null;
        return method2(param1, 0, param1.length - 1);
    }

    private ListNode method2(ListNode[] param1, int start, int end) {
        if (start == end)
            return param1[start];
        if (start + 1 == end)
            return method3(param1[start], param1[end]);
        int mid = start + (end - start) / 2;
        ListNode left = method2(param1, start, mid);
        ListNode right = method2(param1, mid + 1, end);
        return method3(left, right);
    }

    private ListNode method3(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                current.next = l1;
                l1 = l1.next;
            } else {
                current.next = l2;
                l2 = l2.next;
            }
            current = current.next;
        }
        if (l1 != null)
            current.next = l1;
        if (l2 != null)
            current.next = l2;
        return dummy.next;
    }
}
