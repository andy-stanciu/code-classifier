class Solution {

    public ListNode method1(ListNode left, ListNode right) {
        ListNode dummy = new ListNode(-1);
        ListNode temp = dummy;
        while (left != null && right != null) {
            if (left.val < right.val) {
                temp.next = left;
                temp = temp.next;
                left = left.next;
            } else {
                temp.next = right;
                temp = temp.next;
                right = right.next;
            }
        }
        while (left != null) {
            temp.next = left;
            temp = temp.next;
            left = left.next;
        }
        while (right != null) {
            temp.next = right;
            temp = temp.next;
            right = right.next;
        }
        return dummy.next;
    }

    public ListNode method2(List<ListNode> param1, int start, int end) {
        if (start == end) {
            return param1.get(start);
        }
        int mid = start + (end - start) / 2;
        ListNode left = method2(param1, start, mid);
        ListNode right = method2(param1, mid + 1, end);
        return method1(left, right);
    }

    public ListNode method3(List<ListNode> param1) {
        if (param1.size() == 0) {
            return null;
        }
        return method2(param1, 0, param1.size() - 1);
    }
}
