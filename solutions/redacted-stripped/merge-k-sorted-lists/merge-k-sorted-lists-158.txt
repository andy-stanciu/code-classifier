class Solution {

    public ListNode method1(ListNode[] param1) {
        Stack<Integer> stack1 = new Stack<>();
        Stack<Integer> stack2 = new Stack<>();
        ListNode fin_list = null;
        for (int i = 0; i < param1.length; i++) {
            ListNode list = param1[i];
            while (list != null) {
                int val = list.val;
                while (!stack1.isEmpty() && stack1.peek() > val) {
                    stack2.push(stack1.pop());
                }
                while (!stack2.isEmpty() && stack2.peek() <= val) {
                    stack1.push(stack2.pop());
                }
                stack1.push(val);
                list = list.next;
            }
        }
        while (!stack2.isEmpty()) {
            stack1.push(stack2.pop());
        }
        ListNode prev = null;
        ListNode curr = null;
        while (!stack1.isEmpty()) {
            int valu = stack1.pop();
            curr = new ListNode(valu);
            curr.next = prev;
            prev = curr;
        }
        return curr;
    }
}
