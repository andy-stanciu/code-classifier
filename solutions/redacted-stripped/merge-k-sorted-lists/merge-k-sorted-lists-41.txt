class Solution {

    public ListNode method1(ListNode[] param1) {
        if (param1 == null || param1.length == 0) {
            return null;
        }
        return divideAndConquer(param1, 0, param1.length - 1);
    }

    public ListNode divideAndConquer(ListNode[] param1, int low, int high) {
        if (low > high)
            return null;
        if (low == high)
            return param1[low];
        int mid = low + (high - low) / 2;
        ListNode left = divideAndConquer(param1, low, mid);
        ListNode right = divideAndConquer(param1, mid + 1, high);
        return method2(left, right);
    }

    public ListNode method2(ListNode n1, ListNode n2) {
        ListNode dummy = new ListNode(-1);
        ListNode prev = dummy;
        while (n1 != null && n2 != null) {
            if (n1.val < n2.val) {
                prev.next = n1;
                n1 = n1.next;
            } else {
                prev.next = n2;
                n2 = n2.next;
            }
            prev = prev.next;
        }
        if (n1 != null)
            prev.next = n1;
        if (n2 != null)
            prev.next = n2;
        return dummy.next;
    }
}
