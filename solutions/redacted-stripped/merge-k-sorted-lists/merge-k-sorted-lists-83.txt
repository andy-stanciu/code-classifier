class Solution {

    private ListNode method1(ListNode l1, ListNode l2) {
        if (l1 == null)
            return l2;
        if (l2 == null)
            return l1;
        ListNode res = null;
        if (l1.val <= l2.val) {
            res = l1;
            l1 = l1.next;
        } else {
            res = l2;
            l2 = l2.next;
        }
        ListNode temp = res;
        while (l1 != null && l2 != null) {
            if (l1.val <= l2.val) {
                temp.next = l1;
                l1 = l1.next;
            } else {
                temp.next = l2;
                l2 = l2.next;
            }
            temp = temp.next;
        }
        if (l1 == null) {
            temp.next = l2;
        }
        if (l2 == null) {
            temp.next = l1;
        }
        return res;
    }

    private ListNode method2(ListNode[] param1, int i, int j) {
        if (j < i)
            return null;
        if (i == j)
            return param1[i];
        int mid = (i + j) / 2;
        ListNode l1 = method2(param1, i, mid);
        ListNode l2 = method2(param1, mid + 1, j);
        return method1(l1, l2);
    }

    public ListNode method3(ListNode[] param1) {
        int N = param1.length;
        int p1 = 0, p2 = N - 1;
        return method2(param1, p1, p2);
    }
}
