class Solution {

    public ListNode method1(ListNode[] param1) {
        ArrayList<Integer> list = new ArrayList<>();
        int k = param1.length;
        for (ListNode node : param1) {
            while (node != null) {
                list.add(node.val);
                node = node.next;
            }
        }
        int n = list.size();
        for (int i = n / 2 - 1; i >= 0; i--) {
            maxheap(list, n, i);
        }
        for (int i = n - 1; i > 0; i--) {
            int temp = list.get(0);
            list.set(0, list.get(i));
            list.set(i, temp);
            maxheap(list, i, 0);
        }
        if (list.isEmpty())
            return null;
        ListNode head = new ListNode(list.get(0));
        ListNode curr = head;
        for (int i = 1; i < n; i++) {
            curr.next = new ListNode(list.get(i));
            curr = curr.next;
        }
        return head;
    }

    public void maxheap(ArrayList<Integer> list, int heapsize, int i) {
        int left = 2 * i + 1;
        int right = 2 * i + 2;
        int largest = i;
        if (left < heapsize && list.get(left) > list.get(largest)) {
            largest = left;
        }
        if (right < heapsize && list.get(right) > list.get(largest)) {
            largest = right;
        }
        if (largest != i) {
            int temp = list.get(i);
            list.set(i, list.get(largest));
            list.set(largest, temp);
            maxheap(list, heapsize, largest);
        }
    }
}
