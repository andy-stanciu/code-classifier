class Solution {

    public ListNode method1(ListNode[] param1) {
        if (param1 == null || param1.length == 0)
            return null;
        return method2(param1, 0, param1.length - 1);
    }

    private ListNode method2(ListNode[] param1, int start, int end) {
        if (start == end)
            return param1[start];
        int middle = start + (end - start) / 2;
        ListNode left = method2(param1, start, middle);
        ListNode right = method2(param1, middle + 1, end);
        return method3(left, right);
    }

    private ListNode method3(ListNode left, ListNode right) {
        ListNode list = new ListNode(0);
        ListNode current = list;
        while (left != null && right != null) {
            if (left.val < right.val) {
                current.next = left;
                left = left.next;
            } else {
                current.next = right;
                right = right.next;
            }
            current = current.next;
        }
        current.next = (left != null) ? left : right;
        return list.next;
    }
}
