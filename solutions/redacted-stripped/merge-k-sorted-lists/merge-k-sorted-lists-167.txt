class Solution {

    public ListNode method1(ListNode[] param1) {
        if (param1 == null || param1.length == 0) {
            return null;
        }
        return method2(param1, 0, param1.length - 1);
    }

    public ListNode method2(ListNode[] param1, int low, int high) {
        if (low == high) {
            return param1[low];
        }
        int mid = low + (high - low) / 2;
        ListNode leftList = method2(param1, low, mid);
        ListNode rightList = method2(param1, mid + 1, high);
        return method3(leftList, rightList);
    }

    public ListNode method3(ListNode l1, ListNode l2) {
        ListNode preHead = new ListNode(-1);
        ListNode head = preHead;
        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                head.next = l1;
                l1 = l1.next;
            } else {
                head.next = l2;
                l2 = l2.next;
            }
            head = head.next;
        }
        head.next = l1 == null ? l2 : l1;
        return preHead.next;
    }
}
