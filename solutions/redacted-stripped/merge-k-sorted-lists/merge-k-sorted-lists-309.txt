class Solution {

    public ListNode method1(ListNode[] param1) {
        Comparator<ListNode> valComparator = new Comparator<ListNode>() {

            @Override
            public int compare(ListNode p1, ListNode p2) {
                return Integer.compare(p1.val, p2.val);
            }
        };
        PriorityQueue<ListNode> minHeap = new PriorityQueue<>(valComparator);
        for (int i = 0; i < param1.length; i++) {
            if (param1[i] != null) {
                minHeap.add(param1[i]);
                param1[i] = param1[i].next;
            }
        }
        ListNode head = new ListNode();
        ListNode h = head;
        ListNode temp;
        while (!minHeap.isEmpty()) {
            temp = minHeap.poll();
            if (temp.next != null)
                minHeap.add(temp.next);
            h.next = temp;
            h = temp;
        }
        return head.next;
    }
}
