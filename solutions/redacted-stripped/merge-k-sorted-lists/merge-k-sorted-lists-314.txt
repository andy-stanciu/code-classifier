class Solution {

    public class Pair implements Comparable<Pair> {

        int v;

        ListNode n;

        Pair(int v, ListNode n) {
            this.v = v;
            this.n = n;
        }

        @Override
        public int compareTo(Pair other) {
            return Integer.compare(this.v, other.v);
        }
    }

    public ListNode method1(ListNode[] param1) {
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        for (int i = 0; i < param1.length; i++) {
            if (param1[i] != null)
                pq.add(new Pair(param1[i].val, param1[i]));
        }
        ListNode dummy = new ListNode();
        ListNode temp = dummy;
        while (!pq.isEmpty()) {
            temp.next = pq.poll().n;
            temp = temp.next;
            if (temp.next != null) {
                pq.add(new Pair(temp.next.val, temp.next));
            }
        }
        return dummy.next;
    }
}
