class Solution {

    public ListNode method1(ListNode[] param1) {
        if (param1 == null || param1.length == 0) {
            return null;
        }
        return method2(param1, 0, param1.length - 1);
    }

    private ListNode method2(ListNode[] param1, int start, int end) {
        if (start == end) {
            return param1[start];
        }
        int mid = start + (end - start) / 2;
        ListNode leftList = method2(param1, start, mid);
        ListNode rightList = method2(param1, mid + 1, end);
        return method3(leftList, rightList);
    }

    private ListNode method3(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        }
        if (l2 == null) {
            return l1;
        }
        if (l1.val < l2.val) {
            l1.next = method3(l1.next, l2);
            return l1;
        } else {
            l2.next = method3(l2.next, l1);
            return l2;
        }
    }
}
