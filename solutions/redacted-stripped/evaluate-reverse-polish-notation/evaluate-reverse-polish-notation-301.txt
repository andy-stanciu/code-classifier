class Solution {

    public int evalRPN(String[] tokens) {
        int tokensLen = tokens.length;
        Stack<Integer> postFix = new Stack<>();
        int operand1, operand2;
        for (int i = 0; i < tokensLen; i++) {
            switch(tokens[i]) {
                case "+":
                    postFix.push(postFix.pop() + postFix.pop());
                    break;
                case "-":
                    operand2 = postFix.pop();
                    operand1 = postFix.pop();
                    postFix.push(operand1 - operand2);
                    break;
                case "/":
                    operand2 = postFix.pop();
                    operand1 = postFix.pop();
                    postFix.push((int) (operand1 / operand2));
                    break;
                case "*":
                    postFix.push(postFix.pop() * postFix.pop());
                    break;
                default:
                    postFix.push(Integer.parseInt(tokens[i]));
                    break;
            }
        }
        return postFix.pop();
    }
}
