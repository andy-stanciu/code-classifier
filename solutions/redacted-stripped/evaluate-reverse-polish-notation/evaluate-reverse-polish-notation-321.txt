class Solution {

    public int evalRPN(String[] tokens) {
        Stack<String> st = new Stack<String>();
        int no = tokens.length;
        for (int i = 0; i < no; i++) {
            String s = tokens[i];
            if (s.equals("+") || s.equals("-") || s.equals("*") || s.equals("/")) {
                String n = st.pop();
                String n2 = st.pop();
                if (s.equals("+")) {
                    int a = Integer.parseInt(n) + Integer.parseInt(n2);
                    String k = Integer.toString(a);
                    st.push(k);
                }
                if (s.equals("*")) {
                    int a = Integer.parseInt(n) * Integer.parseInt(n2);
                    String k = Integer.toString(a);
                    st.push(k);
                }
                if (s.equals("-")) {
                    int a = Integer.parseInt(n2) - Integer.parseInt(n);
                    String k = Integer.toString(a);
                    st.push(k);
                }
                if (s.equals("/")) {
                    int a = Integer.parseInt(n2) / Integer.parseInt(n);
                    String k = Integer.toString(a);
                    st.push(k);
                }
            } else {
                st.push(s);
            }
        }
        return Integer.parseInt(st.peek());
    }
}
