class Solution {

    public class Node {

        int data;

        Node next;

        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public class Stack {

        public Node head;

        public boolean isEmpty() {
            return head == null;
        }

        public void push(int data) {
            Node newNode = new Node(data);
            if (head == null) {
                head = newNode;
                return;
            }
            newNode.next = head;
            head = newNode;
        }

        public void pop() {
            if (head == null) {
                return;
            }
            head = head.next;
        }

        public int peek() {
            if (head == null) {
                return -1;
            }
            return head.data;
        }
    }

    public int evalRPN(String[] tokens) {
        Stack s = new Stack();
        for (int i = 0; i < tokens.length; i++) {
            if (tokens[i].equals("+")) {
                int op1 = s.peek();
                s.pop();
                int op2 = s.peek();
                s.pop();
                s.push(op1 + op2);
            } else if (tokens[i].equals("-")) {
                int op1 = s.peek();
                s.pop();
                int op2 = s.peek();
                s.pop();
                s.push(op2 - op1);
            } else if (tokens[i].equals("*")) {
                int op1 = s.peek();
                s.pop();
                int op2 = s.peek();
                s.pop();
                s.push(op1 * op2);
            } else if (tokens[i].equals("/")) {
                int op1 = s.peek();
                s.pop();
                int op2 = s.peek();
                s.pop();
                if (op1 == 0 || op2 == 0) {
                    s.push(0);
                }
                s.push(op2 / op1);
            } else {
                s.push(Integer.parseInt(tokens[i]));
            }
        }
        return s.peek();
    }
}
