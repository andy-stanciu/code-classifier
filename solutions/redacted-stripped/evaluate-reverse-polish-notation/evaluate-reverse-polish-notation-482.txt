class Solution {

    public int evalRPN(String[] tokens) {
        Set<String> operands = Set.of("+", "-", "*", "/");
        Deque<String> stack = new LinkedList<>();
        for (String token : tokens) {
            if (operands.contains(token)) {
                int val2 = Integer.parseInt(stack.pop());
                int val1 = Integer.parseInt(stack.pop());
                switch(token) {
                    case "+" ->
                        stack.push(Integer.toString(val1 + val2));
                    case "-" ->
                        stack.push(Integer.toString(val1 - val2));
                    case "*" ->
                        stack.push(Integer.toString(val1 * val2));
                    case "/" ->
                        stack.push(Integer.toString(val1 / val2));
                }
            } else {
                stack.push(token);
            }
        }
        return !stack.isEmpty() ? Integer.parseInt(stack.peek()) : 0;
    }
}
