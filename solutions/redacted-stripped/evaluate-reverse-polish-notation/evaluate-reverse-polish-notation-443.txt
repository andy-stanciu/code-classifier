class Solution {

    public int evalRPN(String[] tokens) {
        Stack<String> st = new Stack<String>();
        int n = tokens.length;
        int sum = 0;
        int x = 0;
        int y = 0;
        if (n == 1) {
            return Integer.parseInt(tokens[0]);
        }
        for (int i = 0; i < n; i++) {
            switch(tokens[i]) {
                case "+":
                    x = Integer.parseInt(st.pop());
                    y = Integer.parseInt(st.pop());
                    sum = x + y;
                    st.push(Integer.toString(sum));
                    break;
                case "-":
                    x = Integer.parseInt(st.pop());
                    y = Integer.parseInt(st.pop());
                    sum = y - x;
                    st.push(Integer.toString(sum));
                    break;
                case "/":
                    x = Integer.parseInt(st.pop());
                    y = Integer.parseInt(st.pop());
                    sum = y / x;
                    st.push(Integer.toString(sum));
                    break;
                case "*":
                    x = Integer.parseInt(st.pop());
                    y = Integer.parseInt(st.pop());
                    sum = x * y;
                    st.push(Integer.toString(sum));
                    break;
                default:
                    st.push(tokens[i]);
                    break;
            }
        }
        return sum;
    }
}
