class Solution {

    public int compute(int operand1, int operand2, String element) {
        switch(element) {
            case "+":
                return operand1 + operand2;
            case "-":
                return operand1 - operand2;
            case "*":
                return operand1 * operand2;
            case "/":
                return operand1 / operand2;
        }
        return 0;
    }

    public boolean isOperator(String element) {
        switch(element) {
            case "+":
                return true;
            case "-":
                return true;
            case "*":
                return true;
            case "/":
                return true;
        }
        return false;
    }

    public int evalRPN(String[] tokens) {
        Deque<Integer> stack = new ArrayDeque<>();
        for (String element : tokens) {
            if (!isOperator(element)) {
                stack.addLast(Integer.parseInt(element));
            } else {
                int operand2 = stack.removeLast();
                int operand1 = stack.removeLast();
                int resultant = compute(operand1, operand2, element);
                stack.addLast(resultant);
            }
        }
        return stack.removeLast();
    }
}
