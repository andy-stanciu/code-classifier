class Solution {

    public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < tokens.length; i++) {
            if (!stack.isEmpty() && tokens[i].equals("+")) {
                int first = stack.pop();
                int second = stack.pop();
                stack.push(first + second);
            } else if (!stack.isEmpty() && tokens[i].equals("-")) {
                int first = stack.pop();
                int second = stack.pop();
                stack.push(second - first);
            } else if (!stack.isEmpty() && tokens[i].equals("*")) {
                int first = stack.pop();
                int second = stack.pop();
                stack.push(first * second);
            } else if (!stack.isEmpty() && tokens[i].equals("/")) {
                int first = stack.pop();
                int second = stack.pop();
                stack.push(second / first);
            } else {
                stack.push(Integer.parseInt(tokens[i]));
            }
        }
        return stack.peek();
    }

    public static boolean isNumeric(String str) {
        return str.matches("-?\\\\d+(\\\\.\\\\d+)?");
    }
}
