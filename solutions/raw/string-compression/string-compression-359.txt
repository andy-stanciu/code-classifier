class Solution {

    public static int compress(char[] chars) {
        // Initialize a StringBuilder to store the compressed representation
        StringBuilder stringBuilder = new StringBuilder();
        // Store the first character and initialize a counter for repetitions
        char letter = chars[0];
        int counter = 1;
        // Iterate through the characters starting from the second character
        for (int i = 1; i < chars.length; i++) {
            if (letter == chars[i]) {
                // If the current character matches the previous, increment the counter
                counter++;
            } else {
                // If the character changes, process the previous group:
                // Append the previous character
                stringBuilder.append(letter);
                // Append the count if it\'s greater than 1
                if (counter > 1) {
                    stringBuilder.append(counter);
                }
                // Reset the \'letter\' to the new character and \'counter\' to 1
                letter = chars[i];
                counter = 1;
            }
        }
        // Handle the last group of characters after the loop:
        // Append the last character
        stringBuilder.append(letter);
        if (counter > 1) {
            // Append the count if greater than 1
            stringBuilder.append(counter);
        }
        // Convert StringBuilder to a char array for in-place modification
        char[] c = stringBuilder.toString().toCharArray();
        int length = c.length;
        // Copy the compressed characters back into the original array
        for (int i = 0; i < length; i++) {
            chars[i] = c[i];
        }
        // Return the length of the compressed array
        return length;
    }
}
