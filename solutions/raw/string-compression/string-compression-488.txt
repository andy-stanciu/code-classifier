// If you can complete the commented solution with the same approach, please contact..
// class Solution {
//     public int compress(char[] chars) {
//     Stack<Character> st = new Stack<>();
//     int count=0;
//     StringBuilder ans = new StringBuilder();
//     for(int i=0;i<chars.length;i++)
//     {   char temp=chars[i];
//         if(st.isEmpty()){
//             if(i==chars.length-1)
//             {
//                 ans.append(temp);
//             }
//             st.push(temp);
//         }
//          else
//            {
//                 if(st.peek()==temp){
//                     st.push(temp);
//                     if(i==chars.length-1)
//                     {
//                        ans.append(st.peek());
//                        while(!st.isEmpty())
//                        {
//                            st.pop();
//                            count++;
//                        }
//                        ans.append(count);
//                     }
//                 }
//                 else{
//                     if(i==chars.length-1){
//                         ans.append(temp);
//                     }
//                     ans.append(st.peek());
//                     while(!st.isEmpty())
//                     {
//                         st.pop();
//                         count++;
//                     }
//                     ans.append(count);
//                     count=0;
//                 }
//             }
//     }
//     String s = ans.toString();
//     return s.length();
//     }
// }
// // class Solution {
// //     public int compress(char[] chars) {
// //         int index = 0;
// //         int count = 1;
// //         for (int i = 1; i <= chars.length; i++) {
// //             if (i < chars.length && chars[i] == chars[i - 1]) {
// //                 count++;
// //             } else {
// //                 chars[index++] = chars[i - 1];
// //                 if (count > 1) {
// //                     char[] countChars = String.valueOf(count).toCharArray();
// //                     for (char c : countChars) {
// //                         chars[index++] = c;
// //                     }
// //                 }
// //                 count = 1;
// //             }
// //         }
// //         return index;
// //     }
// // }
class Solution {

    public int compress(char[] chars) {
        StringBuilder str = new StringBuilder();
        for (int i = 0; i < chars.length; ) {
            char c = chars[i];
            int count = 1;
            while (i + 1 < chars.length && c == chars[i + 1]) {
                i++;
                count++;
            }
            str.append(c);
            if (count > 1) {
                str.append(count);
            }
            i++;
        }
        char[] comp = str.toString().toCharArray();
        for (int i = 0; i < comp.length; i++) {
            chars[i] = comp[i];
        }
        return comp.length;
    }
}
