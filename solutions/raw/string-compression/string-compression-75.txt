class Solution {

    public int compress(char[] chars) {
        // Pointer for the start of the current character sequence
        int left = 0;
        // Pointer for the end of the current character sequence
        int right = 0;
        // Pointer for the position to write the compressed characters
        int k = 0;
        // Length of the input character array
        int n = chars.length;
        while (right < n) {
            // Move the right pointer to find the end of the current character sequence
            while (right < n && chars[right] == chars[left]) {
                right++;
            }
            // Write the current character to the compressed array
            chars[k++] = chars[left];
            // Count of the current character
            int num = right - left;
            // If the count is greater than 1, convert it to string and write to the array
            if (num > 1) {
                String countStr = Integer.toString(num);
                for (char c : countStr.toCharArray()) {
                    chars[k++] = c;
                }
            }
            // Move the left pointer to the next new character
            left = right;
        }
        // Return the new length of the compressed array
        return k;
    }
}
