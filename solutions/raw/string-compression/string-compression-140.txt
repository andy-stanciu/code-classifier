class Solution {

    public int compress(char[] chars) {
        int n = chars.length;
        // This will track the position to modify in the original array
        int index = 0;
        // This will iterate over the array
        int i = 0;
        while (i < n) {
            // The character currently being processed
            char currentChar = chars[i];
            int count = 0;
            // Count the number of occurrences of the current character
            while (i < n && chars[i] == currentChar) {
                i++;
                count++;
            }
            // Write the character to the array
            chars[index++] = currentChar;
            // If the count is greater than 1, write the digits of the count to the array
            if (count > 1) {
                String countStr = Integer.toString(count);
                for (char c : countStr.toCharArray()) {
                    chars[index++] = c;
                }
            }
        }
        // Return the new length of the compressed array
        return index;
    }

    public static void main(String[] args) {
        // You can test the function here by calling it with different inputs.
        // Example test cases would be placed in a separate testing method or framework.
    }
}
