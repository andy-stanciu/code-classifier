class Solution {

    public boolean isPalindrome(String s) {
        // Check if the string is empty
        if (s.isEmpty()) {
            // An empty string is considered a palindrome
            return true;
        }
        // Pointer for the start of the string
        int start = 0;
        // Pointer for the end of the string
        int last = s.length() - 1;
        // Loop until the two pointers meet
        while (start <= last) {
            // Character at the start pointer
            char currFirst = s.charAt(start);
            // Character at the end pointer
            char currLast = s.charAt(last);
            // Skip non-alphanumeric characters from the start
            if (!Character.isLetterOrDigit(currFirst)) {
                start++;
            } else // Skip non-alphanumeric characters from the end
            if (!Character.isLetterOrDigit(currLast)) {
                last--;
            } else // Compare the characters
            {
                // If characters do not match (case insensitive)
                if (Character.toLowerCase(currFirst) != Character.toLowerCase(currLast)) {
                    // Not a palindrome
                    return false;
                }
                // Move the start pointer forward
                start++;
                // Move the end pointer backward
                last--;
            }
        }
        // The string is a palindrome
        return true;
    }
}
