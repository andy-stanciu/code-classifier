class Solution {

    public boolean isPalindrome(String s) {
        // Initialize two pointers: one starting from the beginning (left) and one from the end (right)
        int left = 0;
        int right = s.length() - 1;
        // Loop to move the pointers toward the center
        while (left < right) {
            // Move the left pointer forward until an alphanumeric character is found
            // Skip any non-alphanumeric characters
            while (left < right && !Character.isLetterOrDigit(s.charAt(left))) {
                left++;
            }
            // Move the right pointer backward until an alphanumeric character is found
            // Skip any non-alphanumeric characters
            while (left < right && !Character.isLetterOrDigit(s.charAt(right))) {
                right--;
            }
            // Compare the characters at the left and right pointers
            // Convert both characters to lowercase to ensure the comparison is case-insensitive
            if (Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right))) {
                // If they don\'t match, the string is not a palindrome
                return false;
            }
            // Move the left pointer one step to the right
            left++;
            // Move the right pointer one step to the left
            right--;
        }
        // If the loop completes without returning false, the string is a palindrome
        return true;
    }
}
