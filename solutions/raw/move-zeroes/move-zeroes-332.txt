class Solution {

    public void moveZeroes(int[] nums) {
        // 1. t.c - O(N*N), s.c - O(1)
        // int i=0;
        // while (i<nums.length) {
        //     if (nums[i] == 0) {
        //         int j = i+1;
        //         while(j<nums.length) {
        //             if (nums[j] != 0) {
        //                 int temp = nums[i];
        //                 nums[i] = nums[j];
        //                 nums[j] = temp;
        //                 i++;
        //             }else {
        //                 j++;
        //             }
        //         }
        //         if (j>=nums.length) {
        //             break;
        //         }
        //     }else {
        //         i++;
        //     }
        // }
        // 2. t.c - O(3N) => O(N), s.c - O(N)
        // ArrayList<Integer> list = new ArrayList<>();
        // for (int i=0; i<nums.length; i++) {
        //     if (nums[i] != 0) {
        //         list.add(nums[i]);
        //     }
        // }
        // int c0 = nums.length - list.size();
        // while(c0 != 0) {
        //     list.add(0);
        //     c0--;
        // }
        // for (int i=0; i<nums.length; i++) {
        //     nums[i] = list.get(i);
        // }
        // 3. t.c - O(2N) => O(N), s.c - O(1)
        int j = -1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                j = i;
                break;
            }
        }
        for (int i = j + 1; i < nums.length; i++) {
            if (j == -1) {
                break;
            }
            if (nums[i] != 0) {
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
                j++;
            }
        }
    }
}
