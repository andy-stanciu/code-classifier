class Solution {

    public String convert(String s, int rows) {
        Map<Integer, String> map = new HashMap<>();
        int n = s.length();
        int i = 0;
        int k = 1;
        boolean flag = false;
        if (rows == 1 || n == 1)
            return s;
        while (i < n) {
            if (!flag && k <= rows) {
                if (!map.containsKey(k)) {
                    map.put(k, s.charAt(i) + "");
                } else {
                    String st = map.get(k);
                    map.put(k, st + s.charAt(i));
                }
                if (k == rows) {
                    k--;
                    flag = true;
                } else {
                    k++;
                }
            } else if (flag && k >= 1) {
                if (!map.containsKey(k)) {
                    map.put(k, s.charAt(i) + "");
                } else {
                    String st = map.get(k);
                    map.put(k, st + s.charAt(i));
                }
                if (k == 1) {
                    k++;
                    flag = false;
                } else {
                    k--;
                }
            }
            i++;
        }
        StringBuffer stb = new StringBuffer();
        for (int j = 1; j <= rows && j <= n; j++) {
            stb.append(map.get(j));
        }
        return stb.toString();
    }
}
