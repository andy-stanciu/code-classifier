class Solution {

    public String convert(String s, int numRows) {
        // Edge case: if numRows is 1 or greater than or equal to the length of the string
        if (numRows == 1 || numRows >= s.length()) {
            return s;
        }
        // Initialize an array of StringBuilders to store characters for each row
        StringBuilder[] arr = new StringBuilder[numRows];
        // Flag to track direction
        boolean goingDown = false;
        // Current row index
        int currIndex = 0;
        // Initialize StringBuilders for each row
        for (int i = 0; i < numRows; i++) {
            arr[i] = new StringBuilder();
        }
        // Traverse each character in the string
        for (char ch : s.toCharArray()) {
            // Append character to the current row
            arr[currIndex].append(ch);
            // Toggle direction at the first or last row
            if (currIndex == 0 || currIndex == numRows - 1) {
                goingDown = !goingDown;
            }
            // Update current row index based on the direction
            currIndex += goingDown ? 1 : -1;
        }
        // Combine all rows to form the final result
        StringBuilder ans = new StringBuilder();
        for (StringBuilder str : arr) {
            ans.append(str.toString());
        }
        return ans.toString();
    }
}
