class Solution {

    // TC : O(N) & SC : O(N)
    // N -> Length of the input string \'s\'
    public String convert(String s, int numRows) {
        // Write your code here
        // If \'numRows\' is 1, the output will be the same as the input string \'s\'
        if (numRows == 1) {
            return s;
        }
        // Initialize a StringBuilder \'sb\' to store the result
        StringBuilder sb = new StringBuilder("");
        // Iterate over each row from \'0\' to \'numRows - 1\'
        for (int row = 0; row < numRows; row++) {
            // For each row, calculate the \'increment\' value, which is \'2 * (numRows - 1)\'
            int increment = 2 * (numRows - 1);
            // Iterate over the string characters with a step of the \'increment\' value
            for (int i = row; i < s.length(); i = i + increment) {
                // Append the characters to the StringBuilder \'sb\' for each row
                char ch = s.charAt(i);
                sb.append(ch);
                // Additionally, for rows other than the first and last row
                // Append characters from the previous row which are at a distance \'2 * (numRows - 1) - 2 * row\' from the current character
                if (row > 0 && row < numRows - 1 && i + increment - 2 * row < s.length()) {
                    char ch1 = s.charAt(i + increment - 2 * row);
                    sb.append(ch1);
                }
            }
        }
        // Convert StringBuilder \'sb\' to the result string \'ans\'
        String ans = sb.toString();
        // Return the result string \'ans\'
        return ans;
    }
}
