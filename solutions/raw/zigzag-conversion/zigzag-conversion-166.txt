class Solution {

    public String convert(String s, int numRows) {
        /**
         * Return the string in case numberOfRows == 1
         */
        if (numRows == 1)
            return s;
        int n = s.length();
        /**
         * Create separate stringbuilder for numRows size
         */
        StringBuilder[] rows = new StringBuilder[numRows];
        /**
         * Initialise numRows size with new StringBuilder()
         */
        for (int i = 0; i < numRows; i++) {
            rows[i] = new StringBuilder();
        }
        /**
         * Used to move in downward direction, Set initially to true
         *        It will be flipped when we reach first or last row
         */
        boolean downDirection = false;
        int currRow = 0;
        /**
         * Process all the characters of the string
         */
        for (int i = 0; i < n; i++) {
            /**
             * Append to the currentRow
             */
            rows[currRow].append(s.charAt(i));
            /**
             * Flip the downDirection flag, if on first or last row
             */
            if (currRow == 0 || currRow == numRows - 1)
                downDirection = !downDirection;
            /**
             * Increment the current row till last row,
             *             then reduce it till the first row
             */
            currRow += downDirection ? 1 : -1;
        }
        StringBuilder zigZagString = new StringBuilder();
        /**
         * Finally append all the rows values to the zigZagString
         */
        for (int i = 0; i < numRows; i++) {
            zigZagString.append(rows[i]);
        }
        /**
         * Return the final ZigZagString
         */
        return zigZagString.toString();
    }
}
