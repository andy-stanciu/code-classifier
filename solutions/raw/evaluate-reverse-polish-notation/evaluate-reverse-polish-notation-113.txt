// \u9006\u6CE2\u5170\u8868\u8FBE\u5F0F\u6C42\u503C
/**
 * - \u9047\u5230\u6570\u5B57\u538B\u5165\u6808
 * - \u9047\u5230\u8FD0\u7B97\u7B26 \u5C31\u4ECE\u6808\u5F39\u51FA\u4E24\u4E2A\u6570\u5B57\u505A\u8FD0\u7B97 \u5C06\u7ED3\u679C\u538B\u5165\u6808 (\u4E3A\u4E86\u540E\u7EED\u64CD\u4F5C)
 * - \u904D\u5386\u7ED3\u675F \u6808\u4E2D\u5269\u4E0B\u7684\u6570\u5B57\u5C31\u662F\u7ED3\u679C
 */
class Solution {

    public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<>();
        // \u904D\u5386\u6570\u7EC4
        for (String t : tokens) {
            int num1 = 0;
            int num2 = 0;
            switch(t) {
                case "+":
                    num1 = stack.pop();
                    num2 = stack.pop();
                    stack.push(num1 + num2);
                    break;
                case "-":
                    num1 = stack.pop();
                    num2 = stack.pop();
                    // num2 - num1 \u662F\u56E0\u4E3A \u5047\u5982 ["13","5"] num1 = 5, num2 = 13 num1 - num2 \u7B54\u6848\u5C31\u4E0D\u4E00\u6837\u4E86 (\u9664\u6CD5\u4E00\u6837)
                    stack.push(num2 - num1);
                    break;
                case "*":
                    num1 = stack.pop();
                    num2 = stack.pop();
                    stack.push(num2 * num1);
                    break;
                case "/":
                    num1 = stack.pop();
                    num2 = stack.pop();
                    stack.push(num2 / num1);
                    break;
                default:
                    // \u6570\u5B57
                    stack.push(Integer.parseInt(t));
            }
        }
        return stack.pop();
    }
}
