class Solution {

    public int evalRPN(String[] tokens) {
        if (tokens.length == 1) {
            return Integer.parseInt(tokens[0]);
        }
        int pans = 0;
        Stack<String> stack = new Stack<String>();
        int i = 0;
        while (i < tokens.length) {
            do {
                stack.push(tokens[i++]);
            } while (!stack.peek().equals("-") && !stack.peek().equals("+") && !stack.peek().equals("*") && !stack.peek().equals("/"));
            String opr = stack.pop();
            String ele2 = stack.pop();
            String ele1 = stack.pop();
            pans = operation(opr, ele1, ele2);
            stack.push(Integer.toString(pans));
        }
        return pans;
    }

    private int operation(String opr, String ele1, String ele2) {
        int ans = 0;
        if (opr.equals("+")) {
            ans = Integer.parseInt(ele1) + Integer.parseInt(ele2);
        } else if (opr.equals("-")) {
            ans = Integer.parseInt(ele1) - Integer.parseInt(ele2);
        } else if (opr.equals("*")) {
            ans = Integer.parseInt(ele1) * Integer.parseInt(ele2);
        } else if (opr.equals("/")) {
            ans = Integer.parseInt(ele1) / Integer.parseInt(ele2);
        }
        return ans;
    }
}
