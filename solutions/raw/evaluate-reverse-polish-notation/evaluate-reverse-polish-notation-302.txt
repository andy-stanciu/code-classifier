class Solution {

    public int evalRPN(String[] tokens) {
        int tokensLen = tokens.length;
        Stack<Integer> postFix = new Stack<>();
        for (int i = 0; i < tokensLen; i++) {
            int num;
            try {
                num = Integer.parseInt(tokens[i]);
                postFix.push(num);
            } catch (NumberFormatException e) {
                int operand2 = postFix.pop();
                int operand1 = postFix.pop();
                switch(tokens[i]) {
                    case "+":
                        postFix.push(operand1 + operand2);
                        break;
                    case "-":
                        postFix.push(operand1 - operand2);
                        break;
                    case "/":
                        postFix.push((int) (operand1 / operand2));
                        break;
                    case "*":
                        postFix.push(operand1 * operand2);
                        break;
                }
            }
        }
        return postFix.pop();
    }
}
