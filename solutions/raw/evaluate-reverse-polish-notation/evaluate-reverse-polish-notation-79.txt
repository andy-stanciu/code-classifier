class Solution {

    public int evalRPN(String[] tokens) {
        // stack to store the tokens
        Stack<String> stack = new Stack<>();
        int ans = 0;
        for (int i = 0; i < tokens.length; i++) {
            String c = tokens[i];
            // push the tokens into the stack
            stack.push(c);
            // to store the elements for arithematic operation
            String a, b;
            if (stack.peek().equals("+")) {
                // take out the operator from the stack
                stack.pop();
                // take out 1st operand from the stack
                a = stack.pop();
                // take out 2nd operand from the stack
                b = stack.pop();
                //perform add arithematic operation
                ans = Integer.valueOf(b) + Integer.valueOf(a);
                // add the ans to the stack
                stack.push(Integer.toString(ans));
            }
            if (stack.peek().equals("-")) {
                // take out the operator from the stack
                stack.pop();
                // take out 1st operand from the stack
                a = stack.pop();
                // take out 2nd operand from the stack
                b = stack.pop();
                //perform subtraction arithematic operation
                ans = Integer.valueOf(b) - Integer.valueOf(a);
                // add the ans to the stack
                stack.push(Integer.toString(ans));
            }
            if (stack.peek().equals("*")) {
                // take out the operator from the stack
                stack.pop();
                // take out 1st operand from the stack
                a = stack.pop();
                // take out 2nd operand from the stack
                b = stack.pop();
                //perform multiplication arithematic operation
                ans = Integer.valueOf(b) * Integer.valueOf(a);
                // add the ans to the stack
                stack.push(Integer.toString(ans));
            }
            if (stack.peek().equals("/")) {
                // take out the operator from the stack
                stack.pop();
                // take out 1st operand from the stack
                a = stack.pop();
                // take out 2nd operand from the stack
                b = stack.pop();
                //perform multiplication arithematic operation
                ans = Integer.valueOf(b) / Integer.valueOf(a);
                // add the ans to the stack
                stack.push(Integer.toString(ans));
            }
        }
        // return ans which is stored in the top of stack
        return Integer.valueOf(stack.peek());
    }
}
