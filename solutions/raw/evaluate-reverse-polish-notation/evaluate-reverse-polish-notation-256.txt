class Solution {

    public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<>();
        // Main idea is to push to the stack only numbers and if we
        // see an operation sign, we go to the certain case where this
        // this operation processed.
        // We are working with two last numbers at the top of the
        // stack.
        // So when we catch the sign we have 2 numbers at the top
        // of the stack and we can work with them.
        for (String s : tokens) {
            // ["23", "1", "2", "+", "-"] example
            // firstNum for operation "+" will be "1"
            int firstNum;
            // secondNum for operation "+" will be "2"
            int secondNum;
            switch(s) {
                case "+" ->
                    {
                        secondNum = stack.pop();
                        firstNum = stack.pop();
                        stack.push(firstNum + secondNum);
                    }
                case "-" ->
                    {
                        secondNum = stack.pop();
                        firstNum = stack.pop();
                        stack.push(firstNum - secondNum);
                    }
                case "/" ->
                    {
                        secondNum = stack.pop();
                        firstNum = stack.pop();
                        stack.push(firstNum / secondNum);
                    }
                case "*" ->
                    {
                        secondNum = stack.pop();
                        firstNum = stack.pop();
                        stack.push(firstNum * secondNum);
                    }
                // If we don\'t have a sign on our way, then just push
                // this number to the stack
                default ->
                    stack.push(Integer.parseInt(s));
            }
        }
        // Returning result
        return stack.peek();
    }
}
