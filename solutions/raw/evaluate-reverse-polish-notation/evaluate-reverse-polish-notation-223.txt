class Solution {

    public int evalRPN(String[] tokens) {
        return approach1(tokens);
    }

    public int approach1(String[] tokens) {
        Stack<Integer> st = new Stack<>();
        for (String s : tokens) {
            if (!isOperator(s)) {
                st.push(Integer.parseInt(s));
            } else {
                Integer op2 = st.pop();
                Integer op1 = st.pop();
                Integer out = evaluate(op1, op2, s);
                st.push(out);
            }
        }
        return st.pop();
    }

    public Integer evaluate(Integer op1, Integer op2, String operator) {
        int out = 0;
        switch(operator) {
            case "+":
                out = op1 + op2;
                break;
            case "-":
                out = op1 - op2;
                break;
            case "*":
                out = op1 * op2;
                break;
            case "/":
                out = op1 / op2;
                break;
        }
        return out;
    }

    public boolean isOperator(String s) {
        return s.equals("+") || s.equals("-") || s.equals("*") || s.equals("/");
    }
}
