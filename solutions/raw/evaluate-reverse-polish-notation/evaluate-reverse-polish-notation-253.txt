class Solution {

    public int evalRPN(String[] tokens) {
        Stack<String> st = new Stack<>();
        int result = 0;
        for (int i = 0; i < tokens.length; i++) {
            if (tokens[i].equals("+")) {
                int temp1 = Integer.valueOf(st.pop());
                int temp2 = Integer.valueOf(st.pop());
                int sum = temp2 + temp1;
                st.push(sum + "");
            } else if (tokens[i].equals("-")) {
                int temp1 = Integer.valueOf(st.pop());
                int temp2 = Integer.valueOf(st.pop());
                int diff = temp2 - temp1;
                st.push(diff + "");
            } else if (tokens[i].equals("*")) {
                int temp1 = Integer.valueOf(st.pop());
                int temp2 = Integer.valueOf(st.pop());
                int pdt = temp2 * temp1;
                st.push(pdt + "");
            } else if (tokens[i].equals("/")) {
                int temp1 = Integer.valueOf(st.pop());
                int temp2 = Integer.valueOf(st.pop());
                int div = temp2 / temp1;
                st.push(div + "");
            } else {
                st.push(tokens[i]);
            }
        }
        // System.out.println(st.pop());
        return Integer.valueOf(st.pop());
    }
}
