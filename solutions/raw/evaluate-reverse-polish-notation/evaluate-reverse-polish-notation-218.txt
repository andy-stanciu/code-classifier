class Solution {

    private boolean isOperator(String token) {
        if (token.equals("+") || token.equals("-") || token.equals("*") || token.equals("/"))
            return true;
        else
            return false;
    }

    private int performOperation(int op1, int op2, String operator) {
        switch(operator) {
            case "+":
                return op1 + op2;
            case "-":
                return op1 - op2;
            case "*":
                return op1 * op2;
            case "/":
                if (op2 == 0)
                    throw new ArithmeticException("Division by zero");
                return op1 / op2;
            default:
                throw new IllegalArgumentException("Invalid Operator: " + operator);
        }
    }

    public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<>();
        for (String token : tokens) {
            if (isOperator(token)) {
                int op2 = stack.pop();
                int op1 = stack.pop();
                String operator = token;
                int result = performOperation(op1, op2, operator);
                stack.push(result);
            } else {
                stack.push(Integer.parseInt(token));
            }
        }
        return stack.peek();
    }
}
