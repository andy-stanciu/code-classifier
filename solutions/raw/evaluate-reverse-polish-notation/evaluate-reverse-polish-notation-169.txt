class Solution {

    public int evalRPN(String[] tokens) {
        // int left = 0;
        // int sum =0;
        // int sum2 =0;
        // if(tokens.length==1){
        //     return Integer.parseInt(tokens[0]);
        // }
        // for(int i =0;i<tokens.length;i++){
        //     if(tokens[i].equals("*") || tokens[i].equals("-") || tokens[i].equals("/") ||  tokens[i].equals("+") ){
        //         left = Integer.parseInt(tokens[i-2]);
        //         break;
        //     }
        // }
        // Stack<String> st = new Stack();
        // boolean flag = false;
        // for(int i =0;i<tokens.length;i++){
        //      if(st.isEmpty() &&(tokens[i].equals("*") || tokens[i].equals("+") || tokens[i].equals("/")|| tokens[i].equals("-"))){
        //         if(tokens[i].equals("*")){
        //              sum2 = sum + sum2;
        //         }
        //         if(tokens[i].equals("/")){
        //             if(sum==0){
        //                 sum2=0;
        //             }else{
        //              sum2 = sum2 /sum;
        //             }
        //         }
        //         if(tokens[i].equals("-")){
        //              sum2 = sum2 -sum;
        //         }
        //         if(tokens[i].equals("*")){
        //              sum2 = sum*sum2;
        //         }
        //             sum =0;
        //             left=0;
        //             flag = false;
        //         }else if(st.isEmpty() && i+1<tokens.length &&  !tokens[i+1].equals("*") && !tokens[i+1].equals("+") && !tokens[i+1].equals("-") && !tokens[i+1].equals("/")  && !tokens[i].equals("*") && !tokens[i].equals("+") && !tokens[i].equals("-") && !tokens[i].equals("/")){
        //             if(flag){
        //             sum2 = sum;
        //             sum =0;
        //             left=Integer.parseInt(tokens[i]);
        //             flag = false;
        //             }
        //         }
        //     if(!st.isEmpty() && (tokens[i].equals("*") || tokens[i].equals("+") || tokens[i].equals("/")|| tokens[i].equals("-"))){
        //     if(tokens[i].equals("*")){
        //         int temp = Integer.parseInt(st.pop());
        //         sum =  temp*left;
        //         left = temp*left;
        //         if(!flag){
        //             flag = true;
        //             st.pop();
        //         }
        //     }else
        //       if(tokens[i].equals("+")){
        //         int temp = Integer.parseInt(st.pop());
        //         sum =  temp+left;
        //         left = temp+left;
        //          if(!flag){
        //             flag = true;
        //             st.pop();
        //         }
        // }else
        //       if(tokens[i].equals("/")){
        //         int temp = Integer.parseInt(st.pop());
        //         if(i-1 >0 && (tokens[i-1].equals("*") || tokens[i-1].equals("-") || tokens[i-1].equals("/") || tokens[i-1].equals("+"))){
        //             sum = temp/left;
        //             left = temp/left;
        //         }else{
        //             sum= left/temp;
        //             left = left/temp;
        //         }
        //          if(!flag){
        //             flag = true;
        //             st.pop();
        //         }
        //     }else
        //       if(tokens[i].equals("-")){
        //         int temp = Integer.parseInt(st.pop());
        //         // if(!flag){
        //             if(i-1 >0 && (tokens[i-1].equals("*") || tokens[i-1].equals("-") || tokens[i-1].equals("/") || tokens[i-1].equals("+"))){
        //        sum = temp-left;
        //        temp = temp-left;
        //             }else{
        //                 sum =  left-temp;
        //         left = left-temp;
        //             }
        //         // }else{
        //         //     sum =  temp-left;
        //         // left = temp-left;
        //         // }
        //          if(!flag){
        //             flag = true;
        //             st.pop();
        //         }
        //     }
        //     }else{
        //     st.push(tokens[i]);
        //     }
        // }
        // return sum + sum2 ;
        Stack<Integer> st = new Stack();
        for (int i = 0; i < tokens.length; i++) {
            if (tokens[i].equals("*")) {
                int b = st.pop();
                int a = st.pop();
                st.push(a * b);
            } else if (tokens[i].equals("+")) {
                int b = st.pop();
                int a = st.pop();
                st.push(a + b);
            } else if (tokens[i].equals("-")) {
                int b = st.pop();
                int a = st.pop();
                st.push(a - b);
            } else if (tokens[i].equals("/")) {
                int b = st.pop();
                int a = st.pop();
                st.push(a / b);
            } else {
                st.push(Integer.parseInt(tokens[i]));
            }
        }
        return st.pop();
    }
}
