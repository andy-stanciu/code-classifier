class Solution {

    public int evalRPN(String[] tokens) {
        Stack<String> opcode = new Stack<>();
        for (String i : tokens) {
            if (i.equals("*") || i.equals("-") || i.equals("+") || i.equals("/")) {
                int result = 0;
                if (i.equals("*")) {
                    int opcode1 = Integer.parseInt(opcode.pop());
                    int opcode2 = Integer.parseInt(opcode.pop());
                    result = opcode1 * opcode2;
                } else if (i.equals("+")) {
                    // System.out.println(i);
                    int opcode1 = Integer.parseInt(opcode.pop());
                    int opcode2 = Integer.parseInt(opcode.pop());
                    result = opcode1 + opcode2;
                } else if (i.equals("-")) {
                    int opcode1 = Integer.parseInt(opcode.pop());
                    int opcode2 = Integer.parseInt(opcode.pop());
                    result = opcode2 - opcode1;
                } else if (i.equals("/")) {
                    int opcode1 = Integer.parseInt(opcode.pop());
                    int opcode2 = Integer.parseInt(opcode.pop());
                    result = opcode2 / opcode1;
                }
                opcode.push(Integer.toString(result));
            } else {
                // System.out.println(i);
                opcode.push(i);
            }
        }
        return Integer.parseInt(opcode.pop());
    }
}
