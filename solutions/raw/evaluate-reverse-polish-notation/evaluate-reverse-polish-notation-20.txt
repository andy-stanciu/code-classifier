class Solution {

    public int evalRPN(String[] tokens) {
        Stack<String> stack = new Stack<>();
        for (String c : tokens) {
            switch(c) {
                case "+":
                    stack.push(add(stack.pop(), stack.pop()));
                    break;
                case "-":
                    stack.push(minus(stack.pop(), stack.pop()));
                    break;
                case "*":
                    stack.push(times(stack.pop(), stack.pop()));
                    break;
                case "/":
                    stack.push(divide(stack.pop(), stack.pop()));
                    break;
                default:
                    stack.push(c);
            }
        }
        return Integer.valueOf(stack.pop());
    }

    private String add(String a, String b) {
        int n1 = Integer.valueOf(a);
        int n2 = Integer.valueOf(b);
        return String.valueOf(n1 + n2);
    }

    private String minus(String a, String b) {
        int n1 = Integer.valueOf(a);
        int n2 = Integer.valueOf(b);
        return String.valueOf(n2 - n1);
    }

    private String times(String a, String b) {
        int n1 = Integer.valueOf(a);
        int n2 = Integer.valueOf(b);
        return String.valueOf(n1 * n2);
    }

    private String divide(String a, String b) {
        int n1 = Integer.valueOf(a);
        int n2 = Integer.valueOf(b);
        return String.valueOf(n2 / n1);
    }
}
