class Solution {

    public int evalRPN(String[] tokens) {
        Stack<String> s = new Stack<String>();
        for (int i = 0; i < tokens.length; i++) {
            if (tokens[i].equals("+")) {
                Integer a = Integer.parseInt(s.peek());
                s.pop();
                Integer b = Integer.parseInt(s.peek());
                s.pop();
                Integer ans = a + b;
                String str = Integer.toString(ans);
                s.push(str);
            } else if (tokens[i].equals("-")) {
                Integer a = Integer.parseInt(s.peek());
                s.pop();
                Integer b = Integer.parseInt(s.peek());
                s.pop();
                Integer ans = b - a;
                String str = Integer.toString(ans);
                s.push(str);
            } else if (tokens[i].equals("*")) {
                Integer a = Integer.parseInt(s.peek());
                s.pop();
                Integer b = Integer.parseInt(s.peek());
                s.pop();
                Integer ans = a * b;
                String str = Integer.toString(ans);
                s.push(str);
            } else if (tokens[i].equals("/")) {
                double a = Double.parseDouble(s.peek());
                s.pop();
                double b = Double.parseDouble(s.peek());
                s.pop();
                double ans = b / a;
                int y = (int) ans;
                if (y <= 0) {
                    String str = Integer.toString(y);
                    s.push(str);
                } else {
                    String str = Integer.toString(y);
                    s.push(str);
                }
            } else if (!tokens[i].equals("+") && !tokens[i].equals("-") && !tokens[i].equals("*") && !tokens[i].equals("/")) {
                s.push(tokens[i]);
            }
        }
        Integer finale = 0;
        finale = Integer.parseInt(s.peek());
        return finale;
    }
}
