class Solution {

    public int evalRPN(String[] tokens) {
        Deque<Integer> stack = new ArrayDeque<>();
        for (var token : tokens) {
            if (token.length() == 1 && token.charAt(0) < 48) {
                int n2 = stack.pop();
                int n1 = stack.pop();
                stack.push(performOperation(n1, n2, token));
            } else {
                stack.push(Integer.parseInt(token));
            }
        }
        return stack.peek();
    }

    int performOperation(int n1, int n2, String operation) {
        switch(operation) {
            case "+":
                return n1 + n2;
            case "-":
                return n1 - n2;
            case "*":
                return n1 * n2;
            case "/":
                return n1 / n2;
            default:
                return 0;
        }
    }

    boolean isArithmaticSymbol(String ch) {
        return ch.equals("+") || ch.equals("-") || ch.equals("*") || ch.equals("/");
    }
}
