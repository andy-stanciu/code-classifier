class Solution {

    public boolean isSubsequence(String s, String t) {
        // if s is empty, it is always a subsequence of t
        if (s.length() == 0)
            return true;
        // if length of t is less than length of s, then also s can\'t be subsequence of t
        if (t.length() < s.length())
            return false;
        // if any of the characters in s is not contained in t, then also, s can\'t be a subsequence of t
        for (char c : s.toCharArray()) {
            if (t.indexOf(String.valueOf(c)) < 0)
                return false;
        }
        // now, we know that all letters in s are present in t, just the order must be checked
        int tPtr = 0;
        for (int i = 0; i < s.length(); ) {
            char curr = s.charAt(i);
            while (tPtr < t.length() && t.charAt(tPtr) != curr) {
                tPtr++;
            }
            // if tPtr has already reached end of t string while some chars in s are remaining to be checked
            if (tPtr >= t.length()) {
                return false;
            }
            // char in s at pos i found in t at pos tPtr
            i++;
            tPtr++;
        }
        // all chars of s are checked and tPtr is still either before end of t string, or at it
        return true;
    }
}
