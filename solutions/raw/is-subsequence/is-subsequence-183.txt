//solution using two pointer approach
class Solution {

    public boolean isSubsequence(String s, String t) {
        int m = s.length();
        int n = t.length();
        if (m > n)
            return false;
        //pointer for s
        int i = 0;
        //pointer for t
        int j = 0;
        while (i < m && j < n) {
            if (s.charAt(i) == t.charAt(j)) {
                j++;
                i++;
            } else {
                j++;
            }
        }
        //if i equals length of string s then return true
        return i == m;
    }
}
//solution using longest common subsequence dp
// class Solution {
//     public boolean isSubsequence(String s, String t) {
//         int m=s.length();
//         int n=t.length();
//         int dp[][]=new int[m+1][n+1];
//         for(int i=1;i<=m;i++){
//             for(int j=1;j<=n;j++){
//                 if(s.charAt(i-1)==t.charAt(j-1)){
//                     dp[i][j]=1+dp[i-1][j-1];
//                 }else{
//                     dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
//                 }
//             }
//         }
//         return dp[m][n]==m;
//     }
// }
