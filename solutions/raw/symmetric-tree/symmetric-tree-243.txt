/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    boolean flag;

    public boolean isSymmetric(TreeNode root) {
        // initial base condition
        if (root == null || (root.left == null && root.right == null))
            return true;
        return check(root.left, root.right);
    }

    private boolean check(TreeNode left, TreeNode right) {
        //base condition 1
        if (left == null && right == null)
            return true;
        //base condition 2
        if (left == null || right == null)
            return false;
        // check if curr node values are equal
        // recursive call for comparing left of left subtree with right of right subtree
        // recursive call for comparing right of left subtree with left of right subtree
        return (left.val == right.val) && check(left.left, right.right) && check(left.right, right.left);
    }
}
