class Solution {

    public boolean isSymmetric(TreeNode root) {
        if (root == null || (root.left == null && root.right == null))
            return true;
        if ((root.left == null && root.right != null) || (root.left != null && root.right == null))
            return false;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root.left);
        queue.add(root.right);
        while (!queue.isEmpty()) {
            int n = queue.size();
            for (int i = 0; i < n / 2; i++) {
                TreeNode node = queue.poll();
                TreeNode otherNode = queue.poll();
                if (node.val != otherNode.val) {
                    return false;
                }
                if (node.left != null && otherNode.right != null) {
                    queue.add(node.left);
                    queue.add(otherNode.right);
                } else if ((node.left != null && otherNode.right == null) || (node.left == null && otherNode.right != null))
                    return false;
                if (node.right != null && otherNode.left != null) {
                    queue.add(node.right);
                    queue.add(otherNode.left);
                } else if ((node.right != null && otherNode.left == null) || (node.right == null && otherNode.left != null)) {
                    return false;
                }
            }
        }
        return true;
    }
}
