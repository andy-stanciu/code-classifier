/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean isSymmetric(TreeNode root) {
        // If the root is null, it is considered symmetric.
        if (root == null) {
            return true;
        }
        // Call the helper function to check if the left and right subtrees are symmetric.
        return helper(root.left, root.right);
    }

    public boolean helper(TreeNode left, TreeNode right) {
        // If both left and right subtrees are null, they are considered symmetric.
        if (left == null && right == null) {
            return true;
        }
        // If either the left or right subtree is null, they are not symmetric.
        if (left == null || right == null) {
            return false;
        }
        // If the values of the nodes in the left and right subtrees are not equal, they are not symmetric.
        if (left.val != right.val) {
            return false;
        }
        // Recursively check if the left and right subtrees are symmetric.
        return helper(left.left, right.right) && helper(left.right, right.left);
    }
}
