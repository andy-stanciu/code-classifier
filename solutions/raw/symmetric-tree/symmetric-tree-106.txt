class Solution {

    public boolean isSymmetric(TreeNode root) {
        if (//base case when we are provided with null graph
        root == null)
            return false;
        //caling the function
        return IsSymmetric(root.left, root.right);
    }

    public boolean IsSymmetric(TreeNode left1, TreeNode right1) {
        //preorder traversal is used since weare checking the parent first and then their child //Top down approach
        if (//if both are null, symmetric returning true
        left1 == null && right1 == null)
            return true;
        else if (//if one  of them is null then not symmetric, returning false
        left1 == null || right1 == null)
            return false;
        else if (//if their values are not equal, returning false
        left1.val != right1.val)
            return false;
        else
            //handiling both the cases of left right and right left
            return IsSymmetric(left1.left, right1.right) && IsSymmetric(left1.right, right1.left);
        //In mirror we consider the  distance of image from both real and virtual side both are equal, equidistance to each other
        /*                               |
                              Virtual --->|<--- Real
                                          |
                                        Mirror                  */
        return;
    }
    //Please do Upvote, It helps a lot
}
