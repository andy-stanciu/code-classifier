class Solution {

    // Main method to check if a binary tree is symmetric.
    public boolean isSymmetric(TreeNode root) {
        // Call the mirror function with the left and right nodes of the root tree.
        return mirror(root.left, root.right);
    }

    // Recursive function to check if two subtrees are mirrors of each other.
    public boolean mirror(TreeNode p, TreeNode q) {
        // Check if one of the nodes is null while the other is not.
        // If so, the nodes are not symmetric.
        if (p == null && q != null || p != null && q == null) {
            return false;
        }
        // If both nodes are null, they are symmetric.
        if (p == null && q == null) {
            return true;
        }
        // If the values of the nodes are different, the subtrees are not symmetric.
        if (p.val != q.val) {
            return false;
        }
        // Check symmetry of the left and right subtrees recursively.
        // Compare the left node of the first tree with the right of the second.
        boolean x = mirror(p.left, q.right);
        // Compare the right node of the first tree with the left of the second.
        boolean y = mirror(p.right, q.left);
        // Subtrees are symmetric if both left and right subtrees are symmetric.
        return x && y;
    }
}
