class Solution {

    public boolean isSymmetric(TreeNode root) {
        List<Integer> listLeft = new ArrayList<>();
        traverseBTLeftFirst(root, listLeft);
        List<Integer> listRight = new ArrayList<>();
        traverseBTRightFirst(root, listRight);
        if (listLeft.size() != listRight.size())
            return false;
        for (int i = 0; i < listLeft.size(); i++) {
            if (listLeft.get(i) != listRight.get(i)) {
                return false;
            }
        }
        return true;
    }

    private void traverseBTLeftFirst(TreeNode node, List<Integer> list) {
        if (node == null) {
            list.add(101);
            return;
        }
        list.add(node.val);
        if (node.left == null && node.right == null)
            return;
        traverseBTLeftFirst(node.left, list);
        traverseBTLeftFirst(node.right, list);
    }

    private void traverseBTRightFirst(TreeNode node, List<Integer> list) {
        if (node == null) {
            list.add(101);
            return;
        }
        list.add(node.val);
        if (node.left == null && node.right == null)
            return;
        traverseBTRightFirst(node.right, list);
        traverseBTRightFirst(node.left, list);
    }
}
