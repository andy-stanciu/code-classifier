/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    // Main method to check if the tree is symmetric.
    public boolean isSymmetric(TreeNode root) {
        // If the tree is empty, it\'s symmetric.
        if (root == null)
            return true;
        // Call the helper function to check symmetry between the left and right subtrees.
        return dfs(root.left, root.right);
    }

    // Helper method to perform DFS and check if two subtrees are mirror images.
    private boolean dfs(TreeNode leftRoot, TreeNode rightRoot) {
        // Base case: If either node is null, check if both are null.
        // If both are null, they are symmetric at this node.
        // If one is null and the other is not, they are not symmetric.
        if (leftRoot == null || rightRoot == null)
            return leftRoot == rightRoot;
        // If the values of the current nodes are different, return false.
        if (leftRoot.val != rightRoot.val)
            return false;
        // Recursively check if the left subtree of the left root and the right subtree of the right root are symmetric.
        boolean left = dfs(leftRoot.left, rightRoot.right);
        // Recursively check if the right subtree of the left root and the left subtree of the right root are symmetric.
        boolean right = dfs(leftRoot.right, rightRoot.left);
        // The tree is symmetric if both the left and right comparisons are true.
        return left && right;
    }
}
