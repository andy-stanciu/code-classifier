/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean isSymmetric(TreeNode root) {
        if (root == null)
            return true;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root.left);
        queue.add(root.right);
        while (!queue.isEmpty()) {
            TreeNode left = queue.poll();
            TreeNode right = queue.poll();
            // If both nodes are null, continue to the next pair
            if (left == null && right == null)
                continue;
            // If one is null and the other not,or if their values are different, it\'s not symmetric
            if (left == null || right == null || left.val != right.val)
                return false;
            // Add to queue in the order
            // Compare left\'s left with right\'s right
            queue.add(left.left);
            queue.add(right.right);
            // Compare left\'s right with right\'s left
            queue.add(left.right);
            queue.add(right.left);
        }
        // If not found any asymmetries, the tree is symmetric
        return true;
    }
}
