class TreeNode {

    int val;

    TreeNode left;

    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

class Solution {

    public boolean isSymmetric(TreeNode root) {
        if (root == null) {
            return true;
        }
        return Symm(root.left, root.right);
    }

    public boolean Symm(TreeNode r1, TreeNode r2) {
        if (r1 == null && r2 == null)
            return true;
        if (r1 == null || r2 == null)
            return false;
        return r1.val == r2.val && Symm(r1.left, r2.right) && Symm(r2.left, r1.right);
    }
}

public class Practice {

    public static TreeNode createTree(Scanner scanner) {
        System.out.print("Enter node value (-1 for null): ");
        int val = scanner.nextInt();
        if (val == -1) {
            return null;
        }
        TreeNode node = new TreeNode(val);
        System.out.println("Enter left child of " + val);
        node.left = createTree(scanner);
        System.out.println("Enter right child of " + val);
        node.right = createTree(scanner);
        return node;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Create the root of the binary tree:");
        TreeNode root = createTree(scanner);
        Solution solution = new Solution();
        boolean isSymmetric = solution.isSymmetric(root);
        System.out.println("Is the tree symmetric? " + isSymmetric);
        scanner.close();
    }
}
