/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Integer> helperRht(TreeNode root, List<Integer> lt) {
        if (root == null) {
            lt.add(null);
            return lt;
        }
        lt.add(root.val);
        helperRht(root.right, lt);
        helperRht(root.left, lt);
        return lt;
    }

    public List<Integer> helperLft(TreeNode root, List<Integer> lt) {
        if (root == null) {
            lt.add(null);
            return lt;
        }
        lt.add(root.val);
        helperLft(root.left, lt);
        helperLft(root.right, lt);
        return lt;
    }

    public boolean isSymmetric(TreeNode root) {
        ArrayList<Integer> lft = new ArrayList<>();
        ArrayList<Integer> rht = new ArrayList<>();
        helperLft(root.left, lft);
        helperRht(root.right, rht);
        if (lft.size() != rht.size()) {
            return false;
        }
        for (int i = 0; i < lft.size(); i++) {
            if (lft.get(i) != rht.get(i)) {
                return false;
            }
        }
        return true;
    }
}
