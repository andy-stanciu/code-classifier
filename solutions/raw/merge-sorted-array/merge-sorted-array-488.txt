class Solution {

    public void merge(int[] nums1, int m, int[] nums2, int n) {
        //nums1 should have m+n length
        int mn = m + n;
        //new variable for merging the elements
        int[] merge = new int[mn];
        for (//for loop for assiging the nums1 elements into the merge
        //for loop for assiging the nums1 elements into the merge
        //for loop for assiging the nums1 elements into the merge
        int i = 0; i < m; i++) {
            merge[i] = nums1[i];
        }
        for (//for loop for assiging the nums2 elements into the merge
        //for loop for assiging the nums2 elements into the merge
        //for loop for assiging the nums2 elements into the merge
        int j = 0; j < n; j++) {
            // Here merge[m+j] means after the m\'th of the nums1 elements start inserting the elements from the nums2
            merge[m + j] = nums2[j];
        }
        //find the length of the merge array
        int len = merge.length;
        // Bubble Sorting
        for (// Outer loop ensures that the process has run enough time i.e n-1
        // Outer loop ensures that the process has run enough time i.e n-1
        // Outer loop ensures that the process has run enough time i.e n-1
        int y = 0; y < len - 1; y++) {
            for (// Inner loop use to compare the adjacent element
            // Inner loop use to compare the adjacent element
            // Inner loop use to compare the adjacent element
            int z = 0; z < len - y - 1; z++) {
                if (//Compare whether the previous element is greater than the next
                merge[z] > merge[z + 1]) {
                    //if true then assign it to the temporary variable
                    int temp = merge[z];
                    //then assign the next small element to the previous emptied element
                    merge[z] = merge[z + 1];
                    //Assign the temp larger element to the next element location
                    merge[z + 1] = temp;
                }
            }
        }
        //Asssign the elements back to the nums1 from the merge
        for (int o = 0; o < len; o++) {
            nums1[o] = merge[o];
        }
    }
}
