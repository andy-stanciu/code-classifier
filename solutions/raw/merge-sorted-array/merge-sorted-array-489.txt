class Solution {

    public void merge(int[] nums1, int m, int[] nums2, int n) {
        // Pointer for nums1
        int p1 = 0;
        // Pointer for nums2
        int p2 = 0;
        if (n == 0)
            return;
        while (p1 < m && p2 < n) {
            if (nums1[p1] <= nums2[p2]) {
                p1++;
            } else {
                // Shift elements in nums1 to make space
                for (int i = m - 1; i >= p1; i--) {
                    nums1[i + 1] = nums1[i];
                }
                // Insert element from nums2
                nums1[p1] = nums2[p2];
                p1++;
                p2++;
                // Increase the effective size of nums1
                m++;
            }
        }
        // If there are remaining elements in nums2, add them to nums1
        while (p2 < n) {
            nums1[p1] = nums2[p2];
            p1++;
            p2++;
        }
    }
}
