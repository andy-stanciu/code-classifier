public class Solution {

    public static void merge(int[] nums1, int m, int[] nums2, int n) {
        // Pointer for nums1 (end of the initialized part)
        int i = m - 1;
        // Pointer for nums2 (end of nums2)
        int j = n - 1;
        //pinter for array mergeing both array
        int k = m + n - 1;
        // While there are elements to be merged
        while (i >= 0 && j >= 0) {
            // Compare and place the larger element at the end of nums1
            if (nums1[i] > nums2[j]) {
                nums1[k] = nums1[i];
                i--;
            } else {
                nums1[k] = nums2[j];
                j--;
            }
            k--;
        }
        // If there are remaining elements in nums2, copy them
        while (j >= 0) {
            nums1[k] = nums2[j];
            j--;
            k--;
        }
        // No need to copy remaining elements from nums1, they are already in place
    }

    public static void main(String[] args) {
        // Example usage
        int[] nums1 = { 1, 2, 3, 0, 0, 0 };
        // Number of initialized elements in nums1
        int m = 3;
        int[] nums2 = { 2, 5, 6 };
        // Number of elements in nums2
        int n = 3;
        merge(nums1, m, nums2, n);
        // Print the merged array
        for (int num : nums1) {
            System.out.print(num + " ");
        }
    }
}
