class Solution {

    public void merge(int[] nums1, int m, int[] nums2, int n) {
        // Pointers for nums1, nums2, and the final position in nums1
        // Pointer to the last valid element in nums1
        int p1 = m - 1;
        // Pointer to the last element in nums2
        int p2 = n - 1;
        // Pointer to the last position in nums1
        int p = m + n - 1;
        // While there are elements to compare in both arrays
        while (p1 >= 0 && p2 >= 0) {
            // Place the larger element at position p in nums1
            if (nums1[p1] > nums2[p2]) {
                nums1[p] = nums1[p1];
                p1--;
            } else {
                nums1[p] = nums2[p2];
                p2--;
            }
            p--;
        }
        // If there are any remaining elements in nums2, place them in nums1
        while (p2 >= 0) {
            nums1[p] = nums2[p2];
            p--;
            p2--;
        }
    }

    // Main method for testing
    public static void main(String[] args) {
        Solution solution = new Solution();
        // Example 1
        int[] nums1_1 = { 1, 2, 3, 0, 0, 0 };
        int[] nums2_1 = { 2, 5, 6 };
        solution.merge(nums1_1, 3, nums2_1, 3);
        System.out.println("Merged array 1: " + Arrays.toString(nums1_1));
        // Example 2
        int[] nums1_2 = { 1 };
        int[] nums2_2 = {};
        solution.merge(nums1_2, 1, nums2_2, 0);
        System.out.println("Merged array 2: " + Arrays.toString(nums1_2));
        // Example 3
        int[] nums1_3 = { 0 };
        int[] nums2_3 = { 1 };
        solution.merge(nums1_3, 0, nums2_3, 1);
        System.out.println("Merged array 3: " + Arrays.toString(nums1_3));
    }
}
