class Solution {

    public void merge(int[] nums1, int m, int[] nums2, int n) {
        // Create an array to store the merged elements of nums1 and nums2.
        int[] ans = new int[m + n];
        // Initialize pointer i to the start of nums1.
        int i = 0;
        // Initialize pointer j to the start of nums2.
        int j = 0;
        // Initialize pointer k to the start of ans.
        int k = 0;
        // Merge nums1 and nums2 into ans.
        while (i < m && j < n) {
            // While both nums1 and nums2 have unprocessed elements
            if (nums1[i] <= nums2[j]) {
                // If the current element of nums1 is less than or equal to the current element of nums2,
                // Add the current element of nums1 to ans.
                ans[k] = nums1[i];
                // Move the pointer i to the next element of nums1.
                i++;
            } else {
                // Otherwise (if the current element of nums2 is less than the current element of nums1),
                // Add the current element of nums2 to ans.
                ans[k] = nums2[j];
                // Move the pointer j to the next element of nums2.
                j++;
            }
            // Move the pointer k to the next empty slot in ans.
            k++;
        }
        // If there are any remaining elements in nums1 that haven\'t been merged yet, add them to ans.
        while (i < m) {
            // Add the current element of nums1 to ans.
            ans[k] = nums1[i];
            // Move the pointer i to the next element of nums1.
            i++;
            // Move the pointer k to the next empty slot in ans.
            k++;
        }
        // If there are any remaining elements in nums2 that haven\'t been merged yet, add them to ans.
        while (j < n) {
            // Add the current element of nums2 to ans.
            ans[k] = nums2[j];
            // Move the pointer j to the next element of nums2.
            j++;
            // Move the pointer k to the next empty slot in ans.
            k++;
        }
        // Copy the merged elements from ans back to nums1.
        for (int h = 0; h < ans.length; h++) {
            nums1[h] = ans[h];
        }
    }
}
