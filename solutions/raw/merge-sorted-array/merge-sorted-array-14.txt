class Solution {

    public void merge(int[] nums1, int m, int[] nums2, int n) {
        /*
         * // We have two sorted arrays:
         * // nums1 = [1,2,3,0,0,0], m = 3 (the first m elements are the actual values)
         * // nums2 = [2,5,6], n = 3 (n elements are actual values)
         * // The goal is to merge nums2 into nums1 and sort in-place without extra
         * sorting steps.
         * 
         * // Initialize pointers for the last elements of nums1 and nums2
         * int i = m - 1; // Pointer for the last valid element in nums1 (ignores
         * trailing zeros)
         * int j = n - 1; // Pointer for the last element in nums2
         * int k = m + n - 1; // Pointer for the last position in nums1 (end of the
         * array)
         * 
         * // Merge nums1 and nums2 from the end to the beginning to avoid overwriting
         * elements in nums1
         * while (i >= 0 && j >= 0) { // Continue until one of the arrays is exhausted
         * if (nums1[i] > nums2[j]) {
         * // If the current element in nums1 is larger, place it at the end of nums1
         * nums1[k] = nums1[i]; // Place nums1[i] at index k
         * i--; // Move pointer i one step to the left
         * } else {
         * // If the current element in nums2 is larger or equal, place it at the end of
         * nums1
         * nums1[k] = nums2[j]; // Place nums2[j] at index k
         * j--; // Move pointer j one step to the left
         * }
         * k--; // Move pointer k one step to the left after placing the element
         * }
         * 
         * // If there are remaining elements in nums2, copy them into nums1
         * // No need to copy elements from nums1, as they are already in place
         * while (j >= 0) {
         * nums1[k] = nums2[j]; // Copy remaining elements from nums2 into nums1
         * j--; // Move j one step to the left
         * k--; // Move k one step to the left
         * }
         */
        // [1,2,3,0,0,0] m = 3
        // [2,5,6] n = 3
        // merge array such that no of array element is m+n
        // where array is sorted
        // Create a new array to store the merged result
        int[] newArray = new int[m + n];
        int i = 0, j = 0, k = 0;
        // Copy elements from nums1 into newArray
        while (i < m) {
            newArray[k] = nums1[i];
            i++;
            k++;
        }
        // Copy elements from nums2 into newArray
        while (j < n) {
            newArray[k] = nums2[j];
            j++;
            k++;
        }
        // Sort the newArray (optional, as we can directly merge sorted arrays)
        Arrays.sort(newArray);
        // Copy the sorted newArray back into nums1
        for (int x = 0; x < m + n; x++) {
            nums1[x] = newArray[x];
        }
    }
}
