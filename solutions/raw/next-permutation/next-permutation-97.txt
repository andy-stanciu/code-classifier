class Solution {

    public void nextPermutation(int[] arr) {
        //first I will find the breakpoint
        //but I will start the 2nd last element cox I will compare each time element with its
        //next element and here second last element will have its next element last element
        //initially we suppose that it is -1
        int breakpoint = -1;
        for (int i = arr.length - 2; i >= 0; i--) {
            if (arr[i] < arr[i + 1]) {
                breakpoint = i;
                break;
            }
        }
        //now I will swap the smallest number on RHS of breakpoint but that must be greater than
        //breakpoint number
        if (breakpoint >= 0) {
            for (int i = arr.length - 1; i > breakpoint; i--) {
                if (arr[breakpoint] < arr[i]) {
                    swap(arr, breakpoint, i);
                    break;
                }
            }
        }
        //ok now I have swapped the elements
        //now I want the remaining elements to be sorted in ascending order
        //so we will simply reverse those elements
        reverse(arr, breakpoint + 1, arr.length - 1);
    }

    static void reverse(int[] arr, int start, int end) {
        while (start < end) {
            swap(arr, start, end);
            start++;
            end--;
        }
    }

    static void swap(int[] arr, int first, int second) {
        int temp = arr[first];
        arr[first] = arr[second];
        arr[second] = temp;
    }
}
