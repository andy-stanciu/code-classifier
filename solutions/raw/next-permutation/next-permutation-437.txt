class Solution {

    //[1,2,3] [1,3,2],[2,1,3],[2.3,1],[3,1,2],[3,2,1]
    public void nextPermutation(int[] nums) {
        // 1\uFF1A\u627E\u5230\u65AD\u70B9index
        // 2: \u5982\u679C\u6CA1\u6709\u65AD\u70B9\uFF0C\u8BF4\u660E\u8FD9\u662F\u5F53\u524D\u6570\u7EC4\u7684\u6700\u540E\u4E00\u4E2A -> \u76F4\u63A5\u53CD\u8F6C\u6570\u7EC4
        //    \u5982\u679C\u6709\u65AD\u70B9 -> \u5728[index + 1, n - 1] \u8303\u56F4\u5185\uFF0C\u627E\u5230\u5927\u4E8Enums[index]\u7684\u6700\u5C0F\u503C\uFF0C
        //    -> \u4EA4\u6362
        //    -> \u5BF9\u5176\u53F3\u4FA7\u8FDB\u884C\u7531\u5C0F\u5230\u5927\u7684\u6392\u5E8F
        int N = nums.length;
        // d -> \u65AD\u70B9
        int d = N;
        int i = N - 1;
        for (i = N - 1, d = i - 1; i > 0 && d >= 0; i--, d--) {
            if (nums[d] < nums[i]) {
                break;
            }
        }
        // \u6CA1\u6709\u65AD\u70B9
        if (d < 0) {
            reverse(nums, 0, N - 1);
        } else {
            // \u5728[d + 1, n - 1] \u8303\u56F4\u5185\uFF0C\u627E\u5230\u5927\u4E8Enums[d]\u7684\u6700\u5C0F\u503C\uFF0C
            int minIndex = find(nums, d + 1, N - 1, d);
            // \u4EA4\u6362
            swap(nums, d, minIndex);
            // \u5BF9\u5176\u53F3\u4FA7\u8FDB\u884C\u7531\u5C0F\u5230\u5927\u7684\u6392\u5E8F\uFF0C\u5DE6\u95ED\u53F3\u95ED
            reverse(nums, d + 1, N - 1);
        }
    }

    private void reverse(int[] nums, int l, int r) {
        Arrays.sort(nums, l, r + 1);
    }

    private int find(int[] nums, int l, int r, int d) {
        int minIndex = -1;
        for (int i = l; i <= r; i++) {
            if (nums[i] > nums[d]) {
                if (minIndex == -1 || nums[i] < nums[minIndex]) {
                    minIndex = i;
                }
            }
        }
        return minIndex;
    }

    private void swap(int[] nums, int l, int r) {
        int temp = nums[l];
        nums[l] = nums[r];
        nums[r] = temp;
    }
}
//[1,2,3] [1,3,2],[2,1,3],[2.3,1],[3,1,2],[3,2,1]
//[1,2,4,5] [1,2,5,4] [1,4,2,5] [1,4,5,2] [1,5,2,4] [1,5,4,2]
//[4,1,2,5] [4,1,5,2] [4,2,1,5] [4,2,5,1]............ [4,5,2,1]
//[5,1,2,4]
//[1 2 3 4 5] [1 2 3 5 4 [1 2 4 3 5] [1 2 4 5 3] []
