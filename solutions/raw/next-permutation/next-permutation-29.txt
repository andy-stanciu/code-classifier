class Solution {

    public void nextPermutation(int[] nums) {
        int n = nums.length;
        int start = 0;
        int end = n - 1;
        int breakPoint = -1;
        int swapIndex = breakPoint;
        for (int i = n - 1; i > 0; i--) {
            if (nums[i] > nums[i - 1]) {
                breakPoint = i - 1;
                break;
            }
        }
        if (breakPoint != -1) {
            System.out.println("here is out break Point:" + nums[breakPoint] + " index: " + breakPoint);
            // replace
            for (int i = n - 1; i > breakPoint; i--) {
                if (nums[i] > nums[breakPoint]) {
                    swapIndex = i;
                    break;
                }
            }
            int temp = nums[breakPoint];
            nums[breakPoint] = nums[swapIndex];
            nums[swapIndex] = temp;
            start = breakPoint + 1;
        }
        reverse(nums, start, end);
    }

    private void reverse(int[] nums, int start, int end) {
        while (start < end) {
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }
}
