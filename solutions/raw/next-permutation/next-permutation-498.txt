class Solution {

    public void nextPermutation(int[] nums) {
        int num = find_break_pt(nums);
        int num1 = find_next_greater(nums, num);
        if (num != -1) {
            int temp = nums[num];
            nums[num] = nums[num1];
            nums[num1] = temp;
        }
        reverse(nums, num + 1);
    }

    public int find_break_pt(int[] nums) {
        int n = nums.length;
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                return i;
            }
        }
        return -1;
    }

    public int find_next_greater(int[] nums, int num) {
        if (num == -1) {
            return -1;
        }
        int n = nums.length;
        int i = num + 1;
        while (i < n && nums[num] < nums[i]) {
            i++;
        }
        return i - 1;
    }

    public void reverse(int[] nums, int num) {
        int i = num;
        int j = nums.length - 1;
        while (i < j) {
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
            i++;
            j--;
        }
    }
}
