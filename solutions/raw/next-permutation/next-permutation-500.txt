class Solution {

    public void nextPermutation(int[] nums) {
        //find the breaking point first
        int breakingPoint = -1;
        int maxIndex = -1;
        for (int i = nums.length - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                breakingPoint = i;
                break;
            }
        }
        if (breakingPoint == -1) {
            reverse(nums, 0, nums.length - 1);
        } else {
            for (int i = nums.length - 1; i >= breakingPoint; i--) {
                if (nums[i] > nums[breakingPoint]) {
                    maxIndex = i;
                    break;
                }
            }
            swap(nums, breakingPoint, maxIndex);
            reverse(nums, breakingPoint + 1, nums.length - 1);
        }
    }

    public void swap(int[] arr, int i, int j) {
        arr[i] = arr[i] + arr[j];
        arr[j] = arr[i] - arr[j];
        arr[i] = arr[i] - arr[j];
    }

    public void reverse(int[] arr, int i, int j) {
        while (i < j) {
            swap(arr, i, j);
            i++;
            j--;
        }
    }
}
