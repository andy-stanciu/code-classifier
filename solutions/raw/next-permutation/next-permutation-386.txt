class Solution {

    public void nextPermutation(int[] nums) {
        if (nums == null || nums.length <= 1) {
            return;
        }
        int i = findFirstDecreasing(nums);
        if (i >= 0) {
            int j = findNextlarger(nums, i);
            swap(nums, i, j);
        }
        reverse(nums, i + 1);
    }

    public void reverse(int[] nums, int i) {
        int j = nums.length - 1;
        while (i < j) {
            swap(nums, i, j);
            i++;
            j--;
        }
    }

    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public int findNextlarger(int[] nums, int i) {
        for (int j = nums.length - 1; j > i; j--) {
            if (nums[j] > nums[i]) {
                return j;
            }
        }
        return -1;
    }

    public int findFirstDecreasing(int[] nums) {
        for (int i = nums.length - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                return i;
            }
        }
        return -1;
    }
}
