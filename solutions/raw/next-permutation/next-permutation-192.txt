class Solution {

    public void nextPermutation(int[] nums) {
        int n = nums.length;
        int pivot = -1;
        //step 1 : find pivot = i if nums[i] < nums[i+1]
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                pivot = i;
                break;
            }
        }
        if (pivot == -1) {
            Arrays.sort(nums);
            return;
        }
        //step 2 : swap rigthmost elemt greater than pivot with pivot elem
        for (int i = n - 1; i > pivot; i--) {
            if (nums[i] > nums[pivot]) {
                swap(nums, i, pivot);
                break;
            }
        }
        //step 3 : reverse elements after pivot
        int i = pivot + 1, j = n - 1;
        while (i <= j) {
            swap(nums, i, j);
            i++;
            j--;
        }
    }

    // swap method
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
