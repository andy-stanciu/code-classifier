class Solution {

    public void nextPermutation(int[] nums) {
        int index = -1;
        // first we will try tot find the break point startig from back
        int n = nums.length;
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                index = i;
                break;
            }
        }
        // step 2 we will find the next begger than index
        if (index == -1) {
            reverse(nums, 0, n - 1);
            return;
        }
        for (int i = n - 1; i >= 0; i--) {
            if (nums[index] < nums[i]) {
                swap(nums, index, i);
                break;
            }
        }
        // now i just need to sort the array starting from the index +1
        reverse(nums, index + 1, n - 1);
        return;
    }

    public void swap(int[] nums, int first, int second) {
        int temp = nums[first];
        nums[first] = nums[second];
        nums[second] = temp;
    }

    public void reverse(int[] nums, int start, int end) {
        while (start <= end) {
            swap(nums, start, end);
            start++;
            end--;
        }
    }
}
