class Solution {

    public void nextPermutation(int[] nums) {
        int breakPoint = -1;
        for (int i = nums.length - 1; i > 0; i--) {
            if (nums[i] > nums[i - 1]) {
                breakPoint = i - 1;
                break;
            }
        }
        if (breakPoint == -1)
            reverse(nums, 0, nums.length - 1);
        else {
            int justBiggerDiff = Integer.MAX_VALUE;
            int justBigger = -1;
            for (int i = breakPoint + 1; i < nums.length; i++) {
                if (nums[i] > nums[breakPoint]) {
                    int diff = nums[i] - nums[breakPoint];
                    if (diff <= justBiggerDiff) {
                        justBigger = i;
                        justBiggerDiff = diff;
                    }
                }
            }
            swap(nums, breakPoint, justBigger);
            reverse(nums, breakPoint + 1, nums.length - 1);
        }
    }

    public void reverse(int[] nums, int i, int j) {
        while (i <= j) {
            swap(nums, i, j);
            i++;
            j--;
        }
    }

    public void swap(int[] nums, int i, int j) {
        int element = nums[i];
        nums[i] = nums[j];
        nums[j] = element;
    }
}
