class Solution {

    public void nextPermutation(int[] nums) {
        int index = -1;
        int n = nums.length;
        if (n == 1) {
            return;
        }
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i + 1] > nums[i]) {
                index = i;
                break;
            }
        }
        if (index == -1) {
            reverse(nums, 0, n - 1);
            return;
        } else {
            int min = Integer.MAX_VALUE;
            int minIndex = -1;
            for (int i = index + 1; i < n; i++) {
                if (min >= nums[i] && nums[i] > nums[index]) {
                    min = nums[i];
                    minIndex = i;
                }
            }
            swap(nums, index, minIndex);
            reverse(nums, index + 1, n - 1);
        }
    }

    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public void reverse(int[] nums, int start, int end) {
        int n = end - start;
        if (n == 1) {
            swap(nums, start, end);
        } else {
            while (start < end) {
                int temp = nums[start];
                nums[start] = nums[end];
                nums[end] = temp;
                start++;
                end--;
            }
        }
    }
}
