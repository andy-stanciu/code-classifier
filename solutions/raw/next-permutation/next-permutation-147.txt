class Solution {

    public void nextPermutation(int[] nums) {
        int s = nums.length;
        int i = s - 2;
        //find first decreasing element from right to left
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }
        //if i < 0 means, array is in decreasing order, greater lexicographical order does not exists, return  lowest possible order by simply reversing the whole array.
        if (i >= 0) {
            //find first element greater than nums[i] from right
            int j = s - 1;
            while (j > i && nums[i] >= nums[j]) {
                j--;
            }
            //swap nums[i] & nums[j]
            //swapping by bit manipulation
            nums[i] = nums[i] ^ nums[j];
            nums[j] = nums[i] ^ nums[j];
            nums[i] = nums[i] ^ nums[j];
        }
        //reverse the array after index i
        for (int p = i + 1, q = s - 1; p < q; p++, q--) {
            nums[p] = nums[p] ^ nums[q];
            nums[q] = nums[p] ^ nums[q];
            nums[p] = nums[p] ^ nums[q];
        }
    }
}
