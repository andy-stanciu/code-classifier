class Solution {

    public void swap(int[] nums, int ind1, int ind2) {
        int temp = nums[ind1];
        nums[ind1] = nums[ind2];
        nums[ind2] = temp;
    }

    public void reverse(int[] nums, int start) {
        int i = start;
        int j = nums.length - 1;
        while (i < j) {
            swap(nums, i, j);
            i++;
            j--;
        }
    }

    public void nextPermutation(int[] nums) {
        int n = nums.length;
        // we have to find the particular index where the elements start to decrease
        //so we will trace this out from the last index of array till start
        // we will store that particular index and then break
        int ind = -1;
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                //we found the breakpoint
                ind = i;
                break;
            }
        }
        if (ind == -1)
            reverse(nums, 0);
        else {
            //now we will swap this number with the number smaller at its right
            int ind2 = -1;
            for (int i = n - 1; i > ind; i--) {
                if (nums[ind] < nums[i]) {
                    ind2 = i;
                    break;
                }
            }
            swap(nums, ind2, ind);
            reverse(nums, ind + 1);
        }
    }
}
