class Solution {

    public void nextPermutation(int[] arr) {
        int n = arr.length;
        int pivot = -1;
        for (int i = n - 2; i >= 0; --i) {
            if (arr[i] < arr[i + 1]) {
                pivot = i;
                break;
            }
        }
        // this means no valid index found to generate next higher permutation.
        if (pivot == -1) {
            // reversing whole arr
            reverseArr(arr, -1);
            return;
        }
        int biggerInd = -1;
        for (int i = n - 1; i > pivot; --i) {
            if (arr[i] > arr[pivot]) {
                // after pivot getting first greater value.
                biggerInd = i;
                break;
            }
        }
        // swapping bigger val to its appropriate place.
        swap(arr, pivot, biggerInd);
        //since, pivot was the 1st smaller index, this means before pivot values must be greater & reversing is required to get the next higher permutation.
        reverseArr(arr, pivot);
    }

    public void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    public void reverseArr(int[] arr, int ind) {
        int l = ind + 1;
        int r = arr.length - 1;
        while (l <= r) {
            swap(arr, l, r);
            l++;
            r--;
        }
    }
}
