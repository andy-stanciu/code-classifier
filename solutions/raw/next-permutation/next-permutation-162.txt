class Solution {

    public void nextPermutation(int[] arr) {
        int n = arr.length;
        int index = -1;
        //this is to find the greater element from back
        // so we can do stop there to do the remaining work
        for (int i = n - 2; i >= 0; i--) {
            if (arr[i] < arr[i + 1]) {
                index = i;
                break;
            }
        }
        //if index is still same means
        //then the first element is the largest
        //then the next permutation is reverse of it
        //goes back to first original permutation
        if (index == -1) {
            reverse(arr, 0, n);
            return;
        }
        //if index is not -1
        //then we need to find the next greater element then array of index
        //then we need to swap it index
        for (int i = n - 1; i > index; i--) {
            if (arr[i] > arr[index]) {
                int temp = arr[i];
                arr[i] = arr[index];
                arr[index] = temp;
                break;
            }
        }
        // finally the left side of index is ready
        // we need to make sure reverse the after index element
        //because that is the increasing order
        //we need as smallest as possible
        //so the smaleest possible is reversing the increasing order
        reverse(arr, index + 1, n);
    }

    public static void reverse(int[] arr, int start, int end) {
        for (int i = start, j = end - 1; i < j; i++, j--) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
}
