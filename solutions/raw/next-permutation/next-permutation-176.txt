class Solution {

    public void reverse(int[] nums, int start, int end) {
        while (start <= end) {
            int temp = nums[end];
            nums[end] = nums[start];
            nums[start] = temp;
            start++;
            end--;
        }
    }

    public void nextPermutation(int[] nums) {
        int n = nums.length;
        int infex = -1;
        // Find the inflextion point from end, that is the number smaller than the i+1.
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                infex = i;
                break;
            }
        }
        //If no inflextion point is seen, reverse the array
        if (infex == -1) {
            reverse(nums, 0, n - 1);
        } else //After finding the inflextion point,
        //Find the number which is just smaller than the inflex index and swap it.
        {
            for (int i = n - 1; i > infex; i--) {
                if (nums[i] > nums[infex]) {
                    int temp = nums[infex];
                    nums[infex] = nums[i];
                    nums[i] = temp;
                    break;
                }
            }
            reverse(nums, infex + 1, n - 1);
        }
    }
}
