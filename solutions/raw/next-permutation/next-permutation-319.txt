class Solution {

    public void nextPermutation(int[] nums) {
        //find next highest permutation
        //loop from last and find the breakingpoint (a[i]<a[i+1])
        //start loop from n-2 because n-1 means there is no breakpoint which means thats the last permuatation so reverse it and return
        //then swap the a[i] with the lowest value from the right side which should be grater than a[i]
        //then reverse the array from index i+1 to n-1
        int bp = -1;
        int n = nums.length;
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                bp = i;
                break;
            }
        }
        if (bp == -1) {
            reverseFromIndex(nums, 0, n - 1);
            return;
        }
        for (int i = n - 1; i >= 0; i--) {
            if (nums[i] > nums[bp]) {
                swapArray(nums, bp, i);
                break;
            }
        }
        reverseFromIndex(nums, bp + 1, n - 1);
    }

    public void swapArray(int[] nums, int start, int end) {
        int temp = nums[start];
        nums[start] = nums[end];
        nums[end] = temp;
    }

    public void reverseFromIndex(int[] nums, int start, int end) {
        while (start < end) {
            swapArray(nums, start, end);
            start++;
            end--;
        }
    }
}
