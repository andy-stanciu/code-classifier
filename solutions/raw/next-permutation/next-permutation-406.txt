class Solution {

    public void nextPermutation(int[] nums) {
        if (nums.length == 1)
            return;
        int[] arr = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            arr[i] = nums[i];
        }
        fun(nums, nums.length - 2);
        if (check(nums, arr) == false) {
            for (int j = 0; j < nums.length; j++) {
                int min = nums[j];
                int idx = j;
                for (int k = j; k < nums.length; k++) {
                    if (nums[k] <= min) {
                        min = nums[k];
                        idx = k;
                    }
                }
                int z = nums[j];
                nums[j] = min;
                nums[idx] = z;
            }
        }
        return;
    }

    void fun(int[] nums, int index) {
        if (index < 0) {
            return;
        }
        for (int j = index + 1; j < nums.length; j++) {
            int min = nums[j];
            int idx = j;
            for (int k = j; k < nums.length; k++) {
                if (nums[k] <= min) {
                    min = nums[k];
                    idx = k;
                }
            }
            int z = nums[j];
            nums[j] = min;
            nums[idx] = z;
        }
        int val = nums[index];
        int pos = -1;
        for (int i = index + 1; i < nums.length; i++) {
            if (nums[i] > val) {
                pos = i;
                nums[index] = nums[i];
                nums[i] = val;
                break;
            }
        }
        if (pos == -1) {
            fun(nums, index - 1);
        } else {
            return;
        }
        return;
    }

    boolean check(int[] nums, int[] arr) {
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != arr[i]) {
                if (nums[i] > arr[i])
                    return true;
                else
                    return false;
            }
        }
        return false;
    }
}
