class Solution {

    public void nextPermutation(int[] nums) {
        if (nums.length <= 1) {
            return;
        }
        if (nums.length == 2) {
            reverseSuffix(nums, 0);
            return;
        }
        int pivot = nums.length - 2;
        while (pivot >= 0 && nums[pivot + 1] <= nums[pivot]) {
            pivot--;
        }
        if (pivot >= 0) {
            int next = pivot;
            while (next < nums.length - 1 && nums[next + 1] > nums[pivot]) {
                next++;
            }
            if (next < nums.length) {
                int temp = nums[pivot];
                nums[pivot] = nums[next];
                nums[next] = temp;
                reverseSuffix(nums, pivot + 1);
            }
        } else {
            reverseSuffix(nums, 0);
        }
    }

    void reverseSuffix(int[] nums, int start) {
        int end = nums.length - 1;
        while (start < end) {
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }
}
