class Solution {

    public void nextPermutation(int[] nums) {
        int ind = -1;
        int n = nums.length;
        //find break point
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                ind = i;
                break;
            }
        }
        //if no breakpoint then this is largest permutation possible
        if (ind == -1) {
            reverse(nums, 0, n - 1);
            return;
        }
        //finding number slightly bigger than break point from last as we know it is already in descending order from ind till end
        for (int i = n - 1; i > ind; i--) {
            if (nums[i] > nums[ind]) {
                int temp = nums[i];
                nums[i] = nums[ind];
                nums[ind] = temp;
                break;
            }
        }
        // for remaing right half, reverse
        reverse(nums, ind + 1, n - 1);
    }

    public static void reverse(int[] arr, int start, int end) {
        while (start <= end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }
}
