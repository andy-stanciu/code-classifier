class Solution {

    public void nextPermutation(int[] nums) {
        int breakPoint = 0;
        boolean isBreakPoint = false;
        boolean isReverse = false;
        //find breakPoint
        for (int i = nums.length - 1; i > 0; i--) {
            if (nums[i - 1] < nums[i]) {
                breakPoint = i - 1;
                isBreakPoint = true;
                break;
            }
        }
        if (!isBreakPoint) {
            reverse(nums, 0, nums.length - 1);
        }
        if (isBreakPoint) {
            //find closest greater ele of breakPoint ele from its right
            int closestEle = breakPoint + 1;
            for (int i = nums.length - 1; i > breakPoint + 1; i--) {
                if (nums[i] > nums[breakPoint] && nums[i] <= nums[closestEle]) {
                    closestEle = i;
                    break;
                }
            }
            //swap breakPoint ele with closest greater ele
            int temp = nums[breakPoint];
            nums[breakPoint] = nums[closestEle];
            nums[closestEle] = temp;
            reverse(nums, breakPoint + 1, nums.length - 1);
        }
    }

    public void reverse(int[] nums, int start, int end) {
        while (start < end) {
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }
}
