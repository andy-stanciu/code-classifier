//INTUITION
/*
    1) find a break pt. a break pt is basiaclly a no where the no on left > than no on right.for ex in 1 3 2 .....is 3 < 2 no...is 1 < 3 yes so 1 is break pt.store the index

    2)if break pt == -1 it means the no is sorted and you just have to flip
so just reverse the array.

    3)else....we look for tyhe next greatest no than nums[breakpt].

    4) then we swap those nos i.e nums[breakPt] & nums[max].

    5)then you reverse the rest half of array i.e from breakpt+1 to end,

*/
class Solution {

    public void nextPermutation(int[] nums) {
        int breakPt = -1, max = -1;
        for (int i = nums.length - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                breakPt = i;
                break;
            }
        }
        if (breakPt == -1) {
            reverse(nums, 0);
        } else {
            for (int j = nums.length - 1; j >= 0; j--) {
                if (nums[j] > nums[breakPt]) {
                    max = j;
                    break;
                }
            }
            swap(nums, breakPt, max);
            reverse(nums, breakPt + 1);
        }
    }

    void reverse(int[] arr, int start) {
        int i = start, j = arr.length - 1;
        while (i < j) {
            swap(arr, i, j);
            i++;
            j--;
        }
    }

    void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
