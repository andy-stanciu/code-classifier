class Solution {

    public void nextPermutation(int[] nums) {
        int len = nums.length;
        int index = -1;
        // find break-point
        for (int i = len - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                index = i;
                break;
            }
        }
        // there is no break-point, just a reverse array
        if (index == -1) {
            reverseArray(nums, 0);
            return;
        }
        // find next greater element and swap
        for (int i = len - 1; i >= index; i--) {
            if (nums[i] > nums[index]) {
                swapNum(nums, i, index);
                break;
            }
        }
        // reverse array of remaining right part
        reverseArray(nums, index + 1);
    }

    public void swapNum(int[] arr, int start, int end) {
        int temp = arr[start];
        arr[start] = arr[end];
        arr[end] = temp;
    }

    public void reverseArray(int[] arr, int start) {
        int end = arr.length - 1;
        while (start < end) {
            swapNum(arr, start, end);
            start++;
            end--;
        }
    }
}
