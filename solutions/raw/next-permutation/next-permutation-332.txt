class Solution {

    static int swapIdx;

    static int temp;

    static int i;

    public void nextPermutation(int[] nums) {
        backtrack(nums, nums.length - 1);
        return;
    }

    static void backtrack(int[] a, int idx) {
        if (idx == 0) {
            reverse(a, 0);
            return;
        }
        if (a[idx - 1] < a[idx]) {
            swapIdx = idx;
            for (i = idx + 1; i < a.length; i++) {
                if (a[i] <= a[swapIdx] && a[i] > a[idx - 1]) {
                    swapIdx = i;
                }
            }
            temp = a[swapIdx];
            a[swapIdx] = a[idx - 1];
            a[idx - 1] = temp;
            reverse(a, idx);
            return;
        }
        backtrack(a, idx - 1);
    }

    static void swap(int[] nums, int left, int right) {
        temp = nums[left];
        nums[left] = nums[right];
        nums[right] = temp;
    }

    static void reverse(int[] a, int start) {
        i = a.length - 1;
        while (start < i) {
            swap(a, start, i);
            start++;
            i--;
        }
    }
}
