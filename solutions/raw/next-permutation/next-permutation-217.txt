class Solution {

    public void nextPermutation(int[] nums) {
        int idx = -1;
        int n = nums.length;
        // Find Longest Dip
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                idx = i;
                break;
            }
        }
        if (idx == -1) {
            for (int i = 0; i <= (0 + n - 1) / 2; i++) {
                int tmp = nums[i];
                nums[i] = nums[n - 1 - i];
                nums[n - 1 - i] = tmp;
            }
        } else {
            // Swap idx and its JUST GREATER
            for (int i = n - 1; i > idx; i--) {
                if (nums[idx] < nums[i]) {
                    int tmp = nums[i];
                    nums[i] = nums[idx];
                    nums[idx] = tmp;
                    break;
                }
            }
            // Reverse elements after idx
            int cnt = 0;
            for (int i = idx + 1; i <= (idx + 1 + n - 1) / 2; i++) {
                int tmp = nums[i];
                nums[i] = nums[n - 1 - cnt];
                nums[n - 1 - cnt] = tmp;
                cnt++;
            }
        }
    }
}
