class Solution {

    public void nextPermutation(int[] nums) {
        int ind = -1;
        int n = nums.length;
        // Find the break point
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                ind = i;
                break;
            }
        }
        // Check if it\'s the last permutation
        if (ind == -1) {
            reverse(nums, 0, n - 1);
            return;
        }
        // Find next greater digit than nums[ind]
        int swapIndex = -1;
        for (int i = n - 1; i >= 0; i--) {
            if (nums[i] > nums[ind]) {
                swapIndex = i;
                break;
            }
        }
        // Swap that digit with nums[ind]
        int temp = nums[swapIndex];
        nums[swapIndex] = nums[ind];
        nums[ind] = temp;
        // Reverse the remaining elements from ind to get your next greater permutation
        reverse(nums, ind + 1, n - 1);
    }

    public void reverse(int[] nums, int x, int y) {
        while (x < y) {
            int temp = nums[x];
            nums[x] = nums[y];
            nums[y] = temp;
            x++;
            y--;
        }
    }
}
