class Solution {

    public void nextPermutation(int[] nums) {
        int[] traverse = new int[nums.length];
        int breakingPoint;
        int l = nums.length;
        int previousVal = -1;
        for (breakingPoint = l - 1; breakingPoint >= 0; breakingPoint--) {
            if (nums[breakingPoint] < previousVal)
                break;
            previousVal = nums[breakingPoint];
        }
        if (breakingPoint < 0) {
            reverse(nums, 0, l - 1);
            return;
        }
        int swappingPoint = l - 1;
        while ((nums[breakingPoint] >= nums[swappingPoint]) && swappingPoint > breakingPoint) {
            swappingPoint--;
        }
        int temp = nums[breakingPoint];
        nums[breakingPoint] = nums[swappingPoint];
        nums[swappingPoint] = temp;
        reverse(nums, breakingPoint + 1, l - 1);
    }

    private void reverse(int[] nums, int left, int right) {
        while (left < right) {
            int temp = nums[left];
            nums[left] = nums[right];
            nums[right] = temp;
            left++;
            right--;
        }
    }
}
