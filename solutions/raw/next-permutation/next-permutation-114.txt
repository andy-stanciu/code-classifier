class Solution {

    public void nextPermutation(int[] nums) {
        int n = nums.length;
        int a = 0;
        int b = 0;
        //we have to find dip
        //dip = ith element is smaller than previous element
        //on traversing from right to left
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                //dip
                a = i;
                break;
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            if (nums[i] > nums[a]) {
                //greater element than dip
                b = i;
                break;
            }
        }
        //if array sorted in reversed manner than there is no dip
        //sort array and return
        if (a == b) {
            Arrays.sort(nums);
            return;
        }
        //swapping
        int temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
        //sort right part
        int left = a + 1;
        int right = n - 1;
        while (left < right) {
            int t = nums[left];
            nums[left] = nums[right];
            nums[right] = t;
            left++;
            right--;
        }
    }
}
