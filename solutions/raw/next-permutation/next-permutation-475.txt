class Solution {

    // Swaps the elements at indices i and j in the array nums
    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    // Reverses the elements in the array nums from index i to j
    public void reverse(int[] nums, int i, int j) {
        while (i < j) {
            swap(nums, i, j);
            i++;
            j--;
        }
    }

    // Computes the next lexicographical permutation of the array nums
    public void nextPermutation(int[] nums) {
        int n = nums.length;
        int ind = -1;
        // Find the first decreasing element from the end
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                ind = i;
                break;
            }
        }
        // If no such element is found, the array is sorted in descending order
        if (ind == -1) {
            reverse(nums, 0, n - 1);
            return;
        }
        // Find the element just larger than nums[ind] to the right of ind
        for (int i = n - 1; i > ind; i--) {
            if (nums[i] > nums[ind]) {
                swap(nums, ind, i);
                break;
            }
        }
        // Reverse the elements to the right of ind to get the next permutation
        reverse(nums, ind + 1, n - 1);
    }
    // Testing the implementation
}
