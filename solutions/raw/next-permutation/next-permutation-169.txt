//next permutation in lexical order
//take a number such as 3456 -> 3465 -> 3546 -> 3564 -> 3645 -> 3654 -> 4356 -> .....
//as we can see the next permutation of number will be at the place where number has
//has exhausted its possibilities
//and possibilities will exhaust when the digits next to it are all in increasing order
//so we will start searching from behind and find the index of element which is breaking
//the order
//swap it with digit which is just greater than found digit
//sort the digits which are after swapped digit
class Solution {

    public void nextPermutation(int[] nums) {
        //we will start comparing with last value for order break
        for (int i = nums.length - 2; i >= 0; i--) {
            //to store the element which is next greater
            int nxtGrt = Integer.MAX_VALUE;
            //taking index as -1
            int idx = -1;
            //i = index of element
            //j = index of element afetr i
            for (int j = i + 1; j < nums.length; j++) {
                //if element at j is greater than element at i
                if (nums[j] > nums[i] && nums[j] < nxtGrt) {
                    //storing the just greater element
                    nxtGrt = nums[j];
                    idx = j;
                    System.out.println(nxtGrt + " " + idx);
                }
            }
            //the idx will change if element is found
            if (idx != -1) {
                //swapping the elements
                nums[idx] = nums[i];
                nums[i] = nxtGrt;
                Arrays.sort(nums, i + 1, nums.length);
                return;
            }
        }
        //if the whole digit is in decreasing order then there will be no next
        //permutation the next to it will be original number which will be full sorted
        Arrays.sort(nums);
        return;
    }
}
