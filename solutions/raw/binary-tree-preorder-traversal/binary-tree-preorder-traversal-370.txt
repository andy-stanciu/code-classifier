/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        // Recursive Approach
        // preOrder(root,res);
        Stack<TreeNode> stk = new Stack<>();
        // Iterative
        TreeNode curr = root;
        while (curr != null || !stk.isEmpty()) {
            while (curr != null) {
                // while curr is not null, add curr into result and stack, then go left till null
                res.add(curr.val);
                stk.push(curr);
                curr = curr.left;
            }
            //  after reaching null, we then need to go right
            curr = stk.pop().right;
        }
        return res;
    }

    void preOrder(TreeNode curr, List<Integer> list) {
        if (curr == null)
            return;
        list.add(curr.val);
        preOrder(curr.left, list);
        preOrder(curr.right, list);
    }
}
