/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    // public List<Integer> preorderTraversal(TreeNode root) {
    //     List<Integer> L = new ArrayList<>();
    //     if (root == null)
    //         return L;
    //     L.add(root.val); // Add the root value
    //     // Add the results of the left subtree traversal
    //     L.addAll(preorderTraversal(root.left));
    //     // Add the results of the right subtree traversal
    //     L.addAll(preorderTraversal(root.right));
    //     return L;
    // }
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> L = new ArrayList<>();
        preorder(root, L);
        return L;
    }

    private void preorder(TreeNode node, List<Integer> L) {
        if (node == null) {
            return;
        }
        // Add the current node value
        L.add(node.val);
        // Recur on the left subtree
        preorder(node.left, L);
        // Recur on the right subtree
        preorder(node.right, L);
    }
}
