class Solution {

    // Wrapper method to set up and initialize the recursive function.
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> integerList = new LinkedList<>();
        integerList = preorderTraversal(root, integerList);
        return integerList;
    }

    // Recursive method.
    private List<Integer> preorderTraversal(TreeNode root, List<Integer> integerList) {
        // The base case, for when the root is null.
        if (root == null)
            return integerList;
        // For preorder traversal, we first visit the root and add the value of the root to the list.
        integerList.add(root.val);
        // Then, we visit the left node.
        preorderTraversal(root.left, integerList);
        // Lastly, we visit the right node.
        preorderTraversal(root.right, integerList);
        // Once done, we return the list.
        return integerList;
    }
}
