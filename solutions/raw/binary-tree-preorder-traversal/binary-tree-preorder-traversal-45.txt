/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> arr = new ArrayList<>();
        if (root == null) {
            // null means no node so return empty list
            return arr;
        }
        arr.add(root.val);
        // Adding itsleft into preorderlist
        List<Integer> leftorder = preorderTraversal(root.left);
        arr = listAdd(arr, leftorder);
        // ListAdd  is fution to element of leftorder to arr
        List<Integer> rigthorder = preorderTraversal(root.right);
        arr = listAdd(arr, rigthorder);
        // ListAdd  is fution to element of rigthorder to arr
        // returning complete list
        return arr;
    }

    public List<Integer> listAdd(List<Integer> mainlist, List<Integer> suplement) {
        // function to add elements of suplement list ot mainlist
        for (int i = 0; i < suplement.size(); i++) {
            mainlist.add(suplement.get(i));
        }
        return mainlist;
    }
}
