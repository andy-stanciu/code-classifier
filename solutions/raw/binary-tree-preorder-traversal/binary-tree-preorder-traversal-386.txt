/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> arr = new ArrayList<>();
        if (root == null) {
            return arr;
        }
        // stack to keep track of nodes
        Stack<TreeNode> stk = new Stack<>();
        // Start by pushing the root node to the stack.
        stk.add(root);
        while (!stk.isEmpty()) {
            TreeNode curr = stk.pop();
            arr.add(curr.val);
            // Push right first so that left is processed first (because Stack works on LIFO)
            if (curr.right != null) {
                stk.push(curr.right);
            }
            if (curr.left != null) {
                stk.push(curr.left);
            }
        }
        return arr;
    }
}
