/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> traversalResult = new ArrayList<>();
        Stack<TreeNode> nodesStack = new Stack<>();
        if (root != null)
            nodesStack.push(root);
        while (!nodesStack.isEmpty()) {
            TreeNode curTop = nodesStack.pop();
            traversalResult.add(curTop.val);
            // we prioritize left child node (preorder traversal) by putting it above the right child node
            if (curTop.right != null)
                nodesStack.push(curTop.right);
            if (curTop.left != null)
                nodesStack.push(curTop.left);
        }
        return traversalResult;
    }
}
