/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//USING RECURSION
// class Solution {
//     public List<Integer> preorderTraversal(TreeNode root) {
//         List<Integer> list=new ArrayList<>();
//         return(helper(root,list));
//     }
//     List<Integer> helper(TreeNode node,List<Integer> ans){
//              if(node==null){
//                 return ans;
//              }
//              ans.add(node.val);
//              helper(node.left,ans);
//              helper(node.right,ans);
//              return ans;
//     }
// }
//USING ITERATION
class Solution {

    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        if (root == null) {
            return ans;
        }
        Stack<TreeNode> st = new Stack<>();
        st.push(root);
        TreeNode node;
        node = root;
        while (!st.isEmpty()) {
            node = st.pop();
            ans.add(node.val);
            if (node.right != null) {
                st.push(node.right);
            }
            if (node.left != null) {
                st.push(node.left);
            }
        }
        return ans;
    }
}
