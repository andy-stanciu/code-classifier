class Solution {

    // This method returns a list of integers representing the preorder traversal of a binary tree
    public List<Integer> preorderTraversal(TreeNode root) {
        // Create an empty ArrayList to store the preorder traversal
        ArrayList<Integer> result = new ArrayList<Integer>();
        // If the root is null, return the empty list
        if (root == null)
            return result;
        // Create a stack to store the nodes as we traverse the tree
        Stack<TreeNode> st = new Stack<TreeNode>();
        // Push the root node onto the stack
        st.push(root);
        // While the stack is not empty,
        while (!st.isEmpty()) {
            // Pop the top node from the stack
            TreeNode current = st.pop();
            // Add the value of the node to the list
            result.add(current.val);
            // If the current node has a right child, push it onto the stack
            if (current.right != null)
                st.push(current.right);
            // If the current node has a left child, push it onto the stack
            if (current.left != null)
                st.push(current.left);
        }
        // Return the list of preorder traversal values
        return result;
    }
}
