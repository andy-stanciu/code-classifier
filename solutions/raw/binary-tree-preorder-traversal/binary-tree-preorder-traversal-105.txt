class Solution {

    List<Integer> list = new ArrayList<>();

    public List<Integer> preorderTraversal(TreeNode root) {
        // if we found graph with no node , it return list that contains null values.
        if (root == null)
            return list;
        // it find preorder in a graph.
        preorder(root);
        // it return list that contains preorder values.
        return list;
    }

    void preorder(TreeNode r) {
        /*
        Preorder traversal
        This technique follows the \'root left right\' policy. 
        It means that, first root node is visited after that the left subtree is traversed recursively,
        and finally, right subtree is recursively traversed.
        (PLR)
        */
        if (// if root node null it stop receiving in a graph.
        r != null) {
            //it add root node in answer list.
            list.add(r.val);
            //it travels left part of tree, recursive call preorder.
            preorder(r.left);
            //it travels right part of tree, recursive call preorder.
            preorder(r.right);
        }
    }
}
