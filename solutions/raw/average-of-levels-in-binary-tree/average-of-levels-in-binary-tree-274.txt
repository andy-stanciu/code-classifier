/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> averageOfLevels(TreeNode root) {
        // as here also level is being used so we have to use the breadth first apporach here also
        // like here we have to return a sinngle list of the double out here
        // first creatating the que and the list here
        List<Double> ans = new ArrayList<>();
        Queue<TreeNode> que = new LinkedList<>();
        if (root == null)
            return ans;
        // so now adding the node
        que.add(root);
        // so now making the loop
        while (!que.isEmpty()) {
            // so now here we have to create this in that
            // so intial for the all level
            double avg = 0;
            int len = que.size();
            for (int i = 0; i < len; i++) {
                // so now here we have to add the value in that double
                TreeNode currnode = que.remove();
                avg = avg + (double) (currnode.val);
                // so now adding the left and the righ node
                if (currnode.left != null) {
                    que.add(currnode.left);
                }
                if (currnode.right != null) {
                    que.add(currnode.right);
                }
            }
            // so now here if we divide it by the len as now lenget is not beign changed so we can divide it
            // for reutrning the avarage here
            // but first of all we have to convert avg into the double
            ans.add(((double) avg) / len);
        }
        return ans;
    }
}
