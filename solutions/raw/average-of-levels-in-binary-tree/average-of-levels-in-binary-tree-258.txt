/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> averageOfLevels(TreeNode root) {
        List<List<TreeNode>> averages = new ArrayList<>();
        List<Double> result = new ArrayList<>();
        getBreadthElements(root, averages, 0, result);
        return result;
    }

    private void getBreadthElements(TreeNode node, List<List<TreeNode>> averages, int i, List<Double> result) {
        ArrayList<TreeNode> values = new ArrayList();
        if (i == 0) {
            values.add(node);
            i++;
            averages.add(values);
            result.add(node.val + 0.0);
            getBreadthElements(node, averages, i, result);
        } else {
            List<TreeNode> previous = averages.get(i - 1);
            if (previous.size() == 0) {
                averages.remove(i - 1);
                result.remove(i - 1);
                return;
            }
            Double d = 0.0;
            for (int j = 0; j < previous.size(); j++) {
                TreeNode n = previous.get(j);
                if (n.right != null) {
                    values.add(n.right);
                    d += n.right.val + 0.0;
                }
                if (n.left != null) {
                    values.add(n.left);
                    d += n.left.val + 0.0;
                }
            }
            averages.add(values);
            d = d / values.size();
            result.add(d);
            i++;
            getBreadthElements(null, averages, i, result);
        }
    }
}
