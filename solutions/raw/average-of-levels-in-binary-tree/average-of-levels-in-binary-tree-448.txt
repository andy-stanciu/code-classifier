/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> averageOfLevels(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<>();
        List<Double> res = new ArrayList<>();
        //1. add first element to the queue
        queue.add(root);
        bfs(queue, res);
        return res;
    }

    private void bfs(Queue<TreeNode> queue, List<Double> res) {
        // if queue is empty, stop algorithm
        if (queue.isEmpty())
            return;
        //cur level size
        int size = queue.size();
        double curSum = 0;
        //4. for each queue element do something
        for (int i = 0; i < size; i++) {
            //loop for each level
            TreeNode cur = queue.poll();
            curSum += cur.val;
            if (cur.left != null) {
                queue.add(cur.left);
            }
            if (cur.right != null) {
                queue.add(cur.right);
            }
        }
        res.add((double) (curSum / size));
        bfs(queue, res);
    }
}
