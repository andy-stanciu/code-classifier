/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> averageOfLevels(TreeNode root) {
        // To store the averages
        List<Double> res = new ArrayList<>();
        // Current level nodes
        List<TreeNode> p = new ArrayList<>();
        // Next level nodes
        List<TreeNode> q = new ArrayList<>();
        // Handle empty tree
        if (root == null)
            return new ArrayList<>();
        // Start with the root node
        p.add(root);
        while (!p.isEmpty()) {
            // While there are nodes to process
            // Initialize sum for the current level
            double sum = 0;
            for (TreeNode node : p) {
                // Iterate through current level nodes
                // Add node value to sum
                sum += node.val;
                // Add child nodes to the next level list
                if (node.left != null)
                    q.add(node.left);
                if (node.right != null)
                    q.add(node.right);
            }
            // Calculate average and add to results
            res.add(sum / p.size());
            // Move to the next level
            p = q;
            // Reset next level list
            q = new ArrayList<>();
            // Reset sum for the next iteration
            sum = 0;
        }
        // Return the list of averages
        return res;
    }
}
