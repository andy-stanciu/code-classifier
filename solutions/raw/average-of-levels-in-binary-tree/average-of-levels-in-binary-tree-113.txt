/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> averageOfLevels(TreeNode root) {
        return usignRecusrion(root);
    }

    List<Double> usignRecusrion(TreeNode root) {
        List<Double> result = new ArrayList<>();
        if (root == null)
            return result;
        // Map to store the sum and count of nodes at each level
        Map<Integer, double[]> levelMap = new HashMap<>();
        dfs(root, 0, levelMap);
        // Compute the average for each level
        int maxLevel = Collections.max(levelMap.keySet());
        for (int i = 0; i <= maxLevel; i++) {
            double[] sumCount = levelMap.get(i);
            result.add(sumCount[0] / sumCount[1]);
        }
        return result;
    }

    // Helper method for DFS
    void dfs(TreeNode node, int level, Map<Integer, double[]> levelMap) {
        if (node == null)
            return;
        // Update the levelMap
        // [sum, count]
        levelMap.putIfAbsent(level, new double[2]);
        double[] sumCount = levelMap.get(level);
        // Sum
        sumCount[0] += node.val;
        // Count
        sumCount[1] += 1;
        // Traverse left and right children
        dfs(node.left, level + 1, levelMap);
        dfs(node.right, level + 1, levelMap);
    }
}
