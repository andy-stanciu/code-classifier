/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> ansList = new ArrayList<>();
        if (root == null)
            return ansList;
        Queue<TreeNode> que = new LinkedList<>();
        que.offer(root);
        while (!que.isEmpty()) {
            double averageLevel = 0;
            int LevelSize = que.size();
            for (int i = 0; i < LevelSize; i++) {
                TreeNode currentNode = que.poll();
                if (currentNode.left != null) {
                    que.offer(currentNode.left);
                }
                if (currentNode.right != null) {
                    que.offer(currentNode.right);
                }
                averageLevel += currentNode.val;
            }
            ansList.add(averageLevel / LevelSize);
        }
        return ansList;
    }
}
