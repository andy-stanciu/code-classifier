/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<Double> arr = new ArrayList<Double>();

    List<TreeNode> list = new ArrayList<TreeNode>();

    int i = 0, j = 0, lastchild = 0;

    double sum = 0;

    public List<Double> averageOfLevels(TreeNode root) {
        if (root == null)
            return arr;
        list.add(root);
        while (i < list.size()) {
            TreeNode node = list.get(i);
            checknull(node.left);
            checknull(node.right);
            sum += node.val;
            if (i == lastchild) {
                arr.add(sum / (lastchild + 1));
                for (int x = 1; x <= lastchild + 1; x++) {
                    list.remove(0);
                    j -= 1;
                }
                lastchild = j;
                sum = 0;
                i = 0;
            } else
                i++;
        }
        return arr;
    }

    public void checknull(TreeNode root) {
        if (root != null) {
            list.add(root);
            j++;
        }
    }
}
