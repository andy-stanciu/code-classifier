class Solution {

    public List<Double> averageOfLevels(TreeNode root) {
        // List to store the average values of each level in the binary tree
        List<Double> ans = new ArrayList<>();
        // If the root is null, return an empty list
        if (root == null) {
            return ans;
        }
        // Queue to perform level-order traversal
        Queue<TreeNode> q = new LinkedList<>();
        // Add the root node to the queue
        q.add(root);
        // Perform level-order traversal
        while (!q.isEmpty()) {
            // Get the number of nodes at the current level
            int size = q.size();
            // Initialize the total sum of nodes at the current level
            Double totalSum = 0.0;
            // Iterate through all nodes at the current level
            for (int i = 0; i < size; i++) {
                // Remove the node from the front of the queue
                TreeNode temp = q.remove();
                // Add the value of the current node to the total sum
                totalSum += temp.val;
                // Add the left child of the current node to the queue if it exists
                if (temp.left != null) {
                    q.add(temp.left);
                }
                // Add the right child of the current node to the queue if it exists
                if (temp.right != null) {
                    q.add(temp.right);
                }
            }
            // Calculate the average value of nodes at the current level and add it to the
            // result list
            ans.add(totalSum / size);
        }
        // Return the list containing the average values of each level in the binary
        return ans;
        // tree
    }
}
