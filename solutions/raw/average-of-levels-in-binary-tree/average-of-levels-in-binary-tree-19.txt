class Solution {

    private void bfs(Queue<TreeNode> queue, List<Double> list) {
        if (queue.isEmpty()) {
            return;
        }
        Queue<TreeNode> newQueue = new LinkedList<>();
        double total = 0;
        int count = queue.size();
        while (!queue.isEmpty()) {
            TreeNode curr = queue.remove();
            total += curr.val;
            if (curr.left != null) {
                newQueue.add(curr.left);
            }
            if (curr.right != null) {
                newQueue.add(curr.right);
            }
        }
        list.add(total / count);
        bfs(newQueue, list);
    }

    public List<Double> averageOfLevels(TreeNode root) {
        if (root == null) {
            return List.of();
        }
        List<Double> list = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        bfs(queue, list);
        return list;
    }
}
