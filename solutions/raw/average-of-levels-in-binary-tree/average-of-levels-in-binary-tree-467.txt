/**
 *  Give \uD83D\uDC4D if you like the solution\u2705
 */
class Solution {

    public List<Double> averageOfLevels(TreeNode root) {
        // if root is null return null
        if (root == null)
            return null;
        // create empty List
        List<Double> list = new ArrayList<>();
        if (root.left == null && root.right == null) {
            // if we have only one node add the value of node in List
            list.add((double) root.val);
            return list;
        }
        // make queue to for level order tarversal
        Queue<TreeNode> queue = new ArrayDeque<>();
        // add  root to queue
        queue.add(root);
        while (!queue.isEmpty()) {
            // get the size of each level
            int size = queue.size();
            // make the variable to add nodes of each level
            // 0D beacause we have value in Double
            Double sumOfLevel = 0D;
            // count is use to count the number of nodes on each level
            // 0D beacause we have value in Double
            Double count = 0D;
            while (size-- > 0) {
                // count is use to count the number of nodes on each level
                count++;
                // remove the current level nodes add the value to SumOfLevels variable
                TreeNode node = queue.remove();
                sumOfLevel += node.val;
                // node.left is not null add to queue
                if (node.left != null) {
                    queue.add(node.left);
                }
                // node.right is not null add to queue
                if (node.right != null) {
                    queue.add(node.right);
                }
            }
            // sumOfLevel divid by number of nodes
            // and added to list
            list.add(sumOfLevel / count);
        }
        return list;
    }
}
