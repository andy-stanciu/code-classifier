/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public void bfs(TreeNode root, List<Double> list) {
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while (!queue.isEmpty()) {
            int nodesAtThisLevel = queue.size();
            double divisor = nodesAtThisLevel;
            double runningSum = 0;
            while (nodesAtThisLevel > 0) {
                TreeNode node = queue.poll();
                //Add this node\'s value to the count
                runningSum += node.val;
                //Add this node\'s children to the queue
                if (node.left != null)
                    queue.add(node.left);
                if (node.right != null)
                    queue.add(node.right);
                nodesAtThisLevel--;
            }
            double average = runningSum / divisor;
            list.add(average);
        }
    }

    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> l = new ArrayList<>();
        bfs(root, l);
        return l;
    }
}
