/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> ans = new ArrayList<Double>();
        if (root == null) {
            return ans;
        }
        Queue<TreeNode> que = new LinkedList();
        que.add(root);
        ans.add((double) root.val);
        Queue<TreeNode> q = new LinkedList();
        long s = 0, c = 0;
        while (que.isEmpty() != true) {
            if (que.peek().left != null) {
                c++;
                q.add(que.peek().left);
                s = s + que.peek().left.val;
            }
            if (que.peek().right != null) {
                c++;
                q.add(que.peek().right);
                s = s + que.peek().right.val;
            }
            que.remove();
            if (que.isEmpty() == true) {
                que = new LinkedList(q);
                q.clear();
                // System.out.println(s+"   "+c);
                if (c != 0)
                    ans.add(s / (double) c);
                c = 0;
                s = 0;
            }
        }
        return ans;
    }
}
