/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public void bfs(int level, double[] sumVals, int[] numVals, TreeNode n) {
        if (n == null) {
            return;
        }
        // System.out.println(n.val);
        numVals[level]++;
        sumVals[level] += n.val;
        if (n.left != null) {
            bfs(level + 1, sumVals, numVals, n.left);
        }
        if (n.right != null) {
            bfs(level + 1, sumVals, numVals, n.right);
        }
    }

    public List<Double> averageOfLevels(TreeNode root) {
        double[] sumVals = new double[10000];
        int[] numVals = new int[10000];
        bfs(0, sumVals, numVals, root);
        List<Double> ans = new LinkedList();
        int i = 0;
        while (numVals[i] > 0) {
            ans.add(sumVals[i] / numVals[i]);
            i++;
        }
        return ans;
    }
}
