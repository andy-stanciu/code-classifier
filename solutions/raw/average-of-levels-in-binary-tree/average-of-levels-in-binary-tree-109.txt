/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> ans = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while (!queue.isEmpty()) {
            //n stores the number of nodes in current level.
            int n = queue.size();
            double sum = 0;
            for (int i = 0; i < n; i++) {
                // Starting from the first node in the current level we take it off the queue.
                TreeNode node = queue.poll();
                //Add it\'s children if any.
                if (node.left != null)
                    queue.add(node.left);
                if (node.right != null)
                    queue.add(node.right);
                //Add it\'s value to the sum.
                sum += node.val;
            }
            // At the end of iterating thru n, we should have all of the elements in the current level in sum. Compute average.
            ans.add(sum / n);
            //Reset sum for next level of nodes.
            sum = 0;
        }
        return ans;
    }
}
