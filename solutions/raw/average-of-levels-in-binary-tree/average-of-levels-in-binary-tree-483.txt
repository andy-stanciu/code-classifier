class Solution {

    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> result = new ArrayList<>();
        List<Integer> count = new ArrayList<>();
        averageOfLevels(root, 0, count, result);
        return result;
    }

    private void averageOfLevels(TreeNode node, int k, List<Integer> count, List<Double> result) {
        if (node == null) {
            return;
        }
        if (result.size() > k) {
            count.set(k, count.get(k) + 1);
            result.set(k, calculateAverage(result.get(k), node.val, count.get(k)));
        } else {
            count.add(1);
            result.add(node.val * 1d);
        }
        averageOfLevels(node.left, k + 1, count, result);
        averageOfLevels(node.right, k + 1, count, result);
    }

    //https://stackoverflow.com/a/61377432
    private double calculateAverage(double sum, int val, int currentAmount) {
        double valImpact = 1d / currentAmount;
        double sumImpact = 1d - valImpact;
        return (valImpact * val) + (sumImpact * sum);
    }
}
