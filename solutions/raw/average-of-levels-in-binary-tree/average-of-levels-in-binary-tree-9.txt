/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> averageOfLevels(TreeNode root) {
        Stack<TreeNode> stack = new Stack<TreeNode>();
        List<Double> list = new ArrayList<>();
        stack.push(root);
        return helperAverage(stack, list);
    }

    public static List<Double> helperAverage(Stack<TreeNode> stack, List<Double> output) {
        Stack<TreeNode> newStack = new Stack<TreeNode>();
        double numItems = stack.size(), sum = 0;
        while (!stack.isEmpty()) {
            TreeNode temp = stack.pop();
            sum += temp.val;
            if (temp.right != null)
                newStack.push(temp.right);
            if (temp.left != null)
                newStack.push(temp.left);
        }
        double average = sum / numItems;
        output.add(average);
        if (!newStack.isEmpty())
            return helperAverage(newStack, output);
        else
            return output;
    }
}
