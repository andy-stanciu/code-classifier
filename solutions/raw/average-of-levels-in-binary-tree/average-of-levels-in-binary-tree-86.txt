/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> answer = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        List<Integer> row = new LinkedList<>();
        queue.add(root);
        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size != 0) {
                size--;
                TreeNode node = queue.poll();
                if (node != null) {
                    row.add(node.val);
                    queue.add(node.left);
                    queue.add(node.right);
                }
            }
            if (!row.isEmpty()) {
                answer.add(row.stream().mapToInt(i -> i).average().orElse(0));
                //answer.add(row.stream().mapToInt(i -> i).average().orElse(0));
                row = new ArrayList<>();
            }
        }
        return answer;
    }
}
