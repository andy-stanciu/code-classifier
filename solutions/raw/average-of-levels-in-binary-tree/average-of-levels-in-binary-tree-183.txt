class Solution {

    List<Double> averages = new ArrayList<>();

    public List<Double> averageOfLevels(TreeNode root) {
        if (root == null) {
            // Return empty list if the root is null
            return averages;
        }
        // Use a queue for level-order traversal (BFS)
        Queue<TreeNode> queue = new LinkedList<>();
        // Start with the root
        queue.offer(root);
        while (!queue.isEmpty()) {
            int size = queue.size();
            double sum = 0.0;
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                // Accumulate node values for the current level
                sum += node.val;
                // Enqueue child nodes if they exist
                if (node.left != null) {
                    queue.offer(node.left);
                }
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }
            // Calculate average for the current level
            double average = sum / size;
            // Add the average to the result list
            averages.add(average);
        }
        return averages;
    }
}
