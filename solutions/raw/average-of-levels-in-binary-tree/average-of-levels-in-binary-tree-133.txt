/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> list = new ArrayList<>();
        List<Integer> listAmount = new ArrayList<>();
        dfs(root, list, listAmount, 1);
        for (int i = 0; i < listAmount.size(); i++) {
            int amount = listAmount.get(i);
            list.set(i, list.get(i) / amount);
        }
        return list;
    }

    public void dfs(TreeNode root, List<Double> list, List<Integer> listAmount, int depth) {
        if (root == null) {
            return;
        }
        if (depth > list.size()) {
            list.add(1.0 * root.val);
            listAmount.add(1);
        } else {
            list.set(depth - 1, list.get(depth - 1) + 1.0 * root.val);
            listAmount.set(depth - 1, listAmount.get(depth - 1) + 1);
        }
        dfs(root.left, list, listAmount, depth + 1);
        dfs(root.right, list, listAmount, depth + 1);
    }
}
