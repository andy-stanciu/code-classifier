/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> avgList = new ArrayList<>();
        List<List<Integer>> levelList = new ArrayList<>();
        if (root == null) {
            return avgList;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while (!q.isEmpty()) {
            int size = q.size();
            List<Integer> currentLevel = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                TreeNode current = q.remove();
                currentLevel.add(current.val);
                if (current.left != null) {
                    q.add(current.left);
                }
                if (current.right != null) {
                    q.add(current.right);
                }
            }
            levelList.add(currentLevel);
        }
        avgList = getAverage(levelList);
        return avgList;
    }

    public List<Double> getAverage(List<List<Integer>> levelList) {
        List<Double> avgList = new ArrayList<>();
        double avg = 0;
        for (List<Integer> list : levelList) {
            int size = list.size();
            avg = 0;
            for (Integer item : list) {
                avg += item;
            }
            avg = avg / size;
            avgList.add(avg);
        }
        return avgList;
    }
}
