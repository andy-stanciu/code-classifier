class Solution {

    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> avgList = new ArrayList<>();
        if (root == null)
            return avgList;
        if (root != null && (root.left == null && root.right == null)) {
            avgList.add((double) root.val);
            return avgList;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while (!q.isEmpty()) {
            int levelSize = q.size();
            double sum = 0;
            for (int i = 0; i < levelSize; i++) {
                TreeNode curNode = q.poll();
                sum += curNode.val;
                if (curNode.left != null)
                    q.offer(curNode.left);
                if (curNode.right != null)
                    q.offer(curNode.right);
            }
            double avg = sum / levelSize;
            avgList.add(avg);
        }
        return avgList;
    }
}
