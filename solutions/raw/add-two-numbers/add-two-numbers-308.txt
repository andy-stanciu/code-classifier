/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry = 0;
        return addTwoNum(carry, l1, l2);
    }

    public ListNode addTwoNum(int carry, ListNode l1, ListNode l2) {
        ListNode myNode = new ListNode();
        if (l1 == null && l2 == null) {
            if (carry != 0) {
                myNode.val = carry;
                myNode.next = null;
                return myNode;
            } else {
                return l1;
            }
        }
        if (l1 == null) {
            if (l2.val + carry >= 10) {
                myNode.val = l2.val + carry - 10;
                carry = 1;
                myNode.next = addTwoNum(carry, l1, l2.next);
            } else {
                myNode.val = l2.val + carry;
                carry = 0;
                myNode.next = addTwoNum(carry, l1, l2.next);
            }
            return myNode;
        }
        if (l2 == null) {
            if (l1.val + carry >= 10) {
                myNode.val = l1.val + carry - 10;
                carry = 1;
                myNode.next = addTwoNum(carry, l1.next, l2);
            } else {
                myNode.val = l1.val + carry;
                carry = 0;
                myNode.next = addTwoNum(carry, l1.next, l2);
            }
            return myNode;
        }
        if (l1.val + l2.val + carry >= 10) {
            myNode.val = l1.val + l2.val + carry - 10;
            carry = 1;
            myNode.next = addTwoNum(carry, l1.next, l2.next);
        } else {
            myNode.val = l1.val + l2.val + carry;
            carry = 0;
            myNode.next = addTwoNum(carry, l1.next, l2.next);
        }
        return myNode;
    }
}
