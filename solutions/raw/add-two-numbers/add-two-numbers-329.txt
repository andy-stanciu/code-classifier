/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class ListNode {

    int val;

    ListNode next;

    ListNode(int val) {
        this.val = val;
    }

    // M\xE9todo para deserializar uma string para uma lista encadeada
    public static ListNode deserialize(String data) {
        if (data.equals("[]"))
            return null;
        // Removendo os colchetes e separando os valores
        String[] nodes = data.substring(1, data.length() - 1).split(",");
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        // Criando a lista encadeada a partir dos valores
        for (String node : nodes) {
            current.next = new ListNode(Integer.parseInt(node.trim()));
            current = current.next;
        }
        // Retorna o n\xF3 ap\xF3s o dummy
        return dummy.next;
    }

    // M\xE9todo para serializar uma lista encadeada em uma string
    public String serialize() {
        StringBuilder sb = new StringBuilder();
        ListNode current = this;
        sb.append("[");
        while (current != null) {
            sb.append(current.val);
            if (current.next != null)
                sb.append(",");
            current = current.next;
        }
        sb.append("]");
        return sb.toString();
    }
}

class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        int carry = 0;
        while (l1 != null || l2 != null || carry != 0) {
            int sum = carry;
            if (l1 != null) {
                sum += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                sum += l2.val;
                l2 = l2.next;
            }
            carry = sum / 10;
            current.next = new ListNode(sum % 10);
            current = current.next;
        }
        return dummy.next;
    }
}
