/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode result = new ListNode(-1);
        ListNode head = result;
        int carry = 0;
        while (l1 != null && l2 != null) {
            int sum = l1.val + l2.val + carry;
            carry = sum / 10;
            int num = sum % 10;
            ListNode newNode = new ListNode(num);
            head.next = newNode;
            head = newNode;
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            int sum = carry + l1.val;
            carry = sum / 10;
            int num = sum % 10;
            ListNode newNode = new ListNode(num);
            head.next = newNode;
            head = newNode;
            l1 = l1.next;
        }
        while (l2 != null) {
            int sum = carry + l2.val;
            carry = sum / 10;
            int num = sum % 10;
            ListNode newNode = new ListNode(num);
            head.next = newNode;
            head = newNode;
            l2 = l2.next;
        }
        if (carry > 0) {
            ListNode newNode = new ListNode(carry);
            head.next = newNode;
        }
        return result.next;
    }

    private Stack<Integer> getStack(ListNode node) {
        Stack<Integer> stack = new Stack();
        while (node != null) {
            stack.add(node.val);
            node = node.next;
        }
        return stack;
    }
}
