/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/*
  * Idea: Use carry as extra variable which stores the integer to forward to next sum 
  */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode nh = new ListNode(-1);
        ListNode it = nh;
        int carry = 0;
        while (l1 != null && l2 != null) {
            int sm = l1.val + l2.val + carry;
            carry = sm / 10;
            ListNode tmp = new ListNode(sm % 10);
            it.next = tmp;
            it = it.next;
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            int sm = l1.val + carry;
            carry = sm / 10;
            ListNode tmp = new ListNode(sm % 10);
            it.next = tmp;
            it = it.next;
            l1 = l1.next;
        }
        while (l2 != null) {
            int sm = l2.val + carry;
            carry = sm / 10;
            ListNode tmp = new ListNode(sm % 10);
            it.next = tmp;
            it = it.next;
            l2 = l2.next;
        }
        if (carry != 0) {
            ListNode tmp = new ListNode(carry);
            it.next = tmp;
        }
        return nh.next;
    }
}
