/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode t1 = l1;
        ListNode t2 = l2;
        ListNode ans = new ListNode(-1);
        ListNode tail = ans;
        int carry = 0;
        while (t1 != null && t2 != null) {
            int val1 = t1.val;
            int val2 = t2.val;
            int sum = val1 + val2 + carry;
            int val = 0;
            if (sum > 9) {
                val = sum % 10;
                carry = sum / 10;
                tail.next = new ListNode(val);
            } else {
                val = sum;
                carry = 0;
                tail.next = new ListNode(val + carry);
            }
            tail = tail.next;
            t1 = t1.next;
            t2 = t2.next;
        }
        while (t1 != null) {
            int val1 = t1.val;
            int sum = val1 + carry;
            int val = 0;
            if (sum > 9) {
                val = sum % 10;
                carry = sum / 10;
                tail.next = new ListNode(val);
            } else {
                val = sum;
                carry = 0;
                tail.next = new ListNode(val + carry);
            }
            tail = tail.next;
            t1 = t1.next;
        }
        while (t2 != null) {
            int val1 = t2.val;
            int sum = val1 + carry;
            int val = 0;
            if (sum > 9) {
                val = sum % 10;
                carry = sum / 10;
                tail.next = new ListNode(val);
            } else {
                val = sum;
                carry = 0;
                tail.next = new ListNode(val + carry);
            }
            tail = tail.next;
            t2 = t2.next;
        }
        while (carry > 0) {
            int val1 = carry % 10;
            tail.next = new ListNode(val1);
            tail = tail.next;
            carry = carry / 10;
        }
        return ans.next;
    }
}
