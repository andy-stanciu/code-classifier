/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry = 0;
        ListNode t1 = l1;
        ListNode t2 = l2;
        ListNode head = null;
        ListNode tail = null;
        while (t1 != null && t2 != null) {
            int num = t1.val + t2.val + carry;
            ListNode newnode = new ListNode(num);
            if (head == null) {
                head = newnode;
                tail = newnode;
            } else {
                tail.next = newnode;
                tail = newnode;
            }
            if (num >= 10) {
                tail.val = tail.val % 10;
                carry = 1;
            } else {
                carry = 0;
            }
            t1 = t1.next;
            t2 = t2.next;
        }
        while (t1 != null) {
            int num = t1.val + carry;
            ListNode newnode = new ListNode(num);
            if (num >= 10) {
                newnode.val = newnode.val % 10;
                carry = 1;
            } else {
                carry = 0;
            }
            tail.next = newnode;
            tail = newnode;
            t1 = t1.next;
        }
        while (t2 != null) {
            int num = t2.val + carry;
            ListNode newnode = new ListNode(num);
            if (num >= 10) {
                newnode.val = newnode.val % 10;
                carry = 1;
            } else {
                carry = 0;
            }
            tail.next = newnode;
            tail = newnode;
            t2 = t2.next;
        }
        if (carry == 1) {
            ListNode newnode = new ListNode(carry);
            tail.next = newnode;
            newnode = tail;
        }
        return head;
    }
}
