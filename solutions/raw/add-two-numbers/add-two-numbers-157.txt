/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry = 0;
        ListNode sumList = null;
        ListNode currentNode = sumList;
        while (l1 != null || l2 != null) {
            int newDigit = 0;
            if (l1 != null) {
                newDigit = newDigit + l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                newDigit = newDigit + l2.val;
                l2 = l2.next;
            }
            newDigit = newDigit + carry;
            // If the new digit is greater than 10, we have a carry
            if (newDigit > 9) {
                // Set carry to 1 and take modulus to get the remainder which is the digit
                carry = 1;
                newDigit = newDigit % 10;
            } else {
                carry = 0;
            }
            ListNode newNode = new ListNode(newDigit);
            if (sumList == null) {
                sumList = newNode;
                currentNode = sumList;
            } else {
                currentNode.next = newNode;
                currentNode = newNode;
            }
        }
        // If we have carry at the end, make sure to add a new node for the extra digit
        if (carry == 1) {
            ListNode newNode = new ListNode(1);
            currentNode.next = newNode;
        }
        return sumList;
    }
}
