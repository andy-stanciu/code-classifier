class Solution {

    private ListNode helper(ListNode l1, ListNode l2, int carry) {
        //case 5
        if (l1 == null && l2 == null && carry == 0)
            return null;
        ListNode node = new ListNode();
        //case 4
        if (l1 == null && l2 == null && carry != 0) {
            node.val = carry;
            node.next = null;
            return node;
        }
        //case 3
        if (l1 == null) {
            node.val = l2.val + carry;
            if (node.val > 9) {
                carry = node.val / 10;
                node.val = node.val % 10;
            } else
                carry = 0;
            node.next = helper(null, l2.next, carry);
        } else //case 2
        if (l2 == null) {
            node.val = l1.val + carry;
            if (node.val > 9) {
                carry = node.val / 10;
                node.val = node.val % 10;
            } else
                carry = 0;
            node.next = helper(l1.next, null, carry);
        } else //case 1
        {
            node.val = l1.val + l2.val + carry;
            if (node.val > 9) {
                carry = node.val / 10;
                node.val = node.val % 10;
            } else
                carry = 0;
            node.next = helper(l1.next, l2.next, carry);
        }
        return node;
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        return helper(l1, l2, 0);
    }
}
