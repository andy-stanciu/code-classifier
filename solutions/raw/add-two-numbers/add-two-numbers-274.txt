/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode node1 = l1;
        ListNode node2 = l2;
        ListNode dummy = new ListNode(-1);
        ListNode temp = dummy;
        int data = 0;
        int carry = 0;
        int first = 0;
        while ((node1 != null) && (node2 != null)) {
            data = node1.val + node2.val + carry;
            if (data < 10) {
                temp.next = new ListNode(data);
                carry = 0;
            } else {
                first = data % 10;
                carry = data / 10;
                temp.next = new ListNode(first);
            }
            node1 = node1.next;
            node2 = node2.next;
            temp = temp.next;
        }
        while (node1 != null) {
            data = node1.val + carry;
            if (data < 10) {
                temp.next = new ListNode(data);
                carry = 0;
            } else {
                first = data % 10;
                carry = data / 10;
                temp.next = new ListNode(first);
            }
            node1 = node1.next;
            temp = temp.next;
        }
        while (node2 != null) {
            data = node2.val + carry;
            if (data < 10) {
                temp.next = new ListNode(data);
                carry = 0;
            } else {
                first = data % 10;
                carry = data / 10;
                temp.next = new ListNode(first);
            }
            node2 = node2.next;
            temp = temp.next;
        }
        if (carry > 0) {
            temp.next = new ListNode(carry);
            temp = temp.next;
        }
        return dummy.next;
    }
}
