/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head = new ListNode();
        ListNode result = head;
        while (l1 != null || l2 != null) {
            System.out.println("values = " + ((l1 != null) ? l1.val : 0) + "; " + ((l2 != null) ? l2.val : 0));
            int val = ((l1 != null) ? l1.val : 0) + ((l2 != null) ? l2.val : 0) + result.val;
            System.out.println("value " + val);
            if (val >= 10) {
                result.val = val % 10;
                result.next = new ListNode(1);
                System.out.println("assign value, create next node with 1");
            } else {
                result.val = val;
                System.out.println("assign value " + val);
            }
            l1 = (l1 != null) ? l1.next : null;
            l2 = (l2 != null) ? l2.next : null;
            if ((l1 != null || l2 != null) && result.next == null) {
                result.next = new ListNode();
                System.out.println("create empty next node");
            }
            if (result.next != null) {
                result = result.next;
                System.out.println("switch node to next node");
            }
        }
        return head;
    }
}
