/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        //    long num1 = 0;
        //    long num2 = 0;
        //    ListNode t1 = l1;
        //    ListNode t2 = l2;
        //    while(t1!=null){
        //     long s1 = t1.val;
        //     num1 = num1*10+s1;
        //     t1 = t1.next;
        //    }
        //    while(t2!=null){
        //     long s2 = t2.val;
        //     num2 = num2*10+s2;
        //     t2 = t2.next;
        //    }
        //    long rev1 = 0;
        //    while(num1>0){
        //     long r = num1%10;
        //     rev1 = rev1*10+r;
        //     num1=num1/10;
        //    }
        //    long rev2 = 0;
        //    while(num2>0){
        //     long r = num2%10;
        //     rev2 = rev2*10+r;
        //     num2 = num2/10;
        //    }
        //    while(l1!=null && l1.val == 0){
        //     rev1 = rev1*10;
        //     System.out.println(rev1);
        //     l1 = l1.next;
        //    }
        //    while(l2!=null && l2.val == 0){
        //     rev2 = rev2*10;
        //     System.out.println(rev2);
        //     l2 = l2.next;
        //    }
        //    System.out.println(rev1);
        //    System.out.println(rev2);
        //    long sum = rev1 + rev2;
        //    System.out.println(sum);
        //    System.out.println((int)sum%10);
        //    ListNode temp = new ListNode(0);
        //    ListNode f = temp;
        //    while(sum>0){
        //     long s = sum%10;
        //     int s1 = (int)s;
        //     System.out.print(s1+" ");
        //     ListNode a = new ListNode(s1);
        //     f.next = a;
        //     f = a;
        //     sum = sum/10;
        //     System.out.print(sum+" ");
        //    }
        //    if(temp.next == null)
        //    return temp;
        //    temp = temp.next;
        //    return temp;
        ListNode t1 = l1;
        ListNode t2 = l2;
        ListNode t = new ListNode(0);
        ListNode temp = t;
        int carry = 0;
        while (t1 != null && t2 != null) {
            int sum = t1.val + t2.val + carry;
            int num = sum % 10;
            carry = sum / 10;
            ListNode a = new ListNode(num);
            temp.next = a;
            temp = a;
            t1 = t1.next;
            t2 = t2.next;
        }
        if (t1 == null && t2 == null && carry == 0)
            return t.next;
        if (t1 == null && t2 == null && carry != 0) {
            ListNode a = new ListNode(carry);
            temp.next = a;
            temp = a;
            return t.next;
        }
        // System.out.println(carry);
        while (t1 == null && t2 != null) {
            int sum = t2.val + carry;
            int num = sum % 10;
            carry = sum / 10;
            // System.out.println(carry);
            ListNode a = new ListNode(num);
            temp.next = a;
            temp = a;
            t2 = t2.next;
        }
        while (t2 == null && t1 != null) {
            int sum = t1.val + carry;
            // System.out.println(sum);
            int num = sum % 10;
            carry = sum / 10;
            // System.out.println(carry);
            ListNode a = new ListNode(num);
            temp.next = a;
            temp = a;
            t1 = t1.next;
        }
        // System.out.println(carry);
        while (t1 == null && t2 == null && carry != 0) {
            ListNode a = new ListNode(carry);
            temp.next = a;
            temp = a;
            return t.next;
        }
        return t.next;
    }
}
