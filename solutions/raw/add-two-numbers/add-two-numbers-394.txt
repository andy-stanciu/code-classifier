/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode listRes = null;
        int cociente = 0;
        while (l1 != null || l2 != null || cociente > 0) {
            int a = 0;
            int b = 0;
            //validamos ya alguna puede contener mas nodos que la otra
            if (l1 != null)
                a = l1.val;
            if (l2 != null)
                b = l2.val;
            //sumamos los nodos emparejados de izquierda a derecha
            int suma = a + b + cociente;
            if (suma > 9) {
                suma = suma % 10;
                cociente = 1;
            } else {
                cociente = 0;
            }
            //salvamos los resultados en la lista de nodos a mostrar
            ListNode temp = new ListNode(suma, null);
            if (listRes == null) {
                listRes = temp;
            } else {
                // Crea ua copia de la lista.
                ListNode aux = listRes;
                // llegamos al ultimo nodo.
                while (aux.next != null) {
                    aux = aux.next;
                }
                // Agregamos al final de la lista.
                aux.next = temp;
            }
            if (l1 != null)
                l1 = l1.next;
            if (l2 != null)
                l2 = l2.next;
        }
        return listRes;
    }
}
