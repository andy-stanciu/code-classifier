/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head = new ListNode(0);
        ListNode curr = head;
        ListNode temp1 = l1;
        ListNode temp2 = l2;
        boolean carry = false;
        while (temp1 != null && temp2 != null) {
            int temp = temp1.val + temp2.val;
            if (carry) {
                carry = false;
                temp++;
            }
            if (temp > 9) {
                carry = true;
                ListNode newNode = new ListNode(temp - 10);
                curr.next = newNode;
                curr = newNode;
            } else {
                ListNode newNode = new ListNode(temp);
                curr.next = newNode;
                curr = newNode;
            }
            temp1 = temp1.next;
            temp2 = temp2.next;
        }
        while (temp1 != null) {
            if (carry) {
                if (temp1.val == 9) {
                    ListNode newNode = new ListNode(0);
                    curr.next = newNode;
                    curr = newNode;
                    temp1 = temp1.next;
                } else {
                    ListNode newNode = new ListNode(temp1.val + 1);
                    curr.next = newNode;
                    curr = newNode;
                    temp1 = temp1.next;
                    carry = false;
                }
            } else {
                ListNode newNode = new ListNode(temp1.val);
                curr.next = newNode;
                curr = newNode;
                temp1 = temp1.next;
            }
        }
        while (temp2 != null) {
            if (carry) {
                if (temp2.val == 9) {
                    ListNode newNode = new ListNode(0);
                    curr.next = newNode;
                    curr = newNode;
                    temp2 = temp2.next;
                } else {
                    ListNode newNode = new ListNode(temp2.val + 1);
                    curr.next = newNode;
                    curr = newNode;
                    temp2 = temp2.next;
                    carry = false;
                }
            } else {
                ListNode newNode = new ListNode(temp2.val);
                curr.next = newNode;
                curr = newNode;
                temp2 = temp2.next;
            }
        }
        if (carry) {
            ListNode newNode = new ListNode(1);
            curr.next = newNode;
            curr = newNode;
        }
        return head.next;
    }
}
