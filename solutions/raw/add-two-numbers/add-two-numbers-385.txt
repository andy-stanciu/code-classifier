/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // A dummy head to simplify code
        ListNode dummyHead = new ListNode(0);
        // Pointer to build the new list
        ListNode current = dummyHead;
        // Variable to store carry
        int carry = 0;
        while (l1 != null || l2 != null || carry != 0) {
            // Start with carry
            int sum = carry;
            if (l1 != null) {
                // Add l1\'s value if l1 is not null
                sum += l1.val;
                // Move to the next node
                l1 = l1.next;
            }
            if (l2 != null) {
                // Add l2\'s value if l2 is not null
                sum += l2.val;
                // Move to the next node
                l2 = l2.next;
            }
            // Update carry for next iteration
            carry = sum / 10;
            // Create a new node with the sum\'s digit
            current.next = new ListNode(sum % 10);
            // Move to the next node in the result list
            current = current.next;
        }
        // Return the next of dummy head which is the actual start of the result list
        return dummyHead.next;
    }
}
