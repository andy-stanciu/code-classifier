class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] pre : prerequisites) {
            int u = pre[0];
            int v = pre[1];
            graph.get(v).add(u);
        }
        int[] visited = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (!dfs(graph, visited, i)) {
                return false;
            }
        }
        return true;
    }

    public boolean dfs(List<List<Integer>> graph, int[] visited, int node) {
        if (visited[node] == 1) {
            // A cycle is detected
            return false;
        }
        if (visited[node] == 2) {
            // Already fully visited, skip it
            return true;
        }
        // Mark the course as being visited
        visited[node] = 1;
        // Visit all the neighboring courses
        for (int neighbor : graph.get(node)) {
            if (!dfs(graph, visited, neighbor)) {
                return false;
            }
        }
        visited[node] = 2;
        return true;
    }
}
