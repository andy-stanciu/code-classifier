class Solution {

    public boolean canFinish(int V, int[][] graph) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < graph.length; i++) {
            adj.get(graph[i][0]).add(graph[i][1]);
        }
        int[] inDeg = new int[V];
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < V; i++) {
            for (int it : adj.get(i)) {
                inDeg[it]++;
            }
        }
        for (int i = 0; i < V; i++) {
            if (inDeg[i] == 0)
                q.add(i);
        }
        int count = 0;
        while (!q.isEmpty()) {
            int node = q.poll();
            count++;
            for (int it : adj.get(node)) {
                inDeg[it]--;
                if (inDeg[it] == 0)
                    q.add(it);
            }
        }
        return count == V;
    }
}
