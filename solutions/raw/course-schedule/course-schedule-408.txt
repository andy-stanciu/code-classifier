class Solution {

    public boolean canFinish(int n, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList();
        for (int i = 0; i < n; i++) adj.add(new ArrayList());
        for (int[] prereq : prerequisites) {
            adj.get(prereq[1]).add(prereq[0]);
        }
        int[] vis = new int[n];
        for (int i = 0; i < n; i++) {
            if (cycleCheck(i, adj, vis))
                return false;
        }
        return true;
    }

    private boolean cycleCheck(int i, List<List<Integer>> adj, int[] vis) {
        vis[i] = 2;
        for (int neighbor : adj.get(i)) {
            if (vis[neighbor] == 0) {
                if (cycleCheck(neighbor, adj, vis))
                    return true;
            } else if (vis[neighbor] == 2)
                return true;
        }
        vis[i] = 1;
        return false;
    }
}
