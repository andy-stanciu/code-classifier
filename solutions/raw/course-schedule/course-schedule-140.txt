class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        int[] visited = new int[numCourses];
        int[] path = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<Integer>());
        }
        for (int[] prerequisite : prerequisites) {
            adj.get(prerequisite[1]).add(prerequisite[0]);
        }
        for (int i = 0; i < numCourses; i++) {
            if (visited[i] == 0) {
                if (dfs(i, adj, visited, path))
                    return false;
            }
        }
        return true;
    }

    public boolean dfs(int node, ArrayList<ArrayList<Integer>> adj, int[] visited, int[] path) {
        visited[node] = 1;
        path[node] = 1;
        for (Integer i : adj.get(node)) {
            if (visited[i] == 0) {
                if (dfs(i, adj, visited, path)) {
                    return true;
                }
            } else if (path[i] == 1) {
                return true;
            }
        }
        path[node] = 0;
        return false;
    }
}
