class Solution {

    public boolean canFinish(int n, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        // Fill the adjacency list with the prerequisite pairs
        for (int[] prerequisite : prerequisites) {
            adj.get(prerequisite[1]).add(prerequisite[0]);
        }
        if (detectCycle(adj, n)) {
            return false;
        }
        return true;
    }

    public boolean detectCycle(ArrayList<ArrayList<Integer>> adj, int n) {
        int[] indegree = new int[n];
        int count = 0;
        Queue<Integer> q = new LinkedList<>();
        //populate indegree array
        for (int i = 0; i < n; i++) {
            for (int it : adj.get(i)) {
                indegree[it]++;
            }
        }
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        while (!q.isEmpty()) {
            int node = q.poll();
            count++;
            for (int neighbour : adj.get(node)) {
                indegree[neighbour]--;
                if (indegree[neighbour] == 0) {
                    q.add(neighbour);
                }
            }
        }
        if (n != count) {
            return true;
        }
        return false;
    }
}
