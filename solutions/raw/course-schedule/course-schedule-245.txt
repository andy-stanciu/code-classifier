class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        //  Cycle Detection using BFS
        ArrayList<ArrayList<Integer>> courseList = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            courseList.add(new ArrayList<>());
        }
        int[] indegree = new int[numCourses];
        Arrays.fill(indegree, 0);
        for (int i = 0; i < prerequisites.length; i++) {
            int start = prerequisites[i][1];
            int end = prerequisites[i][0];
            indegree[end]++;
            courseList.get(start).add(end);
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                queue.add(i);
            }
        }
        int ans = 0;
        while (!queue.isEmpty()) {
            int top = queue.poll();
            ans++;
            for (int node : courseList.get(top)) {
                indegree[node]--;
                if (indegree[node] == 0) {
                    queue.add(node);
                }
            }
        }
        return ans == numCourses;
    }
}
