class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] neighbours : prerequisites) {
            adj.get(neighbours[0]).add(neighbours[1]);
        }
        int[] dependencies = new int[numCourses];
        Queue<Integer> q = new LinkedList<>();
        int count = 0;
        for (int i = 0; i < prerequisites.length; i++) {
            dependencies[prerequisites[i][1]]++;
        }
        for (int i = 0; i < numCourses; i++) {
            if (dependencies[i] == 0) {
                q.add(i);
            }
        }
        while (!q.isEmpty()) {
            int node = q.poll();
            for (int n : adj.get(node)) {
                if (--dependencies[n] == 0)
                    q.add(n);
            }
            count++;
        }
        return count == numCourses;
    }
}
