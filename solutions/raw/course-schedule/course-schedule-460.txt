class Solution {

    private List<List<Integer>> courseGraph = new ArrayList<>();

    private int[] visited;

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if (prerequisites.length == 0)
            return true;
        visited = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            courseGraph.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            int dependentCourse = prerequisites[i][0];
            int startCourse = prerequisites[i][1];
            courseGraph.get(startCourse).add(dependentCourse);
        }
        for (int i = 0; i < numCourses; i++) {
            if (!canBeFinished(i)) {
                return false;
            }
        }
        return true;
    }

    private boolean canBeFinished(int course) {
        visited[course] = 1;
        for (int dependentCourse : courseGraph.get(course)) {
            if (visited[dependentCourse] == 1) {
                return false;
            }
            if (visited[dependentCourse] == 0) {
                if (!canBeFinished(dependentCourse)) {
                    return false;
                }
            }
        }
        visited[course] = 2;
        return true;
    }
}
