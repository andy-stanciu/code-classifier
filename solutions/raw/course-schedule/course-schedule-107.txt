class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if (prerequisites.length == 0 || numCourses == 1)
            return true;
        int[] indegree = new int[numCourses];
        List<Integer>[] adj = new List[numCourses];
        for (int i = 0; i < numCourses; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int[] pre : prerequisites) {
            indegree[pre[0]]++;
            adj[pre[1]].add(pre[0]);
        }
        // Queue<Integer> queue=new LinkedList<>();
        Deque<Integer> queue = new ArrayDeque<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0)
                queue.offer(i);
        }
        //to count number of courses covered
        int courses = 0;
        while (!queue.isEmpty()) {
            int cur_node = queue.poll();
            courses++;
            for (Integer neighbour : adj[cur_node]) {
                indegree[neighbour]--;
                if (indegree[neighbour] == 0)
                    queue.offer(neighbour);
            }
        }
        return courses == numCourses;
    }
}
