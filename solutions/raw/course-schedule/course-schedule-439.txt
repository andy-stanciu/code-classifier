class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<Integer>[] graph = new ArrayList[numCourses];
        for (int i = 0; i < numCourses; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            int source = prerequisites[i][1];
            int dest = prerequisites[i][0];
            graph[source].add(dest);
        }
        boolean[] visited = new boolean[numCourses];
        boolean[] stk = new boolean[numCourses];
        for (int i = 0; i < graph.length; i++) {
            if (!visited[i] && isCycle(graph, i, visited, stk))
                return false;
        }
        return true;
    }

    public boolean isCycle(ArrayList<Integer>[] graph, int curr, boolean[] visited, boolean[] stk) {
        visited[curr] = true;
        stk[curr] = true;
        for (int i = 0; i < graph[curr].size(); i++) {
            if (stk[graph[curr].get(i)])
                return true;
            else if (!visited[graph[curr].get(i)] && isCycle(graph, graph[curr].get(i), visited, stk))
                return true;
        }
        stk[curr] = false;
        return false;
    }
}
