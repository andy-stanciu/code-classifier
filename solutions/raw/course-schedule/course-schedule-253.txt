class Solution {

    List<List<Integer>> adj = new ArrayList<>();

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        for (int i = 0; i < numCourses; i++) adj.add(new LinkedList<>());
        for (int i = 0; i < prerequisites.length; i++) adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        boolean[] visited = new boolean[numCourses];
        boolean[] recStack = new boolean[numCourses];
        for (int i = 0; i < numCourses; i++) if (isCyclic(i, visited, recStack))
            return false;
        return true;
    }

    boolean isCyclic(int i, boolean[] visited, boolean[] recStack) {
        if (recStack[i])
            return true;
        if (visited[i])
            return false;
        visited[i] = true;
        recStack[i] = true;
        List<Integer> children = adj.get(i);
        for (Integer c : children) if (isCyclic(c, visited, recStack))
            return true;
        recStack[i] = false;
        return false;
    }
}
