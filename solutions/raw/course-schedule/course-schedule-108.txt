class Solution {

    static class Vertex {

        String color;

        ArrayList<Integer> neighbours;

        Vertex() {
            this.color = "white";
            this.neighbours = new ArrayList<Integer>();
        }
    }

    private static boolean dfsVisit(Vertex[] graph, int curr, boolean[] recStack) {
        //just visited
        graph[curr].color = "grey";
        recStack[curr] = true;
        for (int i = 0; i < graph[curr].neighbours.size(); i++) {
            int n = graph[curr].neighbours.get(i);
            if (//unvisited
            graph[n].color.equals("white") && dfsVisit(graph, n, recStack)) {
                return true;
            } else if (//neighbour already in recStack-->condition for cycle detection
            recStack[n]) {
                return true;
            }
        }
        graph[curr].color = "black";
        recStack[curr] = false;
        return false;
    }

    private static void createGraph(Vertex[] graph, int[][] prerequisites) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new Vertex();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            int dest = prerequisites[i][0];
            int src = prerequisites[i][1];
            graph[src].neighbours.add(dest);
        }
    }

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Vertex[] graph = new Vertex[numCourses];
        createGraph(graph, prerequisites);
        boolean[] recStack = new boolean[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (graph[i].color.equals("white") && dfsVisit(graph, i, recStack)) {
                // if cycle detected then return false
                return false;
                //as it is not possible to complete all the courses
            }
        }
        //cycle not detected so possible to complete all the courses
        return true;
    }
}
