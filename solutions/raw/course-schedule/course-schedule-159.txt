class Solution {

    // Function to perform topological sort and check if all courses can be completed
    public boolean topologicalSortCheck(Map<Integer, List<Integer>> adj, int n, int[] indegree) {
        // Queue to process courses with indegree 0
        Queue<Integer> queue = new LinkedList<>();
        // Count of courses that can be completed
        int count = 0;
        // Add all courses with indegree 0 to the queue
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                count++;
                // Add course to queue
                queue.offer(i);
            }
        }
        // Process the courses in the queue
        while (!queue.isEmpty()) {
            // Get a course from the queue
            int u = queue.poll();
            // Process all the neighboring courses of \'u\'
            for (int v : adj.getOrDefault(u, new ArrayList<>())) {
                // Reduce indegree of neighbor course
                indegree[v]--;
                // If indegree of neighbor course becomes 0, add it to the queue
                if (indegree[v] == 0) {
                    count++;
                    // Add neighbor course to queue
                    queue.offer(v);
                }
            }
        }
        // If all courses are processed, return true (no cycle detected)
        return count == n;
    }

    // Main function to check if it\'s possible to finish all courses
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        // Adjacency list for graph
        Map<Integer, List<Integer>> adj = new HashMap<>();
        // Array to track the indegree of each course
        int[] indegree = new int[numCourses];
        // Build the adjacency list and update indegree of each course
        for (int[] pair : prerequisites) {
            // Course \'a\' that depends on course \'b\'
            int a = pair[0];
            // Prerequisite course \'b\'
            int b = pair[1];
            // Add the edge b -> a in the graph
            adj.computeIfAbsent(b, k -> new ArrayList<>()).add(a);
            // Increment indegree of course \'a\'
            indegree[a]++;
        }
        // Perform topological sort to detect if a cycle is present
        return topologicalSortCheck(adj, numCourses, indegree);
    }
}
