class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList[] list = new ArrayList[numCourses];
        for (int i = 0; i < numCourses; i++) {
            list[i] = new ArrayList<>();
        }
        for (int[] preQ : prerequisites) {
            list[preQ[0]].add(preQ[1]);
        }
        for (int i = 0; i < numCourses; i++) {
            if (isCircle(list, i, new HashSet<>())) {
                return false;
            }
        }
        return true;
    }

    public boolean isCircle(ArrayList[] list, int course, HashSet<Integer> set) {
        if (set.contains(course)) {
            return true;
        }
        if (list[course].size() == 0) {
            return false;
        }
        set.add(course);
        for (int i = 0; i < list[course].size(); ++i) {
            if (isCircle(list, (int) list[course].get(i), set))
                return true;
        }
        set.remove(course);
        list[course] = new ArrayList<>();
        return false;
    }
}
// DFS and BFS
// [[1,2],[0,1][2,1]] N = 2
// 1 - 2
// 0 - 1
// 2 - 1
// -- Circle
