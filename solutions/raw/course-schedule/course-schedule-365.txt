class Solution {

    public boolean canFinish(int numCourses, int[][] pre) {
        int[] indegree = new int[numCourses];
        Map<Integer, List<Integer>> g = new HashMap<>();
        for (int u = 0; u < numCourses; u++) {
            g.put(u, new ArrayList<>());
        }
        for (int i = 0; i < pre.length; i++) {
            int u = pre[i][0], v = pre[i][1];
            g.get(u).add(v);
            indegree[v]++;
        }
        Queue<Integer> q = new LinkedList<>();
        int count = 0;
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                q.add(i);
                indegree[i] = -1;
                count++;
            }
        }
        while (!q.isEmpty()) {
            int u = q.remove();
            for (int neighborOfU : g.get(u)) {
                if (indegree[neighborOfU] != -1) {
                    indegree[neighborOfU]--;
                    if (indegree[neighborOfU] == 0) {
                        q.add(neighborOfU);
                        indegree[neighborOfU] = -1;
                        count++;
                    }
                }
            }
        }
        return count == numCourses;
    }
}
