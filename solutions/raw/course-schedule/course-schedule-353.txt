class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int n = numCourses;
        ArrayList<Edge>[] graph = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            for (int j = 0; j < prerequisites[i].length; j++) {
                int p = prerequisites[i][0];
                int q = prerequisites[i][1];
                graph[p].add(new Edge(p, q));
            }
        }
        boolean[] vis = new boolean[n];
        boolean[] rec = new boolean[n];
        for (int i = 0; i < n; i++) {
            if (!vis[i]) {
                if (isCycleDirected(graph, vis, rec, i)) {
                    return false;
                }
            }
        }
        return true;
    }

    public static boolean isCycleDirected(ArrayList<Edge>[] graph, boolean[] vis, boolean[] rec, int curr) {
        vis[curr] = true;
        rec[curr] = true;
        for (int i = 0; i < graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);
            if (rec[e.dest])
                return true;
            else if (!vis[e.dest]) {
                if (isCycleDirected(graph, vis, rec, e.dest)) {
                    return true;
                }
            }
        }
        rec[curr] = false;
        return false;
    }
}

class Edge {

    int src;

    int dest;

    Edge(int src, int dest) {
        this.src = src;
        this.dest = dest;
    }
}
