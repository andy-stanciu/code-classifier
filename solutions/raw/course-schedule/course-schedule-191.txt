class Solution {

    public static boolean topologicalSort(ArrayList<ArrayList<Integer>> adj, int numCourses, int[] inDegree) {
        Queue<Integer> pq = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (inDegree[i] == 0) {
                pq.add(i);
            }
        }
        int count = 0;
        while (!pq.isEmpty()) {
            int n = pq.poll();
            count++;
            for (Integer a : adj.get(n)) {
                inDegree[a]--;
                if (inDegree[a] == 0) {
                    pq.add(a);
                }
            }
        }
        if (count == numCourses) {
            return true;
        }
        return false;
    }

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        //make adj
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        int[] inDegree = new int[numCourses];
        for (int[] vector : prerequisites) {
            adj.get(vector[1]).add(vector[0]);
            inDegree[vector[0]]++;
        }
        return topologicalSort(adj, numCourses, inDegree);
    }
}
