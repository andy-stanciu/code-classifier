class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        boolean[] pathVisited = new boolean[numCourses];
        boolean[] visited = new boolean[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (dfs(i, adj, pathVisited, visited)) {
                return false;
            }
        }
        return true;
    }

    private boolean dfs(int idx, List<List<Integer>> adj, boolean[] pathVisited, boolean[] visited) {
        if (pathVisited[idx])
            return true;
        if (visited[idx])
            return false;
        pathVisited[idx] = true;
        visited[idx] = true;
        for (int n : adj.get(idx)) {
            if (pathVisited[n])
                return true;
            if (visited[n] == false) {
                if (dfs(n, adj, pathVisited, visited))
                    return true;
            }
        }
        pathVisited[idx] = false;
        return false;
    }
}
