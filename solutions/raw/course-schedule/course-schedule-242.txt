class Solution {

    public boolean canFinish(int n, int[][] nums) {
        int[] topoSort = new int[n];
        List<List<Integer>> adjList = new ArrayList<>();
        int[] indegree = new int[n];
        for (int i = 0; i < n; i++) {
            adjList.add(new ArrayList<>());
        }
        for (int i = 0; i < nums.length; i++) {
            indegree[nums[i][0]]++;
            adjList.get(nums[i][1]).add(nums[i][0]);
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        int i = 0;
        while (!q.isEmpty()) {
            int node = q.poll();
            topoSort[i] = node;
            for (Integer it : adjList.get(node)) {
                indegree[it]--;
                if (indegree[it] == 0) {
                    q.add(it);
                }
            }
            i++;
        }
        if (i != n) {
            return false;
        }
        return true;
    }
}
