class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        boolean[] isVisited = new boolean[numCourses];
        boolean[] isVisitedInCurrentCycleCheck = new boolean[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (!isVisited[i]) {
                if (isCyclic(adj, i, isVisited, isVisitedInCurrentCycleCheck)) {
                    return false;
                }
            }
        }
        return true;
    }

    private boolean isCyclic(List<List<Integer>> adj, int curr, boolean[] isVisited, boolean[] isVisitedInCurrentCycleCheck) {
        isVisited[curr] = true;
        isVisitedInCurrentCycleCheck[curr] = true;
        for (int i = 0; i < adj.get(curr).size(); i++) {
            if (!isVisited[adj.get(curr).get(i)] && isCyclic(adj, adj.get(curr).get(i), isVisited, isVisitedInCurrentCycleCheck))
                return true;
            else if (isVisitedInCurrentCycleCheck[adj.get(curr).get(i)])
                return true;
        }
        isVisitedInCurrentCycleCheck[curr] = false;
        return false;
    }
}
