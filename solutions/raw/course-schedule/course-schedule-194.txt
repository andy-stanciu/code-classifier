class Solution {

    enum Status {

        UNVISITED, VISITING, VISITED
    }

    boolean isCyclic = false;

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int n = numCourses;
        List<Integer>[] adj = new List[n];
        Status[] visits = new Status[n];
        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<>();
            visits[i] = Status.UNVISITED;
        }
        for (int[] preq : prerequisites) {
            adj[preq[0]].add(preq[1]);
        }
        for (int i = 0; i < n; i++) {
            if (visits[i] == Status.UNVISITED) {
                detectCycle(visits, adj, i);
            }
        }
        return !isCyclic;
    }

    private void detectCycle(Status[] visits, List<Integer>[] adj, int x) {
        visits[x] = Status.VISITING;
        for (Integer n : adj[x]) {
            if (visits[n] == Status.UNVISITED)
                detectCycle(visits, adj, n);
            else if (visits[n] == Status.VISITING) {
                isCyclic = true;
            }
        }
        visits[x] = Status.VISITED;
    }
}
