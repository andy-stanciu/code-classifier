class Solution {

    public boolean canFinish(int numCourses, int[][] t) {
        ArrayList<ArrayList<Integer>> a = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            a.add(new ArrayList<Integer>());
        }
        for (int i = 0; i < t.length; i++) {
            int course = t[i][0];
            int pre = t[i][1];
            a.get(pre).add(course);
        }
        int[] visited = new int[numCourses];
        int[] path = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (visited[i] == 0) {
                if (dfs(i, path, visited, a) == false)
                    return false;
            }
        }
        return true;
    }

    boolean dfs(int i, int[] path, int[] visited, ArrayList<ArrayList<Integer>> a) {
        visited[i] = 1;
        path[i] = 1;
        for (Integer x : a.get(i)) {
            if (path[x] == 1)
                return false;
            else if (visited[x] == 0)
                if (dfs(x, path, visited, a) == false)
                    return false;
        }
        path[i] = 0;
        return true;
    }
}
