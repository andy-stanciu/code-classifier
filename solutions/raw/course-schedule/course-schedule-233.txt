class Solution {

    // Toposort - DFS - iterative
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int n = numCourses;
        ArrayList<Integer>[] graph = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] p : prerequisites) {
            graph[p[1]].add(p[0]);
        }
        int[] vis = new int[n];
        for (int i = 0; i < n; i++) {
            if (vis[i] == 0 && dfs_iscyclic(i, graph, vis)) {
                return false;
            }
        }
        return true;
    }

    private boolean dfs_iscyclic(int startNode, ArrayList<Integer>[] graph, int[] vis) {
        Stack<Integer> stack = new Stack<>();
        stack.push(startNode);
        while (!stack.isEmpty()) {
            int node = stack.peek();
            if (vis[node] == 0) {
                // Mark as visiting
                vis[node] = 1;
                for (int neigh : graph[node]) {
                    if (vis[neigh] == 0) {
                        stack.push(neigh);
                    } else if (vis[neigh] == 1) {
                        // If the neighbor is in the visiting state, we have a cycle
                        return true;
                    }
                }
            } else if (vis[node] == 1) {
                // Mark as visited
                vis[node] = 2;
                stack.pop();
            } else {
                stack.pop();
            }
        }
        return false;
    }
}
