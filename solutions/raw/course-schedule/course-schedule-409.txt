class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<Integer>[] graph = new ArrayList[numCourses];
        for (int i = 0; i < numCourses; ++i) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            graph[prerequisites[i][0]].add(prerequisites[i][1]);
        }
        int[] visited = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (visited[i] == 0) {
                if (iscycle(graph, visited, i)) {
                    return false;
                }
            }
        }
        return true;
    }

    public static boolean iscycle(ArrayList<Integer>[] graph, int[] visited, int curr) {
        if (visited[curr] == 2) {
            return true;
        }
        visited[curr] = 2;
        for (int i = 0; i < graph[curr].size(); i++) {
            if (visited[graph[curr].get(i)] != 1) {
                if (iscycle(graph, visited, graph[curr].get(i))) {
                    return true;
                }
            }
        }
        visited[curr] = 1;
        return false;
    }
}
