class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        // Your Code goes here
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        Queue<Integer> q = new LinkedList<>();
        int[] indegree = new int[numCourses];
        // evaluating the value of indegree of everyNode
        for (int i = 0; i < numCourses; i++) {
            for (Integer it : adj.get(i)) {
                indegree[it]++;
            }
        }
        // Put the nodes which has indegree ==0
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                q.offer(i);
            }
        }
        int[] topo = new int[numCourses];
        int index = 0;
        while (!q.isEmpty()) {
            int node = q.poll();
            topo[index] = node;
            index++;
            for (Integer it : adj.get(node)) {
                indegree[it]--;
                if (indegree[it] == 0) {
                    q.offer(it);
                }
            }
        }
        if (topo.length == index)
            return topo;
        return new int[0];
    }
}
