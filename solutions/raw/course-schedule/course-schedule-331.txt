class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<Integer>[] indgree = new List[numCourses];
        List<Integer>[] graph = new List[numCourses];
        int count = 0;
        for (int i = 0; i < numCourses; i++) {
            graph[i] = new ArrayList<>();
            indgree[i] = new ArrayList<>();
        }
        for (int[] arr : prerequisites) {
            graph[arr[1]].add(arr[0]);
            indgree[arr[0]].add(arr[1]);
        }
        Queue<Integer> que = new LinkedList<>();
        for (int i = 0; i < indgree.length; i++) {
            if (indgree[i].size() == 0) {
                que.add(i);
            }
        }
        while (!que.isEmpty()) {
            Integer node = que.remove();
            count++;
            for (int nextNode : graph[node]) {
                indgree[nextNode].remove(node);
                if (indgree[nextNode].size() == 0) {
                    que.add(nextNode);
                }
            }
        }
        return count == numCourses;
    }
}
