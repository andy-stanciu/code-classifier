class Solution {

    public boolean dfs(int node, boolean[] vis, boolean[] pathVis, ArrayList<ArrayList<Integer>> adj) {
        vis[node] = true;
        pathVis[node] = true;
        for (int it : adj.get(node)) {
            if (vis[it] == false) {
                if (dfs(it, vis, pathVis, adj))
                    return true;
            } else if (pathVis[it] == true) {
                return true;
            }
        }
        pathVis[node] = false;
        return false;
    }

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<Integer>());
        }
        for (int[] it : prerequisites) {
            int source = it[1];
            int destination = it[0];
            adj.get(source).add(destination);
        }
        boolean[] vis = new boolean[numCourses];
        boolean[] pathVis = new boolean[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (vis[i] == false) {
                if (dfs(i, vis, pathVis, adj))
                    return false;
            }
        }
        return true;
    }
}
