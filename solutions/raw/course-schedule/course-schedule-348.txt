class Solution {

    public boolean canFinish(int numCourses, int[][] prereq) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new LinkedList<>());
        }
        for (int i = 0; i < prereq.length; i++) {
            adj.get(prereq[i][0]).add(prereq[i][1]);
        }
        int[] visitedCourse = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (isCyclic(adj, visitedCourse, i)) {
                return false;
            }
        }
        return true;
    }

    public static boolean isCyclic(List<List<Integer>> adj, int[] visited, int curr) {
        if (visited[curr] == 2) {
            return true;
        }
        visited[curr] = 2;
        for (int i = 0; i < adj.get(curr).size(); i++) {
            if (visited[adj.get(curr).get(i)] != 1) {
                if (isCyclic(adj, visited, adj.get(curr).get(i))) {
                    return true;
                }
            }
        }
        visited[curr] = 1;
        return false;
    }
}
