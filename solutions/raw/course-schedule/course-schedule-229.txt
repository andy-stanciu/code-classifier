class Solution {

    //detect cycle in directed graph
    private boolean isCyclic(int n, ArrayList<Integer>[] graph, int node, int[] vis, int[] pathvis) {
        if (vis[node] == 1)
            return true;
        if (graph[node] == null)
            return false;
        vis[node] = 1;
        pathvis[node] = 1;
        for (int next : graph[node]) {
            if (vis[next] == 0 && isCyclic(n, graph, next, vis, pathvis))
                return true;
            if (pathvis[next] == 1)
                return true;
        }
        pathvis[node] = 0;
        return false;
    }

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<Integer>[] graph = new ArrayList[numCourses];
        for (int i = 0; i < numCourses; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] p : prerequisites) {
            graph[p[1]].add(p[0]);
        }
        int[] vis = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            int[] pathvis = new int[numCourses];
            if (vis[i] == 0 && isCyclic(numCourses, graph, i, vis, pathvis)) {
                return false;
            }
        }
        return true;
    }
}
