class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        //using khans algorithm--BFS--Queue
        //FIND the indegree
        int[] indeg = new int[numCourses];
        for (int i = 0; i < adj.size(); i++) {
            for (int it : adj.get(i)) {
                indeg[it]++;
            }
        }
        //add the nodes whose indeg was 0
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < indeg.length; i++) {
            if (indeg[i] == 0)
                q.add(i);
        }
        int c = 0;
        while (!q.isEmpty()) {
            int ele = q.remove();
            c++;
            for (int adjnode : adj.get(ele)) {
                indeg[adjnode]--;
                if (indeg[adjnode] == 0) {
                    q.add(adjnode);
                }
            }
        }
        if (c == numCourses) {
            return true;
        }
        return false;
    }
}
