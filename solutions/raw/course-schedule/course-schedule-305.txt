class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<Integer>[] graph = new ArrayList[numCourses];
        for (int i = 0; i < numCourses; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] prerequisite : prerequisites) {
            int course = prerequisite[0];
            int prereq = prerequisite[1];
            graph[course].add(prereq);
        }
        boolean[] vis = new boolean[graph.length];
        boolean[] dfsvis = new boolean[graph.length];
        for (int i = 0; i < graph.length; i++) {
            if (!vis[i]) {
                if (courseSchedule(vis, dfsvis, graph, i)) {
                    return false;
                }
            }
        }
        return true;
    }

    public static boolean courseSchedule(boolean[] vis, boolean[] dfsvis, ArrayList<Integer>[] graph, int curr) {
        vis[curr] = true;
        dfsvis[curr] = true;
        for (int i = 0; i < graph[curr].size(); i++) {
            int e = graph[curr].get(i);
            if (!vis[e]) {
                if (courseSchedule(vis, dfsvis, graph, e)) {
                    return true;
                }
            } else if (vis[e] && dfsvis[e]) {
                return true;
            }
        }
        dfsvis[curr] = false;
        return false;
    }
}
