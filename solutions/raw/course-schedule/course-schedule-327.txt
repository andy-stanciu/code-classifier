class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adjList.add(new ArrayList<>());
        }
        for (// [[1,0],[0,1]]
        // [[1,0],[0,1]]
        int[] val : prerequisites) {
            adjList.get(val[0]).add(val[1]);
        }
        int[] vis = new int[numCourses];
        Stack<Integer> st = new Stack<>();
        for (int i = 0; i < numCourses; i++) {
            if (vis[i] == 0) {
                if (!dfs(i, vis, st, adjList))
                    return false;
            }
        }
        return true;
    }

    private boolean dfs(int node, int[] vis, Stack<Integer> st, List<List<Integer>> adjList) {
        // Mark as visiting
        vis[node] = 1;
        for (int neighbor : adjList.get(node)) {
            // Cycle detected
            if (vis[neighbor] == 1)
                return false;
            if (vis[neighbor] == 0 && !dfs(neighbor, vis, st, adjList)) {
                // Cycle detected
                return false;
            }
        }
        // Mark as visited
        vis[node] = 2;
        st.push(node);
        return true;
    }
}
