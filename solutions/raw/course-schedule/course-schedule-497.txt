class Solution {

    HashMap<Integer, List<Integer>> hm;

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        this.hm = new HashMap<>();
        for (int i = 0; i < prerequisites.length; i++) {
            List<Integer> l1 = hm.getOrDefault(prerequisites[i][0], new ArrayList<>());
            l1.add(prerequisites[i][1]);
            hm.put(prerequisites[i][0], l1);
        }
        for (int i = 0; i < numCourses; i++) {
            boolean[] vis = new boolean[numCourses];
            if (!dfs(i, prerequisites, vis)) {
                return false;
            }
        }
        return true;
    }

    public boolean dfs(int a, int[][] graph, boolean[] vis) {
        if (vis[a] == true) {
            return false;
        }
        if (hm.get(a) == null) {
            return true;
        }
        for (int i = 0; i < hm.get(a).size(); i++) {
            vis[a] = true;
            if (!dfs(hm.get(a).get(i), graph, vis)) {
                return false;
            }
        }
        vis[a] = false;
        return true;
    }
}
