class Solution {

    private boolean Dfs(int node, boolean[] pathvis, ArrayList<ArrayList<Integer>> adj, boolean[] vis) {
        vis[node] = true;
        pathvis[node] = true;
        for (int i : adj.get(node)) {
            if (vis[i] == false) {
                if (Dfs(i, pathvis, adj, vis))
                    return true;
            } else if (pathvis[i] == true) {
                return true;
            }
        }
        pathvis[node] = false;
        return false;
    }

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        int m = prerequisites.length;
        for (int i = 0; i < m; i++) {
            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        boolean[] pathvis = new boolean[numCourses];
        boolean[] vis = new boolean[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (vis[i] == false) {
                if (Dfs(i, pathvis, adj, vis)) {
                    return false;
                }
            }
        }
        return true;
    }
}
