class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        return cycle(numCourses, adj);
    }

    static boolean cycle(int v, List<List<Integer>> adj) {
        Queue<Integer> q = new LinkedList<>();
        int[] indeg = new int[v];
        for (int i = 0; i < v; i++) {
            for (int it : adj.get(i)) {
                indeg[it]++;
            }
        }
        for (int i = 0; i < v; i++) {
            if (indeg[i] == 0)
                q.add(i);
        }
        int c = 0;
        while (!q.isEmpty()) {
            int n = q.poll();
            c++;
            for (int it : adj.get(n)) {
                indeg[it]--;
                if (indeg[it] == 0)
                    q.add(it);
            }
        }
        if (c < v)
            return false;
        return true;
    }
}
