class Solution {

    Map<Integer, List<Integer>> map = new HashMap<>();

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        for (int i = 0; i < numCourses; i++) {
            map.put(i, new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            map.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        int[] visited = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (!dfs(i, visited)) {
                return false;
            }
        }
        return true;
    }

    private boolean dfs(int course, int[] visited) {
        if (visited[course] == 1) {
            return false;
        }
        if (visited[course] == 2) {
            return true;
        }
        visited[course] = 1;
        for (int n : map.get(course)) {
            if (!dfs(n, visited)) {
                return false;
            }
        }
        visited[course] = 2;
        return true;
    }
}
