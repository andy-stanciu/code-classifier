class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int n = numCourses;
        int m = prerequisites.length;
        List<Integer>[] adj = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<Integer>();
        }
        int[] indegree = new int[n];
        for (int i = 0; i < m; i++) {
            int a = prerequisites[i][0];
            int b = prerequisites[i][1];
            adj[b].add(a);
            indegree[a]++;
        }
        Queue<Integer> q = new LinkedList<Integer>();
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0)
                q.add(i);
        }
        Stack<Integer> st = new Stack<Integer>();
        while (!q.isEmpty()) {
            int val = q.poll();
            st.push(val);
            for (int val2 : adj[val]) {
                indegree[val2]--;
                if (indegree[val2] == 0)
                    q.add(val2);
            }
        }
        if (st.size() == n)
            return true;
        else
            return false;
    }
}
