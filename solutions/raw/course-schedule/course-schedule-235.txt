class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        // prerequisites[i] = [ai, bi], you have to take bi
        // before take course ai.
        if (prerequisites.length == 0) {
            return true;
        }
        // indegree[] where indegree[x] store the number of egdes
        // going to x
        // adjacency list adj in which adj[x] contains all the neighbors
        // of vertex x.
        // doing bfs on every vertex that in-degree is 0 just like leaf node
        // keep adding new vertex that in-degree is 0 until queue is empty
        // numCourse = 3, pre = [[[1,0],[2,1]]
        // 0 -> 1 -> 2
        // indegree = [0,1,1]
        // adj = [[1], [2] []]
        int[] indegree = new int[numCourses];
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i += 1) {
            adj.add(new ArrayList<>());
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int[] pre : prerequisites) {
            indegree[pre[0]] += 1;
            // adding neighbors
            adj.get(pre[1]).add(pre[0]);
        }
        for (int i = 0; i < numCourses; i += 1) {
            if (indegree[i] == 0) {
                queue.add(i);
            }
        }
        int visited = 0;
        while (!queue.isEmpty()) {
            int curr = queue.poll();
            visited += 1;
            for (int neighbor : adj.get(curr)) {
                indegree[neighbor] -= 1;
                if (indegree[neighbor] == 0) {
                    queue.add(neighbor);
                }
            }
        }
        return visited == numCourses;
    }
}
