class Solution {

    // This is DFS solution, there was BFS solution in the submissions
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        // Create the adjacency list
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adjList.add(new ArrayList<>());
        }
        for (int[] prerequisite : prerequisites) {
            adjList.get(prerequisite[1]).add(prerequisite[0]);
        }
        // 0 = unvisited, 1 = visiting, 2 = visited
        int[] visited = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (hasCycle(i, adjList, visited)) {
                return false;
            }
        }
        return true;
    }

    private boolean hasCycle(int course, List<List<Integer>> adjList, int[] visited) {
        if (visited[course] == 1) {
            // Cycle detected
            return true;
        }
        if (visited[course] == 2) {
            // Already fully processed
            return false;
        }
        // Mark the course as visiting
        visited[course] = 1;
        for (int neighbor : adjList.get(course)) {
            if (hasCycle(neighbor, adjList, visited)) {
                return true;
            }
        }
        // Mark the course as visited
        visited[course] = 2;
        return false;
    }
}
