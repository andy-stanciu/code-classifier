class Solution {

    private boolean[] visited;

    private boolean[] onPath;

    private boolean hasCycle = false;

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<Integer>[] graph = buildGraph(numCourses, prerequisites);
        // DFS
        visited = new boolean[numCourses];
        onPath = new boolean[numCourses];
        for (int i = 0; i < numCourses; i++) {
            dfsCheckCycle(graph, i);
        }
        return !hasCycle;
        // Topo sort
        /**
         *        int[] inDegree = new int[numCourses];
         *        for(int i=0;i<numCourses;i++) {
         *            for(int to : graph[i]) {
         *                inDegree[to] ++;
         *            }
         *        }
         *
         *        Queue<Integer> queue = new LinkedList<>();
         *        for(int i=0;i<numCourses;i++) {
         *            if(inDegree[i] == 0) {
         *                queue.offer(i);
         *            }
         *        }
         *
         *        int countCourses = 0;
         *        while(!queue.isEmpty()) {
         *            int preCourse = queue.poll();
         *            countCourses ++;
         *
         *            for(int next : graph[preCourse]) {
         *                inDegree[next] --;
         *                if(inDegree[next] == 0) {
         *                    queue.offer(next);
         *                }
         *            }
         *        }
         *
         *        return countCourses == numCourses;
         */
    }

    private void dfsCheckCycle(List<Integer>[] graph, int node) {
        if (onPath[node]) {
            hasCycle = true;
        }
        if (onPath[node] || visited[node]) {
            return;
        }
        onPath[node] = true;
        visited[node] = true;
        for (int next : graph[node]) {
            dfsCheckCycle(graph, next);
        }
        onPath[node] = false;
    }

    private List<Integer>[] buildGraph(int numCourses, int[][] prerequisites) {
        List<Integer>[] graph = new ArrayList[numCourses];
        for (int i = 0; i < numCourses; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] pre : prerequisites) {
            int from = pre[1], to = pre[0];
            graph[from].add(to);
        }
        return graph;
    }
}
