class Solution {

    List<Integer>[] graph;

    boolean[] visited;

    boolean[] marked;

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        graph = new ArrayList[numCourses];
        visited = new boolean[numCourses];
        marked = new boolean[numCourses];
        for (int i = 0; i < numCourses; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            graph[prerequisites[i][0]].add(prerequisites[i][1]);
        }
        for (int i = 0; i < numCourses; i++) {
            if (!visited[i]) {
                if (isCycle(i)) {
                    return false;
                }
            }
        }
        return true;
    }

    private boolean isCycle(int i) {
        visited[i] = true;
        for (Integer j : graph[i]) {
            if (!visited[j]) {
                if (isCycle(j)) {
                    return true;
                }
            } else if (!marked[j]) {
                return true;
            }
        }
        marked[i] = true;
        return false;
    }
}
