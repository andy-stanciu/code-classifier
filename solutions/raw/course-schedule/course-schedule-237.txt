class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if (prerequisites.length == 0 || numCourses == 1)
            return true;
        List<Integer>[] adj = new ArrayList[numCourses];
        for (int i = 0; i < numCourses; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int[] prerequisite : prerequisites) {
            adj[prerequisite[0]].add(prerequisite[1]);
        }
        int[] visited = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (visited[i] == 0) {
                if (!dfs(i, visited, adj)) {
                    return false;
                }
            }
        }
        return true;
    }

    private boolean dfs(int node, int[] visited, List<Integer>[] adj) {
        // Cycle detected
        if (visited[node] == 1)
            return false;
        // Already visited and no cycle
        if (visited[node] == 2)
            return true;
        // Mark as visiting
        visited[node] = 1;
        for (int neighbor : adj[node]) {
            if (!dfs(neighbor, visited, adj)) {
                return false;
            }
        }
        // Mark as visited
        visited[node] = 2;
        return true;
    }
}
