class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int n = prerequisites.length;
        // Building InDegree and Adjacency List
        List<List<Integer>> adjList = new ArrayList<>();
        int[] inDegree = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            adjList.add(new ArrayList<>());
        }
        for (int i = 0; i < n; i++) {
            int course = prerequisites[i][0];
            int prerequisite = prerequisites[i][1];
            inDegree[course]++;
            adjList.get(prerequisite).add(course);
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (inDegree[i] == 0) {
                q.add(i);
            }
        }
        int count = 0;
        while (!q.isEmpty()) {
            int course = q.poll();
            count++;
            for (int neighbor : adjList.get(course)) {
                inDegree[neighbor]--;
                if (inDegree[neighbor] == 0) {
                    q.add(neighbor);
                }
            }
        }
        return count == numCourses;
    }
}
