class Solution {

    int[][] pre;

    int[] read;

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        read = new int[numCourses];
        pre = new int[numCourses][numCourses];
        for (int i = 0; i < prerequisites.length; i++) {
            pre[prerequisites[i][0]][0] = pre[prerequisites[i][0]][0] + 1;
            int curCount = pre[prerequisites[i][0]][0];
            pre[prerequisites[i][0]][curCount] = prerequisites[i][1];
        }
        for (int i = 0; i < numCourses; i++) {
            if (!findDependency(i)) {
                return false;
            }
        }
        return true;
    }

    private boolean findDependency(int curCourse) {
        if (read[curCourse] == 2)
            return true;
        if (read[curCourse] == 1)
            return false;
        int[] dependents = pre[curCourse];
        read[curCourse] = 1;
        for (int i = 1; i <= dependents[0]; i++) {
            if (!findDependency(dependents[i]))
                return false;
        }
        read[curCourse] = 2;
        return true;
    }
}
