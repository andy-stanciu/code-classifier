class Solution {

    HashMap<Integer, Set<Integer>> adj = new HashMap<>();

    Set<Integer> exploring = new HashSet<>();

    Set<Integer> visited = new HashSet<>();

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        for (int i = 0; i < numCourses; i++) {
            adj.put(i, new HashSet());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        for (int i = 0; i < numCourses; i++) {
            if (!visited.contains(i)) {
                boolean hasCycle = dfsDetectCycle(i);
                // if there is a cycle, can\'t have a topological ordering, thus can\'t finish all courses
                if (hasCycle)
                    return false;
            }
        }
        return true;
    }

    private boolean dfsDetectCycle(int n) {
        // if this node is been visited, there is no cycle
        if (visited.contains(n))
            return false;
        // if we are on a path and come across a node that is being explored, there is a cycle
        if (exploring.contains(n))
            return true;
        // mark this node as exploring
        exploring.add(n);
        //iterate through the edges
        for (int e : adj.get(n)) {
            if (!visited.contains(e)) {
                boolean hasCycle = dfsDetectCycle(e);
                if (hasCycle)
                    return true;
            }
        }
        // if we reach the end without finding any cycles, remove the node from exploring, and mark as visited
        exploring.remove(n);
        visited.add(n);
        return false;
    }
}
