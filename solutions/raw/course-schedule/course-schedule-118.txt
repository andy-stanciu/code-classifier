class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[] visited = new int[numCourses];
        int[] pathvisited = new int[numCourses];
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<Integer>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        for (int i = 0; i < numCourses; i++) {
            if (visited[i] == 0) {
                if (isCyclic(adj, visited, pathvisited, i)) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean isCyclic(List<List<Integer>> adj, int[] visited, int[] pathvisited, int node) {
        visited[node] = 1;
        pathvisited[node] = 1;
        for (Integer neigh : adj.get(node)) {
            if (visited[neigh] == 0) {
                if (isCyclic(adj, visited, pathvisited, neigh)) {
                    return true;
                }
            } else if (pathvisited[neigh] == 1) {
                return true;
            }
        }
        pathvisited[node] = 0;
        return false;
    }
}
