class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        //If we can finish all courses, we do not have a cycle, a linear orderering of courses(linearization) or topologcial ordering
        //first build a graph representation of the problem
        //courses - vertices ; relationship - edges
        List<List<Integer>> adj = new ArrayList<List<Integer>>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        //graph greated
        //for all unvisited nodes -- initialized as 0 automatically
        int[] visited = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (visited[i] == 0) {
                if (dfs(adj, i, visited)) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean dfs(List<List<Integer>> adj, int curr, int[] visited) {
        if (visited[curr] == 2) {
            return true;
        }
        //previsit
        visited[curr] = 2;
        //go through the neighbors for curr
        for (int i = 0; i < adj.get(curr).size(); i++) {
            int neighbor = adj.get(curr).get(i);
            if (visited[neighbor] != 1) {
                //explore the unvisited neighbor
                if (dfs(adj, adj.get(curr).get(i), visited)) {
                    return true;
                }
            }
        }
        //postvisit
        visited[curr] = 1;
        return false;
    }
}
