class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Map<Integer, List<Integer>> adjList = new HashMap<>();
        int[] indegrees = new int[numCourses];
        Arrays.fill(indegrees, 0);
        for (int[] prereq : prerequisites) {
            List<Integer> neighbors = adjList.getOrDefault(prereq[1], new ArrayList<>());
            neighbors.add(prereq[0]);
            adjList.put(prereq[1], neighbors);
            indegrees[prereq[0]]++;
        }
        Queue<Integer> qu = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegrees[i] == 0)
                qu.add(i);
        }
        while (!qu.isEmpty()) {
            Integer curr = qu.poll();
            for (Integer neighbor : adjList.getOrDefault(curr, new ArrayList<>())) {
                indegrees[neighbor]--;
                if (indegrees[neighbor] == 0) {
                    qu.add(neighbor);
                }
            }
        }
        int count = 0;
        for (int in : indegrees) {
            if (in == 0)
                count++;
        }
        return count == numCourses;
    }
}
