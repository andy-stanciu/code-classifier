class Solution {

    HashSet<Integer> seen;

    HashMap<Integer, List<Integer>> map;

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        seen = new HashSet<>();
        map = new HashMap<>();
        for (int[] array : prerequisites) {
            if (!map.containsKey(array[0])) {
                map.put(array[0], new ArrayList<>());
            }
            map.get(array[0]).add(array[1]);
        }
        for (int i = 0; i < numCourses; i++) {
            if (!seen.contains(i)) {
                if (dfs(i, new HashSet<>())) {
                    seen.add(i);
                }
            }
        }
        for (Map.Entry<Integer, List<Integer>> entry : map.entrySet()) {
            if (!seen.contains(entry.getKey())) {
                return false;
            }
        }
        return true;
    }

    private boolean dfs(int course, HashSet<Integer> set) {
        if (set.contains(course)) {
            return false;
        }
        set.add(course);
        List<Integer> prerequisites = map.getOrDefault(course, new ArrayList<>());
        if (prerequisites.isEmpty()) {
            seen.add(course);
            return true;
        }
        for (int n : prerequisites) {
            if (!seen.contains(n)) {
                if (dfs(n, set)) {
                    seen.add(n);
                }
            }
        }
        for (int x : prerequisites) {
            if (!seen.contains(x)) {
                return false;
            }
        }
        return true;
    }
}
