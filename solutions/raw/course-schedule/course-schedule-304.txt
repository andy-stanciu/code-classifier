class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int V = numCourses;
        Stack<Integer> st = new Stack<Integer>();
        int[] visited = new int[V];
        for (int i = 0; i < V; i++) {
            if (visited[i] == 0)
                if (dfs(i, visited, prerequisites, st) == false)
                    return false;
        }
        return true;
    }

    static boolean dfs(int i, int[] visited, int[][] prerequisites, Stack<Integer> st) {
        visited[i] = 1;
        for (int[] row : prerequisites) {
            if (row[0] == i) {
                if (visited[row[1]] == 1)
                    return false;
                if (visited[row[1]] == 0)
                    if (dfs(row[1], visited, prerequisites, st) == false)
                        return false;
            }
        }
        // Marking as done
        visited[i] = 2;
        st.push(i);
        return true;
    }
}
