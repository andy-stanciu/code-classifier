class Solution {

    List<Integer>[] adj;

    boolean[] vis;

    boolean[] rec;

    public boolean canFinish(int num, int[][] pre) {
        adj = new ArrayList[num];
        vis = new boolean[num];
        rec = new boolean[num];
        for (int i = 0; i < num; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int i = 0; i < pre.length; i++) {
            adj[pre[i][0]].add(pre[i][1]);
        }
        for (int i = 0; i < num; i++) {
            if (!vis[i]) {
                if (isCycle(adj, i, vis, rec)) {
                    return false;
                }
            }
        }
        return true;
    }

    private boolean isCycle(List<Integer>[] adj, int curr, boolean[] vis, boolean[] rec) {
        vis[curr] = true;
        rec[curr] = true;
        for (int i : adj[curr]) {
            if (rec[i]) {
                return true;
            } else if (!vis[i]) {
                if (isCycle(adj, i, vis, rec)) {
                    return true;
                }
            }
        }
        rec[curr] = false;
        return false;
    }
}
