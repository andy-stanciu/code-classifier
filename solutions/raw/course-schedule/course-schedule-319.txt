class Solution {

    public class Edge {

        int src;

        int dest;

        public Edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }

    public boolean isCycle(ArrayList<Edge>[] graph, boolean[] visitor, boolean[] recStack, int curr) {
        visitor[curr] = true;
        recStack[curr] = true;
        for (Edge e : graph[curr]) {
            if (recStack[e.dest])
                return true;
            else if (!visitor[e.dest] && isCycle(graph, visitor, recStack, e.dest)) {
                return true;
            }
        }
        recStack[curr] = false;
        return false;
    }

    public void createGraph(int numCourses, int[][] prerequisites, ArrayList<Edge>[] graph) {
        for (int i = 0; i < numCourses; i++) {
            graph[i] = new ArrayList<Edge>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            graph[prerequisites[i][1]].add(new Edge(prerequisites[i][1], prerequisites[i][0]));
        }
    }

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<Edge>[] graph = new ArrayList[numCourses];
        createGraph(numCourses, prerequisites, graph);
        boolean[] visitor = new boolean[numCourses];
        boolean[] recStack = new boolean[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (!visitor[i] && isCycle(graph, visitor, recStack, i)) {
                return false;
            }
        }
        return true;
    }
}
