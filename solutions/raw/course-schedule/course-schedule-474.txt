class Solution {

    class Edge {

        int src;

        int dest;

        public Edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<Edge>[] graph = new ArrayList[numCourses];
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            int src = prerequisites[i][1];
            int dest = prerequisites[i][0];
            graph[src].add(new Edge(src, dest));
        }
        boolean[] visited = new boolean[graph.length];
        boolean[] stack = new boolean[graph.length];
        for (int i = 0; i < graph.length; i++) {
            if (!visited[i]) {
                if (dfs(graph, i, visited, stack)) {
                    return false;
                }
            }
        }
        return true;
    }

    private boolean dfs(List<Edge>[] graph, int curr, boolean[] visited, boolean[] stack) {
        visited[curr] = true;
        stack[curr] = true;
        for (int i = 0; i < graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);
            if (stack[e.dest]) {
                return true;
            }
            if (!visited[e.dest] && dfs(graph, e.dest, visited, stack)) {
                return true;
            }
        }
        stack[curr] = false;
        return false;
    }
}
/*

pre
[a, b] - to take a must take b first


numCourses 

We need to check for a cycle in a directed acyclic graph 

Need to see if cycle exists or not in directed graph 










*/
