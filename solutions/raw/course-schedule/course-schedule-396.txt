class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<Integer>[] map = getMap(numCourses, prerequisites);
        boolean[] visited = new boolean[numCourses];
        boolean[] hasInpath = new boolean[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (!visited[i] && dfs(i, map, visited, hasInpath)) {
                return false;
            }
        }
        return true;
    }

    private boolean dfs(int start, List<Integer>[] map, boolean[] visited, boolean[] hasInpath) {
        visited[start] = true;
        hasInpath[start] = true;
        for (int child : map[start]) {
            if (hasInpath[child])
                return true;
            if (!visited[child] && dfs(child, map, visited, hasInpath)) {
                return true;
            }
        }
        hasInpath[start] = false;
        return false;
    }

    private List<Integer>[] getMap(int numCourses, int[][] prerequisites) {
        List<Integer>[] map = new ArrayList[numCourses];
        for (int i = 0; i < numCourses; i++) {
            map[i] = new ArrayList<>();
        }
        for (int i = 0; i < prerequisites.length; i++) {
            int start = prerequisites[i][0];
            int end = prerequisites[i][1];
            map[end].add(start);
        }
        return map;
    }
}
