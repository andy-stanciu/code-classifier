class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        boolean[] vis = new boolean[numCourses];
        boolean[] stack = new boolean[numCourses];
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList());
        }
        for (int[] t : prerequisites) {
            adj.get(t[1]).add(t[0]);
        }
        for (int i = 0; i < numCourses; i++) {
            if (!vis[i]) {
                boolean ans = util(i, stack, vis, adj);
                if (ans) {
                    return false;
                }
            }
        }
        return true;
    }

    public static boolean util(int curr, boolean[] stack, boolean[] vis, ArrayList<ArrayList<Integer>> adj) {
        vis[curr] = true;
        stack[curr] = true;
        for (int i = 0; i < adj.get(curr).size(); i++) {
            int e = adj.get(curr).get(i);
            if (stack[e] == true) {
                return true;
            }
            if (!vis[e] && util(e, stack, vis, adj)) {
                return true;
            }
        }
        stack[curr] = false;
        return false;
    }
}
