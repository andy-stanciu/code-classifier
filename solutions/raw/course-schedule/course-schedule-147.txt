class Solution {

    public boolean canFinish(int V, int[][] pre) {
        // Create adjacency list
        List<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        // Build graph based on prerequisites
        for (int i = 0; i < pre.length; i++) {
            adj.get(pre[i][0]).add(pre[i][1]);
        }
        int[] visited = new int[V];
        // Check for cycles using DFS
        for (int i = 0; i < V; i++) {
            if (dfs(adj, visited, i)) {
                return false;
            }
        }
        return true;
    }

    public boolean dfs(List<ArrayList<Integer>> adj, int[] visited, int i) {
        // Fully processed
        if (visited[i] == 2)
            return false;
        // Currently in the call stack - cycle detected
        if (visited[i] == 1)
            return true;
        // Mark as visiting
        visited[i] = 1;
        for (int node : adj.get(i)) {
            // Cycle found
            if (dfs(adj, visited, node))
                return true;
        }
        // Mark as fully processed
        visited[i] = 2;
        return false;
    }
}
