class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int n = numCourses;
        int[] indegree = new int[n];
        for (int[] prerequisite : prerequisites) {
            indegree[prerequisite[0]]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        int count = 0;
        while (!q.isEmpty()) {
            int course = q.poll();
            count++;
            for (int[] prerequisite : prerequisites) {
                if (prerequisite[1] == course) {
                    indegree[prerequisite[0]]--;
                    if (indegree[prerequisite[0]] == 0) {
                        q.add(prerequisite[0]);
                    }
                }
            }
        }
        return count == numCourses;
    }
}
