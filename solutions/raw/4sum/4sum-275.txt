class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        int n = nums.length;
        Arrays.sort(nums);
        for (int i = 0; i < n; i++) {
            if (i > 0 && nums[i] == nums[i - 1])
                continue;
            for (int j = i + 1; j < n; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1])
                    continue;
                //2 pointer
                int k = j + 1;
                int l = n - 1;
                while (k < l) {
                    long sum = (long) nums[i] + nums[j] + nums[k] + nums[l];
                    if (sum == target) {
                        List<Integer> temp = new ArrayList<>();
                        temp.add(nums[i]);
                        temp.add(nums[j]);
                        temp.add(nums[k]);
                        temp.add(nums[l]);
                        ans.add(temp);
                        k++;
                        l--;
                        //skip duplicates:
                        while (k < l && nums[k] == nums[k - 1]) k++;
                        while (k < l && nums[l] == nums[l + 1]) l--;
                    } else if (sum < target) {
                        k++;
                    } else {
                        l--;
                    }
                }
            }
        }
        return ans;
    }
}
// Set<List<Integer>> ans=new HashSet<>();
// int n=nums.length;
// Arrays.sort(nums);
// for(int i=0;i<n-3;++i){
//     if(i>0 && nums[i]==nums[i-1]) continue;
//     for(int j=i+1;j<n-2;++j){
//         if(j>i+1 && nums[j]==nums[j-1]) continue;
//         for(int k=j+1;k<n-1;++k){
//             if(k>j+1 && nums[k]==nums[k-1]) continue;
//             for(int l=k+1;l<n;++l){
//                 if(l>k+1 && nums[l]==nums[k-1]) continue;
//                 long sum=(long)nums[i]+nums[j]+nums[k]+nums[l];
//                 if(sum>target){
//                     break;
//                 }
//                 else if(sum==target){
//                     ans.add(Arrays.asList(nums[i], nums[j], nums[k], nums[l]));
//                 }
//             }
//         }
//     }
// }
// return new ArrayList<>(ans);
