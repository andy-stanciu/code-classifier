class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        // Approach 1
        // Set<List<Integer>> ans=new HashSet<>();
        // int n=nums.length;
        // for(int i=0;i<n;i++){
        //     for(int j=i+1;j<n;j++){
        //         HashSet<Long>set=new HashSet<>();
        //         for(int k=j+1;k<n;k++){
        //             long sum=nums[i]+nums[j];
        //             sum+=nums[k];
        //             long rem=target-sum;
        //             if(set.contains(rem)){
        //                 List<Integer>ls=Arrays.asList(nums[i],nums[j],nums[k],(int)rem);
        //                 Collections.sort(ls);
        //                 ans.add(l
        //             }
        //             set.add((long)nums[k]);
        //         }
        //     }
        // }
        // List<List<Integer>> res= new ArrayList<>(ans);
        // return res;
        // Approach 2
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            if (i != 0 && nums[i] == nums[i - 1])
                continue;
            for (int j = i + 1; j < n; j++) {
                int k = j + 1;
                int l = n - 1;
                if (j != i + 1 && nums[j] == nums[j - 1])
                    continue;
                while (k < l) {
                    long sum = nums[i];
                    sum += nums[j];
                    sum += nums[k];
                    sum += nums[l];
                    if (sum == target) {
                        List<Integer> ls = Arrays.asList(nums[i], nums[j], nums[k], nums[l]);
                        ans.add(ls);
                        k++;
                        l--;
                        while (k < l && nums[k] == nums[k - 1]) k++;
                        while (k < l && nums[l] == nums[l + 1]) l--;
                    } else if (sum < target) {
                        k++;
                    } else {
                        l--;
                    }
                }
            }
        }
        return ans;
    }
}
