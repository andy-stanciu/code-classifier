class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums.length < 4)
            return result;
        int n = nums.length;
        Arrays.sort(nums);
        ArrayList<Integer> res;
        for (int iterI = 0; iterI < n - 3; iterI++) {
            if (iterI > 0 && nums[iterI] == nums[iterI - 1])
                continue;
            for (int iterJ = iterI + 1; iterJ < n - 2; iterJ++) {
                if (iterJ > iterI + 1 && nums[iterJ] == nums[iterJ - 1])
                    continue;
                int left = iterJ + 1, right = n - 1;
                long reqSum = (long) target - (nums[iterI] + nums[iterJ]);
                while (left < right) {
                    long temp = (long) nums[left] + nums[right];
                    if (temp == reqSum) {
                        res = new ArrayList<>(Arrays.asList(nums[iterI], nums[iterJ], nums[left], nums[right]));
                        if (!result.contains(res))
                            result.add(res);
                        left++;
                    }
                    if (temp < reqSum) {
                        left++;
                    } else {
                        right--;
                    }
                }
            }
        }
        return result;
    }
}
