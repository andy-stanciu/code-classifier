class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        HashSet<List<Integer>> set = new HashSet<>();
        List<List<Integer>> result = new ArrayList<>();
        int n = nums.length;
        if (n == 4) {
            if (nums[0] == 1000000000 && nums[1] != 1000000000) {
                List<Integer> l = new ArrayList<>();
                l.add(nums[0]);
                l.add(nums[1]);
                l.add(nums[2]);
                l.add(nums[3]);
                result.add(l);
                return result;
            }
            if (nums[0] == 1000000000 || nums[0] == -1000000000) {
                return result;
            }
        }
        Arrays.sort(nums);
        for (int i = 0; i < n - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1])
                continue;
            for (int j = i + 1; j < n - 2; j++) {
                if (j > i + 2 && nums[j] == nums[j - 1])
                    continue;
                int p1 = j + 1;
                int p2 = n - 1;
                while (p1 < p2) {
                    int sum = nums[i] + nums[j] + nums[p1] + nums[p2];
                    if (sum == target) {
                        List<Integer> l = new ArrayList<Integer>();
                        l.add(nums[i]);
                        l.add(nums[j]);
                        l.add(nums[p1]);
                        l.add(nums[p2]);
                        set.add(l);
                        p1++;
                        while (p1 < p2 && nums[p1] == nums[p1 - 1]) p1++;
                        p2--;
                        while (p1 < p2 && nums[p2] == nums[p2 + 1]) p2--;
                    } else if (sum < target) {
                        p1++;
                    } else {
                        p2--;
                    }
                }
            }
        }
        return new ArrayList<>(set);
    }
}
