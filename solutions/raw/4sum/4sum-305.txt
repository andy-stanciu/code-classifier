class Solution {

    public List<List<Integer>> fourSum(int[] nums, long target) {
        // if we do it like 3Sum, this will be O(N^3)
        List<List<Integer>> res = new ArrayList<>();
        int n = nums.length;
        Arrays.sort(nums);
        int k = 0;
        int m = 0;
        long sum = 0;
        for (int i = 0; i < n - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1])
                continue;
            for (int j = i + 1; j < n - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1])
                    continue;
                k = j + 1;
                m = n - 1;
                while (k < m) {
                    sum = (long) nums[i] + (long) nums[j] + (long) nums[k] + (long) nums[m];
                    if (sum < target) {
                        k++;
                    } else if (sum > target) {
                        m--;
                    } else {
                        res.add(Arrays.asList(nums[i], nums[j], nums[k], nums[m]));
                        while (k < m && nums[k] == nums[k + 1]) k++;
                        while (k < m && nums[m] == nums[m - 1]) m--;
                        k++;
                        m--;
                    }
                }
            }
        }
        return res;
    }
}
