class Solution {

    public List<List<Integer>> fourSum(int[] arr, int target) {
        int n = arr.length;
        List<List<Integer>> ans = new ArrayList<>(n / 4);
        if (n < 4) {
            return ans;
        }
        Arrays.sort(arr);
        int n1 = n - 1;
        int n2 = n - 2;
        int n3 = n - 3;
        for (int i = 0; i < n3; i++) {
            if (i > 0 && arr[i] == arr[i - 1]) {
                continue;
            }
            for (int j = i + 1; j < n2; j++) {
                if (j > i + 1 && arr[j] == arr[j - 1]) {
                    continue;
                }
                int l = j + 1, r = n1;
                long key = (long) target - arr[i] - arr[j];
                while (l < r) {
                    int sum = arr[l] + arr[r];
                    if (sum == key) {
                        List<Integer> quad = new ArrayList<>(4);
                        quad.add(arr[i]);
                        quad.add(arr[j]);
                        quad.add(arr[l]);
                        quad.add(arr[r]);
                        ans.add(quad);
                        l++;
                        while (l < r && arr[l] == arr[l - 1]) {
                            l++;
                        }
                    } else if (sum < key) {
                        l++;
                    } else {
                        r--;
                    }
                }
            }
        }
        return ans;
    }
}
