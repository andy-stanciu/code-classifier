class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        // Sorting the array so we can use two pointer concept
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList();
        int n = nums.length;
        // 1st level loop, n-3 beacuse after i there should be another 3 elements
        // to get into the result
        for (int i = 0; i < n - 3; i++) {
            //  checking if duplicate is present or not
            if (i > 0 && nums[i - 1] == nums[i])
                continue;
            // Same as outer loop
            for (int j = i + 1; j < n - 2; j++) {
                // Checking for duplicates
                if (j > i + 1 && nums[j - 1] == nums[j])
                    continue;
                // Defining variables for 2Sum type problem solution
                int start = j + 1;
                int end = n - 1;
                int temp = target - nums[i] - nums[j];
                // Here temp becomes the temporary target
                while (start < end) {
                    // Check if equal
                    if (temp == nums[start] + nums[end]) {
                        // Adding to the result
                        result.add(Arrays.asList(nums[i], nums[j], nums[start], nums[end]));
                        //Checking if any duplicates present
                        while (start < end && nums[start] == nums[start + 1]) start++;
                        while (start < end && nums[end] == nums[end - 1]) end--;
                        start++;
                        end--;
                    } else if (temp < nums[start] + nums[end]) {
                        end--;
                    } else {
                        start++;
                    }
                }
            }
        }
        return result;
    }
}
