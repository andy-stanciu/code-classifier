class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        return nthSum(nums, target, 4, 0);
    }

    public List<List<Integer>> nthSum(int[] nums, long target, int n, int start) {
        if (n < 2) {
            throw new IllegalArgumentException("n must be greater than or equal to 2");
        }
        if (n == 2) {
            return twoSum(nums, target, start);
        }
        return Stream.iterate(start, i -> i < nums.length, i -> i + 1).parallel().flatMap(i -> nthSum(nums, target - nums[i], n - 1, i + 1).stream().map(l -> {
            l.add(0, nums[i]);
            return l;
        })).distinct().toList();
    }

    public List<List<Integer>> twoSum(int[] nums, long target, int start) {
        int i = start;
        int j = nums.length - 1;
        List<List<Integer>> res = new ArrayList<>();
        while (i < j) {
            if (nums[i] + nums[j] == target) {
                res.add(new ArrayList<>(List.of(nums[i], nums[j])));
                if (nums[j] == nums[j - 1]) {
                    j -= 1;
                } else {
                    i += 1;
                }
            } else if (nums[i] + nums[j] > target) {
                j -= 1;
            } else {
                i += 1;
            }
        }
        return res;
    }
}
