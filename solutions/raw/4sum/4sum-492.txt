class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        int n = nums.length;
        List<List<Integer>> ans = new ArrayList<>();
        //Sort because we need ans in sorted format
        Arrays.sort(nums);
        for (int i = 0; i < n; i++) {
            //we need unique subarrays so if there are any duplicates then skip the element
            if (i > 0 && nums[i] == nums[i - 1])
                continue;
            for (int j = i + 1; j < n; j++) {
                //we need unique subarrays so if there are any duplicates then skip the element
                if (j != i + 1 && nums[j] == nums[j - 1])
                    continue;
                //twoPointers to move from both the sides
                int k = j + 1;
                int l = n - 1;
                while (k < l) {
                    //Sum all elements
                    long sum = nums[i];
                    sum += nums[j];
                    sum += nums[k];
                    sum += nums[l];
                    if (sum == target) {
                        //if sum of all elements is the expected target then add all elements in a list
                        // List<Integer> temp = {nums[i],nums[j],nums[k], nums[l]};
                        //it will convert this array elements in a list and then add in a temp list
                        List<Integer> temp = Arrays.asList(nums[i], nums[j], nums[k], nums[l]);
                        //add this temp list inside a 2-D List(ans)
                        ans.add(temp);
                        //move the pointers forword
                        k++;
                        //move the pointers forword
                        l--;
                        //we need unique subarrays so if there are any duplicates then skip the element
                        while (k < l && nums[k] == nums[k - 1]) k++;
                        while (k < l && nums[l] == nums[l + 1]) l--;
                    } else if (sum < target)
                        k++;
                    else
                        l--;
                }
            }
        }
        return ans;
    }
}
