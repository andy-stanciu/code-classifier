class Solution {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> fourSum = new ArrayList<>();
        for (int i = 0; i < nums.length - 3; ++i) {
            if (i > 0 && nums[i] == nums[i - 1])
                continue;
            for (int j = i + 1; j < nums.length - 2; ++j) {
                if (j > i + 1 && nums[j] == nums[j - 1])
                    continue;
                long currentTarget = (long) target - (nums[i] + nums[j]);
                twoSum(nums, j + 1, nums.length - 1, currentTarget, fourSum, i, j);
            }
        }
        return fourSum;
    }

    private void twoSum(int[] nums, int s, int e, long currentTarget, List<List<Integer>> fourSum, int i, int j) {
        int l = s, r = e;
        while (l < r) {
            if (l > s && nums[l] == nums[l - 1]) {
                ++l;
                continue;
            }
            if ((long) nums[l] + nums[r] == currentTarget) {
                fourSum.add(List.of(nums[i], nums[j], nums[l], nums[r]));
                ++l;
                --r;
            } else if (nums[l] + nums[r] < currentTarget) {
                ++l;
            } else {
                --r;
            }
        }
    }
}
