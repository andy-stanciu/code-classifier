class Solution {

    public int majorityElement(int[] nums) {
        // Get the length of the array
        int n = nums.length;
        // Create a HashMap to store element counts
        Map<Integer, Integer> map = new HashMap<>();
        // Iterate through the array to populate the HashMap
        for (int i = 0; i < n; i++) {
            // Update the count of the current element
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }
        // Calculate half of the array length
        n = n / 2;
        // Check the counts in the HashMap to find the majority element
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > n) {
                // If count exceeds half the length
                // Return the majority element
                return entry.getKey();
            }
        }
        // Return 0 if no majority element is found (though the problem guarantees one)
        return 0;
    }
}
