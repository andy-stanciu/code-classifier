// Brute Force Solution
class Solution {

    public int majorityElement(int[] nums) {
        if (nums.length == 1)
            return nums[0];
        int max = nums.length / 2;
        int majority = 0;
        for (int i = 0; i < nums.length - 1; i++) {
            int count = 1;
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[j] == nums[i])
                    count++;
            }
            if (count > max)
                majority = nums[i];
        }
        return majority;
    }
}

// HashMap Solution
class Solution {

    public int majorityElement(int[] nums) {
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i = 0; i < nums.length; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }
        int result = nums[0];
        for (Map.Entry<Integer, Integer> element : map.entrySet()) {
            if (element.getValue() > (nums.length / 2))
                result = element.getKey();
        }
        return result;
    }
}

// HashMap & PriorityQueue Solution
class Solution {

    public int majorityElement(int[] nums) {
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i = 0; i < nums.length; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }
        PriorityQueue<Map.Entry<Integer, Integer>> pq = new PriorityQueue<>((a, b) -> b.getValue() - a.getValue());
        pq.addAll(map.entrySet());
        return pq.peek().getKey();
    }
}
