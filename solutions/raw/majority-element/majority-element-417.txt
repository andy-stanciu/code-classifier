//BRUTE APPROACH
// class Solution {
//     public int majorityElement(int[] nums) {
//         int n = nums.length ;
//         for (int i = 0; i < n; i++) {
//             int count = 0;
//             // Count occurrences of arr[i]
//             for (int j = 0; j < n; j++) {
//                 if (nums[i] == nums[j]) {
//                     count++;
//                 }
//             }
//             // Check if it\'s the majority element
//             if (count > n / 2) {
//                 return nums[i];
//             }
//         }
//         return -1;
//     }
// }
//BETTER APPROACH
// class Solution {
//     static int majorityElement(int[] nums) {
//         // your code here
//         HashMap<Integer, Integer> map = new HashMap<>();
//         int n = nums.length;
//         for(int arr : nums){
//             map.put(arr, map.getOrDefault(arr, 0) + 1);
//         }
//         for (int key : map.keySet()) {
//             if (map.get(key) > n / 2) {
//                 return key;
//             }
//         }
//         return -1;
//     }
// }
//OPTIMAL APPROACH
// class Solution {
//     static int majorityElement(int[] nums) {
//         int n = nums.length;
//         //Sort the array
//         Arrays.sort(nums);
//         // Candidate majority element is at the middle
//         int candidate = nums[n/2];
//          // Count occurrences of candidate
//         int count = 0;
//         for(int arr : nums){
//             if(arr == candidate){
//                 count++;
//             }
//         }
//         // Check if candidate is a majority element
//         if(count > n/2){
//             return candidate;
//         }
//         return -1;
//     }
// }
// OPTIMiZED APPROACH
class Solution {

    static int majorityElement(int[] nums) {
        // your code here
        int majority = nums[0], votes = 1;
        for (int i = 1; i < nums.length; i++) {
            if (votes == 0) {
                votes++;
                majority = nums[i];
            } else if (majority == nums[i]) {
                votes++;
            } else {
                votes--;
            }
        }
        return majority;
    }
}
