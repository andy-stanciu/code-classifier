// Brute Force Method
class Solution {

    public int majorityElement(int[] nums) {
        int maj = 0;
        for (int i = 0; i < nums.length; i++) {
            int count = 0;
            for (int j = i; j < nums.length; j++) {
                if (nums[j] == nums[i]) {
                    count++;
                }
            }
            if (count > nums.length / 2) {
                maj = nums[i];
            }
        }
        return maj;
    }
}

// Optimized Method Using Map
class Solution {

    public int majorityElement(int[] nums) {
        Map<Integer, Integer> mp = new HashMap<>();
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            mp.put(nums[i], mp.getOrDefault(nums[i], 0) + 1);
        }
        for (int i = 0; i < n; i++) {
            if (mp.get(nums[i]) > (n / 2)) {
                return nums[i];
            }
        }
        return 0;
    }
}

// More Optimized - Sorting
class Solution {

    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        int count = 1;
        for (int i = 0; i < nums.length; i++) {
            if (count > (nums.length / 2)) {
                return nums[i];
            }
            if (nums[i] == nums[i + 1]) {
                count++;
            } else {
                count = 1;
            }
        }
        return 0;
    }
}
