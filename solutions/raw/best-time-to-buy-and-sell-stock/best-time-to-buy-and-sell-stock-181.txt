class Solution {

    public int maxProfit(int[] prices) {
        var n = prices.length;
        // dp 2d
        //         var haveStock = new int[n][3];
        //         var noStock = new int[n][3];
        //         // bought and sold on the 1st day
        //         noStock[0][1] = 0;
        //         // bought and sold on the 1st day
        //         noStock[0][2] = 0;
        //         // bought on the 1st day. T #1
        //         haveStock[0][1] = -prices[0];
        //         // bought, sold, bought on the 1st day. Thus T #2
        //         haveStock[0][2] = -prices[0];
        //         for (int day = 1; day < n; day++) {
        //             haveStock[day][1] = Math.max(haveStock[day - 1][1], noStock[day - 1][0] - prices[day]);
        //             noStock[day][1] = Math.max(noStock[day - 1][1], haveStock[day - 1][1] + prices[day]);
        //             haveStock[day][2] = Math.max(haveStock[day - 1][2], noStock[day - 1][1] - prices[day]);
        //             noStock[day][2] = Math.max(noStock[day - 1][2], haveStock[day - 1][2] + prices[day]);
        //         }
        //         return noStock[n - 1][2];
        // dp O(1)
        var noStockTodayT1 = 0;
        var noStockYesterdayT1 = 0;
        var noStockTodayT2 = 0;
        var noStockYesterdayT2 = 0;
        var haveStockTodayT1 = 0;
        var hadStockYesterdayT1 = -prices[0];
        var haveStockTodayT2 = 0;
        var hadStockYesterdayT2 = -prices[0];
        for (int day = 1; day < n; day++) {
            haveStockTodayT1 = Math.max(hadStockYesterdayT1, -prices[day]);
            noStockTodayT1 = Math.max(noStockYesterdayT1, hadStockYesterdayT1 + prices[day]);
            haveStockTodayT2 = Math.max(hadStockYesterdayT2, noStockYesterdayT1 - prices[day]);
            noStockTodayT2 = Math.max(noStockYesterdayT2, hadStockYesterdayT2 + prices[day]);
            hadStockYesterdayT1 = haveStockTodayT1;
            hadStockYesterdayT2 = haveStockTodayT2;
            noStockYesterdayT1 = noStockTodayT1;
            noStockYesterdayT2 = noStockTodayT2;
        }
        return noStockTodayT2;
        // top-down + memo
        //return maxProfit(prices, 0, 0, k, new Integer[prices.length][2][k + 1]);
    }

    private int maxProfit(int[] nums, int day, int canSell, int transLeft, Integer[][][] memo) {
        if (day == nums.length || transLeft == 0) {
            return 0;
        }
        if (memo[day][canSell][transLeft] != null) {
            return memo[day][canSell][transLeft];
        }
        // do nothing - skip day
        var noActionsProfit = maxProfit(nums, day + 1, canSell, transLeft, memo);
        var actionProfit = 0;
        if (canSell == 1) {
            actionProfit = nums[day] + maxProfit(nums, day + 1, 0, transLeft - 1, memo);
        } else {
            actionProfit = maxProfit(nums, day + 1, 1, transLeft, memo) - nums[day];
        }
        return memo[day][canSell][transLeft] = Math.max(noActionsProfit, actionProfit);
    }
}
