class Solution {

    public int maxProfit(int[] prices) {
        // int f=0;
        // int l=prices.length-1;
        // int m=f+1;
        // int max=0;
        // int ms,ls;
        //--------------------
        // while(f<=l){
        //     if((prices[f]<prices[l] && prices[l]-prices[f]>max) || prices[f]<prices[m] && prices[m]-prices[f]>max){
        //         max=prices[l]-prices[f]>prices[m]-prices[f]?prices[l]-prices[f]:prices[m]-prices[f];
        //     }
        //     l--;
        //     m++;
        //     if(m==l){
        //         f++;
        //         m=f+1;
        //         l=prices.length-1;
        //     }
        // }
        // while(f<=l){
        //     if(prices[l]-prices[f]>max){
        //         max=prices[l]-prices[f];
        //     }
        //     l--;
        //     if(f==l){
        //         f++;
        //         l=prices.length-1;
        //     }
        // }
        //-----------------
        //     if(prices.length==1 || prices.length==0){
        //         return 0;
        //     }
        //     if(prices.length==2 && prices[0]<prices[1]){
        //         return prices[1]-prices[0];
        //     }
        //     while(f<=l){
        //         ms=prices[m]-prices[f];
        //         ls=prices[l]-prices[f];
        //         int x=Math.max(ms,ls);
        //         max=Math.max(x,max);
        //         l--;
        //         m++;
        //         if(m==f || m==prices.length || f==l){
        //             f++;
        //             l=prices.length-1;
        //             m=f+1;
        //         }
        //         if(f==prices.length-3 || f==prices.length-2){
        //             break;
        //         }
        //     }
        //     return max;
        int maxprofit = 0;
        int profit;
        int minsofar = prices[0];
        for (int i = 1; i < prices.length; i++) {
            minsofar = Math.min(prices[i], minsofar);
            profit = prices[i] - minsofar;
            maxprofit = Math.max(profit, maxprofit);
        }
        return maxprofit;
    }
}
