class Solution {

    /* public int maxProfit(int[] prices) {
        int maxProfit=Integer.MIN_VALUE;
        for (int buy=0;buy<prices.length;buy++) {
            for (int sell=buy+1;sell<prices.length;sell++) {
                  if(prices[sell]>prices[buy]) {
                    maxProfit=Math.max(maxProfit,prices[sell]-prices[buy]);
                  }
            }
        }
        return maxProfit==Integer.MIN_VALUE?0:maxProfit;
        
    }*/
    //optimized approach using carry forward
    public int maxProfit(int[] prices) {
        if (prices.length < 1) {
            return 0;
        }
        int maxProfit = Integer.MIN_VALUE, min = prices[0];
        //find  minimum value for a stock to sell to buy before and carry forward it
        for (int i = 1; i < prices.length; i++) {
            min = Math.min(min, prices[i - 1]);
            if (min < prices[i]) {
                maxProfit = Math.max(maxProfit, prices[i] - min);
            }
        }
        return maxProfit == Integer.MIN_VALUE ? 0 : maxProfit;
    }
}
