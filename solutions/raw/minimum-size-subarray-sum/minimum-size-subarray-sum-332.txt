class Solution {

    public int minSubArrayLen(int target, int[] nums) {
        // Start of the sliding window
        int left = 0;
        // Sum of the current window
        int sum = 0;
        // Minimum length of subarray with sum >= target
        int minLength = Integer.MAX_VALUE;
        for (int right = 0; right < nums.length; right++) {
            // Expand the window by adding the current element to the sum
            sum += nums[right];
            // While the sum of the current window is greater than or equal to target
            while (sum >= target) {
                // Update the minimum length
                minLength = Math.min(minLength, right - left + 1);
                // Shrink the window from the left
                sum -= nums[left];
                // Move the left end of the window to the right
                left++;
            }
        }
        // If minLength was updated, return it. Otherwise, return 0 indicating no valid subarray was found
        return (minLength == Integer.MAX_VALUE) ? 0 : minLength;
    }
}
