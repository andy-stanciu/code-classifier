class Solution {

    public int minSubArrayLen(int target, int[] nums) {
        int i = 0;
        int j = -1;
        int size = Integer.MAX_VALUE;
        int sumtillNow = 0;
        //there could be the possibility that the end of array contains the largest value that could cause single length array that is greater than the target
        while (i <= nums.length - 1) {
            //increases the value till j reaches the end of the array
            if (sumtillNow < target && j <= nums.length - 2) {
                j++;
                sumtillNow = sumtillNow + nums[j];
            } else //decreases the value if sum is greater than equal to target
            if (sumtillNow >= target) {
                size = Math.min(size, j - i + 1);
                System.out.println("start" + i + "end" + j + "sumtillNow" + sumtillNow);
                sumtillNow = sumtillNow - nums[i];
                i++;
                // if j reaches the end of array and sum is less than the target, then there is no way to increase the sum
            } else if (sumtillNow < target && j == nums.length - 1) {
                break;
            }
        }
        return size == Integer.MAX_VALUE ? 0 : size;
    }
}
