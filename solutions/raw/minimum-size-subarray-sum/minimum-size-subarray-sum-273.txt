class Solution {

    public int minSubArrayLen(int target, int[] nums) {
        int min = Integer.MAX_VALUE;
        //Left pointer of the window
        int left = 0;
        //current sum of the window
        int sum = 0;
        for (int right = 0; right < nums.length; right++) {
            sum += nums[right];
            // While the sum is greater than or equal to target, shrink the window from the left
            while (sum >= target) {
                // Update the minimum length found
                min = Math.min(min, right - left + 1);
                // Shrink the window from the left by subtracting nums[left] from the sum
                sum -= nums[left];
                // Move the left pointer to the right to shrink the window
                left++;
            }
        }
        // If min is still Integer.MAX_VALUE, it means no valid subarray found, return 0
        if (min == Integer.MAX_VALUE) {
            return 0;
        }
        // Otherwise, return the minimum length found
        return min;
    }
}
