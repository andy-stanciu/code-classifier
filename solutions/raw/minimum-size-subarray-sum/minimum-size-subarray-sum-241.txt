class Solution {

    public int minSubArrayLen(int target, int[] nums) {
        // initialize relevant variables
        int l = 0, r = 0, minLen = nums.length, len = 0, sum = 0;
        boolean found = false;
        // traverse through nums
        while (r < nums.length) {
            sum += nums[r];
            // keep expanding the window if sum < target
            if (sum < target) {
                r++;
            } else // if sum >= target, then get the smallest window size for which this condition holds true by shrinking the window size from left
            if (sum >= target) {
                found = true;
                while (l <= r && sum >= target) {
                    minLen = Math.min(minLen, r - l + 1);
                    sum -= nums[l];
                    l++;
                }
                r++;
            }
        }
        // if a subarray is not found, then just return 0
        if (!found) {
            return 0;
        }
        // else return the minimum subarray size
        return minLen;
    }
}
