class Solution {

    public int minSubArrayLen(int target, int[] nums) {
        //length of array
        int n = nums.length;
        //left pointer
        int left = 0;
        //right pointer
        int right = 0;
        //for storing the sum value
        int sum = 0;
        //for storing the subarray size
        int min = Integer.MAX_VALUE;
        //run untill right ptr goes out of bound
        while (right < n) {
            //add the right value to sum
            sum += nums[right];
            //check if currentsum >=target
            if (sum >= target) {
                //when sum goes greater than  target compress left ptr
                while (sum >= target) {
                    sum -= nums[left];
                    left++;
                }
                //right-left+2 to find the window size
                min = Math.min(min, right - left + 2);
            }
            right++;
        }
        return min == Integer.MAX_VALUE ? 0 : min;
    }
}
