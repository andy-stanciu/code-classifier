class Solution {

    public static int minSubArrayLen(int target, int[] nums) {
        //Initialize left and right pointers
        int l = 0;
        int r = 0;
        //Initialize variable to keep the min size subarray
        int ans = Integer.MAX_VALUE;
        //Current sum variable
        int sum = 0;
        int n = nums.length;
        //Traversing till r reaches n - 1
        while (r < n) {
            //Adding the element at r index to the sum
            sum += nums[r];
            //If sum is greater than or equal to the target
            while (sum >= target) {
                //Firstly, get the size (min) of the subarray into the ans variable
                ans = Math.min(r - l + 1, ans);
                //Increasing the left pointer, so also decreasing the sum by element at that index
                sum -= nums[l++];
            }
            //If the sum is not greater than or equal to the target, then move the right pointer
            r++;
        }
        //If the sum never gets greater than target, then ans variable wont be updated
        //In that case, return 0
        //Otherwise, if we get atleast one subarray with the required condition, return ans.
        return ans == Integer.MAX_VALUE ? 0 : ans;
    }
}
