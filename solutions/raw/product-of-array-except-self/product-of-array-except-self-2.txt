class Solution {

    public int[] productExceptSelf(int[] nums) {
        // Variable to store the product of all non-zero elements
        int pro = 1;
        // Flag to check if there is any zero in the array
        boolean isZero = false;
        // Counter to keep track of the number of zeros in the array
        int zeroCount = 0;
        // Loop through the array to calculate the product of all non-zero elements
        // and to check if there are any zeros in the array
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                // If the current element is zero, set the flag and increment zero count
                isZero = true;
                zeroCount++;
            } else {
                // Multiply the current non-zero element to the product
                pro *= nums[i];
            }
        }
        // If there are multiple zeros in the array or if all elements are zero,
        // then the result for all elements should be zero.
        if (zeroCount == nums.length || zeroCount > 1) {
            pro = 0;
        }
        // Loop through the array to populate the result based on the above calculations
        for (int i = 0; i < nums.length; i++) {
            if (isZero) {
                // If there is a zero in the array
                if (nums[i] == 0) {
                    // If the current element is zero, set it to the product of all non-zero elements
                    nums[i] = pro;
                } else {
                    // If the current element is non-zero, set it to zero
                    nums[i] = 0;
                }
            } else {
                // If there are no zeros in the array,
                // set the current element to the product divided by the current element
                nums[i] = pro / nums[i];
            }
        }
        // Return the modified array with the desired product values
        return nums;
    }
}
