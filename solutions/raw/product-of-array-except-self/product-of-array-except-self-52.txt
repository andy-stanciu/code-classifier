class Solution {

    public static int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] result = new int[n];
        // Step 1: Calculate the left products
        // There are no elements to the left of the first element
        result[0] = 1;
        for (int i = 1; i < n; i++) {
            result[i] = result[i - 1] * nums[i - 1];
        }
        // Step 2: Calculate the right products on the fly and multiply with left products
        // There are no elements to the right of the last element
        int rightProduct = 1;
        for (int i = n - 1; i >= 0; i--) {
            result[i] = result[i] * rightProduct;
            // Update the right product
            rightProduct *= nums[i];
        }
        return result;
    }

    public static void main(String[] args) {
        int[] nums1 = { 1, 2, 3, 4 };
        int[] nums2 = { -1, 1, 0, -3, 3 };
        // Output: [24, 12, 8, 6]
        System.out.println("Output for nums1: " + Arrays.toString(productExceptSelf(nums1)));
        // Output: [0, 0, 9, 0, 0]
        System.out.println("Output for nums2: " + Arrays.toString(productExceptSelf(nums2)));
    }
}
