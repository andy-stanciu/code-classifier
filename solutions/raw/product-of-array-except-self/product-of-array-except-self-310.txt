class Solution {

    public int[] productExceptSelf(int[] nums) {
        //2nd approach
        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        right[n - 1] = 1;
        left[0] = 1;
        for (int i = n - 2; i >= 0; i--) {
            right[i] = right[i + 1] * nums[i + 1];
        }
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] * nums[i - 1];
        }
        for (int i = 0; i < n; i++) {
            nums[i] = left[i] * right[i];
        }
        return nums;
        //1st approact O(n) but with division operator.
        // int n = nums.length, total = 1, flag = 0;
        // for(int i = 0; i < n; i++){
        //     if(nums[i] != 0)
        //         total = total * nums[i];
        //     else
        //         flag += 1;
        // }
        // for(int i = 0; i < n; i++){
        //     if(flag > 1){
        //         nums[i] = 0;
        //     }
        //     else if(flag == 1){
        //         if(nums[i] != 0)
        //             nums[i] = 0;
        //         else
        //             nums[i] = total;
        //     }
        //     else{
        //         nums[i] = total / nums[i];
        //     }
        // }
        // return nums;
    }
}
