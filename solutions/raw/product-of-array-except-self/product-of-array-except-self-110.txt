class Solution {

    public int[] productExceptSelf(int[] nums) {
        //return suboptimal(nums);
        return kindaOptimal(nums);
    }

    //1) using pre/post product concept.
    private int[] kindaOptimal(int[] nums) {
        int n = nums.length;
        int[] prefixPdt = new int[n];
        int[] postfixPdt = new int[n];
        int pdt = 1;
        for (int i = 0; i < n; i++) {
            prefixPdt[i] = pdt * nums[i];
            pdt = prefixPdt[i];
        }
        pdt = 1;
        for (int j = n - 1; j >= 0; j--) {
            postfixPdt[j] = pdt * nums[j];
            pdt = postfixPdt[j];
        }
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                ans[i] = postfixPdt[1];
            } else if (i == n - 1) {
                ans[i] = prefixPdt[i - 1];
            } else {
                ans[i] = prefixPdt[i - 1] * postfixPdt[i + 1];
            }
        }
        return ans;
    }

    //2) Not optimal coz the soln uses the
    //division operation which is prohibited.
    private int[] suboptimal(int[] nums) {
        int generalPdt = 1;
        int pdtExcludingZero = 1;
        int zeroCount = 0;
        for (int num : nums) {
            if (num != 0) {
                generalPdt *= num;
                pdtExcludingZero *= num;
            } else {
                generalPdt = 0;
                zeroCount += 1;
            }
        }
        int[] ans = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0 && zeroCount == 1) {
                ans[i] = pdtExcludingZero;
            } else if (zeroCount > 1)
                ans[i] = 0;
            else {
                ans[i] = generalPdt / nums[i];
            }
        }
        return ans;
    }
}
