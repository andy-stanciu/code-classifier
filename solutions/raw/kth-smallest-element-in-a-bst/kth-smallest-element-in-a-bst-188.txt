/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int i = 0;

    int ans = 0;

    public int kthSmallest(TreeNode root, int k) {
        //In a Binary Search Tree (BST), an inorder traversal visits the nodes in ascending order
        inorder(root, k);
        // (from the smallest to the largest). This is why the code is structured to first traverse the left subtree (preorder(node.left, k)),
        // then process the current node (where i++ is incremented and checked against k), and finally traverse the right subtree (preorder(node.right, k)).
        return ans;
    }

    public void inorder(TreeNode node, int k) {
        if (node == null)
            return;
        inorder(node.left, k);
        /*This part of the code ensures that you first visit all 
        the nodes on the left side, which are smaller than the current 
        node due to the properties of a BST. */
        i++;
        if (i == k) {
            ans = node.val;
            return;
        }
        /* After traversing the left subtree, you visit the current node. If the current node is the k-th smallest element
         (i.e., i == k), you store its value in ans and stop further traversal. */
        inorder(node.right, k);
        /* The traversal of the right subtree happens only after the left 
        subtree and the current node have been processed. This is necessary because, 
        if i has not yet reached k, the k-th smallest element might be in the right subtree. */
    }
}
