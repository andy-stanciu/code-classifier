/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// Traverse throught the tree and store values in the array
class Solution {

    int[] ans = new int[10000];

    public int kthSmallest(TreeNode root, int k) {
        int count = 0;
        prefill(root);
        if (root == null) {
            return 0;
        }
        for (int i = 0; i < ans.length; i++) {
            if (ans[i] == 0) {
                continue;
            } else if (ans[i] == 1 && k != 0) {
                k--;
                if (k == 0) {
                    count = i;
                    break;
                }
            }
        }
        return count;
    }

    public void prefill(TreeNode root) {
        if (root == null) {
            return;
        }
        ans[root.val] = 1;
        prefill(root.left);
        prefill(root.right);
    }
}
