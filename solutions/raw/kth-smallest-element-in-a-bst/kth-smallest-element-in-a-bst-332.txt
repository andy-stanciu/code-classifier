/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    class RetVal {

        // -1 means not found
        int kSmallest = -1;

        int countTillNow = 0;

        public RetVal() {
        }
    }

    private RetVal findKSmallest(TreeNode root, int k) {
        RetVal rValue = new RetVal();
        if (root == null) {
            return rValue;
        }
        //Find kth smallest in the left side
        var leftRVal = findKSmallest(root.left, k);
        if (leftRVal.kSmallest != -1) {
            return leftRVal;
        }
        //If not found see if current root is kth element
        if (k == leftRVal.countTillNow + 1) {
            rValue.kSmallest = root.val;
            return rValue;
        }
        //If not find kth smallest (k-countTillNow) on the right side
        var rightRVal = findKSmallest(root.right, k - leftRVal.countTillNow - 1);
        if (rightRVal.kSmallest != -1) {
            return rightRVal;
        }
        //If not found return countTillNow
        rValue.countTillNow = leftRVal.countTillNow + rightRVal.countTillNow + 1;
        return rValue;
    }

    public int kthSmallest(TreeNode root, int k) {
        RetVal rValue = findKSmallest(root, k);
        return rValue.kSmallest;
    }
}
