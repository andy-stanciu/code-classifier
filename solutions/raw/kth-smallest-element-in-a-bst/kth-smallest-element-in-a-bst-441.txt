/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
/* Solution1: stop when find the Solution
class Solution {
    int k_val;
    int return_val = 0;
    public int kthSmallest(TreeNode root, int k) {
        k_val = k;
        helper(root);
        return return_val;
    }
    public void helper(TreeNode root){
        if(root == null)
            return;
        helper(root.left);
        k_val--;
        if(k_val == 0)
            return_val = root.val;
        helper(root.right);
    }
}*/
class Solution {

    public int kthSmallest(TreeNode root, int k) {
        Stack<TreeNode> stack = new Stack<>();
        stack.add(root);
        while (!stack.isEmpty()) {
            if (root.left != null) {
                stack.add(root.left);
                root = root.left;
            } else {
                TreeNode node = stack.pop();
                k--;
                if (k == 0)
                    return node.val;
                if (node.right != null) {
                    stack.add(node.right);
                    root = node.right;
                }
            }
        }
        return -1;
    }
}
