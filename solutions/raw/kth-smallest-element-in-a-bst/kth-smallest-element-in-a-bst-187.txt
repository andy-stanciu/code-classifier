/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    public int kthSmallest(TreeNode root, int k) {
        Stack<TreeNode> st = new Stack<>();
        while (root != null || !st.isEmpty()) {
            // Traverse the left subtree while pushing nodes onto the stack
            while (root != null) {
                st.push(root);
                root = root.left;
            }
            // Pop a node from the stack
            TreeNode n = st.pop();
            k--;
            if (k == 0)
                // If k becomes zero, return the value of node n
                return n.val;
            // Push the right child and its left subtree onto the stack
            root = n.right;
        }
        // If k is not found
        return -1;
    }
}
