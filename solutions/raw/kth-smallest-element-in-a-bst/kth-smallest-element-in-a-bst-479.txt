/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int kthSmallest(TreeNode root, int k) {
        List<TreeNode> path = new LinkedList<>();
        kthSmallest(root, path, k);
        return path.get(k - 1).val;
    }

    void kthSmallest(TreeNode node, List<TreeNode> path, int k) {
        if (node == null) {
            return;
        }
        kthSmallest(node.left, path, k);
        if (path.size() < k) {
            path.add(node);
        }
        if (path.size() < k) {
            kthSmallest(node.right, path, k);
        }
    }
}
