/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    private long kthSmallestNum = Long.MIN_VALUE;

    public int kthSmallest(TreeNode root, int k) {
        int i = kthSmallest(root, k, 0);
        return kthSmallestNum == Long.MIN_VALUE ? i : (int) kthSmallestNum;
    }

    private int kthSmallest(TreeNode node, int k, int i) {
        if (node == null)
            return i;
        else if (node.left == null && node.right == null)
            return ++i;
        if (kthSmallestNum > Long.MIN_VALUE)
            return i;
        int il = kthSmallest(node.left, k, i);
        if (il == k && kthSmallestNum == Long.MIN_VALUE)
            kthSmallestNum = node.left.val;
        il++;
        if (il == k && kthSmallestNum == Long.MIN_VALUE)
            kthSmallestNum = node.val;
        int ir = kthSmallest(node.right, k, il);
        if (ir == k && kthSmallestNum == Long.MIN_VALUE)
            kthSmallestNum = node.right.val;
        return ir;
    }
}
