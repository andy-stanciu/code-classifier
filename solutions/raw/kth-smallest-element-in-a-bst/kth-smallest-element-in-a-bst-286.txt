/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int count = 0;

    // To store the k-th smallest value once found
    int ans = Integer.MIN_VALUE;

    // Inorder traversal helper method
    public void inorder(TreeNode root, int k) {
        // Base case: if the node is null, return
        if (root == null)
            return;
        // Traverse left subtree
        inorder(root.left, k);
        // Increment count when visiting the node
        count++;
        if (count == k) {
            // Check if the current node is the k-th smallest
            // Update ans with the value of the k-th smallest node
            ans = root.val;
            // Return to stop further traversal once we find the k-th smallest element
            return;
        }
        // Traverse right subtree
        inorder(root.right, k);
    }

    // Method to find the k-th smallest element in the BST
    public int kthSmallest(TreeNode root, int k) {
        // Perform inorder traversal to find the k-th smallest element
        inorder(root, k);
        // Return the k-th smallest element found
        return ans;
    }
}
