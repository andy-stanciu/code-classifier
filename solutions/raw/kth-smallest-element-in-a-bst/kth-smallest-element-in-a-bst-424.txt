/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int kthSmallest(TreeNode root, int k) {
        boolean[] smallestFound = new boolean[1];
        int[] kthSmallest = { -1 };
        findKthSmallest(new int[] { k }, smallestFound, kthSmallest, root);
        return kthSmallest[0];
    }

    private void findKthSmallest(int[] k, boolean[] smallestFound, int[] kthSmallest, TreeNode root) {
        if (root == null)
            return;
        findKthSmallest(k, smallestFound, kthSmallest, root.left);
        if (--k[0] == 0) {
            kthSmallest[0] = root.val;
            return;
        }
        findKthSmallest(k, smallestFound, kthSmallest, root.right);
        return;
    }
}
