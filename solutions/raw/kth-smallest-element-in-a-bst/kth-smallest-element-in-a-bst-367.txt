class Solution {

    // Variable to store the value of the k-th smallest element
    int n = 0;

    // Variable to keep track of the count of visited elements
    int k = 0;

    // Main method to find the k-th smallest element in the tree
    public int kthSmallest(TreeNode root, int k) {
        // Initialize k with the provided value
        this.k = k;
        // Start the search from the root of the tree
        smallest(root);
        // Return the value of the k-th smallest element
        return n;
    }

    // Recursive method to perform an in-order traversal of the tree
    public void smallest(TreeNode node) {
        // If the node is null, do nothing and return
        if (node == null)
            return;
        // Recursively call the left subtree
        smallest(node.left);
        // Decrement k when visiting a node. If k reaches 0, the k-th element is found
        if (--k == 0) {
            // Assign the value of the current node to n
            n = node.val;
            // End the search since the k-th element is found
            return;
        }
        // Recursively call the right subtree
        smallest(node.right);
    }
}
