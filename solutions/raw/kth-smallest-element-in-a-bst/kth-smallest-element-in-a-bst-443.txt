/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public void inorder(TreeNode root, int[] counter, int k, int[] kSmallest) {
        if (root == null || counter[0] >= k)
            return;
        inorder(root.left, counter, k, kSmallest);
        counter[0]++;
        if (counter[0] == k) {
            kSmallest[0] = root.val;
            return;
        }
        inorder(root.right, counter, k, kSmallest);
    }

    public int kthSmallest(TreeNode root, int k) {
        int[] kSmallest = new int[] { Integer.MIN_VALUE };
        int[] kLargest = new int[] { Integer.MIN_VALUE };
        int[] counter = new int[] { 0 };
        inorder(root, counter, k, kSmallest);
        // counter[0] = 0;
        // reverseInorder(root, counter, k, kLargest);
        return kSmallest[0];
    }
}
