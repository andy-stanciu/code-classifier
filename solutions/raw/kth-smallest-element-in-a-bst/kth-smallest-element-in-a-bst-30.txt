/*
explanation: kth smallest element by inorder traversal! The program works by traversing the bst in inorder traversal, as we know that an inorder traversal traverses the bst in sorted order therefore doing the same and maintaining an x variable (which denotes how many smaller elements are iterated) can give our answer! when x is equal to variable k, that is our kth smallest element.

testcase: [3,1,4,null,2]
1
-> Works

Time & Space Complexity: O(n) & O(n): Since we are fully iterating the bst therefore time and space complexity both are linear.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int ans = -1;

    int x = 0;

    public void inorder(TreeNode root, int k) {
        if (root == null)
            return;
        inorder(root.left, k);
        x++;
        if (x == k) {
            ans = root.val;
        }
        inorder(root.right, k);
    }

    public int kthSmallest(TreeNode root, int k) {
        inorder(root, k);
        return ans;
    }
}
