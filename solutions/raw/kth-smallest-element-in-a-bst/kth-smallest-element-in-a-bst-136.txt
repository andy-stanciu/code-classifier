class Solution {

    // Helper function to perform in-order traversal
    public void solve(TreeNode root, int[] ans, int k) {
        if (root == null) {
            // Base case: if the node is null, return
            return;
        }
        // Traverse the left subtree
        solve(root.left, ans, k);
        // Increment the count when visiting the current node
        ans[0]++;
        // If the count equals k, store the current node\'s value as the answer
        if (ans[0] == k) {
            ans[1] = root.val;
        }
        // Traverse the right subtree
        solve(root.right, ans, k);
    }

    // Main function to find the kth smallest element
    public int kthSmallest(TreeNode root, int k) {
        // Create an array to track count and answer
        // ans[0] for count, ans[1] for the result
        int[] ans = new int[2];
        // Start in-order traversal
        solve(root, ans, k);
        // Return the kth smallest element
        return ans[1];
    }
}
