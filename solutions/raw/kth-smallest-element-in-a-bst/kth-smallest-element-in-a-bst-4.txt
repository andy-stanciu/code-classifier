/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int kthSmallest(TreeNode root, int k) {
        List<Integer> nodes = new ArrayList<>();
        inOrderTraversal(root, nodes, k);
        if (nodes.size() == 0 && k > nodes.size())
            return -1;
        else
            return nodes.get(k - 1);
    }

    public void inOrderTraversal(TreeNode root, List<Integer> nodes, int k) {
        if (root == null)
            return;
        inOrderTraversal(root.left, nodes, k);
        if (nodes.size() <= k)
            nodes.add(root.val);
        inOrderTraversal(root.right, nodes, k);
    }
}
