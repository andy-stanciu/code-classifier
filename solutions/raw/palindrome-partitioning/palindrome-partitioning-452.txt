class Solution {

    private List<List<String>> res;

    public List<List<String>> partition(String s) {
        res = new ArrayList<>();
        helper(s, 0, new ArrayList<String>());
        return res;
    }

    private void helper(String s, int ind, List<String> ans) {
        if (ind >= s.length()) {
            res.add(new ArrayList<>(ans));
            return;
        }
        for (int i = ind; i < s.length(); i++) {
            if (is_palindrome(s, ind, i)) {
                ans.add(s.substring(ind, i + 1));
                helper(s, i + 1, ans);
                ans.remove(ans.size() - 1);
            }
        }
    }

    private boolean is_palindrome(String s, int l, int r) {
        while (l < r) {
            if (s.charAt(l) != s.charAt(r)) {
                return false;
            }
            l++;
            r--;
        }
        return true;
    }
}
