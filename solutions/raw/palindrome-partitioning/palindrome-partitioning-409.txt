class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> list = new ArrayList<>();
        helper(s, 0, new ArrayList<>(), list);
        return list;
    }

    public static void helper(String s, int i, List<String> tempList, List<List<String>> list) {
        if (i == s.length()) {
            list.add(new ArrayList<>(tempList));
            return;
        }
        for (int k = i; k < s.length(); k++) {
            if (palindrome(s.substring(i, k + 1))) {
                tempList.add(s.substring(i, k + 1));
                helper(s, k + 1, tempList, list);
                tempList.remove(tempList.size() - 1);
            }
        }
    }

    public static boolean palindrome(String str) {
        int i = 0;
        int j = str.length() - 1;
        while (i <= j) {
            if (str.charAt(i++) != str.charAt(j--))
                return false;
        }
        return true;
    }
}
