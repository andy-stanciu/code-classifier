class Solution {

    private List<List<String>> res;

    public List<List<String>> partition(String s) {
        res = new ArrayList<>();
        partition(s, 0, new ArrayList<>());
        return res;
    }

    private void partition(String s, int i, List<String> subres) {
        if (i == s.length()) {
            res.add(new ArrayList<>(subres));
            return;
        }
        for (int j = i + 1; j <= s.length(); j++) {
            String pal = s.substring(i, j);
            if (isPalindrome(pal)) {
                subres.add(pal);
                partition(s, j, subres);
                subres.remove(subres.size() - 1);
            }
        }
    }

    private boolean isPalindrome(String s) {
        int i = 0, j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i++) != s.charAt(j--)) {
                return false;
            }
        }
        return true;
    }
}
