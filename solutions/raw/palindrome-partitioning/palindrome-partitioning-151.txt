class Solution {

    List<List<String>> answer;

    String s;

    public List<List<String>> partition(String s) {
        this.s = s;
        this.answer = new ArrayList<>();
        int sLen = s.length();
        List<String> empty = new ArrayList<>();
        formStrings(empty, 0, sLen);
        return answer;
    }

    private void formStrings(List<String> curList, int beg, int end) {
        if (beg == end)
            answer.add(curList);
        for (int i = 1; i <= end - beg; i++) {
            String nextToList = s.substring(beg, beg + i);
            if (!isPalindrome(nextToList))
                continue;
            else {
                List<String> nextList = new ArrayList<>(curList);
                nextList.add(nextToList);
                formStrings(nextList, beg + i, end);
            }
        }
    }

    private boolean isPalindrome(String s) {
        int sLen = s.length();
        for (int i = 0; i < sLen / 2; i++) {
            if (s.charAt(i) != s.charAt(sLen - 1 - i))
                return false;
        }
        return true;
    }
}
