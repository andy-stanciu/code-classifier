class Solution {

    private List<List<String>> res = new ArrayList<>();

    private boolean isPalindrome(int i, int j, String s) {
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }

    private void dfs(int i, String s, List<String> ans) {
        if (i >= s.length()) {
            if (!ans.isEmpty()) {
                res.add(new ArrayList<>(ans));
            }
            return;
        }
        for (int k = i; k < s.length(); k++) {
            if (isPalindrome(i, k, s)) {
                ans.add(s.substring(i, k + 1));
                dfs(k + 1, s, ans);
                ans.remove(ans.size() - 1);
            }
        }
    }

    public List<List<String>> partition(String s) {
        List<String> ans = new ArrayList<>();
        dfs(0, s, ans);
        return res;
    }
}
