class Solution {

    List<List<String>> result = new ArrayList<>();

    public List<List<String>> partition(String s) {
        dfs(0, s, new ArrayList<>());
        return result;
    }

    public void dfs(int start, String s, List<String> curr) {
        if (s.length() == start) {
            result.add(new ArrayList(curr));
            return;
        }
        for (int i = start; i < s.length(); i++) {
            if (isPalindrom(s, start, i)) {
                curr.add(s.substring(start, i + 1));
                dfs(i + 1, s, curr);
                curr.remove(curr.size() - 1);
            }
        }
    }

    boolean isPalindrom(String s, int start, int end) {
        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}
