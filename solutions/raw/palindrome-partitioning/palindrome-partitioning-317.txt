class Solution {

    List<List<String>> res = new ArrayList<>();

    public List<List<String>> partition(String s) {
        partitionUtil(0, s, new ArrayList<>());
        return res;
    }

    private void partitionUtil(int start, String s, List<String> strList) {
        if (start > s.length()) {
            return;
        }
        if (start == s.length()) {
            List<String> curList = new ArrayList<>(strList);
            res.add(curList);
        }
        for (int i = start; i < s.length(); i++) {
            String part = s.substring(start, i + 1);
            if (isPalindrome(part)) {
                strList.add(part);
                partitionUtil(i + 1, s, strList);
                strList.remove(strList.size() - 1);
            }
        }
    }

    private boolean isPalindrome(String str) {
        int low = 0;
        int high = str.length() - 1;
        while (low <= high) {
            if (str.charAt(low) != str.charAt(high)) {
                return false;
            }
            low++;
            high--;
        }
        return true;
    }
}
