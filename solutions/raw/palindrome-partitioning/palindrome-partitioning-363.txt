class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        helper(s, 0, ans, new ArrayList<>());
        return ans;
    }

    public void helper(String s, int idx, List<List<String>> ans, List<String> temp) {
        if (idx == s.length()) {
            ans.add(new ArrayList<>(temp));
            return;
        }
        for (int i = idx + 1; i <= s.length(); i++) {
            if (isPalindrome(s.substring(idx, i))) {
                temp.add(s.substring(idx, i));
                helper(s, i, ans, temp);
                temp.remove(temp.size() - 1);
            }
        }
    }

    public boolean isPalindrome(String s) {
        int left = 0;
        int right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left) != s.charAt(right))
                return false;
            left++;
            right--;
        }
        return true;
    }
}
