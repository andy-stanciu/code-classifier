class Solution {

    ArrayList<List<String>> rlst;

    private boolean isPalindrome(String s, int i, int j) {
        while (i < j) {
            if (s.charAt(i++) != s.charAt(j--))
                return false;
        }
        return true;
    }

    public List<List<String>> partition(String s) {
        rlst = new ArrayList<List<String>>();
        helper(s, 0, new ArrayList<String>());
        return rlst;
    }

    private void helper(String s, int i, List<String> lst) {
        if (s.length() == i) {
            rlst.add(new ArrayList<>(lst));
            return;
        }
        for (int x = i + 1; x <= s.length(); x++) {
            if (isPalindrome(s, i, x - 1)) {
                lst.add(s.substring(i, x));
                helper(s, x, lst);
                lst.remove(lst.size() - 1);
            }
        }
    }
}
