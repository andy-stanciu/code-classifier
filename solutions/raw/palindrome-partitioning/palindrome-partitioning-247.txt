class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        List<String> currentpartition = new ArrayList<>();
        backtrack(s, 0, currentpartition, result);
        return result;
    }

    private void backtrack(String s, int start, List<String> currentpartition, List<List<String>> result) {
        if (start == s.length()) {
            if (isAllPalindrome(currentpartition)) {
                result.add(new ArrayList<>(currentpartition));
            }
            return;
        }
        for (int end = start; end < s.length(); end++) {
            currentpartition.add(s.substring(start, end + 1));
            backtrack(s, end + 1, currentpartition, result);
            currentpartition.remove(currentpartition.size() - 1);
        }
    }

    private boolean isAllPalindrome(List<String> partition) {
        for (String str : partition) {
            if (!isPalindrome(str)) {
                return false;
            }
        }
        return true;
    }

    // Helper function to check if a string is a palindrome
    private boolean isPalindrome(String s) {
        int start = 0, end = s.length() - 1;
        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}
