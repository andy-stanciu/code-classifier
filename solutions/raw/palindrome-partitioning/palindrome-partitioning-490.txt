class Solution {

    List<List<String>> ans = new LinkedList<>();

    LinkedList<String> tmp = new LinkedList<>();

    public List<List<String>> partition(String s) {
        dfs(s, 0);
        return ans;
    }

    private void dfs(String s, int l) {
        if (l == s.length()) {
            ans.add((LinkedList) tmp.clone());
            return;
        }
        for (int r = l; r != s.length(); r++) if (isPolindrome(s, l, r)) {
            tmp.addLast(s.substring(l, r + 1));
            dfs(s, r + 1);
            tmp.pollLast();
        }
    }

    private boolean isPolindrome(String s, int l, int r) {
        while (l < r) if (s.charAt(l++) != s.charAt(r--))
            return false;
        return true;
    }
}
