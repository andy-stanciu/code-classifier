class Solution {

    List<List<String>> result = new ArrayList<>();

    public List<List<String>> partition(String s) {
        fill(s.toCharArray(), 0, new StringBuilder(), new ArrayList<>());
        return result;
    }

    private void fill(char[] chars, int currentIndex, StringBuilder currentString, List<String> currentList) {
        if (currentIndex == chars.length) {
            if (currentString.length() == 0) {
                result.add(new ArrayList<>(currentList));
            }
        } else {
            currentString.append(chars[currentIndex]);
            if (currentString.length() > 0 && isPalindrome(currentString.toString().toCharArray())) {
                currentList.add(currentString.toString());
                fill(chars, currentIndex + 1, new StringBuilder(), currentList);
                currentList.remove(currentList.size() - 1);
            }
            fill(chars, currentIndex + 1, currentString, currentList);
        }
    }

    private boolean isPalindrome(char[] word) {
        for (int i = 0; i < word.length / 2; i++) {
            if (word[i] != word[word.length - i - 1]) {
                return false;
            }
        }
        return true;
    }
}
