class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        backtrack(s, result, new ArrayList<>(), 0);
        return result;
    }

    public void backtrack(String s, List<List<String>> result, List<String> list, int start) {
        if (start >= s.length()) {
            result.add(new ArrayList(list));
            return;
        }
        for (int i = start; i < s.length(); i++) {
            if (isPalindrome(s.substring(start, i + 1))) {
                list.add(s.substring(start, i + 1));
                backtrack(s, result, list, i + 1);
                list.remove(list.size() - 1);
            }
        }
    }

    public boolean isPalindrome(String s) {
        int start = 0, end = s.length() - 1;
        while (start <= end && end < s.length()) {
            if (s.charAt(start) != s.charAt(end))
                return false;
            start++;
            end--;
        }
        return true;
    }
}
