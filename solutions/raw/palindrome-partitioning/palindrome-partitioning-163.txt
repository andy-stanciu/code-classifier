class Solution {

    private List<List<String>> res = new ArrayList<>();

    public List<List<String>> partition(String s) {
        helper(s, 0, 0, new ArrayList<String>());
        return res;
    }

    private boolean validPalindrome(String s, int start, int end) {
        while (start <= end) {
            if (s.charAt(start++) != s.charAt(end--))
                return false;
        }
        return true;
    }

    private void helper(String s, int prev, int curr, ArrayList<String> arr) {
        if (curr != s.length())
            if (curr == s.length() - 1) {
                // base condition.
                if (validPalindrome(s, prev, curr)) {
                    arr.add(s.substring(prev, curr + 1));
                    res.add((List<String>) arr.clone());
                    arr.remove(arr.size() - 1);
                }
                return;
            }
        if (!validPalindrome(s, prev, curr)) {
            // there is nothing we can do about it.
            helper(s, prev, curr + 1, arr);
            return;
        }
        // continue in the same partition
        helper(s, prev, curr + 1, arr);
        // create a new partition.
        arr.add(s.substring(prev, curr + 1));
        helper(s, curr + 1, curr + 1, arr);
        arr.remove(arr.size() - 1);
    }
}
