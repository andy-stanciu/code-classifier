class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        List<String> tempAns = new ArrayList<>();
        backtrack(s, 0, tempAns, ans);
        return ans;
    }

    public void backtrack(String s, int idx, List<String> tempAns, List<List<String>> ans) {
        if (idx == s.length()) {
            ans.add(new ArrayList<>(tempAns));
            return;
        }
        for (int i = idx; i < s.length(); i++) {
            if (isPalindrome(s, idx, i)) {
                tempAns.add(s.substring(idx, i + 1));
                backtrack(s, i + 1, tempAns, ans);
                tempAns.remove(tempAns.size() - 1);
            }
        }
    }

    public boolean isPalindrome(String s, int i, int j) {
        if (s.length() == 1)
            return true;
        while (i <= j) {
            if (s.charAt(i) != s.charAt(j))
                return false;
            i++;
            j--;
        }
        return true;
    }
}
