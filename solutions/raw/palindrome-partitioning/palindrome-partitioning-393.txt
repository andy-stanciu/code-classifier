class Solution {

    List<List<String>> res;

    public List<List<String>> partition(String s) {
        res = new ArrayList<>();
        helper(new ArrayList<String>(), s);
        return res;
    }

    public void helper(List<String> arr, String s) {
        if (s.length() == 0) {
            res.add(new ArrayList<>(arr));
            return;
        }
        for (int i = 0; i < s.length(); i++) {
            String temp = s.substring(0, i + 1);
            if (isPalindrome(temp)) {
                arr.add(temp);
                helper(arr, s.substring(i + 1));
                arr.remove(arr.size() - 1);
            }
        }
    }

    public boolean isPalindrome(String s) {
        int n = s.length();
        int l = 0;
        int r = n - 1;
        while (l <= r) {
            if (s.charAt(l) != s.charAt(r)) {
                return false;
            }
            l++;
            r--;
        }
        return true;
    }
}
