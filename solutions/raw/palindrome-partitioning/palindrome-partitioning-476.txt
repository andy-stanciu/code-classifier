class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> al = new ArrayList<>();
        List<String> res = new ArrayList<>();
        helper(s, res, al);
        return al;
    }

    private void helper(String s, List<String> res, List<List<String>> al) {
        if (s.length() == 0) {
            al.add(new ArrayList<>(res));
            return;
        }
        for (int i = 0; i < s.length(); i++) {
            String prefix = s.substring(0, i + 1);
            String ros = s.substring(i + 1);
            if (isPalindrome(prefix)) {
                res.add(prefix);
                helper(ros, res, al);
                res.remove(res.size() - 1);
            }
        }
    }

    private boolean isPalindrome(String s) {
        int i = 0, j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}
