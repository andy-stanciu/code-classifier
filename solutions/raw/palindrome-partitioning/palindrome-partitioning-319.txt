class Solution {

    static boolean isPalindrome(String s, int start, int end) {
        while (start <= end) {
            if (s.charAt(start++) != s.charAt(end--)) {
                return false;
            }
        }
        return true;
    }

    static void solve(List<List<String>> res, List<String> ds, String s, int index) {
        if (index == s.length()) {
            res.add(new ArrayList<>(ds));
            return;
        }
        for (int i = index; i < s.length(); i++) {
            if (isPalindrome(s, index, i)) {
                ds.add(s.substring(index, i + 1));
                solve(res, ds, s, i + 1);
                ds.remove(ds.size() - 1);
            }
        }
    }

    public static List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> ds = new ArrayList<>();
        int index = 0;
        solve(res, ds, s, index);
        return res;
    }
}
