class Solution {

    private boolean[][] dp;

    private void helper(int i, String s, List<String> curr, List<List<String>> output) {
        if (i == s.length()) {
            output.add(new ArrayList<>(curr));
            return;
        }
        for (int j = i; j < s.length(); j++) {
            if (dp[i][j]) {
                curr.add(s.substring(i, j + 1));
                helper(j + 1, s, curr, output);
                curr.remove(curr.size() - 1);
            }
        }
    }

    public List<List<String>> partition(String s) {
        int n = s.length();
        List<List<String>> output = new ArrayList<>();
        dp = new boolean[n][n];
        //filling the base case: diagonal(single character) elements
        //always a palindrome
        for (int i = 0; i < n; i++) {
            dp[i][i] = true;
        }
        //filling dp array
        for (int k = 1; k < n; k++) {
            for (int i = 0; i + k < n; i++) {
                if (s.charAt(i) == s.charAt(i + k)) {
                    if (k == 1) {
                        dp[i][i + k] = true;
                    } else {
                        dp[i][i + k] = dp[i + 1][i + k - 1];
                    }
                }
            }
        }
        // printing the filled dp array
        // for(int i = 0; i<n; i++){
        //     for(int j = 0; j<n; j++){
        //         if(dp[i][j]){
        //             System.out.print("T ");
        //         }else{
        //             System.out.print("F ");
        //         }
        //     }
        //     System.out.println();
        // }
        // System.out.println();
        //calling recursion to find the solution
        helper(0, s, new ArrayList<>(), output);
        return output;
    }
}
