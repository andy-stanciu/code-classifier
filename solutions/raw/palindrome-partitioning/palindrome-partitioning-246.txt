class Solution {

    public boolean checkPalindrome(String s) {
        int start = 0;
        int end = s.length() - 1;
        while (start < end) {
            if (s.charAt(start++) != s.charAt(end--))
                return false;
        }
        return true;
    }

    public void solve(String s, List<String> res, List<List<String>> set) {
        if (s.isEmpty()) {
            set.add(new ArrayList<>(res));
            return;
        }
        for (int i = 0; i < s.length(); i++) {
            if (checkPalindrome(s.substring(0, i + 1))) {
                res.add(s.substring(0, i + 1));
                solve(s.substring(i + 1, s.length()), res, set);
                res.remove(res.size() - 1);
            }
        }
    }

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        solve(s, new ArrayList<String>(), res);
        return res;
    }
}
