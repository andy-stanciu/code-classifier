class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList();
        List<String> list = new ArrayList();
        helperMethod(s, list, result, 0);
        return result;
    }

    void helperMethod(String s, List<String> list, List<List<String>> result, int start) {
        // base case
        if (start == s.length()) {
            result.add(new ArrayList(list));
            return;
        }
        for (int i = start; i < s.length(); i++) {
            if (isPalindrome(s, start, i)) {
                list.add(s.substring(start, i + 1));
                helperMethod(s, list, result, i + 1);
                list.remove(list.size() - 1);
            }
        }
    }

    public boolean isPalindrome(String s, int a_pointer, int b_pointer) {
        while (a_pointer <= b_pointer) {
            // charAt() method returns the character at the specified index in a string
            if (s.charAt(a_pointer) != s.charAt(b_pointer)) {
                return false;
            }
            a_pointer++;
            b_pointer--;
        }
        return true;
    }
}
