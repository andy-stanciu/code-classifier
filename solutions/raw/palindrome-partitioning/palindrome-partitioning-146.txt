class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> resultList = new ArrayList<>();
        backtrack(resultList, new ArrayList<String>(), s, 0);
        return resultList;
    }

    public void backtrack(List<List<String>> resultList, List<String> arrayList, String s, int index) {
        if (index == s.length()) {
            resultList.add(new ArrayList<>(arrayList));
            return;
        }
        for (int i = index; i < s.length(); ++i) {
            if (isPalindrome(s, index, i)) {
                arrayList.add(s.substring(index, i + 1));
                backtrack(resultList, arrayList, s, i + 1);
                arrayList.remove(arrayList.size() - 1);
            }
        }
    }

    boolean isPalindrome(String s, int start, int end) {
        while (start <= end) {
            if (s.charAt(start) != s.charAt(end))
                return false;
            start++;
            end--;
        }
        return true;
    }
}
