class Solution {

    public List<List<String>> partition(String s) {
        int n = s.length();
        boolean[][] dp = new boolean[n][n];
        // fill for i<j
        fillDp(dp, n, s);
        List<List<String>> ans = new ArrayList<>();
        partitionHelper(s, n, 0, ans, new ArrayList<String>(), dp);
        return ans;
    }

    static void partitionHelper(String s, int n, int idx, List<List<String>> ans, List<String> prevS, boolean[][] dp) {
        if (idx == n) {
            ans.add(new ArrayList<>(prevS));
        }
        for (int i = idx; i < n; ++i) {
            if (dp[idx][i]) {
                prevS.add(s.substring(idx, i + 1));
                partitionHelper(s, n, i + 1, ans, prevS, dp);
                prevS.remove(prevS.size() - 1);
            }
        }
    }

    static void fillDp(boolean[][] dp, int n, String s) {
        for (int i = 0; i < n; ++i) {
            dp[i][i] = true;
        }
        for (int gap = 1; gap < n; ++gap) {
            for (int i = 0; i < n - gap; ++i) {
                int j = i + gap;
                boolean isEqual = s.charAt(i) == s.charAt(j);
                boolean subS = (gap == 1) ? true : dp[i + 1][j - 1];
                dp[i][j] = isEqual && subS;
            }
        }
    }
}
