class Solution {

    private List<List<String>> result = new ArrayList<>();

    private List<String> current = new ArrayList<>();

    public List<List<String>> partition(String s) {
        backtrack(s, 0);
        return result;
    }

    public void backtrack(String s, int index) {
        if (index == s.length()) {
            result.add(new ArrayList<>(current));
            return;
        }
        for (int i = index; i < s.length(); i++) {
            String val = s.substring(index, i + 1);
            if (Palindrome(val)) {
                current.add(val);
                backtrack(s, i + 1);
                current.remove(current.size() - 1);
            }
        }
    }

    public boolean Palindrome(String s) {
        if (s.length() == 1)
            return true;
        int i = 0, j = s.length() - 1;
        while (i <= j) {
            if (s.charAt(i) != s.charAt(j))
                return false;
            i++;
            j--;
        }
        return true;
    }
}
