class Solution {

    boolean[][] dp;

    ArrayList<List<String>> ans = new ArrayList<>();

    void allPal(String s) {
        int n = s.length();
        dp = new boolean[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0, k = i; k < n; j++, k++) {
                if (j == k)
                    dp[j][k] = true;
                else if (i == 1 && s.charAt(k) == s.charAt(j))
                    dp[j][k] = true;
                else if (s.charAt(j) == s.charAt(k) && dp[j + 1][k - 1])
                    dp[j][k] = true;
            }
        }
    }

    void part(int start, String s2, ArrayList<String> res) {
        for (int i = start + 1; i < s2.length(); i++) {
            if (!dp[start][i - 1])
                continue;
            res.add(s2.substring(start, i));
            if (dp[i][s2.length() - 1]) {
                res.add(s2.substring(i));
                ans.add(new ArrayList<String>(res));
                res.remove(res.size() - 1);
            }
            part(i, s2, res);
            res.remove(res.size() - 1);
        }
    }

    public List<List<String>> partition(String s) {
        allPal(s);
        part(0, s, new ArrayList<String>());
        if (dp[0][s.length() - 1])
            ans.add(new ArrayList<String>() {

                {
                    add(s);
                }
            });
        return ans;
    }
}
