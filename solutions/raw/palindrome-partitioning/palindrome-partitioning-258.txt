class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        rec(s, 0, new ArrayList<>(), ans);
        return ans;
    }

    public boolean isPalindrome(String str) {
        int n = str.length();
        for (int i = 0; i < n / 2; i++) {
            if (str.charAt(i) != str.charAt(n - i - 1)) {
                return false;
            }
        }
        return true;
    }

    public void rec(String s, int idx, List<String> l, List<List<String>> ans) {
        if (idx == s.length()) {
            ans.add(new ArrayList<>(l));
            return;
        }
        for (int i = idx; i < s.length(); i++) {
            if (isPalindrome(s.substring(idx, i + 1))) {
                l.add(s.substring(idx, i + 1));
                rec(s, i + 1, l, ans);
                l.remove(l.size() - 1);
            }
        }
    }
}
