class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        List<String> ds = new ArrayList<>();
        findPolindrome(s, result, ds, 0);
        return result;
    }

    public static void findPolindrome(String s, List<List<String>> result, List<String> ds, int index) {
        if (index == s.length()) {
            result.add(new ArrayList<>(ds));
            return;
        }
        for (int i = index; i < s.length(); i++) {
            if (isPolindrome(s, index, i)) {
                ds.add(s.substring(index, i + 1));
                findPolindrome(s, result, ds, i + 1);
                ds.remove(ds.size() - 1);
            }
        }
    }

    public static boolean isPolindrome(String str, int start, int end) {
        while (start <= end) {
            if (str.charAt(start++) != str.charAt(end--)) {
                return false;
            }
        }
        return true;
    }
}
