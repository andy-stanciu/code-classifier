class Solution {

    List<List<String>> res;

    public List<List<String>> partition(String s) {
        res = new ArrayList<>();
        getPartition(s, 0, new ArrayList<>());
        return res;
    }

    public void getPartition(String s, int index, List<String> partition) {
        if (index == s.length()) {
            res.add(new ArrayList<>(partition));
            return;
        }
        for (int i = index; i < s.length(); i++) {
            if (isPalindrome(s, index, i)) {
                partition.add(s.substring(index, i + 1));
                getPartition(s, i + 1, partition);
                partition.remove(partition.size() - 1);
            }
        }
    }

    public boolean isPalindrome(String s, int low, int high) {
        while (low <= high) {
            if (s.charAt(low++) != s.charAt(high--))
                return false;
        }
        return true;
    }
}
