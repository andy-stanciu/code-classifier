class Solution {

    List<List<String>> res = new ArrayList<>();

    // global variables
    int n;

    public List<List<String>> partition(String s) {
        n = s.length();
        recur(s, 0, new ArrayList<>());
        return res;
    }

    public void recur(String s, int pathIndex, List<String> sublist) {
        if (pathIndex == n) {
            res.add(new ArrayList<>(sublist));
            return;
        }
        for (int end = pathIndex; end < n; end++) {
            if (isPalindrome(s, pathIndex, end)) {
                sublist.add(s.substring(pathIndex, end + 1));
                recur(s, end + 1, sublist);
                sublist.remove(sublist.size() - 1);
            }
        }
    }

    public boolean isPalindrome(String s, int start, int end) {
        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}
