class Solution {

    // TC: O(n^2) //n=s.length()
    // SC: O(n)
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        fillAllPartition(s, 0, new ArrayList<>(), ans);
        return ans;
    }

    private boolean isPalindrome(String s, int l, int r) {
        while (l < r) {
            if (s.charAt(l) != s.charAt(r)) {
                return false;
            }
            l++;
            r--;
        }
        return true;
    }

    private void fillAllPartition(String s, int currIndex, List<String> temp, List<List<String>> ans) {
        if (currIndex == s.length()) {
            ans.add(new ArrayList<>(temp));
            return;
        }
        for (int i = currIndex; i < s.length(); i++) {
            if (isPalindrome(s, currIndex, i)) {
                temp.add(s.substring(currIndex, i + 1));
                fillAllPartition(s, i + 1, temp, ans);
                temp.remove(temp.size() - 1);
            }
        }
    }
}
