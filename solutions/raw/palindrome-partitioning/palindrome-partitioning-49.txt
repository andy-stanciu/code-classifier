class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<List<String>>();
        find_palindromes(0, ans, new ArrayList<String>(), s);
        return ans;
    }

    public void find_palindromes(int index, List<List<String>> ans, List<String> current_list, String s) {
        if (index >= s.length())
            ans.add(new ArrayList<String>(current_list));
        for (int i = index; i < s.length(); i++) {
            if (is_palindrome(s, index, i) == true) {
                current_list.add(s.substring(index, i + 1));
                find_palindromes(i + 1, ans, current_list, s);
                current_list.remove(current_list.size() - 1);
            }
        }
    }

    private boolean is_palindrome(String s, int low, int high) {
        while (low < high) {
            if (s.charAt(low++) != s.charAt(high--))
                return false;
        }
        return true;
    }
}
