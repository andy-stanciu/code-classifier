class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> ans = new ArrayList<>();
        helper(s, res, ans);
        return res;
    }

    void helper(String up, List<List<String>> res, List<String> ans) {
        if (up.isEmpty()) {
            res.add(new ArrayList<>(ans));
            return;
        }
        for (int i = 1; i <= up.length(); i++) {
            String prefix = up.substring(0, i);
            if (isPalindrome(prefix)) {
                ans.add(prefix);
                helper(up.substring(i), res, ans);
                ans.remove(ans.size() - 1);
            }
        }
    }

    boolean isPalindrome(String s) {
        int i = 0, j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i) != s.charAt(j))
                return false;
            i++;
            j--;
        }
        return true;
    }
}
