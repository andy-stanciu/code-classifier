class Solution {

    private List<String> path = new ArrayList<>();

    private List<List<String>> ans = new ArrayList<>();

    private String s;

    public List<List<String>> partition(String s) {
        this.s = s;
        dfs(0);
        return ans;
    }

    private void dfs(int i) {
        int n = s.length();
        if (i == n) {
            ans.add(new ArrayList<>(path));
            return;
        }
        for (int j = i; j < n; ++j) {
            if (isPalindrome(i, j)) {
                //[i, j+1)
                path.add(s.substring(i, j + 1));
                dfs(j + 1);
                path.remove(path.size() - 1);
            }
        }
    }

    // [i, j]
    private boolean isPalindrome(int i, int j) {
        while (i < j) {
            if (s.charAt(i++) != s.charAt(j--)) {
                return false;
            }
        }
        return true;
    }
}
