class Solution {

    public List<List<String>> partition(String s) {
        dfs(0, s);
        return res;
    }

    boolean check(String s) {
        int l = 0, r = s.length() - 1;
        while (l < r) {
            if (s.charAt(l) != s.charAt(r))
                return false;
            l++;
            r--;
        }
        return true;
    }

    List<List<String>> res = new ArrayList<>();

    List<String> path = new ArrayList<>();

    void dfs(int u, String s) {
        if (u == s.length()) {
            res.add(new ArrayList<>(path));
        }
        for (int i = u; i < s.length(); i++) {
            String t = s.substring(u, i + 1);
            int idx = i + 1;
            if (check(t)) {
                path.add(t);
                dfs(idx, s);
                path.remove(path.size() - 1);
            }
        }
    }
}
