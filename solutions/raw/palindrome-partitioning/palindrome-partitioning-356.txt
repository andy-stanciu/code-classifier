class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        ArrayList<String> path = new ArrayList<>();
        //calling void function
        func(0, s, path, res);
        //return main answer as res
        return res;
    }

    public static void func(int idx, String s, ArrayList<String> path, List<List<String>> res) {
        //    base case
        if (idx == s.length()) {
            //stop when it comes to end of string
            res.add(new ArrayList<>(path));
            return;
        }
        //looping
        for (int i = idx; i < s.length(); i++) {
            if (isPalindrome(s, idx, i)) {
                //adding substring from index to ith
                path.add(s.substring(idx, i + 1));
                //reccursion
                func(i + 1, s, path, res);
                //backtracking step
                path.remove(path.size() - 1);
            }
        }
    }

    public static boolean isPalindrome(String s, int strt, int end) {
        while (strt <= end) {
            if (s.charAt(strt++) != s.charAt(end--))
                //check for pallindrome return false if not
                return false;
        }
        return true;
    }
}
