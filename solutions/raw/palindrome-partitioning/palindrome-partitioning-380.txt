class Solution {

    public boolean isPalindrome(String s, int start, int end) {
        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }

    public void part(String s, int idx, ArrayList<String> list, List<List<String>> ulist) {
        if (idx == s.length()) {
            ulist.add(new ArrayList<>(list));
            return;
        }
        for (int i = idx; i < s.length(); i++) {
            if (isPalindrome(s, idx, i)) {
                list.add(s.substring(idx, i + 1));
                part(s, i + 1, list, ulist);
                list.remove(list.size() - 1);
            }
        }
    }

    public List<List<String>> partition(String s) {
        List<List<String>> ulist = new ArrayList<>();
        ArrayList<String> list = new ArrayList<>();
        part(s, 0, list, ulist);
        return ulist;
    }
}
