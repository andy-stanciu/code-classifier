class Solution {

    public List<List<String>> partition(String s) {
        int n = s.length();
        int i = 0;
        List<List<String>> list = new ArrayList<>();
        List<String> path = new ArrayList<>();
        findall(i, n, list, path, s);
        return list;
    }

    public void findall(int i, int n, List<List<String>> list, List<String> path, String s) {
        if (i == n) {
            list.add(new ArrayList<>(path));
            return;
        }
        for (int j = i; j < n; j++) {
            if (ispal(s, i, j)) {
                path.add(s.substring(i, j + 1));
                findall(j + 1, n, list, path, s);
                path.remove(path.size() - 1);
            }
        }
    }

    public boolean ispal(String s, int start, int end) {
        while (start <= end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}
