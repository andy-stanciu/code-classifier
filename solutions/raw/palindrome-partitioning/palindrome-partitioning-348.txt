class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> temp = new ArrayList<>();
        backtrack(temp, res, s, 0);
        return res;
    }

    public boolean palindrome(String s, int start, int end) {
        while (start <= end) {
            if (s.charAt(start) != s.charAt(end))
                return false;
            start++;
            end--;
        }
        return true;
    }

    public void backtrack(List<String> temp, List<List<String>> res, String s, int start) {
        if (start == s.length()) {
            res.add(new ArrayList<>(temp));
        }
        for (int i = start; i < s.length(); i++) {
            if (palindrome(s, start, i)) {
                temp.add(s.substring(start, i + 1));
                backtrack(temp, res, s, i + 1);
                temp.remove(temp.size() - 1);
            }
        }
    }
}
