class Solution {

    public List<List<String>> partition(String s) {
        List<String> currState = new ArrayList<>();
        List<List<String>> res = new ArrayList<>();
        backtrack(res, currState, s.toCharArray(), 0);
        return res;
    }

    public void backtrack(List<List<String>> res, List<String> currState, char[] charArr, int start) {
        if (start == charArr.length) {
            res.add(new ArrayList<>(currState));
        }
        String s = "";
        for (int i = start; i < charArr.length; i++) {
            s += charArr[i];
            if (isPalindrome(s)) {
                currState.add(s);
                backtrack(res, currState, charArr, i + 1);
                currState.remove(currState.size() - 1);
            }
        }
    }

    public boolean isPalindrome(String s) {
        int left = 0;
        int right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}
