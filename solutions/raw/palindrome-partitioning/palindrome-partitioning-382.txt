class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> temp = new ArrayList<>();
        dfs(s, res, temp);
        return res;
    }

    public void dfs(String s, List<List<String>> res, List<String> temp) {
        if (s.length() == 0) {
            res.add(new ArrayList<>(temp));
            return;
        }
        int pointer = 1;
        while (pointer <= s.length()) {
            String part = s.substring(0, pointer);
            if (isPalindrome(part)) {
                temp.add(part);
                dfs(s.substring(pointer, s.length()), res, temp);
                temp.remove(temp.size() - 1);
            }
            pointer++;
        }
    }

    public boolean isPalindrome(String s) {
        int start = 0, end = s.length() - 1;
        while (start <= end) {
            if (s.charAt(start) != s.charAt(end))
                return false;
            start++;
            end--;
        }
        return true;
    }
}
