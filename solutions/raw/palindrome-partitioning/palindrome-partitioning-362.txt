class Solution {

    private List<List<String>> answer;

    private boolean[][] memo;

    public List<List<String>> partition(String s) {
        memo = new boolean[s.length()][s.length()];
        answer = new ArrayList<>();
        findPartitions(s, 0, new ArrayList<>());
        return answer;
    }

    private void findPartitions(String s, int startIdx, List<String> curr) {
        if (startIdx == s.length()) {
            answer.add(new ArrayList<>(curr));
            return;
        }
        for (int i = startIdx; i < s.length(); i++) {
            if (isValidPalindrome(s, startIdx, i)) {
                curr.add(s.substring(startIdx, i + 1));
                findPartitions(s, i + 1, curr);
                curr.remove(curr.size() - 1);
            }
        }
    }

    private boolean isValidPalindrome(String s, int left, int right) {
        // single char is always palindrome
        if (left >= right) {
            return true;
        }
        // check if memoized
        if (memo[left][right]) {
            return true;
        }
        // check outside chars
        if (s.charAt(left) != s.charAt(right)) {
            return false;
        }
        // recurse to subproblem
        boolean isValid = isValidPalindrome(s, left + 1, right - 1);
        // store subproblem answer
        memo[left][right] = isValid;
        return isValid;
    }
}
