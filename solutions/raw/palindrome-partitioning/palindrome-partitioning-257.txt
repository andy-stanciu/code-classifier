class Solution {

    public boolean palindrome(String s, int start, int end) {
        int mid = 0;
        while (start <= end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }

    public void findpartition(int index, String s, List<List<String>> sp, List<String> pa) {
        if (index == s.length()) {
            sp.add(new ArrayList<>(pa));
            return;
        }
        for (int i = index; i < s.length(); i++) {
            if (palindrome(s, index, i)) {
                pa.add(s.substring(index, i + 1));
                findpartition(i + 1, s, sp, pa);
                pa.remove(pa.size() - 1);
            }
        }
    }

    public List<List<String>> partition(String s) {
        List<List<String>> part = new ArrayList<>();
        List<String> pa = new ArrayList<>();
        findpartition(0, s, part, pa);
        return part;
    }
}
