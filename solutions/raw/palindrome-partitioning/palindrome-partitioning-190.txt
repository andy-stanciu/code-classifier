class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        helper(s, 0, ans, new ArrayList<>(), "");
        return ans;
    }

    public void helper(String s, int idx, List<List<String>> ans, List<String> list, String curStr) {
        if (idx >= s.length()) {
            if (curStr.length() != 0)
                return;
            ans.add(new ArrayList<>(list));
            return;
        }
        curStr += String.valueOf(s.charAt(idx));
        helper(s, idx + 1, ans, list, curStr);
        if (isPalindrome(curStr)) {
            list.add(curStr);
            helper(s, idx + 1, ans, list, "");
            list.remove(list.size() - 1);
        }
    }

    public boolean isPalindrome(String s) {
        int start = 0;
        int end = s.length() - 1;
        while (start < end) {
            if (s.charAt(start++) != s.charAt(end--)) {
                return false;
            }
        }
        return true;
    }
}
