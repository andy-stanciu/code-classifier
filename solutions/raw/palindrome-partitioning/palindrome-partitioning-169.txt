class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        List<String> ls = new ArrayList<>();
        solve(s, ans, 0, ls);
        return ans;
    }

    public void solve(String s, List<List<String>> ans, int idx, List<String> ls) {
        if (idx == s.length()) {
            ans.add(new ArrayList<>(ls));
            return;
        }
        for (int i = idx; i < s.length(); i++) {
            if (isPalindrom(s, idx, i)) {
                ls.add(s.substring(idx, i + 1));
                solve(s, ans, i + 1, ls);
                ls.remove(ls.size() - 1);
            }
        }
    }

    public boolean isPalindrom(String s, int i, int j) {
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}
