class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        backTracking(0, s, new ArrayList<>(), result);
        return result;
    }

    public static void backTracking(int index, String s, List<String> currList, List<List<String>> result) {
        if (index == s.length()) {
            result.add(new ArrayList<>(currList));
            return;
        }
        for (int i = index + 1; i <= s.length(); i++) {
            String substr = s.substring(index, i);
            if (isPalindrome(substr)) {
                currList.add(substr);
                backTracking(i, s, currList, result);
                currList.remove(currList.size() - 1);
            }
        }
    }

    public static boolean isPalindrome(String str) {
        StringBuilder sb = new StringBuilder(str);
        String reverse = sb.reverse().toString();
        return str.equals(reverse);
    }
}
