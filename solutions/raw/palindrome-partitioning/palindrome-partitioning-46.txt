class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> list = new ArrayList<>();
        recursion(0, s, list, res);
        return res;
    }

    void recursion(int i, String s, List<String> list, List<List<String>> res) {
        if (i == s.length()) {
            res.add(new ArrayList<>(list));
            return;
        }
        for (int x = i; x < s.length(); x++) {
            if (isPalindrome(i, x, s)) {
                list.add(s.substring(i, x + 1));
                recursion(x + 1, s, list, res);
                list.remove(list.size() - 1);
            }
        }
    }

    boolean isPalindrome(int i, int n, String s) {
        while (i <= n) {
            if (s.charAt(i++) != s.charAt(n--))
                return false;
        }
        return true;
    }
}
