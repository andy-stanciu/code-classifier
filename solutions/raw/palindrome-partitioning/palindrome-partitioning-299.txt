class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> list = new ArrayList<>();
        partition(0, list, new ArrayList<String>(), s);
        return list;
    }

    private void partition(int index, List<List<String>> ans, List<String> list, String str) {
        if (str.length() == index) {
            ans.add(new ArrayList<String>(list));
            return;
        }
        for (int i = index; i < str.length(); i++) {
            if (isPalindrome(str, index, i)) {
                list.add(str.substring(index, i + 1));
                partition(i + 1, ans, list, str);
                list.remove(list.size() - 1);
            }
        }
    }

    private boolean isPalindrome(String s, int beg, int end) {
        while (beg < end) {
            if (s.charAt(beg) != s.charAt(end))
                return false;
            beg++;
            end--;
        }
        return true;
    }
}
