class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> out = new ArrayList<>();
        backtrack(res, out, s, 0);
        return res;
    }

    private void backtrack(List<List<String>> res, List<String> out, String s, int index) {
        if (index >= s.length()) {
            res.add(new ArrayList(out));
            return;
        }
        for (int i = index; i < s.length(); i++) {
            if (isPallindrome(s, index, i)) {
                out.add(s.substring(index, i + 1));
                backtrack(res, out, s, i + 1);
                out.remove(out.size() - 1);
            }
        }
    }

    boolean isPallindrome(String s, int low, int high) {
        while (low < high) {
            if (s.charAt(low) == s.charAt(high)) {
                low++;
                high--;
            } else {
                return false;
            }
        }
        return true;
    }
}
