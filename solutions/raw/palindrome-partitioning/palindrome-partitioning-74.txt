class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        List<String> eachPartition = new ArrayList();
        palindromePartition(s, 0, eachPartition, ans);
        return ans;
    }

    private void palindromePartition(String s, int index, List<String> eachPartition, List<List<String>> ans) {
        if (index == s.length()) {
            ans.add(new ArrayList<>(eachPartition));
            return;
        }
        for (int i = index + 1; i <= s.length(); i++) {
            if (isPalindrome(s, index, i)) {
                eachPartition.add(s.substring(index, i));
                palindromePartition(s, i, eachPartition, ans);
                eachPartition.remove(eachPartition.size() - 1);
            }
        }
    }

    private boolean isPalindrome(String s, int start, int end) {
        end--;
        while (start <= end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}
