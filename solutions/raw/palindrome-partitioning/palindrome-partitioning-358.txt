class Solution {

    List<List<String>> ans = new ArrayList<>();

    public List<List<String>> partition(String s) {
        List<String> list = new ArrayList<>();
        helper(0, s, list);
        return ans;
    }

    void helper(int ind, String s, List<String> list) {
        if (ind == s.length()) {
            ans.add(new ArrayList<String>(list));
            return;
        }
        for (int j = ind + 1; j <= s.length(); j++) {
            String local = s.substring(ind, j);
            if (palindrome(local)) {
                list.add(local);
                helper(j, s, list);
                list.remove(list.size() - 1);
            }
        }
    }

    private boolean palindrome(String s) {
        if (s == "")
            return false;
        int start = 0;
        int end = s.length() - 1;
        while (start < end) {
            if (s.charAt(start) != s.charAt(end))
                return false;
            start++;
            end--;
        }
        return true;
    }
}
