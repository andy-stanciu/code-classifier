class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> path = new ArrayList<>();
        checkPalindrome(0, s, path, res);
        return res;
    }

    public static void checkPalindrome(int index, String str, List<String> path, List<List<String>> res) {
        if (index == str.length()) {
            res.add(new ArrayList<>(path));
            return;
        }
        for (int i = index; i < str.length(); ++i) {
            if (isPalindrome(str, index, i)) {
                path.add(str.substring(index, i + 1));
                checkPalindrome(i + 1, str, path, res);
                path.remove(path.size() - 1);
            }
        }
    }

    public static boolean isPalindrome(String s, int start, int end) {
        while (start <= end) {
            if (s.charAt(start++) != s.charAt(end--)) {
                return false;
            }
        }
        return true;
    }
}
