class Solution {

    public boolean isPalindrome(String s) {
        for (int i = 0; i < s.length() / 2; i++) {
            if (s.charAt(i) != s.charAt(s.length() - 1 - i)) {
                return false;
            }
        }
        return true;
    }

    public void find(String s, List<String> curr, List<List<String>> l, int idx) {
        if (idx == s.length()) {
            l.add(new ArrayList<>(curr));
            return;
        }
        String s1 = "";
        for (int i = idx; i < s.length(); i++) {
            s1 += s.charAt(i);
            if (isPalindrome(s1)) {
                curr.add(s1);
                find(s, curr, l, i + 1);
                curr.remove(curr.size() - 1);
            }
        }
    }

    public List<List<String>> partition(String s) {
        List<List<String>> l = new ArrayList<>();
        find(s, new ArrayList<String>(), l, 0);
        return l;
    }
}
