class Solution {

    public boolean isPalindrome(String s, int st, int end) {
        while (st < end) {
            if (s.charAt(st) != s.charAt(end)) {
                return false;
            }
            st++;
            end--;
        }
        return true;
    }

    public void helper(String str, int s, List<String> curr, List<List<String>> res) {
        if (s >= str.length()) {
            res.add(new ArrayList<>(curr));
            return;
        }
        for (int i = s; i < str.length(); i++) {
            if (isPalindrome(str, s, i)) {
                curr.add(str.substring(s, i + 1));
                helper(str, i + 1, curr, res);
                curr.remove(curr.size() - 1);
            }
        }
    }

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> path = new ArrayList<>();
        helper(s, 0, path, res);
        return res;
    }
}
