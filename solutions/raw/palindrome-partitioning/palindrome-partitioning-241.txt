class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> list = new ArrayList<>();
        List<String> current = new ArrayList<>();
        subset(0, list, current, s);
        return list;
    }

    private void subset(int index, List<List<String>> list, List<String> current, String s) {
        if (index == s.length()) {
            list.add(new ArrayList<>(current));
            return;
        }
        for (int i = index; i < s.length(); i++) {
            if (isPalindrome(s, index, i)) {
                current.add(s.substring(index, i + 1));
                subset(i + 1, list, current, s);
                current.remove(current.size() - 1);
            }
        }
    }

    private boolean isPalindrome(String s, int i, int j) {
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}
