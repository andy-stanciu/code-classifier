class Solution {

    public List<List<String>> partition(String s) {
        int n = s.length();
        List<List<String>> ans = new ArrayList<>();
        List<String> temp = new ArrayList<>();
        recursion(0, s, ans, temp, n);
        return ans;
    }

    void recursion(int start, String s, List<List<String>> ans, List<String> temp, int n) {
        if (start == n) {
            ans.add(new ArrayList<>(temp));
        }
        for (int i = start; i < n; i++) {
            if (isPallindrome(start, s, i)) {
                temp.add(s.substring(start, i + 1));
                recursion(i + 1, s, ans, temp, n);
                temp.remove(temp.size() - 1);
            }
        }
    }

    boolean isPallindrome(int start, String s, int end) {
        while (start <= end) {
            if (s.charAt(start++) != s.charAt(end--))
                return false;
        }
        return true;
    }
}
