public class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        List<String> subset = new ArrayList<>();
        int n = s.length();
        helper(s, 0, n, subset, ans);
        return ans;
    }

    public void helper(String s, int start, int n, List<String> subset, List<List<String>> ans) {
        if (start == n) {
            ans.add(new ArrayList<>(subset));
            return;
        }
        for (int end = start; end < n; end++) {
            if (isPalindrome(s, start, end)) {
                subset.add(s.substring(start, end + 1));
                helper(s, end + 1, n, subset, ans);
                subset.remove(subset.size() - 1);
            }
        }
    }

    public boolean isPalindrome(String s, int left, int right) {
        while (left < right) {
            if (s.charAt(left++) != s.charAt(right--)) {
                return false;
            }
        }
        return true;
    }
}
