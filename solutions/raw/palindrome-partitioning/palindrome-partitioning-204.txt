class Solution {

    List<List<String>> res = new ArrayList<>();

    public List<List<String>> partition(String s) {
        helper(s, 0, new ArrayList<>());
        return res;
    }

    public void helper(String s, int index, List<String> list) {
        if (index == s.length()) {
            List<String> newList = List.copyOf(list);
            res.add(newList);
            return;
        }
        for (int i = index; i < s.length(); i++) {
            if (isPalindrome(s.substring(index, i + 1))) {
                list.add(s.substring(index, i + 1));
                helper(s, i + 1, list);
                list.remove(list.size() - 1);
            }
        }
    }

    public boolean isPalindrome(String str) {
        int i = 0, j = str.length() - 1;
        while (i < j) {
            if (str.charAt(i) != str.charAt(j))
                return false;
            i++;
            j--;
        }
        return true;
    }
}
