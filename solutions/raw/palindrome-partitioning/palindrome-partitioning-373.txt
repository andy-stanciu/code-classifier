class Solution {

    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        helper(s, 0, new ArrayList<>(), result);
        return result;
    }

    private void helper(String s, int start, List<String> currentList, List<List<String>> result) {
        if (s.length() == start) {
            result.add(new ArrayList<>(currentList));
            return;
        }
        for (int i = start; i < s.length(); ++i) {
            String subString = s.substring(start, i + 1);
            if (isPalindrome(subString)) {
                currentList.add(subString);
                helper(s, i + 1, currentList, result);
                currentList.remove(currentList.size() - 1);
            }
        }
    }

    private boolean isPalindrome(String s) {
        int start = 0, end = s.length() - 1;
        while (start < end) {
            if (s.charAt(start) != s.charAt(end))
                return false;
            ++start;
            --end;
        }
        return true;
    }
}
