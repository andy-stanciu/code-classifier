class Solution {

    HashSet<List<String>> res = new HashSet<List<String>>();

    public List<List<String>> partition(String s) {
        int n = s.length();
        if (n == 0)
            return new ArrayList<List<String>>();
        partition(s, 0, new ArrayList<String>());
        return new ArrayList(res);
    }

    public void partition(String s, int start, List<String> ls) {
        if (start == s.length()) {
            res.add(new ArrayList<String>(ls));
        }
        ;
        for (int end = start; end < s.length(); end++) {
            if (isPalindrome(s, start, end)) {
                ls.add(s.substring(start, end + 1));
                partition(s, end + 1, ls);
                ls.remove(ls.size() - 1);
            }
        }
    }

    public boolean isPalindrome(String s, int start, int end) {
        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}
