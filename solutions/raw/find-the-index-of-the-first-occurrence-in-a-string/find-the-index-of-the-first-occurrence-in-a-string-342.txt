public class Solution {

    // Function to compute the LSP (Longest Suffix Prefix) array for a given pattern.
    public int[] computeLSPArray(String pattern) {
        // Length of the pattern
        int n = pattern.length();
        // Array to hold the length of the longest prefix suffix
        int[] lsp = new int[n];
        // Length of the current longest prefix which is also suffix
        int length = 0;
        int i = 1;
        // The longest prefix suffix for the first character is always 0
        lsp[0] = 0;
        // Build the lsp array using a loop
        while (i < n) {
            if (pattern.charAt(i) == pattern.charAt(length)) {
                // When there\'s a match, increase the length and set lsp[i]
                length++;
                lsp[i] = length;
                i++;
            } else {
                // On a mismatch, decrement the length to the last known good position
                if (length != 0) {
                    length = lsp[length - 1];
                } else {
                    // If no known good position, set lsp[i] to 0 and move to the next character
                    lsp[i] = 0;
                    i++;
                }
            }
        }
        return lsp;
    }

    // Function to find the first occurrence of the pattern in the given text using the KMP algorithm
    public int strStr(String text, String pattern) {
        // Edge case for empty pattern
        if (pattern.isEmpty())
            return 0;
        // Compute the LSP array for the pattern
        int[] lps = computeLSPArray(pattern);
        // Index for text
        int i = 0;
        // Index for pattern
        int j = 0;
        while (i < text.length()) {
            if (pattern.charAt(j) == text.charAt(i)) {
                // When characters match, increment both indices
                j++;
                i++;
            }
            if (j == pattern.length()) {
                // If we have matched the entire pattern length, return the start index of the pattern in the text
                return i - j;
            } else if (i < text.length() && pattern.charAt(j) != text.charAt(i)) {
                // On a mismatch, adjust the pattern index using the lsp array or move the text index forward
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }
        // If no match is found, return -1
        return -1;
    }
}
