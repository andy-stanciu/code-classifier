class Solution {

    public int strStr(String haystack, String needle) {
        // If haystack is empty or smaller than needle, return -1 (needle can\'t be found)
        if (haystack.length() == 0 || haystack.length() < needle.length()) {
            return -1;
        }
        // Loop through haystack up to the point where needle can fit
        for (int i = 0; i <= haystack.length() - needle.length(); i++) {
            // Check if the current character matches the first character of needle
            if (haystack.charAt(i) == needle.charAt(0)) {
                // Index to iterate through haystack
                int index = i;
                // Index to iterate through needle
                int temp = 0;
                // Compare characters of haystack and needle
                while (index < haystack.length() && temp < needle.length()) {
                    if (haystack.charAt(index) != needle.charAt(temp)) {
                        // If characters don\'t match, break the loop
                        break;
                    }
                    // Move to next character in haystack
                    index++;
                    // Move to next character in needle
                    temp++;
                }
                // If all characters of needle matched, return starting index
                if (temp == needle.length()) {
                    return i;
                }
            }
        }
        // If needle is not found, return -1
        return -1;
    }
}
