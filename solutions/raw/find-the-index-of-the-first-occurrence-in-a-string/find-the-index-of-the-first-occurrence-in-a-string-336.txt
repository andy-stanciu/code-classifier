class Solution {

    public int strStr(String haystack, String needle) {
        // If the haystack is shorter than the needle, return -1 (no match possible)
        if (haystack.length() < needle.length())
            return -1;
        int j = 0, i = 0, k = 0, index = -1;
        // Loop through haystack, ensuring there is enough space left for the needle
        for (i = 0; i <= haystack.length() - needle.length(); i++) {
            // Check if the first character of needle matches the current haystack character
            if (haystack.charAt(i) == needle.charAt(j)) {
                index = i;
                // Start comparing from this index
                k = i;
                // Check the rest of the characters in needle
                for (int l = 0; l < needle.length(); l++) {
                    // Break if there\'s a mismatch or if index goes out of bounds
                    if (k >= haystack.length() || haystack.charAt(k) != needle.charAt(l)) {
                        index = -1;
                        break;
                    } else // If the entire needle is matched, return the start index
                    if (l == needle.length() - 1) {
                        return index;
                    }
                    // Move to the next character in haystack
                    k++;
                }
            }
        }
        // If no match is found, return -1
        return index;
    }
}
