class Solution {

    public int strStr(String haystack, String needle) {
        int n = haystack.length();
        int m = needle.length();
        if (needle.isEmpty())
            return 0;
        for (int i = 0; i < n; ++i) {
            if (haystack.charAt(i) == needle.charAt(0)) {
                //there is chance of containing needle in hystack cause first char of needle is equal to ith char of haystack
                int l = i, k = 0;
                //so we will loop through the haystack string untill we got char same as needle char
                // l is pointer to pointing at ith char in hayspan
                // k is pointer to 0th char in needle
                // we will increment these pointer untill this cross the length of their respective string and while char at i and char at k is same
                // we will break loop if we found un eqality in char, because after un equality we can\'t say that needle should be starting at index i
                while (k < m && l < n) {
                    if (haystack.charAt(l) == needle.charAt(k)) {
                        l++;
                        k++;
                    } else {
                        break;
                    }
                }
                //if we have increment k till length of needle then we are sure that needle is part to haystack string
                if (k == m)
                    return i;
            }
        }
        return -1;
    }
}
