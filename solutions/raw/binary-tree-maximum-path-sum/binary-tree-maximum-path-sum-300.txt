/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int maxPathSum(TreeNode root) {
        // recusrsive solve left path sum and right path sum and check by math.max whcih one is maximum abd return
        int[] maxSum = new int[] { Integer.MIN_VALUE };
        pathsum(root, maxSum);
        return maxSum[0];
    }

    private int pathsum(TreeNode root, int[] sum) {
        if (root == null) {
            return 0;
        }
        //avoid negitive
        int leftsum = Math.max(0, pathsum(root.left, sum));
        //avoid negitive
        int rightsum = Math.max(0, pathsum(root.right, sum));
        // update
        sum[0] = Math.max(sum[0], leftsum + rightsum + root.val);
        // return the maximum path sum till current node
        return Math.max(leftsum, rightsum) + root.val;
    }
}
