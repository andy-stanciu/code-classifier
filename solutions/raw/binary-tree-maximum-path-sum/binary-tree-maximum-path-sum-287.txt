/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int globalMax = Integer.MIN_VALUE;

    public int maxPathSum(TreeNode root) {
        if (root == null)
            return globalMax;
        dfs(root);
        return globalMax;
    }

    private int dfs(TreeNode node) {
        // return the maximum sum going through it.
        int nodeVal = node.val;
        if (node.left == null && node.right == null) {
            globalMax = Math.max(globalMax, nodeVal);
            return nodeVal;
        }
        int left = node.left == null ? 0 : dfs(node.left);
        int right = node.right == null ? 0 : dfs(node.right);
        int localMax = nodeVal + left + right;
        localMax = Math.max(localMax, nodeVal + left);
        localMax = Math.max(localMax, nodeVal + right);
        localMax = Math.max(localMax, nodeVal);
        globalMax = Math.max(localMax, globalMax);
        return Math.max(Math.max(left, right) + nodeVal, nodeVal);
    }
}
