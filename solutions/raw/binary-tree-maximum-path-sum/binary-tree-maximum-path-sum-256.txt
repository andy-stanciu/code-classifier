/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int globalMax = -Integer.MAX_VALUE;

    public int maxPathSum(TreeNode root) {
        findMaximumPathSumRecursive(root);
        return globalMax;
    }

    public int findMaximumPathSumRecursive(TreeNode root) {
        if (root == null)
            return 0;
        int leftMax = findMaximumPathSumRecursive(root.left);
        int rightMax = findMaximumPathSumRecursive(root.right);
        leftMax = Math.max(leftMax, 0);
        rightMax = Math.max(rightMax, 0);
        int localmaxima = leftMax + rightMax + root.val;
        globalMax = Math.max(globalMax, localmaxima);
        return Math.max(leftMax, rightMax) + root.val;
    }
}
