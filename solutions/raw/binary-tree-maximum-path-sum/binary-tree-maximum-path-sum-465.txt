/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int maxPathSum(TreeNode root) {
        int[] maxSum = new int[1];
        maxSum[0] = Integer.MIN_VALUE;
        recursiveTraversalFindDepth(root, maxSum);
        return maxSum[0];
    }

    /*
       Method Used: post order traversal
     */
    public int recursiveTraversalFindDepth(TreeNode root, int[] maxSum) {
        if (root == null)
            return 0;
        int left = recursiveTraversalFindDepth(root.left, maxSum);
        left = left < 0 ? 0 : left;
        int right = recursiveTraversalFindDepth(root.right, maxSum);
        right = right < 0 ? 0 : right;
        maxSum[0] = Math.max(maxSum[0], root.val + left + right);
        return root.val + Math.max(left, right);
    }
}
