/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int maxresult = Integer.MIN_VALUE;

    public int maxPathSum(TreeNode root) {
        helper(root);
        return maxresult;
    }

    public int helper(TreeNode node) {
        if (node == null)
            return 0;
        int leftmax = helper(node.left);
        int rightmax = helper(node.right);
        // 4 possibilities
        // max is node itself
        // node + left subtree
        // node + right subtree
        // node + left and right subtrees
        int currentsum = Math.max(node.val, Math.max(node.val + leftmax, Math.max(node.val + rightmax, node.val + leftmax + rightmax)));
        maxresult = Math.max(maxresult, currentsum);
        return Math.max(node.val, Math.max(node.val + leftmax, node.val + rightmax));
    }
}
