/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    private int max = Integer.MIN_VALUE;

    public int maxPathSum(TreeNode root) {
        if (root == null)
            return 0;
        int n = traverse(root, null);
        return Math.max(max, n);
    }

    private int traverse(TreeNode root, TreeNode parent) {
        if (root == null) {
            return (parent.val >= 0) ? 0 : -1001;
        }
        int left = traverse(root.left, root);
        int right = traverse(root.right, root);
        max = Math.max(max, root.val);
        max = Math.max(max, Math.max(left, right) + root.val);
        max = Math.max(max, left + root.val + right);
        if (root.left != null && root.right != null) {
            return Math.max(root.val, Math.max(left, right) + root.val);
        } else if (root.left != null) {
            return Math.max(root.val, left + root.val);
        } else if (root.right != null) {
            return Math.max(root.val, right + root.val);
        }
        return root.val;
    }
}
