/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int max_path_sum = Integer.MIN_VALUE;

    public int maxPathSum(TreeNode root) {
        findSum(root);
        return max_path_sum;
    }

    private int findSum(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int left_child_path = findSum(root.left);
        int right_child_path = findSum(root.right);
        int sum_include_this_node = left_child_path + right_child_path + root.val;
        int possible_max_value = Math.max(Math.max(left_child_path + root.val, right_child_path + root.val), root.val);
        max_path_sum = Math.max(Math.max(max_path_sum, sum_include_this_node), possible_max_value);
        return possible_max_value;
    }
}
