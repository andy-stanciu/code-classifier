/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    // Variable to keep track of the maximum path sum encountered
    int sum = Integer.MIN_VALUE;

    public int maxPathSum(TreeNode root) {
        // Initiates the recursive path function
        path(root);
        // Return the maximum path sum found
        return sum;
    }

    private int path(TreeNode root) {
        // Base case: if the node is null, return 0
        if (root == null) {
            return 0;
        }
        // Recursively calculate the maximum path sums for the left and right subtrees
        int left = path(root.left);
        int right = path(root.right);
        // Calculate the maximum path sum including the current node
        int max = Math.max(left + root.val, Math.max(right + root.val, Math.max(root.val, left + right + root.val)));
        // Update the global maximum path sum if the current max is greater
        sum = Math.max(sum, max);
        // Return the maximum path sum extending to one side
        return Math.max(Math.max(left, right) + root.val, root.val);
    }
}
