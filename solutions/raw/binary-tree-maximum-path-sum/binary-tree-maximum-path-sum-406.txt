/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int max = Integer.MIN_VALUE;

    public int maxPathSum(TreeNode root) {
        solve(root);
        // TODO
        return max;
    }

    public int solve(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int leftPath = solve(root.left);
        int rightPath = solve(root.right);
        int leftAndRoot = leftPath + root.val;
        int rightAndRoot = rightPath + root.val;
        int bestPath = Math.max(Math.max(leftAndRoot, rightAndRoot), root.val);
        max = Math.max(max, Math.max(bestPath, leftPath + rightPath + root.val));
        return bestPath;
    }
}
