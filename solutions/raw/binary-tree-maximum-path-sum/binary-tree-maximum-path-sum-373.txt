/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int maxPathSum = Integer.MIN_VALUE;

    public int maxPathSum(TreeNode root) {
        calcPathSum(root);
        return maxPathSum;
    }

    private int calcPathSum(TreeNode node) {
        if (node == null)
            return 0;
        int leftAdjustedSum = Math.max(calcPathSum(node.left), 0);
        int rightAdjustedSum = Math.max(calcPathSum(node.right), 0);
        maxPathSum = Math.max(maxPathSum, leftAdjustedSum + rightAdjustedSum + node.val);
        return Math.max(leftAdjustedSum, rightAdjustedSum) + node.val;
    }
}
