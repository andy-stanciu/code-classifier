/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int max = Integer.MIN_VALUE;

    public int maxPathSum(TreeNode root) {
        if (root.left == null && root.right == null) {
            return root.val;
        }
        doInOrderTraversal(root);
        return max;
    }

    private int doInOrderTraversal(TreeNode root) {
        if (root == null) {
            return -1001;
        }
        int n = root.val;
        if (root.left == null && root.right == null) {
            return n;
        }
        int l = doInOrderTraversal(root.left);
        int r = doInOrderTraversal(root.right);
        max = Math.max(max, l);
        max = Math.max(max, r);
        max = Math.max(max, n);
        max = Math.max(max, l + r + n);
        max = Math.max(max, l + n);
        max = Math.max(max, r + n);
        return Math.max(Math.max(l + n, r + n), n);
    }
}
