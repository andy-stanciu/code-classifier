/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int max = -1000;

    public int maxPathSum(TreeNode root) {
        findMaxPath(root);
        return max;
    }

    public int findMaxPath(TreeNode node) {
        if (node == null)
            return 0;
        int left = findMaxPath(node.left);
        int right = findMaxPath(node.right);
        int pathSumFromNode = node.val + left + right;
        int pathSumMaxSingleSide = node.val + Math.max(left, right);
        int localMax = Math.max(pathSumMaxSingleSide, pathSumFromNode);
        max = Math.max(max, Math.max(localMax, node.val));
        return Math.max(node.val, node.val + Math.max(left, right));
    }
}
