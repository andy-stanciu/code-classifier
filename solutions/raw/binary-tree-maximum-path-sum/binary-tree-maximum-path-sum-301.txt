class Solution {

    // Initialize a global variable to store the maximum path sum.
    private int ans = Integer.MIN_VALUE;

    public int maxPathSum(TreeNode root) {
        if (root == null) {
            // If the root is null, return 0.
            return 0;
        }
        // Call the helper function to traverse the tree and update the maximum path
        helper(root);
        // sum.
        // Return the maximum path sum.
        return ans;
    }

    private int helper(TreeNode root) {
        if (root == null) {
            // If the current node is null, return 0.
            return 0;
        }
        // Recursively calculate the maximum sum starting from the left and right
        // subtrees.
        // Get the maximum sum of the left subtree.
        int left = Math.max(0, helper(root.left));
        // Get the maximum sum of the right subtree.
        int right = Math.max(0, helper(root.right));
        // Update the global maximum path sum by considering the current node and its
        // subtrees.
        ans = Math.max(ans, left + right + root.val);
        // Return the maximum sum of the path starting from the current node.
        return Math.max(left, right) + root.val;
    }
}
