/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    int maxPath = Integer.MIN_VALUE;

    public int maxPathSum(TreeNode root) {
        getMaxGain(root);
        return maxPath;
    }

    private int getMaxGain(TreeNode node) {
        if (node == null)
            return 0;
        int gainOnLeft = Math.max(getMaxGain(node.left), 0);
        int gainOnRight = Math.max(getMaxGain(node.right), 0);
        int currMaxPath = node.val + gainOnLeft + gainOnRight;
        maxPath = Math.max(maxPath, currMaxPath);
        return node.val + Math.max(gainOnLeft, gainOnRight);
    }
}
