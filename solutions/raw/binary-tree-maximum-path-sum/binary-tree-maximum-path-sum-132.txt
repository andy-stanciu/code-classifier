/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int result = Integer.MIN_VALUE;

    public int maxPathSum(TreeNode root) {
        helper(root);
        return result;
    }

    private int helper(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int sumFromLeftPath = helper(root.left) + root.val;
        int sumFromRightPath = helper(root.right) + root.val;
        int sumForEntirePath = sumFromLeftPath + sumFromRightPath - root.val;
        int maxInThisPath = Math.max(sumFromLeftPath, Math.max(sumFromRightPath, Math.max(sumForEntirePath, root.val)));
        result = Math.max(result, maxInThisPath);
        return Math.max(sumFromLeftPath, Math.max(sumFromRightPath, root.val));
    }
}
