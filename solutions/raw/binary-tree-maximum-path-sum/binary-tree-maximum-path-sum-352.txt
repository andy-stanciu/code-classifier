/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int maxPathSum(TreeNode root) {
        int num = findMaxSum(root);
        return val;
    }

    static int val;

    public int findMaxSum(TreeNode root) {
        val = Integer.MIN_VALUE;
        findMaxUtil(root);
        return val;
    }

    public int findMaxUtil(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int l = findMaxUtil(root.left);
        int r = findMaxUtil(root.right);
        int maxSingle = Math.max(Math.max(l, r) + root.val, root.val);
        int maxTop = Math.max(maxSingle, l + r + root.val);
        val = Math.max(maxTop, val);
        return maxSingle;
    }
}
