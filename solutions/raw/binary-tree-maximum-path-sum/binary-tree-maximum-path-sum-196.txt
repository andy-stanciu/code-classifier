/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int max = Integer.MIN_VALUE;

    public int maxPathSum(TreeNode root) {
        // we need to fill the max variable
        maxPath(root);
        return max;
    }

    private int maxPath(TreeNode root) {
        if (root == null)
            return 0;
        // ignore negative values as they only reduce the sum
        int leftMax = Math.max(0, maxPath(root.left));
        int rightMax = Math.max(0, maxPath(root.right));
        // we see if the path can give us maximum sum
        max = Math.max(max, (root.val + leftMax + rightMax));
        // real important step, what to return
        // we returned root.val and we choose b/w left or right path
        // and return whichever path gives maximum value
        return root.val + Math.max(leftMax, rightMax);
    }
}
