/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int maxPathSum(TreeNode root) {
        int[] maxSum = new int[1];
        maxSum[0] = Integer.MIN_VALUE;
        // ans=Integer.MIN_VALUE;
        dfs(root, maxSum);
        return maxSum[0];
    }

    int dfs(TreeNode node, int[] ans) {
        if (node == null)
            return 0;
        //handle -ve node.
        int left = Math.max(0, dfs(node.left, ans));
        int right = Math.max(0, dfs(node.right, ans));
        int straightPathSum = node.val + Math.max(left, right);
        // we cant take this sum forward.
        int curvedPathSum = left + right + node.val;
        //maxSoFar
        ans[0] = Math.max(ans[0], Math.max(straightPathSum, curvedPathSum));
        // for next recursive call.
        return straightPathSum;
    }
}
