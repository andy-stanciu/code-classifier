/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int maxSum = Integer.MIN_VALUE;

    public int maxPathSum(TreeNode root) {
        helper(root);
        return maxSum;
    }

    //making a helper func and nt directily returning maxsum in maxsum fun
    public int helper(TreeNode root) {
        //find maxSum for each & every node
        //int maxSum=0; cant keep this here as it get reset to 0 in every func call insted making it a global variable
        if (root == null)
            return 0;
        //for -ve values we take O
        int l = Math.max(helper(root.left), 0);
        int r = Math.max(helper(root.right), 0);
        maxSum = Math.max(maxSum, l + r + root.val);
        return Math.max(l, r) + root.val;
    }
}
