/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
public class Solution {

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        // Dummy node as the start of the merged list
        ListNode dummy = new ListNode();
        // Pointer for building the merged list
        ListNode cur = dummy;
        // Traverse both lists
        while (list1 != null && list2 != null) {
            if (list1.val < list2.val) {
                // Attach the smaller node
                cur.next = list1;
                // Move the list1 pointer forward
                list1 = list1.next;
            } else {
                // Attach the smaller or equal node
                cur.next = list2;
                // Move the list2 pointer forward
                list2 = list2.next;
            }
            // Move cur to the last attached node
            cur = cur.next;
        }
        // Append the remaining nodes from either list
        cur.next = (list1 != null) ? list1 : list2;
        // Skip dummy node and return the merged list
        return dummy.next;
    }
}
