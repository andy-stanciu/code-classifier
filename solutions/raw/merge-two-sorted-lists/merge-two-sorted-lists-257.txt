/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    private ListNode spliceHead(ListNode list) {
        ListNode temp = list;
        if (list != null) {
            list = list.next;
            temp.next = null;
        }
        return temp;
    }

    private ListNode addNode(ListNode head, ListNode tail, ListNode node) {
        if (head == null) {
            head = node;
        } else {
            tail.next = node;
        }
        tail = node;
        node.next = null;
        return head;
    }

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode head = null;
        ListNode tail = null;
        while (list1 != null && list2 != null) {
            if (list1.val >= list2.val) {
                if (head == null) {
                    head = list2;
                } else {
                    tail.next = list2;
                }
                tail = list2;
                list2 = list2.next;
            } else {
                if (head == null) {
                    head = list1;
                } else {
                    tail.next = list1;
                }
                tail = list1;
                list1 = list1.next;
            }
            tail.next = null;
        }
        if (list1 != null) {
            if (head == null) {
                head = list1;
                tail = list1;
            } else {
                tail.next = list1;
            }
        } else if (list2 != null) {
            if (head == null) {
                head = list2;
                tail = list2;
            } else {
                tail.next = list2;
            }
        }
        return head;
    }
}
