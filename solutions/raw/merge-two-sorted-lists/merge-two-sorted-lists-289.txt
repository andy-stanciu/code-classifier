/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    /*
    public ListNode solve(ListNode first, ListNode second){
        ListNode cur1=first;
        ListNode next1=first.next;
        if(next1==null){
            cur1.next=second;
            return first;
        }
        ListNode cur2=second;
        ListNode next2=cur2.next;

        while(next1!=null && cur2!=null){
            if(cur2.val>=cur1.val && cur2.val<=next1.val){
                cur1.next=cur2;
                next2=cur2.next;
                cur2.next=next1;
                cur1=cur2;
                cur2=next2;
            }else{
                cur1=next1;
                next1=next1.next;
                if(next1==null){
                    cur1.next=cur2;
                    return first;
                }
            }
           
        }
         return first;
    }
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1==null){
            return list2;
        }
        if(list2==null){
            return list1;
        }
        if(list1.val<=list2.val){
            return solve(list1,list2);
        }else{
            return solve(list2,list1);
        }
    }
    */
    public ListNode solve(ListNode list1, ListNode list2) {
        ListNode newhead = new ListNode();
        ListNode cur1 = list1.next;
        ListNode cur2 = list2;
        newhead = list1;
        ListNode newcur = newhead;
        while (cur1 != null && cur2 != null) {
            if (cur1.val < cur2.val) {
                newcur.next = cur1;
                cur1 = cur1.next;
                newcur = newcur.next;
            } else {
                newcur.next = cur2;
                cur2 = cur2.next;
                newcur = newcur.next;
            }
        }
        while (cur1 != null) {
            newcur.next = cur1;
            cur1 = cur1.next;
            newcur = newcur.next;
        }
        while (cur2 != null) {
            newcur.next = cur2;
            cur2 = cur2.next;
            newcur = newcur.next;
        }
        return newhead;
    }

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if (list1 == null) {
            return list2;
        }
        if (list2 == null) {
            return list1;
        }
        if (list1.val > list2.val) {
            return solve(list2, list1);
        }
        return solve(list1, list2);
    }
}
