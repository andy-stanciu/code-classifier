/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode head = new ListNode();
        ListNode temp = head;
        while (list1 != null && list2 != null) {
            if (list1.val < list2.val) {
                temp.next = list1;
                temp = temp.next;
                list1 = list1.next;
            } else {
                temp.next = list2;
                temp = temp.next;
                list2 = list2.next;
            }
        }
        if (list1 == null) {
            temp.next = list2;
        } else {
            temp.next = list1;
        }
        return head.next;
        //Brute force2
        //  ListNode head = new ListNode();
        //  ListNode temp = head;
        //  while(list1!=null && list2!=null){
        //     if(list1.val<list2.val){
        //         ListNode a = new ListNode(list1.val);
        //         temp.next = a;
        //         temp = temp.next;
        //         list1 = list1.next;
        //     }else{
        //           ListNode a = new ListNode(list2.val);
        //         temp.next = a;
        //         temp = temp.next;
        //         list2 = list2.next;
        //     }
        //  }
        //  if(list1 == null){
        //     temp.next = list2;
        //  }else{
        //      temp.next = list1;
        //  }
        //  return head.next;
        //BRUTEFORCE 1
        //     ArrayList<Integer> ll = new ArrayList<Integer>();
        //     while(list1!=null){
        //         ll.add(list1.val);
        //         list1 = list1.next;
        //     }
        //     while(list2!=null){
        //         ll.add(list2.val);
        //         list2 = list2.next;
        //     }
        //     Collections.sort(ll);
        //     ListNode head = new ListNode();
        //     ListNode temp = head;
        //    for(int i = 0; i<ll.size(); i++){
        //     temp.next = new ListNode(ll.get(i));
        //     temp =  temp.next;
        //    }
        // return head.next;
    }
}
