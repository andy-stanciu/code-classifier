//:) PLS UPVOTE if you understood the solution, I am also beginner :D, your upvotes motivate me to work harder
class Solution {

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        // a pointer/reference to head of list1
        ListNode cursor1 = list1;
        // a pointer/reference to head of list2
        ListNode cursor2 = list2;
        // Start to merge here (a reference to keep track of merged list
        ListNode commonHead;
        if (//in case the list is empty, return
        list1 == null)
            //in case the list is empty, return
            return list2;
        else //in case the list is empty, return
        if (list2 == null)
            return list1;
        // to decide which list should common head first point to before enterring loop
        if (cursor1.val > cursor2.val) {
            commonHead = cursor2;
            cursor2 = cursor2.next;
        } else {
            commonHead = cursor1;
            cursor1 = cursor1.next;
        }
        // the variable that we will return : (answer) (Head of merged list)
        ListNode ans = commonHead;
        //loop and compare every cursor\'s value
        //if one cursor is smaller in value, make it the next node and move the cursor forward
        //then compare to next value and so on
        while (cursor1 != null && cursor2 != null) {
            if (cursor1.val > cursor2.val) {
                commonHead.next = cursor2;
                cursor2 = cursor2.next;
            } else {
                commonHead.next = cursor1;
                cursor1 = cursor1.next;
            }
            commonHead = commonHead.next;
        }
        // in case one list is smaller than other and cursor points to null before merging all elements of both list:
        if (cursor1 == null) {
            if (// cursor 1 is null (since it was smaller list) but cursor 2 is not null yet
            cursor2 != null) {
                //
                commonHead.next = cursor2;
            }
        } else // cursor 2 is null but cursor 1 is not null as it came out of the conditional above
        {
            // make the last element\'s next element as the remaining list\'s first element
            commonHead.next = cursor1;
        }
        // finally return the head of merged list :) PLS UPVOTE, I am also beginner :D
        return ans;
    }
}
