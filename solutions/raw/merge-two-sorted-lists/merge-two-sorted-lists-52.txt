/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if (//if both are empty
        list1 == null && list2 == null)
            //if both are empty
            return null;
        else if (//if one is empty return 2
        list1 == null)
            //if one is empty return 2
            return list2;
        else //if 2 is empty....
        if (list2 == null)
            return list1;
        //head of new Linked List
        ListNode head = null;
        //for traversing List1
        ListNode curr1 = list1;
        //for traversing List2
        ListNode curr2 = list2;
        //for traversing New List
        ListNode current = null;
        /*this loop will run till any one of the two lists
          is traversed completely*/
        while (curr1 != null && curr2 != null) {
            //created new Node
            ListNode newnode = new ListNode();
            if (curr1.val <= curr2.val) {
                newnode.val = curr1.val;
                curr1 = curr1.next;
            } else {
                newnode.val = curr2.val;
                curr2 = curr2.next;
            }
            //newnode has now the smaller value;
            //Now just create a new Linked list with help of newnode
            if (head == null) {
                head = newnode;
            } else {
                current.next = newnode;
            }
            current = newnode;
        }
        while (curr1 != null) {
            //if list1 was greater in size than list 2
            ListNode newnode = new ListNode(curr1.val);
            current.next = newnode;
            current = newnode;
            curr1 = curr1.next;
        }
        while (curr2 != null) {
            //if list2 was greater in size
            ListNode newnode = new ListNode(curr2.val);
            current.next = newnode;
            current = newnode;
            curr2 = curr2.next;
        }
        return head;
    }
}
