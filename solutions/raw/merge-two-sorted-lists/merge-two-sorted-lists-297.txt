/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode newList = null;
        ListNode current = null;
        while (list1 != null && list2 != null) {
            ListNode node;
            // if the list 1 value is greater than list 2 value then list 1 value
            // comes first
            if (list1.val < list2.val) {
                node = new ListNode(list1.val);
                list1 = list1.next;
            } else {
                node = new ListNode(list2.val);
                list2 = list2.next;
            }
            // If the list is empty then add it as head node else add it as next node
            if (newList == null) {
                newList = node;
                current = newList;
            } else {
                current.next = node;
                current = current.next;
            }
        }
        // Append the remainig list
        ListNode remaining = (list1 != null) ? list1 : list2;
        if (current != null) {
            current.next = remaining;
        } else {
            // When one list is empty it goes into this section
            current = remaining;
            return current;
        }
        return newList;
    }
}
