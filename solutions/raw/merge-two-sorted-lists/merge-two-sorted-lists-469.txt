/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode rsNode = new ListNode();
        if (list1 == null) {
            return list2;
        }
        if (list2 == null) {
            return list1;
        }
        List<Integer> lsNode = new ArrayList<>();
        while (list1 != null) {
            lsNode.add(list1.val);
            list1 = list1.next;
        }
        while (list2 != null) {
            lsNode.add(list2.val);
            list2 = list2.next;
        }
        Collections.sort(lsNode);
        List<ListNode> lsFinal = new ArrayList<>();
        for (int i = 0; i < lsNode.size(); i++) {
            ListNode tempNode = new ListNode(lsNode.get(i));
            if (lsFinal.isEmpty()) {
                lsFinal.add(tempNode);
            } else {
                lsFinal.get(i - 1).next = tempNode;
                lsFinal.add(tempNode);
            }
        }
        if (!lsFinal.isEmpty()) {
            rsNode = lsFinal.get(0);
        }
        return rsNode;
    }
}
