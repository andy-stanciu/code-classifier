/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        // If either of the lists is null, return the other list
        if (list1 == null) {
            return list2;
        }
        if (list2 == null) {
            return list1;
        }
        // Initialize the new list with a dummy node
        // dummy node
        ListNode newlist = new ListNode(-1);
        ListNode pointer = newlist;
        // Loop through both lists while they are non-empty
        while (list1 != null && list2 != null) {
            if (list1.val < list2.val) {
                pointer.next = list1;
                list1 = list1.next;
            } else {
                pointer.next = list2;
                list2 = list2.next;
            }
            pointer = pointer.next;
        }
        // Attach the remaining part of the non-empty list (if any)
        if (list1 != null) {
            pointer.next = list1;
        } else if (list2 != null) {
            pointer.next = list2;
        }
        // Return the next node after the dummy node
        //head node
        return newlist.next;
    }
}
