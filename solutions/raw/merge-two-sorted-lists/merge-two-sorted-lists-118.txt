/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        // Create a dummy node to form the base of the merged linked list
        ListNode mergedLL = new ListNode(-1);
        // A temporary pointer to build the new list
        ListNode temp = mergedLL;
        // Traverse both lists and merge them
        while (list1 != null && list2 != null) {
            // Compare the current values of both lists
            if (list1.val <= list2.val) {
                // If list1\'s value is smaller or equal, add it to the merged list
                temp.next = list1;
                // Move the temporary pointer to the next node in the merged list
                temp = temp.next;
                // Move the pointer of list1 to the next node
                list1 = list1.next;
            } else {
                // If list2\'s value is smaller, add it to the merged list
                temp.next = list2;
                // Move the temporary pointer to the next node in the merged list
                temp = temp.next;
                // Move the pointer of list2 to the next node
                list2 = list2.next;
            }
        }
        // If there are remaining elements in list1, append them
        while (list1 != null) {
            temp.next = list1;
            temp = temp.next;
            list1 = list1.next;
        }
        // If there are remaining elements in list2, append them
        while (list2 != null) {
            temp.next = list2;
            temp = temp.next;
            list2 = list2.next;
        }
        // Return the merged linked list, skipping the dummy node
        return mergedLL.next;
    }
}
