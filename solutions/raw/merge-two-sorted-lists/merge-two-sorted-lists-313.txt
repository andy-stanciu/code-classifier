class Solution {

    //	this will be the most comprehensive code you will ever read
    //	if you don\'t understand it at first that is okay.
    //	but the comments should really break it down step for step for you
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        //		In this case we need to merge two pre sorted Listnodes
        //		We can merge these by iterating thhrough them at the same time
        //		We create the new merged listnode at the same time always appending the smaller number of the 2 lists
        ListNode solvebase = new ListNode();
        ListNode pointer = solvebase;
        while (true) {
            //			if list 1 is empty we can return list 2
            if (list1 == null) {
                return list2;
            }
            //			if list 2 is empty we can return list 1
            if (list2 == null) {
                return list1;
            }
            //			check if list 1 val is lower
            if (list1.val < list2.val) {
                //				set the value of the current new solution list item
                pointer.val = list1.val;
                //				check if list 1 has a next item
                if (!(list1.next instanceof ListNode)) {
                    //					if the list is done we can assume that all that is left in list 2 can just be added so we set the next of the solution list as list 2
                    pointer.next = list2;
                    //					return solution
                    return solvebase;
                }
                //				if we did not find the end of list 1 we move list 1 over by 1 item
                list1 = list1.next;
            } else {
                //				if list 1 vlaue is greater than list 2 value we add the list 2 value
                pointer.val = list2.val;
                //				check if the end of list 2 has been reached
                if (!(list2.next instanceof ListNode)) {
                    //					append entire rest of list1 if list2 has ended
                    pointer.next = list1;
                    //					return solution
                    return solvebase;
                }
                //				move list 2 over to the next item
                list2 = list2.next;
            }
            //			we create a new list item
            pointer.next = new ListNode();
            //			we move to the new list item
            pointer = pointer.next;
        }
    }
}
