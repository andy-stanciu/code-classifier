/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode head;
        ListNode currNode;
        if (list1 == null && list2 == null) {
            return list1;
        } else if (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                currNode = new ListNode(list1.val);
                list1 = list1.next;
            } else {
                currNode = new ListNode(list2.val);
                list2 = list2.next;
            }
            head = currNode;
        } else if (list1 != null) {
            return list1;
        } else {
            return list2;
        }
        while ((list1 != null && list2 != null) && (list1.next != null || list2.next != null)) {
            if (list1.val <= list2.val) {
                currNode.next = list1;
                currNode = currNode.next;
                list1 = list1.next;
            } else {
                currNode.next = list2;
                currNode = currNode.next;
                list2 = list2.next;
            }
        }
        if (list1 != null) {
            if (list2 != null) {
                if (list1.val <= list2.val) {
                    currNode.next = list1;
                    currNode = currNode.next;
                    list1 = list1.next;
                    currNode.next = list2;
                    currNode = currNode.next;
                    list2 = list2.next;
                } else {
                    currNode.next = list2;
                    currNode = currNode.next;
                    list2 = list2.next;
                    currNode.next = list1;
                    currNode = currNode.next;
                    list1 = list1.next;
                }
            }
            currNode.next = list1;
            currNode = currNode.next;
        } else {
            currNode.next = list2;
            currNode = currNode.next;
        }
        return head;
    }
}
