/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode temp1 = list1, temp2 = list2;
        if (list1 != null && list2 != null) {
            if (temp1.val <= temp2.val) {
                while (temp2 != null) {
                    if (temp1.next != null) {
                        if (temp1.next.val > temp2.val) {
                            insert(temp1, temp2.val);
                            temp2 = temp2.next;
                            temp1 = temp1.next;
                        } else
                            temp1 = temp1.next;
                    } else {
                        while (temp2 != null) {
                            addLast(temp1, temp2.val);
                            temp2 = temp2.next;
                            temp1 = temp1.next;
                        }
                    }
                }
                return list1;
            } else {
                while (temp1 != null) {
                    if (temp2.next != null) {
                        if (temp2.next.val > temp1.val) {
                            insert(temp2, temp1.val);
                            temp1 = temp1.next;
                            temp2 = temp2.next;
                        } else
                            temp2 = temp2.next;
                    } else {
                        while (temp1 != null) {
                            addLast(temp2, temp1.val);
                            temp1 = temp1.next;
                            temp2 = temp2.next;
                        }
                    }
                }
                return list2;
            }
        } else if (list1 != null || list2 == null)
            return list1;
        else if (list1 == null || list2 != null)
            return list2;
        else
            return list1;
    }

    public void addFirst(ListNode head, int val) {
        ListNode newNode = new ListNode(val, head);
        head = newNode;
    }

    public void addLast(ListNode node, int val) {
        ListNode newNode = new ListNode(val);
        node.next = newNode;
    }

    public void insert(ListNode prev, int val) {
        ListNode newNode = new ListNode(val, prev.next);
        prev.next = newNode;
    }
}
