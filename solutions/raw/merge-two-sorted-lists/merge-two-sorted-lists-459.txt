/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode head, tail;
        head = new ListNode(-1);
        tail = head;
        while (l1 != null || l2 != null) {
            if (l2 == null || (l1 != null && l1.val < l2.val)) {
                //append l1
                tail.next = l1;
                tail = l1;
                l1 = l1.next;
            } else {
                //append l2
                tail.next = l2;
                tail = l2;
                l2 = l2.next;
            }
        }
        return head.next;
    }
}
/*
two linked lists 
example:
tp:
we can implement a two poitner approach
one pointr will be inside l1
and anothwr will be inside l2 
in each iteration: 
    we will be comparing the node values at current pointers
    we will retrieve the node with smaller value to be appended to our sorted lsit 



pc: 
we create following variables: 
    head: sentinel head of merge sorted list
    tail: sentinel tail 

    while(l1 or l2 is not null)
    {
        if l2 is null OR (l1 is not null AND l1.val < l2.val) 
            then append l1 to result list
            set tail.next to l1
            set tail to l1 
            set l1 to l1.next- move pointer forward
            
        else 
         then append l2 to result list
            set tail.next to l2
            set tail to l2
            set l2 to l2.next- move pointer forward
    }
    return headS.next



    TC: m+n : where n,m are length of two input lists , visit each node once 
    SC: O(1) as we modify input list 

        
    }

*/
