/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode mover1 = list1;
        /* Used to traverse along the 
linked list */
        ListNode mover2 = list2;
        if (list1 == null && list2 == null)
            return null;
        /* If both lists are null, there is 
nothing to return */
        ArrayList<Integer> combined_arr = new ArrayList<>();
        /* This 
ArrayList will be used to store all the elements of both the lists */
        while (mover1 != null) {
            combined_arr.add(mover1.val);
            mover1 = mover1.next;
        }
        while (mover2 != null) {
            combined_arr.add(mover2.val);
            mover2 = mover2.next;
        }
        Collections.sort(combined_arr);
        /* Sort the items of both the 
lists */
        ListNode head = new ListNode(combined_arr.get(0));
        /* Initialize head as the first element of the array */
        ListNode var = head;
        /* Used for traversal */
        for (int i = 1; i < combined_arr.size(); i++) {
            ListNode temp = new ListNode(combined_arr.get(i));
            /* temp is used to create a new node for the current index \'i\' of the 
array and store its value in the node */
            var.next = temp;
            /* New node is attached to the end of 
the linked list created till this iteration */
            var = var.next;
            /* traverse to the next node */
        }
        return head;
    }
}
