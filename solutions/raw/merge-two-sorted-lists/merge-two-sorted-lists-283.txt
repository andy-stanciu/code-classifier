// Definition for singly-linked list.
class ListNode {

    int val;

    ListNode next;

    ListNode() {
    }

    ListNode(int val) {
        this.val = val;
    }

    ListNode(int val, ListNode next) {
        this.val = val;
        this.next = next;
    }

    // Helper method to deserialize a string into a ListNode
    public static ListNode deserialize(String data) {
        if (data.equals("[]") || data.isEmpty()) {
            return null;
        }
        // Remove brackets and split the string by commas
        String[] nodes = data.replaceAll("[\\\\[\\\\]]", "").split(",");
        // Dummy node to build the list
        ListNode dummy = new ListNode(-1);
        ListNode current = dummy;
        // Parse each number and create a new ListNode
        for (String node : nodes) {
            current.next = new ListNode(Integer.parseInt(node.trim()));
            current = current.next;
        }
        // Return the head of the deserialized list
        return dummy.next;
    }

    // Optional: Helper method to print the list for verification
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        ListNode current = this;
        while (current != null) {
            sb.append(current.val);
            if (current.next != null)
                sb.append(", ");
            current = current.next;
        }
        sb.append("]");
        return sb.toString();
    }
}

// Solution class containing the mergeTwoLists method
class Solution {

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        // Create a dummy node to act as the start of the merged list
        ListNode dummy = new ListNode(-1);
        ListNode current = dummy;
        // Loop through both lists as long as neither is empty
        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                current.next = list1;
                list1 = list1.next;
            } else {
                current.next = list2;
                list2 = list2.next;
            }
            current = current.next;
        }
        // Attach any remaining nodes from list1 or list2
        if (list1 != null) {
            current.next = list1;
        } else {
            current.next = list2;
        }
        // Return the merged list, starting from the node after the dummy node
        return dummy.next;
    }
}

// Example to test
public class TestSolution {

    public static void main(String[] args) {
        ListNode list1 = ListNode.deserialize("[1,2,4]");
        ListNode list2 = ListNode.deserialize("[1,3,4]");
        Solution solution = new Solution();
        ListNode mergedList = solution.mergeTwoLists(list1, list2);
        // Should output: [1, 1, 2, 3, 4, 4]
        System.out.println(mergedList);
    }
}
