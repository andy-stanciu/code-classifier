/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode copyList1 = list1;
        ListNode copyList2 = list2;
        if (list1 == null) {
            return list2;
        }
        if (list2 == null) {
            return list1;
        }
        ListNode head = list1;
        ListNode prev = null;
        while (copyList2 != null) {
            //System.out.println(copyList1.val);
            if (copyList2.val <= copyList1.val) {
                //ListNode next = copyList1.next;
                //ListNode curr = copyList1;
                copyList1 = new ListNode(copyList2.val, copyList1);
                //copyList1.next = curr;
                if (prev != null) {
                    prev.next = copyList1;
                    prev = copyList1;
                } else {
                    head = copyList1;
                    prev = copyList1;
                }
                copyList2 = copyList2.next;
                copyList1 = copyList1.next;
            } else {
                if (copyList1.next == null) {
                    copyList1.next = copyList2;
                    break;
                }
                prev = copyList1;
                copyList1 = copyList1.next;
            }
        }
        return head;
    }
}
