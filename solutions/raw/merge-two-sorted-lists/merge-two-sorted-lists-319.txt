/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        // Create a dummy node to simplify edge cases
        ListNode dummy = new ListNode();
        // The pointer to traverse the merged list
        ListNode ans = dummy;
        // Pointers for traversing the two lists
        ListNode ptr1 = list1;
        ListNode ptr2 = list2;
        // Merge the lists while both have elements
        while (ptr1 != null && ptr2 != null) {
            if (ptr1.val < ptr2.val) {
                // Attach ptr1 to the merged list
                dummy.next = ptr1;
                // Move ptr1 forward
                ptr1 = ptr1.next;
            } else {
                // Attach ptr2 to the merged list
                dummy.next = ptr2;
                // Move ptr2 forward
                ptr2 = ptr2.next;
            }
            // Move dummy forward
            dummy = dummy.next;
        }
        // Attach the remaining elements (if any) from either list
        if (ptr1 != null) {
            dummy.next = ptr1;
        } else {
            dummy.next = ptr2;
        }
        // Return the merged list, skipping the dummy node
        return ans.next;
    }
}
