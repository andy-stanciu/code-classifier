/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseLinkedList(ListNode root) {
        ListNode ret = new ListNode(root.val);
        ListNode temp = root.next;
        while (temp != null) {
            ListNode currNode = new ListNode(temp.val);
            currNode.next = ret;
            ret = currNode;
            temp = temp.next;
        }
        return ret;
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverseLinkedList(l1);
        l2 = reverseLinkedList(l2);
        int remain = 0;
        ListNode lastNode = null;
        ListNode ret = null;
        while (l1 != null && l2 != null) {
            int val = l1.val + l2.val + remain;
            remain = val / 10;
            ret = new ListNode(val % 10);
            ret.next = lastNode;
            lastNode = ret;
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            int val = l1.val + remain;
            remain = val / 10;
            ret = new ListNode(val % 10);
            ret.next = lastNode;
            lastNode = ret;
            l1 = l1.next;
        }
        while (l2 != null) {
            int val = l2.val + remain;
            remain = val / 10;
            ret = new ListNode(val % 10);
            ret.next = lastNode;
            lastNode = ret;
            l2 = l2.next;
        }
        if (remain > 0) {
            ret = new ListNode(remain);
            ret.next = lastNode;
            lastNode = ret;
        }
        return ret;
    }
}
