/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public static ListNode addList(ListNode head, ListNode head2) {
        ListNode returnList = null;
        ListNode current1 = head;
        ListNode current2 = head2;
        int carry = 0;
        while (current1 != null) {
            if (current2 != null) {
                int b = current1.val + current2.val + carry;
                returnList = insert(b % 10, returnList);
                carry = b / 10;
                current1 = current1.next;
                current2 = current2.next;
            } else {
                int b = current1.val + carry;
                returnList = insert(b % 10, returnList);
                carry = b / 10;
                current1 = current1.next;
            }
        }
        while (current2 != null) {
            int b = current2.val + carry;
            returnList = insert(b % 10, returnList);
            carry = b / 10;
            current2 = current2.next;
        }
        if (carry != 0) {
            returnList = insert(carry, returnList);
        }
        return returnList;
    }

    public ListNode reverse(ListNode head) {
        ListNode current = head;
        ListNode prev = null;
        while (current != null) {
            ListNode temp = current.next;
            current.next = prev;
            prev = current;
            current = temp;
        }
        return prev;
    }

    public static ListNode insert(int data, ListNode head) {
        ListNode node = new ListNode(data);
        node.next = head;
        head = node;
        return node;
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head1 = reverse(l1);
        ListNode head2 = reverse(l2);
        ListNode head3 = addList(head1, head2);
        return head3;
    }
}
