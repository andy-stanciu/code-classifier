/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    ListNode reverse(int data, ListNode head2) {
        ListNode node = new ListNode(data);
        node.next = head2;
        head2 = node;
        return head2;
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode t1 = null, t2 = null;
        while (l1 != null || l2 != null) {
            if (l1 != null) {
                t1 = reverse(l1.val, t1);
                l1 = l1.next;
            }
            if (l2 != null) {
                t2 = reverse(l2.val, t2);
                l2 = l2.next;
            }
        }
        int carry = 0, temp = 0;
        ListNode ans = null;
        while (t1 != null || t2 != null) {
            if (t1 != null && t2 != null) {
                temp = t1.val + t2.val;
                //System.out.println("h"+temp);
                t1 = t1.next;
                t2 = t2.next;
            } else if (t1 == null && t2 != null) {
                temp = t2.val;
                t2 = t2.next;
            } else if (t2 == null && t1 != null) {
                temp = t1.val;
                t1 = t1.next;
            }
            temp += carry;
            if (temp > 9) {
                temp = temp % 10;
                carry = 1;
            } else {
                carry = 0;
            }
            ans = reverse(temp, ans);
        }
        if (carry != 0)
            ans = reverse(carry, ans);
        return ans;
    }
}
