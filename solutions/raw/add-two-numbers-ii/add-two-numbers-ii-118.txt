/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if (l1.val == 0 && l1.next == null)
            return l2;
        if (l2.val == 0 && l2.next == null)
            return l1;
        ListNode reverseL1 = reverse(l1);
        ListNode reverseL2 = reverse(l2);
        ListNode curr = null;
        int carry = 0;
        while (reverseL1 != null && reverseL2 != null) {
            int num = reverseL1.val + reverseL2.val + carry;
            curr = new ListNode(num % 10, curr);
            carry = num / 10;
            reverseL1 = reverseL1.next;
            reverseL2 = reverseL2.next;
        }
        while (reverseL1 != null) {
            int num = reverseL1.val + carry;
            curr = new ListNode(num % 10, curr);
            carry = num / 10;
            reverseL1 = reverseL1.next;
        }
        while (reverseL2 != null) {
            int num = reverseL2.val + carry;
            curr = new ListNode(num % 10, curr);
            carry = num / 10;
            reverseL2 = reverseL2.next;
        }
        if (carry != 0) {
            curr = new ListNode(carry, curr);
        }
        return curr;
    }

    private ListNode reverse(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode prev = null;
        ListNode curr = head;
        ListNode next = curr.next;
        while (curr != null) {
            curr.next = prev;
            prev = curr;
            curr = next;
            if (next != null)
                next = next.next;
        }
        return prev;
    }
}
