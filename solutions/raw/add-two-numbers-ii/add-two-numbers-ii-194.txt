/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> stack1 = new Stack<>();
        Stack<Integer> stack2 = new Stack<>();
        ListNode temp = l1;
        // storing l1 in stack1
        while (temp != null) {
            stack1.push(temp.val);
            temp = temp.next;
        }
        temp = l2;
        // storing l2 in stack1
        while (temp != null) {
            stack2.push(temp.val);
            temp = temp.next;
        }
        int carry = 0;
        ListNode ptr = null;
        while (!stack1.isEmpty() && !stack2.isEmpty()) {
            int val = stack1.pop() + stack2.pop() + carry;
            carry = val / 10;
            ListNode head = new ListNode(val % 10);
            head.next = ptr;
            ptr = head;
        }
        while (!stack1.isEmpty()) {
            int val = stack1.pop() + carry;
            carry = val / 10;
            ListNode head = new ListNode(val % 10);
            head.next = ptr;
            ptr = head;
        }
        while (!stack2.isEmpty()) {
            int val = stack2.pop() + carry;
            carry = val / 10;
            ListNode head = new ListNode(val % 10);
            head.next = ptr;
            ptr = head;
        }
        while (carry != 0) {
            ListNode head = new ListNode(carry % 10);
            carry = carry / 10;
            head.next = ptr;
            ptr = head;
        }
        return ptr;
    }
}
