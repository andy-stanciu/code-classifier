/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode list1 = reverseList(l1);
        ListNode list2 = reverseList(l2);
        ListNode ans = new ListNode();
        ListNode temp = ans;
        int carry = 0;
        while (list1 != null || list2 != null || carry != 0) {
            int val1 = (list1 != null) ? list1.val : 0;
            int val2 = (list2 != null) ? list2.val : 0;
            int sum = val1 + val2 + carry;
            int digit = sum % 10;
            carry = sum / 10;
            ListNode newNode = new ListNode(digit);
            temp.next = newNode;
            temp = temp.next;
            if (list1 != null)
                list1 = list1.next;
            if (list2 != null)
                list2 = list2.next;
        }
        return reverseList(ans.next);
    }

    public ListNode reverseList(ListNode list) {
        ListNode prev = null;
        while (list != null) {
            ListNode nextnode = list.next;
            list.next = prev;
            prev = list;
            list = nextnode;
        }
        return prev;
    }
}
