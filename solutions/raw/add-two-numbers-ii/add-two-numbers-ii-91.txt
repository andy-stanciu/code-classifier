/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        ListNode ans = add2(l1, l2);
        ans = reverse(ans);
        return ans;
    }

    public ListNode add2(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(-1);
        ListNode curr = dummy;
        ListNode t1 = l1;
        ListNode t2 = l2;
        int carry = 0;
        while (t1 != null || t2 != null) {
            int sum = carry;
            if (t1 != null)
                sum += t1.val;
            if (t2 != null)
                sum += t2.val;
            ListNode newN = new ListNode(sum % 10);
            curr.next = newN;
            carry = sum / 10;
            curr = curr.next;
            if (t1 != null)
                t1 = t1.next;
            if (t2 != null)
                t2 = t2.next;
            if (carry != 0) {
                ListNode n = new ListNode(carry);
                curr.next = n;
            }
        }
        return dummy.next;
    }

    public ListNode reverse2(ListNode l) {
        if (l == null || l.next == null) {
            return l;
        }
        ListNode temp = l;
        ListNode prev = null;
        while (temp != null) {
            ListNode front = temp.next;
            temp.next = prev;
            prev = temp;
            temp = front;
        }
        return prev;
    }

    public ListNode reverse(ListNode l) {
        if (l == null || l.next == null)
            return l;
        ListNode newHead = reverse(l.next);
        ListNode front = l.next;
        front.next = l;
        l.next = null;
        return newHead;
    }
}
