/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        ListNode head = new ListNode();
        int carry = 0;
        head.val = (l1.val + l2.val) % 10;
        carry = (l1.val + l2.val) / 10;
        l1 = l1.next;
        l2 = l2.next;
        ListNode p = head;
        while (l1 != null && l2 != null) {
            ListNode temp = new ListNode();
            temp.val = (l1.val + l2.val + carry) % 10;
            carry = (l1.val + l2.val + carry) / 10;
            p.next = temp;
            l2 = l2.next;
            l1 = l1.next;
            p = p.next;
        }
        while (l1 != null) {
            ListNode temp = new ListNode();
            temp.val = (l1.val + carry) % 10;
            carry = (l1.val + carry) / 10;
            p.next = temp;
            l1 = l1.next;
            p = p.next;
        }
        while (l2 != null) {
            ListNode temp = new ListNode();
            temp.val = (l2.val + carry) % 10;
            carry = (l2.val + carry) / 10;
            p.next = temp;
            l2 = l2.next;
            p = p.next;
        }
        if (carry != 0) {
            ListNode temp = new ListNode();
            temp.val = carry;
            p.next = temp;
        }
        return reverse(head);
    }

    public ListNode reverse(ListNode head) {
        ListNode p, prev, next;
        prev = null;
        p = head;
        while (p != null) {
            next = p.next;
            p.next = prev;
            prev = p;
            p = next;
        }
        head = prev;
        return head;
    }
}
