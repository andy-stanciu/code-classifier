/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverse(ListNode head) {
        Stack<Integer> stack = new Stack<>();
        ListNode tem = head;
        while (head != null) {
            stack.push(head.val);
            head = head.next;
        }
        head = tem;
        while (!stack.isEmpty()) {
            head.val = stack.pop();
            head = head.next;
        }
        return tem;
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> stack1 = new Stack<>();
        Stack<Integer> stack2 = new Stack<>();
        ListNode t1 = l1, t2 = l2;
        while (t1 != null) {
            stack1.push(t1.val);
            t1 = t1.next;
        }
        while (t2 != null) {
            stack2.push(t2.val);
            t2 = t2.next;
        }
        t1 = l1;
        t2 = l2;
        int sum = 0, r = 0, q = 0;
        ListNode head = null;
        ListNode temp = null;
        while (!stack1.isEmpty() || !stack2.isEmpty() || q > 0) {
            if (stack1.isEmpty() || stack2.isEmpty() || q > 0) {
                if (stack1.isEmpty()) {
                    stack1.push(0);
                }
                if (stack2.isEmpty()) {
                    stack2.push(0);
                }
            }
            sum = q + (stack1.pop() + stack2.pop());
            r = sum % 10;
            q = sum / 10;
            ListNode newnode = new ListNode(r);
            if (head == null) {
                head = newnode;
            } else {
                temp = head;
                while (temp.next != null) {
                    temp = temp.next;
                }
                temp.next = newnode;
                newnode.next = null;
            }
        }
        ListNode newhead = reverse(head);
        return newhead;
    }
}
