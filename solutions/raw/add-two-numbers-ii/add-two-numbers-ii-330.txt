/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode p1 = reverseList(l1);
        ListNode p2 = reverseList(l2);
        int value = p1.val + p2.val;
        int carry = value / 10;
        ListNode ans = new ListNode(value % 10);
        p1 = p1.next;
        p2 = p2.next;
        ListNode p3 = ans;
        while (p1 != null && p2 != null) {
            value = p1.val + p2.val + carry;
            carry = value / 10;
            ListNode temp = new ListNode(value % 10);
            p3.next = temp;
            p3 = p3.next;
            p1 = p1.next;
            p2 = p2.next;
        }
        while (p1 != null) {
            value = p1.val + carry;
            carry = value / 10;
            ListNode temp = new ListNode(value % 10);
            p3.next = temp;
            p3 = p3.next;
            p1 = p1.next;
        }
        while (p2 != null) {
            value = p2.val + carry;
            carry = value / 10;
            ListNode temp = new ListNode(value % 10);
            p3.next = temp;
            p3 = p3.next;
            p2 = p2.next;
        }
        if (carry != 0) {
            ListNode temp = new ListNode(carry);
            p3.next = temp;
            p3 = p3.next;
        }
        ListNode head = reverseList(ans);
        return head;
    }

    ListNode reverseList(ListNode head) {
        ListNode curr = head;
        ListNode prev = null;
        while (curr != null) {
            ListNode cp1 = curr.next;
            curr.next = prev;
            prev = curr;
            curr = cp1;
        }
        return prev;
    }
}
