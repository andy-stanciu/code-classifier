class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head1 = reverseList(l1);
        ListNode head2 = reverseList(l2);
        ListNode head = new ListNode();
        ListNode Tail = head;
        int carry = 0;
        while (head1 != null && head2 != null) {
            ListNode node = new ListNode();
            node.val = (head1.val + head2.val + carry) % 10;
            Tail.next = node;
            Tail = node;
            carry = (head1.val + head2.val + carry > 9) ? (head1.val + head2.val + carry) / 10 : 0;
            head1 = head1.next;
            head2 = head2.next;
        }
        while (head1 != null) {
            ListNode node = new ListNode();
            node.val = (head1.val + carry) % 10;
            Tail.next = node;
            Tail = node;
            carry = (head1.val + carry > 9) ? (head1.val + carry) / 10 : 0;
            head1 = head1.next;
        }
        while (head2 != null) {
            ListNode node = new ListNode();
            node.val = (head2.val + carry) % 10;
            Tail.next = node;
            Tail = node;
            carry = (head2.val + carry > 9) ? (head2.val + carry) / 10 : 0;
            head2 = head2.next;
        }
        if (carry != 0) {
            ListNode node = new ListNode();
            node.val = carry;
            Tail.next = node;
            Tail = node;
        }
        return reverseList(head.next);
    }

    public ListNode reverseList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode prev = null;
        ListNode current = head;
        ListNode Next = head.next;
        while (current != null) {
            current.next = prev;
            prev = current;
            current = Next;
            if (Next != null) {
                Next = Next.next;
            }
        }
        return prev;
    }
}
