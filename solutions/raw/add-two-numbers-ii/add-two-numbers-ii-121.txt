/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        //reversing l1
        ListNode prev = null, next = null, curr = l1;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        l1 = prev;
        //reversing l2
        prev = null;
        next = null;
        curr = l2;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        l2 = prev;
        //now adding two linkedlist
        ListNode temp1 = l1, temp2 = l2;
        ListNode dummyNode = new ListNode(-1);
        ListNode newTemp = dummyNode;
        int carry = 0;
        //This loop will run till both lists are equal
        while (temp1 != null && temp2 != null) {
            int val = temp1.val + temp2.val + carry;
            ListNode newNode = new ListNode(val % 10);
            newTemp.next = newNode;
            newTemp = newNode;
            carry = val / 10;
            temp1 = temp1.next;
            temp2 = temp2.next;
        }
        // run till l1 is not fully executed
        while (temp1 != null) {
            int val = temp1.val + carry;
            ListNode newNode = new ListNode(val % 10);
            newTemp.next = newNode;
            newTemp = newNode;
            carry = val / 10;
            temp1 = temp1.next;
        }
        // run till l2 is not fully executed
        while (temp2 != null) {
            int val = temp2.val + carry;
            ListNode newNode = new ListNode(val % 10);
            newTemp.next = newNode;
            newTemp = newNode;
            carry = val / 10;
            temp2 = temp2.next;
        }
        if (carry != 0) {
            ListNode newNode = new ListNode(carry);
            newTemp.next = newNode;
            newTemp = newNode;
        }
        //Now again reversing again after addition
        curr = dummyNode.next;
        next = null;
        prev = null;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}
