class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<ListNode> stk1 = new Stack<>();
        Stack<ListNode> stk2 = new Stack<>();
        ListNode temp = l1;
        while (temp != null) {
            stk1.push(temp);
            temp = temp.next;
        }
        temp = l2;
        while (temp != null) {
            stk2.push(temp);
            temp = temp.next;
        }
        int remember = 0;
        Queue<ListNode> queue = new LinkedList<>();
        while (!stk1.isEmpty() || !stk2.isEmpty()) {
            int v1 = 0;
            int v2 = 0;
            if (!stk1.isEmpty()) {
                v1 = stk1.pop().val;
            }
            if (!stk2.isEmpty()) {
                v2 = stk2.pop().val;
            }
            int sum = v1 + v2 + remember;
            if (sum >= 10) {
                remember = 1;
                sum = sum % 10;
            } else {
                remember = 0;
            }
            ListNode nextNode = new ListNode(sum);
            nextNode.next = queue.poll();
            queue.add(nextNode);
        }
        ListNode ok = queue.poll();
        if (remember == 1) {
            ListNode tempNode = new ListNode(1);
            tempNode.next = ok;
            return tempNode;
        } else {
            return ok;
        }
    }
}
