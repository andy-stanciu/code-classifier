/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public Stack<Integer> makeStack(ListNode list) {
        Stack<Integer> stack = new Stack<>();
        while (list != null) {
            stack.push(list.val);
            list = list.next;
        }
        return stack;
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> stack1 = makeStack(l1);
        Stack<Integer> stack2 = makeStack(l2);
        ListNode resultHead = null;
        int carry = 0;
        while (!stack1.isEmpty() || !stack2.isEmpty() || carry != 0) {
            int num1 = stack1.isEmpty() ? 0 : stack1.pop();
            int num2 = stack2.isEmpty() ? 0 : stack2.pop();
            int sum = num1 + num2 + carry;
            int newVal = sum % 10;
            carry = sum / 10;
            ListNode temp = new ListNode(newVal);
            if (resultHead == null) {
                resultHead = temp;
            } else {
                temp.next = resultHead;
                resultHead = temp;
            }
        }
        return resultHead;
    }
}
