/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverse(ListNode l) {
        ListNode current = l, forward = null, prev = null;
        while (current != null) {
            forward = current.next;
            current.next = prev;
            prev = current;
            current = forward;
        }
        return prev;
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        int carry = 0;
        ListNode dummy = new ListNode(0, null);
        ListNode p = dummy;
        while (l1 != null || l2 != null || carry == 1) {
            int value1 = (l1 != null ? l1.val : 0);
            int value2 = (l2 != null ? l2.val : 0);
            int sum = value1 + value2 + carry;
            if (sum >= 10) {
                sum %= 10;
                carry = 1;
            } else
                carry = 0;
            ListNode newNode = new ListNode(sum, null);
            p.next = newNode;
            p = newNode;
            l1 = l1 != null ? l1.next : null;
            l2 = l2 != null ? l2.next : null;
        }
        ListNode head = dummy.next;
        dummy.next = null;
        head = reverse(head);
        return head;
    }
}
