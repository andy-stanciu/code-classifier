/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode reverse1 = reverse(l1);
        ListNode reverse2 = reverse(l2);
        int carry = 0;
        ListNode ans = new ListNode(0);
        ListNode dummy = ans;
        while (reverse1 != null && reverse2 != null) {
            carry += reverse1.val + reverse2.val;
            ListNode temp = new ListNode(carry % 10);
            dummy.next = temp;
            dummy = dummy.next;
            carry = carry / 10;
            reverse1 = reverse1.next;
            reverse2 = reverse2.next;
        }
        while (reverse1 != null) {
            carry += reverse1.val;
            ListNode temp = new ListNode(carry % 10);
            dummy.next = temp;
            dummy = dummy.next;
            carry = carry / 10;
            reverse1 = reverse1.next;
        }
        while (reverse2 != null) {
            carry += reverse2.val;
            ListNode temp = new ListNode(carry % 10);
            dummy.next = temp;
            dummy = dummy.next;
            carry = carry / 10;
            reverse2 = reverse2.next;
        }
        if (carry == 1) {
            ListNode temp = new ListNode(carry % 10);
            dummy.next = temp;
            dummy = dummy.next;
        }
        ans = reverse(ans.next);
        return ans;
    }

    private ListNode reverse(ListNode node) {
        ListNode prev = null;
        ListNode curr = node;
        ListNode next = node.next;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}
