// Definition for singly-linked list.
class ListNode {

    int val;

    ListNode next;

    ListNode() {
    }

    ListNode(int val) {
        this.val = val;
    }

    ListNode(int val, ListNode next) {
        this.val = val;
        this.next = next;
    }
}

public class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // Create a dummy node to act as the head of the result list
        ListNode dummy = new ListNode(0);
        ListNode p = l1, q = l2, current = dummy;
        int carry = 0;
        // Traverse both lists
        while (p != null || q != null) {
            // Get the values of the current nodes, defaulting to 0 if a list is shorter
            int x = (p != null) ? p.val : 0;
            int y = (q != null) ? q.val : 0;
            // Calculate the sum and carry
            int sum = carry + x + y;
            carry = sum / 10;
            // Create a new node with the digit value and move to the next position
            current.next = new ListNode(sum % 10);
            current = current.next;
            // Move to the next nodes in the lists
            if (p != null)
                p = p.next;
            if (q != null)
                q = q.next;
        }
        // If there is a carry left, add a new node with the carry value
        if (carry > 0) {
            current.next = new ListNode(carry);
        }
        return dummy.next;
    }
}
