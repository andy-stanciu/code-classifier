/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseList(ListNode head) {
        if (head == null)
            return null;
        ListNode n = head;
        ListNode m = n.next;
        while (m != null) {
            ListNode o = m.next;
            m.next = n;
            n = m;
            m = o;
        }
        head.next = null;
        head = n;
        return head;
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode r1 = reverseList(l1);
        ListNode r2 = reverseList(l2);
        ListNode m = r1;
        ListNode n = r2;
        int carry = 0;
        int rem = 0;
        ListNode lm = new ListNode(0);
        ListNode ln = lm;
        while (m != null && n != null) {
            int x = m.val + n.val + carry;
            carry = x / 10;
            rem = x % 10;
            lm.next = new ListNode(rem);
            lm = lm.next;
            m = m.next;
            n = n.next;
        }
        while (m != null) {
            int x = m.val + carry;
            carry = x / 10;
            rem = x % 10;
            lm.next = new ListNode(rem);
            lm = lm.next;
            m = m.next;
        }
        while (n != null) {
            int x = n.val + carry;
            carry = x / 10;
            rem = x % 10;
            lm.next = new ListNode(rem);
            lm = lm.next;
            n = n.next;
        }
        if (carry != 0) {
            lm.next = new ListNode(carry);
            lm = lm.next;
        }
        ListNode k = reverseList(ln.next);
        return k;
    }
}
