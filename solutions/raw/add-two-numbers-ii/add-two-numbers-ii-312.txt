/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        int carry = 0;
        ListNode result = new ListNode(0), l3 = result;
        while (l1 != null || l2 != null) {
            int l1data = (l1 != null) ? l1.val : 0;
            int l2data = (l2 != null) ? l2.val : 0;
            int curr_sum = carry + l1data + l2data;
            int new_node_val = curr_sum % 10;
            carry = curr_sum / 10;
            ListNode newNode = new ListNode(new_node_val);
            l3.next = newNode;
            if (l1 != null)
                l1 = l1.next;
            if (l2 != null)
                l2 = l2.next;
            l3 = l3.next;
        }
        if (carry > 0) {
            ListNode newNode = new ListNode(carry);
            l3.next = newNode;
            l3 = l3.next;
        }
        return reverse(result.next);
    }

    public ListNode reverse(ListNode l1) {
        // Reversing the 2nd list
        ListNode prev = null;
        ListNode curr = l1;
        ListNode next;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        l1 = prev;
        return prev;
    }
}
