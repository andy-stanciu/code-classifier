class Solution {

    // TC: O(n)
    // SC: O(n)
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> s1 = new Stack<>();
        Stack<Integer> s2 = new Stack<>();
        ListNode ptr = l1;
        while (ptr != null) {
            s1.push(ptr.val);
            ptr = ptr.next;
        }
        ptr = l2;
        while (ptr != null) {
            s2.push(ptr.val);
            ptr = ptr.next;
        }
        Stack<Integer> nums = new Stack<>();
        int carry = 0;
        while (!s1.isEmpty() && !s2.isEmpty()) {
            int digitSum = s1.pop() + s2.pop() + carry;
            carry = digitSum / 10;
            nums.push(digitSum % 10);
        }
        while (!s1.isEmpty()) {
            int digitSum = s1.pop() + carry;
            carry = digitSum / 10;
            nums.push(digitSum % 10);
        }
        while (!s2.isEmpty()) {
            int digitSum = s2.pop() + carry;
            carry = digitSum / 10;
            nums.push(digitSum % 10);
        }
        if (carry != 0) {
            nums.push(carry);
        }
        ListNode dummyAnsHead = new ListNode(-1);
        ListNode temp = dummyAnsHead;
        while (!nums.isEmpty()) {
            temp.next = new ListNode(nums.pop());
            temp = temp.next;
        }
        return dummyAnsHead.next;
    }
}
