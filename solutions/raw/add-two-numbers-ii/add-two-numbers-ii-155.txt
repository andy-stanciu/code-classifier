class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> a = new Stack<>();
        Stack<Integer> b = new Stack<>();
        ListNode temp1 = l1;
        ListNode temp2 = l2;
        boolean q = false;
        while (temp1 != null) {
            a.push(temp1.val);
            temp1 = temp1.next;
        }
        while (temp2 != null) {
            b.push(temp2.val);
            temp2 = temp2.next;
        }
        Stack<Integer> ans = new Stack<>();
        while (!a.isEmpty() && !b.isEmpty()) {
            int x = a.pop() + b.pop();
            if (x < 10 && !q) {
                ans.push(x);
            } else if (x > 9 && !q) {
                int t = x % 10;
                q = true;
                ans.push(t);
            } else if (x < 9 && q) {
                ans.push(x + 1);
                q = false;
            } else if (x >= 9 && q) {
                int g = (x + 1) % 10;
                q = true;
                ans.push(g);
            }
        }
        while (!a.isEmpty()) {
            if (q) {
                int r = a.pop() + 1;
                if (r > 9) {
                    int d = r % 10;
                    q = true;
                    ans.push(d);
                } else {
                    q = false;
                    ans.push(r);
                }
            } else if (!q) {
                ans.push(a.pop());
            }
        }
        while (!b.isEmpty()) {
            if (q) {
                int y = b.pop() + 1;
                if (y > 9) {
                    int o = y % 10;
                    q = true;
                    ans.push(o);
                } else {
                    q = false;
                    ans.push(y);
                }
            } else if (!q) {
                ans.push(b.pop());
            }
        }
        if (q && a.isEmpty() && b.isEmpty()) {
            ans.push(1);
        }
        ListNode c = new ListNode(0);
        ListNode temp = c;
        while (!ans.isEmpty()) {
            ListNode z = new ListNode(ans.pop());
            temp.next = z;
            temp = temp.next;
        }
        return c.next;
    }
}
