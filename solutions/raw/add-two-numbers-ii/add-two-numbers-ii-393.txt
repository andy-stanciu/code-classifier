/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> st1 = new Stack<>();
        Stack<Integer> st2 = new Stack<>();
        Stack<Integer> st3 = new Stack<>();
        while (l1 != null) {
            st1.push(l1.val);
            l1 = l1.next;
        }
        while (l2 != null) {
            st2.push(l2.val);
            l2 = l2.next;
        }
        int reminder = 0;
        int one = 0;
        int two = 0;
        while (!st1.isEmpty() || !st2.isEmpty()) {
            if (!st1.isEmpty()) {
                one = st1.pop();
            }
            if (!st2.isEmpty()) {
                two = st2.pop();
            }
            int three = one + two + reminder;
            reminder = three / 10;
            three = three % 10;
            st3.push(three);
            one = 0;
            two = 0;
        }
        if (reminder != 0) {
            st3.push(reminder);
        }
        ListNode root = null;
        if (!st3.isEmpty()) {
            root = new ListNode(st3.pop());
        }
        ListNode temp = root;
        while (!st3.isEmpty()) {
            temp.next = new ListNode(st3.pop());
            temp = temp.next;
        }
        return root;
    }
}
