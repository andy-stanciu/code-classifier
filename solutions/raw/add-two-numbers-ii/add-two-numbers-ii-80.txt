/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<ListNode> s1 = new Stack<ListNode>();
        Stack<ListNode> s2 = new Stack<ListNode>();
        Stack<ListNode> res = new Stack<ListNode>();
        while (l1 != null) {
            s1.push(l1);
            l1 = l1.next;
        }
        while (l2 != null) {
            s2.push(l2);
            l2 = l2.next;
        }
        ListNode l = new ListNode(0);
        int c = 0;
        ListNode tt = l;
        while (!s1.isEmpty() && !s2.isEmpty()) {
            int t = s1.pop().val;
            int t1 = s2.pop().val;
            ListNode nl = new ListNode((t + t1 + c) % 10);
            res.push(nl);
            c = (c + t + t1) / 10;
        }
        while (!s1.isEmpty()) {
            int t = s1.pop().val;
            ListNode nl = new ListNode((t + c) % 10);
            res.push(nl);
            c = (c + t) / 10;
        }
        while (!s2.isEmpty()) {
            int t = s2.pop().val;
            ListNode nl = new ListNode((t + c) % 10);
            res.push(nl);
            c = (c + t) / 10;
        }
        if (c != 0) {
            ListNode nl = new ListNode(c);
            res.push(nl);
        }
        while (!res.isEmpty()) {
            l.next = res.pop();
            l = l.next;
        }
        return tt.next;
    }
}
