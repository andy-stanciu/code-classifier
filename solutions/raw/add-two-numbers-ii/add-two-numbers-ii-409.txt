/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseLL(ListNode l) {
        ListNode prev = null;
        ListNode curr = l;
        ListNode next;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // reverse the LL
        ListNode r1 = reverseLL(l1);
        ListNode r2 = reverseLL(l2);
        ListNode revAns = new ListNode(0);
        ListNode tempAns = revAns;
        int carry = 0;
        while (r1 != null && r2 != null) {
            int sum = r1.val + r2.val + carry;
            revAns.next = new ListNode(sum % 10);
            sum /= 10;
            carry = sum % 10;
            r1 = r1.next;
            r2 = r2.next;
            revAns = revAns.next;
        }
        while (r1 != null) {
            int sum = r1.val + carry;
            revAns.next = new ListNode(sum % 10);
            sum /= 10;
            carry = sum % 10;
            r1 = r1.next;
            revAns = revAns.next;
        }
        while (r2 != null) {
            int sum = r2.val + carry;
            revAns.next = new ListNode(sum % 10);
            sum /= 10;
            carry = sum % 10;
            r2 = r2.next;
            revAns = revAns.next;
        }
        if (carry != 0) {
            revAns.next = new ListNode(carry);
        }
        return reverseLL(tempAns.next);
    }
}
