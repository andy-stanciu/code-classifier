/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        LinkedList<Integer> ll1 = new LinkedList<>();
        LinkedList<Integer> ll2 = new LinkedList<>();
        ListNode head = null;
        int carry = 0;
        while (l1 != null) {
            ll1.push(l1.val);
            l1 = l1.next;
        }
        while (l2 != null) {
            ll2.push(l2.val);
            l2 = l2.next;
        }
        while (!ll1.isEmpty() || !ll2.isEmpty()) {
            int val1 = ll1.isEmpty() ? 0 : ll1.poll();
            int val2 = ll2.isEmpty() ? 0 : ll2.poll();
            int val = val1 + val2 + carry;
            carry = (val > 9) ? 1 : 0;
            ListNode temp = new ListNode((val) % 10);
            if (head == null) {
                head = temp;
            } else {
                temp.next = head;
                head = temp;
            }
        }
        if (carry == 1) {
            ListNode temp = new ListNode(1);
            temp.next = head;
            head = temp;
        }
        return head;
    }
}
