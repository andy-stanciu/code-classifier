/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head1 = reverse(l1);
        ListNode head2 = reverse(l2);
        ListNode sumHead = new ListNode(0);
        ListNode temp = sumHead;
        int c = 0;
        while (head1 != null || head2 != null) {
            int sum = c;
            if (head1 != null) {
                sum += head1.val;
                head1 = head1.next;
            }
            if (head2 != null) {
                sum += head2.val;
                head2 = head2.next;
            }
            c = (sum) / 10;
            sum = (sum) % 10;
            ListNode node = new ListNode(sum);
            temp.next = node;
            temp = temp.next;
        }
        if (c > 0) {
            ListNode node = new ListNode(c);
            temp.next = node;
        }
        return reverse(sumHead.next);
    }

    public ListNode reverse(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        //returns 3->4->2 temp=3 head=7
        ListNode temp = reverse(head.next);
        head.next.next = head;
        head.next = null;
        //return head of reversed list ie. 3
        return temp;
    }
}
