/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverse(ListNode l) {
        ListNode prev = null, node = l, t = null;
        while (node != null) {
            t = node.next;
            node.next = prev;
            prev = node;
            node = t;
        }
        return prev;
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        int t = 0;
        ListNode node = null, prev = null, head = null;
        while (l1 != null || l2 != null) {
            if (l1 != null) {
                t += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                t += l2.val;
                l2 = l2.next;
            }
            node = new ListNode((t % 10));
            if (head == null) {
                head = node;
                prev = node;
            } else {
                prev.next = node;
                prev = node;
            }
            t /= 10;
        }
        if (t != 0) {
            node = new ListNode((t % 10));
            prev.next = node;
        }
        head = reverse(head);
        return head;
    }
}
