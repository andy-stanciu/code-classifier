/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> stack1 = new Stack<>();
        Stack<Integer> stack2 = new Stack<>();
        while (l1 != null) {
            stack1.push(l1.val);
            l1 = l1.next;
        }
        while (l2 != null) {
            stack2.push(l2.val);
            l2 = l2.next;
        }
        int carry = 0;
        ListNode head = new ListNode();
        ListNode loc = new ListNode();
        while (!stack1.empty() && !stack2.empty()) {
            int x = stack1.peek() + stack2.peek() + carry;
            stack1.pop();
            stack2.pop();
            if (9 < x) {
                x = x % 10;
                carry = 1;
            } else
                carry = 0;
            ListNode temp = new ListNode(x, null);
            if (head == null)
                head.next = temp;
            else {
                temp.next = head.next;
                head.next = temp;
            }
        }
        while (!stack1.empty()) {
            int x = stack1.peek() + carry;
            if (9 < x) {
                x = x % 10;
                carry = 1;
            } else
                carry = 0;
            ListNode temp = new ListNode(x, null);
            if (head == null)
                head.next = temp;
            else {
                temp.next = head.next;
                head.next = temp;
            }
            stack1.pop();
        }
        while (!stack2.empty()) {
            int x = stack2.peek() + carry;
            if (9 < x) {
                x = x % 10;
                carry = 1;
            } else
                carry = 0;
            ListNode temp = new ListNode(x, null);
            if (head == null)
                head.next = temp;
            else {
                temp.next = head.next;
                head.next = temp;
            }
            stack2.pop();
        }
        if (carry != 0) {
            ListNode temp = new ListNode(1, null);
            if (head == null)
                head.next = temp;
            else {
                temp.next = head.next;
                head.next = temp;
            }
        }
        return head.next;
    }
}
