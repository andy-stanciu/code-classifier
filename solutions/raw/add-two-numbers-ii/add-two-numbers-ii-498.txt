/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        }
        if (l2 == null) {
            return l1;
        }
        ListNode nl1 = reverse(l1);
        ListNode nl2 = reverse(l2);
        ListNode dummyNode = new ListNode();
        ListNode temp = dummyNode;
        int carry = 0;
        while (nl1 != null || nl2 != null || carry == 1) {
            int sum = 0;
            if (nl1 != null) {
                sum += nl1.val;
                nl1 = nl1.next;
            }
            if (nl2 != null) {
                sum += nl2.val;
                nl2 = nl2.next;
            }
            sum += carry;
            carry = sum / 10;
            ListNode node = new ListNode(sum % 10);
            temp.next = node;
            temp = temp.next;
        }
        return reverse(dummyNode.next);
    }

    public ListNode reverse(ListNode head) {
        if (head == null || head.next == null)
            return head;
        ListNode rest = reverse(head.next);
        head.next.next = head;
        head.next = null;
        return rest;
    }
}
