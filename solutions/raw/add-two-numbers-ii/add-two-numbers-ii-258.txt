/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> store1 = new Stack<>();
        Stack<Integer> store2 = new Stack<>();
        ListNode dummy = null;
        // ListNode current=dummy;
        ListNode current1 = l1;
        ListNode current2 = l2;
        int sum = 0, carry = 0;
        while (current1 != null) {
            store1.push(current1.val);
            // so there I push all l1 element in a stack.
            current1 = current1.next;
        }
        while (current2 != null) {
            store2.push(current2.val);
            // there I push all the l2 element in a stack.
            current2 = current2.next;
        }
        while (!store1.isEmpty() || !store2.isEmpty()) {
            sum = 0 + carry;
            if (!store1.isEmpty()) {
                // There we add first element.
                sum += store1.pop();
            }
            if (!store2.isEmpty()) {
                // There we add second element.
                sum += store2.pop();
            }
            // There we find the carry.
            carry = (sum / 10);
            // There we add our node in current.next pointer.
            ListNode newList = new ListNode(sum % 10);
            newList.next = dummy;
            dummy = newList;
        }
        if (carry == 1) {
            ListNode newList = new ListNode(1);
            newList.next = dummy;
            dummy = newList;
        }
        return dummy;
    }
}
