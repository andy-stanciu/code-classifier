/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode arr1, ListNode arr2) {
        ListNode head1 = arr1;
        ListNode head2 = arr2;
        ListNode ans = new ListNode(0);
        ListNode head3 = ans;
        //3 4 2 7
        head1 = rev(head1);
        //4 6 5
        head2 = rev(head2);
        int count = 0;
        while (head1 != null && head2 != null) {
            int sum = head1.val + head2.val + count;
            count = sum / 10;
            // store
            head3.next = new ListNode(sum % 10);
            head1 = head1.next;
            head2 = head2.next;
            head3 = head3.next;
        }
        while (head1 != null) {
            int sum = head1.val + count;
            count = sum / 10;
            head3.next = new ListNode(sum % 10);
            head1 = head1.next;
            head3 = head3.next;
        }
        while (head2 != null) {
            int sum = head2.val + count;
            count = sum / 10;
            head3.next = new ListNode(sum % 10);
            head2 = head2.next;
            head3 = head3.next;
        }
        if (count == 1) {
            head3.next = new ListNode(1);
        }
        ListNode ans1 = rev(ans.next);
        return ans1;
    }

    public ListNode rev(ListNode start) {
        ListNode current = start;
        ListNode prv = null;
        while (current != null) {
            ListNode newNode = current.next;
            current.next = prv;
            prv = current;
            current = newNode;
        }
        return prv;
    }
}
