/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> s1 = new Stack<>();
        Stack<Integer> s2 = new Stack<>();
        while (l1 != null) {
            s1.push(l1.val);
            l1 = l1.next;
        }
        // 7 2 4 3
        while (l2 != null) {
            s2.push(l2.val);
            l2 = l2.next;
        }
        // 5 6 4
        Stack<Integer> q = new Stack<>();
        int carry = 0;
        while (!s1.isEmpty() || !s2.isEmpty()) {
            if (s1.size() != 0 && s2.size() != 0) {
                int f = s1.pop();
                int s = s2.pop();
                if (carry + (f + s) % 10 >= 10)
                    q.push((carry + f + s) % 10);
                else
                    q.push(carry + (f + s) % 10);
                carry = (carry + f + s) / 10;
            } else if (s1.size() == 0 && s2.size() != 0) {
                int s = s2.pop();
                if (carry + (s) % 10 >= 10)
                    q.push((carry + s) % 10);
                else
                    q.push(carry + (s) % 10);
                carry = (carry + s) / 10;
            } else if (s1.size() != 0 && s2.size() == 0) {
                int f = s1.pop();
                if (carry + (f) % 10 >= 10)
                    q.push((carry + f) % 10);
                else
                    q.push(carry + (f) % 10);
                carry = (carry + f) / 10;
            }
        }
        if (carry != 0)
            q.push(1);
        ListNode curr = new ListNode(q.pop());
        ListNode res = curr;
        while (!q.isEmpty()) {
            ListNode prev = curr;
            curr = new ListNode();
            curr.val = q.pop();
            curr.next = null;
            prev.next = curr;
        }
        return res;
    }
}
