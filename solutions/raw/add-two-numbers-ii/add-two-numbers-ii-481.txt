/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode node1 = reverse(l1);
        ListNode node2 = reverse(l2);
        ListNode node3 = new ListNode();
        ListNode head = node3;
        int carry = 0;
        while (node1 != null || node2 != null) {
            int a = 0;
            int b = 0;
            if (node1 != null) {
                a = node1.val;
                node1 = node1.next;
            }
            if (node2 != null) {
                b = node2.val;
                node2 = node2.next;
            }
            if (a + b + carry > 9) {
                ListNode new_node = new ListNode((a + b + carry) % 10);
                node3.next = new_node;
                carry = 1;
            } else {
                ListNode new_node = new ListNode(a + b + carry);
                node3.next = new_node;
                carry = 0;
            }
            node3 = node3.next;
        }
        if (carry == 1) {
            ListNode new_node = new ListNode(1);
            node3.next = new_node;
        }
        return reverse(head.next);
    }

    public ListNode reverse(ListNode l1) {
        ListNode cur = l1;
        ListNode prev = null;
        ListNode nex = new ListNode();
        while (cur != null) {
            nex = cur.next;
            cur.next = prev;
            prev = cur;
            cur = nex;
        }
        return prev;
    }
}
