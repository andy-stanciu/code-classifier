/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        return reverse(sumNumbers(l1, l2, 0));
    }

    private ListNode sumNumbers(ListNode l1, ListNode l2, int carry) {
        if (l1 == null && l2 == null) {
            return carry != 0 ? new ListNode(carry) : null;
        }
        if (l1 == null) {
            int sum = l2.val + carry;
            int newCarry = sum / 10;
            ListNode current = new ListNode(sum % 10);
            current.next = sumNumbers(l1, l2.next, newCarry);
            return current;
        }
        if (l2 == null) {
            int sum = l1.val + carry;
            int newCarry = sum / 10;
            ListNode current = new ListNode(sum % 10);
            current.next = sumNumbers(l1.next, l2, newCarry);
            return current;
        }
        int sum = l1.val + l2.val + carry;
        int newCarry = sum / 10;
        ListNode current = new ListNode(sum % 10);
        current.next = sumNumbers(l1.next, l2.next, newCarry);
        return current;
    }

    private ListNode reverse(ListNode head) {
        if (head == null || head.next == null)
            return head;
        ListNode otherHead = reverse(head.next);
        head.next.next = head;
        head.next = null;
        return otherHead;
    }
}
