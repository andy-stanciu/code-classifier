/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if (l1 == null && l2 == null) {
            return null;
        }
        if (l1 == null) {
            return l1;
        }
        if (l2 == null) {
            return l2;
        }
        int carry = 0, sum = 0;
        List<Integer> list_1 = new ArrayList<>();
        List<Integer> list_2 = new ArrayList<>();
        ListNode currentNode = new ListNode();
        while (l1 != null || l2 != null) {
            if (l1 != null) {
                list_1.add(l1.val);
                l1 = l1.next;
            }
            if (l2 != null) {
                list_2.add(l2.val);
                l2 = l2.next;
            }
        }
        sum = 0;
        carry = 0;
        ListNode next = null;
        int i = list_1.size() - 1, j = list_2.size() - 1;
        while (i >= 0 || j >= 0) {
            sum = carry;
            if (i >= 0) {
                sum += list_1.get(i);
            }
            if (j >= 0) {
                sum += list_2.get(j);
            }
            carry = 0;
            if (sum >= 10) {
                carry = sum / 10;
            }
            sum = sum % 10;
            currentNode = new ListNode(sum);
            currentNode.next = next;
            next = currentNode;
            i--;
            j--;
        }
        if (carry != 0) {
            ListNode result = new ListNode(carry);
            result.next = next;
            return result;
        }
        return next;
    }
}
// Time O(n)
// Space O(n)
