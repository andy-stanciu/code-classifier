/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode list1 = reverse(l1);
        ListNode list2 = reverse(l2);
        int carry = 0;
        ListNode dummy = new ListNode();
        ListNode tracker = dummy;
        while (list1 != null || list2 != null) {
            int num1 = 0;
            int num2 = 0;
            if (list1 != null) {
                num1 = list1.val;
                list1 = list1.next;
            }
            if (list2 != null) {
                num2 = list2.val;
                list2 = list2.next;
            }
            int sum = num1 + num2 + carry;
            carry = sum / 10;
            int digit = sum % 10;
            ListNode newNode = new ListNode(digit);
            tracker.next = newNode;
            tracker = tracker.next;
        }
        if (carry > 0) {
            ListNode lastNode = new ListNode(carry);
            tracker.next = lastNode;
            tracker = tracker.next;
        }
        return reverse(dummy.next);
    }

    private ListNode reverse(ListNode head) {
        if (head.next == null || head == null)
            return head;
        ListNode tracker = null;
        while (head != null) {
            ListNode nextNext = head.next;
            head.next = tracker;
            tracker = head;
            head = nextNext;
        }
        //can create pointers but have to eventually move/return the original node
        return tracker;
    }
}
