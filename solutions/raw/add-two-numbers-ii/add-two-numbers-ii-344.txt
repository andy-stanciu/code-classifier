/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> stack1 = new Stack<>(), stack2 = new Stack<>();
        addListToStack(l1, stack1);
        addListToStack(l2, stack2);
        ListNode current = null;
        int carry = 0;
        while (!stack1.empty() || !stack2.isEmpty() || carry != 0) {
            int sum = carry + (stack1.isEmpty() ? 0 : stack1.pop()) + (stack2.isEmpty() ? 0 : stack2.pop());
            ListNode newCurrent = new ListNode(sum % 10);
            carry = sum / 10;
            newCurrent.next = current;
            current = newCurrent;
        }
        return current;
    }

    public static void addListToStack(ListNode l, Stack<Integer> stack) {
        while (l != null) {
            stack.add(l.val);
            l = l.next;
        }
    }
}
