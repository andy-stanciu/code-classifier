/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseLL(ListNode l1) {
        ListNode prev = null;
        while (l1 != null) {
            ListNode next = l1.next;
            l1.next = prev;
            prev = l1;
            l1 = next;
        }
        return prev;
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverseLL(l1);
        l2 = reverseLL(l2);
        int carry = 0;
        ListNode prev = null;
        while (l1 != null && l2 != null) {
            int sum = (l1.val + l2.val + carry);
            ListNode newNode = new ListNode((sum) % 10);
            carry = sum / 10;
            l1 = l1.next;
            l2 = l2.next;
            newNode.next = prev;
            prev = newNode;
        }
        while (l1 != null) {
            int sum = (l1.val + carry);
            ListNode newNode = new ListNode((sum) % 10);
            carry = sum / 10;
            l1 = l1.next;
            newNode.next = prev;
            prev = newNode;
        }
        while (l2 != null) {
            int sum = (l2.val + carry);
            ListNode newNode = new ListNode((sum) % 10);
            carry = sum / 10;
            l2 = l2.next;
            newNode.next = prev;
            prev = newNode;
        }
        if (carry != 0 || prev == null) {
            ListNode newNode = new ListNode(carry);
            newNode.next = prev;
            prev = newNode;
        }
        return prev;
    }
}
