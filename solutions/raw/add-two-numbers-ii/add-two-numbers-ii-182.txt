/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    ListNode head;

    public ListNode addTwoNumbers(ListNode h1, ListNode h2) {
        ListNode l1 = h1;
        ListNode l2 = h2;
        while (l1 != null && l2 != null) {
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            ListNode leadingZeros = new ListNode(0, h2);
            h2 = leadingZeros;
            l1 = l1.next;
        }
        while (l2 != null) {
            ListNode leadingZeros = new ListNode(0, h1);
            h1 = leadingZeros;
            l2 = l2.next;
        }
        head = null;
        int c = add(h1, h2);
        if (c != 0) {
            ListNode newnode = new ListNode(c, head);
            return newnode;
        }
        return head;
    }

    private int add(ListNode h1, ListNode h2) {
        if (h1 == null) {
            // both will be null at same time
            return 0;
        }
        int carry = add(h1.next, h2.next);
        int sum = h1.val + h2.val + carry;
        ListNode newnode = new ListNode(sum % 10, head);
        head = newnode;
        return sum / 10;
    }
}
