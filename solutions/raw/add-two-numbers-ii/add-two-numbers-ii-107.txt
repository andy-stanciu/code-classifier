/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode l3 = reverse(l1);
        ListNode current1 = l3;
        ListNode l4 = reverse(l2);
        ListNode current2 = l4;
        int count1 = 0;
        int count2 = 0;
        int diff = 0;
        while (current1 != null) {
            count1++;
            current1 = current1.next;
        }
        while (current2 != null) {
            count2++;
            current2 = current2.next;
        }
        ListNode curr3 = l3;
        ListNode curr4 = l4;
        if (count1 > count2) {
            diff = count1 - count2;
            while (diff != 0) {
                if (curr4.next == null) {
                    ListNode newNode = new ListNode(0);
                    curr4.next = newNode;
                    diff--;
                }
                curr4 = curr4.next;
            }
        } else {
            diff = count2 - count1;
            while (diff != 0) {
                if (curr3.next == null) {
                    ListNode newNode = new ListNode(0);
                    curr3.next = newNode;
                    diff--;
                }
                curr3 = curr3.next;
            }
        }
        current2 = l4;
        while (current2 != null) {
            count2++;
            current2 = current2.next;
        }
        ListNode curr1 = l3;
        ListNode curr2 = l4;
        ListNode newLL = new ListNode(-1);
        ListNode n = newLL;
        int carry = 0;
        while (curr1 != null && curr2 != null) {
            ListNode sumNode = new ListNode();
            sumNode.val = (curr1.val + curr2.val + carry) % 10;
            n.next = sumNode;
            n = n.next;
            carry = (curr1.val + curr2.val + carry) / 10;
            curr1 = curr1.next;
            curr2 = curr2.next;
        }
        if (carry != 0) {
            ListNode node = new ListNode(carry);
            n.next = node;
        }
        return reverse(newLL.next);
    }

    public ListNode reverse(ListNode head) {
        ListNode curr = head;
        ListNode prev = null;
        while (curr != null) {
            ListNode newNode = new ListNode(curr.val);
            newNode.next = prev;
            prev = newNode;
            curr = curr.next;
        }
        return prev;
    }
}
