/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ArrayList<Integer> list1 = new ArrayList<>();
        ArrayList<Integer> list2 = new ArrayList<>();
        ListNode temp = l1;
        while (temp != null) {
            list1.add(temp.val);
            temp = temp.next;
        }
        temp = l2;
        while (temp != null) {
            list2.add(temp.val);
            temp = temp.next;
        }
        ArrayList<Integer> ans = new ArrayList<>();
        int rem = 0;
        int i = list1.size() - 1;
        int j = list2.size() - 1;
        while (i >= 0 && j >= 0) {
            int p = rem + list1.get(i) + list2.get(j);
            i--;
            j--;
            if (p >= 10) {
                ans.add(p % 10);
                rem = 1;
            } else {
                ans.add(p);
                rem = 0;
            }
        }
        while (i >= 0) {
            int p = rem + list1.get(i);
            i--;
            if (p >= 10) {
                ans.add(p % 10);
                rem = 1;
            } else {
                ans.add(p);
                rem = 0;
            }
        }
        while (j >= 0) {
            int p = rem + list2.get(j);
            j--;
            if (p >= 10) {
                ans.add(p % 10);
                rem = 1;
            } else {
                ans.add(p);
                rem = 0;
            }
        }
        if (rem == 1) {
            ans.add(1);
        }
        Collections.reverse(ans);
        temp = new ListNode(ans.get(0));
        l1 = temp;
        j = 1;
        while (j < ans.size()) {
            ListNode t = new ListNode(ans.get(j));
            temp.next = t;
            temp = temp.next;
            j++;
        }
        return l1;
    }
}
