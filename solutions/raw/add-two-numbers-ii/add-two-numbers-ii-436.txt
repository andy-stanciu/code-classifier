/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int len1 = length(l1);
        int len2 = length(l2);
        if (len1 < len2) {
            return addTwoNumbers(l2, l1);
        }
        ListNode head1 = l1;
        int diff = len1 - len2;
        //move the longer lists pointer ahead by diff steps
        while (diff != 0) {
            l1 = l1.next;
            diff--;
        }
        boolean carry = add(l1, l2);
        if ((head1 == l1)) {
        } else {
            carry = add(head1, l1, carry);
        }
        ListNode head = new ListNode();
        if (carry) {
            head.val = 1;
            head.next = head1;
        } else {
            head = head1;
        }
        return head;
    }

    public boolean add(ListNode head, ListNode l1, boolean carry) {
        if (head.next == l1) {
            int sum = head.val;
            if (carry) {
                sum++;
                carry = false;
            }
            if (sum > 9) {
                sum = sum % 10;
                carry = true;
            }
            head.val = sum;
            return carry;
        }
        boolean s_carry = add(head.next, l1, carry);
        int sum = head.val;
        if (s_carry) {
            sum++;
            s_carry = false;
        }
        if (sum > 9) {
            sum = sum % 10;
            s_carry = true;
        }
        head.val = sum;
        return s_carry;
    }

    public boolean add(ListNode l1, ListNode l2) {
        if (l1.next == null && l2.next == null) {
            int sum = (l1.val + l2.val);
            // System.out.println(sum);
            boolean carry = false;
            if (sum > 9) {
                sum = sum % 10;
                carry = true;
            }
            l1.val = sum;
            return carry;
        }
        boolean carry = add(l1.next, l2.next);
        int sum = (l1.val + l2.val);
        if (carry) {
            sum++;
            carry = false;
        }
        if (sum > 9) {
            sum = sum % 10;
            carry = true;
        }
        l1.val = sum;
        return carry;
    }

    public int length(ListNode head) {
        int len = 0;
        while (head != null) {
            head = head.next;
            len++;
        }
        return len;
    }
}
