class Solution {

    public ListNode reverse(ListNode list) {
        ListNode prev = null;
        ListNode cur = list;
        ListNode last = list.next;
        while (last != null) {
            cur.next = prev;
            prev = cur;
            cur = last;
            last = last.next;
        }
        cur.next = prev;
        return cur;
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        ListNode list = null;
        int carry = 0;
        while (l1 != null && l2 != null) {
            int temp = l1.val + l2.val + carry;
            if (temp >= 10) {
                carry = 1;
                temp = temp % 10;
            } else {
                carry = 0;
            }
            ListNode newNode = new ListNode(temp);
            newNode.next = list;
            list = newNode;
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            int temp = l1.val + carry;
            if (temp >= 10) {
                carry = 1;
                temp = temp % 10;
            } else {
                carry = 0;
            }
            ListNode newNode = new ListNode(temp);
            newNode.next = list;
            list = newNode;
            l1 = l1.next;
        }
        while (l2 != null) {
            int temp = l2.val + carry;
            if (temp >= 10) {
                carry = 1;
                temp = temp % 10;
            } else {
                carry = 0;
            }
            ListNode newNode = new ListNode(temp);
            newNode.next = list;
            list = newNode;
            l2 = l2.next;
        }
        if (carry == 1) {
            ListNode newNode = new ListNode(carry);
            newNode.next = list;
            list = newNode;
        }
        return list;
    }
}
