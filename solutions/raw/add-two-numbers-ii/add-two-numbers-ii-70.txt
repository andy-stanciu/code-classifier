/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    ListNode head;

    ListNode tail;

    int size = 0;

    public void addFirst(int val) {
        ListNode temp = new ListNode(val);
        temp.next = head;
        head = temp;
        if (size == 0) {
            tail = temp;
        }
        size++;
    }

    public int getSize(ListNode node) {
        int size = 0;
        while (node != null) {
            size++;
            node = node.next;
        }
        return size;
    }

    public int addList(ListNode one, int pv1, ListNode two, int pv2, Solution re) {
        if (one == null && two == null) {
            return 0;
        }
        int data = 0;
        if (pv1 > pv2) {
            int oc = addList(one.next, pv1 - 1, two, pv2, re);
            data = one.val + oc;
        } else if (pv1 < pv2) {
            int oc = addList(one, pv1, two.next, pv2 - 1, re);
            data = two.val + oc;
        } else {
            int oc = addList(one.next, pv1 - 1, two.next, pv2 - 1, re);
            data = one.val + two.val + oc;
        }
        int nc = data / 10;
        int nd = data % 10;
        re.addFirst(nd);
        return nc;
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Solution re = new Solution();
        int size1 = getSize(l1);
        int size2 = getSize(l2);
        int oc = addList(l1, size1, l2, size2, re);
        if (oc > 0) {
            re.addFirst(oc);
        }
        return re.head;
    }
}
