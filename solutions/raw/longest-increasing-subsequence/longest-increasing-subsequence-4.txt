class Solution {

    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int[] dp = new int[n];
        int lengthOfLIS = 0;
        for (int current : nums) {
            int i = 0, j = lengthOfLIS;
            while (i != j) {
                int mid = (i + j) / 2;
                if (dp[mid] < current)
                    i = mid + 1;
                else
                    j = mid;
            }
            dp[i] = current;
            if (i == lengthOfLIS)
                lengthOfLIS++;
        }
        return lengthOfLIS;
    }
}
/*Inside the loop:
Initialize two pointers i and j to 0 and lengthOfLIS respectively.
Perform a binary search to find the position where current should be inserted in the dp array to maintain a sorted order.
Update i or j accordingly.
Set dp[i] = current; to update the longest increasing subsequence ending at index i.
If i is equal to lengthOfLIS, it means a new element is added to the end of the increasing subsequence, so increment lengthOfLIS.*/
