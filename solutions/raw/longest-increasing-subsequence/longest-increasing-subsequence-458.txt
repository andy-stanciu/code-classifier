class Solution {

    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int[] dp = new int[nums.length];
        for (int i = 0; i < n; i++) {
            //All elements will make atleast 1 length LIS
            dp[i] = 1;
        }
        int i = 1;
        int j = 0;
        // Tracking max count
        int maxLen = 1;
        while (i < n) {
            //fix i and compare with all elements in left
            while (j < i) {
                if (nums[j] < nums[i]) {
                    //LIS count till smaller element and LIS of current postion
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                    maxLen = Math.max(maxLen, dp[i]);
                }
                j++;
            }
            i++;
            j = 0;
        }
        return maxLen;
    }
}
//Single iteration doesn\'t work
//   for(int i=1 ; i<n ; i++){//1 2 2 2 3
//          int num = nums[i];
//          if(num>nums[i-1]){
//              dp[i] = dp[i-1]+1;
//          }else{
//              dp[i]=dp[i-1];
//          }
//      }
//      return dp[n-1];
//     }
