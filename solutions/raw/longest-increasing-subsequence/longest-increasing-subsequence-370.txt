class Solution {

    public int lengthOfLIS(int[] nums) {
        // ArrayList to elements for the longest increasing subsequence.
        var auxArray = new ArrayList<Integer>();
        auxArray.add(nums[0]);
        for (int element : nums) {
            var lastElementAddedSlot = auxArray.size() - 1;
            // check if element is greater than the last number in the auxArray
            if (element > auxArray.get(lastElementAddedSlot)) {
                // append element to the end of the helper array
                auxArray.add(element);
            } else {
                // replace the smallest number in the auxArray that is greater than or equal to the current number
                int j = 0;
                // you can use binary search to find it faster
                while (element > auxArray.get(j)) {
                    j = j + 1;
                }
                // replacing number in position j for \'element\'.
                auxArray.set(j, element);
            }
        }
        return auxArray.size();
    }
}
