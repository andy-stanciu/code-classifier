class Solution {

    public int lengthOfLIS(int[] nums) {
        int[][] dp = new int[nums.length + 1][nums.length + 1];
        int n = nums.length;
        for (int idx = n - 1; idx >= 0; idx--) {
            for (int last = idx - 1; last >= -1; last--) {
                int noPick = dp[idx + 1][last + 1];
                if (last == -1 || nums[idx] > nums[last]) {
                    noPick = Math.max(1 + dp[idx + 1][idx + 1], noPick);
                }
                dp[idx][last + 1] = noPick;
            }
        }
        return dp[0][-1 + 1];
    }

    public int solve(int[] nums, int idx, int last, int[][] dp) {
        if (idx == nums.length) {
            return 0;
        }
        if (dp[idx][last + 1] != -1) {
            return dp[idx][last + 1];
        }
        int noPick = solve(nums, idx + 1, last, dp);
        if (last == -1 || nums[idx] > nums[last]) {
            return Math.max(1 + solve(nums, idx + 1, last = idx, dp), noPick);
        }
        return dp[idx][last + 1] = noPick;
    }
}
