class Solution {

    //dp function
    public static int LCS(int[] arr1, int[] arr2) {
        //Longest common Substring->helper fnction
        int n = arr1.length;
        int m = arr2.length;
        int[][] dp = new int[n + 1][m + 1];
        //iniotialization of Dp table
        for (int i = 0; i < n + 1; i++) {
            //column 0
            dp[i][0] = 0;
        }
        for (int j = 0; j < m + 1; j++) {
            //row 0
            dp[0][j] = 0;
        }
        // filling bottom up
        for (int i = 1; i < n + 1; i++) {
            for (int j = 1; j < m + 1; j++) {
                if (arr1[i - 1] == arr2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    int ans1 = dp[i - 1][j];
                    int ans2 = dp[i][j - 1];
                    dp[i][j] = Math.max(ans1, ans2);
                }
            }
        }
        return dp[n][m];
    }

    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        //set stores only niqe element of nums
        HashSet<Integer> set = new HashSet<>();
        for (int i = 0; i < n; i++) {
            set.add(nums[i]);
        }
        //unique elements array2
        int[] nums2 = new int[set.size()];
        int i = 0;
        for (int el : set) {
            nums2[i] = el;
            i++;
        }
        //sorted incresing order
        Arrays.sort(nums2);
        return LCS(nums, nums2);
    }
}
