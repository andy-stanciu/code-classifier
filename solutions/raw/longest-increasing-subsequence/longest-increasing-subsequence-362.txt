class Solution {

    public int solve(int i, int prev, int[] arr, int[][] dp) {
        if (i == arr.length)
            return 0;
        if (dp[i][prev + 1] != -1)
            return dp[i][prev + 1];
        int notTake = solve(i + 1, prev, arr, dp);
        int take = 0;
        if (prev == -1 || arr[i] > arr[prev]) {
            //then in call we have to update prev to our i and i to i+1
            take = 1 + solve(i + 1, i, arr, dp);
        }
        return dp[i][prev + 1] = Math.max(take, notTake);
    }

    public int lengthOfLIS(int[] arr) {
        int n = arr.length;
        int[][] dp = new int[n][n + 1];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        //starting from 0th idx and prev smaller idx for 0th idx is let say -1 for now, as there is no idx=-1 ,we will keep track that what is the prev element used in array of ans ,as we are not making array , so we just keeping track of it
        return solve(0, -1, arr, dp);
    }
}
