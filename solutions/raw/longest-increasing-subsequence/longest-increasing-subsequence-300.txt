class Solution {

    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        if (n == 0)
            return 0;
        int[] dp = new int[n];
        int maxlen = 0;
        for (int i = 0; i < n; i++) {
            // Initialize LIS ending at each index to 1
            dp[i] = 1;
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            maxlen = Math.max(maxlen, dp[i]);
        }
        return maxlen;
        /*  ----- strivers sol --------
       int n=arr.length;
        int dp[][]=new int[n+1][n+1];
        for(int index=n-1; index>=0; index--)
        {
            for(int prev=index-1; prev>=-1; prev--)
            {
                int not_take = 0+dp[index+1][prev+1];
                int take=0;

                if(prev == -1 || arr[index] > arr[prev])
                {
                    take = 1 + dp[index+1][index+1];
                }

                dp[index][prev+1]=Math.max(take,not_take);
            }
        }
        return dp[0][0];

        */
    }
}
