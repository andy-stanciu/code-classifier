class Solution {

    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        // List to track potential LIS endings
        List<Integer> sorted = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            /*
             Find the appropriate index to insert nums[i] in sorted
             to maintain increasing order and potentially create longer LIS.
            */
            int index = binarySearch(sorted, nums[i]);
            if (index == sorted.size()) {
                // Append if it\'s the largest so far
                sorted.add(nums[i]);
            } else {
                // Replace to potentially create a longer LIS with a smaller ending value
                sorted.set(index, nums[i]);
            }
        }
        // Length of the longest increasing subsequence
        return sorted.size();
    }

    private int binarySearch(List<Integer> sorted, int target) {
        int left = 0, right = sorted.size();
        int result = sorted.size();
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (sorted.get(mid) < target) {
                left = mid + 1;
            } else {
                result = mid;
                right = mid;
            }
        }
        return result;
    }
}
