class Solution {

    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        // dp[i] stores the length of LIS ending at index i
        int[] dp = new int[n];
        // Initialize each position with 1, as every element can be a subsequence of length 1 by itself
        Arrays.fill(dp, 1);
        // To store the maximum length of LIS found
        int maxLIS = 1;
        for (int i = 1; i < n; i++) {
            // Start from the second element
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    // If nums[i] can extend the sequence ending at nums[j]
                    // Update dp[i] with the max length possible
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            // Update the maximum length of LIS found so far
            maxLIS = Math.max(maxLIS, dp[i]);
        }
        return maxLIS;
    }
}
