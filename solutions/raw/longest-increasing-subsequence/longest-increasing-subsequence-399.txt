class Solution {

    // TC: O(n*n)
    // SC: O(n*n)
    public int lengthOfLIS(int[] nums) {
        final int n = nums.length;
        int[][] dp = new int[n][n + 1];
        return f(nums, -1, 0, dp);
    }

    private int f(int[] nums, int prev, int i, int[][] dp) {
        final int n = nums.length;
        if (i >= n) {
            return 0;
        }
        if (dp[i][prev + 1] != 0) {
            return dp[i][prev + 1];
        }
        int notPick = f(nums, prev, i + 1, dp);
        int pick = 0;
        if (prev == -1 || nums[prev] < nums[i]) {
            pick = 1 + f(nums, i, i + 1, dp);
        }
        return dp[i][prev + 1] = Math.max(notPick, pick);
    }
}
