/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    // recursive method
    public void recursiveShmecursive(TreeNode root, ArrayList<Integer> order) {
        // check if null
        if (root != null) {
            // call left side
            recursiveShmecursive(root.left, order);
            // add IN BETWEEN left and right
            order.add(root.val);
            // call right side
            recursiveShmecursive(root.right, order);
        }
    }

    public List<Integer> inorderTraversal(TreeNode root) {
        // list to hold our values
        ArrayList<Integer> order = new ArrayList<Integer>();
        // call helper function
        recursiveShmecursive(root, order);
        // return list
        return order;
    }
}
