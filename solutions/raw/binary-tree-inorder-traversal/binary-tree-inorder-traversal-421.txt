/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    // public List<Integer> inorder(TreeNode root, List ans) {
    //     if (root != null) {
    //         inorder(root.left, ans);
    //         ans.add(root.val);
    //         inorder(root.right, ans);
    //     }
    //     return ans;
    // }
    public List<Integer> inorderTraversal(TreeNode root) {
        // ArrayList<Integer> answer = new ArrayList<Integer>();
        // return inorder(root, answer);
        ArrayList<Integer> answer = new ArrayList<Integer>();
        Stack<TreeNode> st = new Stack<TreeNode>();
        TreeNode ptr = root;
        while (true) {
            if (ptr != null) {
                st.push(ptr);
                ptr = ptr.left;
            } else {
                if (st.isEmpty())
                    break;
                ptr = st.pop();
                answer.add(ptr.val);
                ptr = ptr.right;
            }
        }
        return answer;
    }
}
