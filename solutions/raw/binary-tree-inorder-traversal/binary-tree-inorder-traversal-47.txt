/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<Integer>();
        //     TreeNode temp;
        //     int a = totalNodes(root);
        //     System.out.println(a);
        //     if(a==0){
        //     }
        //     else if(a==1){
        //         list.add(root.val);
        //     }
        //     else
        //     {
        //         temp= root;
        //         // while(root.val!= 0)
        //         for(int i=0;i<a;i++)
        //         {
        //             if(temp.left == null){
        //                 list.add(temp.val);
        //                 temp.val=0;
        //                 temp=temp.right;
        //             }
        //             else if(temp.left!=null){
        //                 // temp=temp.left;
        //                 list.add(temp.left.val);
        //                 temp.left.val=0;
        //                 // list.add(temp.val);
        //             }
        //         }
        //     }
        // return list;
        // }
        // int totalNodes(TreeNode root)
        // {
        //     if (root == null)
        //         return 0;
        //     int l = totalNodes(root.left);
        //     int r = totalNodes(root.right);
        //     return 1 + l + r;
        if (root == null)
            return list;
        if (root.left == null) {
            list.add(root.val);
            list.addAll(inorderTraversal(root.right));
            // list.addAll(inorderTraversal(root.left));
            return list;
        }
        if (root.right == null) {
            // list.addAll(inorderTraversal(root.right));
            list.addAll(inorderTraversal(root.left));
            list.add(root.val);
            return list;
        }
        list.addAll(inorderTraversal(root.left));
        list.add(root.val);
        list.addAll(inorderTraversal(root.right));
        return list;
    }
}
