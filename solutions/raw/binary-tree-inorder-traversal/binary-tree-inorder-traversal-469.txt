/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Integer> inorderTraversal(TreeNode root) {
        ArrayList<Integer> a1 = new ArrayList<>();
        //return recursionway(a1, root);
        Stack<TreeNode> s1 = new Stack<>();
        if (root == null)
            return a1;
        s1.push(root);
        while (!s1.isEmpty()) {
            TreeNode temp = s1.peek();
            if (temp.left != null) {
                s1.push(temp.left);
                // tree ko tod denge hum iske jgha visited bhi kr skte hainn vo backtracking ho jayegi
                temp.left = null;
            } else {
                s1.pop();
                a1.add(temp.val);
                if (temp.right != null) {
                    s1.push(temp.right);
                }
            }
        }
        return a1;
    }

    public List<Integer> recursionway(List<Integer> a1, TreeNode root) {
        // if empty return empty
        if (root == null)
            return a1;
        // yhe kaam recursion krdega
        recursionway(a1, root.left);
        // yhe self work
        a1.add(root.val);
        // yhe kaam bhi recursion krega multiple recusion call
        recursionway(a1, root.right);
        return a1;
    }
}
