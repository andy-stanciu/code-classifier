/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> inorT = new ArrayList<>();
        // inorderTraversal(root, inorT);
        // inorderTraversalIterative(root, inorT);
        inorderTraversalMories(root, inorT);
        return inorT;
    }

    public void inorderTraversal(TreeNode root, List<Integer> inorT) {
        if (root == null)
            return;
        inorderTraversal(root.left, inorT);
        inorT.add(root.val);
        inorderTraversal(root.right, inorT);
    }

    public void inorderTraversalIterative(TreeNode root, List<Integer> inorT) {
        if (root == null)
            return;
        final Stack<TreeNode> stack = new Stack<>();
        while (null != root || !stack.isEmpty()) {
            while (root != null) {
                stack.push(root);
                root = root.left;
            }
            if (stack.isEmpty())
                return;
            root = stack.pop();
            inorT.add(root.val);
            root = root.right;
        }
    }

    public void inorderTraversalMories(TreeNode root, List<Integer> inorT) {
        if (root == null)
            return;
        TreeNode temp = null;
        while (root != null) {
            if (root.left == null) {
                inorT.add(root.val);
                root = root.right;
            } else {
                temp = root.left;
                while (temp.right != null && temp.right != root) {
                    temp = temp.right;
                }
                if (temp.right == null) {
                    temp.right = root;
                    root = root.left;
                } else {
                    inorT.add(root.val);
                    temp.right = null;
                    root = root.right;
                }
            }
        }
    }
}
