/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Integer> inorderTraversal(TreeNode root) {
        //to store the values of the nodes
        List<Integer> result = new ArrayList<>();
        //stack to help with storing nodes as we iterate through the tree
        //we would pop and push into this tack depending
        Stack<TreeNode> stack = new Stack<>();
        //get the root of tree
        TreeNode current = root;
        while (current != null || !stack.isEmpty()) {
            //second while loop to traverse to extreme left
            while (current != null) {
                //push current node into the stack to save it
                stack.push(current);
                //traverse to left node of current
                current = current.left;
            }
            //at this point current is null and we have gone through the left side
            //get last node put in current
            current = stack.pop();
            //add node value to the result array
            result.add(current.val);
            //since we have gone through all of the left we then check the right
            current = current.right;
            //Note if right is null it simply just goes back u and pop the prevous node before this current
        }
        return result;
    }
}
