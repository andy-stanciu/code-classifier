/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    // O(n) & O(n)
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        //  recursive
        // inOrder(root,res);
        // iterative
        Stack<TreeNode> stk = new Stack<>();
        TreeNode curr = root;
        while (curr != null || !stk.isEmpty()) {
            // keep pushing curr.left till null
            while (curr != null) {
                stk.push(curr);
                curr = curr.left;
            }
            // pop and add to result and go right
            curr = stk.pop();
            res.add(curr.val);
            curr = curr.right;
        }
        return res;
    }

    public void inOrder(TreeNode curr, List<Integer> list) {
        if (curr == null)
            return;
        inOrder(curr.left, list);
        list.add(curr.val);
        inOrder(curr.right, list);
    }
}
