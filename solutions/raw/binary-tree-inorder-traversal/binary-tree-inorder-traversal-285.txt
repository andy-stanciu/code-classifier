/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    // List to store the result of the in-order traversal
    List<Integer> res = new ArrayList<>();

    // Function to perform in-order traversal of the binary tree
    public List<Integer> inorderTraversal(TreeNode root) {
        // If the current node is null, return the result list
        if (root == null) {
            return res;
        }
        // Recursively traverse the left subtree
        res = inorderTraversal(root.left);
        // Add the current node\'s value to the result list
        res.add(root.val);
        // Recursively traverse the right subtree
        res = inorderTraversal(root.right);
        // Return the result list after traversal
        return res;
    }
}
