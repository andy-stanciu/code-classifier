class Solution {

    public boolean canJump(int[] nums) {
        // maxPos denotes the farthest index we are able to reach
        int maxPos = 0;
        for (int i = 0; i < nums.length; i++) {
            // i > maxPos denotes that we couldn\'t have reached the current index,
            // we made it till (current index - 1) which can never be the last index.
            if (i > maxPos)
                return false;
            // calculate the farthest (till what we have seen) we could reach from the current index.
            maxPos = Math.max(i + nums[i], maxPos);
            // the farthest we could reach is the last index or past that
            if (maxPos >= nums.length - 1)
                return true;
        }
        return true;
    }
}
