class Solution {

    public boolean canJump(int[] nums) {
        /**
         *            [2,3,1,1,4]
         *
         *            Approach: BFS
         *
         *            starting window: 2
         *
         *            from first window we can jump to 3 and 1
         *            second window: 3, 1
         *
         *            from third window we can jump to 1 and 4
         *            third window: 1, 4
         *
         *            Time Complexity : O(n)
         *            Space Complexity: O(n)
         */
        int leftPointer = 0;
        int rightPointer = 0;
        int farthest = 0;
        while (rightPointer < nums.length - 1) {
            while (leftPointer <= rightPointer) {
                farthest = Math.max(farthest, leftPointer + nums[leftPointer]);
                leftPointer++;
            }
            if (farthest <= rightPointer)
                return false;
            rightPointer = farthest;
        }
        return true;
    }
}
