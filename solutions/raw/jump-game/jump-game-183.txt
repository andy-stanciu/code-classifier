class Solution {

    boolean helper(int i, int[] nums, Boolean[] memo) {
        // Reached or passed the last index
        if (i >= nums.length - 1)
            return true;
        if (memo[i] != null)
            return memo[i];
        // try all jumps of size from nums[i] to 1 until we reach or pass the last index
        for (int jump = nums[i]; jump >= 1; jump--) {
            // If a way to reach or pass the last index includes
            // making a jump of size \'jump\' from the current index.
            if (helper(i + jump, nums, memo)) {
                memo[i] = true;
                return true;
            }
        }
        // unable to reach or pass the last index from the current index
        memo[i] = false;
        return false;
    }

    public boolean canJump(int[] nums) {
        Boolean[] memo = new Boolean[nums.length];
        return helper(0, nums, memo);
    }
}
