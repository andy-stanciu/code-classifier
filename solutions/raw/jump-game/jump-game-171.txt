class Solution {

    public boolean canJump(int[] nums) {
        // Our approach is based on assumption
        // suppose we can reach the last index or destination
        // but how did we reach there with the help of previous one obviousily ?
        // so now we can reach our end or goal with the help of the previous one
        // if its true then we can say that if we want to reach the end we have to
        // reach its previous one ? yes !
        // then we can say our new end is the previous element ? and we need to repeat the same procedure ? and update our end accordingly? yes thats the plan
        // goal is the end point
        int goal = nums.length - 1;
        // check whether we can reach the goal and update it
        for (int i = nums.length - 1; i >= 0; i--) {
            // if we can reach the goal with previous one , the previous one is the new goal and repeating this procedure
            if (nums[i] + i >= goal)
                // updating new goal(if we can reach end or goal from previous one)
                goal = i;
        }
        // that said if we reach goal from start then our goal\'s value should be 0 as array starts from index 0
        return goal == 0;
    }
}
