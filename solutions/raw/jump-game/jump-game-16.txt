public class Solution {

    // Approach 1: Greedy method using forward traversal
    public boolean canJump(int[] nums) {
        // Represents the maximum index we can reach
        int maxi = 0;
        // Initializes the current index
        int i = 0;
        // Traverse the array while the current index is within bounds
        // and we can still reach the current index
        while (i < nums.length && i <= maxi) {
            // Update the maximum reachable index from the current position
            maxi = Math.max(maxi, i + nums[i]);
            // Move to the next index
            i++;
        }
        // Check if we can reach the last index or beyond
        // Return true if reachable, false otherwise
        return maxi >= nums.length - 1;
    }

    // Approach 2: Greedy method using backward traversal
    public boolean canJump(int[] nums) {
        // finPos starts at the last index
        int finPos = nums.length - 1;
        // Iterate backwards through the array from the second-to-last index
        for (int i = nums.length - 2; i >= 0; i--) {
            // Check if we can reach finPos from the current index
            if (i + nums[i] >= finPos) {
                // Update finPos to the current index as it\'s reachable
                finPos = i;
            }
        }
        // If we can reach the start index (0), return true
        // Return true if reachable from the start, false otherwise
        return finPos == 0;
    }
}
