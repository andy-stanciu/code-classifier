class Solution {

    // recursive
    public boolean canJump(int[] nums) {
        // each nums[i] represent the max jump
        // we can jump from the index i position
        // we need to see if we can reach the last index.
        if (nums.length == 1) {
            return true;
        }
        return helper(nums, nums.length - 1);
    }

    private boolean helper(int[] nums, int reachIndex) {
        if (reachIndex == 0) {
            return true;
        }
        for (int i = reachIndex - 1; i >= 0; i -= 1) {
            if (nums[i] + i >= reachIndex) {
                return helper(nums, i);
            }
        }
        return false;
    }

    // Greedy
    public boolean canJump(int[] nums) {
        // our goal is index of nums.length - 1 and we called it n
        // if nums[n - 1] + n - 1 >= nums[n], that means
        // every index can jump to nums[n - 1] can also
        // jump to the goal index
        int goal = nums.length - 1;
        // we start from the n - 1 index, if n - 1 index
        // can reach n, n - 1 is our goal index and so on
        for (int i = goal - 1; i >= 0; i -= 1) {
            if (nums[i] + i >= goal) {
                goal = i;
            }
        }
        // after we check all the index, if the goal index
        // is equal to 0, means we are able start from the
        // first index to the index n
        if (goal == 0) {
            return true;
        }
        return false;
    }
}
