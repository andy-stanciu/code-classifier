class Solution {

    public boolean canJump(int[] nums) {
        // here the idea is to determine the goalpost. goalpost is the last value or index in this example [3,2,1,0,4] 4.
        // we start from the goal then we keep shifting goal left if the final goal is reachable
        // so index + val >= goal, so from index 3, 3+0 = 3 which is not greater than or equal to current goal 4. so we dont update the goal otherwise we update the goal
        // similarly we check to see if the goal can be reached if we add index + value. we check for all indices and make sure it can reach the goal
        // if goal could be shifted to 0 then we know we could reach the last index from 0, thats the idea
        // why we shift goal? because we know if i can reach say index 3 (in this case [2,3,1,1,4]) then index 3 can reach 4.
        // we set the goal as last index of array
        int goal = nums.length - 1;
        for (int index = nums.length - 1; index >= 0; index--) {
            if (index + nums[index] >= goal) {
                // if true this index can reach the goal index so we update goal-index
                goal = index;
            }
        }
        // true if goal can reach 0 or shifted to 0
        return (goal == 0);
    }
}
