class Solution {

    public Boolean[] memo;

    public boolean fun(int[] arr, int i) {
        if (i >= arr.length - 1) {
            // Reached or passed the last index
            return true;
        }
        // Check if we\'ve already solved this subproblem
        if (memo[i] != null) {
            return memo[i];
        }
        for (int j = arr[i]; j >= 1; j--) {
            if (fun(arr, i + j)) {
                // Store the result and return
                memo[i] = true;
                return true;
            }
        }
        // No valid jump found, store and return
        memo[i] = false;
        return false;
    }

    public boolean canJump(int[] nums) {
        // Initialize memoization array
        memo = new Boolean[nums.length];
        // Start recursion from index 0
        return fun(nums, 0);
    }
}
