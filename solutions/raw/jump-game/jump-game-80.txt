class Solution {

    int[] dp;

    int NOT_VISITED = -1;

    int NOT_REACHABLE = 0;

    int REACHABLE = 1;

    public boolean canJump(int[] nums) {
        dp = new int[nums.length];
        Arrays.fill(dp, NOT_VISITED);
        return helper(nums, 0);
    }

    private boolean helper(int[] nums, int index) {
        if (index >= nums.length - 1)
            return true;
        if (dp[index] != NOT_VISITED) {
            return dp[index] == REACHABLE;
        }
        int maxIndex = Math.min(nums.length - 1, index + nums[index]);
        for (int j = index + 1; j <= maxIndex; j++) {
            boolean ans = helper(nums, j);
            if (ans) {
                dp[index] = REACHABLE;
                return true;
            }
        }
        dp[index] = NOT_REACHABLE;
        return false;
    }
}
