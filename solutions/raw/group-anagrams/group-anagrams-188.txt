class Solution {

    public String sortString(String s) {
        char[] ch = s.toCharArray();
        Arrays.sort(ch);
        return new String(ch);
    }

    public List<List<String>> groupAnagrams(String[] strs) {
        // HashSet<String> set=new HashSet<>();
        // for(int i=0;i<strs.length;i++){
        //     String t=sortString(strs[i]);
        //     set.add(t);
        // }
        // List<List<String>> arr=new ArrayList<>();
        // for(String key:set){
        //     String target=key;
        //     List<String> a=new ArrayList<>();
        //     for(String word:strs){
        //         if(key.equals(sortString(word))){
        //             a.add(word);
        //         }
        //     }
        //     arr.add(a);
        // }
        // return arr;
        // This above method is correct but taking more time so lets reduce the time complexity
        Map<String, List<String>> map = new HashMap<>();
        // Grouping anagrams
        for (String str : strs) {
            String sortedStr = sortString(str);
            // Initialize the list if not present
            map.putIfAbsent(sortedStr, new ArrayList<>());
            // Add the original string to the list
            map.get(sortedStr).add(str);
        }
        // Return the list of grouped anagrams
        return new ArrayList<>(map.values());
    }
}
