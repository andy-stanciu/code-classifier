class Solution {

    public List<List<String>> groupAnagrams(String[] strs) {
        //approach : sort and compare
        //we will create a hashmap with string as key and arraylist i.e.list of anagrams as values corresponding to key
        //we will iterate through all strings in the str array
        //and we will sort each string or word and put that sorted string in the hashmap as key and add its orginal string in the arraylist as values
        //if the sorted string is already present in the hahmap as key then we will add original string further in the list ,if not already present then add the sorted string as key and its orginal string as value as new entry in the hashmap, we will do so for all elements of strs array
        //at last return all the values,i.e.lists of values of hashmap as list
        if (strs == null || strs.length == 0) {
            //return empty list
            return new ArrayList<>();
        }
        HashMap<String, ArrayList<String>> fmap = new HashMap<>();
        for (//str is strings i.e words in the string array strs
        //str is strings i.e words in the string array strs
        String str : strs) {
            //firstly sort the string
            //to sort it covert it into character array
            //and after sorting, make it string again
            char[] strArr = str.toCharArray();
            //toCharArray() method converts the string into character array
            //sort the array
            Arrays.sort(strArr);
            //sorted array again store as string in string sorStr
            String sorStr = String.valueOf(strArr);
            //String.valueOf() method returns the string representation.
            if (fmap.containsKey(sorStr)) {
                //fmap.get(sorStr) function gives the value corresponding to key sorStr and the value here is in the form of list , so adding word in the list value, whose key is already present in the fmap i.e.have anagram
                fmap.get(sorStr).add(str);
            } else {
                ArrayList<String> list = new ArrayList<>();
                //adding original word in the list
                list.add(str);
                fmap.put(sorStr, list);
            }
        }
        //returning a arraylist which has fmap values(lists) in it
        return new ArrayList<>(fmap.values());
        //fmap.values() : It returns a collection view of all the values present in the map.
    }
}
