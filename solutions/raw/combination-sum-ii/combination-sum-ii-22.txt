class Solution {

    List<List<Integer>> ans;

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        ans = new ArrayList<>();
        Arrays.sort(candidates);
        helper(0, 0, candidates, target, new ArrayList<>());
        return ans;
    }

    public void helper(int ind, int currentSum, int[] candidates, int target, List<Integer> list) {
        if (currentSum > target) {
            return;
        }
        if (currentSum == target) {
            ans.add(new ArrayList<>(list));
            return;
        }
        if (ind >= candidates.length) {
            return;
        }
        // Include the current element
        currentSum += candidates[ind];
        list.add(candidates[ind]);
        helper(ind + 1, currentSum, candidates, target, list);
        // Backtrack
        currentSum -= candidates[ind];
        list.remove(list.size() - 1);
        // Skip duplicates
        while (ind + 1 < candidates.length && candidates[ind] == candidates[ind + 1]) {
            ind++;
        }
        // Do not include the current element
        helper(ind + 1, currentSum, candidates, target, list);
    }
}
