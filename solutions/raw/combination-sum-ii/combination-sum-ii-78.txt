class Solution {

    private static void findCombinations(int idx, int[] arr, int target, List<List<Integer>> res, List<Integer> currentCombination) {
        //Base Case: if the target is zero , add the current combination
        if (target == 0) {
            res.add(new ArrayList<>(currentCombination));
            return;
        }
        for (int i = idx; i < arr.length; i++) {
            //skip duplicates
            if (i > idx && arr[i] == arr[i - 1])
                continue;
            //if the current element exceeds the target , break the loop
            if (arr[i] > target)
                break;
            //include the current element in the combination
            currentCombination.add(arr[i]);
            //Recur with updated target and next index
            findCombinations(i + 1, arr, target - arr[i], res, currentCombination);
            //BackTrack: remove the last added element
            currentCombination.remove(currentCombination.size() - 1);
        }
    }

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        //sort the array to handle duplicates
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<>();
        //start finding combination from index 0
        findCombinations(0, candidates, target, res, new ArrayList<>());
        return res;
    }
}
