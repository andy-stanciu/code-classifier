class Solution {

    List<List<Integer>> result;

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        result = new ArrayList<>();
        Arrays.sort(candidates);
        backtracking(candidates, target, 0, new ArrayList<>());
        return result;
    }

    void backtracking(int[] candidates, int target, int start, List<Integer> l) {
        if (target == 0) {
            result.add(new ArrayList<>(l));
        }
        for (int i = start; i < candidates.length; i++) {
            // just to remove similar elements (candidates is already sorted)
            if (i > start && candidates[i] == candidates[i - 1])
                continue;
            if (target - candidates[i] >= 0) {
                l.add(candidates[i]);
                backtracking(candidates, target - candidates[i], i + 1, l);
                l.remove(l.size() - 1);
            }
        }
    }
}
