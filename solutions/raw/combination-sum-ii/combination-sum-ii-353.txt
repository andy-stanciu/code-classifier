class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates);
        int last = 0;
        if (candidates == null || candidates.length == 0) {
            return res;
        }
        for (int i = 0; i < candidates.length; i++) {
            // given the condition that all the numbers in candidates are positive numbers
            if (candidates[i] > target || last == candidates[i]) {
                continue;
            }
            helper(res, new ArrayList<Integer>(), i, 0, candidates, target);
            last = candidates[i];
        }
        return res;
    }

    public void helper(List<List<Integer>> res, List<Integer> curList, int i, int sum, int[] candidates, int target) {
        sum += candidates[i];
        if (sum > target) {
            return;
        }
        curList.add(candidates[i]);
        if (sum == target) {
            res.add(new ArrayList<>(curList));
            curList.remove(curList.size() - 1);
            return;
        }
        int cur = 0;
        for (int j = i + 1; j < candidates.length; j++) {
            if (cur != candidates[j]) {
                helper(res, curList, j, sum, candidates, target);
            }
            cur = candidates[j];
        }
        curList.remove(curList.size() - 1);
    }
}
