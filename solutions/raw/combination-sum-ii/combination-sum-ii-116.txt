class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<Integer> res = new ArrayList<>();
        List<List<Integer>> ans2 = new ArrayList<>();
        helper(0, target, candidates, res, ans2);
        return ans2;
    }

    public static void helper(int ind, int target, int[] c, List<Integer> res, List<List<Integer>> ans) {
        if (target == 0) {
            ans.add(new ArrayList<>(res));
            return;
        }
        for (int i = ind; i < c.length; i++) {
            if (i > ind && c[i] == c[i - 1]) {
                continue;
            }
            if (c[i] > target) {
                break;
            }
            res.add(c[i]);
            helper(i + 1, target - c[i], c, res, ans);
            res.remove(res.size() - 1);
        }
    }
}
