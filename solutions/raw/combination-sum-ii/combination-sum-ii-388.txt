class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> combinations = new ArrayList<>();
        helper(candidates, target, 0, new ArrayList<>(), combinations);
        return combinations;
    }

    private void helper(int[] candidates, int target, int idx, List<Integer> list, List<List<Integer>> combinations) {
        if (target == 0) {
            combinations.add(new ArrayList<>(list));
            return;
        }
        if (target < 0 || idx >= candidates.length) {
            return;
        }
        int prev = -1;
        for (int i = idx; i < candidates.length; i++) {
            if (candidates[i] == prev) {
                continue;
            }
            if (candidates[i] > target) {
                break;
            }
            target -= candidates[i];
            list.add(candidates[i]);
            helper(candidates, target, i + 1, list, combinations);
            target += candidates[i];
            list.remove(list.size() - 1);
            prev = candidates[i];
        }
    }
}
