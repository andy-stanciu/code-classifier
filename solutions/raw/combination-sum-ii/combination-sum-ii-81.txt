class Solution {

    public void solve(int[] candidates, List<List<Integer>> ans, int target, int start, int sum, ArrayList<Integer> arr) {
        if (target == sum) {
            ans.add(new ArrayList<>(arr));
            return;
        }
        int n = candidates.length;
        if (start == n || target < sum) {
            return;
        }
        for (int i = start; i < n; i++) {
            if (i != start && candidates[i] == candidates[i - 1])
                continue;
            arr.add(candidates[i]);
            solve(candidates, ans, target, i + 1, sum + candidates[i], arr);
            arr.remove(arr.size() - 1);
        }
    }

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        Arrays.sort(candidates);
        solve(candidates, list, target, 0, 0, new ArrayList<>());
        return list;
    }
}
