class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> r1 = new ArrayList<>();
        Arrays.sort(candidates);
        sss(candidates, result, r1, target, 0, 0);
        return result;
    }

    void sss(int[] nums, List<List<Integer>> result, List<Integer> r1, int target, int currsum, int i) {
        if (currsum > target) {
            return;
        }
        if (i == nums.length) {
            if (currsum == target) {
                result.add(new ArrayList<>(r1));
            }
            return;
        }
        r1.add(nums[i]);
        currsum += nums[i];
        sss(nums, result, r1, target, currsum, i + 1);
        r1.remove(r1.size() - 1);
        currsum -= nums[i];
        while (i < nums.length - 1 && nums[i] == nums[i + 1]) {
            i++;
        }
        sss(nums, result, r1, target, currsum, i + 1);
    }
}
