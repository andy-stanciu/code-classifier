class Solution {

    List<List<Integer>> list = new ArrayList<>();

    public void helper(int[] C, List<Integer> arr, int target, int i) {
        if (target == 0) {
            list.add(new ArrayList<Integer>(arr));
            return;
        }
        for (int j = i, N = arr.size(); j < C.length; j++) {
            if (C[j] > target)
                return;
            arr.add(C[j]);
            helper(C, arr, target - C[j], j + 1);
            arr.remove(N);
            while (j < C.length - 1 && C[j] == C[j + 1]) j++;
        }
    }

    public List<List<Integer>> combinationSum2(int[] C, int target) {
        Arrays.sort(C);
        List<Integer> arr = new ArrayList<>();
        helper(C, arr, target, 0);
        return list;
    }
}
