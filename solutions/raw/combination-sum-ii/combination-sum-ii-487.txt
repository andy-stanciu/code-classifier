class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        // Sort the candidates to handle duplicates
        Arrays.sort(candidates);
        List<Integer> currentCombination = new ArrayList<>();
        findCombinations(candidates, target, 0, currentCombination, result);
        return result;
    }

    public static void findCombinations(int[] candidates, int target, int startIndex, List<Integer> currentCombination, List<List<Integer>> result) {
        if (target == 0) {
            result.add(new ArrayList<>(currentCombination));
            return;
        }
        for (int i = startIndex; i < candidates.length; i++) {
            if (i > startIndex && candidates[i] == candidates[i - 1]) {
                // Skip duplicates
                continue;
            }
            if (candidates[i] > target) {
                // Candidates are sorted, so no need to explore further
                break;
            }
            currentCombination.add(candidates[i]);
            findCombinations(candidates, target - candidates[i], i + 1, currentCombination, result);
            currentCombination.remove(currentCombination.size() - 1);
        }
    }
}
