class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> ds = new ArrayList<>();
        Arrays.sort(candidates);
        combinationSum2Helper(candidates, target, 0, ds, ans);
        return ans;
    }

    public void combinationSum2Helper(int[] nums, int target, int ind, List<Integer> ds, List<List<Integer>> ans) {
        if (target == 0) {
            ans.add(new ArrayList<>(ds));
            return;
        }
        for (int i = ind; i < nums.length; i++) {
            // to save unnecessary computation and time
            if (nums[i] > target)
                break;
            // to avoid computation of duplicate combinations
            if (i != ind && nums[i] == nums[i - 1])
                continue;
            ds.add(nums[i]);
            combinationSum2Helper(nums, target - nums[i], i + 1, ds, ans);
            ds.remove(ds.size() - 1);
        }
    }
}
