class Solution {

    List<List<Integer>> res = new ArrayList<>();

    // add sum for this logic
    int sum = 0;

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<Integer> curr = new ArrayList<>();
        backtrack(0, target, candidates, curr);
        return res;
    }

    public void backtrack(int start, int target, int[] candidates, List<Integer> curr) {
        // base case\uFF0Cmatch the target sum, add the combination
        if (sum == target) {
            res.add(new ArrayList<>(curr));
            return;
        }
        // base case\uFF0Cexceed the target sum, close
        if (sum > target) {
            return;
        }
        for (int i = start; i < candidates.length; i++) {
            //\u526A\u679D
            if (i > start && candidates[i] == candidates[i - 1]) {
                continue;
            }
            curr.add(candidates[i]);
            sum += candidates[i];
            backtrack(i + 1, target, candidates, curr);
            //backtrack
            //curr.remove(candidates[i]) would remove the first occurrence of this value
            curr.remove(curr.size() - 1);
            sum -= candidates[i];
        }
    }
}
