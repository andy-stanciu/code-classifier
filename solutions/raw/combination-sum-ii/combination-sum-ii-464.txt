class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> ll = new ArrayList<>();
        // Sort the candidates to handle duplicates properly
        Arrays.sort(candidates);
        solver(0, candidates, target, ans, ll);
        return ans;
    }

    public void solver(int idx, int[] nums, int target, List<List<Integer>> ans, List<Integer> ll) {
        if (target == 0) {
            // Create a new list to store the combination
            ans.add(new ArrayList<>(ll));
            return;
        }
        for (int i = idx; i < nums.length; i++) {
            if (i > idx && nums[i] == nums[i - 1])
                continue;
            if (nums[i] > target)
                break;
            ll.add(nums[i]);
            solver(i + 1, nums, target - nums[i], ans, ll);
            ll.remove(ll.size() - 1);
        }
    }
}
