class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> curList = new ArrayList<>();
        helper(res, candidates, target, 0, curList);
        return res;
    }

    void helper(List<List<Integer>> res, int[] candidates, int target, int index, List<Integer> curList) {
        if (target == 0) {
            res.add(new ArrayList<>(curList));
            return;
        }
        for (int i = index; i < candidates.length; i++) {
            if (i > index && candidates[i] == candidates[i - 1])
                continue;
            if (target - candidates[i] < 0)
                continue;
            curList.add(candidates[i]);
            helper(res, candidates, target - candidates[i], i + 1, curList);
            curList.remove(curList.size() - 1);
        }
    }
}
