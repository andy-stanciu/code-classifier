class Solution {

    List<List<Integer>> res = new ArrayList<>();

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        backTrack(candidates, 0, 0, target, new ArrayList<>());
        return res;
    }

    private void backTrack(int[] candidates, int index, int currSum, int target, ArrayList<Integer> temp) {
        if (currSum == target) {
            res.add(new ArrayList<>(temp));
            return;
        }
        if (currSum > target || index == candidates.length)
            return;
        temp.add(candidates[index]);
        backTrack(candidates, index + 1, currSum + candidates[index], target, temp);
        temp.remove(temp.size() - 1);
        while (index + 1 < candidates.length && candidates[index] == candidates[index + 1]) {
            index++;
        }
        backTrack(candidates, index + 1, currSum, target, temp);
    }
}
