class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> ans = new ArrayList();
        getCombinations(ans, new ArrayList(), 0, candidates, target);
        return ans;
    }

    public void getCombinations(List<List<Integer>> ans, List<Integer> currentList, int currentIndex, int[] candidates, int target) {
        if (currentIndex == candidates.length) {
            if (target == 0)
                ans.add(new ArrayList(currentList));
            return;
        }
        if (candidates[currentIndex] <= target) {
            currentList.add(candidates[currentIndex]);
            getCombinations(ans, currentList, currentIndex + 1, candidates, target - candidates[currentIndex]);
            currentList.remove(currentList.size() - 1);
        }
        while (currentIndex + 1 < candidates.length && candidates[currentIndex] == candidates[currentIndex + 1]) currentIndex++;
        getCombinations(ans, currentList, currentIndex + 1, candidates, target);
    }
}
