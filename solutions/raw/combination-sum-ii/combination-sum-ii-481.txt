class Solution {

    public void helper(int[] a, int idx, int t, List<List<Integer>> ulist, ArrayList<Integer> list) {
        if (t == 0) {
            ulist.add(new ArrayList<>(list));
            return;
        }
        for (int i = idx; i < a.length; i++) {
            if (i > idx && a[i] == a[i - 1])
                continue;
            if (a[i] > t) {
                break;
            }
            list.add(a[i]);
            helper(a, i + 1, t - a[i], ulist, list);
            list.remove(list.size() - 1);
        }
    }

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates);
        helper(candidates, 0, target, res, new ArrayList<>());
        return res;
    }
}
