class Solution {

    public static void helper(int index, int[] arr, List<Integer> ds, List<List<Integer>> ans, int target, int n) {
        if (target == 0) {
            ans.add(new ArrayList<>(ds));
            return;
        }
        for (int i = index; i < n; i++) {
            if (i > index && arr[i] == arr[i - 1])
                continue;
            if (arr[i] > target)
                break;
            ds.add(arr[i]);
            helper(i + 1, arr, ds, ans, target - arr[i], n);
            ds.remove(ds.size() - 1);
        }
    }

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> ds = new ArrayList<>();
        helper(0, candidates, ds, ans, target, candidates.length);
        return ans;
    }
}
