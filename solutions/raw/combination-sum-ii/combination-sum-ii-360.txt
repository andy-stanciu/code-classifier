class Solution {

    List<List<Integer>> ans;

    List<Integer> temp;

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        ans = new ArrayList<>();
        temp = new ArrayList<>();
        genCombination(candidates, target, 0);
        return ans;
    }

    public void genCombination(int[] A, int remainder, int s) {
        if (remainder == 0) {
            ans.add(new ArrayList<>(temp));
            return;
        }
        for (int i = s; i < A.length; i++) {
            int a = A[i];
            if (a <= remainder) {
                //If current element is same as previous one then no point in entering the recursion because it will give same result as previous one
                //Hence we are simply skipping part where we enter recursion
                if (i > s && A[i] == A[i - 1])
                    continue;
                temp.add(a);
                genCombination(A, remainder - a, i + 1);
                temp.remove(temp.size() - 1);
            } else {
                break;
            }
        }
    }
}
