class Solution {

    static void subsets(int[] candidates, int target, int i, List<Integer> list, List<List<Integer>> ans) {
        if (target == 0) {
            ans.add(new ArrayList<>(list));
            return;
        }
        if (target < 0) {
            return;
        }
        for (int k = i; k < candidates.length; k++) {
            if (k > i && candidates[k] == candidates[k - 1])
                continue;
            list.add(candidates[k]);
            subsets(candidates, target - candidates[k], k + 1, list, ans);
            list.remove(list.size() - 1);
        }
    }

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        Arrays.sort(candidates);
        subsets(candidates, target, 0, list, ans);
        return ans;
    }
}
