class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> results = new ArrayList<>();
        // Sort the candidates to handle duplicates
        Arrays.sort(candidates);
        backtrack(candidates, target, 0, new ArrayList<>(), results);
        return results;
    }

    private void backtrack(int[] candidates, int target, int start, List<Integer> current, List<List<Integer>> results) {
        if (target == 0) {
            // If the target is 0, add the current combination to results
            results.add(new ArrayList<>(current));
            return;
        }
        if (target < 0) {
            // If target is negative, no need to continue
            return;
        }
        for (int i = start; i < candidates.length; i++) {
            // Skip duplicates
            if (i > start && candidates[i] == candidates[i - 1]) {
                continue;
            }
            // Add the number to the current combination
            current.add(candidates[i]);
            // Recur with updated target and next start index
            backtrack(candidates, target - candidates[i], i + 1, current, results);
            // Backtrack by removing the last added number
            current.remove(current.size() - 1);
        }
    }
}
