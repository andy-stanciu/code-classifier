class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        // Sort the candidates to handle duplicates
        Arrays.sort(candidates);
        backtrack(result, new ArrayList<>(), candidates, target, 0);
        return result;
    }

    private void backtrack(List<List<Integer>> result, List<Integer> tempList, int[] candidates, int remain, int start) {
        if (// If remaining sum is negative, terminate
        remain < 0)
            // If remaining sum is negative, terminate
            return;
        else if (// If remaining sum is 0, add the combination to the result
        remain == 0)
            // If remaining sum is 0, add the combination to the result
            result.add(new ArrayList<>(tempList));
        else {
            for (int i = start; i < candidates.length; i++) {
                // Skip duplicates
                if (i > start && candidates[i] == candidates[i - 1])
                    continue;
                tempList.add(candidates[i]);
                // Call backtrack recursively
                backtrack(result, tempList, candidates, remain - candidates[i], i + 1);
                // Backtrack
                tempList.remove(tempList.size() - 1);
            }
        }
    }
}
