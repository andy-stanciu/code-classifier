class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> list = new ArrayList();
        Arrays.sort(candidates);
        combinations(0, candidates.length, candidates, target, new ArrayList(), list);
        return list;
    }

    public void combinations(int idx, int n, int[] arr, int target, List<Integer> ds, List<List<Integer>> ans) {
        if (target == 0) {
            ans.add(new ArrayList(ds));
            return;
        }
        for (int i = idx; i < arr.length; i++) {
            if (i > idx && arr[i] == arr[i - 1])
                continue;
            if (arr[i] > target)
                break;
            ds.add(arr[i]);
            combinations(i + 1, n, arr, target - arr[i], ds, ans);
            ds.remove(ds.size() - 1);
        }
        // ds.add(arr[idx]);
        // combinations(idx+1 , n , arr , target  - arr[idx] , ds , ans);
        // ds.remove(ds.size()-1);
        // while(idx+1<n && arr[idx] == arr[idx+1]) idx++;
        // combinations(idx+1 , n , arr , target  , ds , ans);
    }
}
