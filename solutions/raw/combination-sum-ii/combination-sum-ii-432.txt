class Solution {

    public void helper(int[] candidates, int target, List<List<Integer>> res, List<Integer> temp, int sum, int index) {
        for (int i = index; i < candidates.length; i++) {
            if (i > index && candidates[i] == candidates[i - 1])
                continue;
            temp.add(candidates[i]);
            sum += candidates[i];
            if (sum == target)
                res.add(new ArrayList<>(temp));
            if (sum < target)
                helper(candidates, target, res, temp, sum, i + 1);
            temp.remove(Integer.valueOf(candidates[i]));
            sum -= candidates[i];
            if (sum >= target)
                break;
        }
    }

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<>();
        helper(candidates, target, res, new ArrayList<>(), 0, 0);
        return res;
    }
}
