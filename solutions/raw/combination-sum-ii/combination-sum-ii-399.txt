class Solution {

    public void totalCombination(int idx, List<List<Integer>> list, List<Integer> subList, int[] candidates, int target) {
        if (target == 0) {
            list.add(new ArrayList<>(subList));
        }
        if (target < 0) {
            return;
        }
        for (int i = idx; i < candidates.length; i++) {
            if (i != idx && candidates[i] == candidates[i - 1]) {
                continue;
            }
            subList.add(candidates[i]);
            totalCombination(i + 1, list, subList, candidates, target - candidates[i]);
            subList.remove(subList.size() - 1);
        }
    }

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> list = new ArrayList<>();
        List<Integer> subList = new ArrayList<>();
        Arrays.sort(candidates);
        totalCombination(0, list, subList, candidates, target);
        return list;
    }
}
