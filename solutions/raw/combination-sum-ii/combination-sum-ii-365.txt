class Solution {

    public List<List<Integer>> combinationSum2(int[] cans, int target) {
        Arrays.sort(cans);
        List<List<Integer>> ans = new ArrayList<>();
        dfs(target, cans, 0, new ArrayList<>(), ans);
        return ans;
    }

    private void dfs(int target, int[] cans, int idx, List<Integer> cur, List<List<Integer>> ans) {
        if (target == 0) {
            ans.add(new ArrayList<>(cur));
            return;
        }
        int last = -1;
        for (int i = idx; i < cans.length; i++) {
            if (last == cans[i])
                continue;
            if (cans[i] <= target) {
                cur.add(cans[i]);
                dfs(target - cans[i], cans, i + 1, cur, ans);
                last = cur.remove(cur.size() - 1);
            }
        }
    }
}
