class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> sublist = new ArrayList<>();
        //HashSet<Integer> set=new HashSet<>();
        Arrays.sort(candidates);
        combination(ans, sublist, candidates, target, 0);
        return ans;
    }

    public static void combination(List<List<Integer>> ans, List<Integer> sublist, int[] candidates, int target, int index) {
        // if(index==candidates.length){
        if (target == 0) {
            ans.add(new ArrayList<>(sublist));
            return;
        }
        // /}
        for (int i = index; i < candidates.length; i++) {
            if (i > index && candidates[i] == candidates[i - 1]) {
                continue;
            }
            if (candidates[i] > target)
                break;
            sublist.add(candidates[i]);
            combination(ans, sublist, candidates, target - candidates[i], i + 1);
            sublist.remove(sublist.size() - 1);
            // combination(ans,sublist,candidates,target,i+1);
        }
    }
}
