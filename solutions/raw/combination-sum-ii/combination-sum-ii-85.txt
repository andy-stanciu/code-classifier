class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        int n = candidates.length;
        Arrays.sort(candidates);
        List<Integer> temp = new ArrayList<>();
        recursion(0, candidates, target, ans, temp, n);
        return ans;
    }

    void recursion(int start, int[] candidates, int target, List<List<Integer>> ans, List<Integer> temp, int n) {
        if (target < 0)
            return;
        if (target == 0) {
            if (!ans.contains(temp))
                ans.add(new ArrayList<>(temp));
            return;
        }
        for (int i = start; i < n; i++) {
            if (i > start && candidates[i] == candidates[i - 1])
                continue;
            temp.add(candidates[i]);
            recursion(i + 1, candidates, target - candidates[i], ans, temp, n);
            temp.remove(temp.size() - 1);
        }
    }
}
