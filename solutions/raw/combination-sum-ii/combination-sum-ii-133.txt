class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        // n logn
        Arrays.sort(candidates);
        allCombinations(0, 0, new ArrayList<>(), candidates, target, result);
        return result;
    }

    private void allCombinations(int index, int sum, List<Integer> list, int[] candidates, int target, List<List<Integer>> result) {
        // base case
        if (sum == target) {
            result.add(new ArrayList<>(list));
            return;
        }
        if (sum > target) {
            return;
        }
        for (int i = index; i < candidates.length; i++) {
            // n
            if (i > index && candidates[i] == candidates[i - 1])
                continue;
            int num = candidates[i];
            list.add(num);
            allCombinations(i + 1, sum + num, list, candidates, target, result);
            list.remove(list.size() - 1);
        }
    }
}
