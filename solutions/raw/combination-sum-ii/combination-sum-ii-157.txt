class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        Set<List<Integer>> combinations = new HashSet<>();
        backtrack(combinations, new ArrayList<>(), candidates, 0, target, 0);
        return new ArrayList<>(combinations);
    }

    public void backtrack(Set<List<Integer>> combinations, List<Integer> combination, int[] candidates, int start, int target, int sum) {
        if (sum == target) {
            combinations.add(new ArrayList<>(combination));
            return;
        }
        int prev = -1;
        for (int i = start; i < candidates.length; i++) {
            if (sum + candidates[i] > target) {
                break;
            }
            if (prev == candidates[i]) {
                continue;
            }
            combination.add(candidates[i]);
            backtrack(combinations, combination, candidates, i + 1, target, sum + candidates[i]);
            combination.remove(combination.size() - 1);
            prev = candidates[i];
        }
    }
}
