class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        dfs(0, candidates, target, res, temp);
        return res;
    }

    public void dfs(int index, int[] candidates, int target, List<List<Integer>> res, List<Integer> temp) {
        if (target <= 0) {
            if (target == 0)
                res.add(new ArrayList<>(temp));
            return;
        }
        for (int i = index; i < candidates.length; i++) {
            if (i > index && candidates[i - 1] == candidates[i]) {
                continue;
            }
            temp.add(candidates[i]);
            dfs(i + 1, candidates, target - candidates[i], res, temp);
            temp.remove(temp.size() - 1);
        }
    }
}
