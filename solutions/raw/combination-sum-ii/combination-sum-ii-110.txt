class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        ArrayList<List<Integer>> res = new ArrayList<>();
        ArrayList<Integer> cur = new ArrayList<>();
        recur(candidates, target, 0, cur, res);
        return res;
    }

    public void recur(int[] candidates, int target, int index, List<Integer> cur, ArrayList<List<Integer>> res) {
        // base case
        if (target == 0) {
            res.add(new ArrayList<>(cur));
        }
        // pick
        for (int i = index; i < candidates.length; i++) {
            if (i > index && candidates[i] == candidates[i - 1])
                continue;
            if (candidates[i] > target)
                break;
            cur.add(candidates[i]);
            recur(candidates, target - candidates[i], i + 1, cur, res);
            cur.remove(cur.size() - 1);
        }
    }
}
