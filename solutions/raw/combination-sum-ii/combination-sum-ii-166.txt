class Solution {

    List<List<Integer>> lt = new ArrayList<>();

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        // Sort the array to handle duplicates
        Arrays.sort(candidates);
        helper(candidates, 0, target, new ArrayList<>());
        return lt;
    }

    public void helper(int[] arr, int start, int target, ArrayList<Integer> at) {
        if (target == 0) {
            // Add a copy of the current combination
            lt.add(new ArrayList<>(at));
            return;
        }
        if (target < 0) {
            return;
        }
        for (int i = start; i < arr.length; i++) {
            // Skip duplicates
            if (i > start && arr[i] == arr[i - 1]) {
                continue;
            }
            at.add(arr[i]);
            helper(arr, i + 1, target - arr[i], at);
            // Backtrack by removing the last element added
            at.remove(at.size() - 1);
        }
    }
}
