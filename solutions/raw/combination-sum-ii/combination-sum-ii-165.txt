class Solution {

    private int target;

    private List<List<Integer>> ans;

    private List<Integer> temp;

    private void findTarget(int i, int[] candidates, int sum) {
        if (sum == target) {
            ans.add(new ArrayList<>(temp));
            return;
        }
        if (i >= candidates.length) {
            return;
        }
        if (sum > target)
            return;
        //take;
        temp.add(candidates[i]);
        findTarget(i + 1, candidates, sum + candidates[i]);
        temp.remove(temp.size() - 1);
        while (i < candidates.length - 1 && candidates[i] == candidates[i + 1]) i++;
        //not take
        findTarget(i + 1, candidates, sum);
    }

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        this.target = target;
        ans = new ArrayList<>();
        temp = new ArrayList<>();
        findTarget(0, candidates, 0);
        return ans;
    }
}
