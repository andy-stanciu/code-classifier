class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(candidates);
        dfs(candidates, target, 0, new ArrayList<>(), result);
        return result;
    }

    public void dfs(int[] nums, int target, int index, List<Integer> current, List<List<Integer>> result) {
        if (target == 0) {
            result.add(new ArrayList<>(current));
            return;
        }
        if (index == nums.length || target < nums[index]) {
            return;
        }
        current.add(nums[index]);
        dfs(nums, target - nums[index], index + 1, current, result);
        current.remove(current.size() - 1);
        while (index + 1 < nums.length && nums[index + 1] == nums[index]) {
            index += 1;
        }
        dfs(nums, target, index + 1, current, result);
        return;
    }
}
