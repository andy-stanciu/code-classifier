class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList<>();
        helper(candidates, 0, target, new ArrayList<Integer>(), result);
        return result;
    }

    private void helper(int[] candidates, int pos, int target, List<Integer> current, List<List<Integer>> result) {
        if (target == 0) {
            result.add(new ArrayList<>(current));
        }
        for (int i = pos; i < candidates.length && target - candidates[i] >= 0; i++) {
            if (i > pos && candidates[i - 1] == candidates[i]) {
                continue;
            }
            current.add(candidates[i]);
            helper(candidates, i + 1, target - candidates[i], current, result);
            current.remove(current.size() - 1);
        }
    }
}
