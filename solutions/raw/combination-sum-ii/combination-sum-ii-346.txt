class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> resultList = new ArrayList<>();
        recursion(0, candidates, target, new ArrayList<>(), resultList);
        return resultList;
    }

    void recursion(int i, int[] candidates, int target, List<Integer> list, List<List<Integer>> resultList) {
        if (target == 0) {
            resultList.add(new ArrayList<>(list));
            return;
        }
        for (int k = i; k < candidates.length; k++) {
            if (k > i && candidates[k] == candidates[k - 1])
                continue;
            if (candidates[k] > target)
                break;
            list.add(candidates[k]);
            recursion(k + 1, candidates, target - candidates[k], list, resultList);
            list.remove(list.size() - 1);
        }
    }
}
