class Solution {

    public static List<List<Integer>> combinationSum2(int[] arr, int t) {
        List<List<Integer>> ansList = new ArrayList<>();
        Arrays.sort(arr);
        getCombinationSum(ansList, new ArrayList<>(), arr, 0, t, 0);
        return ansList;
    }

    private static void getCombinationSum(List<List<Integer>> ansList, ArrayList<Integer> currCombination, int[] arr, int currSum, int target, int index) {
        if (currSum == target) {
            ansList.add(new ArrayList<>(currCombination));
            return;
        }
        int prev = -1;
        // for loop for each index
        for (int i = index; i < arr.length; i++) {
            if (arr[i] == prev) {
                continue;
            }
            if (arr[i] + currSum > target) {
                break;
            }
            currCombination.add(arr[i]);
            getCombinationSum(ansList, currCombination, arr, currSum + arr[i], target, i + 1);
            currCombination.removeLast();
            prev = arr[i];
        }
    }
}
