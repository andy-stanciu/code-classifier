class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<Integer> l = new ArrayList<>();
        return getCombinatonSu(candidates, target, 0, l);
    }

    public List<List<Integer>> getCombinatonSu(int[] candidates, int target, int index, List<Integer> l) {
        List<List<Integer>> result = new ArrayList<>();
        if (target == 0) {
            result.add(l);
            return result;
        }
        if (target < 0 || index == candidates.length) {
            return result;
        }
        List<Integer> l2 = new ArrayList(l);
        l2.add(candidates[index]);
        result.addAll(getCombinatonSu(candidates, target - candidates[index], index + 1, l2));
        int currV = candidates[index];
        while (index < candidates.length && candidates[index] == currV) {
            index++;
        }
        result.addAll(getCombinatonSu(candidates, target, index, l));
        return result;
    }
}
