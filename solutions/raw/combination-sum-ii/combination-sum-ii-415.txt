class Solution {

    List<List<Integer>> res = new ArrayList<>();

    private void helper(int[] nums, int i, int sum, List<Integer> list) {
        if (sum == 0) {
            res.add(new ArrayList<>(list));
            return;
        }
        if (sum < 0 || i == nums.length) {
            return;
        }
        list.add(nums[i]);
        helper(nums, i + 1, sum - nums[i], list);
        list.remove(list.size() - 1);
        while (i + 1 < nums.length && nums[i] == nums[i + 1]) {
            i++;
        }
        helper(nums, i + 1, sum, list);
    }

    public List<List<Integer>> combinationSum2(int[] nums, int target) {
        Arrays.sort(nums);
        helper(nums, 0, target, new ArrayList<>());
        return res;
    }
}
