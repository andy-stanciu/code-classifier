class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> fl = new ArrayList<>();
        Arrays.sort(candidates);
        combinationSumHelper(candidates, 0, new ArrayList<Integer>(), target, fl);
        return new ArrayList<>(fl);
    }

    private void combinationSumHelper(int[] c, int i, List<Integer> ls, int target, List<List<Integer>> fl) {
        if (target == 0) {
            List l = new ArrayList<>(ls);
            fl.add(l);
            return;
        }
        if (i >= c.length) {
            return;
        }
        for (int j = i; j < c.length; j++) {
            if (j > i && c[j] == c[j - 1]) {
                continue;
            }
            if (target - c[j] >= 0) {
                ls.add(c[j]);
                combinationSumHelper(c, j + 1, ls, target - c[j], fl);
                ls.remove(ls.size() - 1);
            }
        }
    }
}
