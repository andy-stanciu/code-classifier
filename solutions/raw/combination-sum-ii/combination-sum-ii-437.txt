class Solution {

    List<List<Integer>> result;

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        int n = candidates.length;
        if (n > 0) {
            result = new ArrayList<>();
            // Sorting to handle duplicates
            Arrays.sort(candidates);
            List<Integer> l = new ArrayList<>();
            getSum(candidates, target, l, 0);
        }
        return result;
    }

    public void getSum(int[] candidates, int target, List<Integer> list, int index) {
        if (target == 0) {
            result.add(new ArrayList<>(list));
        }
        for (int i = index; i < candidates.length; i++) {
            if (i > index && candidates[i] == candidates[i - 1])
                continue;
            if (target - candidates[i] < 0)
                continue;
            list.add(candidates[i]);
            getSum(candidates, target - candidates[i], list, i + 1);
            list.remove(list.size() - 1);
        }
    }
}
