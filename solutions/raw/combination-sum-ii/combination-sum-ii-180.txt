class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<>();
        helper(res, new ArrayList<>(), candidates, target, 0);
        return res;
    }

    private void helper(List<List<Integer>> res, List<Integer> temp, int[] arr, int remain, int start) {
        if (remain < 0)
            return;
        if (remain == 0) {
            res.add(new ArrayList<>(temp));
            return;
        }
        for (int i = start; i < arr.length; i++) {
            if (i > start && arr[i] == arr[i - 1])
                continue;
            temp.add(arr[i]);
            helper(res, temp, arr, remain - arr[i], i + 1);
            temp.remove(temp.size() - 1);
        }
    }
}
