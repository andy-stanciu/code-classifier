class Solution {

    public List<List<Integer>> combinationSum2(int[] arr, int k) {
        Arrays.sort(arr);
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        solve(0, path, k, arr, ans);
        return ans;
    }

    private static void solve(int i, List<Integer> path, int target, int[] arr, List<List<Integer>> ans) {
        if (target == 0) {
            ans.add(new ArrayList<>(path));
            return;
        }
        for (int j = i; j < arr.length; j += 1) {
            if (arr[j] > target) {
                break;
            }
            if (j > i && arr[j] == arr[j - 1]) {
                continue;
            }
            path.add(arr[j]);
            solve(j + 1, path, target - arr[j], arr, ans);
            path.remove(path.size() - 1);
        }
    }
}
