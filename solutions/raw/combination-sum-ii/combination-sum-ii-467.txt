class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> answer = new ArrayList<>();
        ArrayList<Integer> ans = new ArrayList<>();
        Arrays.sort(candidates);
        getCombinations(0, candidates, target, ans, answer);
        return answer;
    }

    private static void getCombinations(int index, int[] candidates, int target, ArrayList<Integer> ans, List<List<Integer>> answer) {
        if (target == 0) {
            answer.add(new ArrayList<>(ans));
            return;
        }
        if (index == candidates.length) {
            return;
        }
        for (int i = index; i < candidates.length; i++) {
            if (i > index && candidates[i] == candidates[i - 1])
                continue;
            if (candidates[i] <= target) {
                ans.add((Integer) candidates[i]);
                getCombinations(i + 1, candidates, target - candidates[i], ans, answer);
                ans.remove((Integer) candidates[i]);
            } else {
                break;
            }
        }
    }
}
