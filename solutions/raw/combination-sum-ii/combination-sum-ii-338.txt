public class Solution {

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        // Sort the candidates to handle duplicates and for easier backtracking
        Arrays.sort(candidates);
        helper(0, target, candidates, result, new ArrayList<>());
        return result;
    }

    private void helper(int start, int target, int[] candidates, List<List<Integer>> result, List<Integer> currentList) {
        // Base case: If target becomes zero, add currentList to result
        if (target == 0) {
            result.add(new ArrayList<>(currentList));
            return;
        }
        // Recursive case: Explore combinations using candidates starting from \'start\' index
        for (int i = start; i < candidates.length; i++) {
            // Skip duplicates to avoid duplicate combinations
            if (i > start && candidates[i] == candidates[i - 1]) {
                continue;
            }
            // Check if the current candidate can be included in the current combination
            if (candidates[i] <= target) {
                // Include the current candidate in the combination
                currentList.add(candidates[i]);
                // Recursively call helper with updated start index and target
                helper(i + 1, target - candidates[i], candidates, result, currentList);
                // Backtrack: Remove the last added candidate to explore other possibilities
                currentList.remove(currentList.size() - 1);
            }
        }
    }
}
