class Solution {

    public void rec(int ind, int target, int[] candidates, List<List<Integer>> res, List<Integer> ans) {
        if (target == 0) {
            res.add(new ArrayList<>(ans));
            return;
        }
        for (int i = ind; i < candidates.length; i++) {
            if (i > ind && candidates[i] == candidates[i - 1]) {
                continue;
            }
            if (candidates[i] > target) {
                break;
            }
            ans.add(candidates[i]);
            rec(i + 1, target - candidates[i], candidates, res, ans);
            ans.remove(ans.size() - 1);
        }
    }

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        int sum = 0;
        Arrays.sort(candidates);
        rec(0, target, candidates, res, new ArrayList<>());
        return res;
    }
}
