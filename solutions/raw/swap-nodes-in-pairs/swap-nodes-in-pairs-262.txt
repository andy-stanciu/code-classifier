/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode swapPairs(ListNode head) {
        // Create a dummy node to handle the edge case where the list has less than 2 nodes
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        // \'prev\' points to the node before the current pair, and \'current\' points to the first node of the current pair
        ListNode prev = dummy;
        ListNode current = head;
        // Iterate through the list in pairs
        while (current != null && current.next != null) {
            // Nodes to be swapped
            ListNode first = current;
            ListNode second = current.next;
            // Swap the nodes
            prev.next = second;
            first.next = second.next;
            second.next = first;
            // Move the pointers forward
            prev = first;
            current = first.next;
        }
        // Return the new head of the list (dummy.next)
        return dummy.next;
    }

    // Helper function to print the linked list
    public void printList(ListNode head) {
        ListNode temp = head;
        while (temp != null) {
            System.out.print(temp.val + " ");
            temp = temp.next;
        }
        System.out.println();
    }
}
