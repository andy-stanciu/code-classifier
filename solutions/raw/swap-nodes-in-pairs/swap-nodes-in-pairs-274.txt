class Solution {

    public ListNode swapPairs(ListNode head) {
        // Create a dummy node to simplify the edge cases
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prev = dummy;
        // Traverse the list in pairs
        while (prev.next != null && prev.next.next != null) {
            // Nodes to be swapped
            ListNode first = prev.next;
            ListNode second = prev.next.next;
            // Perform the swap
            first.next = second.next;
            second.next = first;
            prev.next = second;
            // Move the pointer two nodes ahead
            prev = first;
        }
        // Return the new head of the list
        return dummy.next;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        // Create a linked list 1 -> 2 -> 3 -> 4
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        // Swap nodes in pairs
        ListNode newHead = solution.swapPairs(head);
        // Print the swapped list
        ListNode current = newHead;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        // Output should be: 2 1 4 3
    }
}
