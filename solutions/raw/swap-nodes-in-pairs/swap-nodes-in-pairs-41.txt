/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode swapPairs(ListNode head) {
        // Create a dummy node that serves as the starting point before the head of the list
        ListNode tempHead1 = new ListNode(0);
        // Connect the dummy node to the head of the original list
        tempHead1.next = head;
        // Initialize a \'prev\' pointer to the dummy node
        ListNode prev = tempHead1;
        // \'temp\' is used to traverse the list starting from the head
        ListNode temp = head;
        // Iterate through the list in pairs
        while (temp != null && temp.next != null) {
            // \'temp1\' points to the second node in the current pair
            ListNode temp1 = temp.next;
            // Skip the second node by linking the first node to the node after the pair
            temp.next = temp.next.next;
            // Link the second node (temp1) to the first node (temp)
            temp1.next = temp;
            // Link the previous node in the list to \'temp1\', completing the swap
            prev.next = temp1;
            // Move the \'prev\' pointer to \'temp\', which is now the second node of the swapped pair
            prev = temp;
            // Move \'temp\' to the next pair of nodes
            temp = temp.next;
        }
        // Return the new head of the list, which is the next node of the dummy node
        return tempHead1.next;
    }
}
