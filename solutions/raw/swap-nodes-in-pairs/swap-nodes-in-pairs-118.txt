class Solution {

    public static ListNode swapPairs(ListNode head) {
        if (head == null)
            return null;
        if (head.next == null)
            return head;
        headMain = head.next;
        recursiveSwap(head, head.next, null);
        return headMain;
    }

    static ListNode headMain = null;

    private static ListNode recursiveSwap(ListNode head, ListNode next, ListNode prevPairSecondNode) {
        if (head == null) {
            return null;
        }
        if (next == null) {
            return head;
        }
        ListNode nextPairLink = next.next;
        swap(head, next);
        if (prevPairSecondNode != null) {
            prevPairSecondNode.next = next;
        }
        ListNode nextPairConnect = head;
        if (nextPairLink == null) {
            return recursiveSwap(nextPairLink, null, nextPairConnect);
        } else {
            recursiveSwap(nextPairLink, nextPairLink.next, nextPairConnect);
        }
        return null;
    }

    static void swap(ListNode one, ListNode two) {
        ListNode temp = two.next;
        two.next = one;
        one.next = temp;
    }
}
