/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode swapPairs(ListNode head) {
        ListNode rsNode = new ListNode();
        List<Integer> rsList = new ArrayList<>();
        if (head == null) {
            return null;
        }
        while (head != null) {
            rsList.add(head.val);
            head = head.next;
        }
        if (rsList.size() == 1) {
            return new ListNode(rsList.get(0));
        }
        int lengthList = rsList.size() % 2 == 0 ? rsList.size() - 1 : rsList.size() - 2;
        for (int i = 0; i < lengthList; i += 2) {
            int tempInt = rsList.get(i);
            rsList.set(i, rsList.get(i + 1));
            rsList.set(i + 1, tempInt);
        }
        List<ListNode> rsListNode = new ArrayList<>();
        for (int i = 0; i < rsList.size(); i++) {
            ListNode tempNode = new ListNode(rsList.get(i));
            if (rsListNode.isEmpty()) {
                rsListNode.add(tempNode);
            } else {
                rsListNode.get(i - 1).next = tempNode;
                rsListNode.add(tempNode);
            }
        }
        if (!rsListNode.isEmpty()) {
            rsNode = rsListNode.get(0);
        }
        return rsNode;
    }
}
