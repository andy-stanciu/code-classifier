/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode swapPairs(ListNode head) {
        //recursive method
        ListNode adjacent_node = null;
        ListNode remaining_node_head = null;
        if (//base case when there is only one node or no node
        head == null || head.next == null)
            return head;
        //this head node  passes to recursion,it takes care and gives the head\'s address
        remaining_node_head = head.next.next;
        //stores second node address
        adjacent_node = head.next;
        //converts second node\'s address to first node
        adjacent_node.next = head;
        //the recursion returned address is map to respective first nodes
        head.next = swapPairs(remaining_node_head);
        return adjacent_node;
        //method 2 (Don\'t care about leetcode note )
        //opposite to leetcode mentioned approach
        //swap the values of adjacent nodes iteratively
        // if(head == null || head.next == null)
        //     return head;
        // ListNode temphead = head;
        // ListNode current = head;
        // ListNode nextnode;
        // int temp;
        // while(current != null && current.next != null)
        // {
        //     nextnode = current.next;
        //     //swap logic
        //     temp = current.val;
        //     current.val = nextnode.val;
        //     nextnode.val = temp;
        //     current = nextnode.next;
        // }
        // return temphead;
    }
    //BY JAGGINENI GANESH
}
