/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode swapPairs(ListNode head) {
        //0 node
        if (head == null) {
            return null;
        }
        //1 node
        if (head.next == null) {
            return head;
        }
        ListNode start = head;
        ListNode end = head.next;
        ListNode prev = start;
        //2 nodes
        if (start.next != null && end.next == null) {
            end.next = head;
            head.next = null;
            head = end;
            return head;
        }
        head = head.next;
        //Swap all excluding last two for n as even or exlcude last one for n as odd
        while (start.next != null && end.next != null) {
            prev.next = end;
            prev = start;
            start.next = end.next;
            start = end.next;
            end.next = prev;
            end = start.next;
        }
        //Swap last left over nodes
        if (start.next != null) {
            end.next = prev.next;
            prev.next = start.next;
            start.next = null;
            return head;
        }
        //if n is odd return directly
        return head;
    }
}
