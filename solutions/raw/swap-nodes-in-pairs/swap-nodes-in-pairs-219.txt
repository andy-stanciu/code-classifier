class Solution {

    public ListNode swapPairs(ListNode head) {
        // Base case: if there are fewer than two nodes, return the head
        if (head == null || head.next == null) {
            return head;
        }
        // Step 1: Swap the first two nodes
        ListNode firstNode = head;
        ListNode secondNode = head.next;
        // Step 2: Recursively swap the remaining nodes
        firstNode.next = swapPairs(secondNode.next);
        // Step 3: Link the second node to the first node
        secondNode.next = firstNode;
        // Step 4: Return the new head (the second node becomes the new head)
        return secondNode;
    }
}
