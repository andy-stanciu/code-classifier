class Solution {

    public ListNode swapPairs(ListNode head) {
        // Create a dummy node that points to the head of the list.
        ListNode prevNode = new ListNode(0);
        // Set the dummy node\'s next to the head of the list.
        prevNode.next = head;
        // Save the dummy node reference for returning.
        ListNode newHead = prevNode;
        // Loop until we reach the end of the list or there are no more pairs to swap.
        while (prevNode.next != null && prevNode.next.next != null) {
            // Identify the two nodes to be swapped.
            ListNode node1 = prevNode.next;
            ListNode node2 = node1.next;
            // Save the next node after the pair.
            ListNode nextNode = node2.next;
            // Perform the swap.
            // The previous node now points to the second node in the pair.
            prevNode.next = node2;
            // The second node points back to the first node.
            node2.next = node1;
            // The first node points to the node after the pair.
            node1.next = nextNode;
            // Move the prevNode to node1 (which is now after node2).
            prevNode = node1;
        }
        // Return the new head of the list, skipping the dummy node.
        return newHead.next;
    }
}
