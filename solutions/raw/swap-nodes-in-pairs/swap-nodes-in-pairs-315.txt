/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode swapPairs(ListNode head) {
        ListNode currentNode = head;
        //ListNode dummyNode = head;
        int nodeLength = nodeLength(head);
        int[] arr = new int[nodeLength];
        int k = 0;
        while (currentNode != null) {
            arr[k] = currentNode.val;
            currentNode = currentNode.next;
            k++;
        }
        for (int i = 0; i < arr.length - 1; i++) {
            int tmp = arr[i + 1];
            arr[i + 1] = arr[i];
            arr[i] = tmp;
            i++;
        }
        ListNode newHead = new ListNode();
        ListNode dummyN = newHead;
        for (int j = 0; j < arr.length; j++) {
            ListNode newNode = new ListNode(arr[j]);
            newHead.next = newNode;
            newHead = newHead.next;
        }
        return dummyN.next;
    }

    public int nodeLength(ListNode head) {
        int len = 0;
        while (head != null) {
            head = head.next;
            len++;
        }
        return len;
    }
}
