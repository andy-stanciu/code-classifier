class Solution {

    public ListNode swapPairs(ListNode head) {
        if (head == null || head.next == null) {
            // If there are no nodes or only one node, return the head as it is.
            return head;
        }
        // Dummy node to handle the head swap.
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prev = dummy;
        ListNode curr = head;
        while (curr != null && curr.next != null) {
            // Store the next pair\'s starting node.
            ListNode nextPair = curr.next.next;
            // The second node in the current pair.
            ListNode second = curr.next;
            // Swap the nodes
            // Link the second node to the first.
            second.next = curr;
            // Link the first node to the next pair.
            curr.next = nextPair;
            // Link the previous node to the second node in the pair.
            prev.next = second;
            // Move the pointers forward for the next pair
            prev = curr;
            curr = nextPair;
        }
        // Return the new head, which is the next of dummy node.
        return dummy.next;
    }
}
