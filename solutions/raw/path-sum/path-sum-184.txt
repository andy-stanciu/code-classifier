public class Solution {

    // Definition for a binary tree node.
    public boolean hasPathSum(TreeNode root, int targetSum) {
        // Base case: If the root is null, there can\'t be a path
        if (root == null) {
            return false;
        }
        // If the current node is a leaf, check if the path sum equals targetSum
        if (root.left == null && root.right == null) {
            return root.val == targetSum;
        }
        // Recursive case: Check the left and right subtree
        int newTargetSum = targetSum - root.val;
        return hasPathSum(root.left, newTargetSum) || hasPathSum(root.right, newTargetSum);
    }

    public static void main(String[] args) {
        // Construct the example tree: [5,4,8,11,null,13,4,7,2,null,null,null,1]
        TreeNode root = new TreeNode(5);
        root.left = new TreeNode(4);
        root.right = new TreeNode(8);
        root.left.left = new TreeNode(11);
        root.right.left = new TreeNode(13);
        root.right.right = new TreeNode(4);
        root.left.left.left = new TreeNode(7);
        root.left.left.right = new TreeNode(2);
        root.right.right.right = new TreeNode(1);
        Solution solution = new Solution();
        int targetSum = 22;
        boolean result = solution.hasPathSum(root, targetSum);
        // Output: true
        System.out.println(result);
    }
}
