/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean hasPathSum(TreeNode root, int targetSum) {
        ArrayList<Integer> li = new ArrayList<Integer>();
        return backTracking(root, targetSum);
    }

    boolean backTracking(TreeNode root, int targetSum, ArrayList<Integer> res) {
        if (root == null) {
            return false;
        }
        if (root.left == null && root.right == null) {
            int sum = 0;
            for (int i = 0; i < res.size(); i++) {
                sum += res.get(i);
            }
            sum = sum + root.val;
            if (sum == targetSum)
                return true;
            return false;
        }
        res.add(root.val);
        boolean left = backTracking(root.left, targetSum, res);
        boolean right = backTracking(root.right, targetSum, res);
        res.remove(res.size() - 1);
        return left || right;
    }
}
