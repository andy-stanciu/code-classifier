/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean hasPathSum(TreeNode root, int targetSum) {
        return usignStack(root, targetSum);
    }

    boolean usignStack(TreeNode root, int targetSum) {
        if (root == null) {
            return false;
        }
        Stack<TreeNode> stack = new Stack<>();
        Stack<Integer> sumStack = new Stack<>();
        stack.push(root);
        sumStack.push(root.val);
        while (!stack.isEmpty()) {
            TreeNode node = stack.pop();
            int currentSum = sumStack.pop();
            if (node.left == null && node.right == null) {
                if (currentSum == targetSum) {
                    return true;
                }
            }
            if (node.right != null) {
                stack.push(node.right);
                sumStack.push(currentSum + node.right.val);
            }
            if (node.left != null) {
                stack.push(node.left);
                sumStack.push(currentSum + node.left.val);
            }
        }
        return false;
    }
}
