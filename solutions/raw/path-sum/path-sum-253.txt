/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean hasPathSum(TreeNode root, int targetSum) {
        int calculatedSum = 0;
        // Check if the binary tree is null
        if (root == null) {
            return false;
        }
        // Add the value
        calculatedSum += root.val;
        // Check if the target is the same as the calculated one and if we are on a leaf in the subtree
        if (calculatedSum == targetSum && root.left == null && root.right == null) {
            return true;
        }
        // Substract the current value of the from the target
        int remainingSum = targetSum - root.val;
        // Use recursion to traverse the other subtrees
        return hasPathSum(root.left, remainingSum) || hasPathSum(root.right, remainingSum);
    }
}
