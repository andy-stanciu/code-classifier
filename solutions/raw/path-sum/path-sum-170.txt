/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean hasPathSum(TreeNode root, int targetSum) {
        if (root == null) {
            return false;
        }
        boolean ans = hasSum(root, targetSum, 0);
        return ans;
    }

    private boolean hasSum(TreeNode node, int targetSum, int previousSum) {
        int currentSum = previousSum + node.val;
        if (node.left == null && node.right == null) {
            if (currentSum == targetSum) {
                return true;
            } else {
                return false;
            }
        }
        if (node.left == null) {
            return hasSum(node.right, targetSum, currentSum);
        }
        if (node.right == null) {
            return hasSum(node.left, targetSum, currentSum);
        }
        boolean a1 = hasSum(node.left, targetSum, currentSum);
        boolean a2 = hasSum(node.right, targetSum, currentSum);
        return a1 || a2;
    }
}
