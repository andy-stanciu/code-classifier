/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    boolean findAns(int sum, TreeNode t, TreeNode tHead, int target) {
        //Checking if the obtained path is correct or wrong by checking if it is leaf node or not
        if (sum == target) {
            if (tHead.left == null && tHead.right == null) {
                return true;
            }
        }
        //if we have reached the leaf node and target sum is not found ...that means no target sum in that path
        if (t == null) {
            return false;
        }
        //Checking with the left path of the current node to find targetSum
        boolean flag1 = findAns(sum + t.val, t.left, t, target);
        //Checking with the right path of the current node to find targetSum
        boolean flag2 = findAns(sum + t.val, t.right, t, target);
        //If target sum is found either from left path or right path, it returns true
        return (flag1 || flag2);
    }

    public boolean hasPathSum(TreeNode root, int targetSum) {
        if (root == null) {
            return false;
        }
        if (root.left == null && root.right == null && root.val == targetSum) {
            return true;
        }
        boolean flag1 = findAns(root.val, root.left, root, targetSum);
        boolean flag2 = findAns(root.val, root.right, root, targetSum);
        return (flag1 || flag2);
    }
}
