/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    boolean hasSol = false;

    public boolean hasPathSum(TreeNode root, int targetSum) {
        LinkedList<Integer> temp = new LinkedList<>();
        return hasPathSum(root, targetSum, 0, temp);
    }

    private boolean hasPathSum(TreeNode root, int targetSum, int sum, LinkedList<Integer> temp) {
        if (root == null)
            return hasSol;
        temp.add(root.val);
        sum += root.val;
        if (root.left == null && root.right == null && sum == targetSum) {
            hasSol = true;
            return hasSol;
        }
        if (!hasSol) {
            hasSol = hasPathSum(root.right, targetSum, sum, temp);
            hasSol = hasPathSum(root.left, targetSum, sum, temp);
        }
        sum -= root.val;
        temp.removeLast();
        return hasSol;
    }
}
