/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean hasPathSum(TreeNode root, int targetSum) {
        if (root == null) {
            return false;
        }
        Queue<TreeNode> q = new LinkedList<>();
        Queue<Integer> sumPath = new LinkedList<>();
        q.add(root);
        sumPath.add(root.val);
        while (!q.isEmpty()) {
            TreeNode curr = q.poll();
            int currSum = sumPath.poll();
            if (curr.left == null && curr.right == null && currSum == targetSum) {
                return true;
            }
            if (curr.left != null) {
                q.add(curr.left);
                sumPath.add(curr.left.val + currSum);
            }
            if (curr.right != null) {
                q.add(curr.right);
                sumPath.add(curr.right.val + currSum);
            }
        }
        return false;
    }
}
