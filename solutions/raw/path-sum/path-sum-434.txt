/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean hasPathSum(TreeNode root, int targetSum) {
        if (root == null) {
            return false;
        }
        //reduce the node value from target after every level order traversal
        targetSum = targetSum - root.val;
        // test pass if it is leaf node means left and right are null and target sum become zero
        if (targetSum == 0 && root.left == null && root.right == null) {
            return true;
        }
        // if either from left or right value return is true means we found the node and will return true Always
        if (hasPathSum(root.left, targetSum) || hasPathSum(root.right, targetSum)) {
            return true;
        }
        return false;
    }
}
