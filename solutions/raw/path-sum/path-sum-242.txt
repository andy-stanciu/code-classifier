/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean hasPathSum(TreeNode root, int pathVal) {
        Stack<TreeNode> nodes = new Stack<>();
        Stack<Integer> sumOfPath = new Stack<>();
        if (root == null) {
            return false;
        }
        nodes.add(root);
        sumOfPath.add(root.val);
        while (!nodes.isEmpty()) {
            TreeNode node = nodes.pop();
            int tempSum = sumOfPath.pop();
            if (node.right == null && node.left == null && tempSum == pathVal) {
                return true;
            }
            if (node.right != null) {
                nodes.push(node.right);
                sumOfPath.push(node.right.val + tempSum);
            }
            if (node.left != null) {
                nodes.push(node.left);
                sumOfPath.push(node.left.val + tempSum);
            }
        }
        return false;
    }
}
