/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean hasPathSum(TreeNode root, int targetSum) {
        if (root == null)
            return false;
        Stack<TreeNode> nodes = new Stack<>();
        Stack<Integer> sums = new Stack<>();
        nodes.push(root);
        sums.push(root.val);
        while (!nodes.isEmpty()) {
            TreeNode node = nodes.pop();
            int sum = sums.pop();
            if (node.left == null && node.right == null) {
                if (sum == targetSum)
                    return true;
            }
            if (node.left != null) {
                nodes.push(node.left);
                sums.push(sum + node.left.val);
            }
            if (node.right != null) {
                nodes.push(node.right);
                sums.push(sum + node.right.val);
            }
        }
        return false;
    }

    public static void main(String[] args) {
        Solution s = new Solution();
        TreeNode root = new TreeNode(10);
        root.left = new TreeNode(8);
        root.right = new TreeNode(2);
        root.left.left = new TreeNode(3);
        root.left.right = new TreeNode(5);
        root.right.left = new TreeNode(2);
        int targetSum = 23;
        System.out.println(s.hasPathSum(root, targetSum));
    }
}
