/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean hasPathSum(TreeNode root, int targetSum) {
        // Base condition: if the node is null, there is no path
        if (root == null)
            return false;
        // Subtract the value of the current node from the target sum
        targetSum -= root.val;
        // Check if we have reached a leaf node and the target sum is zero
        if (targetSum == 0 && root.left == null && root.right == null)
            return true;
        // Recursively check left and right subtrees
        boolean left = hasPathSum(root.left, targetSum);
        boolean right = hasPathSum(root.right, targetSum);
        // Return true if either subtree has a valid path
        return left || right;
    }
}
