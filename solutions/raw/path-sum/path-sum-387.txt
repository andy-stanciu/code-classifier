/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean hasPathSum(TreeNode root, int targetSum) {
        // If the root is null, there\'s no path, so return false.
        if (root == null) {
            return false;
        }
        // If we\'ve reached a leaf node, check if the target sum equals the value of that node.
        if (root.left == null && root.right == null) {
            return targetSum == root.val;
        }
        // Recursively check the left and right subtrees with the remaining target sum.
        boolean leftSum = hasPathSum(root.left, targetSum - root.val);
        boolean rightSum = hasPathSum(root.right, targetSum - root.val);
        // Return true if either the left or right subtree has a path sum equal to the remaining target sum.
        return leftSum || rightSum;
    }
}
