/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean hasPathSum(TreeNode root, int targetSum) {
        return hasPathSumHelper(root, 0, targetSum);
    }

    private boolean hasPathSumHelper(TreeNode node, int currentSum, int targetSum) {
        if (node == null) {
            return false;
        }
        // Add the current node\'s value to the running sum
        currentSum += node.val;
        // Check if it\'s a leaf node and if the current sum equals the target sum
        if (node.left == null && node.right == null) {
            return currentSum == targetSum;
        }
        // Recursively check the left and right subtrees
        return hasPathSumHelper(node.left, currentSum, targetSum) || hasPathSumHelper(node.right, currentSum, targetSum);
    }
}
