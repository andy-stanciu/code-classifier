/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int sum = 0;

    public boolean hasPathSum(TreeNode root, int targetSum) {
        //   we will subtract the targetsum with currNode value
        // the moment we reach targetSum =0 , we have found our path , however
        // if we reach lead node(i.e. null) and targetSum is not 0 , that is not the path
        if (root == null) {
            return false;
        }
        Stack<TreeNode> node_stack = new Stack();
        Stack<Integer> sumStack = new Stack();
        node_stack.add(root);
        sumStack.add(targetSum - root.val);
        while (!node_stack.isEmpty()) {
            TreeNode currNode = node_stack.pop();
            int currSum = sumStack.pop();
            if (currNode.left == null && currNode.right == null && currSum == 0)
                return true;
            if (currNode.left != null) {
                node_stack.add(currNode.left);
                sumStack.add(currSum - currNode.left.val);
            }
            if (currNode.right != null) {
                node_stack.add(currNode.right);
                sumStack.add(currSum - currNode.right.val);
            }
        }
        // it means you have not found any path
        return false;
    }
}
