/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean hasPathSum(TreeNode root, int targetSum) {
        // corner case:
        if (root == null) {
            return false;
        }
        // solution: recursion, find path sum from root to child,
        // if == targetSum return true
        int sum = root.val;
        return isTargetSum(root, targetSum, sum);
    }

    private boolean isTargetSum(TreeNode root, int targetSum, int sum) {
        if (root.left == null && root.right == null && sum == targetSum) {
            return true;
        }
        // return if root has a path that the sum == targetSum
        if (root.left != null) {
            sum = sum + root.left.val;
            if (isTargetSum(root.left, targetSum, sum)) {
                return true;
            }
            sum = sum - root.left.val;
        }
        if (root.right != null) {
            sum = sum + root.right.val;
            if (isTargetSum(root.right, targetSum, sum)) {
                return true;
            }
        }
        return false;
    }
}
