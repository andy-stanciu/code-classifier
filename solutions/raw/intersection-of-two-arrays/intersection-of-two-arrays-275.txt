class Solution {

    public int[] intersection(int[] nums1, int[] nums2) {
        // Ensure nums1 is the smaller array for efficiency
        if (nums1.length > nums2.length) {
            int[] temp = nums1;
            nums1 = nums2;
            nums2 = temp;
        }
        int[] nums3 = new int[nums1.length];
        int index = 0;
        // Sort nums2 for binary search
        Arrays.sort(nums2);
        // Perform binary search for each element in nums1
        for (int num : nums1) {
            // Check if the num is already in nums3
            boolean alreadyFound = false;
            for (int i = 0; i < index; i++) {
                if (nums3[i] == num) {
                    alreadyFound = true;
                    break;
                }
            }
            if (alreadyFound) {
                continue;
            }
            if (binarySearch(nums2, num) != -1) {
                nums3[index++] = num;
            }
        }
        // Create result array with the correct size
        int[] result = new int[index];
        for (int i = 0; i < index; i++) {
            result[i] = nums3[i];
        }
        return result;
    }

    private int binarySearch(int[] arr, int target) {
        int start = 0;
        int end = arr.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (arr[mid] == target) {
                return mid;
            }
            if (arr[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return -1;
    }
}
