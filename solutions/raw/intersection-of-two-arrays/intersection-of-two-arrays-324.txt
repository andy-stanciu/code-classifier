class Solution {

    public int[] intersection(int[] nums1, int[] nums2) {
        nums1 = removeDuplicatesAndSort(nums1);
        nums2 = removeDuplicatesAndSort(nums2);
        if (nums1.length > nums2.length) {
            return helper(nums1, nums2);
        } else {
            return helper(nums2, nums1);
        }
    }

    public boolean binarySearch(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] > target)
                right = mid - 1;
            else if (nums[mid] < target)
                left = mid + 1;
            else
                return true;
        }
        return false;
    }

    public static int[] removeDuplicatesAndSort(int[] nums) {
        Set<Integer> set = new TreeSet<>();
        for (int num : nums) {
            set.add(num);
        }
        int[] result = new int[set.size()];
        int i = 0;
        for (int num : set) {
            result[i++] = num;
        }
        return result;
    }

    public int[] helper(int[] bigger, int[] smaller) {
        List<Integer> list = new ArrayList<>();
        for (int num : smaller) {
            if (binarySearch(bigger, num)) {
                list.add(num);
            }
        }
        int[] arr = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            arr[i] = list.get(i);
        }
        return arr;
    }
}
