class Solution {

    public int[] intersection(int[] nums1, int[] nums2) {
        // Arrays.sort(nums2);
        Set<Integer> list = new HashSet<>();
        for (int i : nums1) {
            // if(binarysearch(nums2,i) != (-1)){
            //     list.add(i);
            // }
            if (leanerSearch(nums2, i) != (-1)) {
                list.add(i);
            }
        }
        int n = list.size();
        int[] nums3 = new int[n];
        int i = 0;
        for (int j : list) {
            nums3[i] = j;
            ++i;
        }
        return nums3;
    }

    private int binarysearch(int[] nums2, int target) {
        int start = 0;
        int end = nums2.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (nums2[mid] > target)
                end = mid - 1;
            else if (nums2[mid] < target)
                start = mid + 1;
            else
                return target;
        }
        return -1;
    }

    private int leanerSearch(int[] nums, int key) {
        for (int i : nums) {
            if (i == key) {
                return key;
            }
        }
        return -1;
    }
}
