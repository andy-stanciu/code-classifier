class Solution {

    public static int[] intersection(int[] nums1, int[] nums2) {
        List<Integer> a = new ArrayList();
        radixSort(nums1);
        radixSort(nums2);
        a = intersection1(nums1, nums2);
        int[] out = new int[a.size()];
        int j = 0;
        for (int i : a) {
            out[j++] = i;
        }
        return out;
    }

    public static void radixSort(int[] arr) {
        int max = arr[0];
        for (int i = 1; i < arr.length; i++) {
            max = Math.max(max, arr[i]);
        }
        for (int exp = 1; max / exp > 0; exp *= 10) {
            sort(arr, exp);
        }
    }

    private static void sort(int[] arr, int exp) {
        int[] count = new int[10];
        int[] output = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            count[(arr[i] / exp) % 10]++;
        }
        for (int i = 1; i < count.length; i++) {
            count[i] += count[i - 1];
        }
        for (int i = arr.length - 1; i >= 0; i--) {
            output[--count[(arr[i] / exp) % 10]] = arr[i];
        }
        for (int i = 0; i < arr.length; i++) {
            arr[i] = output[i];
        }
    }

    public static List<Integer> intersection1(int[] arr1, int[] arr2) {
        int i = 0, j = 0;
        ArrayList<Integer> output = new ArrayList<Integer>();
        //number that can\'t appear in both arrays
        output.add(-1);
        //		, this will be removed
        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] == arr2[j] && output.get(output.size() - 1) != arr1[i]) {
                output.add(arr1[i]);
                i++;
                j++;
            } else {
                if (arr1[i] > arr2[j]) {
                    j++;
                } else {
                    i++;
                }
            }
        }
        return output.subList(1, output.size());
    }
}
