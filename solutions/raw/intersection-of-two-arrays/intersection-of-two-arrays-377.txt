/////////////////////////////// FIRST SOLUTION ///////////////////////////////
class Solution {

    static void BubbleSort(int[] arr) {
        boolean swapped = false;
        for (int i = 0; i < arr.length; i++) {
            for (int j = 1; j < arr.length; j++) {
                if (arr[j] < arr[j - 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j - 1];
                    arr[j - 1] = temp;
                    swapped = true;
                }
            }
            if (!swapped) {
                break;
            }
        }
    }

    static int search(int[] arr, int target) {
        int start = 0;
        int end = arr.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (arr[mid] == target) {
                return target;
            } else if (arr[mid] > target) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return -1;
    }

    public int[] intersection(int[] nums1, int[] nums2) {
        BubbleSort(nums1);
        BubbleSort(nums2);
        HashSet<Integer> s = new HashSet<>();
        for (int i : nums1) {
            int result = search(nums2, i);
            if (result != -1) {
                s.add(result);
            }
        }
        int[] arr = new int[s.size()];
        int j = 0;
        for (int i : s) {
            arr[j] = i;
            j++;
        }
        return arr;
    }
}
// SECOND SOLUTION
// class Solution {
//     public int[] intersection(int[] nums1, int[] nums2) {
//         int[] ans=new int[Math.min(nums1.length,nums2.length)];
//         int index=0;
//         boolean[] occ=new boolean[1001];
//         for(int i:nums1){
//             occ[i]=true;
//         }
//         for(int i:nums2){
//             if(occ[i]){
//                 ans[index++]=i;
//             }
//             occ[i]=false;
//         }
//         return Arrays.copyOf(ans,index);
//     }
// }
