class Solution {

    public int[] intersection(int[] nums1, int[] nums2) {
        // Arrays.sort(nums1);
        // Arrays.sort(nums2);
        // int size = (nums1.length > nums2.length) ? nums2.length : nums1.length;
        // ArrayList<Integer> list = new ArrayList<>();
        // int i = 0;
        // int j = 0;
        // int n = nums1.length;
        // int m = nums2.length;
        // while(i < n && j < m){
        //     if(nums1[i] < nums2[j]){
        //         i++;
        //     }else if(nums2[j] < nums1[i]){
        //         j++;
        //     }else{
        //         if(list.size() == 0 || list.get(list.size() - 1) != nums1[i]){
        //             list.add(nums1[i]);
        //         }
        //          i++;
        //          j++;
        //     }
        // }
        // int[] ans = new int[list.size()];
        // for(int k=0; k<ans.length; k++){
        //     ans[k] = list.get(k);
        // }
        // return ans;
        //second approach
        HashSet<Integer> set = new HashSet<>();
        for (int val : nums1) {
            set.add(val);
        }
        HashSet<Integer> ans = new HashSet<>();
        for (int val : nums2) {
            if (set.contains(val)) {
                ans.add(val);
            }
        }
        int[] ansArr = new int[ans.size()];
        int index = 0;
        for (int val : ans) {
            ansArr[index++] = val;
        }
        return ansArr;
    }
}
