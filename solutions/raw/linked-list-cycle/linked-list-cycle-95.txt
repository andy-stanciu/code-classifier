/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public boolean hasCycle(ListNode head) {
        // Check if the list is empty
        if (head == null) {
            return false;
        }
        // Initialize two pointers: slow and fast
        ListNode slow = head;
        ListNode fast = head.next;
        // Loop until the fast pointer reaches the end of the list or catches up to the slow pointer
        while (fast != null && fast.next != null) {
            // Check if the slow and fast pointers point to the same node, indicating a cycle
            if (slow == fast) {
                return true;
            }
            // Move the slow pointer one step forward and the fast pointer two steps forward
            slow = slow.next;
            fast = fast.next.next;
        }
        // If the loop completes without finding a cycle, return false
        return false;
    }
}
