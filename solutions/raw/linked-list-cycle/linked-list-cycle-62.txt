/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public boolean hasCycle(ListNode head) {
        //defining slow and fast pointer
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            //slow pointer moves by 1
            slow = slow.next;
            //fast pointer moves by 2
            fast = fast.next.next;
            if (slow == fast) {
                //if at some point slow and fast pointer meet, that means the LL is circular and so we will return true
                return true;
            }
        }
        //if slow and fast pointer do not meet at any point and the while loop breaks , that means the LL has no cycle as there exists a null pointer ,which means there is an endpoint of our LL.
        return false;
    }
}
