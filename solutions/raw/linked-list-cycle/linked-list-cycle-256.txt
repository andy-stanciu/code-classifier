/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public boolean hasCycle(ListNode head) {
        // Check if the list is empty or has only one node without a next
        if (head == null || head.next == null)
            return false;
        // Initialize slow to the head, and fast to the second node
        ListNode slow = head;
        ListNode fast = head.next;
        // Loop until the slow and fast pointers meet, indicating a cycle
        while (slow != fast) {
            // If fast reaches the end, there\'s no cycle
            if (fast == null || fast.next == null)
                return false;
            // Move slow by one step
            slow = slow.next;
            // Move fast by two steps
            fast = fast.next.next;
        }
        // If we exit the loop, slow and fast have met, so there\'s a cycle
        return true;
    }
}
