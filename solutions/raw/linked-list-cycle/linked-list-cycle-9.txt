/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public boolean hasCycle(ListNode head) {
        // check that we have valid linked list
        if (head == null || head.next == null)
            return false;
        // declare fasr pointer and make it ahead by one node
        ListNode fast = head.next;
        // declare slow pointer and make it to current head node
        ListNode slow = head;
        // iterate in loop while we reach end of the list
        while (fast.next != null && fast.next.next != null) {
            // check if we have points intersection and if yes return true
            if (fast == slow)
                return true;
            // move fast pointer by two nodes
            fast = fast.next.next;
            // move slow pointer by one node
            slow = slow.next;
        }
        // return false if we reached end of the list
        return false;
    }
}
