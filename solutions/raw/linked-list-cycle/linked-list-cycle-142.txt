/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public boolean hasCycle(ListNode head) {
        // // Method -- 1
        // if (head == null) {
        //     return false;
        // }
        // while (head != null) {
        //     if (head.val == Integer.MAX_VALUE) { // already visited
        //         return true;
        //     }
        // 	//flagging the node
        //     head.val = Integer.MAX_VALUE;
        //     head = head.next;
        // }
        // return false;
        // // Method -- 2
        if (head == null) {
            return false;
        }
        ListNode slow = head, fast = head;
        while (fast.next != null && fast.next.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow) {
                return true;
            }
        }
        return false;
    }
}
