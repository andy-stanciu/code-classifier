/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public boolean hasCycle(ListNode head) {
        //this pointer moves very fast
        ListNode fast = head;
        //this pointer moves slow
        ListNode slow = head;
        while (fast != null && fast.next != null) {
            //while the fast pointer is not null, and while the next of fast pointer is also not null i.e. fast pointer is not the tail of a single linked list
            //move fast by two places
            fast = fast.next.next;
            //move slow by one place
            slow = slow.next;
            if (fast == slow) {
                //in a place, if one body is moving twice as fast as the other, then they will surely meet AT SOME POINT
                //if they do meet, then yes the linked list is cyclic
                return true;
            }
        }
        //however if one of the above two conditions is false then it means we have exited the list and reached the tail end hence this can\'t be a cyclic linked list
        return false;
    }
}
