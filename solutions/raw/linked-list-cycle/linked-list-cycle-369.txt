public class Solution {

    public boolean hasCycle(ListNode head) {
        // Edge case: if the list is empty or has only one node, no cycle is possible
        if (head == null || head.next == null) {
            return false;
        }
        // Initialize two pointers: slow moves 1 step, fast moves 2 steps
        ListNode slow = head;
        ListNode fast = head;
        // Traverse the list
        while (fast != null && fast.next != null) {
            // Move slow by one step
            slow = slow.next;
            // Move fast by two steps
            fast = fast.next.next;
            // If slow and fast meet, there\'s a cycle
            if (slow == fast) {
                return true;
            }
        }
        // If the loop ends, there is no cycle
        return false;
    }
}
