public class Solution {

    // Method to check if a linked list has a cycle
    public boolean hasCycle(ListNode head) {
        // If the list is empty or contains only one or two nodes, it cannot have a cycle
        if (head == null || head.next == null || head.next.next == null) {
            return false;
        }
        // Initialize two pointers, ptr1 and ptr2, both starting from the head of the list
        ListNode ptr1 = head;
        ListNode ptr2 = head;
        // Iterate through the list until ptr2 reaches the end (ptr2.next is null)
        while (ptr2.next != null) {
            // Move ptr1 one step forward
            ptr1 = ptr1.next;
            // Move ptr2 two steps forward
            ptr2 = ptr2.next.next;
            // If ptr1 and ptr2 meet (i.e., they point to the same node), there is a cycle
            if (ptr1 == ptr2) {
                return true;
            }
            // If ptr2 becomes null (reached the end of the list), there is no cycle
            if (ptr2 == null) {
                return false;
            }
        }
        // If ptr2 reached the end of the list, return false (no cycle found)
        return false;
    }
}
