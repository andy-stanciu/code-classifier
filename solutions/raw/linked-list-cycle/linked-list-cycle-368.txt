/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public boolean hasCycle(ListNode head) {
        // Initialize two pointers \'first\' and \'second\' starting at the head of the list
        ListNode first = head;
        ListNode second = head;
        // Continue looping until \'first\' or \'first.next\' becomes null (end of list)
        while ((first != null) && (first.next != null)) {
            // Move \'first\' two steps ahead
            first = first.next.next;
            // Move \'second\' one step ahead
            second = second.next;
            // If \'first\' and \'second\' meet, a cycle is detected
            if (first == second) {
                return true;
            }
        }
        // If the loop ends, there is no cycle in the list
        return false;
    }
}
