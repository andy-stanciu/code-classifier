class Solution {

    HashMap<String, Boolean> map;

    boolean backtrack(StringBuffer s, List<String> wordDict, int i) {
        if (s.isEmpty())
            return true;
        if (i >= s.length()) {
            return false;
        }
        for (String st : wordDict) {
            if (i + 1 <= s.length() && s.substring(0, i + 1).equals(st)) {
                StringBuffer cutString = new StringBuffer(s);
                cutString = cutString.replace(0, i + 1, "");
                String key = cutString + "@" + st;
                if (map.containsKey(key)) {
                    return map.get(key);
                }
                boolean ans = backtrack(cutString, wordDict, 0);
                map.put(key, ans);
                if (ans) {
                    return true;
                }
            }
        }
        return backtrack(s, wordDict, i + 1);
    }

    public boolean wordBreak(String s, List<String> wordDict) {
        map = new HashMap<>();
        return backtrack(new StringBuffer(s), wordDict, 0);
    }
}
