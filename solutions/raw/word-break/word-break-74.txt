// Top Down Dynamic Programming - Recusion + Memoization
// Time Complexity: O(n^2) quadratic time
// Space Complexity: O(n) linear space
class Solution {

    public boolean wordBreak(String s, List<String> wordDict) {
        return bckTrck(s, new HashSet<>(wordDict), 0, new Boolean[s.length()]);
    }

    public boolean bckTrck(String s, Set<String> dict, int idx, Boolean[] memo) {
        if (idx == s.length())
            return true;
        if (memo[idx] != null)
            return memo[idx];
        for (int end = idx + 1; end <= s.length(); end++) {
            if (dict.contains(s.substring(idx, end)) && bckTrck(s, dict, end, memo)) {
                memo[idx] = true;
                return true;
            }
        }
        memo[idx] = false;
        return false;
    }
}
