class Solution {

    private boolean helper(String s, Set<String> set, HashMap<String, Boolean> map) {
        if (s.length() == 0)
            return true;
        if (map.containsKey(s))
            return map.get(s);
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            sb.append(s.charAt(i));
            if (set.contains(sb.toString())) {
                if (helper(s.substring(i + 1), set, map)) {
                    map.put(s, true);
                    return true;
                }
            }
        }
        map.put(s, false);
        return false;
    }

    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> set = new HashSet<>();
        for (int i = 0; i < wordDict.size(); i++) {
            set.add(wordDict.get(i));
        }
        return helper(s, set, new HashMap<String, Boolean>());
    }
}
