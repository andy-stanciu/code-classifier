class Solution {

    public boolean wordBreak(String s, List<String> wordDict) {
        Map<String, Boolean> dp = new HashMap<>();
        Set<String> set = new HashSet<>(wordDict);
        return helper(s, set, wordDict, dp);
    }

    public boolean helper(String s, Set<String> set, List<String> wordDict, Map<String, Boolean> dp) {
        if (s.equals(""))
            return true;
        if (set.contains(s))
            return true;
        if (dp.containsKey(s))
            return dp.get(s);
        for (int i = 0; i < wordDict.size(); i++) {
            int index = s.indexOf(wordDict.get(i));
            if (index > -1) {
                if (helper(s.substring(0, index), set, wordDict, dp) && helper(s.substring(index + wordDict.get(i).length()), set, wordDict, dp)) {
                    dp.put(s, true);
                    return true;
                }
            }
        }
        dp.put(s, false);
        return false;
    }
}
