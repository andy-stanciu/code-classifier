// class Solution {
//     public boolean wordBreak(String s, Set<String> Dict) {
//        boolean[] f = new boolean[s.length() + 1];
//        f[0] = true;
//        //first DP
//        for(int i = 1; i <= s.length(); i++){
//            for(String str: dict){
//                if(str.length() <= i){
//                    if(s.substring(i-str.length(), i).equals(str)){
//                        f[i] = true;
//                        break;
//                    }
//                }
//            }
//        }
//        //Secound DP
//        for(int i=1; i <= s.length(); i++){
//            for(int j=0; j <i; j++){
//                if(f[j] && dict.contains(s.substring(j, i))){
//                    f[i] = true;
//                    break;
//                }
//            }
//        }
//        return f[s.length()];
//     }
// }
// class Solution {
//     private Map<String, Boolean> dp;
//     public boolean solve(String s, Set<String> m) {
//         if (s.length() == 0) {
//             return true;
//         }
//         if (dp.containsKey(s))
//             return dp.get(s);
//         for (int i = 0; i < s.length(); i++) {
//             String r = s.substring(0, i + 1);
//             if (m.contains(r)) {
//                 if (solve(s.substring(i + 1), m))
//                     return dp.put(s, true);
//             }
//         }
//         dp.put(s, false);
//         return false;
//     }
//     public boolean wordBreak(String s, List<String> wordDict) {
//         Set<String> m = new HashSet<>(wordDict);
//         dp = new HashMap<>();
//         return solve(s, m);
//     }
// }
class Solution {

    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> dict = new HashSet<>(wordDict);
        int n = s.length();
        boolean[] dp = new boolean[n + 1];
        dp[0] = true;
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (dp[j] && dict.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[n];
    }
}
