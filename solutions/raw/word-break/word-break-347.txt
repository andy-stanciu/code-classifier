class Solution {

    int n;

    // ham ko phele tho bacha ban na hai tho basically string ko kese break kar sakte hai simple ek ek ko break karo aur check karo ki present hai ki nahi ok like leetcode hai tho phele l(eetcode) break karo fir check ki l hai kya tho pata chala ki l nahi hai so move forward le(etcode) same le nahi hai lee(tcode) same and then leet(code) now check tho pata chala leet hai then strating index should be on c now code mai break karo aabi matlab recursion c(ode) aaisa so on
    // matlab ye tho samj gaya ki every single element mai break karna hai tho loop laga na hai
    //          basic index=0 mai hai tho loop index +1 se n tak chalega
    //          aur wo hoga endIndex to break matlab index se lekar end index tak break hoga tho temp = substring(index,endIndex)
    //  agar temp contain karta hai aur recursion mai aage like endIndex dekh ke ge ki present hai ki nahi same ok
    public boolean wordBreak(String s, List<String> wordDict) {
        n = s.length();
        Boolean[] dp = new Boolean[n + 1];
        return solve(0, s, wordDict, dp);
    }

    boolean solve(int index, String s, List<String> wordDict, Boolean[] dp) {
        if (index == n) {
            // ham jab aage kar rahe hai jab break kiya hua string hai present hai matlab agar index last tak paucha matlab saare string present hai
            return true;
        }
        if (dp[index] != null) {
            return dp[index];
        }
        for (int endIndex = index + 1; endIndex <= n; endIndex++) {
            // break the string index se endIndex tak
            String temp = s.substring(index, endIndex);
            if (wordDict.contains(temp) && solve(endIndex, s, wordDict, dp)) {
                // temo jo break kiya ussme check kiya contain or ////not and baaki remaining string ke liye recursive call solve////(endIndex...)
                return dp[index] = true;
            }
        }
        return dp[index] = false;
    }
}
