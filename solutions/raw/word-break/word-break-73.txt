// Bottom Up Dynamic Programming
// Time Complexity: O(n^2) quadratic
// Space Complexity:  O(n) linear space
class Solution {

    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> dict = new HashSet<>(wordDict);
        // Don\'t forget +1 or you\'ll get an index out of bounds error for dp[s.length()]
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;
        for (int end = 0; end <= s.length(); end++) {
            for (int start = 0; start < end; start++) {
                if (dp[start] && dict.contains(s.substring(start, end))) {
                    dp[end] = true;
                    // Optional: Prevents unneccesary cycles after solution is found
                    break;
                }
            }
        }
        return dp[s.length()];
    }
}
