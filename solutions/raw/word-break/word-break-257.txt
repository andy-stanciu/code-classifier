class Solution {

    public boolean wordBreak(String s, List<String> wordDict) {
        int[] dp = new int[s.length()];
        Arrays.fill(dp, -1);
        return ifWordBreakPossible(s, 0, wordDict, dp);
    }

    public static boolean ifWordBreakPossible(String sentence, int start, List<String> wordDict, int[] dp) {
        if (start == sentence.length()) {
            return true;
        }
        if (dp[start] != -1) {
            return dp[start] == 1 ? true : false;
        }
        StringBuilder formedWord = new StringBuilder("");
        for (int i = start; i < sentence.length(); i++) {
            formedWord.append(String.valueOf(sentence.charAt(i)));
            if (wordDict.contains(formedWord.toString()) && ifWordBreakPossible(sentence, i + 1, wordDict, dp)) {
                dp[start] = 1;
                return true;
            }
        }
        dp[start] = 0;
        return false;
    }
}
// catsandog -> cats sand dog cat and og
// cat sand og
// cats and og
