class Solution {

    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> memo = new HashSet<>();
        Set<String> set = new HashSet<>(wordDict);
        return wordBreakHelper(s, set, memo);
    }

    /**
     * Helper function for memorisation technique
     */
    public boolean wordBreakHelper(String s, Set<String> wordDict, Set<String> map) {
        if (s.length() == 0) {
            return true;
        }
        if (map.contains(s)) {
            return false;
        }
        for (int i = 0; i < s.length(); i++) {
            String pre = s.substring(0, i + 1);
            if (wordDict.contains(pre)) {
                if (wordBreakHelper(s.substring(i + 1, s.length()), wordDict, map)) {
                    return true;
                }
            }
        }
        map.add(s);
        return false;
    }
}
