class Solution {

    public boolean wordBreak(String s, List<String> wordDict) {
        return dp_mem(s, wordDict);
        // return f(0, s, wordDict);
    }

    public boolean f(int i, String s, List<String> wordDict) {
        if (i == s.length())
            return true;
        boolean state = false;
        for (String word : wordDict) {
            if ((word.length() <= s.length() - i) && word.equals(s.substring(i, i + word.length()))) {
                state |= f(i + word.length(), s, wordDict);
            }
        }
        return state;
    }

    // public boolean f(int i, String s, Set<String> words){
    //     if(s.length()==0) return true;
    //     StringBuilder sb = new StringBuilder();
    //     for(int i=0; i<s.length(); i++){
    //         sb.append(s.charAt(i));
    //         if( words.contains( sb.toString() ) ){
    //             boolean state = f(s.substring(i+1), words);
    //             if(state) return true;
    //         }
    //     }
    //     return false;
    // }
    public boolean dp_mem(String s, List<String> words) {
        boolean[] dp = new boolean[s.length() + 1];
        dp[s.length()] = true;
        for (int i = s.length() - 1; i >= 0; i--) {
            for (String w : words) {
                if (s.length() - i >= w.length() && s.substring(i, i + w.length()).equals(w) && dp[i + w.length()]) {
                    dp[i] = true;
                }
            }
        }
        return dp[0];
    }
}
