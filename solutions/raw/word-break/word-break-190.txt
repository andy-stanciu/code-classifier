class Solution {

    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> set = new HashSet<>(wordDict);
        int[] dp = new int[s.length()];
        Arrays.fill(dp, -1);
        return solve(s, set, dp, 0);
    }

    public boolean solve(String s, Set<String> set, int[] dp, int idx) {
        if (idx >= s.length())
            return true;
        if (s.length() == 0)
            return true;
        if (dp[idx] != -1)
            return dp[idx] == 1;
        for (int i = idx; i <= s.length(); i++) {
            String ns = s.substring(idx, i);
            if (set.contains(ns) && solve(s, set, dp, i)) {
                dp[idx] = 1;
                return true;
            }
        }
        dp[idx] = 0;
        return dp[idx] == 1;
    }
}
