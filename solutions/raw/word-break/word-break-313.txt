class Solution {

    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> dict = new HashSet<>();
        for (String word : wordDict) dict.add(word);
        int n = s.length();
        int[][] dp = new int[n][n];
        for (int[] row : dp) Arrays.fill(row, -1);
        return check(s, 0, s.length() - 1, dict, dp);
    }

    public boolean isInDict(String s, Set<String> words) {
        return words.contains(s);
    }

    public boolean check(String s, int start, int end, Set<String> words, int[][] dp) {
        if (start > end)
            return false;
        if (isInDict(s.substring(start, end + 1), words))
            return true;
        if (dp[start][end] != -1)
            return dp[start][end] == 1 ? true : false;
        for (int i = start; i < end; i++) {
            boolean left = check(s, start, i, words, dp);
            boolean right = check(s, i + 1, end, words, dp);
            if (left == true && right == true) {
                dp[start][end] = 1;
                return true;
            }
        }
        dp[start][end] = 0;
        return false;
    }
}
