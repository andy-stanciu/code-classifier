class Solution {

    public boolean compare(String s1, String s2) {
        return s1.equals(s2);
    }

    public boolean recur(String s, List<String> wordDict, int i, Boolean[] dp) {
        if (i >= s.length())
            return true;
        if (dp[i] != null)
            return dp[i];
        for (String s2 : wordDict) {
            if (i + s2.length() <= s.length() && compare(s.substring(i, i + s2.length()), s2)) {
                boolean ans = recur(s, wordDict, i + s2.length(), dp);
                if (ans)
                    return dp[i] = true;
            }
        }
        return dp[i] = false;
    }

    public boolean wordBreak(String s, List<String> wordDict) {
        Boolean[] dp = new Boolean[s.length() + 1];
        return recur(s, wordDict, 0, dp);
    }
}
