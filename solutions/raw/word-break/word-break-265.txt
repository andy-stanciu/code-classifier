class Solution {

    public boolean wordBreak(String s, List<String> wordDict) {
        Map<String, Boolean> dp = new HashMap<>();
        return workBreak(s, wordDict, dp);
    }

    public static boolean workBreak(String s, List<String> wordDict, Map<String, Boolean> dp) {
        if (dp.containsKey(s)) {
            return dp.get(s);
        }
        if (s.isEmpty()) {
            return true;
        }
        for (String str : wordDict) {
            if (s.indexOf(str) == 0) {
                String suffix = s.substring(str.length());
                if (workBreak(suffix, wordDict, dp)) {
                    dp.put(s, true);
                    return true;
                }
            }
        }
        dp.put(s, false);
        return false;
    }
}
