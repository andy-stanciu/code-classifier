class Solution {

    public boolean wordBreak(String s, List<String> wordDict) {
        return dfs(s, wordDict, new HashMap<>());
    }

    private boolean dfs(String s, List<String> wordDict, Map<String, Boolean> cache) {
        if (cache.containsKey(s))
            return cache.get(s);
        if (s == null || s.length() == 0) {
            return true;
        }
        for (String word : wordDict) {
            if (s.startsWith(word)) {
                if (dfs(s.substring(word.length()), wordDict, cache)) {
                    cache.put(s, true);
                    return true;
                } else {
                    continue;
                }
            }
        }
        cache.put(s, false);
        return false;
    }
}
