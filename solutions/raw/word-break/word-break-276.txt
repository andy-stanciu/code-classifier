class Solution {

    Boolean[] mem;

    public boolean wordBreak(String s, List<String> wordDict) {
        mem = new Boolean[s.length()];
        return wordSearch(0, s, new HashSet<String>(wordDict));
    }

    private boolean wordSearch(int pos, String s, Set<String> set) {
        if (s.isEmpty())
            return true;
        if (mem[pos] != null)
            return mem[pos];
        for (int i = 1; i <= s.length(); i++) {
            if (set.contains(s.substring(0, i)) && wordSearch(pos + i, s.substring(i), set)) {
                return mem[pos] = true;
            }
        }
        return mem[pos] = false;
    }
}
