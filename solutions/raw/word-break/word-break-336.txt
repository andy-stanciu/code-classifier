class Solution {

    public boolean wordBreakR(String s, List<String> wordDict) {
        if (s.equals(""))
            return true;
        for (int i = 0; i < wordDict.size(); i++) {
            String prefix = wordDict.get(i);
            if (s.startsWith(prefix)) {
                String newString = s.substring(prefix.length());
                if (wordBreakR(newString, wordDict) == true) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean wordBreakTD(String s, List<String> wordDict, Map<String, Boolean> memo) {
        if (memo.containsKey(s))
            return memo.get(s);
        if (s.equals(""))
            return true;
        for (int i = 0; i < wordDict.size(); i++) {
            String prefix = wordDict.get(i);
            if (s.startsWith(prefix)) {
                String newString = s.substring(prefix.length());
                if (wordBreakTD(newString, wordDict, memo) == true) {
                    memo.put(s, true);
                    return memo.get(s);
                }
            }
        }
        memo.put(s, false);
        return memo.get(s);
    }

    public boolean wordBreak(String s, List<String> wordDict) {
        //Recursion: start
        // return wordBreakR(s,wordDict);
        //Recursion: end
        //Top-Down: start
        return wordBreakTD(s, wordDict, new HashMap<String, Boolean>());
        //Top-Down: end
    }
}
