class Solution {

    public boolean wordBreak(String s, List<String> wordDict) {
        Stack<Integer> stack = new Stack<>();
        boolean[] visited = new boolean[s.length()];
        stack.add(0);
        while (!stack.isEmpty()) {
            int idx = stack.pop();
            if (idx == s.length()) {
                return true;
            }
            if (visited[idx]) {
                continue;
            }
            visited[idx] = true;
            for (String word : wordDict) {
                if (isMatch(s, idx, word)) {
                    stack.add(idx + word.length());
                }
            }
        }
        return false;
    }

    public boolean isMatch(String s, int idx, String word) {
        int ptr = 0;
        if (word.length() > s.length() - idx) {
            return false;
        }
        int maxLen = Math.min(word.length(), s.length() - idx);
        while (ptr < maxLen) {
            if (s.charAt(ptr + idx) != word.charAt(ptr)) {
                return false;
            }
            ptr++;
        }
        return true;
    }
}
