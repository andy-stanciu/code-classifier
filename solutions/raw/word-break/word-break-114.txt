class Solution {

    public boolean solve(String s, int i, Map<String, Boolean> wordMap, int[] dp) {
        // Base case: if we\'ve reached the end of the string
        if (i == s.length()) {
            return true;
        }
        // If this subproblem has been solved already, return the result
        if (dp[i] != -1) {
            return dp[i] == 1;
        }
        // Explore all possible splits
        StringBuilder temp = new StringBuilder();
        for (int j = i; j < s.length(); j++) {
            temp.append(s.charAt(j));
            if (wordMap.containsKey(temp.toString())) {
                // If temp is found in the dictionary, recursively solve for the remaining substring
                if (solve(s, j + 1, wordMap, dp)) {
                    // Memoize the result
                    dp[i] = 1;
                    return true;
                }
            }
        }
        // If no valid split found, mark the current index as false
        // Memoize the result
        dp[i] = 0;
        return false;
    }

    public boolean wordBreak(String s, List<String> wordDict) {
        Map<String, Boolean> wordMap = new HashMap<>();
        int[] dp = new int[s.length()];
        // Initialize dp array with -1 to indicate unsolved subproblems
        Arrays.fill(dp, -1);
        // Store all words in the unordered map for quick lookup
        for (String word : wordDict) {
            wordMap.put(word, true);
        }
        // Start solving from index 0
        return solve(s, 0, wordMap, dp);
    }
}
