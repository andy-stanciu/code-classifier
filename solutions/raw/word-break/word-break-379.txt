class Solution {

    static boolean wordBreak(String s, List<String> wordDict) {
        return recurseWordBreak(s, 0, new HashSet<>(wordDict), new Boolean[s.length()]);
    }

    static boolean recurseWordBreak(String s, int i, Set<String> Dict, Boolean[] record) {
        if (i == s.length()) {
            return true;
        }
        if (record[i] != null) {
            return record[i];
        }
        for (int j = i; j < s.length(); j++) {
            if (Dict.contains(s.substring(i, j + 1)) && recurseWordBreak(s, j + 1, Dict, record)) {
                return record[i] = true;
            }
        }
        return record[i] = false;
    }
}
