class Solution {

    public boolean wordBreak(String s, List<String> wordDict) {
        Map<Integer, Boolean> memo = new HashMap<>();
        // List<String> memo = new ArrayList<>();
        return dp(s, wordDict, 0, memo);
    }

    private boolean dp(String s, List<String> wordDict, int nowIndex, Map<Integer, Boolean> memo) {
        if (nowIndex >= s.length()) {
            return true;
        }
        if (memo.containsKey(nowIndex)) {
            return memo.get(nowIndex);
        }
        boolean result = false;
        for (int i = nowIndex; i <= s.length(); i++) {
            if (wordDict.contains(s.substring(nowIndex, i))) {
                result = dp(s, wordDict, i, memo);
                memo.put(i, result);
                if (result == true) {
                    return true;
                }
            }
        }
        return result;
    }
}
