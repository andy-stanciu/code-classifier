class Solution {

    Boolean[][] dp = new Boolean[310][310];

    public boolean wordBreak(String s, List<String> map) {
        for (int i = 0; i < dp.length; i++) {
            for (int j = 0; j < dp.length; j++) {
                dp[i][j] = null;
            }
        }
        return solve(s, map, 0, s.length() - 1);
    }

    public boolean solve(String s, List<String> map, int i, int j) {
        if (i > j) {
            return false;
        }
        if (dp[i][j] != null) {
            return dp[i][j];
        }
        if (map.contains(s.substring(i, j + 1))) {
            return true;
        }
        boolean ans = false;
        for (int k = i; k < j; k++) {
            boolean t1 = solve(s, map, i, k);
            boolean t2 = solve(s, map, k + 1, j);
            ans = ans || (t1 && t2);
        }
        return dp[i][j] = ans;
    }
}
