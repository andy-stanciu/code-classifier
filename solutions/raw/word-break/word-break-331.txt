class Solution {

    boolean[] seen;

    public boolean wordBreak(String s, List<String> wordDict) {
        int n = s.length();
        seen = new boolean[n + 1];
        seen[0] = true;
        return dfs(0, s, wordDict, n);
    }

    public boolean dfs(int curNode, String s, List<String> wordDict, int n) {
        if (curNode == n)
            return true;
        for (String word : wordDict) {
            int next = curNode + word.length();
            if (next <= n && s.substring(curNode, next).equals(word) && !seen[next]) {
                seen[next] = true;
                if (dfs(next, s, wordDict, n)) {
                    return true;
                }
            }
        }
        return false;
    }
}
