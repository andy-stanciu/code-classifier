class Solution {

    public boolean wordBreak(String s, List<String> wordDict) {
        HashMap<String, Boolean> map = new HashMap<>();
        Boolean[] visited = new Boolean[s.length() + 1];
        for (int i = 0; i < wordDict.size(); i++) {
            map.put(wordDict.get(i), true);
        }
        return canBreak(s, map, visited);
    }

    public boolean canBreak(String s, HashMap<String, Boolean> map, Boolean[] visited) {
        if (s.length() == 0)
            return true;
        if (visited[s.length()] != null)
            return visited[s.length()];
        for (int i = 1; i <= s.length() && i < 21; i++) {
            if (map.containsKey(s.substring(0, i))) {
                if (i == s.length())
                    return true;
                boolean option1 = canBreak(s.substring(i), map, visited);
                if (option1 == true) {
                    visited[s.length()] = true;
                    return true;
                }
            }
        }
        visited[s.length()] = false;
        return false;
    }
}
