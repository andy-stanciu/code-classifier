class Solution {

    public boolean wordBreak(String s, List<String> wordDict) {
        int n = s.length();
        //dynamic
        boolean[] arr = new boolean[n + 1];
        for (int i = 0; i < n + 1; i++) {
            if (arr[i] == false && contain(s.substring(0, i), wordDict)) {
                arr[i] = true;
            }
            if (arr[i] == true) {
                if (i == n) {
                    return true;
                }
                for (int j = i + 1; j < n + 1; j++) {
                    if (arr[j] == false && contain(s.substring(i, j), wordDict)) {
                        arr[j] = true;
                    }
                    if (arr[j] == true && j == n) {
                        System.out.println(Arrays.toString(arr));
                        return true;
                    }
                }
            }
        }
        return false;
        //recursion
        // for(int i = 0; i < n + 1; i ++){
        //     if(contain(s.substring(0, i), wordDict)){
        //         if(i == n){
        //             return true;
        //         }
        //         if(wordBreak(s.substring(i, n), wordDict)){
        //             return true;
        //         }
        //     }
        // }
        // return false;
    }

    private boolean contain(String s, List<String> wordDict) {
        for (int i = 0; i < wordDict.size(); i++) {
            if (wordDict.get(i).compareTo(s) == 0) {
                return true;
            }
        }
        return false;
    }
}
