class Solution {

    public boolean wordBreak(String s, List<String> wordDict) {
        HashMap<String, Boolean> memo = new HashMap<>();
        Set<String> set = new HashSet<>(wordDict);
        return recursion(s, memo, set);
    }

    public boolean recursion(String s, HashMap<String, Boolean> memo, Set<String> set) {
        if (s.isEmpty()) {
            return true;
        }
        if (memo.containsKey(s)) {
            return memo.get(s);
        }
        int n = s.length();
        for (int i = 1; i <= n; i++) {
            String prefix = s.substring(0, i);
            if (set.contains(prefix) && recursion(s.substring(i), memo, set)) {
                memo.put(s, true);
                return true;
            }
        }
        memo.put(s, false);
        return false;
    }
}
