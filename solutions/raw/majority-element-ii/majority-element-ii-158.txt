class Solution {

    public List<Integer> majorityElement(int[] nums) {
        int c1 = 0;
        int c2 = 0;
        int ele2 = Integer.MIN_VALUE;
        int ele1 = Integer.MIN_VALUE;
        int n = nums.length;
        List<Integer> list = new ArrayList<>();
        for (int ele : nums) {
            if (c1 == 0 && ele2 != ele) {
                c1++;
                ele1 = ele;
            } else if (c2 == 0 && ele1 != ele) {
                c2++;
                ele2 = ele;
            } else if (ele1 == ele) {
                c1++;
            } else if (ele2 == ele) {
                c2++;
            } else {
                c1--;
                c2--;
            }
        }
        c1 = 0;
        c2 = 0;
        int minEle = n / 3;
        for (int ele : nums) {
            if (ele == ele1) {
                c1++;
            }
            if (ele == ele2) {
                c2++;
            }
        }
        if (c1 > minEle) {
            list.add(ele1);
        }
        if (c2 > minEle) {
            list.add(ele2);
        }
        Collections.sort(list);
        return list;
    }
    // correct o(N^2) time o(1) space
    // List<Integer> list = new ArrayList<>();
    // Map<Integer,Integer> map = new HashMap<>();
    // int minEle = (nums.length/3) + 1;
    // for(int ele:nums){
    //     map.put(ele, map.getOrDefault(ele,0) +1);
    //     if(map.get(ele) == minEle){
    //         list.add(ele);
    //     }
    //     if(list.size() > minEle) return list;
    // }
    // return list;
    // } correct o(N)
}
