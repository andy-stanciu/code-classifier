class Solution {

    // Here, 1/3 = 0.34, and hence possibly 2 major elements can be found
    public List<Integer> majorityElement(int[] nums) {
        int len = nums.length;
        int count1 = 0;
        int element1 = -1;
        int count2 = 0;
        int element2 = -1;
        // to find the potential majority element
        for (int i = 0; i < len; i++) {
            if (count1 == 0 && element2 != nums[i]) {
                element1 = nums[i];
                count1++;
            } else if (count2 == 0 && element1 != nums[i]) {
                element2 = nums[i];
                count2++;
            } else if (element1 == nums[i]) {
                count1++;
            } else if (element2 == nums[i]) {
                count2++;
            } else {
                count1--;
                count2--;
            }
        }
        // to count number of times the potential majority elements are occuring
        count1 = 0;
        count2 = 0;
        for (int num : nums) {
            if (num == element1) {
                count1++;
            } else if (num == element2) {
                count2++;
            }
        }
        List<Integer> ans = new ArrayList<>();
        int threshold = len / 3;
        if (count1 > threshold)
            ans.add(element1);
        if (count2 > threshold)
            ans.add(element2);
        return ans;
    }
}
