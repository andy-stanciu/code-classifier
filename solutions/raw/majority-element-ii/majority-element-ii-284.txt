class Solution {

    public List<Integer> majorityElement(int[] nums) {
        // If the array is empty, return an empty list
        if (nums.length < 1)
            return Arrays.asList();
        int count1 = 0, count2 = 0;
        int cand1 = 0, cand2 = 0;
        // First pass to find the two potential majority candidates
        for (int i : nums) {
            if (i == cand1) {
                // If the current number is the first candidate, increment count1
                count1++;
            } else if (i == cand2) {
                // If the current number is the second candidate, increment count2
                count2++;
            } else if (count1 == 0) {
                // If count1 is zero, assign the current number as the first candidate
                cand1 = i;
                count1 = 1;
            } else if (count2 == 0) {
                // If count2 is zero, assign the current number as the second candidate
                cand2 = i;
                count2 = 1;
            } else {
                // If the current number is different from both candidates, decrement both counts
                count1--;
                count2--;
            }
        }
        // Reset the counts to zero for the second pass
        count1 = count2 = 0;
        // Second pass to verify the counts of the candidates
        for (int i : nums) {
            if (i == cand1)
                count1++;
            else if (i == cand2)
                count2++;
        }
        // Collect the valid majority elements
        if (count1 > nums.length / 3 && count2 > nums.length / 3) {
            // Both candidates appear more than n/3 times
            return Arrays.asList(cand1, cand2);
        } else if (count1 > nums.length / 3) {
            // Only the first candidate appears more than n/3 times
            return Arrays.asList(cand1);
        } else if (count2 > nums.length / 3) {
            // Only the second candidate appears more than n/3 times
            return Arrays.asList(cand2);
        } else {
            // No candidate appears more than n/3 times
            return Arrays.asList();
        }
    }
}
