class Solution {

    public List<Integer> majorityElement(int[] nums) {
        if (nums == null || nums.length == 0)
            return new ArrayList();
        int n = nums.length;
        // OPTIMIZED, MOORE\'S ALGORITHM APPROACH
        int elem1 = Integer.MIN_VALUE, elem2 = Integer.MIN_VALUE;
        int count1 = 0, count2 = 0;
        for (int i = 0; i < n; i++) {
            if (count1 == 0 && nums[i] != elem2) {
                count1 = 1;
                elem1 = nums[i];
            } else if (count2 == 0 && nums[i] != elem1) {
                count2 = 1;
                elem2 = nums[i];
            } else if (elem1 == nums[i])
                count1++;
            else if (elem2 == nums[i])
                count2++;
            else {
                count1--;
                count2--;
            }
        }
        List<Integer> result = new ArrayList();
        count1 = 0;
        count2 = 0;
        for (int i = 0; i < n; i++) {
            if (elem1 == nums[i])
                count1++;
            if (elem2 == nums[i])
                count2++;
        }
        if (count1 > n / 3)
            result.add(elem1);
        if (count2 > n / 3)
            result.add(elem2);
        return result;
        // SIMPLE, NON-SPACE OPTIMIZED HASHMAP APPROACH
        // HashMap<Integer, Integer> countFreq = new HashMap();
        // for (int num: nums){
        //     countFreq.put(num, countFreq.getOrDefault(num,0)+1);
        // }
        // List<Integer> result = new ArrayList();
        // for (int key: countFreq.keySet()){
        //     if (countFreq.get(key) > n/3){
        //         result.add(key);
        //     }
        // }
        // return result;
    }
}
