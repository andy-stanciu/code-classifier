// Approach 1:, T.C:- O(n), S.C:- O(n)
// By:- HashMap --> counting every element frequency and checking if its greater than majority.
class Solution {

    public List<Integer> majorityElement(int[] nums) {
        int n = nums.length;
        HashMap<Integer, Integer> hm = new HashMap<>();
        for (int i = 0; i <= n - 1; i++) {
            Integer oldValue = hm.get(nums[i]);
            if (oldValue == null) {
                hm.put(nums[i], 1);
            } else {
                hm.put(nums[i], oldValue + 1);
            }
        }
        List<Integer> al = new ArrayList<>();
        Set<Integer> hs = hm.keySet();
        for (int p : hs) {
            if (hm.get(p) > n / 3) {
                al.add(p);
            }
        }
        return al;
    }
}

// Approach 2:-
// Brute Force Solution, T.C:- O(n^2)
class Solution {

    public List<Integer> majorityElement(int[] nums) {
        List<Integer> al = new ArrayList<>();
        int max = nums.length / 3;
        for (int i = 0; i <= nums.length - 1; i++) {
            int count = 1;
            // Inner loop mai count karte jayo.
            for (int j = 0; j <= nums.length - 1; j++) {
                if (i != j && nums[i] == nums[j]) {
                    count++;
                }
            }
            if (count > max && !al.contains(nums[i])) {
                al.add(nums[i]);
            }
        }
        return al;
    }
}
