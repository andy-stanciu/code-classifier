class Solution {

    public List<Integer> majorityElement(int[] nums) {
        // Initialize variables to keep track of potential majority elements and their counts
        int num1 = 0, num2 = 0, count1 = 0, count2 = 0;
        // Find potential majority elements
        for (int num : nums) {
            // If the current number matches num1, increment its count
            if (num == num1)
                count1++;
            else // If the current number matches num2, increment its count
            if (num == num2)
                count2++;
            else // If num1\'s count is 0, update num1 and reset its count
            if (count1 == 0) {
                num1 = num;
                count1++;
            } else // If num2\'s count is 0, update num2 and reset its count
            if (count2 == 0) {
                num2 = num;
                count2++;
            } else // If neither num1 nor num2 matches and their counts are non-zero, decrement their counts
            {
                count1--;
                count2--;
            }
        }
        // Reset counts to find actual counts of nums
        count1 = 0;
        count2 = 0;
        // Count occurrences of num1 and num2 in the array
        for (int num : nums) {
            if (num == num1)
                count1++;
            if (num == num2)
                count2++;
        }
        // Identify which nums appear more than n/3 times
        List<Integer> result = new ArrayList<>();
        if (count1 > nums.length / 3)
            result.add(num1);
        if (count2 > nums.length / 3 && !result.contains(num2))
            result.add(num2);
        return result;
    }
}
