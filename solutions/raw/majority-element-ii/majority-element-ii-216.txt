class Solution {

    public List<Integer> majorityElement(int[] nums) {
        //Init majority1, majority2, counter1, counter2
        Integer majority1 = 0;
        Integer majority2 = 0;
        int counter1 = 0;
        int counter2 = 0;
        //Iterate through the input array to find the majority numbers
        for (int n : nums) {
            //Check if n is equal or not to each of the majority numbers. In case it is different and not equal to neither of them, decrement the counter of both majority elements by one. This process is about setting our two majority elements(we can have 2 AT MOST!)
            if (n == majority1) {
                counter1++;
            } else if (n == majority2) {
                counter2++;
            } else if (counter1 == 0) {
                majority1 = n;
                counter1++;
            } else if (counter2 == 0) {
                majority2 = n;
                counter2++;
            } else {
                counter1--;
                counter2--;
            }
        }
        //Set the counters to zero again
        counter1 = 0;
        counter2 = 0;
        //Iterate through nums again and compare the values. In case of equality, increment the correspodning counter
        for (int n : nums) {
            if (n == majority1) {
                counter1++;
            } else if (n == majority2) {
                counter2++;
            }
        }
        //Create a list of integers . This will be our result
        List<Integer> res = new ArrayList<>();
        //Check for each majority elements if their occurrences are greater than n / 3. If so, add the majority number to our list
        if (counter1 > nums.length / 3) {
            res.add(majority1);
        }
        if (counter2 > nums.length / 3) {
            res.add(majority2);
        }
        //Finally, return the list
        return res;
    }
}
