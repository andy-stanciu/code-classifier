class Solution {

    public List<Integer> majorityElement(int[] nums) {
        int n = nums.length;
        // List<Integer> ls = new ArrayList<>();
        // Map<Integer, Integer> mp = new HashMap<>();
        // for(int i = 0; i < n; i++){
        //     mp.put(nums[i], mp.getOrDefault(nums[i], 0) + 1);
        // }
        // n = n/3;
        // for(Map.Entry<Integer, Integer> entry : mp.entrySet()){
        //     if(entry.getValue() > n){
        //         ls.add(entry.getKey());
        //     }
        // } return ls;
        // ---------------------------------------------------------
        //moore voting algo
        // counts
        int cnt1 = 0, cnt2 = 0;
        // element 1
        int el1 = Integer.MIN_VALUE;
        // element 2
        int el2 = Integer.MIN_VALUE;
        List<Integer> ls = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (cnt1 == 0 && nums[i] != el2) {
                cnt1 = 1;
                el1 = nums[i];
            } else if (cnt2 == 0 && nums[i] != el1) {
                cnt2 = 1;
                el2 = nums[i];
            } else if (nums[i] == el1) {
                cnt1++;
            } else if (nums[i] == el2) {
                cnt2++;
            } else {
                cnt1--;
                cnt2--;
            }
        }
        cnt1 = 0;
        cnt2 = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == el1)
                cnt1++;
            if (nums[i] == el2)
                cnt2++;
        }
        int mini = (int) (n / 3) + 1;
        if (cnt1 >= mini)
            ls.add(el1);
        if (cnt2 >= mini)
            ls.add(el2);
        return ls;
    }
}
