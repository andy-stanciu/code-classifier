class Solution {

    public int thirdMax(int[] nums) {
        //            if (nums.length == 1) {
        //                return nums[0];
        //            }
        //            if (nums.length == 2) {
        //                return nums[0] < nums[1] ? nums[1] : nums[0];
        //            }
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        Set<Integer> set = new HashSet<>();
        int length = nums.length;
        int n = 0;
        int count = 0;
        while (n < length) {
            if (set.contains(nums[n])) {
                n++;
                continue;
            }
            set.add(nums[n]);
            minHeap.offer(nums[n++]);
            if (++count == 3) {
                break;
            }
        }
        if (count != 3) {
            // not null
            int prev = minHeap.poll();
            while (minHeap.peek() != null) {
                prev = minHeap.poll();
            }
            return prev;
        }
        for (int i = 3; i < length; i++) {
            if (set.contains(nums[i]))
                continue;
            if (nums[i] > minHeap.peek()) {
                minHeap.poll();
                minHeap.offer(nums[i]);
                set.add(nums[i]);
            }
        }
        return minHeap.peek();
    }
}
