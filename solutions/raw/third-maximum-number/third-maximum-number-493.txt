// class Solution {
//     public int thirdMax(int[] nums) {
//         int firstmax = Integer.MIN_VALUE;
//         int secondmax = Integer.MIN_VALUE;
//         int thirdmax = Integer.MIN_VALUE;
//         for(int i = 0 ; i<nums.length;i++){
//             if(nums[i] > firstmax){
//                 thirdmax = secondmax;
//                 secondmax = firstmax;
//                 firstmax = nums[i];
//             }
//             else if(nums[i] > secondmax && nums[i] < firstmax){
//                 thirdmax = secondmax;
//                 secondmax = nums[i];
//             }
//             else if(nums[i] > thirdmax && nums[i] < secondmax){
//                thirdmax = nums[i];
//             }
//         }
//         int ans = (thirdmax== Integer.MIN_VALUE) ? (int)firstmax : (int)thirdmax;
//         return ans;
//     }
// }
class Solution {

    public int thirdMax(int[] nums) {
        long max = Long.MIN_VALUE;
        long secondMax = Long.MIN_VALUE;
        long thirdMax = Long.MIN_VALUE;
        for (int num : nums) {
            if (num > max) {
                thirdMax = secondMax;
                secondMax = max;
                max = num;
            } else if (num > secondMax && num < max) {
                thirdMax = secondMax;
                secondMax = num;
            } else if (num > thirdMax && num < secondMax) {
                thirdMax = num;
            }
        }
        int result = (thirdMax == Long.MIN_VALUE) ? (int) max : (int) thirdMax;
        return result;
    }
}
// class Solution {
//     public int thirdMax(int[] nums) {
//         Arrays.sort(nums);
//         // if(nums.length<3) return nums[nums.length-1];
//         HashSet<Integer> s = new HashSet<>();
//         for(int i=nums.length-1;i>=0;i--){
//             s.add(nums[i]);
//             if(s.size()==3) return nums[i];
//         }
//         return nums[nums.length-1];
//     }
// }
