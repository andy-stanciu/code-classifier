class Solution {

    public int thirdMax(int[] nums) {
        // time complexity: O(nlogn)
        // space complexity:O(1)
        // int n=nums.length;
        // Arrays.sort(nums);
        // int count=1;
        // for(int i=n-1;i>0;i--){
        //     if(nums[i]!=nums[i-1])
        //         count++;
        //     if(count==3)
        //         return nums[i-1];
        // }
        // return nums[n-1];
        // time complexity: O(n)
        // space complexity:O(1)
        Integer max1 = Integer.MIN_VALUE - 2;
        Integer max2 = Integer.MIN_VALUE - 2;
        Integer max3 = Integer.MIN_VALUE - 2;
        for (Integer n : nums) {
            if (n.equals(max1) || n.equals(max2) || n.equals(max3))
                continue;
            if (max1 == Integer.MIN_VALUE - 2 || n > max1) {
                max3 = max2;
                max2 = max1;
                max1 = n;
            } else if (max2 == Integer.MIN_VALUE - 2 || n > max2) {
                max3 = max2;
                max2 = n;
            } else if (max3 == Integer.MIN_VALUE - 2 || n > max3)
                max3 = n;
        }
        return max3 == Integer.MIN_VALUE - 2 ? max1 : max3;
    }
}
