class Solution {

    public int thirdMax(int[] nums) {
        // O(n)
        long first = Long.MIN_VALUE;
        long second = Long.MIN_VALUE;
        long third = Long.MIN_VALUE;
        int n = nums.length;
        int k = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == first || nums[i] == second || nums[i] == third)
                continue;
            if (nums[i] > first) {
                third = second;
                second = first;
                first = nums[i];
                k++;
            } else if (nums[i] > second) {
                third = second;
                second = nums[i];
                k++;
            } else if (nums[i] > third) {
                third = nums[i];
                k++;
            }
        }
        //System.out.println(k);
        if (k >= 3)
            return (int) third;
        return (int) first;
        // O(n log n)
        /*
        Arrays.sort(nums);
        Set<Integer> set = new LinkedHashSet();

        for(int i=nums.length-1;i>=0;i--){
            if(set.size()>=3)
                break;
            
            set.add(nums[i]);
        }

        int k=0,ans=-1;

       for(int x : set){
           k++;
           if(k==1)
                ans=x;
           
           if(k==3){
               ans=x;
               break;
           }
                
       }

       return ans;
 */
    }
}
