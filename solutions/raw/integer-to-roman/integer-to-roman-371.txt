class Solution {

    public String intToRoman(int num) {
        if (num == 0)
            return "0";
        Map<Integer, String> romanNumerals = new HashMap<>();
        romanNumerals.put(1, "I");
        romanNumerals.put(2, "II");
        romanNumerals.put(3, "III");
        romanNumerals.put(4, "IV");
        romanNumerals.put(5, "V");
        romanNumerals.put(6, "VI");
        romanNumerals.put(7, "VII");
        romanNumerals.put(8, "VIII");
        romanNumerals.put(9, "IX");
        romanNumerals.put(10, "X");
        romanNumerals.put(20, "XX");
        romanNumerals.put(30, "XXX");
        romanNumerals.put(40, "XL");
        romanNumerals.put(50, "L");
        romanNumerals.put(60, "LX");
        romanNumerals.put(70, "LXX");
        romanNumerals.put(80, "LXXX");
        romanNumerals.put(90, "XC");
        romanNumerals.put(100, "C");
        romanNumerals.put(200, "CC");
        romanNumerals.put(300, "CCC");
        romanNumerals.put(400, "CD");
        romanNumerals.put(500, "D");
        romanNumerals.put(600, "DC");
        romanNumerals.put(700, "DCC");
        romanNumerals.put(800, "DCCC");
        romanNumerals.put(900, "CM");
        romanNumerals.put(1000, "M");
        romanNumerals.put(2000, "MM");
        romanNumerals.put(3000, "MMM");
        StringBuilder sb = new StringBuilder();
        while (num > 0) {
            int count = countDigits(num);
            int cur = 1;
            while ((count - 1) > 0) {
                cur *= 10;
                count--;
            }
            int temp = num;
            int nu = temp / cur;
            sb.append(romanNumerals.get(nu * cur));
            num %= cur;
            cur = 1;
            count = 0;
        }
        return sb.toString();
    }

    private int countDigits(int number) {
        String strNumber = String.valueOf(number);
        int count = strNumber.length();
        return count;
    }
}
