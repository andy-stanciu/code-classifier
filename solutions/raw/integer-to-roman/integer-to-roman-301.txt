class Solution {

    public static String intToRoman(int num) {
        HashMap<Integer, String> romanMap = new HashMap<>();
        romanMap.put(1, "I");
        romanMap.put(5, "V");
        romanMap.put(10, "X");
        romanMap.put(50, "L");
        romanMap.put(100, "C");
        romanMap.put(500, "D");
        romanMap.put(1000, "M");
        StringBuilder res = new StringBuilder();
        String numberString = Integer.toString(num);
        int i = 0;
        while (i < numberString.length()) {
            res.append(getRomanFormOfNumber(numberString.charAt(i), numberString.length() - (i + 1), romanMap));
            i++;
        }
        return res.toString();
    }

    public static String getRomanFormOfNumber(char c, int mul, Map<Integer, String> table) {
        int number = Integer.parseInt(c + "");
        if (number == 9 || number == 4) {
            return table.get((int) Math.pow(10, mul)) + table.get((number + 1) * ((int) Math.pow(10, mul)));
        } else {
            if (number == 1 || number == 5)
                return table.get(number * (int) (Math.pow(10, mul)));
            if (number > 5 && number < 9) {
                return table.get(5 * ((int) Math.pow(10, mul))) + getRomanFormOfNumber(Integer.toString(number - 5).charAt(0), mul, table);
            }
            String s = "";
            for (int i = 0; i < number; i++) {
                s += table.get(((int) Math.pow(10, mul)));
            }
            return s;
        }
    }
}
