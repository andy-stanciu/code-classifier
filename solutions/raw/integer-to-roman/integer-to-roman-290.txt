class Pair {

    int intValue;

    String romanValue;

    public Pair(int intValue, String romnValue) {
        this.intValue = intValue;
        this.romanValue = romnValue;
    }
}

class Solution {

    /*
    public String intToRoman(int num) {

        Map<Integer, String> linkedHashMap = new LinkedHashMap<>();
		linkedHashMap.put(1000, "M");
		linkedHashMap.put(900, "CM");
		linkedHashMap.put(500, "D");
		linkedHashMap.put(400, "CD");
		linkedHashMap.put(100, "C");
		linkedHashMap.put(90, "XC");
		linkedHashMap.put(50, "L");
		linkedHashMap.put(40, "XL");
		linkedHashMap.put(10, "X");
		linkedHashMap.put(9, "IX");
		linkedHashMap.put(5, "V");
		linkedHashMap.put(4, "IV");
		linkedHashMap.put(1, "I");
		
		StringBuilder romanSb = new StringBuilder();
	
        Iterator<Map.Entry<Integer, String>> iterator = linkedHashMap.entrySet().iterator();
        while(num != 0 && iterator.hasNext()) {
            Map.Entry<Integer, String> entry = iterator.next();
            int key = entry.getKey();
            String value = entry.getValue();
            
            int q = num / key;
            num = num % key;
            for(int i = 1; i <= q; i++) {
                romanSb.append(value);
            }
        }
		
		return romanSb.toString();
    }
    */
    public String intToRoman(int num) {
        List<Pair> list = new ArrayList<>();
        list.add(new Pair(1000, "M"));
        list.add(new Pair(900, "CM"));
        list.add(new Pair(500, "D"));
        list.add(new Pair(400, "CD"));
        list.add(new Pair(100, "C"));
        list.add(new Pair(90, "XC"));
        list.add(new Pair(50, "L"));
        list.add(new Pair(40, "XL"));
        list.add(new Pair(10, "X"));
        list.add(new Pair(9, "IX"));
        list.add(new Pair(5, "V"));
        list.add(new Pair(4, "IV"));
        list.add(new Pair(1, "I"));
        StringBuilder romanSb = new StringBuilder();
        Iterator<Pair> iterator = list.iterator();
        while (num != 0 && iterator.hasNext()) {
            Pair pair = iterator.next();
            int intVal = pair.intValue;
            String romanVal = pair.romanValue;
            int q = num / intVal;
            num = num % intVal;
            for (int i = 1; i <= q; i++) {
                romanSb.append(romanVal);
            }
        }
        return romanSb.toString();
    }
}
