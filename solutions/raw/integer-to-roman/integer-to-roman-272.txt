class Solution {

    public String intToRoman(int num) {
        var map = new HashMap<Integer, String>();
        map.put(1, "I");
        map.put(2, "II");
        map.put(3, "III");
        map.put(4, "IV");
        map.put(5, "V");
        map.put(6, "VI");
        map.put(7, "VII");
        map.put(8, "VIII");
        map.put(9, "IX");
        map.put(10, "X");
        map.put(20, "XX");
        map.put(30, "XXX");
        map.put(40, "XL");
        map.put(50, "L");
        map.put(60, "LX");
        map.put(70, "LXX");
        map.put(80, "LXXX");
        map.put(90, "XC");
        map.put(100, "C");
        map.put(200, "CC");
        map.put(300, "CCC");
        map.put(400, "CD");
        map.put(500, "D");
        map.put(600, "DC");
        map.put(700, "DCC");
        map.put(800, "DCCC");
        map.put(900, "CM");
        map.put(1000, "M");
        var sb = new StringBuilder();
        getRoman(num, map, sb);
        return sb.toString();
    }

    public static void getRoman(int num, Map<Integer, String> map, StringBuilder sb) {
        if (map.containsKey(num)) {
            sb.append(map.get(num));
            return;
        }
        if (num > 1 && num < 100) {
            var temp = num / 10;
            sb.append(map.get(temp * 10));
            num = num % (temp * 10);
            getRoman(num, map, sb);
        }
        if (num > 100 && num < 1000) {
            var temp = num / 100;
            sb.append(map.get(temp * 100));
            num = num % (temp * 100);
            getRoman(num, map, sb);
        }
        if (num > 1000) {
            var temp = num / 1000;
            sb.append(map.get(1000).repeat(temp));
            num = num % (temp * 1000);
            getRoman(num, map, sb);
        }
    }
}
