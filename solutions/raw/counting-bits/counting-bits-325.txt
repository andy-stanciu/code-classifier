//// public class Solution {
//     public int[] countBits(int n) {
//         int[] ans = new int[n + 1]; // Corrected array size
//         HashMap<Integer, Integer> map = new HashMap<>();
//         ans[0] = 0;
//         for (int i = 1; i <= n; i++) {
//             int count = 0;
//             int originalI = i; // Store the original value of i
//             while (i > 0) { // Corrected condition
//                 count += i & 1;
//                 i >>= 1;
//                 if (map.containsKey(i)) {
//                     count += map.get(i);
//                     break;
//                 }
//             }
//             map.put(originalI, count); // Use originalI for caching
//             ans[originalI] = count;
//         }
//         return ans;
//     }
// }
public class Solution {

    public int[] countBits(int n) {
        int[] arr = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            // Use the formula: arr[i] = arr[i & (i - 1)] + 1
            arr[i] = arr[i & (i - 1)] + 1;
        }
        return arr;
    }
}
