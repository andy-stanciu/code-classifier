class Solution {

    public int[] res;

    // Reccursive Solution
    // public void counting(int n)
    // {
    //     if(n==0) return;
    //     int count =0;
    //     int temp = n;
    //     while(temp>0)
    //     {
    //         count +=temp&1;
    //         temp>>=1;
    //     }
    //     res[n]=count;
    //     counting(n-1);
    // }
    //DP-MEMOIZATION Solution
    // public void memoization(int n,int index){
    //  if(index==n+1) return;
    //     int count =0;
    //     int temp = index;
    //     while(temp>0)
    //     {   if(res[temp]!=0)
    //         {
    //         count +=res[temp];
    //         break;
    //         }
    //         else
    //         {
    //         count +=temp&1;
    //         temp>>=1;
    //         }
    //        // System.out.println(temp);
    //     }
    //     res[index]=count;
    //     memoization(n,index+1);
    // }
    public int[] countBits(int n) {
        res = new int[n + 1];
        //counting(n);
        //memoization(n,0);
        //TOP-DOWN Solution
        for (int i = 0; i <= n; i++) {
            int count = 0;
            int temp = i;
            while (temp > 0) {
                if (res[temp] != 0) {
                    count += res[temp];
                    break;
                } else {
                    count += temp & 1;
                    temp >>= 1;
                }
                // System.out.println(temp);
            }
            res[i] = count;
        }
        return res;
    }
}
