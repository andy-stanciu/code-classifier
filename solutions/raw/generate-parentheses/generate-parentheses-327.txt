class Solution {

    // generates all possible valid combinations of parentheses given a number \'n\'.
    public List<String> generateParenthesis(int n) {
        // Create a list to store the generated combinations.
        List<String> ans = new ArrayList<>();
        // Call the helper method to generate combinations.
        generate(0, n, 0, 0, ans, "");
        // Return the generated combinations.
        return ans;
    }

    // ecursively generates valid combinations of parentheses.
    private void generate(int index, int n, int lCount, int rCount, List<String> ans, String op) {
        // Base case: If either left or right count exceeds \'n\', return.
        if (lCount > n || rCount > n)
            return;
        // If both left and right counts reach \'n\', we\'ve formed a valid combination, so add it to the list.
        if (lCount == rCount && lCount == n) {
            ans.add(op);
        }
        // If we have more left parentheses than right ones, we can add a right parenthesis.
        if (lCount > rCount) {
            String op1 = op + ")";
            generate(index + 1, n, lCount, rCount + 1, ans, op1);
        }
        // Add a left parenthesis and continue generating combinations.
        String op2 = op + "(";
        generate(index + 1, n, lCount + 1, rCount, ans, op2);
    }
}
