class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList<String>();
        StringBuilder s = new StringBuilder();
        int left = n, right = n, present_left = 0, present_right = 0;
        bracket(s, left, right, present_left, present_right, ans);
        return ans;
    }

    public void bracket(StringBuilder s, int left, int right, int present_left, int present_right, List<String> ans) {
        if (left == 0 && right == 0)
            ans.add(s.toString());
        else {
            if (left > 0) {
                s.append("(");
                int present_size = s.length();
                bracket(s, left - 1, right, present_left + 1, present_right, ans);
                s.delete(present_size - 1, s.length());
            }
            if (present_left > present_right) {
                s.append(")");
                int present_size = s.length();
                bracket(s, left, right - 1, present_left, present_right + 1, ans);
                s.delete(present_size - 1, s.length());
            }
        }
    }
}
