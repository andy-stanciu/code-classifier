class Solution {

    List<String> res = new ArrayList<String>();

    // Backtracking function to generate valid combinations
    public void backTrack(int open, int close, int n, String s) {
        // Base case: If both open and close are equal to n, add the generated string to the result list
        if ((open == close) && (close == n)) {
            res.add(s);
        }
        // Recursive calls to generate valid combinations
        // Only add an open parenthesis if open count is less than n
        if (open < n) {
            backTrack(open + 1, close, n, s + "(");
        }
        // Only add a closing parenthesis if close count is less than open count
        if (close < open) {
            backTrack(open, close + 1, n, s + ")");
        }
    }

    public List<String> generateParenthesis(int n) {
        // Call the backtracking function to generate valid combinations
        backTrack(0, 0, n, "");
        return res;
    }
}
