// Best Approach : Recursion Backtracking
// Space Complexity : O(1)
// Author - Nikhil Sharma
// LinkedIn - https://www.linkedin.com/in/nikhil-sharma-41a287226/
// Twitter - https://twitter.com/Sharma_Nikh12
// Recursion Backtracking
class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<>();
        String ans = "";
        combinationsList(list, ans, 0, 0, n);
        return list;
    }

    static void combinationsList(List<String> list, String ans, int i, int j, int n) {
        int len = ans.length();
        // here if string is of even length then we got our combination like \'(())\'
        if (len == 2 * n) {
            list.add(ans);
            return;
        }
        //here taking edge cases taking 2 pointers for close and open brackets counts
        // like this is not valid \'(()\' or \'))\' or \'(())(\'
        if (i < n)
            combinationsList(list, ans + "(", i + 1, j, n);
        if (j < i)
            combinationsList(list, ans + ")", i, j + 1, n);
    }
}
