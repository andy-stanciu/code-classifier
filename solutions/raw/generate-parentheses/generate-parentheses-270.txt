class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> lst = new ArrayList<>();
        backTrack(lst, new StringBuilder(), 0, 0, n);
        return lst;
    }

    public void backTrack(List<String> lst, StringBuilder sb, int open, int closed, int n) {
        if (open == n && closed == n) {
            lst.add(sb.toString());
            return;
        }
        if (open < n) {
            sb.append("(");
            backTrack(lst, sb, open + 1, closed, n);
            sb.deleteCharAt(sb.length() - 1);
        }
        if (closed < open) {
            sb.append(")");
            backTrack(lst, sb, open, closed + 1, n);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}
