class Solution {

    List<String> ans;

    //
    StringBuilder temp;

    public List<String> generateParenthesis(int n) {
        ans = new ArrayList<>();
        temp = new StringBuilder();
        helper(temp, 0, 0, n);
        return ans;
    }

    public void helper(StringBuilder valid, int open, int close, int n) {
        if (valid.length() == 2 * n) {
            ans.add(valid.toString());
            return;
        }
        if (open < n) {
            helper(valid.append("("), open + 1, close, n);
            valid.deleteCharAt(valid.length() - 1);
        }
        if (close < open) {
            helper(valid.append(")"), open, close + 1, n);
            valid.deleteCharAt(valid.length() - 1);
        }
    }
}
