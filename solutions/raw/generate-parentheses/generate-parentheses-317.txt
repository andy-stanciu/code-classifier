class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList<>();
        //calling the helping fucntion which is solve
        solve(n, n, new StringBuilder(), ans);
        return ans;
    }

    private void solve(int l, int r, final StringBuilder sb, List<String> ans) {
        //defining the base condition
        if (l == 0 && r == 0) {
            ans.add(sb.toString());
            return;
        }
        //condition for open bracket
        if (l > 0) {
            sb.append("(");
            solve(l - 1, r, sb, ans);
            sb.deleteCharAt(sb.length() - 1);
        }
        //condition for close bracket
        if (l < r) {
            sb.append(")");
            solve(l, r - 1, sb, ans);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}
