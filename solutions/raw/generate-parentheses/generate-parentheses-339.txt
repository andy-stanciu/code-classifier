class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<>();
        helperForGenParen(list, n - 1, 1, new StringBuilder("("));
        return list;
    }

    private void helperForGenParen(List<String> list, int n, int open, StringBuilder sb) {
        if (n == 0) {
            list.add(sb.toString() + ")".repeat(Math.max(0, open)));
            return;
        }
        if (open == 0) {
            helperForGenParen(list, n - 1, open + 1, sb.append("("));
            sb.setLength(sb.length() - 1);
            return;
        }
        helperForGenParen(list, n - 1, open + 1, sb.append("("));
        sb.setLength(sb.length() - 1);
        helperForGenParen(list, n, open - 1, sb.append(")"));
        sb.setLength(sb.length() - 1);
    }
}
