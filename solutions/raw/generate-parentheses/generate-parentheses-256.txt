public class Solution {

    List<String> result = new ArrayList<>();

    public List<String> generateParenthesis(int n) {
        backtrack("", 0, 0, n);
        return result;
    }

    private void backtrack(String current, int openCount, int closedCount, int max) {
        if (current.length() == max * 2) {
            result.add(current);
            return;
        }
        if (openCount < max) {
            backtrack(current + "(", openCount + 1, closedCount, max);
        }
        if (closedCount < openCount) {
            backtrack(current + ")", openCount, closedCount + 1, max);
        }
    }
}
