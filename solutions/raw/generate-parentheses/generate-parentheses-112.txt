class Solution {

    public List<String> generateParenthesis(int n) {
        // Lista para armazenar todas as combina\xE7\xF5es v\xE1lidas
        List<String> result = new ArrayList<>();
        // Fun\xE7\xE3o recursiva que ir\xE1 gerar as combina\xE7\xF5es
        generateCombinations(result, "", 0, 0, n);
        return result;
    }

    // Fun\xE7\xE3o recursiva para gerar combina\xE7\xF5es de par\xEAnteses
    private void generateCombinations(List<String> result, String current, int open, int close, int max) {
        // Se o comprimento da string atual \xE9 2 * n, \xE9 uma combina\xE7\xE3o v\xE1lida
        if (current.length() == max * 2) {
            result.add(current);
            return;
        }
        // Se ainda podemos adicionar mais par\xEAnteses de abertura
        if (open < max) {
            generateCombinations(result, current + "(", open + 1, close, max);
        }
        // Se podemos adicionar mais par\xEAnteses de fechamento
        if (close < open) {
            generateCombinations(result, current + ")", open, close + 1, max);
        }
    }
}
