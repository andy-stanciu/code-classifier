class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> ans = new LinkedList<>();
        backTrack(ans, n, 0, 0, "");
        return ans;
    }

    public void backTrack(List<String> ans, int max, int open, int close, String currString) {
        // base case for adding to ans list
        if (currString.length() == max * 2) {
            ans.add(currString);
            return;
        }
        if (open < max) {
            backTrack(ans, max, open + 1, close, currString + "(");
        }
        if (close < open) {
            backTrack(ans, max, open, close + 1, currString + ")");
        }
    }
}
