class Solution {

    private void backtrack(int left, int right, String s, int n, List<String> resultList) {
        if (s.length() == 2 * n) {
            resultList.add(s);
            return;
        }
        if (left < n)
            backtrack(left + 1, right, s + "(", n, resultList);
        if (right < left)
            backtrack(left, right + 1, s + ")", n, resultList);
    }

    public List<String> generateParenthesis(int n) {
        List<String> resultList = new ArrayList<>();
        backtrack(0, 0, "", n, resultList);
        return resultList;
    }
}
