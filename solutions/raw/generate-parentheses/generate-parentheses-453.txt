class Solution {

    List<String> res = null;

    public List<String> generateParenthesis(int n) {
        res = new ArrayList<String>();
        StringBuilder builder = new StringBuilder();
        backtrack(n, 0, 0, builder);
        return res;
    }

    private void backtrack(int n, int close, int open, StringBuilder builder) {
        if (open == n && close == n) {
            res.add(builder.toString());
            return;
        }
        if (open < n) {
            builder.append("(");
            backtrack(n, close, open + 1, builder);
            builder.setLength(builder.length() - 1);
        }
        if (close < open) {
            builder.append(")");
            backtrack(n, close + 1, open, builder);
            builder.setLength(builder.length() - 1);
        }
    }
}
