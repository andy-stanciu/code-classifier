class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        generateParenthesisHelper("", 0, 0, n, result);
        return result;
    }

    private static void generateParenthesisHelper(String current, int open, int close, int n, List<String> result) {
        // Base case: if the combination is complete, add it to the result
        if (current.length() == 2 * n) {
            result.add(current);
            return;
        }
        // Recursive cases
        if (open < n) {
            // Add an open parenthesis if the count of open parentheses is less than n
            generateParenthesisHelper(current + "(", open + 1, close, n, result);
        }
        if (close < open) {
            // Add a close parenthesis if the count of close parentheses is less than the count of open parentheses
            generateParenthesisHelper(current + ")", open, close + 1, n, result);
        }
    }
}
