class Solution {

    public List<String> generateParenthesis(int n) {
        Stack<String> s = new Stack();
        List<String> ans = new ArrayList();
        findCombinations(ans, s, 0, 0, n);
        return ans;
    }

    void findCombinations(List<String> ans, Stack<String> s, int openBraces, int closeBraces, int n) {
        if (openBraces == n) {
            String combination = "";
            for (int i = s.size() - 1; i >= 0; i--) {
                combination = s.elementAt(i) + combination;
            }
            for (int i = 0; i < n - closeBraces; i++) {
                combination += ")";
            }
            ans.add(combination);
            return;
        }
        s.push("(");
        findCombinations(ans, s, openBraces + 1, closeBraces, n);
        s.pop();
        if (closeBraces < openBraces) {
            s.push(")");
            findCombinations(ans, s, openBraces, closeBraces + 1, n);
            s.pop();
        }
    }
}
