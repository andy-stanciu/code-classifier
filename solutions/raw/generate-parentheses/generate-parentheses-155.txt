class Solution {

    List<String> result = new ArrayList<>();

    public List<String> generateParenthesis(int n) {
        // 3 things to note
        // add open parenthesis - if( no of open parenthesis < n)
        // add close parenthesis - if( no of close parenthesis < no of open parenthesis)
        // stop, add in result list - no of open parenthesis == no of close parenthesis == n
        backtrack(0, 0, n, new StringBuilder());
        return result;
    }

    public void backtrack(int openParenthesisCount, int closeParenthesisCount, int total, StringBuilder curString) {
        if (openParenthesisCount == total && closeParenthesisCount == total) {
            result.add(curString.toString());
            return;
        }
        if (openParenthesisCount < total) {
            curString.append("(");
            backtrack(openParenthesisCount + 1, closeParenthesisCount, total, curString);
            curString.deleteCharAt(curString.length() - 1);
        }
        if (closeParenthesisCount < openParenthesisCount) {
            curString.append(")");
            backtrack(openParenthesisCount, closeParenthesisCount + 1, total, curString);
            curString.deleteCharAt(curString.length() - 1);
        }
    }
}
