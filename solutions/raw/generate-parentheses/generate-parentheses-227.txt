class Solution {

    //left ->  number of left paranthesis
    //right -> number of right paranthesis
    //n -> number of left paranthesis or number of right paranthesis should have
    public void recursion(String str, int left, int right, int n, List<String> list) {
        if (str.length() == 2 * n) {
            // i.e the string contains n left , n right paranthesis
            list.add(str);
            return;
        }
        if (left < n) {
            // if left paran is less than required then add one
            recursion(str + "(", left + 1, right, n, list);
        }
        //we generated left paran
        //it is time for right paran
        if (right < left) {
            // At any given point of time left should be generated first and then right
            // if we not reached the number of left paranthesis is generated add one
            recursion(str + ")", left, right + 1, n, list);
        }
        // we are doing the combinations of left and right here so the string length
        // will be 2n
    }

    public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<>();
        recursion("", 0, 0, n, list);
        return list;
    }
}
