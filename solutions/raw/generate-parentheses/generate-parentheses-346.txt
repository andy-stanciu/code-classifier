class Solution {

    public void generateVaildParentheses(List<String> parentheses, int n, int open, int close, StringBuilder str) {
        // Base Case
        // When all Open & Closed Parenthese are used
        if (open == n && close == n) {
            parentheses.add(str.toString());
            return;
        }
        // When we still have Open Parentheses to be used
        if (open < n) {
            generateVaildParentheses(parentheses, n, open + 1, close, str.append("("));
            str.deleteCharAt(str.length() - 1);
        }
        // When we still have Closed Parentheses to be used
        if (close < open) {
            generateVaildParentheses(parentheses, n, open, close + 1, str.append(")"));
            str.deleteCharAt(str.length() - 1);
        }
    }

    public List<String> generateParenthesis(int n) {
        List<String> parentheses = new ArrayList<>();
        generateVaildParentheses(parentheses, n, 0, 0, new StringBuilder());
        return parentheses;
    }
}
