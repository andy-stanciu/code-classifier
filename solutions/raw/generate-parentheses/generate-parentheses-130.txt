class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<>();
        backtrack(res, "(", n - 1, n);
        return res;
    }

    private static void backtrack(List<String> res, String combination, int open, int close) {
        if (open > 0) {
            backtrack(res, combination + "(", open - 1, close);
        }
        if (close > 0 && open < close) {
            backtrack(res, combination + ")", open, close - 1);
        }
        if (open == 0 && close == 0) {
            res.add(combination);
        }
    }
}
