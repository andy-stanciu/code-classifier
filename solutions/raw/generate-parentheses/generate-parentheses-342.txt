class Solution {

    public List<String> generateParenthesis(int n) {
        ArrayList<String> result = new ArrayList();
        String pattern = "";
        int pos1 = n, pos2 = n;
        getPattern(pos2, pos2, pattern, result);
        return result;
    }

    public String getPattern(int pos1, int pos2, String pattern, ArrayList<String> result) {
        if (pos1 == 0 && pos2 == 0) {
            result.add(pattern);
        }
        if (pos1 > pos2 || pos1 < 0 || pos2 < 0) {
            return pattern;
        }
        pattern += "(";
        getPattern(pos1 - 1, pos2, pattern, result);
        pattern = pattern.substring(0, pattern.length() - 1);
        pattern += ")";
        getPattern(pos1, pos2 - 1, pattern, result);
        pattern = pattern.substring(0, pattern.length() - 1);
        return pattern;
    }
}
