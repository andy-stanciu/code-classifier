class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList<>();
        backtrack(ans, "", 0, 0, n);
        return ans;
    }

    public void backtrack(List<String> ans, String currStr, int open, int close, int max) {
        if (currStr.length() == max * 2) {
            ans.add(currStr);
            return;
        }
        if (open < max)
            backtrack(ans, currStr + "(", open + 1, close, max);
        if (close < open)
            backtrack(ans, currStr + ")", open, close + 1, max);
    }
}
