class Solution {

    private List<String> res = null;

    private void dfs(int n, int openings, String s) {
        if (openings == 0 && n == 0) {
            res.add(s);
            return;
        }
        if (n == 0 || openings > n || openings < 0)
            return;
        //either can add an opening or a closing
        //let\'s try closing
        if (openings - 1 >= 0) {
            dfs(n - 1, openings - 1, s + ")");
        }
        //and opening
        if (openings + 1 <= n)
            dfs(n - 1, openings + 1, s + "(");
    }

    public List<String> generateParenthesis(int n) {
        res = new ArrayList<>();
        dfs(n * 2, 0, new String());
        return res;
    }
}
