class Solution {

    // BackTracking
    void gen(List<String> result, int n, StringBuilder sb, int open, int close) {
        if (sb.length() == 2 * n) {
            result.add(sb.toString());
            return;
        }
        if (open < n) {
            sb.append("(");
            gen(result, n, sb, open + 1, close);
            sb.deleteCharAt(sb.length() - 1);
        }
        if (close < open) {
            sb.append(")");
            gen(result, n, sb, open, close + 1);
            sb.deleteCharAt(sb.length() - 1);
        }
    }

    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        StringBuilder sb = new StringBuilder();
        int open = 0;
        int close = 0;
        gen(result, n, sb, open, close);
        return result;
    }
}
