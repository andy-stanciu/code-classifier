public class Solution {

    List<String> stack = new ArrayList<>();

    List<String> res = new ArrayList<>();

    public List<String> generateParenthesis(int n) {
        backtrack(0, 0, n);
        return res;
    }

    public void backtrack(int openN, int closeN, int n) {
        if (openN == n && closeN == n) {
            res.add(String.join("", stack));
            return;
        }
        if (openN < n) {
            stack.add("(");
            backtrack(openN + 1, closeN, n);
            stack.remove(stack.size() - 1);
        }
        if (closeN < openN) {
            stack.add(")");
            backtrack(openN, closeN + 1, n);
            stack.remove(stack.size() - 1);
        }
    }
}
