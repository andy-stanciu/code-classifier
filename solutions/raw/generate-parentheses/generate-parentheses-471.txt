class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> resList = new ArrayList<String>();
        recursionMethod("", resList, 0, 0, n);
        //backtrack("",0,0,resList,n);
        return resList;
    }

    public void recursionMethod(String s, List<String> res, int openCount, int closeCount, int n) {
        if ((openCount == n) && (closeCount == n)) {
            res.add(s);
        }
        if (openCount < n) {
            recursionMethod(s + "(", res, openCount + 1, closeCount, n);
        }
        if (closeCount < openCount) {
            recursionMethod(s + ")", res, openCount, closeCount + 1, n);
        }
    }
}
