class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<>();
        int open = 1;
        int close = 0;
        helper(n, open, close, res, "(");
        return res;
    }

    private void helper(int n, int open, int close, List<String> res, String asf) {
        if (open == n && open == close) {
            res.add(asf);
            return;
        }
        if (open < n) {
            helper(n, open + 1, close, res, asf + "(");
        }
        if (close < open) {
            helper(n, open, close + 1, res, asf + ")");
        }
    }
}
