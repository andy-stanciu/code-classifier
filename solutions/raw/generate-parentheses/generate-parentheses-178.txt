class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        recursion(n, 0, 0, "", result);
        return result;
    }

    public void recursion(int n, int l, int r, String current, List<String> result) {
        if (current.length() == n * 2) {
            result.add(current);
            return;
        }
        if (l < n) {
            recursion(n, l + 1, r, current + "(", result);
        }
        if (r < l) {
            recursion(n, l, r + 1, current + ")", result);
        }
    }
}
