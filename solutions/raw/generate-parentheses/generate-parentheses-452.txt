class Solution {

    List<String> temp;

    List<String> res;

    public List<String> generateParenthesis(int n) {
        temp = new ArrayList();
        res = new ArrayList();
        int openN = 0;
        int closedN = 0;
        backTrack(openN, closedN, n);
        return res;
    }

    public void backTrack(int openN, int closedN, int n) {
        if (openN == n && closedN == n) {
            StringBuilder sb = new StringBuilder();
            for (String word : temp) {
                sb.append(word);
            }
            res.add(sb.toString());
            return;
        }
        if (openN < n) {
            temp.add("(");
            backTrack(openN + 1, closedN, n);
            temp.remove(temp.size() - 1);
        }
        if (closedN < openN) {
            temp.add(")");
            backTrack(openN, closedN + 1, n);
            temp.remove(temp.size() - 1);
        }
    }
}
