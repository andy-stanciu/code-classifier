class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<>();
        recurse(res, 0, 0, "", n);
        return res;
    }

    public void recurse(List<String> results, int open, int closed, String str, int count) {
        if (str.length() == count * 2) {
            results.add(str);
            return;
        }
        if (open < count) {
            recurse(results, open + 1, closed, str + "(", count);
        }
        if (closed < open) {
            recurse(results, open, closed + 1, str + ")", count);
        }
    }
}
