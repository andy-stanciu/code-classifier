class Solution {

    public List<String> generateParenthesis(int n) {
        int open = 0, close = 0;
        ArrayList<String> str = new ArrayList<>();
        return paranthesis(str, "", n, 0, 0);
    }

    //open<=n ; close<=n; close<=open
    public static List<String> paranthesis(List<String> str, String s, int n, int open, int close) {
        if (open > n && close > open)
            return str;
        if (open == close && open == n)
            str.add(s);
        if (open < n && close < open) {
            paranthesis(str, s + "(", n, open + 1, close);
            paranthesis(str, s + ")", n, open, close + 1);
        } else if (open == n && close < open) {
            paranthesis(str, s + ")", n, open, close + 1);
        } else if (open == close && open < n) {
            paranthesis(str, s + "(", n, open + 1, close);
        }
        return str;
    }
}
