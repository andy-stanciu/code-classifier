class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList<>();
        dfs(new StringBuilder(), 0, 0, n, ans);
        return ans;
    }

    private void dfs(StringBuilder str, int open, int close, int size, List<String> ans) {
        if (str.length() == size * 2 && open == close) {
            ans.add(str.toString());
            return;
        }
        str.append("(");
        if (open < size)
            dfs(str, open + 1, close, size, ans);
        str.deleteCharAt(str.length() - 1);
        str.append(")");
        if (open > close)
            dfs(str, open, close + 1, size, ans);
        str.deleteCharAt(str.length() - 1);
    }
}
