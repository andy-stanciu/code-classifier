class Solution {

    public List<String> generateParenthesis(int n) {
        StringBuilder combination = new StringBuilder();
        List<String> combinations = new ArrayList<>();
        backtrack(n, 0, combination, combinations);
        return combinations;
    }

    private void backtrack(int leftN, int opens, StringBuilder combination, List<String> combinations) {
        if (leftN > 0) {
            combination.append("(");
            backtrack(leftN - 1, opens + 1, combination, combinations);
            combination.deleteCharAt(combination.length() - 1);
        }
        if (opens > 0) {
            combination.append(")");
            backtrack(leftN, opens - 1, combination, combinations);
            combination.deleteCharAt(combination.length() - 1);
        }
        if (leftN == 0 && opens == 0) {
            combinations.add(combination.toString());
        }
    }
}
// backtrack
// add ( or )
// on the beginning only ()
// there is maximum n of (
// () then adding ) is invalid
// when all ( are compensated then only ( we can add
// parameter with number of () left to add
// parameter of not compensated (
