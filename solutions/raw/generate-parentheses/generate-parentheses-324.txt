class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList<>();
        findAllCombinations(0, 0, new String(), ans, n);
        return ans;
    }

    public void findAllCombinations(int open, int close, String temp, List<String> ans, int n) {
        if (temp.length() == n * 2) {
            ans.add(new String(temp));
            return;
        }
        if (open < n) {
            findAllCombinations(open + 1, close, temp + "(", ans, n);
        }
        if (close < open) {
            findAllCombinations(open, close + 1, temp + ")", ans, n);
        }
    }
}
