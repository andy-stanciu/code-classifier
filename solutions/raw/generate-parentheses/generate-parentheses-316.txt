class Solution {

    private List<String> ans = new ArrayList<>();

    private int n;

    // 2 * n
    private int n2;

    public List<String> generateParenthesis(int n) {
        this.n = n;
        this.n2 = 2 * n;
        combination(new StringBuilder(), 0, 0);
        return ans;
    }

    //open is count of "(" and close is for ")"
    private void combination(StringBuilder sb, int open, int close) {
        if (sb.length() == n2) {
            // if combination is complete
            ans.add(sb.toString());
            return;
        }
        if (open < n) {
            sb.append("(");
            combination(sb, open + 1, close);
            //backtrack
            sb.deleteCharAt(sb.length() - 1);
        }
        // because close")" can be less or equal to open"("
        if (close < open) {
            sb.append(")");
            combination(sb, open, close + 1);
            // backtrack
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}
