class Solution {

    List<String> res = new ArrayList<>();

    public List<String> generateParenthesis(int n) {
        backTracking("", 0, 0, n);
        return res;
    }

    public void backTracking(String s, int cc, int co, int n) {
        //stop case when the parentheses = n*2 and add it to the List
        if (cc == n && co == n) {
            res.add(s);
            return;
        }
        // if the open count is less than n add "(" and increment open count +1
        if (co < n)
            backTracking(s + "(", cc, co + 1, n);
        //if the close count less than open count add ")" and increment close count +1
        if (cc < co)
            backTracking(s + ")", cc + 1, co, n);
    }
}
