class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<String>();
        generateParenthesisHelper(n, new StringBuilder(), result, 0, 0);
        return result;
    }

    void generateParenthesisHelper(int n, StringBuilder word, List<String> result, int open, int closed) {
        if (word.length() == 2 * n) {
            result.add(word.toString());
            return;
        }
        if (open < n) {
            word.append("(");
            generateParenthesisHelper(n, word, result, open + 1, closed);
            word.deleteCharAt(word.length() - 1);
        }
        if (closed < open) {
            word.append(")");
            generateParenthesisHelper(n, word, result, open, closed + 1);
            word.deleteCharAt(word.length() - 1);
        }
    }
}
