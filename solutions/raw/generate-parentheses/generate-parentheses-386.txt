class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> fin = new ArrayList<>();
        backtrack(fin, new StringBuilder(), 0, 0, n);
        return fin;
    }

    public void backtrack(List<String> fin, StringBuilder s, int open, int close, int max) {
        if (s.length() == max * 2) {
            fin.add(s.toString());
            return;
        }
        if (open < max)
            backtrack(fin, new StringBuilder(s).append("("), open + 1, close, max);
        if (close < open)
            backtrack(fin, new StringBuilder(s).append(")"), open, close + 1, max);
    }
}
