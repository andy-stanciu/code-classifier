class Solution {

    public List<String> generateParenthesis(int n) {
        // List to store the combinations
        List<String> result = new ArrayList<>();
        // Call the helper method
        generateCombination(n, n, "", result);
        return result;
    }

    // Helper method to generate combinations
    private void generateCombination(int leftCount, int rightCount, String current, List<String> result) {
        // Base case: If both left and right parentheses counts are zero, add the current combination to the result
        if (leftCount == 0 && rightCount == 0) {
            result.add(current);
            return;
        }
        // Recursive cases:
        // If there are remaining left parentheses, add a left parenthesis and recursively generate the combination
        if (leftCount > 0) {
            generateCombination(leftCount - 1, rightCount, current + "(", result);
        }
        // If there are more right parentheses than left parentheses, add a right parenthesis and recursively generate the combination
        if (rightCount > leftCount) {
            generateCombination(leftCount, rightCount - 1, current + ")", result);
        }
    }
}
