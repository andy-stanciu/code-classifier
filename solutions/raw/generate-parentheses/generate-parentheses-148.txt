public class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        backtrack(result, "", 0, 0, n);
        return result;
    }

    private void backtrack(List<String> result, String current, int open, int close, int n) {
        // Base case: if the current string is of length 2 * n, it\'s a valid combination
        if (current.length() == 2 * n) {
            result.add(current);
            return;
        }
        // Recursive case
        if (open < n) {
            // Add an opening parenthesis
            backtrack(result, current + "(", open + 1, close, n);
        }
        if (close < open) {
            // Add a closing parenthesis
            backtrack(result, current + ")", open, close + 1, n);
        }
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int n = 3;
        List<String> parentheses = solution.generateParenthesis(n);
        // Output: ["((()))","(()())","(())()","()(())","()()()"]
        System.out.println(parentheses);
    }
}
