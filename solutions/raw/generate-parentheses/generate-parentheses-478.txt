class Solution {

    private Stack<String> st = new Stack<>();

    private List<String> result = new ArrayList<>();

    public void backTracking(int open, int close, int n) {
        if ((open == close) && (close == n)) {
            result.add(st.stream().collect(Collectors.joining("")));
        }
        if (open < n) {
            st.push("(");
            backTracking(open + 1, close, n);
            st.pop();
        }
        if (close < open) {
            st.push(")");
            backTracking(open, close + 1, n);
            st.pop();
        }
    }

    public List<String> generateParenthesis(int n) {
        backTracking(0, 0, n);
        return result;
    }
}
