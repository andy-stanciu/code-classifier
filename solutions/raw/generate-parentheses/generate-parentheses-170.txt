class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<>();
        backtrack(res, new StringBuilder(), 0, 0, n);
        return res;
    }

    private void backtrack(List<String> res, StringBuilder currStr, int lC, int rC, int n) {
        if (currStr.length() == 2 * n) {
            res.add(currStr.toString());
            return;
        }
        if (lC < n) {
            currStr.append("(");
            backtrack(res, currStr, lC + 1, rC, n);
            currStr.deleteCharAt(currStr.length() - 1);
        }
        if (lC > rC) {
            currStr.append(")");
            backtrack(res, currStr, lC, rC + 1, n);
            currStr.deleteCharAt(currStr.length() - 1);
        }
    }
}
