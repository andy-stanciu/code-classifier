class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList();
        if (n == 0)
            return res;
        backtrack(n, "(", 1, 0, res);
        return res;
    }

    private void backtrack(int n, String tmp, int obc, int cbc, List<String> res) {
        if (n * 2 == tmp.length()) {
            res.add(tmp);
            return;
        }
        if (obc < n)
            backtrack(n, tmp + "(", obc + 1, cbc, res);
        if (cbc < obc)
            backtrack(n, tmp + ")", obc, cbc + 1, res);
    }
}
