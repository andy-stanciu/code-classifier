class Solution {

    public int findKthLargest(int[] nums, int k) {
        // Create a min-heap
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        // Iterate through all elements in the array
        for (int i = 0; i < nums.length; i++) {
            // Add element to the heap
            minHeap.add(nums[i]);
            // If the size of the heap exceeds k, remove the smallest element
            if (minHeap.size() > k) {
                // Removes the smallest element note: poll fnction is used in minheap to remove the top element of an heap tress in java
                minHeap.poll();
            }
        }
        // The root of the heap (smallest element in the heap) is the k-th largest element
        return minHeap.peek();
    }
}
