class Solution {

    //O( (K logK)+ (N-K)log(N-K) )
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue((a, b) -> {
            //we are creating a min heap, comparator customised sorting //DNS(Default Natural Sorting Order)
            return (int) a - (int) b;
        });
        for (//inserting to the min heap and the peek or the root always be samllest about both the left and right subtree
        //inserting to the min heap and the peek or the root always be samllest about both the left and right subtree
        //inserting to the min heap and the peek or the root always be samllest about both the left and right subtree
        int i = 0; i < k; i++) pq.offer(nums[i]);
        //root <= left subtree min && right subtree min
        /*
                    root
                /          \\
            Left ST    Right ST
                                     */
        //If we sort this it will be either Left Right Root or this Right Left Root (DESC)//3 size sliding window
        for (//traversing the array after kth index
        //traversing the array after kth index
        //traversing the array after kth index
        int i = k; i < nums.length; i++) {
            if (//only greater element than the peek(root of heap) affects the min heap, so only considering that case//while if we cosider the smaller element then it will not lead us to the kth largest Element
            nums[i] > pq.peek()) {
                //polling the root of the min heap, since it is no longer valid//heap has a self balancing mechanism, it balances it according to the type of heap, in this case its min heap
                pq.poll();
                //adding the node to the heap//heap balances itself
                pq.offer(nums[i]);
            }
        }
        //it returns the desired kth largest element in the Array
        return pq.peek();
    }
}
//Please do Upvote, it helps a lot
