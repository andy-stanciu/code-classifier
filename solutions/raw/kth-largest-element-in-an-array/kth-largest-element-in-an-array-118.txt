/**
 *    kth largest means we need to use a min heap
 *
 *    Time: O(n logk)
 *    space: O(logk)
 */
class Solution {

    public int findKthLargest(int[] nums, int k) {
        // init heap \'the smallest element first\'
        PriorityQueue<Integer> heap = new PriorityQueue<>((a, b) -> a - b);
        for (int n : nums) {
            heap.add(n);
            // keep k largest elements in the heap
            if (heap.size() > k) {
                heap.poll();
            }
        }
        return heap.poll();
    }
}
