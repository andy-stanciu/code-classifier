class Solution {

    public static int partition(int[] nums, int left, int right) {
        int p = nums[left];
        int i = left + 1;
        int j = right;
        while (i <= j) {
            if (nums[i] < p && nums[j] > p) {
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
            }
            if (nums[i] >= p) {
                i++;
            }
            if (nums[j] <= p) {
                j--;
            }
        }
        int temp = nums[j];
        nums[j] = p;
        nums[left] = temp;
        return j;
    }

    public int findKthLargest(int[] nums, int k) {
        int left = 0;
        int right = nums.length - 1;
        while (true) {
            int pivot_index = partition(nums, left, right);
            if (pivot_index == k - 1) {
                return nums[pivot_index];
            } else if (pivot_index > k - 1) {
                right = pivot_index - 1;
            } else {
                left = pivot_index + 1;
            }
        }
    }
}
