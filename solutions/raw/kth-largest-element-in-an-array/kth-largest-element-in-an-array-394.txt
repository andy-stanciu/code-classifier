// time complexity will be the O(logk)  , instead of O(logn) , which we get in sorting
class Solution {

    public int findKthLargest(int[] nums, int k) {
        // minHeap
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for (int x : nums) {
            pq.offer(x);
            if (pq.size() > k)
                pq.poll();
        }
        return pq.peek();
    }
}
