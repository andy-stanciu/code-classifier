class Solution {

    public int findKthLargest(int[] nums, int k) {
        //LOGIC ==> among k elements, the smallest element is the kth largest element
        //      ==>So make a minHeap of size k, so that smallest element in heap will be the kth largest
        //creating a min heap
        PriorityQueue<Integer> pq = new PriorityQueue();
        for (int i = 0; i < nums.length; i++) {
            //add the first "k" elements directly in the heap
            if (i < k) {
                pq.add(nums[i]);
                continue;
            }
            //gives the min element present in heap
            int currMin = pq.peek();
            if (nums[i] > currMin) {
                //currMin now cannot be the kth largest element so remove it
                pq.poll();
                pq.add(nums[i]);
            }
            //else if (nums[i] < currMin) ...then currMin will still remain the kth largest element
        }
        return pq.peek();
    }
}
