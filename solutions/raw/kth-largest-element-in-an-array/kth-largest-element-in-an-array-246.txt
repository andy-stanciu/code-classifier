class Solution {

    public int findKthLargest(int[] nums, int k) {
        int l = 0;
        int r = nums.length - 1;
        int pi = 0;
        while (true) {
            pi = partition(nums, l, r);
            if (pi == k - 1)
                break;
            else if (pi > k - 1)
                r = pi - 1;
            else
                l = pi + 1;
        }
        return nums[pi];
    }

    private int partition(int[] nums, int l, int r) {
        int pivot = nums[l];
        int i = l + 1;
        int j = r;
        while (i <= j) {
            if (nums[i] < pivot && nums[j] > pivot) {
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
                i++;
                j--;
            }
            if (nums[i] >= pivot)
                i++;
            if (nums[j] <= pivot)
                j--;
        }
        int temp = nums[l];
        nums[l] = nums[j];
        nums[j] = temp;
        return j;
    }
}
