class Solution {

    public int findKthLargest(int[] nums, int k) {
        //Creating the Priority Queue
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for (int i = 0; i < nums.length; i++) {
            if (i < k) {
                //adding elements until the Priority Queue Becomes of size K
                pq.add(nums[i]);
            } else {
                if (//Checking whether the element is greater than pq.peek()
                pq.peek() < nums[i]) {
                    //firstly remove the element which is at top
                    pq.remove();
                    //then adding the element
                    pq.add(nums[i]);
                }
            }
        }
        //The element which is at the peek would be our answer
        return pq.peek();
    }
}
