class Solution {

    public int findKthLargest(int[] nums, int k) {
        if (nums.length == 1)
            return nums[0];
        else {
            int j = 0;
            HashMap<Integer, Integer> count = new HashMap<>();
            TreeSet<Pair<Integer, Integer>> set = new TreeSet<>((a, b) -> b.getKey().compareTo(a.getKey()));
            for (int i = 0; i < nums.length; i++) {
                int n = count.getOrDefault(nums[i], 0);
                count.put(nums[i], n + 1);
                set.remove(new Pair<>(nums[i], n));
                set.add(new Pair<>(nums[i], n + 1));
            }
            for (Pair<Integer, Integer> p : set) {
                int number = p.getKey();
                int freq = p.getValue();
                for (int i = 0; i < freq; i++) {
                    j += 1;
                    if (j == k) {
                        return number;
                    }
                }
            }
        }
        return -1;
    }
}
