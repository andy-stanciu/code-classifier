class Solution {

    public int findKthLargest(int[] nums, int k) {
        //if(nums.length==1) return nums[0];
        int left = 0, right = nums.length - 1, kth;
        while (true) {
            int idx = partition(nums, left, right);
            if (idx == k - 1) {
                kth = nums[idx];
                break;
            }
            if (idx < k - 1)
                left = idx + 1;
            else
                right = idx - 1;
        }
        return kth;
    }

    static int partition(int[] nums, int left, int right) {
        int pivot = nums[left];
        int l = left + 1, r = right;
        while (l <= r) {
            if (nums[l] < pivot && nums[r] > pivot) {
                int temp = nums[l];
                nums[l] = nums[r];
                nums[r] = temp;
                l++;
                r--;
            }
            if (nums[l] >= pivot)
                l++;
            if (nums[r] <= pivot)
                r--;
        }
        int temp = nums[left];
        nums[left] = nums[r];
        nums[r] = temp;
        return r;
    }
}
