class Solution {

    public int findKthLargest(int[] nums, int k) {
        //By default Priority queue is min Heap
        Queue<Integer> maxHeap = new PriorityQueue<>();
        int answer = 0;
        for (Integer e : nums) {
            //Adding negative to make it max Heap, now top element will always be the maximum
            maxHeap.add(-e);
        }
        int i = 1;
        while (i < k) {
            //popping the max element for k-1 times
            maxHeap.poll();
            i++;
        }
        //popping the max element, kth time;
        return -1 * maxHeap.poll();
    }
}
