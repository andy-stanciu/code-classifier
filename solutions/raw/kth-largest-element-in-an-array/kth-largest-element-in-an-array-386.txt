class Solution {

    public int findKthLargest(int[] nums, int k) {
        int index = nums.length - k;
        mergeSort(nums, 0, nums.length - 1);
        return nums[index];
    }

    public void mergeSort(int[] nums, int start, int end) {
        if (start < end) {
            int mid = start + (end - start) / 2;
            mergeSort(nums, start, mid);
            mergeSort(nums, mid + 1, end);
            merge(nums, start, mid, end);
        } else {
            return;
        }
    }

    public void merge(int[] nums, int start, int mid, int end) {
        int[] mergeArr = new int[end - start + 1];
        int idx1 = start;
        int idx2 = mid + 1;
        int x = 0;
        while (idx1 <= mid && idx2 <= end) {
            if (nums[idx1] <= nums[idx2]) {
                mergeArr[x] = nums[idx1];
                x++;
                idx1++;
            } else {
                mergeArr[x] = nums[idx2];
                x++;
                idx2++;
            }
        }
        while (idx1 <= mid) {
            mergeArr[x] = nums[idx1];
            x++;
            idx1++;
        }
        while (idx2 <= end) {
            mergeArr[x] = nums[idx2];
            x++;
            idx2++;
        }
        for (int i = 0, j = start; i < mergeArr.length; i++, j++) {
            nums[j] = mergeArr[i];
        }
    }
}
