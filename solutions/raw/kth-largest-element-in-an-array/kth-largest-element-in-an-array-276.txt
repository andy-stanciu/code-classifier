public class Solution {

    public int findKthLargest(int[] nums, int k) {
        // Create a min-heap using a PriorityQueue
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        // Add the first k elements to the min-heap
        for (int i = 0; i < k; i++) {
            minHeap.add(nums[i]);
        }
        // Iterate through the remaining elements
        for (int i = k; i < nums.length; i++) {
            // If the current element is greater than the smallest element in the heap
            if (nums[i] > minHeap.peek()) {
                // Remove the smallest element and add the current element
                minHeap.poll();
                minHeap.add(nums[i]);
            }
        }
        // The kth largest element is the top of the min-heap
        return minHeap.peek();
    }
}
