class Solution {

    public int findKthLargest(int[] nums, int k) {
        List<Integer> list = new ArrayList<>();
        for (int num : nums) {
            list.add(num);
        }
        return quickselect(list, k);
    }

    // Time complexity: O(nlogK)
    // Space : log(k)
    int pq(int[] nums, int k) {
        PriorityQueue<Integer> q = new PriorityQueue<>();
        for (int num : nums) {
            q.offer(num);
            if (q.size() > k) {
                q.poll();
            }
        }
        return q.peek();
    }

    int quickselect(List<Integer> nums, int k) {
        int pIndex = new Random().nextInt(nums.size());
        int pivot = nums.get(pIndex);
        List<Integer> left = new ArrayList<>();
        List<Integer> mid = new ArrayList<>();
        List<Integer> right = new ArrayList<>();
        for (int num : nums) {
            if (num > pivot) {
                left.add(num);
            } else if (num < pivot) {
                right.add(num);
            } else {
                mid.add(num);
            }
        }
        if (k <= left.size()) {
            return quickselect(left, k);
        }
        if (left.size() + mid.size() < k) {
            return quickselect(right, k - left.size() - mid.size());
        }
        return pivot;
    }
}
