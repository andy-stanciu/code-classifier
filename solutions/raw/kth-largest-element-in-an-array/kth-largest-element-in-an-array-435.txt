class Solution {

    //1) using sorting
    public int findKthLargest(int[] nums, int k) {
        Arrays.sort(nums);
        return nums[nums.length - k];
    }
    //2) using minHeap
    // public int findKthLargest(int[] nums, int k) {
    // Create a Min-Heap with a size of K
    //  PriorityQueue<Integer> kthLargest = new PriorityQueue<>(k);
    // for (int num : nums) {
    //    kthLargest.offer(num);
    //
    // If the heap size exceeds K, remove the smallest element
    //   if (kthLargest.size() > k) {
    //       kthLargest.poll();
    //   }
    //   }
    // The root of the heap is the Kth largest element
    //   return kthLargest.peek();
    //}
}
