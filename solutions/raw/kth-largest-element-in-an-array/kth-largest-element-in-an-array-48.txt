class Solution {

    public int findKthLargest(int[] nums, int k) {
        int n = nums.length - k;
        return getKthSmallestElement(nums, n + 1, 0, nums.length - 1);
        /*
        n+1 : coz not 0 based index. 
        [3,2,1,5,6,4] becomes [1,2,3,4,5,6] after sorting. 
        s0 now we need 5 as ans (coz k=2). so we pass n+1
        ex :
        int n = 6-2 = 4. but here we need 5th elt, coz that is 2nd largest. 
        
        **also code is for smallest, depensind on what we pass as k, 
        we can use same code for findign largest 
        */
    }

    private int getKthSmallestElement(int[] arr, int k, int low, int high) {
        int pivotPoint = getPivotPoint(arr, low, high);
        if (pivotPoint == k - 1)
            return arr[pivotPoint];
        else if (pivotPoint < k - 1)
            return getKthSmallestElement(arr, k, pivotPoint + 1, high);
        else
            return getKthSmallestElement(arr, k, low, pivotPoint - 1);
    }

    private int getPivotPoint(int[] arr, int low, int high) {
        int pivotElement = arr[high];
        int pivotPoint = low;
        for (int i = low; i <= high; i++) {
            if (arr[i] < pivotElement) {
                int tmp = arr[i];
                arr[i] = arr[pivotPoint];
                arr[pivotPoint] = tmp;
                pivotPoint++;
            }
        }
        int tmp = arr[pivotPoint];
        arr[pivotPoint] = arr[high];
        arr[high] = tmp;
        return pivotPoint;
    }
}
