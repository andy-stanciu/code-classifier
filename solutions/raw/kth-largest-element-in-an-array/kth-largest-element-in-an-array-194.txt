class Solution {

    public int findKthLargest(int[] nums, int k) {
        // creating an array to store the frequncy of each element
        // possible as given in constraints
        int[] count = new int[20001];
        int largest = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        // incrementing the frequency for each number in input array
        // m + 10000 as the frequncy record for positive will after
        // 10000 as the first 10000 will be for negative values
        for (int m : nums) {
            count[m + 10000]++;
            largest = Math.max(m + 10000, largest);
            min = Math.min(m + 10000, min);
        }
        // iterating over the freqs from back as we want to find the
        // largest one not the smallest
        for (int i = largest; i >= min; i--) {
            // removing the frequncy of each from k
            k = k - count[i];
            // once k will reach 0 or less than 0
            // we found the element
            if (k <= 0) {
                return i - 10000;
            }
        }
        return -1;
    }
}
