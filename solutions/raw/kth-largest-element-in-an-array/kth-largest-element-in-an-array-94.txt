class Solution {

    public int findKthLargest(int[] nums, int k) {
        //QuickSelect is selection algorithm used to store Kth smallest
        //element in the unordered list
        //It uses divide and conquer method
        //it recurs the only part which has kth smallest element in O(n) time
        //it divides space using parttion function and then recursivly sort
        //element until finds partition
        int start = 0, end = nums.length - 1, index = nums.length - k;
        while (start < end) {
            int pivot = partition(nums, start, end);
            if (pivot < index)
                start = pivot + 1;
            else if (pivot > index)
                end = pivot - 1;
            else
                return nums[pivot];
        }
        return nums[start];
    }

    private int partition(int[] nums, int start, int end) {
        int pivot = start, temp;
        while (start < end) {
            while (start <= end && nums[start] <= nums[pivot]) start++;
            while (start <= end && nums[end] > nums[pivot]) end--;
            if (start > end)
                break;
            temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
        }
        //pivot was set to start at the beginning but we moved the pointers
        //start and end inwards to sort the elements where everything on
        //left is smaller and right is bigger
        //so we swap end pivot and return end
        temp = nums[end];
        nums[end] = nums[pivot];
        nums[pivot] = temp;
        return end;
    }
}
