class Solution {

    public int findKthLargest(int[] nums, int k) {
        //Remove k-1 elements from max heap
        // PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b.compareTo(a));
        // for(int num: nums){
        //     pq.add(num);
        // }
        // int ans=k-1;
        // while(ans>0){
        //     pq.poll();
        //     ans--;
        // }
        // return pq.peek();
        //Create min heap and maintain size a k, the top element at end of iteration is kth largest
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for (int num : nums) {
            minHeap.add(num);
            if (minHeap.size() > k) {
                minHeap.poll();
            }
        }
        return minHeap.peek();
    }
}
