/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int countNodes(TreeNode root) {
        // If the root is null, then there are no nodes in the tree
        if (root == null) {
            return 0;
        }
        // Get the heights of the left and right subtrees
        int leftHeight = getLeftHeight(root);
        int rightHeight = getRightHeight(root);
        // If the left and right subtrees have the same height, then the tree is a perfect binary tree,
        // and the total number of nodes in the tree can be calculated using the formula (2^h - 1), where h is the height of the tree
        if (leftHeight == rightHeight) {
            return ((2 << leftHeight) - 1);
        } else // If the left and right subtrees do not have the same height, then the tree is not a perfect binary tree,
        // and we need to recursively count the nodes in the left and right subtrees and add 1 for the root node
        {
            return countNodes(root.left) + countNodes(root.right) + 1;
        }
    }

    // Helper function to get the height of the left subtree
    public int getLeftHeight(TreeNode root) {
        int height = 0;
        // Traverse down the left side of the tree and count the number of levels
        while (root.left != null) {
            height++;
            root = root.left;
        }
        return height;
    }

    // Helper function to get the height of the right subtree
    public int getRightHeight(TreeNode root) {
        int height = 0;
        // Traverse down the right side of the tree and count the number of levels
        while (root.right != null) {
            height++;
            root = root.right;
        }
        return height;
    }
}
