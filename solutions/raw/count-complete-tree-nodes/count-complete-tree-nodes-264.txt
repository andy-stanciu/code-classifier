class Solution {

    private static final int NULL_TREE_HEIGHT_INDICATOR = -1;

    public int countNodes(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int leftSubtreeHeight = height(root.left, 0);
        int rightSubtreeHeight = height(root.right, 0);
        if (leftSubtreeHeight == rightSubtreeHeight) {
            return countNodes(root.right) + perfectSubtreeNodeCountWithParent(leftSubtreeHeight);
        }
        return countNodes(root.left) + perfectSubtreeNodeCountWithParent(rightSubtreeHeight);
    }

    private int perfectSubtreeNodeCountWithParent(int subtreeHeight) {
        if (subtreeHeight == NULL_TREE_HEIGHT_INDICATOR) {
            return 1;
        }
        return 1 << (subtreeHeight + 1);
    }

    private int height(TreeNode node, int level) {
        if (node == null) {
            return NULL_TREE_HEIGHT_INDICATOR;
        }
        if (node.left == null && node.right == null) {
            return level;
        }
        return height(node.left, level + 1);
    }
}
