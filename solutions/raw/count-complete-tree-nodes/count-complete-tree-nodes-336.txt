/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int countHelper(TreeNode root, int level, int currLevel, int currCount) {
        if (level == currLevel && (root.left != null || root.right != null)) {
            return root.right != null ? (currCount * 2) + 1 : currCount * 2;
        }
        if (level == currLevel) {
            return -1;
        }
        int rightCount = countHelper(root.right, level, currLevel + 1, (currCount * 2) + 1);
        if (rightCount == -1) {
            return countHelper(root.left, level, currLevel + 1, currCount * 2);
        } else {
            return rightCount;
        }
    }

    public int countNodes(TreeNode root) {
        if (root == null) {
            return 0;
        }
        TreeNode temp = root;
        int leftCount = 0;
        int rightCount = 0;
        while (temp != null) {
            temp = temp.left;
            leftCount++;
        }
        temp = root;
        while (temp != null) {
            temp = temp.right;
            rightCount++;
        }
        if (leftCount == rightCount) {
            return (int) Math.pow(2, leftCount) - 1;
        }
        return countHelper(root, leftCount - 1, 1, 1);
    }
}
