/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int countNodes(TreeNode root) {
        if (root == null)
            return 0;
        // Function to calculate the height of the tree
        int leftHeight = height(root.left);
        int rightHeight = height(root.right);
        if (leftHeight == rightHeight)
            // For the left subtree, we can use the formula for a perfect binary tree: 2^height - 1
            // For the right subtree, we recursively count its nodes
            return (1 << leftHeight) + countNodes(root.right);
        else
            // For the right subtree, we can use the formula for a perfect binary tree: 2^height - 1
            // For the left subtree, we recursively count its nodes
            return (1 << rightHeight) + countNodes(root.left);
    }

    // Function to calculate the height of the left subtree
    public int height(TreeNode node) {
        if (node == null)
            return 0;
        return 1 + height(node.left);
    }
}
