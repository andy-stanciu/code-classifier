/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//brute force
/*class Solution {
    public int countNodes(TreeNode root) {
        ArrayList<Integer>list=new ArrayList<>();
        inOrder(root,list);
        return list.size();
        
    }
    public void inOrder(TreeNode root,ArrayList<Integer>list){
        if(root==null){
            return;
        }
        inOrder(root.left,list);
        list.add(root.val);
        inOrder(root.right,list);

    }
}*/
// optimized
class Solution {

    public int countNodes(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int lh = getLeft(root);
        int rh = getRight(root);
        if (lh == rh) {
            return (int) Math.pow(2, lh) - 1;
        }
        return 1 + countNodes(root.left) + countNodes(root.right);
    }

    public int getLeft(TreeNode root) {
        int height = 0;
        while (root != null) {
            height++;
            root = root.left;
        }
        return height;
    }

    public int getRight(TreeNode root) {
        int height = 0;
        while (root != null) {
            height++;
            root = root.right;
        }
        return height;
    }
}
