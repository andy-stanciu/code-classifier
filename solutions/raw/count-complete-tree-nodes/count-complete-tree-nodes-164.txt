/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int countNodes(TreeNode root) {
        // if root == null
        // 0 no.of nodes
        if (root == null)
            return 0;
        // find Left & Right Height
        int leftHeight = findLeftHeight(root);
        int rightHeight = findRightHeight(root);
        // if LeftHeight == RightHeight
        if (leftHeight == rightHeight) {
            return (2 << leftHeight) - 1;
        } else // LeftHeight != RightHeight
        {
            return (1 + countNodes(root.left) + countNodes(root.right));
        }
    }

    int findLeftHeight(TreeNode root) {
        int count = 0;
        while (root.left != null) {
            count++;
            root = root.left;
        }
        return count;
    }

    int findRightHeight(TreeNode root) {
        int count = 0;
        while (root.right != null) {
            count++;
            root = root.right;
        }
        return count;
    }
}
