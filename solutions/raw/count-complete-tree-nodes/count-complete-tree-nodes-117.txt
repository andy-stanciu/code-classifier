/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int countNodes(TreeNode root) {
        //check if the left and right depths are same
        //if yes, all levels are filled from the node
        //if no, explore left and right of that node
        //get their counts and return 1+lc+rc
        if (root == null)
            return 0;
        TreeNode left = root.left;
        TreeNode right = root.right;
        int lc = 0, rc = 0;
        //count left depth
        while (left != null) {
            left = left.left;
            lc++;
        }
        //count right depth
        while (right != null) {
            right = right.right;
            rc++;
        }
        //if both are equal, all levels are filled
        if (lc == rc) {
            return (int) Math.pow(2, lc + 1) - 1;
        }
        //if not, explore left and right and return 1+rc+lc
        return 1 + countNodes(root.left) + countNodes(root.right);
    }
}
