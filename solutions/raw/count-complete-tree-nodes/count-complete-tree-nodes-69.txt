class Solution {

    // since per iteration we remove half of the problem, per iteration we have complexity O log(N)
    // since per iteration we perform 2 operations of O log(N) , the overall complexity is O log(N) * 2log(N)
    // that can be simplified to O log(N) * log(N)
    public int countNodes(TreeNode root) {
        if (root == null)
            return 0;
        // log(N)
        int dLeft = getDepthLeft(root);
        // log(N)
        int dRight = getDepthRight(root);
        //if the depths are the same, this is a complete tree with all last levels filled.
        // We can calculate directly without the need to visit all nodes
        // could also do: Math.pow(2,dLeft)-1;
        if (dLeft == dRight)
            return (1 << dLeft) - 1;
        //otherwise the last level is causing inconsistencies. We must drill down to remove it
        return 1 + countNodes(root.left) + countNodes(root.right);
        //either right or left will have a complete tree with all last levels filled.
    }

    public int getDepthLeft(TreeNode node) {
        if (node == null)
            return 0;
        return 1 + getDepthLeft(node.left);
    }

    public int getDepthRight(TreeNode node) {
        if (node == null)
            return 0;
        return 1 + getDepthRight(node.right);
    }
}
