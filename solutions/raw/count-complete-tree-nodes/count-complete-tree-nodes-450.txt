/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    /**
     * 20240324
     * try -2
     * after read solution
     *
     * @param root
     * @return
     */
    public int countNodes(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int leftHeight = countLeftHeight(root);
        if (leftHeight == countRightHeight(root)) {
            // Complete binary tree. A k level complete binary tree has (2^k - 1) nodes.
            // (1 << n) == 2^n
            int ret = (1 << leftHeight) - 1;
            return ret;
        }
        // not complete binary tree
        return 1 + countNodes(root.left) + countNodes(root.right);
    }

    public int countLeftHeight(TreeNode root) {
        if (root == null) {
            return 0;
        }
        return 1 + countLeftHeight(root.left);
    }

    public int countRightHeight(TreeNode root) {
        if (root == null) {
            return 0;
        }
        return 1 + countRightHeight(root.right);
    }
}
