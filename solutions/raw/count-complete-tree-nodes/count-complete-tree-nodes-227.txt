/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int count = 0;

    public int countNodes(TreeNode root) {
        //check if root is null
        if (root == null)
            return 0;
        //get the height of all left nodes
        int lh = countleftheight(root);
        //get height of all right nodes
        int rh = countrightheight(root);
        //if leftheight ==
        return lh == rh ? (1 << rh) - 1 : 1 + countNodes(root.left) + countNodes(root.right);
        //rightheight then return 2^lh-1 else return no. of nodes on left + no. of nodes on right + 1(root node)
    }

    public int countleftheight(TreeNode root) {
        int lh = 0;
        while (root != null) {
            root = root.left;
            lh++;
        }
        return lh;
    }

    public int countrightheight(TreeNode root) {
        int rh = 0;
        while (root != null) {
            root = root.right;
            rh++;
        }
        return rh;
    }
}
