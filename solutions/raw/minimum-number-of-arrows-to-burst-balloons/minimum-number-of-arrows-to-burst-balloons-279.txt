class Solution {

    public int findMinArrowShots(int[][] points) {
        // If there is only one balloon return 1
        if (points.length == 1) {
            return 1;
        }
        Arrays.sort(points, (int[] point1, int[] point2) -> Integer.compare(point1[0], point2[0]));
        int ctrArrows = 0;
        for (int i = 1; i < points.length; i++) {
            int end = points[i - 1][1];
            while (i < points.length && end >= points[i][0]) {
                // update end to ensure only overlapping balloon intervals are considered
                end = Math.min(end, points[i][1]);
                i++;
            }
            // Two arrows if the last balloon is not overlapping, else one arrow
            ctrArrows += i == points.length - 1 ? 2 : 1;
        }
        return ctrArrows;
    }
}
