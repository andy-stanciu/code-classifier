/*class Solution {
    public int findMinArrowShots(int[][] points) {
         // Sort the points array based on the start points of each interval
        Arrays.sort(points, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                return Integer.compare(a[0], b[0]);
            }
        });

        int n = points.length;

        int[] prev = points[0];
        int count = 1;
        for(int i=1;i<n;i++){
            int currentStartPoint = points[i][0];
            int currentEndPoint = points[i][1];

            int prevStartPoint = prev[0];
            int prevEndPoint = prev[1];
            
            //no overlap condition
            if(currentStartPoint>prevEndPoint){
                count++;
                prev=points[i];
            }
            //overlap condition
            else{
                 prev[0] = Math.max(currentStartPoint,prevStartPoint);
                 prev[1] = Math.min(currentEndPoint,prevEndPoint);
            }
        }
        return count;
    }
}
*/
class Solution {

    public int findMinArrowShots(int[][] points) {
        if (points.length == 0)
            return 0;
        // Sort by end points
        Arrays.sort(points, Comparator.comparingInt(a -> a[1]));
        // Initialize arrows count
        int arrows = 1;
        // End point of the first balloon
        int end = points[0][1];
        for (int i = 1; i < points.length; i++) {
            if (points[i][0] > end) {
                // No overlap, shoot a new arrow
                arrows++;
                // Update end point
                end = points[i][1];
            }
            // If overlap, do nothing as the arrow can still burst the balloons
        }
        return arrows;
    }
}
