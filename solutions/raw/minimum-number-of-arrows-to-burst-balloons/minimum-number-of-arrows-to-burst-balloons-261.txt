class Solution {

    public int findMinArrowShots(int[][] points) {
        Arrays.sort(points, (a, b) -> Integer.compare(a[1], b[1]));
        int n = points.length;
        //Keeping an end pointer to track which baloons to combine in a line and which to burst separately
        int prevEnd = points[0][1];
        // we are taking count as 1 because minimum 1 arrow is needed to burst all of the baloons
        int count = 1;
        //loop starting from one as we have already taken the end point of first baloon in line 7
        for (int i = 1; i < n; i++) {
            int currStart = points[i][0];
            // if current baloon start point is greater than previous baloon end point it means that they are not overlapping
            if (currStart > prevEnd) {
                //separate arrow will be needed to burst them(count++)
                count++;
                //now end pointer points to current baloon diameter end
                prevEnd = points[i][1];
            }
        }
        //No of arrows to burst all of the baloons
        return count;
    }
}
