public class Solution {

    public int findMinArrowShots(int[][] points) {
        // If there are no balloons, no arrows are needed
        if (points.length == 0)
            return 0;
        // Sort the balloons based on their xstart coordinates
        Arrays.sort(points, (a, b) -> Integer.compare(a[0], b[0]));
        // Initialize the number of arrows needed and the end point of the first balloon
        int arrows = 1;
        int end = points[0][1];
        // Iterate through the sorted balloons to find the minimum number of arrows required
        for (int i = 1; i < points.length; i++) {
            // If the current balloon\'s start point is greater than the previous end point, a new arrow is needed
            if (points[i][0] > end) {
                arrows++;
                end = points[i][1];
            } else {
                // If there is an overlap, update the end point to minimize arrow usage
                end = Math.min(end, points[i][1]);
            }
        }
        // Return the minimum number of arrows required to burst all balloons
        return arrows;
    }
}
