class Solution {

    public int findMinArrowShots(int[][] points) {
        if (points == null || points.length == 0) {
            return 0;
        }
        // Sort balloons based on their end points (xend)
        Arrays.sort(points, (a, b) -> Integer.compare(a[1], b[1]));
        int arrows = 1;
        int end = points[0][1];
        for (int i = 1; i < points.length; i++) {
            int start = points[i][0];
            int end_point = points[i][1];
            // If the current balloon\'s start point is beyond the end point of the current arrow,
            // we need to shoot a new arrow and update the end point
            if (start > end) {
                arrows++;
                end = end_point;
            }
        }
        return arrows;
    }
}

public class Main {

    public static void main(String[] args) {
        Solution solution = new Solution();
        // Test cases
        int[][] points1 = { { 10, 16 }, { 2, 8 }, { 1, 6 }, { 7, 12 } };
        // Output: 2
        System.out.println(solution.findMinArrowShots(points1));
        int[][] points2 = { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 } };
        // Output: 4
        System.out.println(solution.findMinArrowShots(points2));
        int[][] points3 = { { 1, 2 }, { 2, 3 }, { 3, 4 }, { 4, 5 } };
        // Output: 2
        System.out.println(solution.findMinArrowShots(points3));
    }
}
