class Solution {

    public int findMinArrowShots(int[][] points) {
        if (points == null || points.length == 0) {
            return 0;
        }
        // Sort the intervals based on end points
        Arrays.sort(points, (a, b) -> Integer.compare(a[1], b[1]));
        // At least one arrow is needed
        int arrows = 1;
        int end = points[0][1];
        for (int i = 1; i < points.length; i++) {
            if (points[i][0] > end) {
                // No overlap, need a new arrow
                arrows++;
                end = points[i][1];
            }
            // Otherwise, the current balloon overlaps with the previous one, continue
        }
        return arrows;
    }
}
