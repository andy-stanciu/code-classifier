class Solution {

    public int findMinArrowShots(int[][] points) {
        Arrays.sort(points, new Comparator<int[]>() {

            @Override
            public int compare(int[] a, int[] b) {
                return Integer.compare(a[0], b[0]);
            }
        });
        //result starts with 1 because we always need an arrow to shot the first balloon
        int result = 1;
        //\'limit\' used to check if a balloon can be shot in parallel with previous ones
        int limit = points[0][1];
        for (int i = 1; i < points.length; i++) {
            //balloon at i can\'t be grouped with previous ones
            if (points[i][0] > limit) {
                result++;
                limit = points[i][1];
            } else //balloon at i is within the range of balloons being shot in parallel
            if (limit > points[i][1])
                limit = points[i][1];
        }
        return result;
    }
}
