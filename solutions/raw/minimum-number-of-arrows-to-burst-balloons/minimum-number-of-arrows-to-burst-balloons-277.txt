class Solution {

    public int findMinArrowShots(int[][] points) {
        // Sort the points array based on the end positions of the intervals
        Arrays.sort(points, (a, b) -> Integer.compare(a[1], b[1]));
        // Initialize the number of arrows needed to 1, assuming we need at least one arrow
        int ans = 1;
        // Initialize the end position of the first interval
        int x = points[0][1];
        // Iterate through the sorted intervals starting from the second interval
        for (int i = 1; i < points.length; i++) {
            // If the start position of the current interval is greater than the end position of the last shot arrow
            if (points[i][0] > x) {
                // Increment the number of arrows needed
                ans++;
                // Update the end position of the last shot arrow to the end position of the current interval
                x = points[i][1];
            }
        }
        // Return the minimum number of arrows needed
        return ans;
    }
}
