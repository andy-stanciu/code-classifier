class Solution {

    public int findMinArrowShots(int[][] points) {
        int n = points.length;
        // base case
        if (n == 0) {
            return 0;
        }
        // sort in ascending based on \'x-start\' co-ordinate
        Arrays.sort(points, (x1, x2) -> Integer.compare(x1[0], x2[0]));
        int[] prev = points[0];
        int numberOfArrowsNeeded = n;
        for (int j = 1; j < n; ++j) {
            int[] current = points[j];
            // if overlapping : 1 balloon would be enough to burst both
            if (current[0] <= prev[1]) {
                --numberOfArrowsNeeded;
                prev = new int[] { prev[0], Math.min(current[1], prev[1]) };
            } else {
                prev = current;
            }
        }
        return numberOfArrowsNeeded;
    }
}
