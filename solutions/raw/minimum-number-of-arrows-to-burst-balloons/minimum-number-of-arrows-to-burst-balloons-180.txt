class Solution {

    public int findMinArrowShots(int[][] points) {
        Arrays.sort(points, Comparator.comparingInt(a -> a[0]));
        int arrows = 1;
        int ctr = 0;
        int prevEnd = points[0][1];
        ArrayList<ArrayList<ArrayList<Integer>>> groups = new ArrayList<>();
        ArrayList<ArrayList<Integer>> firstgrp = new ArrayList<>();
        ArrayList<Integer> innerList = new ArrayList<>();
        for (int point : points[0]) {
            innerList.add(point);
        }
        firstgrp.add(innerList);
        groups.add(firstgrp);
        for (int i = 1; i < points.length; i++) {
            if (points[i][0] > prevEnd) {
                arrows++;
                prevEnd = points[i][1];
                ArrayList<ArrayList<Integer>> nextgrp = new ArrayList<>();
                ArrayList<Integer> innerList1 = new ArrayList<>();
                for (int point : points[i]) {
                    innerList1.add(point);
                }
                nextgrp.add(innerList1);
                groups.add(nextgrp);
            } else {
                ArrayList<Integer> innerList2 = new ArrayList<>();
                for (int point : points[i]) {
                    innerList2.add(point);
                }
                groups.get(groups.size() - 1).add(innerList2);
                prevEnd = Math.min(prevEnd, points[i][1]);
            }
        }
        System.out.println(groups);
        return arrows;
    }
}
