class Solution {

    public int findMinArrowShots(int[][] points) {
        int n = points.length;
        if (n == 1)
            return 1;
        // custom sorting
        Arrays.sort(points, new Comparator<int[]>() {

            public int compare(int[] a1, int[] a2) {
                if (a1[1] < a2[1])
                    return -1;
                if (a1[1] == a2[1])
                    return 0;
                return 1;
            }
        });
        int arrows = 1;
        int commonEP = points[0][1];
        for (int i = 1; i < n; i++) {
            int curS = points[i][0];
            int curE = points[i][1];
            // if intervals are overlapping then we can use existing arrow to burst it;
            // if (curS <= commonInterval[1]) {
            //     commonInterval[0] = Math.max(commonInterval[0], curS);
            //     commonInterval[1] = Math.min(commonInterval[1], curE);
            // }
            // else {
            //start a new interval
            if (curS > commonEP) {
                commonEP = curE;
                arrows++;
            }
        }
        return arrows;
    }
}
