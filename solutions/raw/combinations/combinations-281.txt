class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<>();
        combinations(1, n, 0, k, new ArrayList<>(), result);
        return result;
    }

    public static void combinations(int cb, int tb, int ssf, int ts, List<Integer> combination, List<List<Integer>> result) {
        if (cb > tb) {
            if (ssf == ts) {
                result.add(new ArrayList<>(combination));
            }
            return;
        }
        // Include the current number \'cb\' in the combination
        combination.add(cb);
        combinations(cb + 1, tb, ssf + 1, ts, combination, result);
        // Backtrack
        combination.remove(combination.size() - 1);
        // Skip the current number \'cb\' in the combination
        combinations(cb + 1, tb, ssf, ts, combination, result);
    }
}
