class Solution {

    public List<List<Integer>> combine(int n, int k) {
        //final linked list
        List<List<Integer>> result = new LinkedList();
        //This will store each combination, which will then be added to the final linked list
        LinkedList<Integer> comb = new LinkedList();
        comboGenerator(1, n, k, result, comb);
        return result;
    }

    //recursive method
    public void comboGenerator(int start, int n, int k, List<List<Integer>> result, LinkedList<Integer> combo) {
        //each combination can be of size k or less
        if (combo.size() == k)
            result.add(new LinkedList(combo));
        //iterate through all \'n\' numbers, generating each combo.
        //After a combo has been added to the final \'result\',
        //then remove the last element of the combo to continue generating even more combinations
        for (int i = start; i <= n && combo.size() < k; i++) {
            combo.add(i);
            comboGenerator(i + 1, n, k, result, combo);
            combo.removeLast();
        }
    }
}
