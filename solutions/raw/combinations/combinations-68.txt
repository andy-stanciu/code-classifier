class Solution {

    public List<List<Integer>> combine(int n, int k) {
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = i + 1;
        }
        for (int it : arr) {
            System.out.print(it);
        }
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        recursion(0, ans, temp, arr, n, k);
        return ans;
    }

    void recursion(int start, List<List<Integer>> ans, List<Integer> temp, int[] arr, int n, int k) {
        if (temp.size() == k) {
            //if(!ans.contains(temp))
            ans.add(new ArrayList<>(temp));
            return;
        }
        for (int i = start; i < n; i++) {
            temp.add(arr[i]);
            recursion(i + 1, ans, temp, arr, n, k);
            temp.remove(temp.size() - 1);
        }
    }
}
