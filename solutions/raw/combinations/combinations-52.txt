class Solution {

    // Helper function for backtracking to generate combinations
    private void backtrack(int start, int n, int k, List<Integer> path, List<List<Integer>> ans) {
        // Base case: If the combination has reached the required size k, add it to the answer and return
        if (path.size() == k) {
            ans.add(new ArrayList<>(path));
            return;
        }
        // Try adding numbers from start to n in the current combination
        for (int i = start; i <= n; i++) {
            // Add the current number
            path.add(i);
            // Recurse
            backtrack(i + 1, n, k, path, ans);
            // Backtrack
            path.remove(path.size() - 1);
        }
    }

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> ans = new ArrayList<>();
        backtrack(1, n, k, new ArrayList<>(), ans);
        return ans;
    }
}
