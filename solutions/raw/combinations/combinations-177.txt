class Solution {

    List<List<Integer>> ans;

    List<Integer> temp;

    public List<List<Integer>> combine(int n, int k) {
        ans = new ArrayList<>();
        temp = new ArrayList<>();
        genCombination(1, n, k);
        return ans;
    }

    public void genCombination(int start, int n, int k) {
        if (k == 0) {
            ans.add(new ArrayList(temp));
            return;
        }
        for (int i = start; i <= n - k + 1; i++) {
            temp.add(i);
            //Why K-1? Draw the recursion tree
            //You\'ll notice we are performing extra iterations even though we know that that many elements are not left to be added
            //So to avoid extra work, we\'ll update k which help in updating loop conditon
            genCombination(i + 1, n, k - 1);
            temp.remove(temp.size() - 1);
        }
    }
}
