class Solution {

    public static void printCombn(int[] arr, int k, int i, int n, int idx, int[] res, List<List<Integer>> ans) {
        // base case
        // if the idx of the res arr, reaches to k,
        // means we have completed the combn
        if (idx == k) {
            List<Integer> temp = new ArrayList<>();
            for (int num : res) temp.add(num);
            ans.add(temp);
            return;
        }
        // if we have traversed all the elements, then return
        if (i >= n) {
            return;
        }
        // including the element
        res[idx] = arr[i];
        printCombn(arr, k, i + 1, n, idx + 1, res, ans);
        // excluding the element
        printCombn(arr, k, i + 1, n, idx, res, ans);
    }

    public List<List<Integer>> combine(int n, int k) {
        // k = len of combination
        // n = for the limit
        // for the arr
        int i = 0;
        int[] arr = new int[n];
        for (int j = 0; j < arr.length; j++) arr[j] = j + 1;
        // for the res arr
        int idx = 0;
        // for storing the combn of size k
        int[] res = new int[k];
        List<List<Integer>> ans = new ArrayList<>();
        printCombn(arr, k, i, n, idx, res, ans);
        return ans;
    }
}
