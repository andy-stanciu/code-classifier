class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> answerList = new ArrayList<>();
        recurseChoose(n, 1, k, "", answerList);
        return answerList;
    }

    private void recurseChoose(int n, int currIndex, int currK, String combo, List<List<Integer>> answer) {
        if (currK == 0) {
            String[] listOfString = combo.split(",");
            List<Integer> listOfInteger = Arrays.stream(listOfString).map(Integer::valueOf).collect(Collectors.toList());
            answer.add(listOfInteger);
            return;
        } else {
            for (int i = currIndex; i <= n + 1 - currK; i++) {
                recurseChoose(n, i + 1, currK - 1, combo + i + ",", answer);
            }
            return;
        }
    }
}
