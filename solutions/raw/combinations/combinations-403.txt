class Solution {

    public List<List<Integer>> combine(int n, int k) {
        var allCombinations = new ArrayList<List<Integer>>();
        helper(n, k, new ArrayList<Integer>(), allCombinations);
        return allCombinations;
    }

    private void helper(int n, int k, List<Integer> combinations, List<List<Integer>> allCombinations) {
        if (combinations.size() == k) {
            allCombinations.add(new ArrayList<>(combinations));
            return;
        }
        for (int i = n; i > 0; i--) {
            //add
            combinations.add(i);
            //recurse
            helper(i - 1, k, combinations, allCombinations);
            //backtrack
            combinations.remove(combinations.size() - 1);
        }
    }
}
