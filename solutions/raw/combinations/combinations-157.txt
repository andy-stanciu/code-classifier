class Solution {

    private List<List<Integer>> ans = new ArrayList<>();

    private List<Integer> path = new ArrayList<>();

    private int k;

    public List<List<Integer>> combine(int n, int k) {
        this.k = k;
        dfs(n);
        return ans;
    }

    public void dfs(int i) {
        // remaining number of elements
        int d = k - path.size();
        if (d == 0) {
            ans.add(new ArrayList<>(path));
            return;
        }
        if (i > d) {
            // no choose, if not enough, auto no choose
            dfs(i - 1);
        }
        // choose
        path.add(i);
        dfs(i - 1);
        path.remove(path.size() - 1);
    }
}
