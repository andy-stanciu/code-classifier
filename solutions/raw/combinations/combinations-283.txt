class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> combinations = new ArrayList<>();
        backtrack(1, n, k, new ArrayList<>(), combinations);
        return combinations;
    }

    private void backtrack(int start, int n, int k, List<Integer> current, List<List<Integer>> combinations) {
        if (k == 0) {
            combinations.add(new ArrayList<>(current));
            return;
        }
        for (int i = start; i <= n - k + 1; ++i) {
            current.add(i);
            backtrack(i + 1, n, k - 1, current, combinations);
            current.remove(current.size() - 1);
        }
    }
}
