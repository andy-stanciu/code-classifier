class Solution {

    public List<List<Integer>> combine(int n, int k) {
        // List to store the final combinations
        List<List<Integer>> ans = new ArrayList<>();
        // Start backtracking from number 1
        backTracking(n, k, ans, new ArrayList<>(), 1);
        // Return the final list of combinations
        return ans;
    }

    private void backTracking(int n, int k, List<List<Integer>> ans, List<Integer> list, int start) {
        if (k == 0) {
            // If k reaches 0, we have a complete combination
            // Add a copy of the current combination to the result list
            ans.add(new ArrayList<>(list));
            // Exit the current recursive call
            return;
        }
        // If start exceeds n or k is negative, exit the current recursive call
        if (start > n)
            return;
        for (int i = start; i <= n; i++) {
            // Iterate from start to n
            // Add the current number to the combination
            list.add(i);
            // Recurse with the next number and reduced k
            backTracking(n, k - 1, ans, list, i + 1);
            // Remove the last added number to backtrack
            list.remove(list.size() - 1);
        }
    }
}
