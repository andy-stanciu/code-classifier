class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> li = new ArrayList<>();
        boolean[] vis = new boolean[n];
        List<Integer> l = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            l.add(i);
        }
        helper(li, vis, l, new ArrayList<>(), k, 0);
        return li;
    }

    public void helper(List<List<Integer>> li, boolean[] vis, List<Integer> l, List<Integer> temp, int k, int index) {
        if (k == 0) {
            li.add(new ArrayList<>(temp));
            return;
        }
        if (index >= l.size() || vis[index])
            return;
        for (int i = index; i < l.size(); i++) {
            vis[i] = true;
            temp.add(l.get(i));
            helper(li, vis, l, temp, k - 1, i + 1);
            vis[i] = false;
            temp.remove(temp.size() - 1);
        }
        return;
    }
}
