class Solution {

    public List<List<Integer>> combine(int n, int k) {
        // Initialize a list to store the combinations
        List<List<Integer>> ans = new ArrayList<>();
        // Iterate through numbers from 1 to n
        for (int i = 1; i <= n; i++) {
            // Create a temporary list to store a single combination
            List<Integer> temp = new ArrayList<>();
            // Add the current number to the temporary list
            temp.add(i);
            // Call the helper function to find combinations starting with this number
            helper(ans, temp, n, k, i + 1);
            // Remove the last added number from the temporary list
            temp.remove(temp.size() - 1);
        }
        // Return the list of combinations
        return ans;
    }

    // Helper function to find combinations recursively
    public void helper(List<List<Integer>> ans, List<Integer> curr, int n, int k, int currIndex) {
        // If the current combination has reached the required size \'k\', add it to the
        // result list
        if (curr.size() == k) {
            ans.add(new ArrayList<>(curr));
            return;
        }
        // Iterate through numbers from \'currIndex\' to \'n\'
        for (int i = currIndex; i <= n; i++) {
            // Add the current number to the current combination
            curr.add(i);
            // Recursively call the helper function to find combinations starting with this
            // number
            helper(ans, curr, n, k, i + 1);
            // Remove the last added number from the current combination to backtrack
            curr.remove(curr.size() - 1);
        }
    }
}
