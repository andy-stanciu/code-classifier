class Solution {

    static int[] numbers = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> list = new ArrayList<>();
        allCombination(list, new ArrayList<>(), n, k, 1);
        return list;
    }

    private static void allCombination(List<List<Integer>> list, ArrayList<Integer> tempList, int n, int k, int idx) {
        if (tempList.size() == k) {
            list.add(new ArrayList<>(tempList));
            return;
        }
        for (int i = idx; i <= n; i++) {
            if (tempList.contains(numbers[i]))
                continue;
            tempList.add(numbers[i]);
            allCombination(list, tempList, n, k, i + 1);
            tempList.remove(tempList.size() - 1);
        }
    }
}
