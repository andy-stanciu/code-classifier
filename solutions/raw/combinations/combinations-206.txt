class Solution {

    static List<List<Integer>> lists;

    public List<List<Integer>> combine(int n, int k) {
        lists = new ArrayList<>();
        int[] candidates = new int[n];
        for (int i = 1; i <= n; i++) {
            candidates[i - 1] = i;
        }
        List<Integer> combo = new ArrayList<>();
        int index = 0;
        combinationSumHelper(candidates, k, index, combo);
        return lists;
    }

    static void combinationSumHelper(int[] candidates, int k, int index, List<Integer> combo) {
        if (combo.size() == k) {
            List<Integer> newCombo = new ArrayList<>();
            newCombo.addAll(combo);
            lists.add(newCombo);
            return;
        }
        if (index == candidates.length)
            return;
        combo.add(candidates[index]);
        combinationSumHelper(candidates, k, index + 1, combo);
        combo.remove(combo.size() - 1);
        combinationSumHelper(candidates, k, index + 1, combo);
    }
}
