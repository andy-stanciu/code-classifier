class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> combinations = new ArrayList<>();
        if (n <= 0 || k <= 0) {
            return combinations;
        }
        nCkCombinationsRecursive(n, k, 1, new ArrayList<Integer>(), combinations);
        return combinations;
    }

    private void nCkCombinationsRecursive(int n, int k, int index, List<Integer> combinationSoFar, List<List<Integer>> combinations) {
        if (index == n + 1) {
            if (combinationSoFar.size() == k) {
                combinations.add(new ArrayList<>(combinationSoFar));
            }
            return;
        }
        nCkCombinationsRecursive(n, k, index + 1, combinationSoFar, combinations);
        combinationSoFar.add(index);
        nCkCombinationsRecursive(n, k, index + 1, combinationSoFar, combinations);
        combinationSoFar.remove(combinationSoFar.size() - 1);
    }
}
