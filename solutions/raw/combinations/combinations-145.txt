class Solution {

    void dfs(int n, int k, int i, List<Integer> curr, int currSize, List<List<Integer>> ans) {
        if (currSize == k) {
            ans.add(new ArrayList(curr));
            return;
        }
        if (i == n + 1 || i + k - currSize > n + 1) {
            return;
        }
        curr.add(i);
        dfs(n, k, i + 1, curr, currSize + 1, ans);
        curr.remove(currSize);
        dfs(n, k, i + 1, curr, currSize, ans);
    }

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> ans = new ArrayList();
        dfs(n, k, 1, new ArrayList(), 0, ans);
        return ans;
    }
}
