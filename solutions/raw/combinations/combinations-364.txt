class Solution {

    private List<List<Integer>> ans;

    public List<List<Integer>> combine(int n, int k) {
        ans = new ArrayList<>();
        combineHelper(new int[k], 1, 0, n, k);
        return ans;
    }

    private void combineHelper(int[] combination, int startNum, int startPos, int n, int k) {
        if (startPos == combination.length) {
            ans.add(Arrays.stream(combination).boxed().toList());
            return;
        }
        int maxStartNum = n - k + startPos + 1;
        while (startNum <= maxStartNum) {
            combination[startPos] = startNum;
            startNum++;
            combineHelper(combination, startNum, startPos + 1, n, k);
        }
    }
}
