class Solution {

    List<List<Integer>> res = new LinkedList<>();

    // \u8BB0\u5F55\u56DE\u6EAF\u7B97\u6CD5\u7684\u9012\u5F52\u8DEF\u5F84
    LinkedList<Integer> track = new LinkedList<>();

    // \u4E3B\u51FD\u6570
    public List<List<Integer>> combine(int n, int k) {
        backtrack(1, n, k);
        return res;
    }

    void backtrack(int start, int n, int k) {
        // base case
        if (k == track.size()) {
            // \u904D\u5386\u5230\u4E86\u7B2C k \u5C42\uFF0C\u6536\u96C6\u5F53\u524D\u8282\u70B9\u7684\u503C
            res.add(new LinkedList<>(track));
            return;
        }
        // \u56DE\u6EAF\u7B97\u6CD5\u6807\u51C6\u6846\u67B6
        for (int i = start; i <= n; i++) {
            // \u9009\u62E9
            track.addLast(i);
            // \u901A\u8FC7 start \u53C2\u6570\u63A7\u5236\u6811\u679D\u7684\u904D\u5386\uFF0C\u907F\u514D\u4EA7\u751F\u91CD\u590D\u7684\u5B50\u96C6
            backtrack(i + 1, n, k);
            // \u64A4\u9500\u9009\u62E9
            track.removeLast();
        }
    }
}
