class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> current = new ArrayList<>();
        // Initialize the current combination with the first k elements
        for (int i = 1; i <= k; i++) {
            current.add(i);
        }
        while (true) {
            // Add the current combination to the result list
            result.add(new ArrayList<>(current));
            // Find the rightmost element that can be incremented
            int rightmost = k - 1;
            while (rightmost >= 0 && current.get(rightmost) == n - k + 1 + rightmost) {
                rightmost--;
            }
            // If no element can be incremented, we are done
            if (rightmost == -1) {
                break;
            }
            // Increment the rightmost element
            current.set(rightmost, current.get(rightmost) + 1);
            // Increment the elements to the right of the updated element
            for (int i = rightmost + 1; i < k; i++) {
                current.set(i, current.get(i - 1) + 1);
            }
        }
        return result;
    }
}
