class Solution {

    public void helper(int n, int k, int index, List<Integer> list, List<List<Integer>> finalList) {
        if (list.size() == k) {
            finalList.add(new ArrayList<>(list));
            return;
        }
        for (int counter = index; counter <= n; counter++) {
            list.add(counter);
            helper(n, k, counter + 1, list, finalList);
            list.remove(list.size() - 1);
        }
    }

    /*
    When we draw the recursive tree of the problem we understand that we insert a number in the list and the next number inserted is always greater than this number

    We use a variable index that we consider to pass in the a function helper which will always be one more than the value in the loop

    When size of the list is equal to k we create a copy of the list and place it in the finalList and return;
    */
    public List<List<Integer>> combine(int n, int k) {
        List<Integer> list = new ArrayList<>();
        List<List<Integer>> finalList = new ArrayList<>();
        int index = 1;
        helper(n, k, index, list, finalList);
        return finalList;
    }
}
