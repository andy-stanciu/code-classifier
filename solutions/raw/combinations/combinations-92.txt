class Solution {

    public List<List<Integer>> combine(int n, int k) {
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = i + 1;
        }
        return subsets(nums, k);
    }

    public static List<List<Integer>> subsets(int[] nums, int k) {
        List<List<Integer>> mainList = new ArrayList<>();
        return subsets(nums, 0, "", mainList, k);
    }

    static List<List<Integer>> subsets(int[] nums, int i, String ans, List<List<Integer>> mainList, int k) {
        if (// base case
        i == nums.length) {
            if (convertToList(ans).size() == k)
                mainList.add(convertToList(ans));
        } else {
            int elt = nums[i];
            // include
            subsets(nums, i + 1, ans + " " + elt, mainList, k);
            // dont include
            subsets(nums, i + 1, ans, mainList, k);
        }
        return mainList;
    }

    static List<Integer> convertToList(String ans) {
        List<Integer> al = new ArrayList<>();
        if (ans.equals(""))
            return al;
        else {
            ans = ans.trim();
            StringTokenizer st = new StringTokenizer(ans);
            int n = st.countTokens();
            for (int i = 0; i < n; i++) {
                al.add(Integer.parseInt(st.nextToken()));
            }
            return al;
        }
    }
}
