class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        int n = nums.length;
        List<List<Integer>> res = new ArrayList<>();
        boolean[] visited = new boolean[n];
        HashSet<List<Integer>> ansSet = new HashSet<>();
        perm(ansSet, nums, new ArrayList(), visited);
        for (List<Integer> e : ansSet) {
            res.add(e);
        }
        return res;
    }

    public static void perm(HashSet<List<Integer>> res, int[] nums, List<Integer> curr, boolean[] visited) {
        if (curr.size() == nums.length) {
            res.add(new ArrayList(curr));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited[i] == true)
                continue;
            curr.add(nums[i]);
            visited[i] = true;
            perm(res, nums, curr, visited);
            curr.remove(curr.size() - 1);
            visited[i] = false;
        }
    }
}
