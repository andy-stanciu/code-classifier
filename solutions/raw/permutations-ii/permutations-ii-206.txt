class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> ds = new ArrayList<>();
        boolean[] arr = new boolean[nums.length];
        permutations(nums, res, ds, arr);
        return res;
    }

    public void permutations(int[] nums, List<List<Integer>> res, List<Integer> ds, boolean[] arr) {
        if (ds.size() == arr.length) {
            res.add(new ArrayList<>(ds));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (i > 0 && nums[i] == nums[i - 1] && arr[i - 1] == false)
                continue;
            if (!arr[i]) {
                ds.add(nums[i]);
                arr[i] = true;
                permutations(nums, res, ds, arr);
                ds.remove(ds.size() - 1);
                arr[i] = false;
            }
        }
    }
}
