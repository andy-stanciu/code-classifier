class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<Integer> num = new ArrayList<>();
        List<List<Integer>> ans = new ArrayList<>();
        List<List<Integer>> ans1 = new ArrayList<>();
        permArray(nums, num, ans);
        return ans;
    }

    static void permArray(int[] arr, List<Integer> num, List<List<Integer>> ans) {
        if (arr.length == 0) {
            if (ans.contains(num)) {
                return;
            }
            ans.add(num);
            return;
        }
        for (int i = 0; i <= num.size(); i++) {
            List<Integer> num1 = new ArrayList<>(num);
            num1.add(i, arr[0]);
            int[] arr1 = Arrays.copyOfRange(arr, 1, arr.length);
            permArray(arr1, num1, ans);
        }
    }
}
