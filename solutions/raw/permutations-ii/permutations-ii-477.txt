class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        if (nums.length == 0) {
            return new ArrayList<>();
        }
        List<List<Integer>> initialInput = new ArrayList<>();
        List<Integer> emptyList = new ArrayList<>();
        initialInput.add(emptyList);
        for (int i = 0; i < nums.length; i++) {
            initialInput = addDP(nums, i, initialInput);
        }
        Set<List<Integer>> setInteger = new HashSet<>(initialInput);
        return new ArrayList<>(setInteger);
    }

    public static List<List<Integer>> addDP(int[] nums, int currentPos, List<List<Integer>> permUntilNow) {
        List<List<Integer>> output = new ArrayList<>();
        for (List<Integer> uniquePermute : permUntilNow) {
            for (int i = 0; i <= uniquePermute.size(); i++) {
                List<Integer> temp = new ArrayList<>(uniquePermute);
                temp.add(i, nums[currentPos]);
                output.add(temp);
            }
        }
        return output;
    }
}
