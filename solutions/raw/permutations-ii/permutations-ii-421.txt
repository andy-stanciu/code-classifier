class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        ArrayList<List<Integer>> ans = new ArrayList<>();
        int index = 0;
        solve(ans, nums, index);
        return ans;
    }

    public void solve(List<List<Integer>> ans, int[] nums, int index) {
        if (index == nums.length) {
            ArrayList<Integer> list = new ArrayList<>();
            for (int i = 0; i < nums.length; i++) list.add(nums[i]);
            ans.add(new ArrayList<>(list));
            return;
        }
        Set<Integer> used = new HashSet<>();
        for (int i = index; i < nums.length; i++) {
            if (used.add(nums[i])) {
                swap(i, index, nums);
                solve(ans, nums, index + 1);
                swap(i, index, nums);
            }
        }
    }

    public void swap(int i, int j, int[] nums) {
        int t = nums[i];
        nums[i] = nums[j];
        nums[j] = t;
    }
}
