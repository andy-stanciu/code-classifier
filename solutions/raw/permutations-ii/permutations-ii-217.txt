class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> a = new ArrayList<>();
        Arrays.sort(nums);
        int[] path = new int[nums.length];
        sol(ans, a, nums, path);
        return ans;
    }

    public void sol(List<List<Integer>> ans, List<Integer> a, int[] nums, int[] path) {
        if (a.size() == nums.length) {
            ans.add(new ArrayList<>(a));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (path[i] == 0) {
                path[i] = 1;
                a.add(nums[i]);
                sol(ans, a, nums, path);
                a.remove(a.size() - 1);
                path[i] = 0;
            } else {
                continue;
            }
            while (i + 1 < nums.length && nums[i] == nums[i + 1]) {
                i++;
            }
        }
    }
}
