class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> results = new ArrayList<>();
        helper(results, nums, 0);
        return results;
    }

    public void swap(int i, int j, int[] nums) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public void helper(List<List<Integer>> results, int[] nums, int i) {
        if (i == nums.length) {
            List<Integer> result = new ArrayList<>();
            for (int num : nums) result.add(num);
            results.add(result);
            return;
        }
        HashSet<Integer> visited = new HashSet<>();
        for (int j = i; j < nums.length; j++) {
            if (!visited.contains(nums[j])) {
                visited.add(nums[j]);
                swap(i, j, nums);
                helper(results, nums, i + 1);
                swap(i, j, nums);
            }
        }
    }
}
