class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> finalList = new ArrayList<List<Integer>>();
        helper(0, nums.length - 1, nums, finalList);
        return finalList;
    }

    public void helper(int si, int ei, int[] nums, List<List<Integer>> finalList) {
        if (si == ei) {
            List<Integer> temp = new ArrayList<Integer>();
            //   because we want List in List
            for (int num : nums) {
                temp.add(num);
            }
            // Just Wrote this as Extra Condition then Simple Permutation to avoid duplicates.
            if (!finalList.contains(temp))
                finalList.add(temp);
            return;
        }
        for (int i = si; i <= ei; i++) {
            //   observe test case...1st swap for same order
            swap(si, i, nums);
            helper(si + 1, ei, nums, finalList);
            //   2nd swap for reverse order
            swap(si, i, nums);
        }
    }

    //  we are simply swapping the si and ith element in original Array and storing this in List
    public void swap(int i, int j, int[] nums) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
