class Solution {

    List<List<Integer>> list = new ArrayList<>();

    public List<List<Integer>> permuteUnique(int[] nums) {
        boolean[] flag = new boolean[nums.length];
        Arrays.sort(nums);
        helper(nums, new ArrayList<>(), flag);
        return list;
    }

    public void helper(int[] arr, List<Integer> tmp, boolean[] flag) {
        if (tmp.size() == arr.length) {
            list.add(new ArrayList<>(tmp));
            return;
        }
        for (int i = 0; i < flag.length; i++) {
            if (i > 0 && arr[i] == arr[i - 1] && !flag[i - 1]) {
                continue;
            }
            if (!flag[i]) {
                flag[i] = true;
                tmp.add(arr[i]);
                helper(arr, tmp, flag);
                tmp.remove(tmp.size() - 1);
                flag[i] = false;
            }
        }
        return;
    }
}
