class Solution {

    List<List<Integer>> res = new ArrayList<>();

    HashSet<List<Integer>> set = new HashSet<>();

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<Integer> ip = new ArrayList<>();
        List<Integer> op = new ArrayList<>();
        for (int num : nums) ip.add(num);
        backtrack(op, ip);
        for (List<Integer> li : set) res.add(li);
        return res;
    }

    void backtrack(List<Integer> op, List<Integer> ip) {
        if (ip.size() == 0) {
            set.add(new ArrayList<>(op));
            return;
        }
        for (int i = 0; i < ip.size(); i++) {
            op.add(ip.get(i));
            ip.remove(i);
            backtrack(op, ip);
            ip.add(i, op.get(op.size() - 1));
            op.remove(op.size() - 1);
        }
    }
}
