class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        boolean[] used = new boolean[nums.length];
        helper(nums, used, ans, new ArrayList<>());
        return ans;
    }

    public void helper(int[] nums, boolean[] used, List<List<Integer>> ans, List<Integer> ch) {
        if (ch.size() == nums.length) {
            ans.add(new ArrayList<>(ch));
            return;
        }
        Set<Integer> uniqueSet = new HashSet<>();
        for (int i = 0; i < nums.length; i++) {
            if (used[i] || uniqueSet.contains(nums[i])) {
                continue;
            }
            used[i] = true;
            ch.add(nums[i]);
            uniqueSet.add(nums[i]);
            helper(nums, used, ans, ch);
            used[i] = false;
            ch.remove(ch.size() - 1);
        }
    }
}
