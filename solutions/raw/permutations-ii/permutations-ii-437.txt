class Solution {

    public void swap(int x, int y, int[] nums) {
        int temp = nums[x];
        nums[x] = nums[y];
        nums[y] = temp;
    }

    public void permutation(Set<List<Integer>> set, int[] nums, int index) {
        if (index >= nums.length) {
            ArrayList<Integer> l = new ArrayList();
            for (int x : nums) {
                l.add(x);
            }
            set.add(l);
            return;
        }
        for (int j = index; j < nums.length; j++) {
            swap(index, j, nums);
            permutation(set, nums, index + 1);
            swap(index, j, nums);
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        Set<List<Integer>> set = new HashSet<>();
        permutation(set, nums, 0);
        ans.addAll(set);
        return ans;
    }
}
