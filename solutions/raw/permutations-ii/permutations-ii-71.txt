class Solution {

    Set<List<Integer>> ans = new HashSet<>();

    public List<List<Integer>> permuteUnique(int[] nums) {
        boolean[] b = new boolean[nums.length];
        backTrack(nums, new ArrayList<>(), b);
        return new ArrayList<>(ans);
    }

    public void backTrack(int[] nums, List<Integer> curr, boolean[] b) {
        if (curr.size() == nums.length) {
            ans.add(new ArrayList<>(curr));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!b[i]) {
                b[i] = true;
                curr.add(nums[i]);
                backTrack(nums, curr, b);
                curr.remove(curr.size() - 1);
                b[i] = false;
            }
        }
    }
}
