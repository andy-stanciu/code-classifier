class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        helper(nums, result, new ArrayList<>(), new boolean[nums.length]);
        return result;
    }

    private void helper(int[] nums, List<List<Integer>> result, List<Integer> temp, boolean[] visited) {
        if (temp.size() == nums.length && !result.contains(temp)) {
            result.add(new ArrayList<>(temp));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited[i]) {
                continue;
            }
            visited[i] = true;
            temp.add(nums[i]);
            helper(nums, result, temp, visited);
            visited[i] = false;
            temp.remove(temp.size() - 1);
        }
    }
}
