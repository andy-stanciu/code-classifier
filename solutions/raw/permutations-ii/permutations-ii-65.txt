class Solution {

    public void swap(int start, int end, int[] arr) {
        int temp = arr[start];
        arr[start] = arr[end];
        arr[end] = temp;
    }

    public void next_permutation(List<List<Integer>> res, int[] arr, int n) {
        while (true) {
            int index = -1;
            for (int i = n - 2; i >= 0; i--) {
                if (arr[i] < arr[i + 1]) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                break;
            }
            int greater_min = arr[n - 1];
            for (int j = n - 1; j > index; j--) {
                if (arr[j] > arr[index]) {
                    greater_min = j;
                    break;
                }
            }
            swap(index, greater_min, arr);
            int a = index + 1;
            int b = n - 1;
            while (a < b) {
                swap(a, b, arr);
                a++;
                b--;
            }
            List<Integer> temp = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                temp.add(arr[i]);
            }
            if (!res.contains(temp)) {
                res.add(new ArrayList<>(temp));
            }
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        int n = nums.length;
        int[] arr = Arrays.copyOf(nums, n);
        Arrays.sort(arr);
        List<Integer> temp = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            temp.add(arr[i]);
        }
        res.add(new ArrayList<>(temp));
        next_permutation(res, arr, n);
        return res;
    }
}
