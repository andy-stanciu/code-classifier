class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> main = new ArrayList<>();
        permutation2(nums, new ArrayList<>(), new boolean[nums.length], main);
        HashSet<List<Integer>> hs = new HashSet<>();
        for (List<Integer> ele : main) {
            hs.add(ele);
        }
        main.clear();
        for (List<Integer> ele1 : hs) {
            main.add(ele1);
        }
        return main;
    }

    public static void permutation2(int[] arr, ArrayList<Integer> ans, boolean[] map, List<List<Integer>> main) {
        if (ans.size() == arr.length) {
            main.add(new ArrayList<>(ans));
            return;
        }
        for (int i = 0; i < arr.length; i++) {
            if (i != 0 && arr[i] == arr[i - 1] && !map[i - 1])
                continue;
            if (!map[i]) {
                map[i] = true;
                ans.add(arr[i]);
                permutation2(arr, ans, map, main);
                map[i] = false;
                ans.remove(ans.size() - 1);
            }
        }
    }
}
