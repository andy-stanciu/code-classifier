class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        boolean[] visited = new boolean[nums.length];
        permuteHelper(list, new ArrayList<>(), nums, visited);
        return list;
    }

    private void permuteHelper(List<List<Integer>> list, List<Integer> temp, int[] nums, boolean[] visited) {
        if (temp.size() == nums.length) {
            if (list.contains(temp))
                return;
            list.add(new ArrayList(temp));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited[i] == false) {
                // if(temp.contains(nums[i])) continue;
                visited[i] = true;
                temp.add(nums[i]);
                permuteHelper(list, temp, nums, visited);
                temp.remove(temp.size() - 1);
                visited[i] = false;
            }
        }
    }
}
