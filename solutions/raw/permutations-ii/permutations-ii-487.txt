class Solution {

    Set<List<Integer>> set;

    public List<List<Integer>> permuteUnique(int[] nums) {
        set = new HashSet<>();
        List<List<Integer>> list = new ArrayList<>();
        solve(nums, 0);
        for (List<Integer> l : set) list.add(l);
        return list;
    }

    private void solve(int[] nums, int idx) {
        if (idx == nums.length) {
            List<Integer> temp = new ArrayList<>();
            for (int e : nums) temp.add(e);
            set.add(temp);
            return;
        }
        for (int i = idx; i < nums.length; i++) {
            swap(nums, i, idx);
            solve(nums, idx + 1);
            swap(nums, i, idx);
        }
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
