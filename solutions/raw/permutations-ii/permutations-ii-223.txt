class Solution {

    List<List<Integer>> res;

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        res = new ArrayList<>();
        dfs(nums, new ArrayList<>(), new boolean[nums.length]);
        return res;
    }

    public void dfs(int[] nums, List<Integer> cur, boolean[] visit) {
        if (cur.size() == nums.length) {
            res.add(new ArrayList<>(cur));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (visit[i] || (i > 0 && nums[i - 1] == nums[i]) && !visit[i - 1]) {
                continue;
            }
            visit[i] = true;
            cur.add(nums[i]);
            dfs(nums, cur, visit);
            visit[i] = false;
            cur.remove(cur.size() - 1);
        }
    }
}
