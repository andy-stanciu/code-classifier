class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        Set<List<Integer>> setAns = new HashSet<>();
        boolean[] arr = new boolean[nums.length];
        backtract(nums, setAns, arr, new ArrayList<>());
        for (List<Integer> item : setAns) {
            ans.add(item);
        }
        return ans;
    }

    void backtract(int[] nums, Set<List<Integer>> setAns, boolean[] visited, List<Integer> list) {
        if (list.size() == nums.length) {
            setAns.add(new ArrayList<>(list));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!visited[i]) {
                list.add(nums[i]);
                visited[i] = true;
                backtract(nums, setAns, visited, list);
                list.remove(list.size() - 1);
                visited[i] = false;
            }
        }
    }
}
