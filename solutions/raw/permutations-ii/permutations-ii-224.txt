public class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        Map<Integer, List<Integer>> map = new HashMap<>();
        int c = 0;
        map.put(c, arrayToList(nums));
        while (true) {
            int ind1 = -1;
            int ind2 = -1;
            for (int i = nums.length - 2; i >= 0; i--) {
                if (nums[i] < nums[i + 1]) {
                    ind1 = i;
                    break;
                }
            }
            if (ind1 == -1) {
                break;
            } else {
                for (int i = nums.length - 1; i >= 0; i--) {
                    if (nums[i] > nums[ind1]) {
                        ind2 = i;
                        break;
                    }
                }
                swap(nums, ind1, ind2);
                reverse(nums, ind1 + 1);
                c++;
                map.put(c, arrayToList(nums));
            }
        }
        // Populate ans with the lists from the map
        for (int i = 0; i <= c; i++) {
            ans.add(map.get(i));
        }
        return ans;
    }

    private List<Integer> arrayToList(int[] nums) {
        List<Integer> list = new ArrayList<>();
        for (int num : nums) {
            list.add(num);
        }
        return list;
    }

    private void swap(int[] nums, int ind1, int ind2) {
        int temp = nums[ind2];
        nums[ind2] = nums[ind1];
        nums[ind1] = temp;
    }

    private void reverse(int[] nums, int start) {
        int i = start;
        int j = nums.length - 1;
        while (i < j) {
            swap(nums, i, j);
            i++;
            j--;
        }
    }
}
