class Solution {

    List<List<Integer>> ans = new ArrayList();

    public List<List<Integer>> permuteUnique(int[] nums) {
        int[] v = new int[nums.length];
        Arrays.sort(nums);
        dfs(nums, v, nums.length, new ArrayList());
        return ans;
    }

    void dfs(int[] n, int[] v, int c, List<Integer> l) {
        if (c == 0)
            ans.add(l);
        for (int i = 0; i < n.length; i++) {
            if (v[i] == 1)
                continue;
            if (i > 0 && v[i - 1] == 0 && n[i] == n[i - 1])
                continue;
            List<Integer> lc = new ArrayList(l);
            lc.add(n[i]);
            v[i] = 1;
            dfs(n, v, c - 1, lc);
            v[i] = 0;
        }
    }
}
