class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);
        boolean[] vis = new boolean[nums.length];
        backtrack(nums, vis, new ArrayList<>(), result);
        return result;
    }

    public void backtrack(int[] nums, boolean[] vis, List temp, List<List<Integer>> result) {
        if (temp.size() == nums.length) {
            result.add(new ArrayList<>(temp));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (vis[i] || (i > 0 && nums[i] == nums[i - 1] && !vis[i - 1])) {
                continue;
            }
            temp.add(nums[i]);
            vis[i] = true;
            backtrack(nums, vis, temp, result);
            temp.remove(temp.size() - 1);
            vis[i] = false;
        }
    }
}
