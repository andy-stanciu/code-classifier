class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> current = new ArrayList<>();
        boolean[] map = new boolean[nums.length];
        if (nums.length == 0) {
            ans.add(new ArrayList<>());
            return ans;
        } else {
            helper(nums, ans, current, map);
            return ans;
        }
    }

    public void helper(int[] nums, List<List<Integer>> ans, List<Integer> current, boolean[] map) {
        if (current.size() == nums.length) {
            List<Integer> temp = new ArrayList<>(current);
            if (!ans.contains(temp)) {
                ans.add(temp);
                return;
            }
        }
        for (int i = 0; i < nums.length; i++) {
            if (!map[i]) {
                map[i] = true;
                current.add(nums[i]);
                helper(nums, ans, current, map);
                current.remove(current.size() - 1);
                map[i] = false;
            }
        }
    }
}
