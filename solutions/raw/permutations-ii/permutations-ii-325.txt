class Solution {

    List<List<Integer>> res = new ArrayList<>();

    boolean[] used;

    public List<List<Integer>> permuteUnique(int[] nums) {
        // permutation requires used array
        Arrays.sort(nums);
        this.used = new boolean[nums.length];
        LinkedList<Integer> list = new LinkedList<>();
        backtrack(nums, list);
        return res;
    }

    private void backtrack(int[] nums, LinkedList<Integer> list) {
        int n = nums.length;
        if (list.size() == n) {
            res.add(new LinkedList(list));
            return;
        }
        for (int i = 0; i < n; i++) {
            if (used[i])
                continue;
            if (i != 0 && nums[i] == nums[i - 1] && !used[i - 1])
                continue;
            list.addLast(nums[i]);
            used[i] = true;
            backtrack(nums, list);
            list.removeLast();
            used[i] = false;
        }
    }
}
