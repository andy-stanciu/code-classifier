class Solution {

    Set<List<Integer>> set = new HashSet<>();

    public List<List<Integer>> permuteUnique(int[] nums) {
        helper(nums, 0, nums.length);
        List<List<Integer>> l = new ArrayList<>(set);
        return l;
    }

    public void helper(int[] nums, int i, int n) {
        if (i >= n) {
            set.add(Arrays.stream(nums).boxed().collect(Collectors.toList()));
            return;
        }
        for (int j = i; j < n; j++) {
            swap(nums, i, j);
            helper(nums, i + 1, n);
            swap(nums, i, j);
        }
    }

    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
