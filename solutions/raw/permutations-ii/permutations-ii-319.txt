class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Set<List<Integer>> result = new HashSet<>();
        findPermute(nums, result, 0);
        return new ArrayList<>(result);
    }

    private static void findPermute(int[] nums, Set<List<Integer>> result, int index) {
        if (index >= nums.length) {
            List<Integer> ds = new ArrayList<>();
            for (Integer integer : nums) {
                ds.add(integer);
            }
            result.add(new ArrayList<>(ds));
        }
        for (int i = index; i < nums.length; i++) {
            swap(nums, index, i);
            findPermute(nums, result, index + 1);
            swap(nums, index, i);
        }
    }

    private static void swap(int[] nums, int first, int second) {
        int temp = nums[first];
        nums[first] = nums[second];
        nums[second] = temp;
    }
}
