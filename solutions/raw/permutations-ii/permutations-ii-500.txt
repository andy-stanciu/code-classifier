class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> dS = new ArrayList<>();
        boolean[] freq = new boolean[nums.length];
        helper(nums, dS, ans, freq);
        return ans;
    }

    public void helper(int[] nums, List<Integer> dS, List<List<Integer>> ans, boolean[] freq) {
        if (dS.size() == nums.length) {
            if (ans.contains(dS))
                return;
            ans.add(new ArrayList<>(dS));
            return;
        }
        for (int i = 0; i < nums.length; ++i) {
            if (!freq[i]) {
                freq[i] = true;
                dS.add(nums[i]);
                helper(nums, dS, ans, freq);
                dS.remove(dS.size() - 1);
                freq[i] = false;
            }
        }
    }
}
