class Solution {

    List<List<Integer>> ls = new ArrayList<>();

    public List<List<Integer>> permuteUnique(int[] nums) {
        // so now here we have to return the all the unique permutation here so now for that
        List<Integer> list = new ArrayList<>();
        boolean[] used = new boolean[nums.length];
        Arrays.sort(nums);
        helper(nums, list, used);
        return ls;
    }

    void helper(int[] nums, List<Integer> list, boolean[] used) {
        // so now here
        if (list.size() == nums.length) {
            ls.add(new ArrayList(list));
            return;
        }
        // so now here
        for (int i = 0; i < nums.length; i++) {
            // so now here
            if (i > 0 && nums[i] == nums[i - 1] && used[i - 1] || used[i]) {
                // so now here if we uses the nums[i] == nums[i-1] only
                // so it will skip it just directely here so now it will just skip it so now list size will never
                // become to the value of 2 so then it will just get us the empty
                // so now here
                // we have used the value like if it already used in the sorted nums so now just no need to get
                // the value again here so just skip it as it will give us the same answer here
                continue;
            }
            // so now here making the true
            used[i] = true;
            list.add(nums[i]);
            // so  now here we have to recursion call here
            helper(nums, list, used);
            // so now here backtrack here
            list.remove(list.size() - 1);
            used[i] = false;
        }
    }
}
