class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Set<Integer> visited = new HashSet<>();
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        dfs(nums, visited, res, new ArrayList<>());
        return res;
    }

    private void dfs(int[] nums, Set<Integer> visited, List<List<Integer>> res, List<Integer> currPath) {
        if (visited.size() == nums.length)
            res.add(new ArrayList<>(currPath));
        for (int i = 0; i < nums.length; i++) {
            if (visited.contains(i))
                continue;
            if (i > 0 && nums[i - 1] == nums[i] && !visited.contains(i - 1))
                continue;
            currPath.add(nums[i]);
            visited.add(i);
            dfs(nums, visited, res, currPath);
            currPath.remove(currPath.size() - 1);
            visited.remove(i);
        }
    }
}
