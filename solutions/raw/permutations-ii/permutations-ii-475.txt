class Solution {

    List<List<Integer>> ans;

    LinkedList<Integer> track;

    boolean[] used;

    public List<List<Integer>> permuteUnique(int[] nums) {
        ans = new LinkedList<>();
        track = new LinkedList<>();
        used = new boolean[nums.length];
        Arrays.sort(nums);
        backtrack(nums);
        return ans;
    }

    private void backtrack(int[] nums) {
        if (track.size() == nums.length) {
            ans.add(new LinkedList(track));
            return;
        }
        int prevNum = -11;
        for (int i = 0; i < nums.length; i++) {
            if (used[i]) {
                continue;
            }
            if (nums[i] == prevNum) {
                continue;
            }
            track.add(nums[i]);
            used[i] = true;
            prevNum = nums[i];
            backtrack(nums);
            track.removeLast();
            used[i] = false;
        }
    }
}
