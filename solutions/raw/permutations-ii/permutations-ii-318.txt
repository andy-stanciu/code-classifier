class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> ds = new ArrayList<>();
        boolean[] fre = new boolean[nums.length];
        helper(ans, ds, fre, nums);
        return ans;
    }

    static void helper(List<List<Integer>> ans, List<Integer> ds, boolean[] fre, int[] nums) {
        if (ds.size() == nums.length && !ans.contains(ds)) {
            ans.add(new ArrayList<>(ds));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!fre[i]) {
                fre[i] = true;
                ds.add(nums[i]);
                helper(ans, ds, fre, nums);
                fre[i] = false;
                ds.remove(ds.size() - 1);
            }
        }
    }
}
