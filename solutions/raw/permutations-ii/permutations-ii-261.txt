class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> bigL = new ArrayList<>();
        boolean[] checker = new boolean[nums.length];
        // sort bc have to check for duplicates
        Arrays.sort(nums);
        helper(bigL, new ArrayList<>(), checker, nums);
        return bigL;
    }

    public void helper(List<List<Integer>> bigL, ArrayList<Integer> temp, boolean[] checker, int[] nums) {
        if (temp.size() == nums.length) {
            // temp list is full
            bigL.add(new ArrayList<>(temp));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            // check for dupes of if number is already been used
            if (checker[i] || (i > 0 && nums[i] == nums[i - 1] && checker[i - 1])) {
                continue;
            }
            temp.add(nums[i]);
            // used it
            checker[i] = true;
            // back track
            helper(bigL, new ArrayList<>(temp), checker, nums);
            // removed it
            temp.remove(temp.size() - 1);
            // removed it therefor not in list
            checker[i] = false;
        }
    }
}
