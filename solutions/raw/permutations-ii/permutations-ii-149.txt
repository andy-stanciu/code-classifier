class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> rs = new ArrayList<>();
        Arrays.sort(nums);
        backtrack(rs, new ArrayList<>(), nums, new boolean[nums.length]);
        return rs;
    }

    private void backtrack(List<List<Integer>> rs, ArrayList<Integer> temp, int[] nums, boolean[] used) {
        if (temp.size() == nums.length && !rs.contains(temp)) {
            rs.add(new ArrayList<>(temp));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!used[i]) {
                used[i] = true;
                temp.add(nums[i]);
                backtrack(rs, temp, nums, used);
                used[i] = false;
                temp.remove(temp.size() - 1);
            }
        }
    }
}
