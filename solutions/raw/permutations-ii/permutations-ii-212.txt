class Solution {

    public static void getp(int[] nums, boolean[] mask, List<Integer> arr, HashSet<List<Integer>> s1) {
        if (arr.size() == nums.length) {
            s1.add(new ArrayList<Integer>(arr));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (mask[i] == false) {
                mask[i] = true;
                arr.add(nums[i]);
                getp(nums, mask, arr, s1);
                mask[i] = false;
                arr.remove(arr.size() - 1);
            }
        }
        return;
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        HashSet<List<Integer>> s1 = new HashSet<List<Integer>>();
        List<Integer> arr = new ArrayList<Integer>();
        boolean[] mask = new boolean[nums.length];
        getp(nums, mask, arr, s1);
        List<List<Integer>> arr2 = new ArrayList<List<Integer>>(s1);
        return arr2;
    }
}
