class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        backtrack(res, new ArrayList<>(), new HashSet<>(), nums);
        return res;
    }

    private void backtrack(List<List<Integer>> res, List<Integer> temp, Set<Integer> visited, int[] nums) {
        if (temp.size() == nums.length) {
            res.add(new ArrayList<>(temp));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited.contains(i) || (i > 0 && nums[i] == nums[i - 1] && !visited.contains(i - 1))) {
                continue;
            }
            visited.add(i);
            temp.add(nums[i]);
            backtrack(res, temp, visited, nums);
            visited.remove(i);
            temp.remove(temp.size() - 1);
        }
    }
}
