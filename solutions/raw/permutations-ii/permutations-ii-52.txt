class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Set<List<Integer>> set = new HashSet<>();
        rec(0, nums, set, res);
        return res;
    }

    public static void rec(int ind, int[] nums, Set<List<Integer>> set, List<List<Integer>> res) {
        if (ind == nums.length) {
            List<Integer> cur = new ArrayList<>();
            for (int e : nums) cur.add(e);
            if (!set.contains(cur)) {
                res.add(cur);
                set.add(cur);
            } else
                set.add(cur);
            return;
        }
        for (int i = ind; i < nums.length; i++) {
            swap(nums, i, ind);
            rec(ind + 1, nums, set, res);
            swap(nums, i, ind);
        }
    }

    public static void swap(int[] nums, int i, int ind) {
        int temp = nums[i];
        nums[i] = nums[ind];
        nums[ind] = temp;
    }
}
