class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(result, nums, 0);
        return result;
    }

    public void backtrack(List<List<Integer>> result, int[] nums, int start) {
        if (start == nums.length) {
            result.add(toList(nums));
        } else {
            for (int i = start; i < nums.length; i++) {
                if (i != start && !cantPerm(start, i, nums))
                    continue;
                swap(i, start, nums);
                backtrack(result, nums, start + 1);
                swap(i, start, nums);
            }
        }
    }

    public List<Integer> toList(int[] nums) {
        List<Integer> res = new ArrayList<>();
        for (int i : nums) res.add(i);
        return res;
    }

    public void swap(int i, int j, int[] nums) {
        int temp = nums[j];
        nums[j] = nums[i];
        nums[i] = temp;
    }

    public boolean cantPerm(int start, int curr, int[] nums) {
        for (int i = start; i < curr; i++) {
            if (nums[i] == nums[curr])
                return false;
        }
        return true;
    }
}
