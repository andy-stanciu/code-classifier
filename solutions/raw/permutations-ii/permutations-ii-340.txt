class Solution {

    List<List<Integer>> ans;

    boolean[] visited;

    public List<List<Integer>> permuteUnique(int[] nums) {
        visited = new boolean[nums.length];
        Arrays.sort(nums);
        Integer[] curr = new Integer[nums.length];
        ans = new ArrayList<>();
        helper(nums, curr, 0);
        return ans;
    }

    private void helper(int[] nums, Integer[] curr, int pos) {
        if (pos == curr.length) {
            List<Integer> temp = new ArrayList<>(Arrays.asList(curr));
            ans.add(temp);
            return;
        }
        int prev = -11;
        for (int i = 0; i < nums.length; i++) {
            if (visited[i] || prev == nums[i])
                continue;
            curr[pos] = nums[i];
            visited[i] = true;
            helper(nums, curr, pos + 1);
            visited[i] = false;
            prev = nums[i];
        }
    }
}
