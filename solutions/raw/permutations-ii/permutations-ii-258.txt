class Solution {

    List<List<Integer>> res = new ArrayList<>();

    void solve(int[] nums, int i, ArrayList<Integer> al) {
        if (i == nums.length) {
            if (!res.contains(al)) {
                List<Integer> temp = new ArrayList<>();
                for (int x : al) {
                    temp.add(x);
                }
                res.add(temp);
            }
            return;
        }
        for (int k = 0; k < nums.length; k++) {
            if (nums[k] != -11) {
                int temp = nums[k];
                al.add(temp);
                nums[k] = -11;
                solve(nums, i + 1, al);
                nums[k] = temp;
                al.remove(al.size() - 1);
            }
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        ArrayList<Integer> al = new ArrayList<>();
        solve(nums, 0, al);
        return res;
    }
}
