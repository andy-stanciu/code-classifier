class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        HashSet<List<Integer>> res = new HashSet<>();
        List<Integer> list = new ArrayList<>();
        int[] visit = new int[nums.length];
        backtrack(res, list, visit, nums);
        return new ArrayList<>(res);
    }

    public void backtrack(HashSet<List<Integer>> res, List<Integer> list, int[] visit, int[] nums) {
        if (list.size() == nums.length) {
            if (res.add(new ArrayList<>(list)))
                res.add(new ArrayList<>(list));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (visit[i] == 0) {
                visit[i] = 1;
                list.add(nums[i]);
                backtrack(res, list, visit, nums);
                list.remove(list.size() - 1);
                visit[i] = 0;
            }
        }
    }
}
