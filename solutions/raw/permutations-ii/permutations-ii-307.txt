class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        boolean[] visited = new boolean[nums.length];
        Arrays.sort(nums);
        permutation(0, new ArrayList<>(), visited, ans, nums);
        return ans;
    }

    public void permutation(int index, List<Integer> temp, boolean[] visited, List<List<Integer>> ans, int[] nums) {
        if (index >= nums.length) {
            ans.add(new ArrayList<>(temp));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!visited[i]) {
                if (i == 0 || (nums[i] == nums[i - 1] && visited[i - 1] == true) || nums[i] != nums[i - 1]) {
                    visited[i] = true;
                    temp.add(nums[i]);
                    permutation(index + 1, temp, visited, ans, nums);
                    visited[i] = false;
                    temp.remove(temp.size() - 1);
                }
            }
        }
    }
}
