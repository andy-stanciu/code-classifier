class Solution {

    public List<List<Integer>> permuteRec(int[] nums, boolean[] taken, List<Integer> prefix) {
        List<List<Integer>> permutations = new LinkedList<>();
        HashSet<Integer> visited = new HashSet<>();
        for (int i = 0; i < nums.length; i++) {
            if (!taken[i] && !visited.contains(nums[i])) {
                visited.add(nums[i]);
                taken[i] = true;
                prefix.add(nums[i]);
                permutations.addAll(permuteRec(nums, taken, prefix));
                prefix.remove(prefix.size() - 1);
                taken[i] = false;
            }
        }
        if (permutations.size() == 0) {
            permutations.add(new LinkedList(prefix));
        }
        return permutations;
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        return permuteRec(nums, new boolean[nums.length], new LinkedList<Integer>());
    }
}
