class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new LinkedList<>();
        bc(result, nums, 0);
        return result;
    }

    public void bc(List<List<Integer>> result, int[] nums, int start) {
        if (start == nums.length) {
            result.add(tolist(nums));
        } else {
            for (int i = start; i < nums.length; i++) {
                if (i != start && !can_permutation(start, i, nums))
                    continue;
                swap(start, i, nums);
                bc(result, nums, start + 1);
                swap(start, i, nums);
            }
        }
    }

    public void swap(int i, int j, int[] nums) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public List<Integer> tolist(int[] nums) {
        List<Integer> res = new ArrayList<>();
        for (int i : nums) {
            res.add(i);
        }
        return res;
    }

    public boolean can_permutation(int start, int cur, int[] nums) {
        for (int i = start; i < cur; i++) {
            if (nums[i] == nums[cur]) {
                return false;
            }
        }
        return true;
    }
}
