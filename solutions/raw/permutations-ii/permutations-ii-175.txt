class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        // HashSet<List<Integer>>hs=new HashSet<>();
        List<List<Integer>> ans = new ArrayList<>();
        fun(nums.length, 0, nums, ans);
        return ans;
    }

    static void fun(int n, int idx, int[] a, List<List<Integer>> ans) {
        if (n == idx) {
            List<Integer> al = new ArrayList<>();
            for (int i : a) {
                al.add(i);
            }
            if (!ans.contains(al)) {
                ans.add(al);
            }
        }
        for (int i = idx; i < n; i++) {
            swap(i, idx, a);
            fun(n, idx + 1, a, ans);
            swap(i, idx, a);
        }
    }

    static void swap(int i, int j, int[] a) {
        int temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }
}
