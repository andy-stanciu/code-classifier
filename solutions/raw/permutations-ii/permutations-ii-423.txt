class Solution {

    Set<List<Integer>> set;

    List<List<Integer>> res;

    boolean[] visited;

    public List<List<Integer>> permuteUnique(int[] nums) {
        this.set = new HashSet<>();
        this.res = new ArrayList<>();
        this.visited = new boolean[nums.length];
        List<Integer> list = new ArrayList<>();
        backtracking(nums, list, nums.length);
        for (List<Integer> l : set) this.res.add(new ArrayList<>(l));
        return this.res;
    }

    private void backtracking(int[] nums, List<Integer> list, int size) {
        if (list.size() == size) {
            this.set.add(new ArrayList<Integer>(list));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!visited[i]) {
                list.add(nums[i]);
                visited[i] = true;
                backtracking(nums, list, size);
                list.remove(list.size() - 1);
                visited[i] = false;
            }
        }
    }
}
