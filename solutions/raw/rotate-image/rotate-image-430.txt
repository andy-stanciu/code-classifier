// // Approach -1 (brute force) --> without using in-place
// // T.C - O(m*m)
// // S.C - O(m*m)
class Solution {

    public void rotate(int[][] matrix) {
        int m = matrix.length;
        int[][] result = new int[m][m];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < m; j++) {
                result[j][m - 1 - i] = matrix[i][j];
            }
        }
    }
}

// Approach -2  (using in-place)
// T.C - O(m*m)
// S.C - O(1)
class Solution {

    public void rotate(int[][] matrix) {
        int m = matrix.length;
        // 1. Transpose the matrix
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < i; j++) {
                if (i == j)
                    continue;
                // Swap elements matrix[i][j] and matrix[j][i]
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        // 2. Reverse the each row of matrix
        for (int i = 0; i < m; i++) {
            int j = 0;
            int n = m - 1;
            while (j < n) {
                // Swap elements matrix[i][left] and matrix[i][right]
                int temp = matrix[i][j];
                matrix[i][j++] = matrix[i][n];
                matrix[i][n--] = temp;
            }
        }
    }
}
