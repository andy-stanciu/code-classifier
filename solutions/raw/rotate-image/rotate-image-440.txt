class Solution {

    public void rotate(int[][] matrix) {
        int n = matrix.length;
        //number of sides to swap will be n/2 in odd case we dont have to swap the insgle center element so n/2 can be rounded down
        int maxInd = n - 1;
        // i and j are edge indexes
        for (int i = 0; i <= maxInd / 2; i++) {
            //i helps in maintaining the start and end index of the row as we go down to rotating inner squares
            for (int j = i; j <= (maxInd) - i - 1; j++) {
                int src = matrix[i][j];
                int temp;
                //eg: copy from 00 ->05
                temp = matrix[j][maxInd - i];
                matrix[j][maxInd - i] = src;
                src = temp;
                //eg: copy from 05 ->55
                temp = matrix[maxInd - i][maxInd - j];
                matrix[maxInd - i][maxInd - j] = src;
                src = temp;
                //eg: copy from 55 ->50
                temp = matrix[maxInd - j][i];
                matrix[maxInd - j][i] = src;
                src = temp;
                //eg: copy from 50 ->00
                matrix[i][j] = src;
            }
        }
    }
}
