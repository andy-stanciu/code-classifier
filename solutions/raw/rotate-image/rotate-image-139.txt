class Solution {

    /*
     * clockwise rotate
     * first reverse horizontalRows, then swap the symmetry (transpose matrix)
     * 1 2 3     7 8 9     7 4 1
     * 4 5 6  => 4 5 6  => 8 5 2
     * 7 8 9     1 2 3     9 6 3
    */
    /*
     * anticlockwise rotate
     * first reverse verticalRows, then swap the symmetry (transpose matrix)
     * 1 2 3     3 2 1     3 6 9
     * 4 5 6  => 6 5 4  => 2 5 8
     * 7 8 9     9 8 7     1 4 7
    */
    public void rotate(int[][] matrix) {
        transposeMatrix(matrix);
        reverseVerticalRows(matrix);
        // Instead we can also call reverseHorizontalRows(matrix) first and then transposeMatrix(matrix)
    }

    public void reverseHorizontalRows(int[][] matrix) {
        for (int top = 0, bottom = matrix.length - 1; top < bottom; top++, bottom--) {
            for (int i = 0; i < matrix[top].length; i++) {
                int temp = matrix[top][i];
                matrix[top][i] = matrix[bottom][i];
                matrix[bottom][i] = temp;
            }
        }
    }

    public void reverseVerticalRows(int[][] matrix) {
        for (int left = 0, right = matrix.length - 1; left < right; left++, right--) {
            for (int j = 0; j < matrix.length; j++) {
                int temp = matrix[j][left];
                matrix[j][left] = matrix[j][right];
                matrix[j][right] = temp;
            }
        }
    }

    // Transpose Matrix (Turns rows into cols and vice versa)
    private void transposeMatrix(int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = i + 1; j < matrix[i].length; j++) {
                int tmp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = tmp;
            }
        }
    }
}
