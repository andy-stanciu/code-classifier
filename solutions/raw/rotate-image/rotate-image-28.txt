class Solution {

    public static void rotate(int[][] matrix) {
        // This frame holder variable helps to keep track of on which frame we are currently present
        // Here frame means boundary which we have to rotate, For ex in example 2 of this there are 2 frames.
        int frame_holder = 0;
        // This variable stores n
        int n = matrix.length - 1;
        // This loop is iterating over the frames
        for (int i = 1; i <= matrix.length / 2; i++) {
            // There I am using 4 pointers initally set them at all the 4 boundary of the frame and swap elements accordingly.
            int[] rows = new int[4];
            int[] cols = new int[4];
            // first pointer
            rows[0] = frame_holder;
            cols[0] = frame_holder;
            //second pointer
            rows[1] = frame_holder;
            cols[1] = n - frame_holder;
            //third pointer
            rows[2] = n - frame_holder;
            cols[2] = n - frame_holder;
            //fourth pointer
            rows[3] = n - frame_holder;
            cols[3] = frame_holder;
            // swap and move accordingly
            while (cols[0] < n - frame_holder) {
                int temp = matrix[rows[0]][cols[0]];
                matrix[rows[0]][cols[0]] = matrix[rows[3]][cols[3]];
                matrix[rows[3]][cols[3]] = matrix[rows[2]][cols[2]];
                matrix[rows[2]][cols[2]] = matrix[rows[1]][cols[1]];
                matrix[rows[1]][cols[1]] = temp;
                cols[0]++;
                rows[1]++;
                cols[2]--;
                rows[3]--;
            }
            frame_holder++;
        }
    }
}
