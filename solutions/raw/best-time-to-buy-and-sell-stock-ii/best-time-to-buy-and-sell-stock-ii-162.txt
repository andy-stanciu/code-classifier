class Solution {

    /**
     * Max profit till day, given this action can be performed next
     */
    public int maxProfit(int[] prices, int day, int action, int[][] dp) {
        /* All days exhausted, no transactions allowed, return 0 */
        if (day >= prices.length)
            return 0;
        if (dp[day][action] != -1)
            return dp[day][action];
        int tradeMax = Integer.MIN_VALUE;
        int notTradeMax = Integer.MIN_VALUE;
        /**
         * action == 0 : Buy | 1 : sell
         */
        if (action == 0) {
            /**
             * buying price + recursion()
             */
            tradeMax = -prices[day] + maxProfit(prices, day + 1, 1, dp);
            notTradeMax = 0 + maxProfit(prices, day + 1, 0, dp);
        } else {
            /**
             * Selling profit + recursion()
             */
            tradeMax = +prices[day] + maxProfit(prices, day + 1, 0, dp);
            notTradeMax = 0 + maxProfit(prices, day + 1, 1, dp);
        }
        return dp[day][action] = Math.max(tradeMax, notTradeMax);
    }

    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n][2];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        /**
         * 0 : buy, 1 : sell
         */
        return maxProfit(prices, 0, 0, dp);
    }
}
