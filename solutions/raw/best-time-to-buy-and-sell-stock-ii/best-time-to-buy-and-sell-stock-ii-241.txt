class Solution {

    public int maxProfit(int[] prices) {
        int[][] dp = new int[prices.length][2];
        for (int[] i : dp) {
            Arrays.fill(i, -1);
        }
        return buyAndSellStocks(prices, 0, 0, dp);
    }

    public int buyAndSellStocks(int[] prices, int index, int track, int[][] dp) {
        if (index >= prices.length) {
            return 0;
        }
        if (dp[index][track] != -1) {
            return dp[index][track];
        }
        int profit = 0;
        if (track == 0) {
            dp[index][track] = profit = Math.max(-prices[index] + buyAndSellStocks(prices, index + 1, 1, dp), buyAndSellStocks(prices, index + 1, 0, dp));
        } else if (track == 1) {
            dp[index][track] = profit = Math.max(prices[index] + buyAndSellStocks(prices, index + 1, 0, dp), buyAndSellStocks(prices, index + 1, 1, dp));
        }
        return dp[index][track] = profit;
    }
}
