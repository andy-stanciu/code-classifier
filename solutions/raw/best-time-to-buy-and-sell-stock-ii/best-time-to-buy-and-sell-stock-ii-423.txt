class Solution {

    public int maxProfit(int[] prices) {
        // we can buy and sell stock any number of time
        int[][] dp = new int[prices.length][2];
        for (int[] a : dp) Arrays.fill(a, -1);
        return profit(0, prices, 0, dp);
    }

    public int profit(int index, int[] prices, int buy, int[][] dp) {
        //base case
        if (index == prices.length)
            return 0;
        if (dp[index][buy] != -1)
            return dp[index][buy];
        int maxProfit = 0;
        if (buy == 0) {
            //here we either choose to buy ( if bought then we will loose capital -prices[index], or we can choose not to buy)
            maxProfit = Integer.max(-prices[index] + profit(index + 1, prices, 1, dp), profit(index + 1, prices, 0, dp));
        } else {
            // similarly if we can either choose to sell at index( if choosen to sell we gain capital prices[index]), or we can choose to sell at another index
            maxProfit = Integer.max(prices[index] + profit(index + 1, prices, 0, dp), profit(index + 1, prices, 1, dp));
        }
        return dp[index][buy] = maxProfit;
    }
}
