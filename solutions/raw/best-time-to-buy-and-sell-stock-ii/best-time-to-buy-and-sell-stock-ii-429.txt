class Solution {

    public int maxProfit(int[] prices) {
        int n = prices.length;
        // Initialize a 2D dp array with -1 to indicate uncomputed states
        int[][] dp = new int[n][2];
        for (int[] x : dp) {
            Arrays.fill(x, -1);
        }
        // Start the helper function from day 0 with the ability to buy
        return helper(0, 1, n, prices, dp);
    }

    public int helper(int ind, int buy, int n, int[] prices, int[][] dp) {
        // Base case: if we\'ve processed all days, no profit can be made
        if (ind == n) {
            return 0;
        }
        // If we\'ve already computed this state, return the cached result
        if (dp[ind][buy] != -1) {
            return dp[ind][buy];
        }
        int profit = 0;
        if (buy == 1) {
            // Choice to buy or skip buying
            // Buy stock
            // Buy stock
            // Skip buying
            profit = Math.max(-prices[ind] + helper(ind + 1, 0, n, prices, dp), helper(ind + 1, 1, n, prices, dp));
        } else {
            // Choice to sell or skip selling
            // Sell stock
            // Sell stock
            // Skip selling
            profit = Math.max(prices[ind] + helper(ind + 1, 1, n, prices, dp), helper(ind + 1, 0, n, prices, dp));
        }
        // Cache the computed result
        dp[ind][buy] = profit;
        return profit;
    }
}
