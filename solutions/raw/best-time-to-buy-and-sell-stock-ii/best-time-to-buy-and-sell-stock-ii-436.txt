class Solution {

    public int maxProfit(int[] p) {
        int n = p.length;
        int[][] dp = new int[n][2];
        for (int[] a : dp) Arrays.fill(a, -1);
        return helper(p, n, 0, 0, dp);
    }

    private int helper(int[] p, int n, int i, int buy, int[][] dp) {
        if (i == n) {
            return 0;
        }
        ;
        if (dp[i][buy] != -1)
            return dp[i][buy];
        if (buy == 0) {
            return dp[i][buy] = Math.max(-p[i] + helper(p, n, i + 1, 1, dp), helper(p, n, i + 1, 0, dp));
        } else {
            return dp[i][buy] = Math.max(p[i] + helper(p, n, i + 1, 0, dp), helper(p, n, i + 1, 1, dp));
        }
    }
}
