class Solution {

    public List<List<Integer>> generate(int numRows) {
        // result 2D matrix
        List<List<Integer>> mat = new ArrayList<>();
        for (int i = 0; i < numRows; i++) {
            // adding 1D arr for each row
            List<Integer> arr = new ArrayList<>();
            for (// initiates the pascal triangle with all zeros
            // initiates the pascal triangle with all zeros
            // initiates the pascal triangle with all zeros
            int j = 0; j < i + 1; j++) arr.add(0);
            mat.add(arr);
        }
        for (int i = 0; i < numRows; i++) {
            // sets the outer triangle elements to 1 (first and last index for each row)
            mat.get(i).set(0, 1);
            if (i == 0)
                continue;
            mat.get(i).set(mat.get(i).size() - 1, 1);
        }
        for (// computing the desired element by the previous upper row
        // computing the desired element by the previous upper row
        // computing the desired element by the previous upper row
        int i = 2; i < numRows; i++) {
            for (int j = 1; j < mat.get(i).size() - 1; j++) {
                int x = mat.get(i - 1).get(j - 1) + mat.get(i - 1).get(j);
                mat.get(i).set(j, x);
            }
        }
        return mat;
    }
}
