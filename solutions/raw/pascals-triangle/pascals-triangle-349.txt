class Solution {

    public List<List<Integer>> generate(int n) {
        //A list named arr1 is created to hold all the rows of Pascal\'s Triangle.
        List<List<Integer>> arr1 = new ArrayList<>();
        int s = 1;
        //A loop runs from 1 to n (inclusive)
        // to create each row of Pascal\'s Triangle.
        // s is set to 1 at the start of each row.
        // A new list named arr is created to hold the current row\'s values.
        for (int i = 1; i <= n; i++) {
            s = 1;
            List<Integer> arr = new ArrayList<>();
            //Inner Loop
            //             A loop runs from 0 to i-1 to fill the current row.
            // If the position j is the first or last in the row (j == 0 or j == i-1), 1 is added to the row.
            // Otherwise, the value is calculated using the formula s = (s * (i - j)) / j, which generates the next number in the row based on the previous value s.
            // This formula comes from the binomial coefficient formula.
            for (int j = 0; j < i; j++) {
                if (j == 0 || j == i - 1)
                    arr.add(1);
                else {
                    s = (s * (i - j)) / j;
                    arr.add(s);
                }
            }
            arr1.add(arr);
        }
        return arr1;
    }
}
