class Solution {

    public List<List<Integer>> generate(int numRows) {
        // Create a list to store the Pascal\'s triangle
        List<List<Integer>> result = new ArrayList<>();
        // Base case: if numRows is 0, return an empty list
        if (numRows == 0) {
            return result;
        }
        // Initialize the first row with a single 1
        List<Integer> firstRow = new ArrayList<>();
        firstRow.add(1);
        result.add(firstRow);
        // Generate subsequent rows
        for (int i = 1; i < numRows; i++) {
            // Get the previous row
            List<Integer> prevRow = result.get(i - 1);
            // Create a new list for the current row
            List<Integer> currentRow = new ArrayList<>();
            // The first element of each row is always 1
            currentRow.add(1);
            // Calculate the middle elements by summing corresponding elements from the previous row
            for (int j = 1; j < i; j++) {
                int num = prevRow.get(j - 1) + prevRow.get(j);
                currentRow.add(num);
            }
            // The last element of each row is always 1
            currentRow.add(1);
            // Add the current row to the result
            result.add(currentRow);
        }
        return result;
    }
}
