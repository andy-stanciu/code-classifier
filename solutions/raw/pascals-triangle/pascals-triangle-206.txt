class Solution {

    public List<List<Integer>> generate(int numRows) {
        // take list of lists (it is expected in the output)
        List<List<Integer>> triangle = new ArrayList<>();
        // edge case: if numRows = 0 simply return the list
        if (numRows == 0)
            return triangle;
        //add an empty list in our triangle list
        triangle.add(new ArrayList<>());
        // first row will always be 1, which is at index o so we are adding 1
        triangle.get(0).add(1);
        for (int i = 1; i < numRows; i++) {
            //since we already added 1 at index 0 we are starting from index 1
            // this will start from row 1
            List<Integer> row = new ArrayList<>();
            // prevrow is 1 as we already set it to 1.
            List<Integer> prevRow = triangle.get(i - 1);
            // first element of any row will always be 1
            row.add(1);
            for (int j = 1; j < i; j++) {
                // this will give us the middle element
                // sum of previous elements to store in the middle of the row
                row.add(prevRow.get(j - 1) + prevRow.get(j));
            }
            // last element of any row will always be 1
            row.add(1);
            // simply add the complete list of row in triangle
            triangle.add(row);
        }
        return triangle;
    }
}
