class Solution {

    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> triangle = new ArrayList<>();
        if (numRows == 0)
            return triangle;
        //we create the first row so that we don\'t go index out of bound
        List<Integer> firstRow = new ArrayList<>();
        //the first row is always 1
        firstRow.add(1);
        //we just add that row to triangle
        triangle.add(firstRow);
        //the outer loop takes care of rows
        //i starts from 1 bcz we already added first row
        for (int i = 1; i < numRows; i++) {
            //we get the prev row since all calc are based on prev row
            List<Integer> prevRow = triangle.get(i - 1);
            //we create a new row that we\'ll add
            List<Integer> row = new ArrayList<>();
            //we know first elem is always 1 so add it
            row.add(1);
            //inner loop for columns
            //j starts from 1 cz we already added first elem
            //j goes till i bcz the length of triangle row is equal to row index
            for (int j = 1; j < i; j++) {
                //get prevrow elem j-1 and j add them and add to row
                row.add(prevRow.get(j - 1) + prevRow.get(j));
            }
            //the last elem
            row.add(1);
            //final touch
            triangle.add(row);
        }
        return triangle;
    }
}
