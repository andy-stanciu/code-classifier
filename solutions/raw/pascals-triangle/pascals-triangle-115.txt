class Solution {

    public List<List<Integer>> generate(int numRows) {
        // This is the List I will use to do DP
        List<List<Integer>> triangle = new ArrayList<>();
        // give the algo a start point
        triangle.add(Arrays.asList(1));
        for (int i = 1; i < numRows; i++) {
            // define a new Array so that I dont run into OOB (may also use a temp array if u want).
            triangle.add(new ArrayList<>());
            for (int j = 0; j <= i; j++) {
                if (j == 0 || i == 0 || j == i) {
                    // base conditions as detailed earlier
                    triangle.get(i).add(1);
                } else {
                    // refer back to recursive formula.
                    triangle.get(i).add(triangle.get(i - 1).get(j) + triangle.get(i - 1).get(j - 1));
                }
            }
        }
        return triangle;
    }
}
