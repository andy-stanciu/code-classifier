class Solution {

    public List<List<Integer>> generate(int numRows) {
        // Create a list to store the rows of Pascal\'s Triangle
        List<List<Integer>> l = new ArrayList<>();
        // Iterate through each row up to the specified number of rows (numRows)
        for (int i = 0; i < numRows; i++) {
            // Create an array to represent the current row
            int[] dp = new int[i + 1];
            // Set the first and last elements of the row to 1
            dp[0] = 1;
            dp[dp.length - 1] = 1;
            // Calculate the values for the non-edge elements in the row
            for (int j = 1; j < dp.length - 1; j++) {
                // The value at position j is the sum of the corresponding elements from the previous row
                dp[j] = l.get(i - 1).get(j - 1) + l.get(i - 1).get(j);
            }
            // Convert the array to a List and add it to the list of lists
            List<Integer> rowList = new ArrayList<>();
            for (int num : dp) {
                rowList.add(num);
            }
            l.add(rowList);
        }
        // Return the list of lists representing Pascal\'s Triangle
        return l;
    }
}
