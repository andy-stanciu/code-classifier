class Solution {

    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> triangle = new ArrayList<>();
        if (numRows == 1) {
            triangle.add(new ArrayList<>(Arrays.asList(1)));
            return triangle;
        }
        if (numRows == 2) {
            triangle.add(new ArrayList<>(Arrays.asList(1)));
            triangle.add(new ArrayList<>(Arrays.asList(1, 1)));
            return triangle;
        }
        triangle.add(new ArrayList<>(Arrays.asList(1)));
        triangle.add(new ArrayList<>(Arrays.asList(1, 1)));
        for (int i = 3; i <= numRows; i++) {
            List<Integer> currLevel = new ArrayList<>();
            currLevel.add(1);
            List<Integer> prevLevel = triangle.get(i - 2);
            int j = 0;
            while (j < prevLevel.size() - 1) {
                int player = prevLevel.get(j) + prevLevel.get(j + 1);
                currLevel.add(player);
                j++;
            }
            currLevel.add(1);
            triangle.add(currLevel);
        }
        return triangle;
    }
}
