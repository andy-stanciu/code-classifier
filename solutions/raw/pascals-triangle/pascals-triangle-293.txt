class Solution {

    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> output = new ArrayList<List<Integer>>();
        // base case:
        if (numRows <= 0) {
            return output;
        }
        List<Integer> prev = new ArrayList<>();
        // as pascal\'s triangle always contains it\'s first digit 1.
        prev.add(1);
        output.add(prev);
        // for rest of the rows:
        for (int i = 2; i <= numRows; i++) {
            // list to store curr row
            List<Integer> curr = new ArrayList<>();
            curr.add(1);
            // calculate for next values:
            for (int j = 0; j < prev.size() - 1; j++) {
                curr.add(prev.get(j) + prev.get(j + 1));
            }
            // last value in a triangle row is also always equal to 1
            curr.add(1);
            output.add(curr);
            prev = curr;
        }
        return output;
    }
}
