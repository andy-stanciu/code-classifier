class Solution {

    // Function to generate Pascal\'s Triangle up to numRows
    public List<List<Integer>> generate(int numRows) {
        // Initialize an empty list to hold the entire Pascal\'s Triangle (all rows)
        List<List<Integer>> outer = new ArrayList<>();
        // Loop to generate each row until we have numRows
        while (outer.size() < numRows) {
            // List to hold the current row (inner list)
            List<Integer> inner = new ArrayList<>();
            int i = 0;
            // Loop to generate elements of the current row
            while (i <= outer.size()) {
                // `outer.size()` gives the number of rows created so far
                if (i == 0 || i == outer.size()) {
                    // First and last element in the row is always 1
                    inner.add(1);
                } else {
                    // Sum of the two elements directly above from the previous row
                    inner.add(outer.get(outer.size() - 1).get(i - 1) + outer.get(outer.size() - 1).get(i));
                }
                i++;
            }
            // Add the constructed row to the outer list
            outer.add(inner);
        }
        // Return the entire Pascal\'s Triangle
        return outer;
    }
}
