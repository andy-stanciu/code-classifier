class Solution {

    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> triangle = new ArrayList<>();
        triangle.add(new ArrayList<Integer>());
        // since first element of the triangle will always be 1;
        triangle.get(0).add(1);
        for (int i = 1; i < numRows; i++) {
            List<Integer> row = new ArrayList<>();
            // since we need addition of prev row mid values
            List<Integer> prevRow = triangle.get(i - 1);
            // every row starts with 1.
            row.add(1);
            for (int j = 1; j < i; j++) {
                //sum of digits just above the current index
                row.add(prevRow.get(j - 1) + prevRow.get(j));
            }
            //every row ends with 1.
            row.add(1);
            triangle.add(row);
        }
        return triangle;
    }
}
