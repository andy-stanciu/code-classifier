class Solution {

    public List<List<Integer>> generate(int numRows) {
        // pascal triangel to return
        List<List<Integer>> triangle = new ArrayList<List<Integer>>();
        // Previous row array list
        ArrayList<Integer> prev = new ArrayList<Integer>();
        for (int i = 0; i < numRows; i++) {
            //current row array list
            ArrayList<Integer> curr = new ArrayList<Integer>();
            for (// first & last element always ===  1;
            // first & last element always ===  1;
            // first & last element always ===  1;
            int j = 0; j <= i; j++) if (j == 0 || j == i)
                curr.add(1);
            else
                //otherwise previousRow( preValue + currentValue)
                curr.add(prev.get(j - 1) + prev.get(j));
            // set prev row equal to current row
            prev = curr;
            // update the triangle array with current row value
            triangle.add(curr);
        }
        return triangle;
    }
}
