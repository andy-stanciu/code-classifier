class Solution {

    public int longestConsecutive(int[] nums) {
        Set<Integer> set = Arrays.stream(nums).boxed().collect(Collectors.toSet());
        Set<Integer> visited = new HashSet<>();
        int longest = 0;
        for (int num : nums) {
            longest = Math.max(longest, bfs(set, visited, num));
        }
        return longest;
    }

    private int bfs(Set<Integer> set, Set<Integer> visited, int num) {
        Queue<Integer> queue = new ArrayDeque<>();
        Set<Integer> currentSet = new HashSet<>();
        queue.add(num);
        currentSet.add(num);
        visited.add(num);
        while (!queue.isEmpty()) {
            int current = queue.poll();
            for (int next : List.of(current - 1, current + 1)) {
                if (set.contains(next) && !visited.contains(next)) {
                    queue.add(next);
                    visited.add(next);
                    currentSet.add(next);
                }
            }
        }
        return currentSet.size();
    }
}
