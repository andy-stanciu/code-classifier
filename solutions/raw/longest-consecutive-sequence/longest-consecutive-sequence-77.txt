class Solution {

    boolean[] visited;

    public int longestConsecutive(int[] nums) {
        HashMap<Integer, Integer> hm = new HashMap<>();
        List<List<Integer>> adjList = new ArrayList<>();
        visited = new boolean[nums.length];
        for (int i = 0; i < nums.length; i++) {
            adjList.add(new ArrayList<>());
        }
        for (int i = 0; i < nums.length; i++) {
            if (hm.containsKey(nums[i]))
                continue;
            if (hm.containsKey(nums[i] + 1)) {
                adjList.get(i).add(hm.get(nums[i] + 1));
                adjList.get(hm.get(nums[i] + 1)).add(i);
            }
            if (hm.containsKey(nums[i] - 1)) {
                adjList.get(i).add(hm.get(nums[i] - 1));
                adjList.get(hm.get(nums[i] - 1)).add(i);
            }
            hm.put(nums[i], i);
        }
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            if (!visited[i]) {
                max = Math.max(max, dfs(i, adjList));
            }
        }
        return max;
    }

    public int dfs(int i, List<List<Integer>> adjList) {
        visited[i] = true;
        int count = 0;
        for (int x : adjList.get(i)) {
            if (!visited[x]) {
                count += dfs(x, adjList);
            }
        }
        return 1 + count;
    }
}
