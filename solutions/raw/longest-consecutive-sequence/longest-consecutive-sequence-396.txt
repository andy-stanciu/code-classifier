class Solution {

    /**
     * Here is the summary of the function\'s time complexity:
     *
     * Sorting the array: O(nlogn)
     * Iterating through the array: O(n)
     * Total: O(nlogn)+O(n)=O(nlogn)
     */
    public int longestConsecutive(int[] nums) {
        Arrays.sort(nums);
        if (nums.length == 0) {
            return 0;
        }
        int prev = nums[0];
        int max = Integer.MIN_VALUE;
        int count = 1;
        int n = nums.length;
        for (int i = 1; i < n; i++) {
            if (prev == nums[i]) {
                continue;
            }
            if (prev + 1 == nums[i]) {
                count++;
            } else {
                max = Math.max(max, count);
                count = 1;
            }
            prev = nums[i];
        }
        max = Math.max(max, count);
        return max;
    }
}
