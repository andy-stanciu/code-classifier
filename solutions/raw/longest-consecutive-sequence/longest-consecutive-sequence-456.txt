class Solution {

    public int longestConsecutive(int[] nums) {
        //if empty array then return 0
        if (nums.length == 0)
            return 0;
        // if the array is not empty then there will be at least continuos sequence(all elements are unique)
        int ans = 1;
        int currAns = 1;
        //sorting the array
        Arrays.sort(nums);
        for (int i = 1; i < nums.length; i++) {
            // if elemets repeat then we can keep our count as the sorted array will group them all together but we want a sequence where the indexes in the original array dont matter.
            if (nums[i] == nums[i - 1]) {
                continue;
            }
            // if sequence is continuos then increment the currAns counter
            if (nums[i] == nums[i - 1] + 1) {
                currAns++;
            }
            // if sequence is broken then store the maximum of ans and currAns count in ans and then reset the currAns to start counting a new potentially longer sequence.
            if (nums[i] != nums[i - 1] + 1) {
                ans = Math.max(ans, currAns);
                currAns = 1;
            }
            // after the entire loop is over we choose the max value as the answer.
            ans = Math.max(ans, currAns);
        }
        return ans;
    }
}
