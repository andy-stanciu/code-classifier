class Solution {

    public int longestConsecutive(int[] nums) {
        if (nums.length == 0)
            return 0;
        boolean[] visited = new boolean[nums.length];
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            map.put(nums[i], i);
        }
        int max = 1;
        for (int j = 0; j < nums.length; j++) {
            int current = dfsConsecutive(nums, map, visited, nums[j]);
            max = Math.max(max, current);
        }
        return max;
    }

    public int dfsConsecutive(int[] nums, Map<Integer, Integer> map, boolean[] visited, int start) {
        if (!map.containsKey(start))
            return 0;
        int index = map.get(start);
        if (visited[index])
            return 0;
        visited[index] = true;
        return 1 + dfsConsecutive(nums, map, visited, start - 1) + dfsConsecutive(nums, map, visited, start + 1);
    }
}
