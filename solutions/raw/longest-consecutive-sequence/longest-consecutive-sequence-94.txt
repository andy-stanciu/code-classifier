class Solution {

    public int longestConsecutive(int[] nums) {
        Map<Integer, int[]> boundToIntervalMap = new HashMap<>();
        for (int num : nums) {
            if (!boundToIntervalMap.containsKey(num)) {
                int[] previousInterval = boundToIntervalMap.getOrDefault(num - 1, new int[] { num, num });
                int[] nextInterval = boundToIntervalMap.getOrDefault(num + 1, new int[] { num, num });
                int[] currentInterval = new int[2];
                currentInterval[0] = Math.min(previousInterval[0], nextInterval[0]);
                if (previousInterval[0] != currentInterval[0])
                    boundToIntervalMap.remove(previousInterval[0]);
                else if (nextInterval[0] != currentInterval[0])
                    boundToIntervalMap.remove(nextInterval[0]);
                currentInterval[1] = Math.max(previousInterval[1], nextInterval[1]);
                if (previousInterval[1] != currentInterval[1])
                    boundToIntervalMap.remove(previousInterval[1]);
                else if (nextInterval[1] != currentInterval[1])
                    boundToIntervalMap.remove(nextInterval[1]);
                boundToIntervalMap.put(currentInterval[0], currentInterval);
                boundToIntervalMap.put(currentInterval[1], currentInterval);
            }
        }
        int maxLength = 0;
        for (int bound : boundToIntervalMap.keySet()) {
            int[] interval = boundToIntervalMap.get(bound);
            maxLength = Math.max(maxLength, interval[1] - interval[0] + 1);
        }
        return maxLength;
    }
}
