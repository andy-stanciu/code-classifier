class Solution {

    public int longestConsecutive(int[] arr) {
        if (arr.length == 0)
            return 0;
        //Sorting the array
        Arrays.sort(arr);
        int ans = 1, count = 1, n = arr.length;
        ArrayList<Integer> list = new ArrayList<>();
        list.add(arr[0]);
        for (int i = 1; i < n; i++) {
            if (arr[i] != arr[i - 1])
                list.add(arr[i]);
            //If the consecutive elements are different, then only we are adding them to the arraylist.
            //This way, all the duplicates can be removed.
        }
        int length = list.size();
        for (int i = 0; i < length - 1; i++) {
            if (list.get(i) + 1 == list.get(i + 1)) {
                //Now if adding 1 to the current element equals the next element in the array, these are consecutive elements are increasing the count
                count++;
            } else {
                //Else count is back to one as one element occurs at leaset once.
                count = 1;
            }
            //Taking the maximum consecutive numbers as ans
            ans = Math.max(count, ans);
        }
        return ans;
    }
}
