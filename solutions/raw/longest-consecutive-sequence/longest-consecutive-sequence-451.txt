class Solution {

    public int longestConsecutive(int[] nums) {
        int n = nums.length;
        if (n == 0)
            return 0;
        int longest = 1;
        Set<Integer> set = new HashSet<>();
        // put all the array elements into set
        for (int i = 0; i < n; i++) {
            set.add(nums[i]);
        }
        // Find the longest sequence
        for (int it : set) {
            // if \'it\' is a starting number
            if (!set.contains(it - 1)) {
                // find consecutive numbers
                int cnt = 1;
                int x = it;
                while (set.contains(x + 1)) {
                    x = x + 1;
                    cnt = cnt + 1;
                }
                longest = Math.max(longest, cnt);
            }
        }
        return longest;
    }
}
// if(nums.length==0||nums.length==1){
//     return nums.length;
// }
// Arrays.sort(nums);
// int c=1;
// int startSeq=Integer.MIN_VALUE;
// int fCount=Integer.MIN_VALUE;
// for(int i=0;i<nums.length;i++){
//     if(startSeq==nums[i]-1){
//         startSeq=nums[i];
//         c++;
//     }
//     else if(startSeq==nums[i]){
//         continue;
//     }
//     else{
//         startSeq=nums[i];
//         fCount=Math.max(fCount,c);
//         c=1;
//     }
// }
// fCount=Math.max(fCount,c);
// return fCount;
