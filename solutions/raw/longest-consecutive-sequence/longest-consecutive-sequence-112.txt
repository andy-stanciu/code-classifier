class Solution {

    // Approach 1 : Hashing
    // public int longestConsecutive(int[] nums) {
    //     Set<Integer> hset = new HashSet<>();
    //     for(int x : nums)
    //         hset.add(x);
    //     int n = nums.length, res = 0;
    //     for(int i=0; i<n; i++) {
    //         if(!hset.contains(nums[i]-1)) {
    //             int seqElement = nums[i], count = 0;
    //             while(hset.contains(seqElement)) {
    //                 count++;
    //                 seqElement++;
    //             }
    //             res = Math.max(res, count);
    //         }
    //     }
    //     return res;
    // }
    // Approach 2 : Sorting
    public int longestConsecutive(int[] nums) {
        if (nums.length == 0)
            return 0;
        Arrays.sort(nums);
        int count = 1, res = 1, seqElement = nums[0], n = nums.length;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == seqElement)
                continue;
            else if (nums[i] == (seqElement + 1)) {
                count++;
                seqElement++;
            } else {
                res = Math.max(res, count);
                count = 1;
                seqElement = nums[i];
            }
        }
        return Math.max(res, count);
    }
}
