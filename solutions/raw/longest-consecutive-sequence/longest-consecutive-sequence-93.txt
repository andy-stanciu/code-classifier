// its O(3n) time complexity. or we can can say it is 0(n).
class Solution {

    public int longestConsecutive(int[] nums) {
        int n = nums.length;
        int max = 0;
        HashSet<Integer> set = new HashSet<>();
        for (int i = 0; i < n; i++) {
            set.add(nums[i]);
        }
        for (int num : nums) {
            if (!set.contains(num - 1)) {
                int currNum = num;
                int count = 1;
                while (set.contains(currNum + 1)) {
                    count++;
                    currNum++;
                }
                max = Math.max(max, count);
            }
        }
        return max;
    }
}
// nlogn complexity - as we are sorting the array and then itterating it n times.
// class Solution {
//     public int longestConsecutive(int[] nums) {
//         int max = 0;
//         if(nums.length != 0) {
//          Arrays.sort(nums);
//          int currNum = nums[0];
//          int count = 1;
//          max = 1;
//          for (int i = 1; i < nums.length; i++) {
//              if(nums[i] == currNum) continue;
//              if(nums[i] == currNum+1) {
//                  currNum = nums[i];
//                  count++;
//              }else {
//                  currNum = nums[i];
//                  count = 1;
//              }
//              max = Math.max(max, count);
//          }
//         }
//         return max;
//     }
// }
