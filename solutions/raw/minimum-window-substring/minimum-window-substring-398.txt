class Solution {

    public String minWindow(String s, String t) {
        if (s.isEmpty() || t.isEmpty() || s.length() < t.length()) {
            return "";
        }
        HashMap<Character, Integer> tCharMap = new HashMap<>();
        for (int i = 0; i < t.length(); i++) {
            tCharMap.put(t.charAt(i), tCharMap.getOrDefault(t.charAt(i), 0) + 1);
        }
        int count = tCharMap.size();
        int left = 0, right = 0, minLen = Integer.MAX_VALUE;
        char ch;
        String subStr = "";
        while (right < s.length()) {
            ch = s.charAt(right);
            if (tCharMap.containsKey(ch)) {
                tCharMap.put(ch, tCharMap.get(ch) - 1);
                if (tCharMap.get(ch) == 0) {
                    count--;
                }
            }
            if (count == 0) {
                while (count == 0) {
                    if (right - left + 1 < minLen) {
                        minLen = Math.min(right - left + 1, minLen);
                        subStr = s.substring(left, right + 1);
                    }
                    ch = s.charAt(left);
                    if (tCharMap.containsKey(ch)) {
                        tCharMap.put(ch, tCharMap.get(ch) + 1);
                        if (tCharMap.get(ch) == 1) {
                            count++;
                        }
                    }
                    left++;
                }
            }
            right++;
        }
        return subStr;
    }
}
