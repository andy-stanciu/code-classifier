class Solution {

    public String minWindow(String s, String t) {
        /*
        if(s.length()<t.length()){
            return "";
        }
        int left=0;
        int right=0;
        HashMap<Character,Integer>map=new HashMap<>();
        for(char i:t.toCharArray()){
            map.put(i,map.getOrDefault(i,0)+1);
        }
        int n=s.length();
        int min=Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            if(!map.containsKey(s.charAt(i))){
                continue;
            }
            StringBuilder sb=new StringBuilder(t);
            for(int j=i;j<n;j++){
                if(!map.containsKey(s.charAt(j))){
                    continue;
                }
                for (int k = 0; k < sb.length(); k++) {
                    if (sb.charAt(k) ==s.charAt(j) ) {
                        sb.deleteCharAt(k);
                        break;
                    }
                }
                if(sb.length()==0){
                    
                    int len=j-i;
                    if(min>len){
                        min=len;
                        left=i;
                        right=j;
                    }
                    break;
                }
            }
        }
        return min!=Integer.MAX_VALUE?s.substring(left,right+1):"";
        */
        if (s.length() < t.length()) {
            return "";
        }
        HashMap<Character, Integer> map = new HashMap<>();
        for (char c : t.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        int n = s.length();
        int left = 0;
        int right = 0;
        int min = Integer.MAX_VALUE;
        int i = 0;
        int j = 0;
        while (j < n) {
            char c = s.charAt(j);
            if (map.containsKey(c)) {
                map.put(c, map.get(c) - 1);
            }
            while (allZero(map)) {
                int len = j - i + 1;
                if (len < min) {
                    min = len;
                    left = i;
                    right = j;
                }
                char ch = s.charAt(i);
                if (map.containsKey(ch)) {
                    map.put(ch, map.get(ch) + 1);
                }
                i++;
            }
            j++;
        }
        return min != Integer.MAX_VALUE ? s.substring(left, right + 1) : "";
    }

    boolean allZero(HashMap<Character, Integer> map) {
        for (int k : map.values()) {
            if (k > 0) {
                return false;
            }
        }
        return true;
    }
}
