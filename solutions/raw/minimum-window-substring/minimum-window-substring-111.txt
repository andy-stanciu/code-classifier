class Solution {

    public String minWindow(String s, String t) {
        // form the pattern as hashmap
        Map<Character, Integer> pattern = new HashMap<>();
        for (Character c : t.toCharArray()) {
            if (pattern.get(c) != null) {
                pattern.put(c, pattern.get(c) + 1);
            } else {
                pattern.put(c, 1);
            }
        }
        // find the pattern map in given string
        int sp = 0;
        int bestLength = 0;
        int bsp = -1;
        int count = pattern.size();
        //ADOBECODEBANC
        for (int i = 0; i < s.length(); i++) {
            Character cs = s.charAt(i);
            if (pattern.get(cs) == null) {
                continue;
            }
            pattern.put(cs, pattern.get(cs) - 1);
            if (pattern.get(cs) == 0) {
                if (sp == -1) {
                    sp = i;
                }
                count--;
                while (count == 0) {
                    int length = i - sp + 1;
                    if (bestLength == 0 || bestLength > length) {
                        bestLength = length;
                        bsp = sp;
                    }
                    Character startChar = s.charAt(sp);
                    if (pattern.get(startChar) != null) {
                        pattern.merge(startChar, 1, Integer::sum);
                        if (pattern.get(startChar) > 0)
                            count++;
                    }
                    sp++;
                }
            }
        }
        if (bsp == -1) {
            return "";
        } else {
            return s.substring(bsp, bsp + bestLength);
        }
    }
}
