class Solution {

    public String minWindow(String s, String t) {
        if (s == null || t == null || s.length() == 0 || t.length() == 0 || s.length() < t.length()) {
            return "";
        }
        // setting target
        Map<Character, Integer> targetMap = new HashMap<>();
        for (char c : t.toCharArray()) {
            targetMap.put(c, targetMap.getOrDefault(c, 0) + 1);
        }
        int left = 0, right = 0, minLeft = 0, minLen = Integer.MAX_VALUE, count = 0;
        while (right < s.length()) {
            char rightChar = s.charAt(right);
            if (targetMap.containsKey(rightChar)) {
                targetMap.put(rightChar, targetMap.get(rightChar) - 1);
                if (targetMap.get(rightChar) >= 0) {
                    count++;
                }
            }
            right++;
            // Check if target is achieved
            while (count == t.length()) {
                if (right - left < minLen) {
                    minLeft = left;
                    minLen = right - left;
                }
                char leftChar = s.charAt(left);
                if (targetMap.containsKey(leftChar)) {
                    targetMap.put(leftChar, targetMap.get(leftChar) + 1);
                    if (targetMap.get(leftChar) > 0) {
                        count--;
                    }
                }
                left++;
            }
        }
        return minLen == Integer.MAX_VALUE ? "" : s.substring(minLeft, minLeft + minLen);
    }
}
// Time: O(s.length)
// Space: O(t.length)
