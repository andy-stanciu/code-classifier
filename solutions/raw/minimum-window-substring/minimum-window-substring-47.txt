class Solution {

    public String minWindow(String s, String t) {
        if (s.length() == 0 || t.length() == 0 || s.length() < t.length()) {
            return "";
        }
        // Map which keeps a count of all the unique characters in t.
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < t.length(); i++) {
            map.put(t.charAt(i), map.getOrDefault(t.charAt(i), 0) + 1);
        }
        // Number of unique characters in t, which need to be present in the desired window.
        int required = map.size();
        // Dictionary which keeps a count of all the unique characters in the current window.
        HashMap<Character, Integer> window = new HashMap<>();
        int l = 0, r = 0, formed = 0;
        // formed is used to keep track of how many unique characters in t
        // are present in the current window in its desired frequency.
        // e.g. if t is "AABC" then the window must have two A\'s, one B and one C.
        // Thus formed would be = 3 when all these conditions are met.
        int[] ans = { -1, 0, 0 };
        // ans list of the form (window length, left, right)
        while (r < s.length()) {
            // Add one character from the right to the window
            char c = s.charAt(r);
            window.put(c, window.getOrDefault(c, 0) + 1);
            // If the frequency of the current character added equals to the
            // desired count in t then increment the formed count by 1.
            if (map.containsKey(c) && window.get(c).intValue() == map.get(c).intValue()) {
                formed++;
            }
            // Try and contract the window till the point where it ceases to be \'desirable\'.
            while (l <= r && formed == required) {
                c = s.charAt(l);
                // Save the smallest window until now.
                if (ans[0] == -1 || r - l + 1 < ans[0]) {
                    ans[0] = r - l + 1;
                    ans[1] = l;
                    ans[2] = r;
                }
                // The character at the position pointed by the
                // `Left` pointer is no longer a part of the window.
                window.put(c, window.get(c) - 1);
                if (map.containsKey(c) && window.get(c).intValue() < map.get(c).intValue()) {
                    formed--;
                }
                l++;
            }
            r++;
        }
        return ans[0] == -1 ? "" : s.substring(ans[1], ans[2] + 1);
    }
}
