class Solution {

    public String minWindow(String s, String t) {
        if (s == null || t == null || s.length() < t.length()) {
            return "";
        }
        HashMap<Character, Integer> tmap = new HashMap<>();
        for (int i = 0; i < t.length(); i++) {
            char c = t.charAt(i);
            tmap.put(c, tmap.getOrDefault(c, 0) + 1);
        }
        int l = 0;
        int req = tmap.size();
        HashMap<Character, Integer> count = new HashMap<>();
        int min = Integer.MAX_VALUE;
        int[] result = { -1, -1 };
        for (int r = 0; r < s.length(); r++) {
            char ch = s.charAt(r);
            count.put(ch, count.getOrDefault(ch, 0) + 1);
            if (tmap.containsKey(ch) && count.get(ch).intValue() == tmap.get(ch).intValue()) {
                req--;
            }
            while (l <= r && req == 0) {
                ch = s.charAt(l);
                if (min > r - l + 1) {
                    result[0] = l;
                    result[1] = r;
                    min = r - l + 1;
                }
                count.put(ch, count.getOrDefault(ch, 0) - 1);
                l++;
                if (tmap.containsKey(ch) && count.get(ch).intValue() < tmap.get(ch).intValue()) {
                    req++;
                }
            }
        }
        return result[0] == -1 ? "" : s.substring(result[0], result[1] + 1);
    }
}
