class Solution {

    public String minWindow(String s, String t) {
        HashMap<Character, Integer> child = new HashMap<>();
        HashMap<Character, Integer> parent = new HashMap<>();
        int left = -1, right = -1, match = 0;
        String window = "";
        for (int i = 0; i < t.length(); i++) {
            char c = t.charAt(i);
            //Child frequency map
            child.put(c, child.getOrDefault(c, 0) + 1);
        }
        while (true) {
            boolean f1 = false, f2 = false;
            while (right < s.length() - 1 && match < t.length()) {
                right++;
                char c = s.charAt(right);
                // Acquiring characters till
                parent.put(c, parent.getOrDefault(c, 0) + 1);
                if (// match count is equal
                parent.getOrDefault(c, 0) <= child.getOrDefault(c, 0))
                    match++;
                f1 = true;
            }
            while (left < right && match == t.length()) {
                String potstring = s.substring(left + 1, right + 1);
                if (window.length() == 0 || window.length() > potstring.length())
                    //Calculating length of window
                    window = potstring;
                left++;
                char c = s.charAt(left);
                parent.put(c, parent.getOrDefault(c, 0) - 1);
                if (//Releasing characters by
                parent.get(c) == 0)
                    //left pointer for finding smallest window
                    parent.remove(c);
                if (parent.getOrDefault(c, 0) < child.getOrDefault(c, 0))
                    match--;
                f2 = true;
            }
            if (f1 == false && f2 == false)
                break;
        }
        return window;
    }
}
