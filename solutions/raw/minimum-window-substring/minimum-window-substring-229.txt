class Solution {

    public String minWindow(String s, String t) {
        // If s is equal to t, return t
        if (s.equals(t)) {
            return t;
        }
        // Initialize a StringBuilder to store the minimum window substring
        StringBuilder sb = new StringBuilder();
        // Create a HashMap to store characters of t and their frequencies
        HashMap<Character, Integer> hm = new HashMap<>();
        // Initialize variables for two pointers and count of characters in t
        // Left pointer
        int i = 0;
        // Right pointer
        int j = 0;
        // Count of characters in t
        int count = 0;
        // Convert t to a character array
        char[] crr = s.toCharArray();
        // Populate the hashmap with characters from t and their frequencies
        for (char c : t.toCharArray()) {
            hm.put(c, hm.getOrDefault(c, 0) + 1);
            if (hm.get(c) > 0) {
                count++;
            }
        }
        // Loop through the string s
        while (j < s.length()) {
            // If the current character is in t
            if (hm.containsKey(crr[j])) {
                // Decrease the frequency of the current character
                hm.put(crr[j], hm.get(crr[j]) - 1);
                // If the frequency becomes >= 0, it means we found a required character
                if (hm.get(crr[j]) >= 0) {
                    count--;
                }
            }
            // If all characters from t are found
            while (count == 0) {
                // Update the minimum window substring
                if (sb.length() == 0 || j - i + 1 < sb.length()) {
                    // Clear the StringBuilder
                    sb.setLength(0);
                    // Append the new minimum window substring
                    sb.append(s.substring(i, j + 1));
                }
                // Move the left pointer to minimize the window size
                if (hm.containsKey(crr[i])) {
                    // Increase the frequency of the left character
                    hm.put(crr[i], hm.get(crr[i]) + 1);
                    // If the frequency becomes > 0, it means we need more characters from t
                    if (hm.get(crr[i]) > 0) {
                        count++;
                    }
                }
                // Move the left pointer
                i++;
            }
            // Move the right pointer
            j++;
        }
        // Return the minimum window substring
        return sb.toString();
    }
}
