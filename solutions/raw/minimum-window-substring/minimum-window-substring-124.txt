class Solution {

    private char[] needle;

    private int[] letterCounter(final String str, final int limit) {
        var letters = new int[124];
        var iterations = 0;
        for (var letter : str.toCharArray()) {
            if (iterations == limit)
                break;
            letters[letter]++;
            iterations++;
        }
        return letters;
    }

    private boolean doesContainCharacters(final int[] haystackCounter, final int[] needleCounter) {
        for (var needleLetter : needle) {
            if (haystackCounter[needleLetter] < needleCounter[needleLetter])
                return false;
        }
        return true;
    }

    public String minWindow(String s, String t) {
        if (s.length() < t.length()) {
            return "";
        }
        this.needle = t.toCharArray();
        var slidingWindowSize = t.length();
        var windowStartIndex = 0;
        int[] needleCounter = letterCounter(t, t.length());
        int[] haystackCounter;
        char letterToBeDecreased;
        char letterToBeIncreased;
        int letterToBeDecreasedCount;
        while (slidingWindowSize <= s.length()) {
            haystackCounter = letterCounter(s, slidingWindowSize);
            if (doesContainCharacters(haystackCounter, needleCounter)) {
                return s.substring(0, slidingWindowSize);
            }
            windowStartIndex = 1;
            while ((windowStartIndex + slidingWindowSize) <= s.length()) {
                letterToBeDecreased = s.charAt(windowStartIndex - 1);
                letterToBeIncreased = s.charAt(windowStartIndex + slidingWindowSize - 1);
                letterToBeDecreasedCount = haystackCounter[letterToBeDecreased] - 1;
                haystackCounter[letterToBeDecreased] = letterToBeDecreasedCount;
                haystackCounter[letterToBeIncreased]++;
                if (doesContainCharacters(haystackCounter, needleCounter)) {
                    return s.substring(windowStartIndex, windowStartIndex + slidingWindowSize);
                }
                windowStartIndex++;
            }
            slidingWindowSize++;
        }
        return "";
    }
}
