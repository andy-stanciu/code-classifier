class Solution {

    public static String minWindow(String s, String t) {
        // Create a map to store the frequency of characters in t
        Map<Character, Integer> targetMap = new HashMap<>();
        for (char c : t.toCharArray()) {
            targetMap.put(c, targetMap.getOrDefault(c, 0) + 1);
        }
        // Number of unique characters in t
        int required = targetMap.size();
        // Pointers for the sliding window
        int left = 0, right = 0;
        // Number of unique characters formed in the window
        int formed = 0;
        Map<Character, Integer> windowMap = new HashMap<>();
        // Format: length, left, right
        int[] ans = { -1, 0, 0 };
        while (right < s.length()) {
            // Expand the window
            char c = s.charAt(right);
            windowMap.put(c, windowMap.getOrDefault(c, 0) + 1);
            if (targetMap.containsKey(c) && windowMap.get(c).intValue() == targetMap.get(c).intValue()) {
                formed++;
            }
            // Contract the window
            while (left <= right && formed == required) {
                char ch = s.charAt(left);
                // Update the minimum window found so far
                if (ans[0] == -1 || right - left + 1 < ans[0]) {
                    ans[0] = right - left + 1;
                    ans[1] = left;
                    ans[2] = right;
                }
                // Remove the character at the left pointer from the window
                windowMap.put(ch, windowMap.get(ch) - 1);
                if (targetMap.containsKey(ch) && windowMap.get(ch).intValue() < targetMap.get(ch).intValue()) {
                    formed--;
                }
                // Move the left pointer ahead
                left++;
            }
            // Move the right pointer ahead
            right++;
        }
        // Return the minimum window substring
        return ans[0] == -1 ? "" : s.substring(ans[1], ans[2] + 1);
    }
}
