class Solution {

    public String minWindow(String s, String t) {
        Map<Character, Integer> tcount = new HashMap<>();
        String result = "";
        if (t.length() > s.length()) {
            System.out.println(t.length());
            System.out.println(s.length());
            return result;
        }
        for (int i = 0; i < t.length(); i++) {
            tcount.put(t.charAt(i), tcount.getOrDefault(t.charAt(i), 0) + 1);
        }
        int left = 0;
        int right = 0;
        int formed = 0;
        int required = tcount.size();
        Map<Character, Integer> windowCount = new HashMap<>();
        int minLen = Integer.MAX_VALUE;
        int[] minWindow = { -1, 0, 0 };
        while (right < s.length()) {
            char c = s.charAt(right);
            windowCount.put(c, windowCount.getOrDefault(c, 0) + 1);
            if (tcount.containsKey(c) && tcount.get(c).intValue() == windowCount.get(c).intValue()) {
                formed++;
            }
            while (left <= right && formed == required) {
                if (right - left + 1 < minLen) {
                    minLen = right - left + 1;
                    minWindow[0] = left;
                    minWindow[1] = right;
                }
                char cc = s.charAt(left);
                windowCount.put(cc, windowCount.get(cc) - 1);
                if (tcount.containsKey(cc) && tcount.get(cc).intValue() > windowCount.get(cc).intValue()) {
                    formed--;
                }
                left++;
            }
            right++;
        }
        return minWindow[0] == -1 ? "" : s.substring(minWindow[0], minWindow[1] + 1);
    }
}
