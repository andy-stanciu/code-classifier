/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        int nodeCount = 0;
        ListNode slidingWindowNth = null;
        ListNode currentNode = head;
        while (currentNode != null) {
            //since n is 1 based ( not zero based ), matching with the exact count gives us the node
            //one above the node that needs to be removed
            if (nodeCount == n)
                slidingWindowNth = head;
            else if (slidingWindowNth != null)
                slidingWindowNth = slidingWindowNth.next;
            currentNode = currentNode.next;
            nodeCount++;
        }
        if (slidingWindowNth == null)
            head = head.next;
        else
            slidingWindowNth.next = slidingWindowNth.next.next;
        return head;
    }
}
