/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        if (head == null || (head.next == null && n == 1))
            return null;
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prev = dummy;
        ListNode slow = head;
        ListNode fast = head;
        int nodeNumber = 1;
        while (fast != null && fast.next != null) {
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
            nodeNumber++;
        }
        int totalNodes = 0;
        if (fast == null)
            totalNodes = 2 * nodeNumber - 2;
        else
            totalNodes = 2 * nodeNumber - 1;
        int removalIndex = totalNodes - n + 1;
        if (removalIndex < nodeNumber) {
            prev = dummy;
            slow = head;
            nodeNumber = 1;
        }
        while (slow != null) {
            if (removalIndex == nodeNumber) {
                prev.next = node.next;
                break;
            }
            prev = slow;
            slow = slow.next;
            nodeNumber++;
        }
        return dummy.next;
    }
}
