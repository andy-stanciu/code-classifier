class Solution {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        // Check if the list is empty or contains only one node
        if (head == null || head.next == null)
            return null;
        int count = 0;
        ListNode temp = head;
        // Calculate the number of nodes in the list
        while (temp != null) {
            count++;
            temp = temp.next;
        }
        // If the node to be removed is the head, return head.next
        if (count == n) {
            return head.next;
        }
        // Calculate the position of the node to be removed from the beginning of the list
        count = count - n;
        temp = head;
        // Iterate to the node just before the one to be removed
        while (--count != 0) {
            temp = temp.next;
        }
        // Remove the node by updating the pointers
        temp.next = temp.next.next;
        // Return the modified head of the list
        return head;
    }
}
