/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode fast = head;
        ListNode slow = head;
        // Move o ponteiro \'fast\' n passos \xE0 frente
        for (int i = 0; i < n; i++) {
            fast = fast.next;
        }
        // Se o \'fast\' \xE9 null, significa que estamos removendo o primeiro n\xF3 (cabe\xE7a)
        if (fast == null) {
            // Retorna a nova cabe\xE7a
            return head.next;
        }
        // Mover \'fast\' at\xE9 o fim e \'slow\' at\xE9 o n\xF3 anterior ao n\xF3 que queremos remover
        while (fast.next != null) {
            fast = fast.next;
            slow = slow.next;
        }
        // Remove o n\xF3 n-\xE9simo ao final
        slow.next = slow.next.next;
        return head;
    }
}
