/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        int size = 0;
        ListNode temp = head;
        while (temp != null) {
            temp = temp.next;
            size++;
        }
        ListNode prevNode = head;
        int prevNodeidx = (size - n) - 1;
        if (prevNodeidx < 0) {
            //edge when we need to remove head
            return head.next;
        }
        for (int i = 0; i < prevNodeidx; i++) {
            prevNode = prevNode.next;
        }
        prevNode.next = prevNode.next.next;
        return head;
    }
}
//Aprroach 2nd
// public ListNode removeNthFromEnd(ListNode head, int n) {
//     // Create a dummy node to handle edge cases (like removing the head).
//     ListNode dummy = new ListNode(0);
//     dummy.next = head;
//     // Find the size of the linked list.
//     int size = 0;
//     ListNode temp = head;
//     while (temp != null) {
//         temp = temp.next;
//         size++;
//     }
//     // Calculate the index of the previous node (before the node to be removed).
//     int prevNodeIdx = size - n;
//     ListNode prevNode = dummy;  // Start from the dummy node.
//     // Move prevNode to the correct position (one step before the target node).
//     for (int i = 0; i < prevNodeIdx; i++) {
//         prevNode = prevNode.next;
//     }
//     // Remove the target node by skipping it in the list.
//     prevNode.next = prevNode.next.next;
//     // Return the new head of the list (handle the case where head is removed).
//     return dummy.next;
// }
