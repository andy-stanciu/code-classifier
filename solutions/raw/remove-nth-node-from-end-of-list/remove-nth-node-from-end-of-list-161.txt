/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode fast = head;
        ListNode slow = head;
        if (head.next == null) {
            return null;
        }
        //prev at first will be null as head hast not any prev node
        ListNode prev = null;
        while (fast.next != null) {
            //if n==1 it means we need to remove from the end which
            //slow pointer pointing node should be removed
            if (n == 1) {
                prev = slow;
                slow = slow.next;
            } else {
                n--;
            }
            fast = fast.next;
        }
        // if prev still null, it means we remove from the head of the list
        if (prev == null) {
            head = head.next;
            return head;
        } else {
            prev.next = slow.next;
        }
        return head;
    }
}
