/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    private static ListNode removeratpos(int pos, ListNode head) {
        if (pos == 0) {
            // head=currListnode.next;
            return head.next;
        }
        ListNode currListnode = head;
        int c = 0;
        ListNode prev = null;
        while (currListnode != null && c != pos) {
            prev = currListnode;
            currListnode = currListnode.next;
            c++;
        }
        if (currListnode != null) {
            prev.next = currListnode.next;
        }
        return head;
    }

    private static int llegth(ListNode head) {
        int l = 0;
        ListNode current = head;
        while (current != null) {
            current = current.next;
            l++;
        }
        return l;
    }

    private static ListNode removenthnodefromendd(int k, ListNode head) {
        //Remove Nth Node From End of List
        int rem = llegth(head) - k;
        return removeratpos(rem, head);
    }

    public ListNode removeNthFromEnd(ListNode head, int n) {
        return removenthnodefromendd(n, head);
    }
}
