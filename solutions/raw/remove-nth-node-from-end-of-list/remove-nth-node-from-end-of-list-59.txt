/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode p1 = head;
        ListNode p2 = head;
        ListNode prev = head;
        //Base Case
        if (head == null || head.next == null) {
            return null;
        }
        // Reaching P2 to nth Node if exists
        for (int i = 0; i < n; i++) {
            if (p2 == null) {
                return null;
            }
            p2 = p2.next;
        }
        // If p2 is already null, then remove the fist node
        if (p2 == null) {
            head = head.next;
            return head;
        }
        //Else we move p1 to nth node and take its prev pointer
        while (p2 != null) {
            p2 = p2.next;
            prev = p1;
            p1 = p1.next;
        }
        //Remove p1 node
        prev.next = p1.next;
        return head;
    }
}
