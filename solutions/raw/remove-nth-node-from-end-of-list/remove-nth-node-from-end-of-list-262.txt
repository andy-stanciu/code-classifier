/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        //calculating the size of the node
        int size = 0;
        ListNode start = head;
        while (start.next != null) {
            size += 1;
            start = start.next;
        }
        //1 based
        size += 1;
        //if node to be deleted is the first node
        if (size - n == 0) {
            head = head.next;
            return head;
        }
        // Traverse the list again
        // to reach the node just before the one to be removed
        //0 based
        int fromStart = size - n;
        int i = 0;
        ListNode take = head;
        while (i < fromStart - 1) {
            take = take.next;
            i += 1;
        }
        take.next = take.next.next;
        return head;
    }
}
