class Solution {

    ListNode node = null;

    int kkk;

    public void display() {
        int i = 0;
        if (node == null) {
            System.out.println("List is Empty");
        }
        ListNode currnode = node;
        while (currnode != null) {
            i++;
            currnode = currnode.next;
        }
        System.out.println(i + "hello");
        kkk = i;
    }

    public ListNode removeNthFromEnd(int n) {
        if (node == null) {
            System.out.println("List is empty ");
        } else if (kkk == 1) {
            node = null;
        } else if (n == 1) {
            ListNode currnode = node;
            node = currnode.next;
        } else {
            int count = 1;
            ListNode currnode = node;
            ListNode prevnode = null;
            while (currnode != null && count != n) {
                prevnode = currnode;
                count++;
                currnode = currnode.next;
            }
            if (currnode != null && prevnode != null && count == n) {
                prevnode.next = currnode.next;
            }
        }
        return node;
    }

    public ListNode removeNthFromEnd(ListNode head, int n) {
        node = head;
        display();
        int l = kkk - n + 1;
        System.out.println(l + "iii");
        return removeNthFromEnd(l);
    }
}
