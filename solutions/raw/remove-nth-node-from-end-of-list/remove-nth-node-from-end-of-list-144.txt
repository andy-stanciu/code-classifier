class Solution {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        // set runner node n nodes ahead
        ListNode runner = head;
        while (n > 1) {
            n--;
            runner = runner.next;
        }
        // corresponds to the previous node of head
        ListNode prev = new ListNode();
        prev.next = head;
        // we will return the next of prev which will be the head
        // note the original head might also be removed so we cant directly set this as head
        ListNode result = prev;
        // iterate the list until runner is on the last node
        // head will be on the node we need to remove (since runner was move forward n nodes)
        // prev will be the previous node to the one we need to remove
        while (runner != null && runner.next != null) {
            runner = runner.next;
            head = head.next;
            prev = prev.next;
        }
        // since head is the node we need to remove, we need to set prev.next to head.next
        // which will be removing the head node
        prev.next = head.next;
        return result.next;
    }
}
