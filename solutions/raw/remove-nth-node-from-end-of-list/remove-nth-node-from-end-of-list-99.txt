/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode curr = head;
        ListNode prev = null;
        //to calculate num of nodes
        int count = 0;
        while (curr != null) {
            count++;
            curr = curr.next;
        }
        if (count == 1) {
            //since it is the only node we remove it
            return null;
        }
        //pointing curr to first node
        curr = head;
        //to get the node to be removed from the start
        int k = count - n;
        while (k > 0) {
            //to reach the prev node of the node to be removed
            prev = curr;
            // to reach the node to be removed
            curr = curr.next;
            k--;
        }
        if (n == 1) {
            //if the last node is the node to be removed
            prev.next = null;
            return head;
        }
        if (n == count) {
            //if the first node is the node to be removed
            head = head.next;
            return head;
        }
        //Making the next node of the previous node be the node that follows the node to be deleted
        prev.next = curr.next;
        return head;
    }
}
