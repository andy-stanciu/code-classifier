public class Solution {

    public static List<Integer> traverseBoundary(TreeNode root) {
        // Write your code here.
        List<Integer> res = new ArrayList<>();
        if (isLeaf(root) == false)
            res.add(root.data);
        addLeft(root, res);
        addLeaves(root, res);
        addRight(root, res);
        return res;
    }

    static boolean isLeaf(TreeNode root) {
        return (root.left == null) && (root.right == null);
    }

    static void addLeft(TreeNode root, List<Integer> res) {
        TreeNode cur = root.left;
        while (cur != null) {
            if (isLeaf(cur) == false)
                res.add(cur.data);
            if (cur.left != null)
                cur = cur.left;
            else
                cur = cur.right;
        }
    }

    static void addRight(TreeNode root, List<Integer> res) {
        TreeNode cur = root.right;
        int i = 0;
        while (cur != null) {
            if (isLeaf(cur) == false) {
                res.add(res.size() - i, cur.data);
                i++;
            }
            if (cur.right != null)
                cur = cur.right;
            else
                cur = cur.left;
        }
    }

    static void addLeaves(TreeNode root, List<Integer> res) {
        TreeNode cur = root;
        if (isLeaf(cur)) {
            res.add(cur.data);
            return;
        }
        if (cur.left != null)
            addLeaves(root.left, res);
        if (cur.right != null)
            addLeaves(root.right, res);
    }
}
