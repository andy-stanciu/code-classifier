/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        // if head is null than return null
        if (head == null)
            return null;
        if (//if only head is there than make head null
        head.next == null && n == 1) {
            head = null;
            return head;
        }
        // make node to count the length of linklist
        ListNode last = head;
        int length = 1;
        while (last.next != null) {
            // count the length of list till last next is equal null
            last = last.next;
            length++;
        }
        if (//if length is equal to n than delete head
        length == n) {
            ListNode temp = head.next;
            head = null;
            return temp;
        }
        // declear node to keep track of last node of deleting node
        ListNode prev = null;
        //find the nth node
        ListNode nth = head;
        //to find nth node we have find its locstion
        int node = length - n;
        for (//find the node
        //find the node
        //find the node
        int i = 0; i < node && nth != null; i++) {
            prev = nth;
            nth = nth.next;
        }
        if (//if nth is last node than set prevnext to null
        nth.next == null) {
            prev.next = null;
        } else {
            // set prev next to nth next to break prev and nth link
            prev.next = nth.next;
        }
        return head;
    }
}
