/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        int size = 0;
        ListNode temp = head;
        // Calculate the size of the list
        while (temp != null) {
            size++;
            temp = temp.next;
        }
        // Check if you need to remove the head of the list
        if (size == n) {
            return head.next;
        }
        temp = head;
        int target = size - n - 1;
        // Find the node just before the one to be removed
        for (int i = 0; i < target; i++) {
            temp = temp.next;
        }
        // Remove the nth node from the end by updating the next reference of the previous node
        temp.next = temp.next.next;
        return head;
    }
}
