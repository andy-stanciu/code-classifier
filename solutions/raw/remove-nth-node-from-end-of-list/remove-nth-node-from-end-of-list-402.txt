/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        //length of the list
        int l = len(head);
        n = n % l;
        if (l == 0 || l == 1)
            return null;
        //a variable to count index
        int c = 1;
        //now iterate until we find nTh node
        ListNode t = head;
        if (n == 0)
            head = head.next;
        else {
            while (c < l - n && t.next != null) {
                t = t.next;
                c++;
            }
        }
        if (t.next != null && t.next.next != null) {
            t.next = t.next.next;
            //t.next=null;
        } else
            t.next = null;
        return head;
    }

    static int len(ListNode head) {
        int l = 1;
        while (head.next != null) {
            l++;
            head = head.next;
        }
        return l;
    }
}
