class ListNode {

    int val;

    ListNode next;

    ListNode(int val) {
        this.val = val;
    }

    // Deserialize method to convert a string to a ListNode
    public static ListNode deserialize(String data) {
        if (data == null || data.length() == 0 || data.equals("[]"))
            return null;
        String[] values = data.substring(1, data.length() - 1).split(",");
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        for (String value : values) {
            if (!value.trim().isEmpty()) {
                current.next = new ListNode(Integer.parseInt(value.trim()));
                current = current.next;
            }
        }
        return dummy.next;
    }
}

public class Solution {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        // Create a dummy node to handle edge cases
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode first = dummy;
        ListNode second = dummy;
        // Move first pointer n + 1 steps ahead
        for (int i = 0; i <= n; i++) {
            first = first.next;
        }
        // Move both pointers until first reaches the end
        while (first != null) {
            first = first.next;
            second = second.next;
        }
        // Remove the nth node from end
        second.next = second.next.next;
        // Return the head of the modified list
        return dummy.next;
    }

    // Helper function to print the linked list
    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val);
            if (current.next != null) {
                System.out.print(" -> ");
            }
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        // Example 1
        ListNode head1 = ListNode.deserialize("[1,2,3,4,5]");
        int n1 = 2;
        ListNode result1 = sol.removeNthFromEnd(head1, n1);
        // Output: [1 -> 2 -> 3 -> 5]
        printList(result1);
        // Example 2
        ListNode head2 = ListNode.deserialize("[1]");
        int n2 = 1;
        ListNode result2 = sol.removeNthFromEnd(head2, n2);
        // Output: []
        printList(result2);
        // Example 3
        ListNode head3 = ListNode.deserialize("[1,2]");
        int n3 = 1;
        ListNode result3 = sol.removeNthFromEnd(head3, n3);
        // Output: [1]
        printList(result3);
    }
}
