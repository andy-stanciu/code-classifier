/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        if (n == 0)
            return head;
        if (n == 1 && head.next == null)
            return null;
        List<ListNode> list = new ArrayList<>();
        ListNode current = head;
        while (current != null) {
            list.add(current);
            current = current.next;
        }
        if (n > list.size())
            throw new IllegalArgumentException("Invalid Case!");
        if (n == 1) {
            list.get(list.size() - 2).next = null;
        } else if (n == list.size()) {
            head = head.next;
        } else {
            ListNode node = list.get(list.size() - n - 1);
            node.next = node.next.next;
        }
        return head;
    }
}
