class Solution {

    public String longestCommonPrefix(String[] strs) {
        int totalData = strs.length;
        if (totalData == 1) {
            return strs[0];
        } else if (totalData == 2) {
            StringBuilder prefix = new StringBuilder();
            int minLength = Math.min(strs[0].length(), strs[1].length());
            for (int i = 0; i < minLength; i++) {
                if (strs[0].charAt(i) == strs[1].charAt(i)) {
                    prefix.append(strs[1].charAt(i));
                } else {
                    break;
                }
            }
            return prefix.toString();
        }
        int half = (int) Math.ceil((float) strs.length / 2);
        // Solve left
        String compare = longestCommonPrefix(Arrays.copyOfRange(strs, 0, half));
        if (half <= totalData) {
            // Solve right
            String right = longestCommonPrefix(Arrays.copyOfRange(strs, half - 1, totalData));
            if (right.length() < compare.length()) {
                compare = right;
            }
        }
        return compare;
    }
}
