class Solution {

    public boolean check(String[] arr, String str) {
        int count = 0;
        for (int i = 1; i < arr.length; i++) {
            if (arr[i].contains(str))
                count++;
        }
        if (count >= arr.length - 1)
            return true;
        else
            return false;
    }

    public String remove(String str) {
        StringBuffer sb = new StringBuffer(str);
        sb.deleteCharAt(sb.length() - 1);
        return sb.toString();
    }

    public boolean prefix(String[] strs, String test) {
        for (int i = 0; i < strs.length; i++) {
            if (!strs[i].startsWith(test))
                return false;
        }
        return true;
    }

    public String longestCommonPrefix(String[] strs) {
        Arrays.sort(strs, Comparator.comparing(s -> s.length()));
        //sort the array of strings based on the string\'s length.
        String test = strs[0];
        //assign the shortest string to "test"
        while (!test.equals("")) {
            //run the loop until the test string becomes empty
            int n = strs[0].length();
            //length of the shortest string is stored in "n"
            for (int i = 0; i < n; i++) {
                //check whether test is present in all the strings of the array and the string is in prefix.
                if (check(strs, test) && prefix(strs, test)) {
                    return test;
                }
                test = remove(test);
                //remove the last element for every failure.
            }
        }
        return "";
    }
}
