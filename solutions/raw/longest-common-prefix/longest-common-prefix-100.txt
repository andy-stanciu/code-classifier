class Solution {

    public String longestCommonPrefix(String[] strs) {
        //TRY DEBUGGING THE CODE FOR BETTER UNDERSTANDING
        String min = strs[0];
        /* 
        *  finding minimum length string. That will be the base of common prefix.
        *  since our string has minimum length it has the highest possibility of
        *  having common prefix satifying all other strings.
        */
        for (String s : strs) {
            if (min.length() > s.length())
                min = s;
        }
        int i = 0;
        while (i < strs.length && min.length() != 0) {
            // comparing last characters of current and minimum length string
            // if they don\'t match decrease one character from the right of minimu length string and check it again
            // and so on,
            if (strs[i].charAt(min.length() - 1) != min.charAt(min.length() - 1)) {
                min = min.substring(0, min.length() - 1);
            } else {
                //for checking if the string we are checking (min) exists only at the start or not
                String stringForChecking = strs[i].substring(0, min.length());
                if (stringForChecking.contains(min)) {
                    // if cuurent string contains minimum one, move on to next
                    i++;
                } else {
                    //if cuurent string doesn\'t contains minimum one, remove one character
                    // +
                    min = min.substring(0, min.length() - 1);
                }
            }
        }
        return min;
    }
}
