class Solution {

    public static String longestCommonPrefix(String[] strs) {
        return FindLongest(FindSubStrings(ContainedPartList(PartList(strs), strs), strs));
    }

    public static ArrayList<String> FindSubStrings(ArrayList<String> containedParts, String[] strs) {
        ArrayList<String> lastPartList = new ArrayList<String>() {
        };
        for (String part : containedParts) {
            boolean isTrue = true;
            for (String str : strs) {
                if (!str.substring(0, part.length()).equals(part)) {
                    isTrue = false;
                    break;
                }
            }
            if (isTrue) {
                lastPartList.add(part);
            }
        }
        return lastPartList;
    }

    public static String FindLongest(ArrayList<String> str) {
        String res = "";
        for (int i = 0; i < str.size(); i++) {
            if (str.get(i).length() > res.length()) {
                res = str.get(i);
            }
        }
        return res;
    }

    public static ArrayList<String> ContainedPartList(ArrayList<String> partList, String[] strs) {
        ArrayList<String> containedPartList = new ArrayList<String>() {
        };
        for (String part : partList) {
            boolean isContain = true;
            for (String str : strs) {
                if (!str.contains(part)) {
                    isContain = false;
                    break;
                }
            }
            if (isContain) {
                containedPartList.add(part);
            }
        }
        return containedPartList;
    }

    public static int findShortest(String[] str) {
        String res = str[0];
        int resInd = 0;
        for (int i = 1; i < str.length; i++) {
            if (str[i].length() < res.length()) {
                res = str[i];
                resInd = i;
            }
        }
        return resInd;
    }

    public static ArrayList<String> PartList(String[] strs) {
        int strInd = findShortest(strs);
        ArrayList<String> partList = new ArrayList<String>();
        String firstWord = "";
        for (int k = 0; k <= strs[strInd].length() - 1; k++) {
            if (0 < strs[strInd].length()) {
                firstWord += Character.toString(strs[strInd].toCharArray()[k]);
                partList.add(firstWord);
            } else {
                break;
            }
        }
        return partList;
    }
}
