class Solution {

    public int[] intersect(int[] nums1, int[] nums2) {
        // ArrayList<Integer> list = new ArrayList<>();
        // for(int i=0; i<nums1.length; i++){
        // for(int j=0; j<nums2.length; j++)
        // if(nums1[i]==nums2[j]){
        // list.add(nums1[i]);
        // nums2[j]=-1; // after checking if it is found then we will set that value of
        // the array index to -1(assuming that the -1 will never be in the array)
        // break;
        // }
        // }
        // }
        // int [] arr = new int [list.size()];
        // for(int i=0; i<arr.length; i++){
        // arr[i] = list.get(i);
        // }
        // return arr;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int num : nums1) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        List<Integer> list = new ArrayList<>();
        for (int num : nums2) {
            if (map.containsKey(num) && map.get(num) > 0) {
                list.add(num);
                map.put(num, map.getOrDefault(num, 0) - 1);
            }
        }
        int[] arr = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            arr[i] = list.get(i);
        }
        return arr;
        // UISNG ARRAY IS THE OPTIMIAL WAY I THINK SO.....
        // USING ARRAY OF LENGTH 1000 FOR COUNT AND THEN SOLVE IT....
    }
}
