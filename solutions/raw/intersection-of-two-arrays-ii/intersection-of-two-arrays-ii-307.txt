class Solution {

    public int[] intersect(int[] nums1, int[] nums2) {
        // Count frequencies of each number in nums1 and nums2
        Map<Integer, Integer> map1 = new HashMap<>();
        Map<Integer, Integer> map2 = new HashMap<>();
        for (int num : nums1) {
            map1.put(num, map1.getOrDefault(num, 0) + 1);
        }
        for (int num : nums2) {
            map2.put(num, map2.getOrDefault(num, 0) + 1);
        }
        // Find intersection
        List<Integer> intersection = new ArrayList<>();
        for (int key : map1.keySet()) {
            if (map2.containsKey(key)) {
                int countIn1 = map1.get(key);
                int countIn2 = map2.get(key);
                int count = Math.min(countIn1, countIn2);
                for (int i = 0; i < count; i++) {
                    intersection.add(key);
                }
            }
        }
        // Convert ArrayList to int[]
        int[] result = new int[intersection.size()];
        for (int i = 0; i < intersection.size(); i++) {
            result[i] = intersection.get(i);
        }
        return result;
    }
}
