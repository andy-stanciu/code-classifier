class Solution {

    public int[] intersect(int[] nums1, int[] nums2) {
        // HashMap<Integer,Integer> hs=new HashMap<>();
        // HashMap<Integer,Integer> hs1=new HashMap<>();
        // for(int i=0;i<nums1.length;i++){
        //     if(hs.contains(nums1[i])){
        //         int val=hs.get(nums1[i]);
        //         hs.put(nums1[i],val+1)
        //     }
        //     else{
        //         hs.put(nums1[i],1);
        //     }
        // }
        // for(int i=0;i<nums2.length;i++){
        //     if(hs1.contains(nums2[i])){
        //         int val=hs.get(nums2[i]);
        //         hs.put(nums2[i],val+1)
        //     }
        //     else{
        //         hs.put(nums2[i],1);
        //     }
        // }
        // ArrayList<Integer> arr=new ArrayList<>();
        // //int a=hs.size()>hs1.size()?hs:hs2;
        // int a=0;
        // if(hs.size()<hs1.size()){
        //     a=hs.size();
        //     for(int i=0;i<a;i++){
        //         // if(hs1.contains(hs.get(i)){
        //         //     int x=hs.get(i);
        //         //     int y=hs1.get(i);
        //         //     int z=Math.abs(x-y);
        //         // }
        // }
        // }
        // else{
        //     a=hs1.size();
        // }
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        ArrayList<Integer> arr = new ArrayList<>();
        int len1 = nums1.length;
        int len2 = nums2.length;
        int i = 0, j = 0, cnt = 0, index = 0;
        while (i < len1 && j < len2) {
            if (nums1[i] < nums2[j]) {
                i++;
            } else if (nums1[i] > nums2[j]) {
                j++;
            } else {
                arr.add(nums1[i]);
                i++;
                j++;
            }
        }
        int[] out = new int[arr.size()];
        int k = 0;
        while (k < arr.size()) {
            out[k] = arr.get(k);
            k++;
        }
        return out;
    }
}
