class Solution {

    public boolean binarySearch(int[] nums, int t, int s, int e, boolean[] vis) {
        while (s <= e) {
            int mid = s + (e - s) / 2;
            if (nums[mid] == t && !vis[mid]) {
                vis[mid] = true;
                return true;
            } else if (nums[mid] > t) {
                e = mid - 1;
            } else if (nums[mid] < t) {
                s = mid + 1;
            } else {
                boolean b1 = binarySearch(nums, t, s, mid - 1, vis);
                if (b1)
                    return true;
                boolean b2 = binarySearch(nums, t, mid + 1, e, vis);
                return b2;
            }
        }
        return false;
    }

    public int[] intersect(int[] nums1, int[] nums2) {
        Arrays.sort(nums2);
        boolean[] vis = new boolean[nums2.length];
        List<Integer> ll = new ArrayList<>();
        for (int i : nums1) {
            if (binarySearch(nums2, i, 0, nums2.length - 1, vis)) {
                ll.add(i);
            }
        }
        int[] ans = new int[ll.size()];
        for (int i = 0; i < ll.size(); i++) {
            ans[i] = ll.get(i);
        }
        return ans;
    }
}
