//BRUTE APPROACH
// class Solution {
//     public List<List<Integer>> threeSum(int[] nums) {
//         List<List<Integer>> result = new ArrayList<>();
//         int n = nums.length;
//         for(int i=0; i<n; i++){
//             for(int j=i+1; j<n; j++){
//                 for(int k=j+1; k<n; k++){
//                     if(nums[i] + nums[j] + nums[k] == 0){
//                         List<Integer> triplet = Arrays.asList(nums[i], nums[j], nums[k]);
//                         Collections.sort(triplet);
//                         if(!result.contains(triplet)){
//                             result.add(triplet);
//                         }
//                     }
//                 }
//             }
//         }
//         return result;
//     }
// }
//BETTER APPROACH
// class Solution {
//     public List<List<Integer>> threeSum(int[] nums) {
//         int n = nums.length;
//         Set<List<Integer>> set = new HashSet<>();
//         for(int i=0; i<n; i++){
//             Set<Integer> hashSet = new HashSet<>();
//             for(int j= i+1; j<n; j++){
//                 //Calculate the 3rd element:
//                 int third = -(nums[i] + nums[j]);
//                 //Find the element in the set:
//                 if (hashSet.contains(third)) {
//                     List<Integer> temp = Arrays.asList(nums[i], nums[j], third);
//                     temp.sort(null); //used to sort a list based on the natural ordering of the elements.Passing null to the sort() method tells the method to use the natural comparator of the elements
//                     set.add(temp);
//                 }
//                 hashSet.add(nums[j]);
//             }
//         }
//         // store the set elements in the answer:
//         List<List<Integer>> ans = new ArrayList<>(set);
//         return ans;
//     }
// }
//OPTIMIZED APPROACH
class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        int n = nums.length;
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);
        for (int i = 0; i < n; i++) {
            //remove duplicates:
            if (i != 0 && nums[i] == nums[i - 1])
                continue;
            //moving 2 pointers:
            int j = i + 1;
            int k = n - 1;
            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if (sum < 0) {
                    j++;
                } else if (sum > 0) {
                    k--;
                } else {
                    List<Integer> temp = Arrays.asList(nums[i], nums[j], nums[k]);
                    result.add(temp);
                    j++;
                    k--;
                    //skip the duplicates:
                    while (j < k && nums[j] == nums[j - 1]) j++;
                    while (j < k && nums[k] == nums[k + 1]) k--;
                }
            }
        }
        return result;
    }
}
