class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length, j, k;
        long sum;
        List<List<Integer>> ans = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            // we need j,k so that ith + jth + kth == 0
            // skip duplicate, do 1 and then skip similar
            if (i != 0 && nums[i - 1] == nums[i])
                continue;
            j = i + 1;
            k = n - 1;
            while (j < k) {
                sum = nums[i];
                sum += nums[j];
                sum += nums[k];
                if (sum < 0)
                    j++;
                else if (sum > 0)
                    k--;
                else {
                    List<Integer> list = new ArrayList<>();
                    list.add(nums[i]);
                    list.add(nums[j]);
                    list.add(nums[k]);
                    ans.add(list);
                    j++;
                    k--;
                    // skip duplicate, do 1 and then skip similar
                    while (j < k && nums[j] == nums[j - 1]) j++;
                    // skip duplicate, do 1 and then skip similar
                    while (j < k && nums[k] == nums[k + 1]) k--;
                }
            }
        }
        return ans;
    }
}
