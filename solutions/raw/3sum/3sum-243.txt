class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> result = new HashSet<>();
        for (int i = 0; i < nums.length - 2; i++) {
            // We want two numbers that sum to -nums[i]
            int target = -nums[i];
            // To track the numbers we need for each triplet
            Set<Integer> seen = new HashSet<>();
            for (int j = i + 1; j < nums.length; j++) {
                // The value that would complete the triplet
                int complement = target - nums[j];
                if (seen.contains(complement)) {
                    int a = nums[i];
                    int b = nums[j];
                    int c = complement;
                    List<Integer> triplet = Arrays.asList(Math.min(a, Math.min(b, c)), a + b + c - Math.min(a, Math.min(b, c)) - Math.max(a, Math.max(b, c)), Math.max(a, Math.max(b, c)));
                    // Adding to set prevents duplicates
                    result.add(triplet);
                }
                // Add the current number to the set
                seen.add(nums[j]);
            }
        }
        // Convert the set to a list
        return new ArrayList<>(result);
    }
}
