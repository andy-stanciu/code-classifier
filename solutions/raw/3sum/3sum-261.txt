class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        /* BRUTE FORCE */
        // Set<List<Integer>> res = new HashSet<>();
        // int n = nums.length;
        // for(int i=0; i<n; i++){
        //     for(int j=i+1; j<n; j++){
        //         for(int k=j+1; k<n; k++){
        //             List<Integer> lis = new ArrayList<>();
        //             if((nums[i] + nums[j] + nums[k]) == 0){
        //                 lis.add(nums[i]);
        //                 lis.add(nums[j]);
        //                 lis.add(nums[k]);
        //                 Collections.sort(lis);
        //                 res.add(lis);
        //             }
        //         }
        //     }
        // }
        // List<List<Integer>> lis = new ArrayList<>(res);
        // return lis;
        /* OPTIMAL SOLUTION - Two Pointer Solution*/
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            if (i > 0 && nums[i] == nums[i - 1])
                continue;
            int j = i + 1;
            int k = n - 1;
            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if (sum > 0) {
                    k--;
                } else if (sum < 0) {
                    j++;
                } else {
                    res.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    j++;
                    k--;
                    while (j < k && nums[j] == nums[j - 1]) j++;
                    while (j < k && nums[k] == nums[k + 1]) k--;
                }
            }
        }
        return res;
    }
}
