class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        //Approach 1 Brute Force Approach
        // Time Complexity O(n**3)
        // Space Complexity O(n**3)
        // Set<List<Integer>> outerList = new HashSet<>();
        // int n = nums.length;
        // for(int i=0; i<n-2; i++){
        //     for(int j=i+2; j<n; j++){
        //         for(int m=i+1; m<j; m++){
        //             if(nums[i]+nums[j]+nums[m]==0){
        //                 List<Integer> innerList = Arrays.asList(nums[i],nums[j],nums[m]);
        //                 Collections.sort(innerList);
        //                 outerList.add(innerList);
        //             }
        //         }
        //     }
        // }
        // return new ArrayList<>(outerList);
        // Approach 2
        // Using Hashset
        // int n = nums.length;
        // Set<List<Integer>> result = new HashSet<>();
        // for(int i=0; i<n; i++){
        //     Set<Integer> temp = new HashSet<>();
        //     for(int j=i+1; j<n; j++){
        //         int compliment = -nums[i]-nums[j];
        //         if(temp.contains(compliment)){
        //             List<Integer> triplet = Arrays.asList(nums[i],nums[j],compliment);
        //             Collections.sort(triplet);
        //             result.add(triplet);
        //         }
        //         temp.add(nums[j]);
        //     }
        // }
        // // System.gc();
        // return new ArrayList<>(result);
        // Approach 3
        // Using Two Pointer
        List<List<Integer>> result = new ArrayList<>();
        int n = nums.length;
        Arrays.sort(nums);
        for (int i = 0; i < n; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            int j = i + 1;
            int k = n - 1;
            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if (sum < 0) {
                    j++;
                } else if (sum > 0) {
                    k--;
                } else {
                    List<Integer> temp = Arrays.asList(nums[i], nums[j], nums[k]);
                    result.add(temp);
                    j++;
                    k--;
                    while (j < k && nums[j] == nums[j - 1]) {
                        j++;
                    }
                    while (j < k && nums[k] == nums[k + 1]) {
                        k--;
                    }
                }
            }
        }
        System.gc();
        return result;
    }
}
