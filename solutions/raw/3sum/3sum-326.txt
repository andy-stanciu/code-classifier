class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        // To store the result triplets
        List<List<Integer>> res = new ArrayList<>();
        // Sort the array to handle duplicates easily
        Arrays.sort(nums);
        int n = nums.length;
        for (int i = 0; i < n - 2; i++) {
            // Skip duplicate elements for the first number
            if (i > 0 && nums[i] == nums[i - 1])
                continue;
            // We want nums[j] + nums[k] to equal -nums[i]
            int target = -nums[i];
            int j = i + 1, k = n - 1;
            while (j < k) {
                int sum = nums[j] + nums[k];
                if (sum == target) {
                    // We found a triplet, create a new list for it
                    // Create a new list for each valid triplet
                    List<Integer> s = new ArrayList<>();
                    s.add(nums[i]);
                    s.add(nums[j]);
                    s.add(nums[k]);
                    // Add the triplet to the result
                    res.add(s);
                    while (j < k && nums[j] == nums[j + 1]) j++;
                    while (j < k && nums[k] == nums[k - 1]) k--;
                    // Move the pointers after finding a valid triplet
                    j++;
                    k--;
                } else if (sum < target) {
                    // Move the left pointer to increase the sum
                    j++;
                } else {
                    // Move the right pointer to decrease the sum
                    k--;
                }
            }
        }
        return res;
    }
}
