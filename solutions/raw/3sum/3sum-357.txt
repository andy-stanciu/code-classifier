class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        // Step 1: Sort the array
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                // Step 2: Skip duplicate elements to avoid duplicate triplets
                continue;
            }
            // Left pointer starts just after the current element
            int j = i + 1;
            // Right pointer starts at the end
            int k = nums.length - 1;
            while (j < k) {
                // Step 3: Calculate the sum of the current triplet
                int sum = nums[i] + nums[j] + nums[k];
                if (sum > 0) {
                    // Decrease sum by moving right pointer to the left
                    k--;
                } else if (sum < 0) {
                    // Increase sum by moving left pointer to the right
                    j++;
                } else {
                    // Step 4: Triplet found, add to result
                    ans.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    // Move both pointers inward to continue searching
                    j++;
                    k--;
                    // Step 5: Skip duplicates for left and right pointers
                    while (j < k && nums[j] == nums[j - 1]) j++;
                    while (j < k && nums[k] == nums[k + 1]) k--;
                }
            }
        }
        // Return the list of unique triplets
        return ans;
    }
}
