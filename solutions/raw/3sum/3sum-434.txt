class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        // Sort the array to make the two-pointer technique feasible
        Arrays.sort(nums);
        //make a for loop , i as the first pointer
        for (int i = 0; i < nums.length - 2; i++) {
            //firstly avoid duplicate, we escape if current number is same with the previous one
            if (i == 0 || (i > 0 && nums[i] != nums[i - 1])) {
                //we make first number as a result(o-nums[i]) which make this question as a two-sum, once the two-sum-
                //is equal to the first number then its equal to zero
                int low = i + 1;
                int high = nums.length - 1;
                int sum = 0 - nums[i];
                //traverse the nums to find two sum
                while (low < high) {
                    if (nums[high] + nums[low] == sum) {
                        result.add(Arrays.asList(nums[i], nums[low], nums[high]));
                        // Skip duplicate elements for the second and third elements
                        while (low < high && nums[low] == nums[low + 1]) {
                            low++;
                        }
                        while (low < high && nums[high] == nums[high - 1]) {
                            high--;
                        }
                        low++;
                        high--;
                    } else if (nums[low] + nums[high] > sum) {
                        high--;
                    } else {
                        low++;
                    }
                }
            }
        }
        return result;
    }
}
