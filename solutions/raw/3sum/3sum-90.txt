class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        // Loop considering each element as a potential starting point.
        for (int start = 0; start < nums.length - 2; start++) {
            // Skip duplicates by checking if it\'s the first element or different from the previous one.
            if (start == 0 || nums[start] != nums[start - 1]) {
                // Pointer for the second element.
                int i = start + 1;
                // Pointer for the third element.
                int end = nums.length - 1;
                // Use a two-pointer approach to find pairs that sum up to the target.
                while (i < end) {
                    int sum = nums[start] + nums[i] + nums[end];
                    if (sum == 0) {
                        // Found a triplet with a sum of 0. Add it to the answer list.
                        ans.add(Arrays.asList(nums[start], nums[i], nums[end]));
                        // Skip duplicate values for the second and third elements.
                        while (i < end && nums[i] == nums[i + 1]) i++;
                        while (i < end && nums[end - 1] == nums[end]) end--;
                        // Move the second pointer to the right.
                        i++;
                        // Move the third pointer to the left.
                        end--;
                    } else if (sum < 0) {
                        // Adjust pointers based on the sum being too small.
                        i++;
                    } else {
                        // Adjust pointers based on the sum being too large.
                        end--;
                    }
                }
            }
        }
        // Return the list of triplets that sum up to zero.
        return ans;
    }
}
