class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        // Step 1: Sort the array
        Arrays.sort(nums);
        List<List<Integer>> list = new ArrayList<>();
        for (int i = 0; i < nums.length - 2; i++) {
            // Loop up to nums.length - 2
            if (i > 0 && nums[i] == nums[i - 1]) {
                // Skip duplicate elements for \'i\'
                continue;
            }
            int j = i + 1;
            int k = nums.length - 1;
            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if (sum == 0) {
                    // Add the triplet to the list
                    list.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    // Move j and k pointers, skipping duplicates
                    while (j < k && nums[j] == nums[j + 1]) j++;
                    while (j < k && nums[k] == nums[k - 1]) k--;
                    // Move past the current valid triplet
                    j++;
                    k--;
                } else if (sum < 0) {
                    // Increment j to increase the sum
                    j++;
                } else {
                    // Decrement k to decrease the sum
                    k--;
                }
            }
        }
        return list;
    }
}
