class Solution {

    // using brute force
    // public List<List<Integer>> threeSum(int[] nums) {
    //     List<List<Integer>> output = new ArrayList<List<Integer>>();
    //     List<Integer> list = new ArrayList<>();
    //     // Add array elements in the list
    //     for(int num : nums){
    //         list.add(num);         //arrays element add into the list
    //     }
    //     Collections.sort(list); //list are sorted.
    //     for(int i=0; i<list.size()-2; i++){
    //         for(int j=i+1; j<list.size()-1; j++){
    //             for(int k=j+1; k<list.size();k++){
    //                 if(list.get(i) + list.get(j) + list.get(k) == 0){
    //                     List<Integer> triplet = new ArrayList<>();
    //                     triplet.add(list.get(i));
    //                     triplet.add(list.get(j));
    //                     triplet.add(list.get(k));
    //                     output.add(triplet);
    //                 }
    //             }
    //         }
    //     }
    //     Set<List<Integer>> hashSet = new HashSet<>(output);
    //     return new ArrayList<>(hashSet);
    // }
    // using two pointer approach
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> output = new ArrayList<List<Integer>>();
        // to getting sorted array.
        Arrays.sort(nums);
        for (int i = 0; i < nums.length - 2; i++) {
            int target = 0 - nums[i];
            int start = i + 1;
            int end = nums.length - 1;
            if (i > 0 && nums[i] == nums[i - 1]) {
                // Skip duplicate elements
                continue;
            }
            while (start < end) {
                if (nums[start] + nums[end] == target) {
                    List<Integer> list = new ArrayList<Integer>();
                    list.add(nums[i]);
                    list.add(nums[start]);
                    list.add(nums[end]);
                    output.add(list);
                    start = start + 1;
                } else if (nums[start] + nums[end] < target) {
                    start = start + 1;
                } else if (nums[start] + nums[end] > target) {
                    end = end - 1;
                }
            }
        }
        Set<List<Integer>> hashSet = new HashSet<>(output);
        return new ArrayList<>(hashSet);
    }
}
