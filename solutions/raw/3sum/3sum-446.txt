class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        int n = nums.length;
        // 3 sum
        // 1. brute force soln
        /*  Set<List<Integer>> set = new HashSet<>();
        for(int i =0;i<n;i++){
            for(int j =i+1;j<n;j++){
                List<Integer> list = new ArrayList<>();                
                for(int k =j+1;k<n;k++){
                    if(nums[i]+nums[j]+nums[k]==0){
                       list.add(nums[i]);
                       list.add(nums[j]);
                       list.add(nums[k]);
                       Collections.sort(list);
                       set.add(list);
                    }
                }
            }
        }
        List<List<Integer>> ans = new ArrayList<>(set);
        return ans;*/
        // 2. better soln
        /* Set<List<Integer>> set = new HashSet<>();
        for(int i =0;i<n;i++){
              Set<Integer> hashset= new HashSet<>() ;
            for(int j =i+1;j<n;j++){
                List<Integer> list = new ArrayList<>();               
               int k  = -(nums[i]+nums[j]) ;
               if(hashset.contains(k)){
                       list.add(nums[i]);
                       list.add(nums[j]);
                       list.add(k);
                       Collections.sort(list);
                       set.add(list);
               } else{
                hashset.add(nums[j]);
               }
            }
        }
         List<List<Integer>> ans = new ArrayList<>(set);
        return ans;*/
        // 3. optimal
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        for (int i = 0; i < n; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            int j = i + 1;
            int k = n - 1;
            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                List<Integer> list = new ArrayList<>();
                if (sum > 0) {
                    k--;
                } else if (sum < 0) {
                    j++;
                } else if (sum == 0) {
                    list.add(nums[i]);
                    list.add(nums[j]);
                    list.add(nums[k]);
                    ans.add(list);
                    j++;
                    k--;
                    while (j < k && nums[k] == nums[k + 1]) k--;
                    while (j < k && nums[j] == nums[j - 1]) j++;
                }
            }
        }
        return ans;
    }
}
