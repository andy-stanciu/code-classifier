class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        // int n = nums.length;
        // Set<List<Integer>> set = new HashSet<>();
        // for (int i = 0; i < n; i++) {
        //     Set<Integer> tempset = new HashSet<>();
        //     for (int j = i + 1; j < n; j++) {
        //         // nums[k] = - (nums[i] + nums[j])
        //         int sum = -(nums[i] + nums[j]);
        //         if (tempset.contains(sum)) {
        //             List<Integer> temp = new ArrayList<>();
        //             temp.add(nums[i]);
        //             temp.add(nums[j]);
        //             temp.add(sum);
        //             Collections.sort(temp);
        //             set.add(temp);
        //         }
        //         tempset.add(nums[j]);
        //     }
        // }
        // List<List<Integer>> fList = new ArrayList<>();
        // set.forEach((s) -> {
        //     List<Integer> list = new ArrayList<>(s);
        //     fList.add(list);
        // });
        // return fList;
        //works
        //approach 2
        int n = nums.length;
        List<List<Integer>> fList = new ArrayList<>();
        Arrays.sort(nums);
        // System.out.println(Arrays.toString(nums));
        for (int i = 0; i < n; i++) {
            if (i > 0 && nums[i] == nums[i - 1])
                continue;
            int j = i + 1;
            int k = n - 1;
            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if (sum == 0) {
                    List<Integer> temp = new ArrayList<>();
                    temp.add(nums[i]);
                    temp.add(nums[j]);
                    temp.add(nums[k]);
                    fList.add(temp);
                    j++;
                    k--;
                    while (j < k && nums[j] == nums[j - 1]) {
                        j++;
                    }
                    while (j < k && nums[k] == nums[k + 1]) {
                        k--;
                    }
                } else if (sum < 0) {
                    j++;
                } else {
                    k--;
                }
            }
        }
        return fList;
    }
}
