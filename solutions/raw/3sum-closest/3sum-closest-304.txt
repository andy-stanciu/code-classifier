class Solution {

    public int threeSumClosest(int[] nums, int target) {
        // Sort the input array
        Arrays.sort(nums);
        // Initialize a variable to store the closest sum found
        // Initialize to a large value to avoid overflow
        int closestSum = Integer.MAX_VALUE / 2;
        // Iterate through the array
        for (int i = 0; i < nums.length; i++) {
            // Initialize two pointers, one starting from the element after nums[i], and the other from the end of the array
            int left = i + 1;
            int right = nums.length - 1;
            // Continue iterating until the two pointers meet
            while (left < right) {
                // Calculate the sum of the current triplet
                int currentSum = nums[i] + nums[left] + nums[right];
                // Update the closestSum if the current sum is closer to the target
                if (Math.abs(target - currentSum) < Math.abs(target - closestSum)) {
                    closestSum = currentSum;
                }
                // Move the pointers based on whether the current sum is less than, greater than, or equal to the target
                if (currentSum < target) {
                    // Move left pointer to the right to increase the sum
                    left++;
                } else if (currentSum > target) {
                    // Move right pointer to the left to decrease the sum
                    right--;
                } else {
                    // If the current sum is equal to the target, return it
                    return closestSum;
                }
            }
        }
        // Return the closest sum found
        return closestSum;
    }
}
