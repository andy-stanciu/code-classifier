class Solution {

    public int threeSumClosest(int[] nums, int target) {
        // Sort the input array in ascending order to use two pointers.
        Arrays.sort(nums);
        // Initialize a variable to store the closest sum of three integers found so far.
        int closestSum = nums[0] + nums[1] + nums[2];
        // Iterate through the array to find the closest sum to the target.
        for (int i = 0; i < nums.length - 2; i++) {
            // Initialize two pointers \'j\' and \'k\'.
            int j = i + 1;
            int k = nums.length - 1;
            // Use a while loop with two pointers to explore all possible combinations of triplets.
            while (j < k) {
                // Calculate the sum of elements at indices \'i\', \'j\', and \'k\'.
                int sum = nums[i] + nums[j] + nums[k];
                // Update the closest sum if the current sum is closer to the target.
                if (compare(target, sum, closestSum))
                    closestSum = sum;
                // Adjust pointers based on the current sum compared to the target.
                if (sum < target)
                    // Increment \'j\' to potentially get closer to the target sum.
                    j++;
                else
                    // Decrement \'k\' to potentially get closer to the target sum.
                    k--;
            }
        }
        // Return the closest sum of three integers to the target.
        return closestSum;
    }

    // Helper function to compare the distance of two sums to the target and return true if the current sum is closer.
    private boolean compare(int target, int sum, int closestSum) {
        return Math.abs(target - sum) < Math.abs(target - closestSum);
    }
}
