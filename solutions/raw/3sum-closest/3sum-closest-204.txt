class Solution {

    public int threeSumClosest(int[] nums, int target) {
        int sumClosestToTarget = 0;
        int minDiff = Integer.MAX_VALUE;
        Arrays.sort(nums);
        int currSum;
        int currDiff;
        // Iterate through each element in the array as the fixed element of the triplet
        for (int i = 0; i < nums.length - 2; i++) {
            // Start the second pointer just after the fixed element
            int j = i + 1;
            // Start the third pointer at the end of the array
            int k = nums.length - 1;
            // Use two pointers to find the closest sum
            while (j < k) {
                currSum = nums[i] + nums[j] + nums[k];
                // If the current sum is exactly the target, return the target
                if (currSum == target) {
                    return target;
                }
                // Calculate the difference between the current sum and the target
                currDiff = Math.abs(currSum - target);
                // Update the closest sum if the current difference is smaller
                if (currDiff < minDiff) {
                    minDiff = currDiff;
                    sumClosestToTarget = currSum;
                }
                // Move the pointers to find a closer sum
                if (currSum > target) {
                    k--;
                } else {
                    j++;
                }
            }
        }
        // Return the sum that is closest to the target
        return sumClosestToTarget;
    }
}
