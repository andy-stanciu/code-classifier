class Solution {

    public int threeSumClosest(int[] nums, int target) {
        // Sort the array to enable two-pointer approach
        Arrays.sort(nums);
        // Initialize closest sum to a large value
        int closestSum = Integer.MAX_VALUE;
        // Initialize minimum difference to a large value
        int minDiff = Integer.MAX_VALUE;
        for (int i = 0; i < nums.length - 2; i++) {
            // Pointer for the element on the left
            int left = i + 1;
            // Pointer for the element on the right
            int right = nums.length - 1;
            while (left < right) {
                // Calculate the current sum
                int sum = nums[i] + nums[left] + nums[right];
                // Calculate the absolute difference between current sum and target
                int diff = Math.abs(sum - target);
                if (diff < minDiff) {
                    // Update the minimum difference and closest sum if necessary
                    minDiff = diff;
                    closestSum = sum;
                }
                if (sum < target) {
                    // If current sum is less than target, increment the left pointer
                    left++;
                } else if (sum > target) {
                    // If current sum is greater than target, decrement the right pointer
                    right--;
                } else {
                    // If current sum is equal to target, return it as the closest sum
                    return sum;
                }
            }
        }
        // Return the closest sum after traversing the entire array
        return closestSum;
    }
}
