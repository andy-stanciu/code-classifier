class Solution {

    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        if (// return 0 if array to small.
        nums.length < 3)
            // return 0 if array to small.
            return 0;
        else if (nums.length == 3 || nums[0] + nums[1] + nums[2] >= target)
            return nums[0] + nums[1] + nums[2];
        //comment for above :  returning sum if arry size = 3 or if sorted array\'s first 3 elements are greater than or equal to target,
        //( the other elements will be even greater than target, so we can skip them)
        int min_tgt = Integer.MAX_VALUE;
        int min_sum = Integer.MAX_VALUE;
        for (int i = 0; i < nums.length - 2; i++) {
            int j = i + 1;
            int k = nums.length - 1;
            while (j < k) {
                // using long to avoid integer overflow testcases if exists
                long sum = (long) nums[i] + (long) nums[j] + (long) nums[k];
                //using abs to find the closest target regardless of signs
                if (Math.abs(target - sum) <= Math.abs(min_tgt)) {
                    min_tgt = (int) Math.abs(target - sum);
                    min_sum = (int) sum;
                }
                if (sum > target) {
                    k--;
                } else if (sum == target) {
                    return (int) sum;
                } else {
                    j++;
                }
            }
        }
        return min_sum;
    }
}
