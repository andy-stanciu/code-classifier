class Solution {

    public int threeSumClosest(int[] nums, int target) {
        // Step 1: Sort the array
        Arrays.sort(nums);
        // Step 2: Initialize the closest sum with the sum of the first three elements
        int closestSum = nums[0] + nums[1] + nums[2];
        // Step 3: Iterate through the array
        for (int i = 0; i < nums.length - 2; i++) {
            int left = i + 1;
            int right = nums.length - 1;
            // Step 4: Two-pointer technique
            while (left < right) {
                int currentSum = nums[i] + nums[left] + nums[right];
                // Update closest sum if the current sum is closer to the target
                if (Math.abs(currentSum - target) < Math.abs(closestSum - target)) {
                    closestSum = currentSum;
                }
                // Move pointers based on the comparison of currentSum and target
                if (currentSum < target) {
                    left++;
                } else if (currentSum > target) {
                    right--;
                } else {
                    // If exactly equal to target, return immediately
                    return currentSum;
                }
            }
        }
        // Step 5: Return the closest sum found
        return closestSum;
    }
}
