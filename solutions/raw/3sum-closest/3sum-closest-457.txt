class Solution {

    public int threeSumClosest(int[] nums, int target) {
        // sort the array
        Arrays.sort(nums);
        int n = nums.length;
        int bestSum = 0, bestDiff = Integer.MAX_VALUE;
        // maintain bestSum, currSum, bestDiff, curDiff --> your bestDiff should be min, on this basis only calculate the best sum
        for (int i = 0; i < n; ++i) {
            int j = i + 1, k = n - 1;
            while (j < k) {
                int currSum = nums[i] + nums[j] + nums[k];
                int currDiff = Math.abs(target - currSum);
                // check if the curr diff < best diff, if so, then update value of bestDiff and bestSum
                if (currDiff < bestDiff) {
                    bestDiff = currDiff;
                    bestSum = currSum;
                }
                // check if the currSum < target value, then move j towards right, else move k towards left
                if (currSum < target) {
                    j++;
                } else
                    k--;
            }
        }
        return bestSum;
    }
}
