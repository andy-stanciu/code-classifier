class Solution {

    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int j, k, min = Integer.MAX_VALUE, s, sum = nums[0] + nums[1] + nums[nums.length - 1];
        for (int i = 0; i < nums.length; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                // if the i is repeated, then we won\'t find anything better, same thing or worse
                continue;
            }
            // the two pointer approach to find the twosum that is closest to target
            j = i + 1;
            k = nums.length - 1;
            while (j < k) {
                s = nums[j] + nums[k];
                if (Math.abs(target - nums[i] - s) < min) {
                    min = Math.abs(target - nums[i] - s);
                    sum = s + nums[i];
                }
                // now it is about updating the pointers to try to get a smaller min
                if (s < target - nums[i]) {
                    ++j;
                } else if (s > target - nums[i]) {
                    --k;
                } else
                    break;
            }
        }
        return sum;
    }
}
