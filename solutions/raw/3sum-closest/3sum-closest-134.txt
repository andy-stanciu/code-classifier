class Solution {

    public int threeSumClosest(int[] nums, int target) {
        if (// If the length is three It will directly returned without applying sorting algorithm
        nums.length == 3) {
            return nums[1] + nums[0] + nums[2];
        }
        // Bubble sort algorithm for sorting the array
        bubbleSort(nums);
        // Calculated starting elements sum and stored in closestSum
        int closestSum = nums[0] + nums[1] + nums[2];
        for (// Taken a pointer which will point to first element of triplets
        // Taken a pointer which will point to first element of triplets
        // Taken a pointer which will point to first element of triplets
        int i = 0; i < nums.length - 2; i++) {
            for (//Taken a pointer which will point to second element of triplets
            //Taken a pointer which will point to second element of triplets
            //Taken a pointer which will point to second element of triplets
            int j = i + 1; j < nums.length - 1; j++) {
                for (//Third pointer which will point to every varying element of triplet
                //Third pointer which will point to every varying element of triplet
                //Third pointer which will point to every varying element of triplet
                int k = j + 1; k < nums.length; k++) {
                    // Stored the sum of the every triplet which will occur at that indices of i , j , k
                    int currentClosestSum = nums[i] + nums[j] + nums[k];
                    if (//Check the condition for difference of between currentClosestSum and target is less than the stored closestSum and target or not
                    Math.abs(currentClosestSum - target) < Math.abs(closestSum - target)) {
                        //If yes then the currentClosestSum is stored in closestSum
                        closestSum = currentClosestSum;
                    }
                }
            }
        }
        return closestSum;
    }

    public void bubbleSort(int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            boolean isSwap = false;
            for (int j = 1; j < nums.length - i; j++) {
                if (nums[j] < nums[j - 1]) {
                    int temp = nums[j];
                    nums[j] = nums[j - 1];
                    nums[j - 1] = temp;
                    isSwap = true;
                }
            }
            if (!isSwap) {
                break;
            }
        }
    }
}
