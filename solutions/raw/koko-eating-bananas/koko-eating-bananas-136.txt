class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int n = piles.length;
        int left = 1;
        int right = Arrays.stream(piles).max().getAsInt();
        int mid = 0;
        while (left <= right) {
            mid = left + (right - left) / 2;
            long sum = 0;
            for (int i = 0; i < n; i++) {
                sum += (long) Math.ceil((double) piles[i] / (double) mid);
            }
            if (sum <= h) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
}
