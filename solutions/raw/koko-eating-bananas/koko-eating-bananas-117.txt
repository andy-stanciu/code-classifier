class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        if (piles.length == 0) {
            return 0;
        }
        //find-max
        int max = max(piles);
        //setting low=1,high=max
        int low = 1, high = max, ans = -1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            //calling the main function
            int ttc = TimeToConsume(mid, piles);
            if (//if ttc<=h i.e for time to consume
            ttc <= h) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }

    public //finding-max
    //finding-max
    //finding-max
    int max(int[] a) {
        int max = a[0];
        for (int i = 1; i < a.length; i++) {
            max = Math.max(max, a[i]);
        }
        return max;
    }

    public //finding potential-k
    //finding potential-k
    //finding potential-k
    //finding potential-k
    int TimeToConsume(int n, int[] a) {
        int sum = 0;
        for (int i = 0; i < a.length; i++) {
            sum += Math.ceil((double) a[i] / n);
        }
        return sum;
    }
}
