class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int start = 1, end = findMax(piles);
        while (start <= end) {
            int mid = start + (end - start) / 2;
            int totalhour = calhour(mid, piles);
            if (totalhour <= h) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return start;
    }

    public int findMax(int[] arr) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < arr.length; i++) {
            max = Math.max(max, arr[i]);
        }
        return max;
    }

    public int calhour(int mid, int[] arr) {
        int ans = 0;
        for (int i = 0; i < arr.length; i++) {
            ans += Math.ceil((double) arr[i] / (double) mid);
        }
        return ans;
    }
}
