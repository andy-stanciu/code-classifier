class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int sum = 0;
        for (int i = 0; i < piles.length; i++) {
            sum += piles[i];
        }
        int minVal = (int) Math.ceil((double) sum / h);
        int maxVal = -1;
        for (int pile : piles) {
            maxVal = Math.max(maxVal, pile);
        }
        int result = maxVal;
        while (minVal < maxVal) {
            int mid = minVal + (maxVal - minVal) / 2;
            int res = 0;
            for (int i = 0; i < piles.length; i++) {
                res += Math.ceil((double) piles[i] / mid);
            }
            if (res <= h) {
                maxVal = mid;
            } else {
                minVal = ++mid;
            }
            if (res <= h && res >= result) {
                result = res;
            }
        }
        return maxVal;
    }
}
