class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int start = 1;
        int end = maxValue(piles);
        ;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            int hour = 0;
            for (int i = 0; i < piles.length; i++) {
                if (hour > h) {
                    break;
                } else if (mid >= piles[i]) {
                    hour += 1;
                } else {
                    hour += piles[i] / mid;
                    if (piles[i] % mid != 0) {
                        ++hour;
                    }
                }
            }
            if (hour <= h) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return start;
    }

    public static int maxValue(int[] piles) {
        int max = 0;
        max = piles[0];
        for (int i = 0; i < piles.length - 1; i++) {
            int num = Math.max(piles[i], piles[i + 1]);
            if (max < num) {
                max = num;
            }
        }
        return max;
    }
}
