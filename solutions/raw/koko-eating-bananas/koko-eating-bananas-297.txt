class Solution {

    public boolean isPossible(int[] piles, int h, int mid) {
        if (mid == 0) {
            return false;
        }
        int count = 0;
        for (int i = 0; i < piles.length; i++) {
            if (piles[i] % mid != 0) {
                count += piles[i] / mid + 1;
            } else {
                count += piles[i] / mid;
            }
        }
        if (count <= h)
            return true;
        else
            return false;
    }

    public int minEatingSpeed(int[] piles, int h) {
        int n = piles.length;
        int mx = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            mx = Math.max(mx, piles[i]);
        }
        int lb = 0;
        int ub = mx;
        int ans = 1;
        while (lb <= ub) {
            int mid = lb + (ub - lb) / 2;
            if (isPossible(piles, h, mid)) {
                ub = mid - 1;
                ans = mid;
            } else {
                lb = mid + 1;
            }
        }
        return ans;
    }
}
