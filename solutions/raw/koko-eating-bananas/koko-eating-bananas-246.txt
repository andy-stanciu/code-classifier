class Solution {

    // Function to find the maximum value in the piles array
    private int maxspeed(int[] piles) {
        int maxi = Integer.MIN_VALUE;
        for (int pile : piles) {
            maxi = Math.max(maxi, pile);
        }
        return maxi;
    }

    // Function to calculate hours required to eat all piles at a certain speed
    private int totalhours(int[] piles, int mid) {
        int totalhours = 0;
        for (int pile : piles) {
            // Use (pile + mid - 1) / mid for ceiling division using integer arithmetic
            totalhours += (pile + mid - 1) / mid;
        }
        return totalhours;
    }

    public int minEatingSpeed(int[] piles, int h) {
        int start = 1;
        int end = maxspeed(piles);
        while (start < end) {
            int mid = start + (end - start) / 2;
            int hours = totalhours(piles, mid);
            if (hours <= h) {
                // Try for a smaller value
                end = mid;
            } else {
                // Increase the speed
                start = mid + 1;
            }
        }
        // Minimum speed that satisfies the condition
        return start;
    }
}
