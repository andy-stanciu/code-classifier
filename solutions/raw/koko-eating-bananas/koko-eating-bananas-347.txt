class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int l = 1;
        int r = -1;
        for (int i = 0; i < piles.length; i++) {
            r = Math.max(r, piles[i]);
        }
        while (l <= r) {
            int mid = l + (r - l) / 2;
            boolean isSatisfy = check(piles, mid, h);
            if (isSatisfy) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }

    public boolean check(int[] piles, int mid, int h) {
        int counter = 0;
        for (int pile : piles) {
            counter += ((pile + mid - 1) / mid);
            if (counter > h) {
                return false;
            }
        }
        if (counter > h) {
            return false;
        }
        return true;
    }
}
// k=1   3 6 7 11 -> 27
// 2     2 3 4 6 -> 15
// 3     1 2 3 4 -> 10
// 4     1 2 2 3 -> 8
// 5
// 6     1 1 2 2  -> 6
