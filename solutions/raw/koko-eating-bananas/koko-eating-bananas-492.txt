class Solution {

    public static int findMax(int[] arr) {
        int max = Integer.MIN_VALUE;
        ;
        int n = arr.length;
        for (int i = 0; i < n; i++) max = Math.max(max, arr[i]);
        return max;
    }

    public static int calculateTotalHours(int[] arr, int hourly) {
        int totalHours = 0;
        int n = arr.length;
        for (int i = 0; i < n; i++) totalHours += Math.ceil((double) (arr[i]) / (double) (hourly));
        return totalHours;
    }

    public int minEatingSpeed(int[] pile, int h) {
        int max = findMax(pile);
        int low = 1, high = max;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            int totalHours = calculateTotalHours(pile, mid);
            if (totalHours <= h)
                high = mid - 1;
            else
                low = mid + 1;
        }
        return low;
    }
}
