class Solution {

    public static int findMax(int[] piles) {
        int maxi = Integer.MIN_VALUE;
        int n = piles.length;
        for (int i = 0; i < n; i++) {
            maxi = Math.max(piles[i], maxi);
        }
        return maxi;
    }

    public static int calculatehours(int[] piles, int hours) {
        int TotalHour = 0;
        int n = piles.length;
        for (int i = 0; i < n; i++) {
            TotalHour += Math.ceil((double) (piles[i]) / (double) (hours));
        }
        return TotalHour;
    }

    public int minEatingSpeed(int[] piles, int h) {
        int low = 1;
        int high = findMax(piles);
        while (low <= high) {
            int mid = (low + high) / 2;
            int TotalHour = calculatehours(piles, mid);
            if (TotalHour <= h) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
}
