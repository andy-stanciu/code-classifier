class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int low = 1;
        int high = max(piles);
        while (low <= high) {
            int mid = (low + high) / 2;
            int H = helper(piles, mid);
            if (H <= h) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }

    private int helper(int[] piles, int h) {
        int ans = 0;
        for (int i = 0; i < piles.length; i++) {
            ans += Math.ceil((double) piles[i] / (double) h);
        }
        return ans;
    }

    private int max(int[] arr) {
        int m = Integer.MIN_VALUE;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > m)
                m = arr[i];
        }
        return m;
    }
}
