class Solution {

    public long hoursTaken(int[] piles, int k) {
        long total = 0;
        for (int i = 0; i < piles.length; i++) {
            total = total + (int) Math.ceil((double) piles[i] / (double) k);
        }
        return total;
    }

    public int minEatingSpeed(int[] piles, int h) {
        int max = Arrays.stream(piles).max().getAsInt();
        int low = 1;
        int high = max;
        int mid;
        while (low <= high) {
            mid = (int) Math.floor((high + low) / 2);
            if (hoursTaken(piles, mid) <= h) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        System.out.println(low);
        return low;
    }
}
