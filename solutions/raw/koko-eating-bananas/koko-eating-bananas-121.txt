class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        // hints:
        // can koko finish eating when eating at this speed?
        // 1,  2,   3,  4,   5,   6,   7,  8,  9
        // no, no, no, yes, yes, yes, yes yes yes
        // can you define a boolean function
        // that takes in an eating speed, and returns
        // whether or not koko will finish eating?
        //consider using long
        long l = 1, r = (long) (1e9);
        while (l < r) {
            long m = (l + r) / 2;
            if (canFinish(piles, m, (long) h) == true) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return (int) l;
    }

    public boolean canFinish(int[] piles, long eating_speed, long h) {
        long total_time = 0;
        for (int i = 0; i < piles.length; i++) {
            long cur_time = (long) piles[i] / eating_speed;
            if ((long) piles[i] % eating_speed != 0)
                cur_time++;
            total_time += cur_time;
        }
        return total_time <= h;
    }
}
