class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int max = Integer.MIN_VALUE;
        int n = piles.length;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, piles[i]);
        }
        int reqiredTime = 0;
        int low = 1, high = max;
        int ans = 0;
        while (low <= high) {
            int mid = (low + high) / 2;
            reqiredTime = getReqiredTime(piles, mid, n);
            if (reqiredTime <= h) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }

    public static int getReqiredTime(int[] piles, int hour, int n) {
        int totalTime = 0;
        for (int i = 0; i < n; i++) {
            totalTime += Math.ceil((double) piles[i] / hour);
        }
        return totalTime;
    }
}
