class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int low = 1;
        int high = findHigh(piles);
        int ans = Integer.MAX_VALUE;
        while (low <= high) {
            int mid = (low + high) / 2;
            int totalhours = findTotalhours(piles, mid);
            if (totalhours <= h) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }

    public int findHigh(int[] piles) {
        int highvalue = Integer.MIN_VALUE;
        for (int i = 0; i < piles.length; i++) {
            highvalue = Math.max(piles[i], highvalue);
        }
        return highvalue;
    }

    public int findTotalhours(int[] piles, int hours) {
        int totalhours = 0;
        for (int j = 0; j < piles.length; j++) {
            totalhours += Math.ceil((double) piles[j] / (double) hours);
        }
        return totalhours;
    }
}
