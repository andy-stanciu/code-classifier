class Solution {

    public int max(int[] piles) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < piles.length; i++) {
            if (piles[i] > max) {
                max = piles[i];
            }
        }
        return max;
    }

    public int pile(int mid, int[] piles) {
        int count = 0;
        for (int i = 0; i < piles.length; i++) {
            count += Math.ceil((double) piles[i] / (double) mid);
        }
        return count;
    }

    public int minEatingSpeed(int[] piles, int h) {
        int max = max(piles);
        int start = 1;
        int end = max;
        while (start <= end) {
            int mid = (start + end) / 2;
            if (pile(mid, piles) <= h) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return start;
    }
}
