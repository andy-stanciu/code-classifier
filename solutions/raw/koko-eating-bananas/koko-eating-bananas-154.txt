class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int maxPile = Arrays.stream(piles).max().getAsInt();
        int start = 1;
        int end = maxPile;
        while (start < end) {
            int mid = start + (end - start) / 2;
            int totalHours = 0;
            // Calculate the total hours needed to eat all bananas at speed `mid`
            for (int pile : piles) {
                // Equivalent to ceil(pile / mid)
                totalHours += (pile + mid - 1) / mid;
            }
            // If the total hours is less than or equal to `h`, we can try a slower speed
            if (totalHours <= h) {
                // Try a smaller speed
                end = mid;
            } else {
                // Speed `mid` is too slow, try a faster speed
                start = mid + 1;
            }
        }
        // When start == end, this is the minimum speed that allows Koko to finish in `h` hours
        return start;
    }
}
