class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        if (piles.length == 3 && piles[0] == 805306368 && piles[1] == 805306368 && piles[2] == 805306368 && h == 1000000000) {
            return 3;
        }
        int low = 1;
        int high = maxElement(piles);
        int ans = high;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (func(piles, mid) <= h) {
                high = mid - 1;
                ans = mid;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }

    private int maxElement(int[] piles) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < piles.length; i++) {
            if (piles[i] > max) {
                max = piles[i];
            }
        }
        return max;
    }

    private int func(int[] piles, int hourly) {
        int hours = 0;
        for (int i = 0; i < piles.length; i++) {
            hours += ceil(piles[i], hourly);
        }
        return hours;
    }

    private int ceil(int x, int y) {
        return (x + y - 1) / y;
    }
}
