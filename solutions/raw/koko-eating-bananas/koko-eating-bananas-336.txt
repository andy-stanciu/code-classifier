class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int start = 1;
        int end = Integer.MIN_VALUE;
        end = Arrays.stream(piles).max().getAsInt();
        while (start <= end) {
            int mid = start + (end - start) / 2;
            long total = totalHours(mid, piles);
            if (total <= h) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return start;
    }

    public long totalHours(int k, int[] piles) {
        long sum = 0;
        for (int i = 0; i < piles.length; i++) {
            // ceiling
            sum += (piles[i] + k - 1) / k;
        }
        return sum;
    }
}
