class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int start = 1;
        // find the max
        int max = 0;
        for (int i = 0; i < piles.length; i++) {
            if (piles[i] > max) {
                max = piles[i];
            }
        }
        int end = max;
        int possibleAns = Integer.MAX_VALUE;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (numOfHours(piles, mid, h)) {
                possibleAns = Math.min(mid, possibleAns);
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return possibleAns;
    }

    public boolean numOfHours(int[] piles, int k, int h) {
        int count = 0;
        for (int i = 0; i < piles.length; i++) {
            count += piles[i] / k;
            if (piles[i] % k != 0) {
                count += 1;
            }
        }
        if (count < 0) {
            return false;
        }
        if (count <= h) {
            return true;
        } else {
            return false;
        }
    }
}
