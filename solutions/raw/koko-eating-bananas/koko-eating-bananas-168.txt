class Solution {

    int findMax(int[] piles) {
        int maxi = Integer.MIN_VALUE;
        for (int i = 0; i < piles.length; i++) {
            maxi = Math.max(maxi, piles[i]);
        }
        return maxi;
    }

    int calculateHours(int[] piles, int hourly) {
        int totalHours = 0;
        for (int i = 0; i < piles.length; i++) {
            totalHours += Math.ceil((double) piles[i] / (double) hourly);
        }
        return totalHours;
    }

    public int minEatingSpeed(int[] piles, int h) {
        int maxi = findMax(piles);
        int s = 0, e = maxi, ans = Integer.MAX_VALUE;
        while (s <= e) {
            int mid = s + (e - s) / 2;
            int totalHours = calculateHours(piles, mid);
            if (totalHours <= h) {
                // ans = mid;
                e = mid - 1;
            } else {
                s = mid + 1;
            }
        }
        return s;
    }
}
