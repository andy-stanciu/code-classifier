class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int min = 1;
        int max = Arrays.stream(piles).max().getAsInt();
        int minTime = Integer.MAX_VALUE;
        while (min <= max) {
            int mid = (min + max) / 2;
            Long ans = calculateBananaTimeWithSpeedK(piles, mid);
            if (ans <= h) {
                max = mid - 1;
            } else {
                min = mid + 1;
            }
        }
        return min;
    }

    public Long calculateBananaTimeWithSpeedK(int[] piles, int k) {
        Long time = 0L;
        for (int i = 0; i < piles.length; i++) {
            int pileTime = (int) Math.ceil((double) piles[i] / (double) k);
            time += pileTime;
        }
        return time;
    }
}
