class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int n = piles.length;
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, piles[i]);
        }
        int low = 1;
        int high = max;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            int reqH = reqTime(piles, mid);
            if (reqH <= h) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }

    public int reqTime(int[] piles, int k) {
        int reqTime = 0;
        for (int i = 0; i < piles.length; i++) {
            // (piles[i] + k - 1) / k -> instead of ceil
            reqTime += Math.ceil((double) piles[i] / k);
        }
        return reqTime;
    }
}
