class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        Arrays.sort(piles);
        int low = 0, high = piles.length - 1;
        int lastUpdate = -1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (findVal(mid, piles) <= h) {
                lastUpdate = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        System.out.println(lastUpdate);
        int first = 1;
        if (lastUpdate != 0) {
            first = piles[lastUpdate - 1];
        }
        int last = piles[lastUpdate];
        int output = piles[lastUpdate];
        while (first <= last) {
            int mid = (first + last) / 2;
            long out = findSecondVal(mid, lastUpdate - 1, piles);
            //System.out.println(out + " "+ mid);
            if (out <= h) {
                if (mid < output) {
                    output = mid;
                }
                last = mid - 1;
            } else {
                first = mid + 1;
            }
        }
        return output;
    }

    public long findSecondVal(int val, int mid, int[] piles) {
        long sum = mid + 1;
        int i = mid + 1;
        while (i < piles.length) {
            if (piles[i] % val == 0) {
                sum = sum + (long) (piles[i] / val);
                i++;
            } else {
                sum = sum + (long) (piles[i] / val) + 1;
                i++;
            }
        }
        return sum;
    }

    public int findVal(int mid, int[] piles) {
        int sum = mid + 1;
        int val = piles[mid];
        int i = mid + 1;
        while (i < piles.length) {
            if (piles[i] % val == 0) {
                sum = sum + (piles[i] / val);
                i++;
            } else {
                sum = sum + (piles[i] / val) + 1;
                i++;
            }
        }
        return sum;
    }
}
