class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int n = piles.length;
        int max = maxBanana(n, piles, h);
        int low = 1;
        int high = max;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            int totalH = totalHours(n, piles, mid);
            if (totalH <= h) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }

    public int maxBanana(int n, int[] piles, int h) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, piles[i]);
        }
        return max;
    }

    public int totalHours(int n, int[] piles, int hourly) {
        int totalH = 0;
        for (int i = 0; i < n; i++) {
            totalH += Math.ceil((double) (piles[i]) / (double) (hourly));
            /**
             * important***
             */
        }
        return totalH;
    }
}
