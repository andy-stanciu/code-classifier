class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int max = 0;
        for (int i = 0; i < piles.length; i++) {
            if (max < piles[i]) {
                max = piles[i];
            }
        }
        return (int) bs(piles, h, max);
    }

    public long bs(int[] arr, int h, int max) {
        long ans = -1;
        long low = 1;
        long high = max;
        while (low <= high) {
            long mid = low + (high - low) / 2;
            long val = check(arr, mid);
            if (val > h) {
                low = mid + 1;
            } else {
                ans = mid;
                high = mid - 1;
            }
        }
        return ans;
    }

    public long check(int[] arr, long mid) {
        long res = 0;
        for (int i = 0; i < arr.length; i++) {
            res += (arr[i] + mid - 1) / mid;
        }
        return res;
    }
}
