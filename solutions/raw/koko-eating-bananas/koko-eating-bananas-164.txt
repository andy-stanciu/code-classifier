class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int low = 0, high = maxOfArray(piles);
        while (low <= high) {
            int mid = (low + high) / 2;
            int totalHours = calcuHours(piles, mid);
            if (totalHours <= h)
                high = mid - 1;
            else
                low = mid + 1;
        }
        return low;
    }

    public static int maxOfArray(int[] piles) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < piles.length; i++) {
            max = Math.max(max, piles[i]);
        }
        return max;
    }

    public static int calcuHours(int[] piles, int bph) {
        // bph = bananas per hour
        int total = 0;
        for (int i = 0; i < piles.length; i++) {
            total += Math.ceil((double) (piles[i]) / (double) (bph));
        }
        return total;
    }
}
