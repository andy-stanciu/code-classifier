class Solution {

    public static int Maximumbananas(int[] piles) {
        int n = piles.length;
        int maxi = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            maxi = Math.max(maxi, piles[i]);
        }
        return maxi;
    }

    public static int MaximumHours(int[] piles, int hourly) {
        int totalH = 0;
        int n = piles.length;
        for (int i = 0; i < n; i++) {
            totalH += Math.ceil((double) (piles[i]) / (double) (hourly));
        }
        return totalH;
    }

    public int minEatingSpeed(int[] piles, int h) {
        int l = 1;
        int r = Maximumbananas(piles);
        int mid;
        while (l <= r) {
            mid = l + (r - l) / 2;
            int totalH = MaximumHours(piles, mid);
            if (totalH <= h) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
}
