class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int low = 0;
        int high = findMax(piles);
        while (low <= high) {
            int mid = (low + high) / 2;
            int totalH = calculateTotalHours(piles, mid);
            if (totalH <= h)
                high = mid - 1;
            else
                low = mid + 1;
        }
        return low;
    }

    // To calculate range find the maxi which would work as maxi for us
    public static int findMax(int[] piles) {
        int maxi = Integer.MAX_VALUE;
        for (int i = 0; i < piles.length; i++) maxi = Math.max(piles[i], maxi);
        return maxi;
    }

    // Calculate Total Hours it will be taking to eat banana if it is eating
    // xHourly Banana
    public static int calculateTotalHours(int[] piles, int Xhourly) {
        int n = piles.length;
        int totalH = 0;
        for (int i = 0; i < n; i++) totalH += Math.ceil((double) (piles[i]) / (double) (Xhourly));
        return totalH;
    }
}
