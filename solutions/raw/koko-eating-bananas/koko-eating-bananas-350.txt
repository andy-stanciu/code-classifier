class Solution {

    public int maxElement(int[] piles) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < piles.length; i++) {
            max = Math.max(max, piles[i]);
        }
        return max;
    }

    public int calHours(int[] piles, int k) {
        double hours = 0;
        for (int i = 0; i < piles.length; i++) {
            hours = hours + Math.ceil((double) piles[i] / k);
        }
        return (int) hours;
    }

    public int minEatingSpeed(int[] piles, int h) {
        int maximum = maxElement(piles);
        int start = 1;
        int end = maximum;
        while (start <= end) {
            int mid = (start + end) / 2;
            int totalHrs = calHours(piles, mid);
            if (totalHrs <= h) {
                end = mid - 1;
            } else if (totalHrs > h) {
                start = mid + 1;
            }
        }
        return start;
    }
}
