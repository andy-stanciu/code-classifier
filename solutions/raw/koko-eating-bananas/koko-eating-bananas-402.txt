class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        // Function Call...
        return EatingSpeedBinaryOptimisation(piles, h);
    }

    public int EatingSpeedBinaryOptimisation(int[] piles, int hours) {
        // Setting boundary for speed...
        int min = 1, max = Integer.MAX_VALUE;
        while (min <= max) {
            // Binary Search for k Optimisation...
            int middle = min + (max - min) / 2;
            if (// If speed is sufficient...
            KokoCanEatAll(piles, middle, hours))
                // If speed is sufficient...
                max = middle - 1;
            else
                // If speed is not sufficient...
                min = middle + 1;
        }
        return min;
    }

    public boolean KokoCanEatAll(int[] piles, double speed, int hours) {
        // Time required to eat all bananas...
        int time = 0;
        for (int banana : piles) // Adding the total time...
        time += Math.ceil(banana / speed);
        // If all bananas can be eaten...
        return time <= hours;
    }
}
