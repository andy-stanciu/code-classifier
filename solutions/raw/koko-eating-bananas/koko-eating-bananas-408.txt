class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int max = findMax(piles);
        int low = 1, high = max;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            int hours = calculateTotal(piles, mid);
            if (hours <= h) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }

    public int findMax(int[] piles) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < piles.length; i++) {
            if (piles[i] > max) {
                max = piles[i];
            }
        }
        return max;
    }

    public int calculateTotal(int[] piles, int mid) {
        int totalHours = 0;
        for (int i = 0; i < piles.length; i++) {
            totalHours += Math.ceil((double) piles[i] / mid);
        }
        return totalHours;
    }
}
