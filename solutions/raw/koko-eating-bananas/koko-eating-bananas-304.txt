class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int low = 0, high = max(piles);
        while (low <= high) {
            int mid = low + (high - low) / 2;
            int totalH = total(piles, mid);
            if (totalH <= h) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }

    public int max(int[] piles) {
        int high = 0;
        for (int i : piles) {
            high = Math.max(high, i);
        }
        return high;
    }

    public int total(int[] piles, int mid) {
        int totalH = 0;
        for (int i = 0; i < piles.length; i++) {
            totalH += Math.ceil((double) piles[i] / (double) mid);
        }
        return totalH;
    }
}
