// Using Brute Force
// class Solution {
//     public int minEatingSpeed(int[] piles, int h) {
//         int k = 1;
//         int ans = Integer.MAX_VALUE;
//         while(true){
//             int totalTime = 0;
//             for(int i= 0; i<piles.length; i++){
//                 int a = piles[i]/k;
//                 double a1 = (double)(piles[i])/(double)k;
//                 if(a<a1){
//                     totalTime+=a+1;
//                 }
//                 else{
//                     totalTime+=a;
//                 }
//                 if(totalTime>h){
//                     break; // Not possible
//                 }
//             }
//             if(totalTime<=h){
//                 ans = k;
//                 break;
//             }
//             k++;
//         }
//         return ans;
//     }
// }
// Using Binary Search
class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int left = 1;
        int right = Integer.MAX_VALUE;
        while (left < right) {
            int mid = left + (right - left) / 2;
            int totalTime = getTotalTime(piles, mid);
            if (totalTime <= h) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }

    private int getTotalTime(int[] piles, int k) {
        int totalTime = 0;
        for (int pile : piles) {
            totalTime += (pile + k - 1) / k;
        }
        return totalTime;
    }
}
