class Solution {

    public static int findMax(int[] v) {
        int maxi = Integer.MIN_VALUE;
        int n = v.length;
        for (int i = 0; i < n; i++) {
            maxi = Math.max(maxi, v[i]);
        }
        return maxi;
    }

    int time(int[] piles, int mid, int n) {
        int t = 0;
        for (int i = 0; i < n; i++) {
            t += Math.ceil((double) piles[i] / mid);
        }
        return t;
    }

    public int minEatingSpeed(int[] piles, int H) {
        int n = piles.length;
        int l = 1, h = findMax(piles);
        while (l <= h) {
            int mid = l + (h - l) / 2;
            int total = time(piles, mid, n);
            if (total <= H) {
                h = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
}
