class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        //MIN VALUES OF HAW SPEED IS LIKE 1 BANANA PER HOUR IS STARTTING POINT
        int start = 1;
        int n = piles.length;
        int ans = -1;
        //MAX VALUE IT CAN BE POSSIBLE IN LIKE MAX VALUE IN THE ARRAY i.e : 11;
        int end = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            if (piles[i] > end) {
                //int the end it results in max valuen present in tth piles array {11}
                end = piles[i];
            }
        }
        while (start <= end) {
            int sum = 0;
            int mid = start + (end - start) / 2;
            if (isEatingSpeedValid(piles, mid, h)) {
                ans = mid;
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return ans;
    }

    boolean isEatingSpeedValid(int[] piles, int eatingSpeeed, int h) {
        int hoursSpent = 0;
        for (int i = 0; i < piles.length; i++) {
            hoursSpent += piles[i] / eatingSpeeed;
            if (piles[i] % eatingSpeeed != 0) {
                hoursSpent += 1;
            }
            if (hoursSpent > h) {
                return false;
            }
        }
        return true;
    }
}
