class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int maxPile = Arrays.stream(piles).max().getAsInt();
        int sol = maxPile;
        int start = 1;
        while (start <= maxPile) {
            int mid = start + (maxPile - start) / 2;
            if (ableToEat(mid, piles, h)) {
                sol = Math.min(sol, mid);
                maxPile = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return sol;
    }

    private boolean ableToEat(int k, int[] piles, int h) {
        int hours = 0;
        for (int pile : piles) {
            hours += (pile + k - 1) / k;
        }
        return hours <= h;
    }
}
