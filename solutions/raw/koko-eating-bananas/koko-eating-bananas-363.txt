class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        long sum = 0;
        for (int elements : piles) {
            sum += elements;
        }
        long start = sum / h;
        long end = sum;
        while (start < end) {
            long mid = start + (end - start) / 2;
            long timeWithMid = algorithm(piles, mid);
            if (timeWithMid <= h) {
                end = mid;
            } else {
                start = mid + 1;
            }
        }
        return (int) start;
    }

    long algorithm(int[] piles, long mid) {
        long newSum = 0;
        for (int i = 0; i < piles.length; i++) {
            newSum += (long) Math.ceil((double) piles[i] / mid);
        }
        return newSum;
    }
}
