class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int low = 1;
        int high = maxelement(piles);
        int ans = Integer.MAX_VALUE;
        while (low <= high) {
            int mid = (low + high) / 2;
            int requiretime = sumofhours(piles, mid);
            if (requiretime <= h) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        // we also can return low also
        return ans;
    }

    public int sumofhours(int[] piles, int mid) {
        int totalhours = 0;
        for (int i = 0; i < piles.length; i++) {
            totalhours += Math.ceil((double) (piles[i]) / (double) mid);
        }
        return totalhours;
    }

    public int maxelement(int[] piles) {
        int maxii = Integer.MIN_VALUE;
        int n = piles.length;
        for (int i = 0; i < n; i++) {
            maxii = Math.max(maxii, piles[i]);
        }
        return maxii;
    }
}
