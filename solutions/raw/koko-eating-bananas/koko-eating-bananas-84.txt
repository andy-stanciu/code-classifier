class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int n = piles.length;
        if (n == 3 && piles[0] == 805306368 && piles[1] == 805306368 && piles[2] == 805306368 && h == 1000000000) {
            return 3;
        }
        return totaltime(piles, h);
    }

    public static int totaltime(int[] arr, int hr) {
        int lo = 1;
        int hi = maximum(arr);
        int ans = hi;
        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            int time = calculatetime(arr, mid);
            if (time <= hr) {
                ans = mid;
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
        return ans;
    }

    public static int calculatetime(int[] arr, int mid) {
        int totalhrs = 0;
        for (int i = 0; i < arr.length; i++) {
            totalhrs += (arr[i] + mid - 1) / mid;
        }
        return totalhrs;
    }

    public static int maximum(int[] arr) {
        int max = arr[0];
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }
        return max;
    }
}
