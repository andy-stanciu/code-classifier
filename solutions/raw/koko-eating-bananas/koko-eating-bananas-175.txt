class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < piles.length; i++) {
            max = Math.max(max, piles[i]);
        }
        int si = 1;
        int ei = max;
        int ans = 0;
        while (si <= ei) {
            int mid = si + (ei - si) / 2;
            long time = totalHour(piles, mid);
            if (time <= h) {
                ei = mid - 1;
                ans = mid;
            } else {
                si = mid + 1;
            }
        }
        return ans;
    }

    public long totalHour(int[] piles, int h) {
        long th = 0;
        for (int i = 0; i < piles.length; i++) {
            th += (long) Math.ceil((double) piles[i] / (double) h);
        }
        return th;
    }
}
