class Solution {

    public int numberOfHoursTaken(int bananasPerHour, int[] piles) {
        int hours = 0;
        int numberOfPiles = piles.length;
        for (int pile = 0; pile < numberOfPiles; pile++) {
            /**
             * (double) conversion is important for non lossy division
             */
            hours += Math.ceil((double) piles[pile] / (double) bananasPerHour);
        }
        return hours;
    }

    public int minEatingSpeed(int[] piles, int h) {
        if (piles.length == 0)
            return 0;
        int maxBananasInOnePile = Arrays.stream(piles).max().orElse(Integer.MIN_VALUE);
        int low = 1;
        int high = maxBananasInOnePile;
        int ans = 0;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            /**
             * If possible to finish within h hours, we can consider it for
             *            our answer, but since we are looking for the minimum answer we will check in the left half to minimise the answer
             */
            if (numberOfHoursTaken(mid, piles) <= h) {
                /**
                 * Store in the answer, it can be the minimum but not sure
                 */
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        /**
         * Return low or ans, both will work
         */
        return ans;
    }
}
