class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        // int start=1;
        // Arrays.sort(piles);
        // int end=piles[piles.length-1];
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        for (int pile : piles) {
            max = Math.max(max, pile);
            min = Math.min(min, pile);
        }
        int start = 1;
        int end = max;
        while (start < end) {
            int mid = (start + end) / 2;
            // int sum=0;
            // for(int i=0;i<piles.length;i++){
            //     sum+=Math.ceil((double)piles[i]/mid);
            // }
            int sum = binary(mid, piles);
            // if(sum==h){
            //     return sum;
            // }
            if (sum <= h) {
                end = mid;
            } else {
                start = mid + 1;
            }
        }
        return start;
    }

    public int binary(int mid, int[] piles) {
        int sum = 0;
        for (int i = 0; i < piles.length; i++) {
            sum += Math.ceil((double) piles[i] / mid);
        }
        return sum;
    }
}
// class Solution {
//     public int minEatingSpeed(int[] piles, int h) {
//         int max = Integer.MIN_VALUE;
//         for (int pile : piles) {
//             max = Math.max(max, pile);
//         }
//         int start = 1;
//         int end =  max;
//         while(start<end){
//             int mid = start + (end-start) / 2;
//             if(koko(mid,piles)>h){
//                 start = mid + 1;
//           }
//             else{
//                 end=mid;
//             }
//         }
//         return start;
//     }
//     public int koko(long num, int[] arr){
//     int sum = 0;
//     for(int i = 0; i < arr.length; i++){
//         sum += Math.ceil((double)arr[i]/num);
//     }
//     return sum;
// }
// }
