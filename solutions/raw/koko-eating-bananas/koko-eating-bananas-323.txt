class Solution {

    public int calculate(int[] arr, int h) {
        int total_h = 0;
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            total_h += Math.ceil((double) arr[i] / (double) h);
        }
        return total_h;
    }

    public int minEatingSpeed(int[] piles, int h) {
        int max = Arrays.stream(piles).max().getAsInt();
        int low = 1, high = max, ans = Integer.MAX_VALUE;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            int total_h = calculate(piles, mid);
            if (total_h <= h) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
}
