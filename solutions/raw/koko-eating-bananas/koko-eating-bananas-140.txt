class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int low = 1;
        int high = maximumelement(piles);
        int ans = Integer.MAX_VALUE;
        while (low <= high) {
            int mid = (low + high) / 2;
            int totalhrs = total(piles, mid);
            if (totalhrs <= h) {
                ans = mid;
                high = mid - 1;
            } else
                low = mid + 1;
        }
        return ans;
    }

    public int total(int[] piles, int mid) {
        int totalhrs = 0;
        for (int i = 0; i < piles.length; i++) {
            totalhrs += Math.ceil((double) (piles[i]) / (double) (mid));
        }
        return totalhrs;
    }

    public int maximumelement(int[] piles) {
        int rt = Integer.MIN_VALUE;
        for (int i = 0; i < piles.length; i++) {
            rt = Math.max(rt, piles[i]);
        }
        return rt;
    }
}
