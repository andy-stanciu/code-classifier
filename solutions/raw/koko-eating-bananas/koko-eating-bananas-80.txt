class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int low = 1, high = FindMax(piles), ans = 0;
        while (low <= high) {
            int mid = (low + high) / 2;
            int Eatingspeed = Calcuating_Hours_in_the_Array(piles, mid);
            if (Eatingspeed <= h) {
                ans = mid;
                high = mid - 1;
            } else
                low = mid + 1;
        }
        return ans;
    }

    public static int FindMax(int[] piles) {
        int Max = Integer.MIN_VALUE;
        for (int i = 0; i < piles.length; i++) {
            Max = Math.max(piles[i], Max);
        }
        return Max;
    }

    public static int Calcuating_Hours_in_the_Array(int[] piles, int hour) {
        int TH = 0;
        for (int i = 0; i < piles.length; i++) {
            TH += Math.ceil((double) (piles[i]) / (double) (hour));
        }
        return TH;
    }
}
