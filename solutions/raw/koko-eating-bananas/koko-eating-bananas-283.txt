class Solution {

    // Helper function to check if Koko can eat all bananas at speed k within h hours
    public boolean isPossible(int k, int[] piles, int h) {
        int time = 0;
        for (int i = 0; i < piles.length; i++) {
            if (piles[i] % k == 0)
                time += piles[i] / k;
            else
                // Extra hour if not exactly divisible
                time += (piles[i] / k) + 1;
            // If time exceeds h, return false
            if (time > h)
                return false;
        }
        return true;
    }

    // Main function to find the minimum eating speed
    public int minEatingSpeed(int[] piles, int h) {
        Arrays.sort(piles);
        int n = piles.length;
        // Start with speed 1
        int l = 1;
        // Maximum speed is the largest pile size
        int r = piles[n - 1];
        int ans = -1;
        while (l <= r) {
            int mid = (l + r) / 2;
            if (isPossible(mid, piles, h)) {
                // Update answer if mid is possible
                ans = mid;
                // Try for a smaller speed
                r = mid - 1;
            } else {
                // Try for a larger speed
                l = mid + 1;
            }
        }
        return ans;
    }
}
