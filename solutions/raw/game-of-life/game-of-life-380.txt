class Solution {

    public void gameOfLife(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] temp = new int[m][n];
        //check for each cell
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                check(board, i, j, temp);
            }
        }
        //copy temp matrix in board matrix
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = temp[i][j];
            }
        }
    }

    private void check(int[][] board, int i, int j, int[][] temp) {
        //count no of live
        int count = 0;
        //upper row
        if ((i - 1 >= 0 && j - 1 >= 0) && board[i - 1][j - 1] == 1)
            count++;
        if ((i - 1 >= 0 && j >= 0) && board[i - 1][j] == 1)
            count++;
        if ((i - 1 >= 0 && j + 1 < board[0].length) && board[i - 1][j + 1] == 1)
            count++;
        //two sides
        if ((i >= 0 && j - 1 >= 0) && board[i][j - 1] == 1)
            count++;
        if ((i >= 0 && j + 1 < board[0].length) && board[i][j + 1] == 1)
            count++;
        //lower row
        if ((i + 1 < board.length && j - 1 >= 0) && board[i + 1][j - 1] == 1)
            count++;
        if ((i + 1 < board.length && j >= 0) && board[i + 1][j] == 1)
            count++;
        if ((i + 1 < board.length && j + 1 < board[0].length) && board[i + 1][j + 1] == 1)
            count++;
        //check conditions in question & update value in temp matrix
        if (board[i][j] == 1 && (count < 2 || count > 3)) {
            temp[i][j] = 0;
        } else if (board[i][j] == 1 && (count == 2 || count == 3)) {
            temp[i][j] = 1;
        } else if (board[i][j] == 0 && count == 3) {
            temp[i][j] = 1;
        }
    }
}
