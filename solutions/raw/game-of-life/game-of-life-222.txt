class Solution {

    public void gameOfLife(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int lne = countNeighbor(board, i, j);
                if (board[i][j] == 1 || board[i][j] == -1)
                    board[i][j] = (lne < 2 || lne > 3) ? -1 : board[i][j];
                else if (board[i][j] == 0 && lne == 3)
                    board[i][j] = 2;
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                board[i][j] = board[i][j] <= 0 ? 0 : 1;
            }
        }
    }

    public int countNeighbor(int[][] board, int r, int c) {
        int le = c > 0 ? board[r][c - 1] : 0;
        int ri = c < board[0].length - 1 ? board[r][c + 1] : 0;
        int up = r > 0 ? board[r - 1][c] : 0;
        int down = r < board.length - 1 ? board[r + 1][c] : 0;
        int ul = (r > 0 && c > 0) ? board[r - 1][c - 1] : 0;
        int ur = (r > 0 && c < board[0].length - 1) ? board[r - 1][c + 1] : 0;
        int dr = (r < board.length - 1 && c < board[0].length - 1) ? board[r + 1][c + 1] : 0;
        int dl = (r < board.length - 1 && c > 0) ? board[r + 1][c - 1] : 0;
        return ((le == 1 || le == -1) ? 1 : 0) + ((ri == 1 || ri == -1) ? 1 : 0) + ((up == 1 || up == -1) ? 1 : 0) + ((down == 1 || down == -1) ? 1 : 0) + ((ul == 1 || ul == -1) ? 1 : 0) + ((ur == 1 || ur == -1) ? 1 : 0) + ((dr == 1 || dr == -1) ? 1 : 0) + ((dl == 1 || dl == -1) ? 1 : 0);
    }
}
