class Solution {

    public static int[][] directions = { { 1, 0 }, { 0, 1 }, { -1, 0 }, { 0, -1 }, { -1, -1 }, { -1, 1 }, { 1, 1 }, { 1, -1 } };

    public void gameOfLife(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 1) {
                    dp[i][j] = forOne(board, m, n, i, j);
                } else {
                    dp[i][j] = forZero(board, m, n, i, j);
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = dp[i][j];
            }
        }
    }

    private int forZero(int[][] board, int m, int n, int i, int j) {
        int count = 0;
        for (int[] dir : directions) {
            int x = dir[0] + i;
            int y = dir[1] + j;
            if (x >= m || y >= n || x < 0 || y < 0)
                continue;
            if (board[x][y] == 1)
                count++;
        }
        return count == 3 ? 1 : 0;
    }

    private int forOne(int[][] board, int m, int n, int i, int j) {
        int lives = 0;
        for (int[] dir : directions) {
            int x = dir[0] + i;
            int y = dir[1] + j;
            if (x >= m || y >= n || x < 0 || y < 0)
                continue;
            if (board[x][y] == 1)
                lives++;
        }
        return lives < 2 ? 0 : (lives == 2 || lives == 3) ? 1 : 0;
    }
}
