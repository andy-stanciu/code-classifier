class Solution {

    int stateChange01 = 2;

    int stateChange10 = 3;

    public void gameOfLife(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int curr = board[i][j];
                if (curr == 0) {
                    int liveCount = getNeightbourCount(board, i, j, 1);
                    if (liveCount == 3) {
                        board[i][j] = 2;
                    }
                } else {
                    int liveCount = getNeightbourCount(board, i, j, 1);
                    if (liveCount < 2 || liveCount > 3) {
                        board[i][j] = 3;
                    }
                }
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] == 2)
                    board[i][j] = 1;
                else if (board[i][j] == 3) {
                    board[i][j] = 0;
                }
            }
        }
    }

    public int getNeightbourCount(int[][] board, int i, int j, int state) {
        int[] xDirection = new int[] { 0, 0, 1, 1, -1, -1, 1, -1 };
        int[] yDirection = new int[] { 1, -1, 1, -1, -1, 1, 0, 0 };
        int count = 0;
        for (int k = 0; k < xDirection.length; k++) {
            int currX = i + xDirection[k];
            int currY = j + yDirection[k];
            if (validateCoordinate(currX, currY, board.length, board[0].length)) {
                if (getCurrentState(board[currX][currY]) == state) {
                    count++;
                }
            }
        }
        return count;
    }

    public boolean validateCoordinate(int i, int j, int rows, int cols) {
        if (i < 0 || i >= rows || j < 0 || j >= cols)
            return false;
        return true;
    }

    public int getCurrentState(int a) {
        if (a == stateChange01)
            return 0;
        if (a == stateChange10)
            return 1;
        return a;
    }
}
