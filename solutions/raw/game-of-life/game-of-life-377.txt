class Solution {

    public void gameOfLife(int[][] board) {
        int r = board.length;
        int c = board[0].length;
        //Taking 2 as live and 3 as dead
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                int count = neighbourCount(board, i, j);
                if (board[i][j] == 0) {
                    if (count == 3) {
                        board[i][j] = 2;
                    }
                } else if (board[i][j] == 1) {
                    if (count < 2 || count > 3) {
                        board[i][j] = 3;
                    }
                }
            }
        }
        //converting the 2 and 3 to 0 and 1
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (board[i][j] == 2) {
                    board[i][j] = 1;
                } else if (board[i][j] == 3) {
                    board[i][j] = 0;
                }
            }
        }
    }

    int neighbourCount(int[][] board, int i, int j) {
        int r = board.length;
        int c = board[0].length;
        int liveC = 0;
        //		check for horizontal neighbour
        if (j - 1 >= 0) {
            if (board[i][j - 1] == 1 || board[i][j - 1] == 3) {
                liveC++;
            }
        }
        if (j + 1 < c) {
            if (board[i][j + 1] == 1 || board[i][j + 1] == 3) {
                liveC++;
            }
        }
        //		vertical
        if (i - 1 >= 0) {
            if (board[i - 1][j] == 1 || board[i - 1][j] == 3) {
                liveC++;
            }
        }
        if (i + 1 < r) {
            if (board[i + 1][j] == 1 || board[i + 1][j] == 3) {
                liveC++;
            }
        }
        //		diagonal
        if (i - 1 >= 0 && j - 1 >= 0) {
            if (board[i - 1][j - 1] == 1 || board[i - 1][j - 1] == 3) {
                liveC++;
            }
        }
        if (i - 1 >= 0 && j + 1 < c) {
            if (board[i - 1][j + 1] == 1 || board[i - 1][j + 1] == 3) {
                liveC++;
            }
        }
        if (i + 1 < r && j - 1 >= 0) {
            if (board[i + 1][j - 1] == 1 || board[i + 1][j - 1] == 3) {
                liveC++;
            }
        }
        if (i + 1 < r && j + 1 < c) {
            if (board[i + 1][j + 1] == 1 || board[i + 1][j + 1] == 3) {
                liveC++;
            }
        }
        return liveC;
    }
}
