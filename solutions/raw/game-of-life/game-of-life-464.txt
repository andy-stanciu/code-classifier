class Solution {

    public void gameOfLife(int[][] board) {
        int numRows = board.length;
        int numColumns = board[0].length;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                //0 transitioned to 1 is represented by -1
                //so 0 can be represented by 0 or -1
                //1 transitioned to 0 is represented by 0
                //so 1 can be represented as 1 or -1
                int x = i;
                int y = j;
                int count = 0;
                //top x-1,y
                if (x - 1 >= 0 && y >= 0 && y < numColumns) {
                    if (board[x - 1][y] == 1 || board[x - 1][y] == -1)
                        count++;
                }
                //top right x-1,y+1
                if (x - 1 >= 0 && y + 1 < numColumns) {
                    if (board[x - 1][y + 1] == 1 || board[x - 1][y + 1] == -1)
                        count++;
                }
                //right x,y+1
                if (x >= 0 && x < numRows && y + 1 < numColumns) {
                    if (board[x][y + 1] == 1 || board[x][y + 1] == -1)
                        count++;
                }
                //bottomright x+1,y+1
                if (x + 1 < numRows && y + 1 < numColumns) {
                    if (board[x + 1][y + 1] == 1 || board[x + 1][y + 1] == -1)
                        count++;
                }
                //bottom x+1,y
                if (x + 1 < numRows && y >= 0 && y < numColumns) {
                    if (board[x + 1][y] == 1 || board[x + 1][y] == -1)
                        count++;
                }
                //bottomleft x+1,y-1
                if (x + 1 < numRows && y - 1 >= 0) {
                    if (board[x + 1][y - 1] == 1 || board[x + 1][y - 1] == -1)
                        count++;
                }
                //left x,y-1
                if (x >= 0 && x < numRows && y - 1 >= 0) {
                    if (board[x][y - 1] == 1 || board[x][y - 1] == -1)
                        count++;
                }
                //topleft x-1,y-1
                if (x - 1 >= 0 && y - 1 >= 0) {
                    if (board[x - 1][y - 1] == 1 || board[x - 1][y - 1] == -1)
                        count++;
                }
                //if the current cell is 0 ,and count is 3, cell becomes 2
                if (board[x][y] == 0 && count == 3)
                    board[x][y] = 2;
                //if the current cell is 1 and count != 2 || count!=3 then cell becomes -1
                if ((board[x][y] == 1 || board[x][y] == -1)) {
                    if (count == 2 || count == 3)
                        board[i][j] = 1;
                    else
                        board[i][j] = -1;
                }
            }
        }
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numColumns; j++) {
                // System.out.print(board[i][j] + " ");
                if (board[i][j] == -1)
                    board[i][j] = 0;
                else if (board[i][j] == 2)
                    board[i][j] = 1;
            }
            // System.out.println();
        }
    }
}
