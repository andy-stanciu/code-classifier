class Solution {

    public void gameOfLife(int[][] board) {
        int m = board.length, n = board[0].length;
        int[][] dp = new int[m][n];
        if (n > 1) {
            if (board[0][1] == 1)
                dp[0][0]++;
            if (board[0][n - 2] == 1)
                dp[0][n - 1]++;
        }
        if (m > 1) {
            if (board[1][0] == 1)
                dp[0][0]++;
            if (board[m - 2][0] == 1)
                dp[m - 1][0]++;
            if (n > 1) {
                if (board[1][n - 1] == 1)
                    dp[0][n - 1]++;
                if (board[m - 1][1] == 1)
                    dp[m - 1][0]++;
                if (board[m - 2][n - 1] == 1)
                    dp[m - 1][n - 1]++;
                if (board[m - 1][n - 2] == 1)
                    dp[m - 1][n - 1]++;
                if (board[1][1] == 1)
                    dp[0][0]++;
                if (board[1][n - 2] == 1)
                    dp[0][n - 1]++;
                if (board[m - 2][1] == 1)
                    dp[m - 1][0]++;
                if (board[m - 2][n - 2] == 1)
                    dp[m - 1][n - 1]++;
            }
        }
        for (int i = 1; i < m - 1; i++) {
            if (board[i - 1][0] == 1)
                dp[i][0]++;
            if (board[i + 1][0] == 1)
                dp[i][0]++;
            if (n > 1) {
                if (board[i - 1][1] == 1)
                    dp[i][0]++;
                if (board[i][1] == 1)
                    dp[i][0]++;
                if (board[i + 1][1] == 1)
                    dp[i][0]++;
                if (board[i - 1][n - 2] == 1)
                    dp[i][n - 1]++;
                if (board[i][n - 2] == 1)
                    dp[i][n - 1]++;
                if (board[i + 1][n - 2] == 1)
                    dp[i][n - 1]++;
                if (board[i - 1][n - 1] == 1)
                    dp[i][n - 1]++;
                if (board[i + 1][n - 1] == 1)
                    dp[i][n - 1]++;
            }
        }
        for (int i = 1; i < n - 1; i++) {
            if (board[0][i - 1] == 1)
                dp[0][i]++;
            if (board[0][i + 1] == 1)
                dp[0][i]++;
            if (m > 1) {
                if (board[1][i - 1] == 1)
                    dp[0][i]++;
                if (board[1][i] == 1)
                    dp[0][i]++;
                if (board[1][i + 1] == 1)
                    dp[0][i]++;
                if (board[m - 2][i - 1] == 1)
                    dp[m - 1][i]++;
                if (board[m - 2][i] == 1)
                    dp[m - 1][i]++;
                if (board[m - 2][i + 1] == 1)
                    dp[m - 1][i]++;
                if (board[m - 1][i + 1] == 1)
                    dp[m - 1][i]++;
                if (board[m - 1][i - 1] == 1)
                    dp[m - 1][i]++;
            }
        }
        for (int i = 1; i < m - 1; i++) {
            for (int j = 1; j < n - 1; j++) {
                if (board[i - 1][j] == 1)
                    dp[i][j]++;
                if (board[i][j - 1] == 1)
                    dp[i][j]++;
                if (board[i + 1][j] == 1)
                    dp[i][j]++;
                if (board[i][j + 1] == 1)
                    dp[i][j]++;
                if (board[i - 1][j - 1] == 1)
                    dp[i][j]++;
                if (board[i + 1][j + 1] == 1)
                    dp[i][j]++;
                if (board[i - 1][j + 1] == 1)
                    dp[i][j]++;
                if (board[i + 1][j - 1] == 1)
                    dp[i][j]++;
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 0) {
                    if (dp[i][j] == 3)
                        board[i][j]++;
                } else if (!(dp[i][j] == 2 || dp[i][j] == 3))
                    board[i][j]--;
            }
        }
    }
}
