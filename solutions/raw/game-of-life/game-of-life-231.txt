class Solution {

    public void gameOfLife(int[][] board) {
        int n = board.length;
        int m = board[0].length;
        // copy of borad
        int[][] copy = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                copy[i][j] = board[i][j];
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int[] cnt = count(copy, i, j);
                int live = cnt[0];
                int dead = cnt[1];
                if (copy[i][j] == 1 && live < 2) {
                    board[i][j] = 0;
                }
                if (copy[i][j] == 1 && live > 3) {
                    board[i][j] = 0;
                }
                if (copy[i][j] == 0 && live == 3) {
                    board[i][j] = 1;
                }
            }
        }
    }

    public static int[] count(int[][] board, int i, int j) {
        int[][] arr = { { 1, 1 }, { 0, -1 }, { -1, -1 }, { -1, 0 }, { 1, -1 }, { -1, 1 }, { 0, 1 }, { 1, 0 } };
        int live = 0;
        int dead = 0;
        int n = board.length;
        int m = board[0].length;
        for (int k = 0; k < 8; k++) {
            int row = i + arr[k][0];
            int col = j + arr[k][1];
            if (row >= 0 && row < n && col >= 0 && col < m) {
                if (board[row][col] == 0) {
                    dead++;
                } else {
                    live++;
                }
            }
        }
        int[] ans = new int[2];
        ans[0] = live;
        ans[1] = dead;
        return ans;
    }
}
