class Solution {

    static void gameOfLife(int[][] board) {
        int[] dx = { 1, 1, 0, -1, -1, -1, 0, 1 };
        int[] dy = { 0, 1, 1, 1, 0, -1, -1, -1 };
        for (int row = 0; row < board.length; row++) {
            for (int col = 0; col < board[0].length; col++) {
                int live_neighbours = 0;
                for (int i = 0; i < 8; i++) {
                    int curr_row = row + dx[i];
                    int curr_col = col + dy[i];
                    if (isValidNeighbour(curr_row, curr_col, board) && Math.abs(board[curr_row][curr_col]) == 1) {
                        live_neighbours++;
                    }
                }
                if (board[row][col] == 1 && (live_neighbours < 2 || live_neighbours > 3)) {
                    board[row][col] = -1;
                } else if (board[row][col] == 0 && live_neighbours == 3) {
                    board[row][col] = 2;
                }
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] >= 1) {
                    board[i][j] = 1;
                } else {
                    board[i][j] = 0;
                }
            }
        }
    }

    static boolean isValidNeighbour(int curr_row, int curr_col, int[][] board) {
        return (curr_row >= 0 && curr_row < board.length && curr_col >= 0 && curr_col < board[0].length);
    }
}
