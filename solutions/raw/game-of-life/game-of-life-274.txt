class Solution {

    public void gameOfLife(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] res = new int[m][n];
        if (m == 1 || n == 1) {
            boolean flag = false;
            if (m == 1 && n > 2) {
                res[0][0] = 0;
                res[0][n - 1] = 0;
                for (int i = 1; i < n - 1; i++) {
                    if (board[0][i - 1] + board[0][i + 1] == 2 && board[0][i] == 1) {
                        res[0][i] = 1;
                    } else {
                        res[0][i] = 0;
                    }
                }
            } else if (m > 2 && n == 1) {
                res[0][0] = 0;
                res[n - 1][0] = 0;
                for (int i = 1; i < m - 1; i++) {
                    if (board[i - 1][0] + board[i + 1][0] == 2 && board[i][0] == 1) {
                        res[i][0] = 1;
                    } else {
                        res[i][0] = 0;
                    }
                }
            } else {
                for (int i = 0; i < m; i++) {
                    for (int j = 0; j < n; j++) {
                        board[i][j] = 0;
                        flag = true;
                    }
                }
            }
            if (flag == false) {
                for (int i = 0; i < m; i++) {
                    for (int j = 0; j < n; j++) {
                        board[i][j] = res[i][j];
                    }
                }
            }
            return;
        }
        res[0][0] = board[0][1] + board[1][1] + board[1][0];
        res[0][n - 1] = board[0][n - 2] + board[1][n - 2] + board[1][n - 1];
        res[m - 1][0] = board[m - 2][0] + board[m - 2][1] + board[m - 1][1];
        res[m - 1][n - 1] = board[m - 2][n - 1] + board[m - 2][n - 2] + board[m - 1][n - 2];
        for (int i = 1; i < n - 1; i++) {
            res[0][i] = board[0][i - 1] + board[0][i + 1] + board[1][i - 1] + board[1][i + 1] + board[1][i];
            res[m - 1][i] = board[m - 1][i - 1] + board[m - 1][i + 1] + board[m - 2][i - 1] + board[m - 2][i + 1] + board[m - 2][i];
        }
        for (int i = 1; i < m - 1; i++) {
            res[i][0] = board[i - 1][0] + board[i + 1][0] + board[i - 1][1] + board[i + 1][1] + board[i][1];
            res[i][n - 1] = board[i - 1][n - 1] + board[i + 1][n - 1] + board[i - 1][n - 2] + board[i + 1][n - 2] + board[i][n - 2];
        }
        for (int i = 1; i < m - 1; i++) {
            for (int j = 1; j < n - 1; j++) {
                res[i][j] = board[i - 1][j - 1] + board[i + 1][j + 1] + board[i + 1][j - 1] + board[i - 1][j + 1] + board[i][j - 1] + board[i][j + 1] + board[i - 1][j] + board[i + 1][j];
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 1 && (res[i][j] == 2 || res[i][j] == 3)) {
                    res[i][j] = 1;
                } else if (board[i][j] == 1 && !(res[i][j] == 2 || res[i][j] == 3))
                    res[i][j] = 0;
                else if (board[i][j] == 0 && res[i][j] == 3)
                    res[i][j] = 1;
                else if (board[i][j] == 0 && !(res[i][j] == 3))
                    res[i][j] = 0;
                board[i][j] = res[i][j];
            }
        }
    }
}
