class Solution {

    public void gameOfLife(int[][] board) {
        int n = board.length;
        int m = board[0].length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int prev = board[i][j];
                int out = calculateState(board, n, m, i, j);
                int re = out * 10 + prev;
                board[i][j] = re;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                board[i][j] = board[i][j] / 10;
            }
        }
    }

    private static int calculateState(int[][] board, int n, int m, int i, int j) {
        int live = 0;
        int curr = 0;
        if (board[i][j] % 10 == 1)
            curr = 1;
        if (i > 0 && j > 0)
            if (board[i - 1][j - 1] % 10 == 1)
                live++;
        if (i > 0)
            if (board[i - 1][j] % 10 == 1)
                live++;
        if (i > 0 && j < m - 1)
            if (board[i - 1][j + 1] % 10 == 1)
                live++;
        if (j < m - 1)
            if (board[i][j + 1] % 10 == 1)
                live++;
        if (i < n - 1 && j < m - 1)
            if (board[i + 1][j + 1] % 10 == 1)
                live++;
        if (i < n - 1)
            if (board[i + 1][j] % 10 == 1)
                live++;
        if (i < n - 1 && j > 0)
            if (board[i + 1][j - 1] % 10 == 1)
                live++;
        if (j > 0)
            if (board[i][j - 1] % 10 == 1)
                live++;
        if (curr == 1 && live < 2)
            return 0;
        if (curr == 1 && (live == 2 || live == 3))
            return 1;
        if (curr == 1 && live > 3)
            return 0;
        if (curr == 0 && live == 3)
            return 1;
        return 0;
    }
}
