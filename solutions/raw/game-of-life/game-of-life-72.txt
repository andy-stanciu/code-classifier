class Solution {

    public void gameOfLife(int[][] board) {
        int rows = board.length, cols = board[0].length;
        int[][] res = new int[rows][cols];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                int c = count_neighbours(board, i, j, rows, cols);
                //Check four rules of game of life and store next state in res[] array
                if (board[i][j] == 1) {
                    if (c == 2 || c == 3)
                        res[i][j] = 1;
                    else
                        res[i][j] = 0;
                } else {
                    if (c == 3)
                        res[i][j] = 1;
                    else
                        res[i][j] = 0;
                }
            }
        }
        //Copy res array to board array
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                board[i][j] = res[i][j];
            }
        }
    }

    // Count live neighbours of an element
    static int count_neighbours(int[][] board, int i, int j, int rows, int cols) {
        int live_neighs = 0;
        for (int x = Math.max(0, i - 1); x <= Math.min(rows - 1, i + 1); x++) {
            for (int y = Math.max(0, j - 1); y <= Math.min(cols - 1, j + 1); y++) {
                if (x != i || y != j) {
                    // Skip the cell itself
                    live_neighs += board[x][y];
                }
            }
        }
        return live_neighs;
    }
}
