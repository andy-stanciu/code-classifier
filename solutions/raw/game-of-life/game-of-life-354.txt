class Solution {

    public boolean check(int i, int j, int[][] board) {
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length)
            return false;
        return true;
    }

    public int countOnes(int[][] matrix, int i, int j, int count) {
        if (check(i - 1, j, matrix)) {
            if (matrix[i - 1][j] == 1)
                count++;
        }
        if (check(i + 1, j, matrix)) {
            if (matrix[i + 1][j] == 1)
                count++;
        }
        if (check(i - 1, j - 1, matrix)) {
            if (matrix[i - 1][j - 1] == 1)
                count++;
        }
        if (check(i + 1, j + 1, matrix)) {
            if (matrix[i + 1][j + 1] == 1)
                count++;
        }
        if (check(i - 1, j + 1, matrix)) {
            if (matrix[i - 1][j + 1] == 1)
                count++;
        }
        if (check(i + 1, j - 1, matrix)) {
            if (matrix[i + 1][j - 1] == 1)
                count++;
        }
        if (check(i, j - 1, matrix)) {
            if (matrix[i][j - 1] == 1)
                count++;
        }
        if (check(i, j + 1, matrix)) {
            if (matrix[i][j + 1] == 1)
                count++;
        }
        return count;
    }

    public void gameOfLife(int[][] board) {
        int[][] temp = new int[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int count = 0;
                count = countOnes(board, i, j, count);
                if (board[i][j] == 1) {
                    if (count == 2 || count == 3)
                        temp[i][j] = 1;
                } else {
                    if (count == 3)
                        temp[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) board[i][j] = temp[i][j];
        }
    }
}
