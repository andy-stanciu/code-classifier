class Solution {

    public int Neighbour_ones_count(int[][] board, int i, int j) {
        int n = board.length;
        int m = board[0].length;
        int c = 0;
        // for traversing the neighbour cells
        int[] drow = { -1, 0, +1, 0, 1, -1, 1, -1 };
        int[] dcol = { 0, -1, 0, +1, -1, 1, 1, -1 };
        for (int k = 0; k < 8; k++) {
            int row = i + drow[k];
            int col = j + dcol[k];
            if (row < 0 || col < 0 || row >= n || col >= m)
                continue;
            else if (board[row][col] == 1) {
                c++;
            }
        }
        return c;
    }

    public void gameOfLife(int[][] board) {
        int n = board.length;
        int m = board[0].length;
        int[][] res = new int[n][m];
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                count = Neighbour_ones_count(board, i, j);
                if (board[i][j] == 1) {
                    if (count == 2 || count == 3)
                        res[i][j] = 1;
                } else if (board[i][j] == 0 && count == 3) {
                    res[i][j] = 1;
                } else {
                    res[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                board[i][j] = res[i][j];
            }
        }
    }
}
