class Solution {

    public void gameOfLife(int[][] board) {
        int n = board.length;
        int m = board[0].length;
        int count = 0;
        //-9999-> 0 to 1, -9998 -> 1 to 0
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == 0) {
                    if (i - 1 >= 0 && j - 1 >= 0 && (board[i - 1][j - 1] == 1 || board[i - 1][j - 1] == -9998)) {
                        count++;
                    }
                    if (i >= 0 && j - 1 >= 0 && (board[i][j - 1] == 1 || board[i][j - 1] == -9998)) {
                        count++;
                    }
                    if (i + 1 < n && j - 1 >= 0 && (board[i + 1][j - 1] == 1 || board[i + 1][j - 1] == -9998)) {
                        count++;
                    }
                    if (i - 1 >= 0 && j >= 0 && (board[i - 1][j] == 1 || board[i - 1][j] == -9998)) {
                        count++;
                    }
                    if (i + 1 < n && j >= 0 && (board[i + 1][j] == 1 || board[i + 1][j] == -9998)) {
                        count++;
                    }
                    if (i - 1 >= 0 && j + 1 < m && (board[i - 1][j + 1] == 1 || board[i - 1][j + 1] == -9998)) {
                        count++;
                    }
                    if (i >= 0 && j + 1 < m && (board[i][j + 1] == 1 || board[i][j + 1] == -9998)) {
                        count++;
                    }
                    if (i + 1 < n && j + 1 < m && (board[i + 1][j + 1] == 1 || board[i + 1][j + 1] == -9998)) {
                        count++;
                    }
                    if (count == 3)
                        board[i][j] = -9999;
                } else {
                    if (i - 1 >= 0 && j - 1 >= 0 && (board[i - 1][j - 1] == 1 || board[i - 1][j - 1] == -9998)) {
                        count++;
                    }
                    if (i >= 0 && j - 1 >= 0 && (board[i][j - 1] == 1 || board[i][j - 1] == -9998)) {
                        count++;
                    }
                    if (i + 1 < n && j - 1 >= 0 && (board[i + 1][j - 1] == 1 || board[i + 1][j - 1] == -9998)) {
                        count++;
                    }
                    if (i - 1 >= 0 && j >= 0 && (board[i - 1][j] == 1 || board[i - 1][j] == -9998)) {
                        count++;
                    }
                    if (i + 1 < n && j >= 0 && (board[i + 1][j] == 1 || board[i + 1][j] == -9998)) {
                        count++;
                    }
                    if (i - 1 >= 0 && j + 1 < m && (board[i - 1][j + 1] == 1 || board[i - 1][j + 1] == -9998)) {
                        count++;
                    }
                    if (i >= 0 && j + 1 < m && (board[i][j + 1] == 1 || board[i][j + 1] == -9998)) {
                        count++;
                    }
                    if (i + 1 < n && j + 1 < m && (board[i + 1][j + 1] == 1 || board[i + 1][j + 1] == -9998)) {
                        count++;
                    }
                    if (count < 2) {
                        board[i][j] = -9998;
                    }
                    if (count == 2 || count == 3) {
                        board[i][j] = 1;
                    }
                    if (count > 3) {
                        board[i][j] = -9998;
                    }
                }
                count = 0;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == -9998) {
                    board[i][j] = 0;
                } else if (board[i][j] == -9999) {
                    board[i][j] = 1;
                }
            }
        }
    }
}
