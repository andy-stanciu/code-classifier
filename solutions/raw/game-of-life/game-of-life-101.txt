class Solution {

    private static int n;

    private static int m;

    private static final int[][] deltas = { { 0, -1 }, { 0, 1 }, { 1, 0 }, { -1, 0 }, { -1, -1 }, { 1, 1 }, { -1, 1 }, { 1, -1 } };

    public static void gameOfLife(int[][] board) {
        n = board.length;
        m = board[0].length;
        int[][] nextState = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int liveNeighbours = getLiveNeighbours(board, i, j);
                boolean liveCell = board[i][j] == 1;
                if (liveCell) {
                    if (liveNeighbours == 2 || liveNeighbours == 3) {
                        nextState[i][j] = 1;
                    }
                } else if (liveNeighbours == 3) {
                    nextState[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                board[i][j] = nextState[i][j];
            }
        }
    }

    private static int getLiveNeighbours(int[][] board, int i, int j) {
        int liveNeighbours = 0;
        for (int[] delta : deltas) {
            int curI = i - delta[0];
            int curJ = j - delta[1];
            if (isDefinedAt(curI, curJ) && board[curI][curJ] == 1) {
                liveNeighbours++;
            }
        }
        return liveNeighbours;
    }

    private static boolean isDefinedAt(int i, int j) {
        return i < n && i >= 0 && j < m && j >= 0;
    }
}
