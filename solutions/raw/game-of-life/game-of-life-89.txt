class Solution {

    public void gameOfLife(int[][] board) {
        int[][] result = new int[board.length][board[0].length];
        int rows = board.length;
        int cols = board[0].length;
        for (int top = 0; top < rows; top++) {
            for (int left = 0; left < cols; left++) {
                //Check all 8 neighbors
                int liveNeighbors = neighbors(board, top - 1, left - 1, rows, cols) + neighbors(board, top - 1, left, rows, cols) + neighbors(board, top - 1, left + 1, rows, cols) + neighbors(board, top + 1, left - 1, rows, cols) + neighbors(board, top + 1, left, rows, cols) + neighbors(board, top + 1, left + 1, rows, cols) + neighbors(board, top, left - 1, rows, cols) + neighbors(board, top, left + 1, rows, cols);
                //Applying Game of life rules
                if (board[top][left] == 1) {
                    if (liveNeighbors < 2 || liveNeighbors > 3) {
                        result[top][left] = 0;
                    }
                    if (liveNeighbors == 2 || liveNeighbors == 3) {
                        result[top][left] = 1;
                    }
                } else if (board[top][left] == 0) {
                    if (liveNeighbors == 3) {
                        result[top][left] = 1;
                    }
                }
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                board[i][j] = result[i][j];
            }
        }
    }

    //Function to check live neighbors
    int neighbors(int[][] board, int top, int left, int rows, int cols) {
        int count = 0;
        if (top >= 0 && top < rows && left >= 0 && left < cols && board[top][left] == 1) {
            count++;
        }
        return count;
    }
}
