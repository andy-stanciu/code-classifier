class Solution {

    public void gameOfLife(int[][] board) {
        int n = board.length;
        int m = board[0].length;
        boolean[][] life = new boolean[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                check(i, j, board, n, m, life);
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (life[i][j])
                    board[i][j] = 1;
                else
                    board[i][j] = 0;
            }
        }
    }

    public void check(int i, int j, int[][] board, int n, int m, boolean[][] life) {
        int[] ar = new int[8];
        Arrays.fill(ar, -1);
        // top
        if ((i - 1) >= 0)
            ar[0] = board[i - 1][j];
        // left
        if ((j - 1) >= 0)
            ar[1] = board[i][j - 1];
        //left dig
        if ((i - 1) >= 0 && (j - 1) >= 0)
            ar[2] = board[i - 1][j - 1];
        //bottom
        if ((i + 1) <= n - 1)
            ar[3] = board[i + 1][j];
        //right
        if ((j + 1) <= m - 1)
            ar[4] = board[i][j + 1];
        //bot dig
        if ((i + 1) <= n - 1 && (j + 1) <= m - 1)
            ar[5] = board[i + 1][j + 1];
        //right dig
        if ((i - 1) >= 0 && (j + 1) <= m - 1)
            ar[6] = board[i - 1][j + 1];
        //left dig
        if ((i + 1) <= n - 1 && j - 1 >= 0)
            ar[7] = board[i + 1][j - 1];
        int one = 0;
        int zero = 0;
        for (int k : ar) {
            if (k == 1)
                one++;
            if (k == 0)
                zero++;
        }
        if ((one + zero) < 2 && board[i][j] == 1) {
            life[i][j] = false;
            return;
        }
        if ((one == 2 || one == 3) && board[i][j] == 1) {
            life[i][j] = true;
            return;
        }
        if (one > 3 && board[i][j] == 1) {
            life[i][j] = false;
            return;
        }
        if (board[i][j] == 0 && one == 3) {
            life[i][j] = true;
        }
    }
}
