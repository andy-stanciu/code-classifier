class Solution {

    public void gameOfLife(int[][] board) {
        int n = board.length;
        int m = board[0].length;
        int[][] state = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                state[i][j] = board[i][j];
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int count = checkNeighbor(state, i, j, n, m);
                if (count < 2 || count > 3) {
                    board[i][j] = 0;
                } else if (count == 3 && board[i][j] == 0) {
                    board[i][j] = 1;
                }
            }
        }
    }

    public int checkNeighbor(int[][] state, int i, int j, int n, int m) {
        int count = 0;
        if (i - 1 >= 0 && j - 1 >= 0) {
            count += state[i - 1][j - 1];
        }
        if (i - 1 >= 0) {
            count += state[i - 1][j];
        }
        if (i - 1 >= 0 && j + 1 < m) {
            count += state[i - 1][j + 1];
        }
        if (j - 1 >= 0) {
            count += state[i][j - 1];
        }
        if (j + 1 < m) {
            count += state[i][j + 1];
        }
        if (i + 1 < n && j - 1 >= 0) {
            count += state[i + 1][j - 1];
        }
        if (i + 1 < n) {
            count += state[i + 1][j];
        }
        if (i + 1 < n && j + 1 < m) {
            count += state[i + 1][j + 1];
        }
        return count;
    }
}
