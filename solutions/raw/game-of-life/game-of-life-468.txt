class Solution {

    public void gameOfLife(int[][] board) {
        int[][] nextState = new int[board.length][board[0].length];
        for (int i = 0; i < board.length; ++i) {
            for (int j = 0; j < board[i].length; ++j) {
                // getting state of the current cell based on four cases and updating it in the next state grid
                nextState[i][j] = getCellState(i, j, board);
            }
        }
        // Once the result is calculated, we update the cells of the grid with our resultant grid cells
        for (int i = 0; i < board.length; ++i) {
            for (int j = 0; j < board[i].length; ++j) {
                board[i][j] = nextState[i][j];
            }
        }
    }

    public int getCellState(int row, int col, int[][] board) {
        // checking for neighbours in all the 8 directions of the grid
        int neighbourCount = 0;
        int rowLength = board.length - 1;
        int colLength = board[0].length - 1;
        if (row > 0 && col > 0)
            neighbourCount += board[row - 1][col - 1];
        if (row > 0) {
            neighbourCount += board[row - 1][col];
            if (col < colLength) {
                neighbourCount += board[row - 1][col + 1];
            }
        }
        if (col < colLength) {
            neighbourCount += board[row][col + 1];
        }
        if (col > 0) {
            neighbourCount += board[row][col - 1];
            if (row < rowLength) {
                neighbourCount += board[row + 1][col - 1];
            }
        }
        if (row < rowLength) {
            neighbourCount += board[row + 1][col];
        }
        if (row < rowLength && col < colLength)
            neighbourCount += board[row + 1][col + 1];
        // Case 4 : Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
        // So we return 1
        if (board[row][col] == 0 && neighbourCount == 3)
            return 1;
        else // Case 2 : Any live cell with two or three live neighbors lives on to the next generation.
        // So we return 1
        if (board[row][col] == 1 && (neighbourCount == 2 || neighbourCount == 3))
            return 1;
        else
            // For Case 1 and Case 3
            return 0;
    }
}
