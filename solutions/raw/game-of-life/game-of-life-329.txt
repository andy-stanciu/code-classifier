class Solution {

    public void gameOfLife(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] newb = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int count = liveNeighborsCount(board, i, j);
                if (count == 3)
                    newb[i][j] = 1;
                if (count == 2)
                    newb[i][j] = board[i][j];
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = newb[i][j];
            }
        }
        //    print(newb);
    }

    private int liveNeighborsCount(int[][] board, int i, int j) {
        int m = board.length;
        int n = board[0].length;
        int count = 0;
        if (isValid(i - 1, j - 1, m, n))
            count += board[i - 1][j - 1];
        if (isValid(i - 1, j, m, n))
            count += board[i - 1][j];
        if (isValid(i - 1, j + 1, m, n))
            count += board[i - 1][j + 1];
        if (isValid(i, j - 1, m, n))
            count += board[i][j - 1];
        if (isValid(i, j + 1, m, n))
            count += board[i][j + 1];
        if (isValid(i + 1, j - 1, m, n))
            count += board[i + 1][j - 1];
        if (isValid(i + 1, j, m, n))
            count += board[i + 1][j];
        if (isValid(i + 1, j + 1, m, n))
            count += board[i + 1][j + 1];
        return count;
    }

    private boolean isValid(int i, int j, int m, int n) {
        return i >= 0 && i < m && j >= 0 && j < n;
    }

    private void print(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }
}
