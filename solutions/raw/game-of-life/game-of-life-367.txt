class Solution {

    public void gameOfLife(int[][] board) {
        HashMap<Point, Integer> map = new HashMap<Point, Integer>();
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int nextState = 0;
                if (board[i][j] == 0) {
                    // if it\'s a dead cell
                    nextState = nextStateForCell(i, j, 0, board);
                } else {
                    // if it\'s a live cell
                    nextState = nextStateForCell(i, j, 1, board);
                }
                if (board[i][j] != nextState) {
                    // only add changing values to the mapping
                    map.put(new Point(i, j), nextState);
                }
            }
        }
        // loop over all changing values in the mapping
        for (Map.Entry<Point, Integer> entry : map.entrySet()) {
            // System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
            Point n = entry.getKey();
            int[] cords = n.getIdx();
            int x = cords[0];
            int y = cords[1];
            int nextState = entry.getValue();
            board[x][y] = nextState;
        }
    }

    public int nextStateForCell(int r, int c, int state, int[][] board) {
        int numOfLiveNeighbors = 0;
        int numOfDeadNeighbors = 0;
        int m = board.length;
        int n = board[0].length;
        if (r - 1 >= 0 && c >= 0 && r - 1 < m && c < n) {
            if (board[r - 1][c] == 1) {
                numOfLiveNeighbors += 1;
            }
            // else{
            //     numOfDeadNeighbors += 1;
            // }
        }
        if (r + 1 >= 0 && c >= 0 && r + 1 < m && c < n) {
            if (board[r + 1][c] == 1) {
                numOfLiveNeighbors += 1;
            }
            // else{
            //     numOfDeadNeighbors += 1;
            // }
        }
        if (r >= 0 && c + 1 >= 0 && r < m && c + 1 < n) {
            if (board[r][c + 1] == 1) {
                numOfLiveNeighbors += 1;
            }
            // else{
            //     numOfDeadNeighbors += 1;
            // }
        }
        if (r >= 0 && c - 1 >= 0 && r < m && c - 1 < n) {
            if (board[r][c - 1] == 1) {
                numOfLiveNeighbors += 1;
            }
            // else{
            //     numOfDeadNeighbors += 1;
            // }
        }
        if (r - 1 >= 0 && c + 1 >= 0 && r - 1 < m && c + 1 < n) {
            if (board[r - 1][c + 1] == 1) {
                numOfLiveNeighbors += 1;
            }
            // else{
            //     numOfDeadNeighbors += 1;
            // }
        }
        if (r - 1 >= 0 && c - 1 >= 0 && r - 1 < m && c - 1 < n) {
            if (board[r - 1][c - 1] == 1) {
                numOfLiveNeighbors += 1;
            }
            // else{
            //     numOfDeadNeighbors += 1;
            // }
        }
        if (r + 1 >= 0 && c + 1 >= 0 && r + 1 < m && c + 1 < n) {
            if (board[r + 1][c + 1] == 1) {
                numOfLiveNeighbors += 1;
            }
            // else{
            //     numOfDeadNeighbors += 1;
            // }
        }
        if (r + 1 >= 0 && c - 1 >= 0 && r + 1 < m && c - 1 < n) {
            if (board[r + 1][c - 1] == 1) {
                numOfLiveNeighbors += 1;
            }
            // else{
            //     numOfDeadNeighbors += 1;
            // }
        }
        if (state == 1) {
            if (numOfLiveNeighbors < 2) {
                return 0;
            }
            if (numOfLiveNeighbors > 3) {
                return 0;
            }
            return 1;
        } else {
            if (numOfLiveNeighbors == 3) {
                return 1;
            } else {
                return 0;
            }
        }
    }
}

class Point {

    int row;

    int col;

    Point(int r, int c) {
        row = r;
        col = c;
    }

    public int[] getIdx() {
        return new int[] { row, col };
    }
}
