class // dead: 0; alive: 1;dead->live: 2;live->dead: 3;
Solution {

    public void gameOfLife(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int neighbors = getNeighbors(i, j, board);
                if (//points 1 and 3 in question
                board[i][j] == 1 && (neighbors < 2 || neighbors > 3))
                    //here not updating to 0 because can be revisited so update it after
                    board[i][j] = 3;
                if (//point 4 in question
                board[i][j] == 0 && neighbors == 3)
                    //did not updated to 1 as can be revisited for 1 so updating later below
                    board[i][j] = 2;
            }
            //point 2 will be automatically covered
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (//updating alive and dead cells heare instead of above for loops as
                board[i][j] == 2)
                    //they could be revisited and recalculated so to avoid that we changed
                    board[i][j] = 1;
                else if (//them to 2 and 3 instead of 1 and 0
                board[i][j] == 3)
                    board[i][j] = 0;
            }
        }
        //check in all directions for(alive) 1 and 3 as 1 is for alive and 3 is converted from live to dead
    }

    //initially 3 is 1 as per the conditions from that point of initial matrix if we consider it will be
    private int getNeighbors(int i, int j, int[][] board) {
        //alive
        //
        int count = 0;
        if (i > 0 && (board[i - 1][j] == 1 || board[i - 1][j] == 3))
            count++;
        if (i < board.length - 1 && (board[i + 1][j] == 1 || board[i + 1][j] == 3))
            count++;
        if (j > 0 && (board[i][j - 1] == 1 || board[i][j - 1] == 3))
            count++;
        if (j < board[0].length - 1 && (board[i][j + 1] == 1 || board[i][j + 1] == 3))
            count++;
        //diagonal
        if (i > 0 && j > 0 && (board[i - 1][j - 1] == 1 || board[i - 1][j - 1] == 3))
            count++;
        if (i < board.length - 1 && j < board[0].length - 1 && (board[i + 1][j + 1] == 1 || board[i + 1][j + 1] == 3))
            count++;
        if (i > 0 && j < board[0].length - 1 && (board[i - 1][j + 1] == 1 || board[i - 1][j + 1] == 3))
            count++;
        if (i < board.length - 1 && j > 0 && (board[i + 1][j - 1] == 1 || board[i + 1][j - 1] == 3))
            count++;
        return count;
    }
}
