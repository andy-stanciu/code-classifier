class Solution {

    int[][] dirs = { { 0, 1 }, { 1, 0 }, { -1, 0 }, { 0, -1 }, { 1, 1 }, { 1, -1 }, { -1, 1 }, { -1, -1 } };

    int m, n;

    public void gameOfLife(int[][] board) {
        m = board.length;
        n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int liveNeighborsCount = liveNeighbors(board, i, j);
                if (board[i][j] == 0) {
                    //dead cell
                    if (liveNeighborsCount == 3)
                        board[i][j] = 2;
                } else {
                    //live cell
                    if (liveNeighborsCount < 2 || liveNeighborsCount > 3)
                        board[i][j] = -1;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] >= 1)
                    board[i][j] = 1;
                else if (board[i][j] <= 0)
                    board[i][j] = 0;
            }
        }
    }

    private int liveNeighbors(int[][] board, int i, int j) {
        int liveNeighborsCount = 0;
        for (int[] dir : dirs) {
            int r = i + dir[0];
            int c = j + dir[1];
            if (r >= 0 && r < m && c >= 0 && c < n && (board[r][c] == 1 || board[r][c] == -1))
                liveNeighborsCount++;
        }
        return liveNeighborsCount;
    }
}
