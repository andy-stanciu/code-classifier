class Solution {

    public void gameOfLife(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int val = board[i][j];
                int alive_neighbours = 0;
                for (int x = -1; x <= 1; x++) {
                    for (int y = -1; y <= 1; y++) {
                        if (x == 0 && y == 0) {
                            //current
                            continue;
                        }
                        int new_x = i + x;
                        int new_y = j + y;
                        if (new_x >= 0 && new_x < m && new_y >= 0 && new_y < n) {
                            // & of 1 will only add alive neighbours
                            alive_neighbours += board[new_x][new_y] & 1;
                        }
                    }
                }
                if (val == 0 && alive_neighbours == 3) {
                    // reporduction
                    //2 in binary is 10, previous state was 0, current state is 1
                    board[i][j] = 2;
                } else if (val == 1 && alive_neighbours < 2) {
                    // underpopulation
                    //1 in binary is 01, previous state was 1, current state is 0
                    board[i][j] = 1;
                } else if (val == 1 && alive_neighbours > 3) {
                    //overpupulation
                    //previous state was 1, current state is 0
                    board[i][j] = 1;
                } else if (val == 1) {
                    //alive neighbours == 2 or 3, next-generation
                    //previous state is 1, current state is 1
                    board[i][j] = 3;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] >>= 1;
            }
        }
    }
}
