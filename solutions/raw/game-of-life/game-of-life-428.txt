class Solution {

    // 1 and becomes dead. I make it 3.
    // 1 and stays alive. stay 1.
    // 0 and becomes alive. I make it 2.
    // 0 and stays dead. stay 0.
    public int neighborsCount(int[][] board, int i, int j) {
        int count = 0;
        for (int x = i - 1; x <= i + 1; x++) {
            if (x < 0 || x > board.length - 1)
                continue;
            for (int y = j - 1; y <= j + 1; y++) {
                if (y < 0 || y > board[0].length - 1)
                    continue;
                if (x == i && y == j)
                    continue;
                count += board[x][y] % 2;
            }
        }
        return count;
    }

    public void gameOfLife(int[][] board) {
        int n = board.length;
        int m = board[0].length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int count = neighborsCount(board, i, j);
                if (board[i][j] == 1) {
                    if (count < 2 || count > 3)
                        board[i][j] = 3;
                } else {
                    if (count == 3)
                        board[i][j] = 2;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == 2)
                    board[i][j] = 1;
                if (board[i][j] == 3)
                    board[i][j] = 0;
            }
        }
    }
}
