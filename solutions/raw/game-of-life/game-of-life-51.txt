class Solution {

    // with extra memory
    public void gameOfLife(int[][] board) {
        int m = board.length;
        if (m == 0)
            return;
        int n = board[0].length;
        int[][] result = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int count = countOfNeighbors(i, j, board, m, n);
                if (board[i][j] == 0) {
                    if (count == 3) {
                        // dead cell with exact 3 live neighbors
                        result[i][j] = 1;
                    }
                } else {
                    if (count < 2 || count > 3) {
                        // not required as it is 0 anyways, just for readability
                        result[i][j] = 0;
                    } else {
                        result[i][j] = 1;
                    }
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = result[i][j];
            }
        }
    }

    private int countOfNeighbors(int i, int j, int[][] board, int m, int n) {
        int sum = 0;
        if (i - 1 >= 0) {
            sum += board[i - 1][j];
            if (j - 1 >= 0) {
                sum += board[i - 1][j - 1];
            }
            if (j + 1 < n) {
                sum += board[i - 1][j + 1];
            }
        }
        if (j - 1 >= 0) {
            sum += board[i][j - 1];
        }
        if (j + 1 < n) {
            sum += board[i][j + 1];
        }
        if (i + 1 < m) {
            sum += board[i + 1][j];
            if (j - 1 >= 0) {
                sum += board[i + 1][j - 1];
            }
            if (j + 1 < n) {
                sum += board[i + 1][j + 1];
            }
        }
        return sum;
    }
}
