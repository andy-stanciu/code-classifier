class Solution {

    public int neighbourCount(int[][] board, int x, int y) {
        int count = 0;
        if ((x - 1 >= 0) && (board[x - 1][y] == 1)) {
            count++;
        }
        if ((x + 1 < board.length) && (board[x + 1][y] == 1)) {
            count++;
        }
        if ((y - 1 >= 0) && (board[x][y - 1] == 1)) {
            count++;
        }
        if ((y + 1 < board[0].length) && (board[x][y + 1] == 1)) {
            count++;
        }
        if ((x - 1 >= 0) && (y - 1 >= 0) && (board[x - 1][y - 1] == 1)) {
            count++;
        }
        if ((x - 1 >= 0) && (y + 1 < board[0].length) && (board[x - 1][y + 1] == 1)) {
            count++;
        }
        if ((x + 1 < board.length) && (y - 1 >= 0) && (board[x + 1][y - 1] == 1)) {
            count++;
        }
        if ((x + 1 < board.length) && (y + 1 < board[0].length) && (board[x + 1][y + 1] == 1)) {
            count++;
        }
        return count;
    }

    public void gameOfLife(int[][] board) {
        int[][] b = new int[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int count = neighbourCount(board, i, j);
                if ((board[i][j] == 1) && (count < 2)) {
                    b[i][j] = 0;
                } else if ((board[i][j] == 1) && (count == 2 || count == 3)) {
                    b[i][j] = 1;
                } else if ((board[i][j] == 1) && (count > 3)) {
                    b[i][j] = 0;
                } else if ((board[i][j] == 0) && (count == 3)) {
                    b[i][j] = 1;
                }
            }
        }
        //copy the elements from b array to board array.
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                board[i][j] = b[i][j];
            }
        }
    }
}
