class Solution {

    private Pair<Integer, Integer> fn(int val) {
        int count0 = 0;
        int count1 = 0;
        if (val == 0) {
            count0++;
        }
        if (val == 1) {
            count1++;
        }
        if (val == 11) {
            count1++;
        }
        if (val == 10) {
            count0++;
        }
        return new Pair<Integer, Integer>(count0, count1);
    }

    public void gameOfLife(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int count0 = 0;
                int count1 = 0;
                if (i - 1 >= 0) {
                    int val = board[i - 1][j];
                    count0 += fn(val).getKey();
                    count1 += fn(val).getValue();
                }
                if (i + 1 < m) {
                    int val = board[i + 1][j];
                    count0 += fn(val).getKey();
                    count1 += fn(val).getValue();
                }
                if (j - 1 >= 0) {
                    int val = board[i][j - 1];
                    count0 += fn(val).getKey();
                    count1 += fn(val).getValue();
                }
                if (j + 1 < n) {
                    int val = board[i][j + 1];
                    count0 += fn(val).getKey();
                    count1 += fn(val).getValue();
                }
                if (i - 1 >= 0 && j - 1 >= 0) {
                    int val = board[i - 1][j - 1];
                    count0 += fn(val).getKey();
                    count1 += fn(val).getValue();
                }
                if (i + 1 < m && j + 1 < n) {
                    int val = board[i + 1][j + 1];
                    count0 += fn(val).getKey();
                    count1 += fn(val).getValue();
                }
                if (i - 1 >= 0 && j + 1 < n) {
                    int val = board[i - 1][j + 1];
                    count0 += fn(val).getKey();
                    count1 += fn(val).getValue();
                }
                if (i + 1 < m && j - 1 >= 0) {
                    int val = board[i + 1][j - 1];
                    count0 += fn(val).getKey();
                    count1 += fn(val).getValue();
                }
                int act = board[i][j];
                if (act == 1 && count1 < 2) {
                    board[i][j] += 10;
                } else if (act == 1 && count1 > 3) {
                    board[i][j] += 10;
                } else if (act == 0 && count1 == 3) {
                    board[i][j] += 10;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 10) {
                    board[i][j] = 1;
                }
                if (board[i][j] == 11) {
                    board[i][j] = 0;
                }
            }
        }
    }
}
