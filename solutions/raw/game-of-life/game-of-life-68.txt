class Solution {

    public void gameOfLife(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] ans = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 1) {
                    int count = countLive(board, i, j);
                    if (count < 2) {
                        ans[i][j] = 0;
                    } else if (count <= 3) {
                        ans[i][j] = 1;
                    } else {
                        ans[i][j] = 0;
                    }
                } else {
                    if (countLive(board, i, j) == 3) {
                        ans[i][j] = 1;
                    }
                }
            }
        }
        for (int i = 0; i < ans.length; i++) {
            for (int j = 0; j < ans[0].length; j++) {
                board[i][j] = ans[i][j];
            }
        }
    }

    public int countLive(int[][] board, int i, int j) {
        int count = 0;
        if (i - 1 >= 0 && board[i - 1][j] == 1) {
            count++;
        }
        if (j - 1 >= 0 && board[i][j - 1] == 1) {
            count++;
        }
        if (i + 1 < board.length && board[i + 1][j] == 1) {
            count++;
        }
        if (j + 1 < board[0].length && board[i][j + 1] == 1) {
            count++;
        }
        if (i - 1 >= 0 && j - 1 >= 0 && board[i - 1][j - 1] == 1) {
            count++;
        }
        if (i - 1 >= 0 && j + 1 < board[0].length && board[i - 1][j + 1] == 1) {
            count++;
        }
        if (i + 1 < board.length && j - 1 >= 0 && board[i + 1][j - 1] == 1) {
            count++;
        }
        if (i + 1 < board.length && j + 1 < board[0].length && board[i + 1][j + 1] == 1) {
            count++;
        }
        return count;
    }
}
