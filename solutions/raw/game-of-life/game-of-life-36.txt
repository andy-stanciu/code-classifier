class Solution {

    int[] x = { 1, 1, 1, 0, 0, -1, -1, -1 };

    int[] y = { -1, 0, 1, -1, 1, -1, 0, 1 };

    public void gameOfLife(int[][] board) {
        int[][] gen2 = new int[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                gen2[i][j] = whatWillHappen(i, j, board);
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                board[i][j] = gen2[i][j];
            }
        }
    }

    public int whatWillHappen(int x, int y, int[][] board) {
        int c = getBoundryCount(x, y, board);
        if (board[x][y] == 0) {
            return deadCellFuture(c, x, y, board);
        }
        return liveCellFuture(c, x, y, board);
    }

    public int deadCellFuture(int c, int x, int y, int[][] board) {
        if (c == 3)
            return 1;
        return 0;
    }

    public int liveCellFuture(int c, int x, int y, int[][] board) {
        if (c < 2)
            return 0;
        if (c == 2 || c == 3)
            return 1;
        if (c > 3)
            return 0;
        return 0;
    }

    int getBoundryCount(int i, int j, int[][] board) {
        int count = 0;
        for (int c = 0; c < 8; c++) {
            int p = i + x[c];
            int q = j + y[c];
            if (isSafe(p, q, board)) {
                count += board[p][q];
            }
        }
        return count;
    }

    boolean isSafe(int x, int y, int[][] board) {
        int r = board.length;
        int c = board[0].length;
        if (x < 0 || x >= r || y < 0 || y >= c)
            return false;
        return true;
    }
}
