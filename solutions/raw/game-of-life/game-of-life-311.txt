class Solution {

    public int countNei(int[][] board, int r, int c, int n, int m) {
        int count = 0;
        int[] dx = { -1, 0, 1, -1, 1, -1, 0, 1 };
        int[] dy = { -1, -1, -1, 0, 0, 1, 1, 1 };
        for (int i = 0; i < 8; i++) {
            int nx = r + dx[i];
            int ny = c + dy[i];
            if (nx >= 0 && ny >= 0 && nx < n && ny < m && (board[nx][ny] == 1 || board[nx][ny] == 3))
                count++;
        }
        return count;
    }

    public void gameOfLife(int[][] board) {
        int n = board.length, m = board[0].length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int nei = countNei(board, i, j, n, m);
                if (board[i][j] == 0 && nei == 3)
                    // dead will become live
                    board[i][j] = 2;
                else if (board[i][j] == 1 && (nei == 2 || nei == 3))
                    // live cell will remain live if its live neighbors are 2 or 3
                    board[i][j] = 3;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == 2 || board[i][j] == 3)
                    board[i][j] = 1;
                else
                    board[i][j] = 0;
            }
        }
    }
}
