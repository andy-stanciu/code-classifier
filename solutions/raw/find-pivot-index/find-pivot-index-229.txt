class Solution {

    public int pivotIndex(int[] nums) {
        // with less space complexity
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        int left = 0;
        int index = -1;
        for (int i = nums.length - 1; i >= 0; i--) {
            sum -= nums[i];
            if (sum == left) {
                index = i;
            }
            left += nums[i];
        }
        return index;
        // with more space complexity
        // int leftSum[] = new int[nums.length];
        // int rightSum[] = new int[nums.length];
        // int sum = 0;
        // int index = -1;
        // for(int i = 0 ; i < nums.length; i++) {
        //     if(i == 0) leftSum[i] = 0;
        //     else{
        //         sum += nums[i - 1];
        //         leftSum[i] = sum;
        //     }
        // }
        // sum = 0;
        // for(int i = nums.length - 1; i >= 0; i--) {
        //     if(i == nums.length - 1) rightSum[i] = 0;
        //     else {
        //         sum += nums[i + 1];
        //         rightSum[i] = sum;
        //     }
        // }
        // for(int i = nums.length - 1; i >= 0; i--) {
        //     if(leftSum[i] == rightSum[i]) {
        //         index = i;
        //     }
        // }
        // return index;
    }
}
