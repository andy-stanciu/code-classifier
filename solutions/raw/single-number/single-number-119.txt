class Solution {

    public int singleNumber(int[] nums) {
        //         Optimized using HashMap with O(n) time complexity.
        //         Although space complexity isn\'t constant
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            //             At the beginning, the HashMap is empty.
            //             If the HashMap doesn\'t contain a key
            //             of the current element, add the current element
            //             to the HashMap with the element as the key, and it\'s
            //             index as the value.
            if (!map.containsKey(nums[i]))
                map.put(nums[i], i);
            else
                //            Else, the HashMap already contains the current element
                //            as a key and this means that the current element is a
                //            duplicate. Hence, remove it from the HashMap.
                map.remove(nums[i]);
        }
        //        In the end, only one key-value pair will remain in the HashMap
        //        and this is the single element since all duplicates has been
        //        gotten rid of with the loop above. Hence, returning the only
        //        element left in the HashMap.
        for (int j = 0; j < nums.length; j++) {
            if (map.containsKey(nums[j]))
                return nums[j];
        }
        //         Something has to be returned in the end. But it is guaranteed that
        //         this piece of code will not run since nums has exactly one single number.
        return 0;
    }
}
