class Solution {

    public int singleNumber(int[] nums) {
        // This will hold the XOR result of all elements
        int res = 0;
        for (int num : nums) {
            // Apply XOR between the current result and the current number
            // Due to XOR properties:
            // 1. A ^ A = 0 (any number XORed with itself cancels out)
            // 2. A ^ 0 = A (any number XORed with 0 remains the same)
            // So, all numbers appearing twice will cancel out to 0, leaving only the unique number
            res = res ^ num;
        }
        // Return the result which will be the single number (the one that appears only once)
        return res;
    }
}
/*  A ^ A == 0
    A ^ 0 == 0 ^ A == A
    A ^ 1 == 1 ^ A | toggles the least significant bit of A
    A ^ B == result in a number where the bits are 1 where the corresponding bits differ  */
// XOR Operation for swapping
/*  a = a ^ b;  // a becomes a ^ b
    b = a ^ b;  // b becomes (a ^ b) ^ b = a
    a = a ^ b;  // a becomes (a ^ b) ^ a = b  */
