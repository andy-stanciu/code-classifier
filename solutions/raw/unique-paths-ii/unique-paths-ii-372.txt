class Solution {

    int solve(int m, int n, int[][] dp, int[][] ob) {
        //1. base case
        if (m < 0 || n < 0)
            return 0;
        if (ob[m][n] == 1)
            return 0;
        if (m == 0 && n == 0)
            return 1;
        //2. cheak if already calculated
        if (dp[m][n] != -1)
            return dp[m][n];
        //3. sum up the stuff
        int up = solve(m - 1, n, dp, ob);
        int left = solve(m, n - 1, dp, ob);
        //4. store in dp
        return dp[m][n] = up + left;
    }

    public int uniquePathsWithObstacles(int[][] ob) {
        int m = ob.length;
        int n = ob[0].length;
        int[][] dp = new int[m][n];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return solve(m - 1, n - 1, dp, ob);
    }
}
