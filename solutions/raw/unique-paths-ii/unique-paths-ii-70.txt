class Solution {

    public int helper(int[][] arr, int sr, int sc, int er, int ec, int[][] dp) {
        if (sr == er && sc == ec)
            return 1;
        if (sr > er || sc > ec)
            return 0;
        if (arr[sr][sc] == 1)
            return 0;
        if (dp[sr][sc] != -1)
            return dp[sr][sc];
        return dp[sr][sc] = helper(arr, sr + 1, sc, er, ec, dp) + helper(arr, sr, sc + 1, er, ec, dp);
    }

    public int uniquePathsWithObstacles(int[][] arr) {
        int m = arr.length - 1;
        int n = arr[0].length - 1;
        if (arr[m][n] == 1)
            return 0;
        int[][] dp = new int[m + 1][n + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return helper(arr, 0, 0, m, n, dp);
    }
}
