class Solution {

    public int uniquePathsWithObstaclesUtil(int i, int j, int[][] dp, int[][] obstacleGrid) {
        if (i >= 0 && j >= 0 && obstacleGrid[i][j] == 1)
            return 0;
        if (i == 0 && j == 0)
            return 1;
        if (i < 0 || j < 0)
            return 0;
        if (dp[i][j] != -1)
            return dp[i][j];
        int up = uniquePathsWithObstaclesUtil(i - 1, j, dp, obstacleGrid);
        int left = uniquePathsWithObstaclesUtil(i, j - 1, dp, obstacleGrid);
        return dp[i][j] = up + left;
    }

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int row = obstacleGrid.length;
        int col = obstacleGrid[0].length;
        int[][] dp = new int[row][col];
        for (int[] i : dp) Arrays.fill(i, -1);
        return uniquePathsWithObstaclesUtil(row - 1, col - 1, dp, obstacleGrid);
    }
}
