class Solution {

    public int uniquePathsWithObstacles(int[][] grid) {
        int n = grid.length, m = grid[0].length;
        if (grid[n - 1][m - 1] == 1) {
            //base case-> Obstacle = destination or target
            return 0;
        }
        int[][] dp = new int[n + 1][m + 1];
        for (int i = n - 1; i >= 0; --i) {
            for (int j = m - 1; j >= 0; --j) {
                if (i == n - 1 && j == m - 1) {
                    //1 way to reach target from target
                    // target -> target = 1 way
                    // 1 way = don\'t move stay on target only
                    dp[i][j] = 1;
                    continue;
                }
                //cell(i,j) = 0 -> no obstacle
                if (grid[i][j] == 0) {
                    //if no obstacle at cell(i, j) then
                    //total way = down ways + right ways
                    dp[i][j] = dp[i][j + 1] + dp[i + 1][j];
                }
                //cell(i,j) = 1 -> obstacle
                //else - 0 ways for the cell(i, j) which as obstacle
            }
        }
        return dp[0][0];
    }
}
