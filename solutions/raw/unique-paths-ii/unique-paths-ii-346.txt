class Solution {

    int m, n;

    int solve(int i, int j, int[][] Grid, int[][] dp) {
        if (i >= m || j >= n)
            return 0;
        if (Grid[i][j] == 1)
            return 0;
        if (dp[i][j] != 0)
            return dp[i][j];
        if (i == m - 1 && j == n - 1)
            return 1;
        else
            return dp[i][j] = solve(i + 1, j, Grid, dp) + solve(i, j + 1, Grid, dp);
    }

    public int uniquePathsWithObstacles(int[][] Grid) {
        m = Grid.length;
        n = Grid[0].length;
        int[][] dp = new int[m][n];
        return solve(0, 0, Grid, dp);
    }
}
