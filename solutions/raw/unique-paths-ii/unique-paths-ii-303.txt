class Solution {

    int func(int row, int col, int[][] grid, int[][] dp) {
        if (row < 0 || col < 0 || grid[row][col] == 1)
            return 0;
        if (row == 0) {
            for (int i = col; i >= 0; i--) if (grid[row][i] == 1)
                return 0;
            return 1;
        }
        if (col == 0) {
            for (int i = row; i >= 0; i--) if (grid[i][col] == 1)
                return 0;
            return 1;
        }
        if (dp[row][col] != -1)
            return dp[row][col];
        int left = func(row, col - 1, grid, dp);
        int up = func(row - 1, col, grid, dp);
        return dp[row][col] = up + left;
    }

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        int[][] dp = new int[n][m];
        for (int[] i : dp) Arrays.fill(i, -1);
        return func(n - 1, m - 1, obstacleGrid, dp);
    }
}
