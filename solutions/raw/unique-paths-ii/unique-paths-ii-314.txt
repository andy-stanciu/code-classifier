class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        return dpSolution(obstacleGrid.length, obstacleGrid[0].length, obstacleGrid);
    }

    private int dpSolution(int m, int n, int[][] obstacleGrid) {
        //O(n*m)- Time complexity and O(1)- Space complexity
        if (obstacleGrid[0][0] == 1) {
            return 0;
        }
        obstacleGrid[0][0] = 1;
        //Fill up the row
        for (int i = 1; i < m; i++) {
            obstacleGrid[i][0] = (obstacleGrid[i][0] == 0 && obstacleGrid[i - 1][0] == 1) ? 1 : 0;
        }
        //Fill up the col
        for (int i = 1; i < n; i++) {
            obstacleGrid[0][i] = (obstacleGrid[0][i] == 0 && obstacleGrid[0][i - 1] == 1) ? 1 : 0;
        }
        //Start with (1,1) and move forward
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (obstacleGrid[i][j] == 0)
                    obstacleGrid[i][j] = obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1];
                else
                    obstacleGrid[i][j] = 0;
            }
        }
        return obstacleGrid[m - 1][n - 1];
    }
}
