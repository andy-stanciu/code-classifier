class Solution {

    public int uniquePathsWithObstacles(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[][] dp = new int[m][n];
        // dp[i][j] = number of ways to reach dp[m-1][n-1] from dp[i][j]
        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                // if the current index has obstacle
                if (grid[i][j] == 1)
                    dp[i][j] = 0;
                else // if it is bottom-right position
                if (i == m - 1 && j == n - 1)
                    dp[i][j] = 1;
                else // last row
                if (i == m - 1)
                    dp[i][j] = dp[i][j + 1];
                else // last column
                if (j == n - 1)
                    dp[i][j] = dp[i + 1][j];
                else
                    dp[i][j] = dp[i][j + 1] + dp[i + 1][j];
            }
        }
        return dp[0][0];
    }
}
