class Solution {

    public int solve(int[][] a, int[][] dp, int n, int m) {
        if (n == 0 && m == 0)
            return 1;
        if (n < 0 || m < 0)
            return 0;
        if (dp[n][m] != -1) {
            return dp[n][m];
        }
        int up = 0, left = 0;
        if (a[n][m] == 1)
            return 0;
        up = solve(a, dp, n - 1, m);
        left = solve(a, dp, n, m - 1);
        return dp[n][m] = left + up;
    }

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        if (obstacleGrid[0][0] == 1)
            return 0;
        int[][] dp = new int[n][m];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        return solve(obstacleGrid, dp, n - 1, m - 1);
    }
}
