// This is the DP approach.
// class Solution {
//     public int func(int n , int m , int[][] obstacleGrid,int[][] dp){
//         if(n==0 && m==0) return 1;
//         if(n<0 || m<0) return 0;
//         if(obstacleGrid[n][m]==1){
//             return 0;
//         }
//         if(dp[n][m]!=-1) return dp[n][m];
//         return dp[n][m]=func(n-1,m,obstacleGrid,dp)+func(n,m-1,obstacleGrid,dp);
//     }
//     public int uniquePathsWithObstacles(int[][] obstacleGrid) {
//         if(obstacleGrid[0][0]==1) return 0;
//         int n=obstacleGrid.length;
//         int m=obstacleGrid[0].length;
//         int[][] dp=new int[n][m];
//         for(int[] row:dp){
//             Arrays.fill(row,-1);
//         }
//         return func(obstacleGrid.length-1,obstacleGrid[0].length-1, obstacleGrid,dp);
//     }
// }
// This is the DP Tabulation.
// class Solution {
//     public int uniquePathsWithObstacles(int[][] obstacleGrid) {
//         if (obstacleGrid[0][0] == 1)
//             return 0;
//         int n = obstacleGrid.length;
//         int m = obstacleGrid[0].length;
//         int[][] dp = new int[n][m];
//         for (int i = 0; i < n; i++) {
//             for (int j = 0; j < m; j++) {
//                 if (obstacleGrid[i][j] == 1) {
//                     dp[i][j]= 0;}
//                 else if (i == 0 && j == 0){
//                     dp[i][j] = 1;
//                 }
//                 else{
//                     int up=0;
//                     int left=0;
//                     if(i>0){
//                         dp[i][j]+=dp[i-1][j];
//                     }
//                     if(j>0){
//                         dp[i][j]+=dp[i][j-1];
//                     }
//                 }
//             }
//         }
//         return dp[n-1][m-1];
//     }
// }
// This is the space optimised approach.
class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if (obstacleGrid[0][0] == 1)
            return 0;
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        int[] prev = new int[m];
        for (int i = 0; i < n; i++) {
            int[] curr = new int[m];
            for (int j = 0; j < m; j++) {
                if (obstacleGrid[i][j] == 1) {
                    curr[j] = 0;
                } else if (i == 0 && j == 0) {
                    curr[j] = 1;
                } else {
                    int up = 0;
                    int left = 0;
                    if (i > 0) {
                        curr[j] += prev[j];
                    }
                    if (j > 0) {
                        curr[j] += curr[j - 1];
                    }
                }
            }
            prev = curr;
        }
        return prev[m - 1];
    }
}
