class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] grid = initializeGrid(m, n);
        return uniquePathsWithObstaclesRecursive(0, 0, m, n, obstacleGrid, grid);
    }

    private int[][] initializeGrid(int m, int n) {
        int[][] grid = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                grid[i][j] = -1;
            }
        }
        return grid;
    }

    private int uniquePathsWithObstaclesRecursive(int i, int j, int m, int n, int[][] obstacleGrid, int[][] grid) {
        if (i >= m || j >= n) {
            return 0;
        }
        if (obstacleGrid[i][j] == 1) {
            return 0;
        }
        if (i == m - 1 && j == n - 1) {
            return 1;
        }
        if (grid[i][j] != -1) {
            return grid[i][j];
        }
        grid[i][j] = uniquePathsWithObstaclesRecursive(i + 1, j, m, n, obstacleGrid, grid) + uniquePathsWithObstaclesRecursive(i, j + 1, m, n, obstacleGrid, grid);
        return grid[i][j];
    }
}
