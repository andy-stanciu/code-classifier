class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if (obstacleGrid[0][0] == 1) {
            return 0;
        }
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        int[][] dp = new int[n][m];
        // dp[0][0]=1;
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<m;j++){
        //         if(obstacleGrid[i][j]==1){
        //             dp[i][j]=0;
        //         }
        //     }
        // }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int top = 0;
                int left = 0;
                if (i == 0 && j == 0)
                    dp[i][j] = 1;
                else if (obstacleGrid[i][j] == 1)
                    dp[i][j] = 0;
                else {
                    if (i > 0)
                        top = dp[i - 1][j];
                    if (j > 0)
                        left = dp[i][j - 1];
                    dp[i][j] = top + left;
                }
            }
        }
        return dp[n - 1][m - 1];
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<m;j++){
        //         dp[i][j]=-1;
        //     }
        // }
        //return f(n-1,m-1,dp,obstacleGrid);
    }
    // public int f(int i,int j,int dp[][],int obstacleGrid[][]){
    //     if(i==0 && j==0) return 1;
    //     if(i<0 || j<0) return 0;
    //     if(obstacleGrid[i][j]==1) return 0;
    //     if(dp[i][j]!=-1) return dp[i][j];
    //     int top=f(i-1,j,dp,obstacleGrid);
    //     int left=f(i,j-1,dp,obstacleGrid);
    //     return dp[i][j]=top+left;
    // }
}
