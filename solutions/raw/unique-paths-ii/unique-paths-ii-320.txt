class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        //initialize the starting point
        dp[0][0] = obstacleGrid[0][0] == 0 ? 1 : 0;
        for (//initialize the first row
        //initialize the first row
        //initialize the first row
        //if it is clear, then fill it with the value of the previous step horizontally
        int i = 1; i < n; i++) dp[0][i] = obstacleGrid[0][i] == 0 ? dp[0][i - 1] : 0;
        for (//initialize the forst column
        //initialize the forst column
        //initialize the forst column
        //if it is clear, then fill it with the value of the previus step vertically
        int i = 1; i < m; i++) dp[i][0] = obstacleGrid[i][0] == 0 ? dp[i - 1][0] : 0;
        for (int i = 1; i < m; i++) {
            //for all rows
            for (int j = 1; j < n; j++) {
                //for all columns
                if (obstacleGrid[i][j] == 0) {
                    //clear step
                    //to reach point[i][j] it can only be reached from the previous step to the left or up
                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j];
                }
            }
        }
        return dp[m - 1][n - 1];
    }
}
