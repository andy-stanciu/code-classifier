class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int row = obstacleGrid.length;
        int col = obstacleGrid[0].length;
        if (obstacleGrid[0][0] == 1 || obstacleGrid[row - 1][col - 1] == 1)
            return 0;
        int[][] dp = new int[row][col];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (obstacleGrid[i][j] == 1)
                    dp[i][j] = Integer.MAX_VALUE;
                else
                    dp[i][j] = -1;
            }
        }
        int ans = pathsHelper(row - 1, col - 1, dp, row, col);
        return ans;
    }

    public int pathsHelper(int i, int j, int[][] dp, int row, int col) {
        if (i == 0 && j == 0)
            return 1;
        if (i < 0 || j < 0)
            return 0;
        if (dp[i][j] != -1 && dp[i][j] != Integer.MAX_VALUE) {
            return dp[i][j];
        }
        int left = 0;
        int up = 0;
        if (j > 0 && dp[i][j - 1] != Integer.MAX_VALUE) {
            left = pathsHelper(i, j - 1, dp, row, col);
        }
        if (i > 0 && dp[i - 1][j] != Integer.MAX_VALUE) {
            up = pathsHelper(i - 1, j, dp, row, col);
        }
        dp[i][j] = up + left;
        return dp[i][j];
    }
}
