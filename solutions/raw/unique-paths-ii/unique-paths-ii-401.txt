class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int[][] mem = new int[obstacleGrid.length][obstacleGrid[0].length];
        for (int[] arr : mem) {
            Arrays.fill(arr, -1);
        }
        return noOfPaths(obstacleGrid, 0, 0, mem);
    }

    private int noOfPaths(int[][] obstacleGrid, int x, int y, int[][] mem) {
        if (x == obstacleGrid.length || y == obstacleGrid[0].length) {
            return 0;
        }
        if (obstacleGrid[x][y] == 1) {
            return 0;
        }
        if (mem[x][y] > -1) {
            return mem[x][y];
        }
        if (x == obstacleGrid.length - 1 && y == obstacleGrid[0].length - 1) {
            return 1;
        }
        mem[x][y] = noOfPaths(obstacleGrid, x + 1, y, mem) + noOfPaths(obstacleGrid, x, y + 1, mem);
        return mem[x][y];
    }
}
