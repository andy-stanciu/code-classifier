class Solution {

    public int helper(int i, int j, int[][] grid, int[][] dp) {
        if (i == 0 && j == 0)
            return 1;
        if (i < 0 || j < 0 || grid[i][j] == 1)
            return 0;
        if (dp[i][j] != -1)
            return dp[i][j];
        return dp[i][j] = helper(i, j - 1, grid, dp) + helper(i - 1, j, grid, dp);
    }

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        int[][] dp = new int[n][m];
        // for(int []row : dp) Arrays.fill(row, -1);
        // return helper(n-1, m-1, obstacleGrid, dp);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (i == 0 && j == 0 && obstacleGrid[i][j] != 1)
                    dp[i][j] = 1;
                else if (obstacleGrid[i][j] == 1)
                    dp[i][j] = 0;
                else {
                    if (j > 0)
                        dp[i][j] += dp[i][j - 1];
                    if (i > 0)
                        dp[i][j] += dp[i - 1][j];
                }
            }
        }
        // return dp[n-1][m-1];
        int[] dpp = new int[m];
        dpp[0] = 1;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (obstacleGrid[i][j] == 1)
                    dpp[j] = 0;
                else if (j > 0)
                    dpp[j] += dpp[j - 1];
            }
        }
        return dpp[m - 1];
    }
}
