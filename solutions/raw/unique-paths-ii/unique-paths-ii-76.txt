class Solution {

    public int uniquePathsWithObstacles(int[][] arr) {
        int m = arr.length, n = arr[0].length;
        if (arr[0][0] == 1)
            return 0;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) Arrays.fill(dp[i], -1);
        return helper(arr, m - 1, n - 1, dp);
    }

    public int helper(int[][] arr, int m, int n, int[][] dp) {
        if (m == 0 && n == 0)
            return 1;
        if (arr[m][n] == 1)
            return 0;
        if (dp[m][n] != -1)
            return dp[m][n];
        int down = (m > 0) ? helper(arr, m - 1, n, dp) : 0;
        int right = (n > 0) ? helper(arr, m, n - 1, dp) : 0;
        dp[m][n] = down + right;
        return dp[m][n];
    }
}
