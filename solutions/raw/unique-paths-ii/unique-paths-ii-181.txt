class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
        for (int[] c : dp) {
            Arrays.fill(c, -1);
        }
        return f(obstacleGrid, obstacleGrid.length - 1, obstacleGrid[0].length - 1, dp);
    }

    public int f(int[][] grid, int i, int j, int[][] dp) {
        if (i < 0 || j < 0 || grid[i][j] == 1) {
            return 0;
        }
        if (i == 0 && j == 0) {
            return 1;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        int h = f(grid, i - 1, j, dp);
        int u = f(grid, i, j - 1, dp);
        dp[i][j] = u + h;
        return u + h;
    }
}
