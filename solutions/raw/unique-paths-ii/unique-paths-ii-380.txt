class Solution {

    int[][] grid, dp;

    int m, n;

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        this.grid = obstacleGrid;
        this.m = obstacleGrid.length;
        this.n = obstacleGrid[0].length;
        this.dp = new int[m][n];
        return countWays(m - 1, n - 1);
    }

    public boolean isValid(int i, int j) {
        return i >= 0 && i < m && j >= 0 && j < n && grid[i][j] == 0;
    }

    public int countWays(int i, int j) {
        if (!isValid(i, j))
            return 0;
        if (i == 0 && j == 0)
            return 1;
        if (dp[i][j] != 0)
            return dp[i][j];
        dp[i][j] = countWays(i - 1, j) + countWays(i, j - 1);
        return dp[i][j];
    }
}
