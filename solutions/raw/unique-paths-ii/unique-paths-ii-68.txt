class Solution {

    Integer[][] memo;

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        memo = new Integer[obstacleGrid.length][obstacleGrid[0].length];
        return dfs(0, 0, obstacleGrid);
    }

    public int dfs(int i, int j, int[][] obstacleGrid) {
        if (obstacleGrid[i][j] == 1) {
            return 0;
        }
        if (i == obstacleGrid.length - 1 && j == obstacleGrid[0].length - 1) {
            return 1;
        }
        int sum = 0;
        if (i + 1 < obstacleGrid.length) {
            sum += memo(i + 1, j, obstacleGrid);
        }
        if (j + 1 < obstacleGrid[0].length) {
            sum += memo(i, j + 1, obstacleGrid);
        }
        return sum;
    }

    public int memo(int i, int j, int[][] obstacleGrid) {
        if (memo[i][j] != null)
            return memo[i][j];
        memo[i][j] = dfs(i, j, obstacleGrid);
        return memo[i][j];
    }
}
