class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        for (int r = 0; r < obstacleGrid.length; r++) {
            for (int c = 0; c < obstacleGrid[0].length; c++) {
                int value;
                if (obstacleGrid[r][c] == 1) {
                    // obstacle
                    value = 0;
                } else if (r == 0 && c == 0) {
                    // robot start position
                    value = 1;
                } else {
                    // sum possible routes from left and top cell
                    value = getValue(obstacleGrid, r - 1, c) + getValue(obstacleGrid, r, c - 1);
                }
                obstacleGrid[r][c] = value;
            }
        }
        return obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1];
    }

    private int getValue(int[][] grid, int r, int c) {
        return (r >= 0 && r < grid.length && c >= 0 && c < grid[0].length) ? grid[r][c] : 0;
    }
}
