class Solution {

    public int helper(int i, int j, int[][] obstacleGrid, int[][] dp) {
        int m = obstacleGrid.length, n = obstacleGrid[0].length;
        if (i > m - 1 || j > n - 1 || obstacleGrid[i][j] == 1)
            return 0;
        if (i == m - 1 && j == n - 1)
            return 1;
        if (dp[i][j] == -1) {
            dp[i][j] = helper(i + 1, j, obstacleGrid, dp) + helper(i, j + 1, obstacleGrid, dp);
        }
        return dp[i][j];
    }

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length, n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = -1;
            }
        }
        return helper(0, 0, obstacleGrid, dp);
    }
}
