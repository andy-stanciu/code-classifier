class Solution {

    int[][] dp;

    public int uniquePathsWithObstacles(int[][] grid) {
        int m = grid[0].length, n = grid.length;
        dp = new int[n][m];
        if (grid[n - 1][m - 1] == 1)
            return 0;
        if (m == 1 && n == 1) {
            if (grid[0][0] == 0)
                return 1;
            return 0;
        }
        for (int[] temp : dp) Arrays.fill(temp, -1);
        return dfs(grid, 0, 0, n, m);
    }

    private int dfs(int[][] grid, int i, int j, int m, int n) {
        if (i >= m || j >= n)
            return 0;
        if (i == m - 1 && j == n - 1)
            return 1;
        if (grid[i][j] == 1)
            return 0;
        if (dp[i][j] != -1)
            return dp[i][j];
        int r, d;
        r = dfs(grid, i, j + 1, m, n);
        d = dfs(grid, i + 1, j, m, n);
        return dp[i][j] = r + d;
    }
}
