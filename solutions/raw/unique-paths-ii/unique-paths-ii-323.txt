class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) Arrays.fill(dp[i], -1);
        return paths(0, 0, m, n, dp, obstacleGrid);
    }

    int paths(int i, int j, int m, int n, int[][] dp, int[][] obstacleGrid) {
        if (i == m - 1 && j == n - 1 && obstacleGrid[i][j] != 1)
            return 1;
        if (i >= m || j >= n || obstacleGrid[i][j] == 1)
            return 0;
        if (dp[i][j] != -1)
            return dp[i][j];
        int down = paths(i + 1, j, m, n, dp, obstacleGrid);
        int right = paths(i, j + 1, m, n, dp, obstacleGrid);
        return dp[i][j] = down + right;
    }
}
