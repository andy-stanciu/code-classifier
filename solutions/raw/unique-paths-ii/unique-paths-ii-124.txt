class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        int[][] dp = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (obstacleGrid[i][j] == 1) {
                    dp[i][j] = 0;
                    continue;
                }
                if (i - 1 >= 0 && j - 1 >= 0) {
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                } else if (i - 1 >= 0) {
                    dp[i][j] = dp[i - 1][j];
                } else if (j - 1 >= 0) {
                    dp[i][j] = dp[i][j - 1];
                } else {
                    dp[i][j] = 1;
                }
            }
        }
        return dp[n - 1][m - 1];
    }

    /**
     * Recurrsive approach
     */
    public int uniquePathsWithObstacles(int[][] obstacleGrid, int i, int j) {
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        if (i >= n || j >= m) {
            return 0;
        }
        if (obstacleGrid[i][j] == 1) {
            return 0;
        }
        if (i == n - 1 && j == m - 1) {
            return 1;
        }
        return uniquePathsWithObstacles(obstacleGrid, i + 1, j) + uniquePathsWithObstacles(obstacleGrid, i, j + 1);
    }
}
