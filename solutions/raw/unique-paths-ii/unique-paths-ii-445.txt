class Solution {

    public int uniquePathsWithObstacles(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        if (grid[0][0] == 1 || grid[m - 1][n - 1] == 1) {
            // If starting or ending position has an obstacle, no path exists
            return 0;
        }
        // Set the starting position to 1 (represents a valid path)
        grid[0][0] = 1;
        // Fill the first column
        for (int i = 1; i < m; i++) {
            grid[i][0] = (grid[i][0] == 0 && grid[i - 1][0] == 1) ? 1 : 0;
        }
        // Fill the first row
        for (int j = 1; j < n; j++) {
            grid[0][j] = (grid[0][j] == 0 && grid[0][j - 1] == 1) ? 1 : 0;
        }
        // Calculate paths for each cell in the grid
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (grid[i][j] == 0) {
                    grid[i][j] = grid[i - 1][j] + grid[i][j - 1];
                } else {
                    // If there is an obstacle, no path exists through this cell
                    grid[i][j] = 0;
                }
            }
        }
        return grid[m - 1][n - 1];
    }
}
