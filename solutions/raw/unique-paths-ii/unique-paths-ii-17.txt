class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] arr = new int[m][n];
        // Marks cells with obstacles as -1 in the grid
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (obstacleGrid[i][j] == 1) {
                    arr[i][j] = -1;
                }
            }
        }
        // If the start or the end is blocked, no path is possible
        if (arr[0][0] == -1 || arr[m - 1][n - 1] == -1) {
            return 0;
        }
        // Initialize the last row and column, making sure to stop at obstacles
        for (int i = n - 1; i >= 0; i--) {
            if (arr[m - 1][i] == -1) {
                break;
            }
            arr[m - 1][i] = 1;
        }
        for (int i = m - 1; i >= 0; i--) {
            if (arr[i][n - 1] == -1) {
                break;
            }
            arr[i][n - 1] = 1;
        }
        // Fill the grid from bottom-right to top-left
        for (int i = m - 2; i >= 0; i--) {
            for (int j = n - 2; j >= 0; j--) {
                if (arr[i][j] == -1) {
                    // Skip obstacles
                    continue;
                }
                if (arr[i + 1][j] == -1 && arr[i][j + 1] == -1) {
                    arr[i][j] = 0;
                    continue;
                }
                if (arr[i + 1][j] != -1) {
                    arr[i][j] += arr[i + 1][j];
                }
                if (arr[i][j + 1] != -1) {
                    arr[i][j] += arr[i][j + 1];
                }
            }
        }
        return arr[0][0];
    }
}
