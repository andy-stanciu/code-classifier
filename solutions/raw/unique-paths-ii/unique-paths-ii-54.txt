class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        HashMap<Pair, Integer> map = new HashMap<>();
        int m = obstacleGrid.length, n = obstacleGrid[0].length;
        return fn(0, 0, obstacleGrid, map);
    }

    public static int fn(int i, int j, int[][] arr, HashMap<Pair, Integer> map) {
        Pair key = new Pair(i, j);
        // Check if key is already in the map
        if (map.containsKey(key)) {
            return map.get(key);
        }
        // Check for out-of-bounds and obstacles
        if (i >= arr.length || j >= arr[0].length || arr[i][j] == 1) {
            return 0;
        }
        // Check if reached the destination
        if (i == arr.length - 1 && j == arr[0].length - 1) {
            return 1;
        }
        int right = fn(i, j + 1, arr, map);
        int down = fn(i + 1, j, arr, map);
        int totalPaths = right + down;
        // Store the result in the map
        map.put(key, totalPaths);
        return totalPaths;
    }
}
