class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if (obstacleGrid[0][0] == 1)
            return 0;
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        int[][] dp = new int[n][m];
        // for(int a[]:dp){
        //     Arrays.fill(a,-1);
        // }
        // return f(n-1,m-1,n,m,obstacleGrid,dp);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (i == 0 && j == 0)
                    dp[i][j] = 1;
                else if (obstacleGrid[i][j] == 1)
                    dp[i][j] = 0;
                else {
                    int up = 0;
                    int left = 0;
                    if (i > 0)
                        up = dp[i - 1][j];
                    if (j > 0)
                        left = dp[i][j - 1];
                    dp[i][j] = up + left;
                }
            }
        }
        return dp[n - 1][m - 1];
    }
    // public int f(int i,int j,int n,int m,int a[][],int dp[][]){
    //     if(i==0 && j==0) return 1;
    //     if(i<0 || j<0) return 0;
    //     if(i>=0 && j>=0 && a[i][j]==1) return 0;
    //     if(dp[i][j]!=-1) return dp[i][j];
    //     int up=f(i-1,j,n,m,a,dp);
    //     int left=f(i,j-1,n,m,a,dp);
    //     return dp[i][j]=up+left;
    // }
}
