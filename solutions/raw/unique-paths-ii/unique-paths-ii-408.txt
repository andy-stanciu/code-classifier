class Solution {

    int[][] dp = new int[101][101];

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        for (int[] arr : dp) {
            Arrays.fill(arr, -1);
        }
        return solve(obstacleGrid, 0, 0, obstacleGrid.length, obstacleGrid[0].length);
    }

    public int solve(int[][] grid, int row, int col, int m, int n) {
        if (row >= m || col >= n) {
            return 0;
        }
        if (dp[row][col] != -1) {
            return dp[row][col];
        }
        if (grid[row][col] == 1) {
            return 0;
        }
        if (row == m - 1 && col == n - 1) {
            return 1;
        }
        int down = solve(grid, row + 1, col, m, n);
        int right = solve(grid, row, col + 1, m, n);
        return dp[row][col] = down + right;
    }
}
