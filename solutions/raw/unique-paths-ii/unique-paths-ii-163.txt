class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int[][] visited = new int[obstacleGrid.length][obstacleGrid[0].length];
        for (int[] x : visited) {
            Arrays.fill(x, -1);
        }
        return possiblePaths(0, 0, obstacleGrid, visited);
    }

    private int possiblePaths(int i, int j, int[][] arr, int[][] v) {
        if (i == arr.length - 1 && j == arr[0].length - 1) {
            if (arr[i][j] != 1) {
                return 1;
            }
            return 0;
        }
        if (i >= arr.length || j >= arr[0].length) {
            return 0;
        }
        if (arr[i][j] == 1) {
            return 0;
        }
        if (v[i][j] == -1) {
            v[i][j] = possiblePaths(i + 1, j, arr, v) + possiblePaths(i, j + 1, arr, v);
        }
        return v[i][j];
    }
}
