class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length, n = obstacleGrid[0].length;
        if (obstacleGrid[0][0] == 1) {
            return 0;
        }
        if (obstacleGrid[m - 1][n - 1] == 1) {
            return 0;
        }
        int[][] dp = new int[m][n];
        return helper(dp, m, n, 0, 0, obstacleGrid);
    }

    private static int helper(int[][] dp, int m, int n, int p1, int p2, int[][] grid) {
        if (p1 + 1 == m && p2 + 1 == n) {
            return 1;
        }
        if (p1 == m)
            return 0;
        if (p2 == n)
            return 0;
        if (dp[p1][p2] != 0) {
            return dp[p1][p2];
        }
        if (grid[p1][p2] != 1) {
            dp[p1][p2] = helper(dp, m, n, p1 + 1, p2, grid) + helper(dp, m, n, p1, p2 + 1, grid);
        }
        return dp[p1][p2];
    }
}
