class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
        for (int[] ar : dp) {
            Arrays.fill(ar, -1);
        }
        return findUniquePaths(0, 0, obstacleGrid, dp);
    }

    private int findUniquePaths(int startRow, int startCol, int[][] obstacleGrid, int[][] dp) {
        if (startRow < 0 || startCol < 0 || startRow >= obstacleGrid.length || startCol >= obstacleGrid[0].length || obstacleGrid[startRow][startCol] == 1) {
            return 0;
        }
        if (dp[startRow][startCol] != -1) {
            return dp[startRow][startCol];
        }
        if (startRow == obstacleGrid.length - 1 && startCol == obstacleGrid[0].length - 1) {
            return 1;
        }
        int down = findUniquePaths(startRow + 1, startCol, obstacleGrid, dp);
        int right = findUniquePaths(startRow, startCol + 1, obstacleGrid, dp);
        return dp[startRow][startCol] = down + right;
    }
}
