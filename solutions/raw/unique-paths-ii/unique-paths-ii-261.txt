class Solution {

    public int uniquePathsWithObstacles(int[][] grid) {
        int[][] maze = new int[grid.length][grid[0].length];
        for (int i = 0; i < grid.length; i++) {
            Arrays.fill(maze[i], -1);
        }
        if (grid[grid.length - 1][grid[0].length - 1] == 1) {
            return 0;
        }
        return count(0, 0, grid, maze);
    }

    int count(int row, int col, int[][] grid, int[][] maze) {
        if (row >= grid.length || col >= grid[0].length) {
            return 0;
        }
        if (row == grid.length - 1 && col == grid[0].length - 1) {
            return 1;
        }
        if (grid[row][col] == 1) {
            return 0;
        }
        if (maze[row][col] != -1) {
            return maze[row][col];
        }
        int l = count(row + 1, col, grid, maze);
        int r = count(row, col + 1, grid, maze);
        maze[row][col] = l + r;
        return maze[row][col];
    }
}
