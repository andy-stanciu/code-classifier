class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if (obstacleGrid == null) {
            return 0;
        }
        int rSize = obstacleGrid.length - 1, cSize = obstacleGrid[0].length - 1;
        if (obstacleGrid[rSize][cSize] == 1) {
            return 0;
        }
        int[][] memo = new int[rSize + 1][cSize + 1];
        for (int[] row : memo) {
            Arrays.fill(row, -1);
        }
        return backTracking(0, 0, obstacleGrid, rSize, cSize, memo);
    }

    int backTracking(int r, int c, int[][] obstacleGrid, int rSize, int cSize, int[][] memo) {
        if (r == rSize && c == cSize) {
            return 1;
        }
        if (r < 0 || c < 0 || r > rSize || c > cSize || obstacleGrid[r][c] == 1) {
            return 0;
        }
        if (memo[r][c] != -1) {
            return memo[r][c];
        }
        memo[r][c] = backTracking(r + 1, c, obstacleGrid, rSize, cSize, memo) + backTracking(r, c + 1, obstacleGrid, rSize, cSize, memo);
        return memo[r][c];
    }
}
