class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
        for (int[] a : dp) Arrays.fill(a, -1);
        return uniquePathsWithObstaclesRec(obstacleGrid, 0, 0, dp);
    }

    public int uniquePathsWithObstaclesRec(int[][] obstacleGrid, int i, int j, int[][] dp) {
        if (i == obstacleGrid.length - 1 && j == obstacleGrid[0].length - 1 && obstacleGrid[i][j] != 1)
            return 1;
        if (i >= obstacleGrid.length || j >= obstacleGrid[0].length)
            return 0;
        if (obstacleGrid[i][j] == 1)
            return 0;
        if (dp[i][j] != -1)
            return dp[i][j];
        int left = uniquePathsWithObstaclesRec(obstacleGrid, i + 1, j, dp);
        int right = uniquePathsWithObstaclesRec(obstacleGrid, i, j + 1, dp);
        return dp[i][j] = left + right;
    }
}
