class Solution {

    int[][] dp;

    public int up(int i, int j, int m, int n, int[][] obstacleGrid) {
        if (i >= m || j >= n) {
            return 0;
        }
        if (obstacleGrid[i][j] == 1) {
            return 0;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        if (i == m - 1 && j == n - 1) {
            return 1;
        }
        return dp[i][j] = up(i + 1, j, m, n, obstacleGrid) + up(i, j + 1, m, n, obstacleGrid);
    }

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        dp = new int[m][n];
        for (int[] i : dp) {
            Arrays.fill(i, -1);
        }
        return up(0, 0, m, n, obstacleGrid);
    }
}
