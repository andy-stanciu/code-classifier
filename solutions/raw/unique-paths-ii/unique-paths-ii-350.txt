class Solution {

    public int uniquePathsWithObstacles(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] matrix = new int[m][n];
        Queue<int[]> queue = new LinkedList<>();
        if (grid[0][0] == 0 && grid[m - 1][n - 1] == 0) {
            matrix[0][0] = 1;
            queue.offer(new int[] { 0, 0 });
        }
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int[] idx = queue.poll();
                int r = idx[0];
                int c = idx[1];
                if (c + 1 < n && grid[r][c + 1] != 1) {
                    if (matrix[r][c + 1] == 0) {
                        queue.offer(new int[] { r, c + 1 });
                    }
                    matrix[r][c + 1] += matrix[r][c];
                }
                if (r + 1 < m && grid[r + 1][c] != 1) {
                    if (matrix[r + 1][c] == 0) {
                        queue.offer(new int[] { r + 1, c });
                    }
                    matrix[r + 1][c] += matrix[r][c];
                }
            }
        }
        return matrix[m - 1][n - 1];
    }
}
