class Solution {

    public static int solve(int i, int j, int m, int n, int[][] arr, int[][] dp) {
        //Crossed The Bounds
        if (i >= m || j >= n)
            return 0;
        //If Obstacle
        if (arr[i][j] == 1)
            return 0;
        //Destination
        if (i == m - 1 && j == n - 1)
            return 1;
        //Already if answer is available in array
        if (dp[i][j] != -1)
            return dp[i][j];
        int pathsToRight = 0, pathsToDown = 0;
        //Counting paths towards Right
        if (dp[i][j + 1] != -1)
            pathsToRight = dp[i][j + 1];
        else
            pathsToRight = solve(i, j + 1, m, n, arr, dp);
        //Counting paths towards Down
        if (dp[i + 1][j] != -1)
            pathsToDown = dp[i + 1][j];
        else
            pathsToDown = solve(i + 1, j, m, n, arr, dp);
        //Calculating total paths from the point and storing in the dp
        return dp[i][j] = pathsToDown + pathsToRight;
    }

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int[][] dp = new int[101][101];
        int m = obstacleGrid.length, n = obstacleGrid[0].length;
        for (int i = 0; i < m; i++) for (int j = 0; j < n; j++) dp[i][j] = -1;
        return solve(0, 0, m, n, obstacleGrid, dp);
    }
}
