public class Solution {

    int[][] dp;

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        dp = new int[n][m];
        // Initialize the dp array with -1 to mark that no calculations have been done yet.
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        // Calculate the number of unique paths considering obstacles.
        int ans = paths(n - 1, m - 1, dp, obstacleGrid);
        return ans;
    }

    private int paths(int i, int j, int[][] dp, int[][] maze) {
        // Check if the current cell is an obstacle, return 0 if it is.
        if (i >= 0 && j >= 0 && maze[i][j] == 1) {
            return 0;
        }
        // Base case: If we reach the top-left cell, return 1 (one path found).
        if (i == 0 && j == 0) {
            return 1;
        }
        // Base case: If we go out of bounds, return 0.
        if (i < 0 || j < 0) {
            return 0;
        }
        // If the result for the current cell is already calculated, return it.
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        // Calculate the number of paths recursively by considering moving up and left.
        int up = paths(i - 1, j, dp, maze);
        int left = paths(i, j - 1, dp, maze);
        // Store the result in the dp array and return it.
        return dp[i][j] = up + left;
    }
}
