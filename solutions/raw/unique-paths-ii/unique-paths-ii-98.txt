class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = -1;
            }
        }
        solve(m, n, 0, 0, dp, obstacleGrid);
        return dp[0][0];
    }

    public int solve(int m, int n, int row, int col, int[][] dp, int[][] grid) {
        if (row >= m || col >= n) {
            return 0;
        }
        if (row == m - 1 && col == n - 1) {
            if (grid[row][col] == 1) {
                dp[row][col] = 0;
                return 0;
            } else {
                dp[row][col] = 1;
                return 1;
            }
        }
        if (dp[row][col] != -1) {
            return dp[row][col];
        }
        int ans = 0;
        if (grid[row][col] == 1) {
            dp[row][col] = ans;
        } else {
            ans += solve(m, n, row, col + 1, dp, grid);
            ans += solve(m, n, row + 1, col, dp, grid);
            dp[row][col] = ans;
        }
        return ans;
    }
}
