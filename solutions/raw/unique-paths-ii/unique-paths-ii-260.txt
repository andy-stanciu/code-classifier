class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        Map<String, Integer> cache = new HashMap<>();
        return uniquePathsWithObstacles(0, 0, obstacleGrid, cache);
    }

    public int uniquePathsWithObstacles(int i, int j, int[][] obstacleGrid, Map<String, Integer> cache) {
        if (obstacleGrid[i][j] == 1)
            return 0;
        if (i == obstacleGrid.length - 1 && j == obstacleGrid[i].length - 1 && obstacleGrid[i][j] == 0)
            return 1;
        String key = i + "-" + j;
        if (cache.containsKey(key)) {
            return cache.get(key);
        }
        int num1 = 0;
        int num2 = 0;
        if (i < obstacleGrid.length - 1) {
            num1 = uniquePathsWithObstacles(i + 1, j, obstacleGrid, cache);
            cache.put((i + 1) + "-" + j, num1);
        }
        if (j < obstacleGrid[i].length - 1) {
            num2 = uniquePathsWithObstacles(i, j + 1, obstacleGrid, cache);
            cache.put(i + "-" + (j + 1), num2);
        }
        return num1 + num2;
    }
}
