class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int rows = obstacleGrid.length;
        int columns = obstacleGrid[0].length;
        int[][] dp = new int[rows][columns];
        if (obstacleGrid[0][0] == 1 || obstacleGrid[rows - 1][columns - 1] == 1)
            return 0;
        //intially set the dp as 1 for first row and column
        //example
        /**
         *        [0,0]
         *        [stone,stone]
         *        [0,0]
         */
        int valueToSet = 1;
        for (int i = 0; i < rows; i++) {
            //if we encounter any obstical any value after that will be zero
            if (obstacleGrid[i][0] == 1) {
                valueToSet = 0;
                dp[i][0] = 0;
            } else
                dp[i][0] = valueToSet;
        }
        valueToSet = 1;
        for (int i = 0; i < columns; i++) {
            //if we encounter any obstical any value after that will be zero
            if (obstacleGrid[0][i] == 1) {
                valueToSet = 0;
                dp[0][i] = 0;
            } else
                dp[0][i] = valueToSet;
        }
        //traverse the Grid and set dp to zero when we get obstacle
        for (int i = 1; i < rows; i++) {
            for (int j = 1; j < columns; j++) {
                if (obstacleGrid[i][j] == 1) {
                    dp[i][j] = 0;
                } else
                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j];
            }
        }
        return dp[rows - 1][columns - 1];
    }
}
