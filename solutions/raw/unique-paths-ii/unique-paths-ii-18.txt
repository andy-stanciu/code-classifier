class Solution {

    public int uniquePathsWithObstacles(int[][] dp) {
        int m = dp.length, n = dp[0].length;
        // Space OpTimization | O(MxN) | O(N)
        int[] prev = new int[n];
        for (int i = 0; i < m; i++) {
            int[] curr = new int[n];
            for (int j = 0; j < n; j++) {
                if (// Real - Twitch!
                dp[i][j] == 1)
                    // Real - Twitch!
                    curr[j] = 0;
                else // As Similar to Unique paths I
                if (i == 0 && j == 0)
                    curr[j] = 1;
                else {
                    // movements
                    int up = 0, left = 0;
                    // checkin\' valid moves
                    if (i > 0)
                        up = prev[j];
                    if (j > 0)
                        left = curr[j - 1];
                    curr[j] = up + left;
                }
            }
            prev = curr;
        }
        // The final grid path length ..!
        return prev[n - 1];
    }
}
