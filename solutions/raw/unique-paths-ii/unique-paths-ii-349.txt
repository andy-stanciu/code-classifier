class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        if (m == 1 && n == 1) {
            return obstacleGrid[0][0] == 0 ? 1 : 0;
        }
        if (obstacleGrid[0][0] == 1 || obstacleGrid[m - 1][n - 1] == 1) {
            return 0;
        }
        int[][] graph = new int[m][n];
        for (int i = 1; i < m; i++) {
            if (obstacleGrid[i][0] == 0) {
                graph[i][0] = 1;
            } else {
                for (int j = i; j < m; j++) {
                    graph[j][0] = 0;
                }
                break;
            }
        }
        for (int i = 1; i < n; i++) {
            if (obstacleGrid[0][i] == 0) {
                graph[0][i] = 1;
            } else {
                for (int j = i; j < n; j++) {
                    graph[0][j] = 0;
                }
                break;
            }
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (obstacleGrid[i][j] == 0) {
                    graph[i][j] = graph[i - 1][j] + graph[i][j - 1];
                } else {
                    graph[i][j] = 0;
                }
            }
        }
        return graph[m - 1][n - 1];
    }
}
