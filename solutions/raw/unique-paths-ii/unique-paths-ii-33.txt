/*
Now we can easily do the bottoms up, tabulation method.

1. Start with the base cases and fill the dp table
2. Do the loop through the grid and copy paste the remaining code from the memoization + the extra base condition for the obstacke check
3. Return the last cell value from the dp table

TC : O(M * N)
SC : O(M * N)


*/
class Solution {

    public int uniquePathsWithObstacles(int[][] grid) {
        int row = grid.length;
        int col = grid[0].length;
        if (grid[0][0] == 1) {
            return 0;
        }
        if (grid[row - 1][col - 1] == 1) {
            return 0;
        }
        int[][] dp = new int[row][col];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == 1) {
                    dp[i][j] = 0;
                } else if (i == 0 && j == 0) {
                    dp[i][j] = 1;
                } else {
                    int up = 0;
                    int left = 0;
                    if (i > 0) {
                        up = dp[i - 1][j];
                    }
                    if (j > 0) {
                        left = dp[i][j - 1];
                    }
                    dp[i][j] = up + left;
                    // this is basically up + left from memo code
                }
            }
        }
        return dp[row - 1][col - 1];
    }
}
