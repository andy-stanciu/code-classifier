class Solution {

    public static int func(int m, int n, int[][] dp, int[][] arr) {
        if (m >= 0 && n >= 0 && arr[m][n] == 1) {
            return 0;
        }
        if (m == 0 && n == 0) {
            return 1;
        }
        if (m < 0 || n < 0) {
            return 0;
        }
        if (dp[m][n] != -1)
            return dp[m][n];
        int up = func(m - 1, n, dp, arr);
        int down = func(m, n - 1, dp, arr);
        return dp[m][n] = (up + down);
    }

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return func(obstacleGrid.length - 1, obstacleGrid[0].length - 1, dp, obstacleGrid);
    }
}
