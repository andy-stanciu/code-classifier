class Solution {

    public int uniquePathsWithObstacles(int[][] og) {
        int m = og.length;
        int n = og[0].length;
        if (m == 1 && n == 1)
            if (og[0][0] == 0)
                return 1;
            else
                return 0;
        if (m == 1 || n == 1) {
            if (m == 1) {
                for (int i = 0; i < n; i++) {
                    if (og[0][i] == 1)
                        return 0;
                }
                return 1;
            } else {
                for (int i = 0; i < m; i++) {
                    if (og[i][0] == 1)
                        return 0;
                }
                return 1;
            }
        }
        if (og[0][0] == 1)
            return 0;
        int[][] dp = new int[m][n];
        dp[0][0] = og[0][0] == 1 ? 0 : 1;
        for (int i = 1; i < m; i++) {
            if (og[i][0] == 1)
                dp[i][0] = 0;
            else
                dp[i][0] = dp[i - 1][0];
        }
        for (int j = 1; j < n; j++) {
            if (og[0][j] != 1)
                dp[0][j] = dp[0][j - 1];
            else
                dp[0][j] = 0;
        }
        dp[0][0] = 0;
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (og[i][j] != 1) {
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                } else {
                    dp[i][j] = 0;
                }
                if (dp[i][j] == -1)
                    dp[i][j] = 0;
            }
        }
        // for(int i=0;i<m;i++)
        // {
        //     for(int j=0;j<n;j++)
        //     {
        //         System.out.print(dp[i][j] + " ");
        //     }
        //     System.out.println();
        // }
        return dp[m - 1][n - 1];
    }
}
