class Solution {

    private int[][] dp;

    public int uniquePathsWithObstacles(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        if (n == 1 && m == 1 && grid[0][0] == 0)
            return 1;
        if (grid[n - 1][m - 1] != 0 || grid[0][0] == 1)
            return 0;
        dp = new int[n][m];
        for (int[] x : dp) Arrays.fill(x, -1);
        return uniquePath(grid, 0, 1, n - 1, m - 1) + uniquePath(grid, 1, 0, n - 1, m - 1);
    }

    private int uniquePath(int[][] grid, int i, int j, int n, int m) {
        if (!isValid(i, j, n, m) || grid[i][j] == 1)
            return 0;
        if (i == n && j == m)
            return 1;
        if (dp[i][j] != -1)
            return dp[i][j];
        return dp[i][j] = uniquePath(grid, i + 1, j, n, m) + uniquePath(grid, i, j + 1, n, m);
    }

    private boolean isValid(int i, int j, int n, int m) {
        return i >= 0 && j >= 0 && i <= n && j <= m;
    }
}
