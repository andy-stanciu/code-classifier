class Solution {

    int[][] store;

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        store = new int[obstacleGrid.length][obstacleGrid[0].length];
        for (int i = 0; i < obstacleGrid.length; i++) {
            for (int j = 0; j < obstacleGrid[0].length; j++) {
                store[i][j] = -1;
            }
        }
        return this.findWays(obstacleGrid, 0, 0);
    }

    public int findWays(int[][] obstacleGrid, int i, int j) {
        if (i == obstacleGrid.length - 1 && j == obstacleGrid[0].length - 1 && obstacleGrid[i][j] == 0) {
            store[i][j] = 1;
            return 1;
        }
        if (i >= 0 && i < obstacleGrid.length && j >= 0 && j < obstacleGrid[0].length && obstacleGrid[i][j] == 0) {
            if (store[i][j] != -1) {
                return store[i][j];
            }
            int res = findWays(obstacleGrid, i + 1, j) + findWays(obstacleGrid, i, j + 1);
            store[i][j] = res;
            return res;
        }
        return 0;
    }
}
