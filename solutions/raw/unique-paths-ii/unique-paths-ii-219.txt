class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        // Memoization approch
        // int n=obstacleGrid.length;
        // int m=obstacleGrid[0].length;
        // if(obstacleGrid[0][0]==1){
        //     return 0;
        // }
        // int dp[][]=new int[n][m];
        // for(int row[] : dp){
        //     Arrays.fill(row,-1);
        // }
        // return helper(n-1,m-1,obstacleGrid,dp);
        //-------------------TABULATION-------------------
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        int[][] dp = new int[n][m];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (obstacleGrid[i][j] == 1) {
                    dp[i][j] = 0;
                    continue;
                }
                if (i == 0 && j == 0) {
                    dp[i][j] = 1;
                    continue;
                }
                int up = 0;
                int left = 0;
                if (i > 0) {
                    up = dp[i - 1][j];
                }
                if (j > 0) {
                    left = dp[i][j - 1];
                }
                dp[i][j] = left + up;
            }
        }
        return dp[n - 1][m - 1];
    }
    // public int helper(int n,int m,int obstacleGrid[][],int dp[][]){
    //     if(n==0 && m==0){
    //         return 1;
    //     }
    //      if(obstacleGrid[n][m]==1){
    //         return 0;
    //     }
    //     if(dp[n][m]!=-1){
    //         return dp[n][m];
    //     }
    //     int up=0;
    //     int left=0;
    //     if(n>0){
    //         up=helper(n-1,m,obstacleGrid,dp);
    //     }
    //     if(m>0){
    //           left=helper(n,m-1,obstacleGrid,dp);
    //     }
    //     return dp[n][m]=up+left;
    // }
}
