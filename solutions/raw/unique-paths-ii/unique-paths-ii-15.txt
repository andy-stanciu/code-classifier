// Approach -3 Space Optimization
class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        int[] prev = new int[m];
        for (int i = 0; i < n; i++) {
            int[] cur = new int[m];
            for (int j = 0; j < m; j++) {
                if (i >= 0 && j >= 0 && obstacleGrid[i][j] == 1) {
                    cur[j] = 0;
                    continue;
                }
                if (i == 0 && j == 0) {
                    cur[j] = 1;
                    continue;
                }
                int le = 0;
                int up = 0;
                if (i > 0)
                    le = prev[j];
                if (j > 0)
                    up = cur[j - 1];
                cur[j] = le + up;
            }
            prev = (int[]) (cur.clone());
        }
        return prev[m - 1];
    }
}
