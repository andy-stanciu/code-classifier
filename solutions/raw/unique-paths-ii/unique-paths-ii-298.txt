class Solution {

    public int solve(int[][] obstacleGrid, int i, int j, int[][] dp) {
        if (i == 1 && j == 1)
            return 1;
        if (i == 0)
            return 0;
        if (j == 0)
            return 0;
        if (obstacleGrid[i - 1][j - 1] == 1)
            return 0;
        if (dp[i][j] != -1)
            return dp[i][j];
        return dp[i][j] = solve(obstacleGrid, i - 1, j, dp) + solve(obstacleGrid, i, j - 1, dp);
    }

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if (obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1] == 1)
            return 0;
        if (obstacleGrid[0][0] == 1)
            return 0;
        int[][] dp = new int[obstacleGrid.length + 1][obstacleGrid[0].length + 1];
        for (int i = 0; i < dp.length; i++) {
            for (int j = 0; j < dp[0].length; j++) dp[i][j] = -1;
        }
        return solve(obstacleGrid, obstacleGrid.length, obstacleGrid[0].length, dp);
    }
}
