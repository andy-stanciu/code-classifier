class Solution {

    /**
     * Method signifies, total unique paths from (i,j) to (m-1,n-1)
     */
    public int uniquePaths(int[][] obstacleGrid, int i, int j, int[][] dp) {
        int rows = obstacleGrid.length;
        int cols = obstacleGrid[0].length;
        /**
         * Moved out of boundary, no path
         */
        if (i >= rows || j >= cols)
            return 0;
        /**
         * Obstacle -> can\'t move in this grid, hence no path possible
         *        return 0
         */
        if (obstacleGrid[i][j] == 1)
            return 0;
        /**
         * Reached destination(bottom right), One path found
         */
        if (i == rows - 1 && j == cols - 1)
            return 1;
        /**
         * Already calculated subproblem, Return the answer
         */
        if (dp[i][j] != -1)
            return dp[i][j];
        /**
         * Move right or down
         */
        int downPaths = uniquePaths(obstacleGrid, i, j + 1, dp);
        int rightPaths = uniquePaths(obstacleGrid, i + 1, j, dp);
        return dp[i][j] = downPaths + rightPaths;
    }

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int rows = obstacleGrid.length;
        int cols = obstacleGrid[0].length;
        if (rows == 0 && cols == 0)
            return 0;
        int[][] dp = new int[rows][cols];
        for (int i = 0; i < rows; i++) {
            Arrays.fill(dp[i], -1);
        }
        return uniquePaths(obstacleGrid, 0, 0, dp);
    }
}
