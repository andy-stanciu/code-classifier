class Solution {

    int cal(int i, int j, int row, int col, int[][] dp, int[][] a) {
        if (i == row - 1 && j == col - 1)
            return 1;
        if (i < row && j < col && dp[i][j] != 0)
            return dp[i][j];
        int down = 0, right = 0;
        if (i + 1 < row && j < col && a[i + 1][j] == 0)
            down = cal(i + 1, j, row, col, dp, a);
        if (i < row && j + 1 < col && a[i][j + 1] == 0)
            right = cal(i, j + 1, row, col, dp, a);
        return dp[i][j] = down + right;
    }

    public int uniquePathsWithObstacles(int[][] a) {
        int m, n;
        m = a.length;
        n = a[0].length;
        if (a[m - 1][n - 1] == 1 || a[0][0] == 1)
            return 0;
        int[][] dp = new int[m][n];
        return cal(0, 0, m, n, dp, a);
    }
}
