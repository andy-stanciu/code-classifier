class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        // If the {0,0} index is 1 there are no ways
        if (obstacleGrid[0][0] == 1) {
            return 0;
        }
        // To find the no of rows
        int m = obstacleGrid.length;
        // To find the no of columns
        int n = obstacleGrid[0].length;
        // Create a matrix for storing repeating values and initialize with -1
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = -1;
            }
        }
        int ans = solve(obstacleGrid, m - 1, n - 1, dp);
        return ans;
    }

    public int solve(int[][] mat, int m, int n, int[][] dp) {
        // If pointer goes out of bound return 0
        if (m < 0 || n < 0) {
            return 0;
        }
        // If we reach {0,0} without any obstacle there is way to reach zeroth row or
        // column
        if (m == 0 && n == 0) {
            return 1;
        }
        // If a position has a value 1 it is an obstacle
        if (mat[m][n] == 1) {
            return 0;
        }
        if (dp[m][n] != -1) {
            return dp[m][n];
        }
        int x = solve(mat, m - 1, n, dp);
        int y = solve(mat, m, n - 1, dp);
        // Storing value in the matrix
        dp[m][n] = x + y;
        return x + y;
    }
}
