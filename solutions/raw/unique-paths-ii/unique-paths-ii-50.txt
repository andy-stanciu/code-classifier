class Solution {

    public int uniquePathsWithObstacles(int[][] arr) {
        int m = arr.length;
        int n = arr[0].length;
        // if there are an obstacle at source or destination position
        if (arr[0][0] == 1 || arr[m - 1][n - 1] == 1)
            return 0;
        // Store calculated values
        int[][] dp = new int[m][n];
        // no. of ways we can start from starting positon
        dp[0][0] = 1;
        // update dp array border positons - first cell in every row
        for (int i = 1; i < m; i++) {
            if (arr[i][0] == 0)
                dp[i][0] = dp[i - 1][0];
            else
                dp[i][0] = 0;
        }
        // update dp array border positons - first cell in every coloum
        for (int i = 1; i < n; i++) {
            if (arr[0][i] == 0)
                dp[0][i] = dp[0][i - 1];
            else
                dp[0][i] = 0;
        }
        // Iterative processing
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (// if current cell have an obstacle
                arr[i][j] == 1)
                    // if current cell have an obstacle
                    dp[i][j] = 0;
                else {
                    // no obstacle - total ways from top & left
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                }
            }
        }
        // destination
        return dp[m - 1][n - 1];
    }
}
