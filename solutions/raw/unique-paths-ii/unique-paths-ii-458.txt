class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
        return uniqueWithObstacles(obstacleGrid, 0, 0, dp, obstacleGrid.length, obstacleGrid[0].length);
    }

    private static int uniqueWithObstacles(int[][] obstacleGrid, int i, int j, int[][] dp, int length, int length2) {
        if (dp[i][j] != 0)
            return dp[i][j];
        if (obstacleGrid[i][j] == 1)
            return 0;
        if (i == length - 1 && j == length2 - 1) {
            if (obstacleGrid[i][j] == 1)
                return 0;
            return 1;
        }
        int down = 0, right = 0;
        if (i < length - 1)
            down = uniqueWithObstacles(obstacleGrid, i + 1, j, dp, length, length2);
        if (j < length2 - 1)
            right = uniqueWithObstacles(obstacleGrid, i, j + 1, dp, length, length2);
        dp[i][j] = right + down;
        return dp[i][j];
    }
}
