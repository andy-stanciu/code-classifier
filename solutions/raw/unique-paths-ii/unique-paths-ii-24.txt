class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if (obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1] == 1)
            return 0;
        int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
        for (int i = 0; i < obstacleGrid.length; i++) Arrays.fill(dp[i], -1);
        return helper(obstacleGrid, 0, 0, obstacleGrid.length, obstacleGrid[0].length, dp);
    }

    private int helper(int[][] obstacleGrid, int r, int c, int m, int n, int[][] dp) {
        if (r == m - 1 && c == n - 1)
            return 1;
        if (r >= m || c >= n || obstacleGrid[r][c] == 1)
            return 0;
        if (dp[r][c] != -1)
            return dp[r][c];
        int count = 0;
        count += helper(obstacleGrid, r + 1, c, m, n, dp);
        count += helper(obstacleGrid, r, c + 1, m, n, dp);
        return dp[r][c] = count;
    }
}
