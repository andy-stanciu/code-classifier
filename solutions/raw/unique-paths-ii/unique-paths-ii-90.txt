class Solution {

    public int uniquePathsWithObstacles(int[][] grid) {
        //initial point
        int r = 0, c = 0;
        int Rows = grid.length, Cols = grid[0].length;
        //     // int cache[][] = new int[Rows][Cols];
        //     // int res = dfs(grid, r, c, Rows, Cols, cache);
        //     // return res;
        //    int prevRow[] = new int[Cols];
        //     for (int i = Rows - 1; i >= 0; i--) {
        //         int[] currRow = new int[Cols];
        //         currRow[Cols - 1] = 1;
        //         for (int j = Cols - 2; j >= 0; j--) {
        //             currRow[j] = currRow[j + 1] + prevRow[j];
        //         }
        //         prevRow = currRow;
        if (grid[Rows - 1][Cols - 1] == 1) {
            return 0;
        }
        int[] prevRow = new int[Cols];
        for (int i = Rows - 1; i >= 0; i--) {
            int[] currRow = grid[i];
            if (i == Rows - 1 && currRow[Cols - 1] == 0)
                currRow[Cols - 1] = 1;
            else if (currRow[Cols - 1] == 1)
                currRow[Cols - 1] = 0;
            else
                currRow[Cols - 1] = prevRow[Cols - 1];
            for (int j = Cols - 2; j >= 0; j--) {
                if (currRow[j] == 1) {
                    currRow[j] = 0;
                } else
                    currRow[j] = currRow[j + 1] + prevRow[j];
            }
            prevRow = currRow;
        }
        return prevRow[0];
    }
}
// it was using the top down DP  now i ll be doing bottom up DP
// public int dfs(int [][]grid, int r, int c, int Rows, int Cols, int [][]cache)
// {
//     if(r >= Rows || c >= Cols|| grid[r][c] == 1  ) return 0;
//     if(r == Rows-1 && c == Cols-1) return 1;
//     if(cache[r][c] > 0) return cache[r][c];
//     cache[r][c] = dfs(grid, r+1, c, Rows, Cols, cache) + dfs(grid, r, c+1, Rows, Cols, cache);
//     return cache[r][c];
// }
