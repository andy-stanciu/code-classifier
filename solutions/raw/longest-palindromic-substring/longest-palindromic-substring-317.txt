class Solution {

    // Stores the longest palindrome found
    String longestPalindrome = "";

    public String longestPalindrome(String s) {
        int length = s.length();
        for (int i = 0; i < length; i++) {
            // Find the longest odd-length palindrome centered at index i
            findPalindromesAndGetLongest(s, i, i);
            // Find the longest even-length palindrome centered between index i and i+1
            findPalindromesAndGetLongest(s, i, i + 1);
        }
        return longestPalindrome;
    }

    // Expands around the center to find palindromes and updates the longest palindrome found
    public void findPalindromesAndGetLongest(String word, int left, int right) {
        // Expand the window as long as the characters at left and right are the same
        while (left >= 0 && right < word.length() && word.charAt(right) == word.charAt(left)) {
            left--;
            right++;
        }
        // Extract the palindrome substring from the expanded window
        String palindromeString = word.substring(left + 1, right);
        // Update the longest palindrome if the current one is longer
        if (longestPalindrome.length() < palindromeString.length()) {
            longestPalindrome = palindromeString;
        }
    }
}
