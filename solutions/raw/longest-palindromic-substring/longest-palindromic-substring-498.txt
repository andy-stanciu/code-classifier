class Solution {

    String res = "";

    int max = 0;

    public String longestPalindrome(String s) {
        if (s.length() == 1) {
            return s;
        }
        String[][] dp = new String[s.length() + 1][s.length() + 1];
        return longestPalindrome1(0, s.length(), s, dp);
        //return res;
    }

    String longestPalindrome1(int i, int j, String s, String[][] dp) {
        if (i >= s.length() || j <= -1) {
            return "";
        }
        if (dp[i][j] != null) {
            return dp[i][j];
        }
        if (i < j) {
            String r = s.substring(i, j);
            if (r.charAt(0) == r.charAt(r.length() - 1)) {
                String reversedSubstring = new StringBuilder(r).reverse().toString();
                if (r.equals(reversedSubstring)) {
                    return r;
                }
            }
        }
        String right = longestPalindrome1(i, j - 1, s, dp);
        String left = longestPalindrome1(i + 1, j, s, dp);
        dp[i][j] = right.length() > left.length() ? right : left;
        return dp[i][j];
    }
}
