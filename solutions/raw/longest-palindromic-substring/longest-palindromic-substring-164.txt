class Solution {

    public String longestPalindrome(String s) {
        int L = 0, R = 0, n = s.length();
        int[] d = new int[n];
        int l = 0, r = -1;
        for (int i = 0; i != n; i++) {
            int k = i > r ? 1 : Math.min(d[l + r - i], r - i + 1);
            while (i + k < n && i - k >= 0 && s.charAt(i + k) == s.charAt(i - k)) k++;
            d[i] = k;
            if (i + k - 1 > r) {
                l = i - k + 1;
                r = i + k - 1;
                if (r - l > R - L) {
                    L = l;
                    R = r;
                }
            }
        }
        Arrays.fill(d, 0);
        l = 0;
        r = -1;
        for (int i = 0; i != n; i++) {
            int k = i > r ? 0 : Math.min(d[l + r - i + 1], r - i + 1);
            while (i + k < n && i - k - 1 >= 0 && s.charAt(i + k) == s.charAt(i - k - 1)) k++;
            d[i] = k;
            if (i + k - 1 > r) {
                l = i - k;
                r = i + k - 1;
                if (r - l > R - L) {
                    L = l;
                    R = r;
                }
            }
        }
        return s.substring(L, R + 1);
    }
}
