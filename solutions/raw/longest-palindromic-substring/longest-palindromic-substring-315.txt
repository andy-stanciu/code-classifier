class Solution {

    public String longestPalindrome(String str) {
        if (str.length() == 1)
            return str;
        int maxSize = 0;
        String subStr = new String();
        for (int i = 1; i < str.length(); i++) {
            String tempSub = expandWhilePalindromic(str, i);
            if (tempSub.length() > subStr.length()) {
                subStr = tempSub;
            }
        }
        return subStr;
    }

    public static String expandWhilePalindromic(String str, int index) {
        int left = index - 1;
        int right = index + 1;
        String subStr = String.valueOf(str.charAt(index));
        while (left >= 0 && str.charAt(left) == str.charAt(index)) {
            subStr = str.substring(left--, index + 1);
        }
        while (right < str.length() && str.charAt(right) == str.charAt(index)) {
            subStr = str.substring(index, 1 + right++);
        }
        while (left >= 0 && right < str.length()) {
            if (str.charAt(left) == str.charAt(right))
                subStr = str.substring(left--, 1 + right++);
            else
                break;
        }
        return subStr;
    }
}
