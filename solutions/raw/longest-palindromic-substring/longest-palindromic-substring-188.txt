class Solution {

    public String longestPalindrome(String s) {
        if (s == null || s.length() < 2)
            return s;
        String longest = "";
        for (int i = 0; i < s.length(); i++) {
            //odd length pali(single char at centre)
            String oddPal = encounterCentre(s, i, i);
            if (oddPal.length() > longest.length()) {
                longest = oddPal;
            }
            //even Length pali (double char at centre)
            String evenPal = encounterCentre(s, i, i + 1);
            if (evenPal.length() > longest.length()) {
                longest = evenPal;
            }
        }
        return longest;
    }

    //to expand around the centre and find the longest Palin
    static String encounterCentre(String st, int start, int end) {
        while (start >= 0 && end < st.length() && st.charAt(start) == st.charAt(end)) {
            start--;
            end++;
        }
        return st.substring(start + 1, end);
    }
}
