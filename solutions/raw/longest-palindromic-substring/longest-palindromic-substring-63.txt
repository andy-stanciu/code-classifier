class Solution {

    public String longestPalindrome(String s) {
        //first we return "" if the size of the string is less than 1 ;
        String str = "";
        if (s.length() < 1)
            return "";
        //then we used a for loop for iterating to each element
        for (int i = 0; i < s.length(); i++) {
            //first we check for substring expanding from i ;
            String str1 = meow(s, i, i);
            //then we check for substring that is expanding from i , i+1;
            String str2 = meow(s, i, i + 1);
            //then we check for the size and strore whose size is bigger ;
            if (str1.length() > str.length()) {
                str = str1;
            }
            if (str2.length() > str.length()) {
                str = str2;
            }
        }
        //after that we return the stored string ;
        return str;
    }

    public String meow(String s, int l, int r) {
        //here we check for substring from expand around centre meathod ;
        while (l >= 0 && r < s.length() && s.charAt(l) == s.charAt(r)) {
            l--;
            r++;
        }
        return s.substring(l + 1, r);
    }
}
