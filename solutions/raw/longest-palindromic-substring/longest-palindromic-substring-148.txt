class Solution {

    public String longestPalindrome(String S) {
        char[] s = S.toCharArray();
        int n = s.length;
        // left end and right end of answer
        int left = 0, right = 0;
        for (int i = 0; i < n; i++) {
            // Find longest palindrome with s[i] at center
            int r = i, l = i;
            while (// Expand around center
            l - 1 >= 0 && r + 1 < n && s[l - 1] == s[r + 1]) {
                l--;
                r++;
            }
            if (// Update result if larger found
            r - l > right - left) {
                left = l;
                right = r;
            }
            if (// Find longest palindrome with s[i], s[i+1] at center
            i + 1 < n && s[i] == s[i + 1]) {
                l = i;
                r = i + 1;
                while (// Expand around center
                l - 1 >= 0 && r + 1 < n && s[l - 1] == s[r + 1]) {
                    l--;
                    r++;
                }
                if (// Update result if larger found
                r - l > right - left) {
                    left = l;
                    right = r;
                }
            }
        }
        // s[left....right]
        return S.substring(left, right + 1);
    }
}
