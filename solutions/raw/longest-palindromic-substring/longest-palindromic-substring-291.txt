class Solution {

    public String longestPalindrome(String s) {
        if (s == null || s.length() < 1)
            return "";
        int start = 0, maxLen = 1;
        for (int i = 0; i < s.length(); ++i) {
            // odd length palindrome
            int length1 = expandAroundCenterAndCalculateLength(s, i, i);
            // even length palindrome
            int length2 = expandAroundCenterAndCalculateLength(s, i, i + 1);
            int currLen = Math.max(length1, length2);
            if (maxLen < currLen) {
                maxLen = currLen;
                // start position will be half of current substring length from the center i.e. i
                start = i - (currLen - 1) / 2;
            }
        }
        return s.substring(start, start + maxLen);
    }

    private int expandAroundCenterAndCalculateLength(String s, int start, int end) {
        while (start >= 0 && end < s.length() && s.charAt(start) == s.charAt(end)) {
            start--;
            end++;
        }
        // legth of substr
        return end - start - 1;
    }
}
