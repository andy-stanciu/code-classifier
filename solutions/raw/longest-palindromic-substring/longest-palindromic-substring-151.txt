class Solution {

    // This function returns the length of the longest palindromic substring with s.charAt(i) and s.charAt(j) as the middle characters of the substring
    private int lps(String s, int i, int j) {
        while (i >= 0 && j < s.length() && s.charAt(i) == s.charAt(j)) {
            i--;
            j++;
        }
        return j - i - 1;
    }

    public String longestPalindrome(String s) {
        int si = 0;
        int ei = 0;
        for (int i = 0; i < s.length(); i++) {
            // Checking for an odd length palindromic substring with i as the middle index of the substring
            int oddlen = lps(s, i, i);
            // Checking for an even length palindromic substring with i and i+1 as the middle indices of the substring
            int evenlen = lps(s, i, i + 1);
            // Maximum of both of them will give us the current length of the palindromic substring
            int len = Math.max(oddlen, evenlen);
            // Now we need to find the maximum of all the possible palindromic substrings and keep updating the start and end indices
            if (len > (ei - si)) {
                si = i - (len - 1) / 2;
                ei = i + (len / 2);
            }
        }
        return s.substring(si, ei + 1);
    }
}
