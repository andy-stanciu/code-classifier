class Solution {

    public String longestPalindrome(String s) {
        if (s.length() == 1) {
            return s;
        }
        Integer start = 0;
        Integer end = 0;
        for (int i = 0; i < s.length(); i++) {
            int len2 = expandAroundCenter(s, i, i + 1);
            int len1 = expandAroundCenter(s, i, i);
            int len = Math.max(len1, len2);
            if (len > (end - start)) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        return s.substring(start, end + 1);
    }

    private int expandAroundCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1;
    }

    public String longestPalindromeOld(String s) {
        if (s == null || s.length() < 2) {
            // A single character or an empty string is already a palindrome.
            return s;
        }
        Integer totalMax = 0;
        String totalMaxString = "";
        for (int start = 0; start < s.length(); start++) {
            List<String> list = new ArrayList<String>();
            Integer max = 0;
            String maxString = "";
            if (totalMax > s.length() - start) {
                break;
            }
            for (int i = start; i < s.length(); i++) {
                list.add(String.valueOf(s.charAt(i)));
                boolean status = palindromeCheck(list);
                if (status) {
                    max = list.size();
                    maxString = String.join("", list);
                }
            }
            // System.out.println(max);
            if (max > totalMax) {
                totalMax = max;
                totalMaxString = maxString;
            }
        }
        return totalMaxString;
    }

    public boolean palindromeCheck(List<String> list) {
        for (int i = 0; i < list.size() / 2; i++) {
            if (!list.get(i).equals(list.get(list.size() - 1 - i))) {
                return false;
            }
        }
        return true;
    }
}
