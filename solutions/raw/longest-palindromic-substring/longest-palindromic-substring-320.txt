class Solution {

    public boolean palindrome(String s) {
        int i = 0, j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            } else {
                i++;
                j--;
            }
        }
        return true;
    }

    public String longestPalindrome(String s) {
        if (palindrome(s))
            return s;
        int start = 0;
        int end = 0;
        for (int i = 1; i < s.length() - 1; i++) {
            int left = i - 1;
            int right = i + 1;
            boolean check = false;
            if (s.charAt(left) == s.charAt(i)) {
                check = true;
                right = i;
            } else if (s.charAt(right) == s.charAt(i)) {
                check = true;
                left = i;
            }
            if (check) {
                while (left >= 0 && right < s.length()) {
                    if (s.charAt(left) == s.charAt(right)) {
                        left--;
                        right++;
                    } else {
                        break;
                    }
                }
                if (end - start + 1 < right - left - 1) {
                    start = left + 1;
                    end = right - 1;
                }
            }
            left = i - 1;
            right = i + 1;
            if (s.charAt(left) == s.charAt(right)) {
                check = true;
                while (left >= 0 && right < s.length()) {
                    if (s.charAt(left) == s.charAt(right)) {
                        left--;
                        right++;
                    } else {
                        break;
                    }
                }
                if (end - start + 1 < right - left - 1) {
                    start = left + 1;
                    end = right - 1;
                }
            }
        }
        return new String(s.substring(start, end + 1));
    }
}
