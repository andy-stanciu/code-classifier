class Solution {

    public String longestPalindrome(String s) {
        if (s.length() == 1 || s.length() == 0 || s == null) {
            return s;
        }
        int n = s.length(), start = 0, end = 0;
        for (int i = 0; i < n - 1; i++) {
            int oddLen = length(s, i, i);
            int evenLen = length(s, i, i + 1);
            int maxLen = Math.max(oddLen, evenLen);
            if (maxLen > (end - start)) {
                start = i - (maxLen - 1) / 2;
                end = i + (maxLen) / 2;
            }
        }
        return s.substring(start, end + 1);
    }

    public int length(String s, int ind1, int ind2) {
        int left = ind1, right = ind2;
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1;
    }
}
