class Solution {

    private String preprocess(String s) {
        StringBuilder processedString = new StringBuilder("#");
        for (char c : s.toCharArray()) {
            processedString.append(c).append("#");
        }
        return processedString.toString();
    }

    // Manacher\'s algorithm function
    public String longestPalindrome(String s) {
        // Transform the input string
        String processedString = preprocess(s);
        int size = processedString.length();
        int[] p = new int[size];
        int center = 0, right = 0;
        for (int i = 1; i < size - 1; i++) {
            int mirror = 2 * center - i;
            if (i < right) {
                p[i] = Math.min(right - i, p[mirror]);
            }
            // Attempt to expand palindrome centered at i
            while (i + (1 + p[i]) < size && i - (1 + p[i]) >= 0 && processedString.charAt(i + (1 + p[i])) == processedString.charAt(i - (1 + p[i]))) {
                p[i]++;
            }
            // If palindrome centered at i expands past right,
            // adjust center and right boundary
            if (i + p[i] > right) {
                center = i;
                right = i + p[i];
            }
        }
        // Find the maximum element in P
        int maxLen = 0, centerIndex = 0;
        for (int i = 1; i < size - 1; i++) {
            if (p[i] > maxLen) {
                maxLen = p[i];
                centerIndex = i;
            }
        }
        // Extract the palindrome substring from the processed string
        int start = (centerIndex - maxLen) / 2;
        return s.substring(start, start + maxLen);
    }
}
