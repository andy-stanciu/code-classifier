class Solution {

    public String longestPalindrome(String s) {
        int[][] dp = new int[1001][1001];
        int n = s.length();
        int max_len = 0, startind = 0;
        for (int i = 0; i < 1001; i++) {
            for (int j = 0; j < 1001; j++) dp[i][j] = -1;
        }
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (check(s, i, j, dp) == 1) {
                    if (max_len < (j - i + 1)) {
                        max_len = j - i + 1;
                        startind = i;
                    }
                }
            }
        }
        return s.substring(startind, startind + max_len);
    }

    private int check(String s, int start, int end, int[][] dp) {
        if (start >= end)
            return 1;
        if (dp[start][end] != -1)
            return dp[start][end];
        if (s.charAt(start) == (s.charAt(end))) {
            return dp[start][end] = check(s, start + 1, end - 1, dp);
        }
        return dp[start][end] = 0;
    }
}
