class Solution {

    public String longestPalindrome(String s) {
        int n = s.length();
        int max = 0;
        int start = 0, end = 1;
        int current = 0;
        int j = 0, k = 1;
        for (int i = 0; i < n - 1; i++) {
            if (s.charAt(i) == s.charAt(i + 1)) {
                k = current == 0 ? i : k;
                current++;
                if (current > max) {
                    start = k;
                    end = i + 2;
                    max = current;
                }
                continue;
            }
            j = 1;
            while (i != 0 && i + j < n && j <= k) {
                if (s.charAt(k - j) == s.charAt(i + j)) {
                    current += 2;
                    if ((j == k || i + j == n - 1) && current > max) {
                        start = k - j;
                        end = i + j + 1;
                        max = current;
                    }
                } else {
                    if (current > max) {
                        start = k - j + 1;
                        end = i + j;
                        max = current;
                    }
                    current = 0;
                    break;
                }
                j++;
            }
            k = i + 1;
            current = 0;
        }
        // Extract the substring
        String substring = s.substring(start, end);
        return substring;
    }
}
