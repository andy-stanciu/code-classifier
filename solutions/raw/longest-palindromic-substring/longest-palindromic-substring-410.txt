class Solution {

    public String longestPalindrome(String str) {
        if (str == null || str.length() == 0) {
            return "";
        }
        String longestPalindrome = str.substring(0, 1);
        int n = str.length();
        for (int i = 0; i < str.length(); i++) {
            String oddLengthPalindrome = intermediatePalindrome(str, i, i);
            String evenLengthPalindrome = intermediatePalindrome(str, i, i + 1);
            // Check odd length palindrome
            if (oddLengthPalindrome.length() > longestPalindrome.length()) {
                longestPalindrome = oddLengthPalindrome;
            }
            // Check even length palindrome
            if (evenLengthPalindrome.length() > longestPalindrome.length()) {
                longestPalindrome = evenLengthPalindrome;
            }
        }
        return longestPalindrome;
    }

    private static String intermediatePalindrome(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return s.substring(left + 1, right);
    }
}
