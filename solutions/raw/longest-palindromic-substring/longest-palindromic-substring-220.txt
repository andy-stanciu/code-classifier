class Solution {

    public String longestPalindrome(String s) {
        String longest = "";
        int sLen = s.length();
        int longestLen = 0;
        int maxI = sLen;
        for (int i = 0; i < maxI; i++) {
            char c = s.charAt(i);
            int m = 0;
            int n = 0;
            //expand right to account for dupe\'d letters
            while (i + n + 1 < sLen) {
                if (c == s.charAt(i + n + 1)) {
                    n++;
                } else {
                    break;
                }
            }
            int dupeCount = n;
            //expand both directions
            while (i - m > 0 && i + n + 1 < sLen) {
                if (s.charAt(i - m - 1) == s.charAt(i + n + 1)) {
                    m++;
                    n++;
                } else {
                    break;
                }
            }
            int len = n + m + 1;
            if (len > longestLen) {
                longest = s.substring(i - m, i + n + 1);
                longestLen = len;
                //allow us to break early
                maxI = sLen - ((longestLen - dupeCount) / 2) - dupeCount;
            }
        }
        return longest;
    }
}
