class Solution {

    public String longestPalindrome(String s) {
        // 1. brute force -> find all substring check with each other, 2 for loop - O(n^3)
        // 2. optimize soln -> Expand From Centre ->
        // S = acvghgvpbab , center - vghgv , where h is center(left=right), can expand
        // bab -> can be expand
        // bab -> s,i,i
        // baab -> s,i,i+1
        int start = 0, end = 0;
        for (int i = 0; i < s.length(); i++) {
            // find two length
            int len1 = expandFromCentre(s, i, i + 1);
            int len2 = expandFromCentre(s, i, i);
            int len = Math.max(len1, len2);
            // now update length
            if (end - start < len) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        return s.substring(start, end + 1);
    }

    int expandFromCentre(String s, int i, int j) {
        while (i >= 0 && j < s.length() && s.charAt(i) == s.charAt(j)) {
            i--;
            j++;
        }
        return j - i - 1;
    }
}
