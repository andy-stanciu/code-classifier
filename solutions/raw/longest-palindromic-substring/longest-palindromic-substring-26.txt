class Solution {

    public String longestPalindrome(String s) {
        if (s.length() <= 1) {
            return s;
        }
        int startIndexOfPalindromeStr = 0;
        int endIndexOfPalindromeStr = 0;
        int maxLength = 0;
        for (int i = 0; i < s.length(); i++) {
            int start = i;
            int end = i;
            while (start >= 0 && end < s.length()) {
                if (s.charAt(start) == s.charAt(end)) {
                    start--;
                    end++;
                } else {
                    break;
                }
            }
            if (end - start - 1 > maxLength) {
                maxLength = end - start - 1;
                startIndexOfPalindromeStr = start + 1;
                endIndexOfPalindromeStr = end - 1;
            }
        }
        for (int i = 0; i < s.length(); i++) {
            int start = i;
            int end = i + 1;
            while (start >= 0 && end < s.length()) {
                if (s.charAt(start) == s.charAt(end)) {
                    start--;
                    end++;
                } else {
                    break;
                }
            }
            if (end - start - 1 > maxLength) {
                maxLength = end - start - 1;
                startIndexOfPalindromeStr = start + 1;
                endIndexOfPalindromeStr = end - 1;
            }
        }
        return s.substring(startIndexOfPalindromeStr, endIndexOfPalindromeStr + 1);
    }
}
