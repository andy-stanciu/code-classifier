class Solution {

    boolean isPalindrome(int start, int end, String s) {
        int n = end - start;
        int i = 0;
        for (int k = start; k <= end - ((end - start) / 2); k++) {
            if (s.charAt(k) != s.charAt(end - i)) {
                return false;
            }
            i++;
        }
        return true;
    }

    String BuildString(int i, int j, String s) {
        StringBuilder sb = new StringBuilder();
        for (int k = i; k <= j; k++) {
            sb.append(s.charAt(k));
        }
        return sb.toString();
    }

    int maxlen = 0;

    String ans = "";

    public String longestPalindrome(String s) {
        if (s.length() == 1) {
            return s;
        }
        for (int i = 0; i < s.length(); i++) {
            for (int j = i; j < s.length(); j++) {
                if (isPalindrome(i, j, s) == true) {
                    if (j - i + 1 > maxlen) {
                        maxlen = j - i + 1;
                        ans = BuildString(i, j, s);
                    }
                }
            }
        }
        return ans;
    }
}
