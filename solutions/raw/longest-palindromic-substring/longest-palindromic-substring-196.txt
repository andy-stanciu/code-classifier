class Solution {

    public String longestPalindrome(String s) {
        String st = "";
        int max = -1, n = s.length();
        for (int i = 0; i < s.length(); i++) {
            int l = i, r = n - 1, ref = 0, count = 0;
            while (l < r) {
                //ref holds the value of the index of the same char of i from right
                if (s.charAt(i) == s.charAt(r) && r > ref)
                    ref = r;
                //if any char doesn\'t match changing the values of l,ref,r
                if (ref != 0 && s.charAt(l) != s.charAt(r)) {
                    l = i;
                    r = ref - 1;
                    ref = 0;
                    count = 0;
                } else // iterating the l and r if char match
                if (s.charAt(l) == s.charAt(r)) {
                    l++;
                    r--;
                    count++;
                } else
                    //used for gwtting the rightmost same char as i
                    r--;
            }
            //checking is palindrome or not and length greater of string
            if (count == (ref - i + 1) / 2 && ref - i + 1 > max) {
                max = ref - i + 1;
                st = s.substring(i, ref + 1);
            }
        }
        return st;
    }
}
