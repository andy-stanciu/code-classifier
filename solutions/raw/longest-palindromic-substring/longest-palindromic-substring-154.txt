class Solution {

    public String longestPalindrome(String s) {
        if (isP(s))
            return s;
        Map<Character, List<Integer>> map = new HashMap<Character, List<Integer>>();
        String max = "" + s.charAt(0);
        for (int i = 0; i < s.length(); i++) {
            if (!map.containsKey(s.charAt(i))) {
                map.put(s.charAt(i), new ArrayList<Integer>(Arrays.asList(i)));
            } else {
                List<Integer> indices = map.get(s.charAt(i));
                for (int j = 0; j < indices.size() && i + 1 - indices.get(j) > max.length(); j++) {
                    if (isP(s.substring(indices.get(j), i + 1)))
                        max = s.substring(indices.get(j), i + 1);
                }
                indices.add(i);
                map.put(s.charAt(i), indices);
            }
        }
        return max;
    }

    public boolean isP(String s) {
        for (int i = 0; i < s.length() / 2; i++) {
            if (s.charAt(i) != s.charAt(s.length() - i - 1))
                return false;
        }
        return true;
    }
}
