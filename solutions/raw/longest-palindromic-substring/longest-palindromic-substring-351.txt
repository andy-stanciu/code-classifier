class Solution {

    int[][] dp;

    public String longestPalindrome(String s) {
        int n = s.length();
        dp = new int[n][n];
        for (int i = 0; i < n; i++) Arrays.fill(dp[i], -1);
        int max = -1;
        int str = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (check(s, i, j) && max < (j - i + 1)) {
                    max = j - i + 1;
                    str = i;
                }
            }
        }
        return s.substring(str, str + max);
    }

    boolean check(String s, int left, int right) {
        if (left >= right)
            return true;
        if (dp[left][right] != -1)
            return dp[left][right] == 1;
        if (s.charAt(left) == s.charAt(right))
            dp[left][right] = check(s, left + 1, right - 1) ? 1 : 0;
        else {
            dp[left][right] = 0;
        }
        return dp[left][right] == 1;
    }
}
