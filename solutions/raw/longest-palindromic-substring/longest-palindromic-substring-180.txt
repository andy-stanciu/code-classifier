class Solution {

    public String longestPalindrome(String s) {
        int len = s.length();
        int[][] dp = new int[len][len];
        String res = "";
        for (int i = 1; i <= len; i++) {
            int j = 0;
            while (j <= (len - i)) {
                String substring = s.substring(j, j + i);
                if (isPalindrome(dp, substring, j, (j + i) - 1)) {
                    res = substring;
                }
                j++;
            }
        }
        return res;
    }

    public boolean canItBePalindrome(String substring) {
        return substring.charAt(0) == substring.charAt(substring.length() - 1);
    }

    public boolean isPalindrome(int[][] dp, String substring, int i, int j) {
        if (canItBePalindrome(substring)) {
            if (j - i <= 1) {
                dp[i][j] = 1;
                return true;
            } else {
                if (dp[i + 1][j - 1] == 1) {
                    dp[i][j] = 1;
                    return true;
                }
            }
        }
        return false;
    }
}
