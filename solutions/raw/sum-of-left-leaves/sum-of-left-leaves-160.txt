/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int sum = 0;

    public int sumOfLeftLeaves(TreeNode root) {
        return recursive(root, false);
    }

    int recursive(TreeNode node, boolean isLeft) {
        if (node == null) {
            return 0;
        }
        int sum = 0;
        if (isLeft && node.left == null && node.right == null) {
            // Add to sum only if it\'s a left leaf
            sum += node.val;
            return sum;
        }
        // Recursively calculate sum of left leaves in left and right subtrees
        // Mark current node as left child
        sum += recursive(node.left, true);
        // Mark current node as right child
        sum += recursive(node.right, false);
        return sum;
    }
}
