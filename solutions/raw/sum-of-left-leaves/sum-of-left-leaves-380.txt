/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int findLeftLeaves(TreeNode root, int sum, boolean isLeftChild) {
        // Base case
        if (root == null)
            return sum;
        // Traverse left subtree
        sum = findLeftLeaves(root.left, sum, true);
        // If node is left leaf, add its value to sum
        if (root.left == null && root.right == null && isLeftChild)
            sum += root.val;
        // Traverse right subtree
        sum = findLeftLeaves(root.right, sum, false);
        // Return updated sum
        return sum;
    }

    public int sumOfLeftLeaves(TreeNode root) {
        return findLeftLeaves(root, 0, false);
    }
}
