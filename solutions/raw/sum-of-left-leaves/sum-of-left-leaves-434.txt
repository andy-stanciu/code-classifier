/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int sumOfLeftLeaves(TreeNode root) {
        if (root == null)
            return 0;
        Queue<TreeNode> queueLeft = new LinkedList<>();
        Queue<TreeNode> queueRight = new LinkedList<>();
        if (root.left != null)
            queueLeft.add(root.left);
        if (root.right != null)
            queueRight.add(root.right);
        int answer = 0;
        while (queueLeft.size() > 0 || queueRight.size() > 0) {
            int sizeLeft = queueLeft.size();
            int sizeRight = queueRight.size();
            for (int i = 0; i < sizeLeft; i++) {
                TreeNode node = queueLeft.poll();
                if (node.left == null && node.right == null)
                    answer += node.val;
                if (node.left != null)
                    queueLeft.add(node.left);
                if (node.right != null)
                    queueRight.add(node.right);
            }
            for (int i = 0; i < sizeRight; i++) {
                TreeNode node = queueRight.poll();
                if (node.left != null)
                    queueLeft.add(node.left);
                if (node.right != null)
                    queueRight.add(node.right);
            }
        }
        return answer;
    }
}
