/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int sumOfLeftLeaves(TreeNode root) {
        if (root == null)
            return 0;
        int ans = 0;
        Queue<Pair<TreeNode, Boolean>> q = new LinkedList<>();
        q.offer(new Pair<>(root, false));
        while (!q.isEmpty()) {
            Pair<TreeNode, Boolean> curr = q.poll();
            TreeNode currNode = curr.getKey();
            boolean isLeft = curr.getValue();
            if (isLeft && currNode.right == null && currNode.left == null) {
                ans += currNode.val;
            }
            if (currNode.left != null)
                q.offer(new Pair<>(currNode.left, true));
            if (currNode.right != null)
                q.offer(new Pair<>(currNode.right, false));
        }
        return ans;
    }
}
