/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int sumOfLeftLeaves(TreeNode root) {
        int left = 0;
        int right = 0;
        int sum = 0;
        List<Integer> list = new ArrayList<>();
        if (root != null) {
            left = leftTravese(root, list);
            right = rightTravese(root, list);
            int size = list.size();
            if (size > 0) {
                for (int elem : list) {
                    sum = sum + elem;
                }
            } else {
                return 0;
            }
        }
        return sum;
    }

    int leftTravese(TreeNode root, List<Integer> list) {
        root = root.left;
        int left = 0;
        int right = 0;
        int val = -1001;
        if (root != null) {
            val = root.val;
            left = leftTravese(root, list);
            right = rightTravese(root, list);
            if (left == -1001 && right == -1001)
                list.add(root.val);
        }
        return val;
    }

    int rightTravese(TreeNode root, List<Integer> list) {
        root = root.right;
        int left = 0;
        int right = 0;
        int val = -1001;
        if (root != null) {
            val = root.val;
            left = leftTravese(root, list);
            right = rightTravese(root, list);
        }
        return val;
    }
}
