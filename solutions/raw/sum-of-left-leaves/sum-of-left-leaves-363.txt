/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int sumOfLeftLeaves(TreeNode root) {
        //Base condition for the recursive DFS approach
        if (root == null) {
            return 0;
        }
        //if the left node of root is not null and check for the next node left and right node if its null , take the value and add it
        if (root.left != null && root.left.left == null && root.left.right == null) {
            return root.left.val + sumOfLeftLeaves(root.right);
        }
        //proceed till the end of the tree
        return sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right);
    }
}
