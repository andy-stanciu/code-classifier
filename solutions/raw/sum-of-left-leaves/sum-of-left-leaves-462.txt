/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int sumOfLeftLeaves(TreeNode root) {
        if (root == null) {
            return 0;
        }
        // Check if the left child of the current node is a leaf
        if (isLeaf(root.left)) {
            // If it is, add its value to the sum
            return root.left.val + sumOfLeftLeaves(root.right);
        } else {
            // If not, recursively search for left leaves in both subtrees
            return sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right);
        }
    }

    private boolean isLeaf(TreeNode node) {
        // Check if a node is a leaf (has no children)
        return node != null && node.left == null && node.right == null;
    }
}
