/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int sumOfLeftLeaves(TreeNode root) {
        return leftSumTraverse(root, false);
    }

    private int leftSumTraverse(TreeNode node, boolean left) {
        // if the node is leaf and left node of parent then return
        //its value
        if (node.left == null && node.right == null && left) {
            return node.val;
        }
        int leftSum = 0;
        int rightSum = 0;
        //if there is a left node
        if (node.left != null) {
            leftSum = leftSumTraverse(node.left, true);
        }
        //if ther is a right node
        if (node.right != null) {
            rightSum = leftSumTraverse(node.right, false);
        }
        return leftSum + rightSum;
    }
}
