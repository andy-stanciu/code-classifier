class Solution {

    public int findMin(int[] nums) {
        int start = 0;
        int end = nums.length - 1;
        while (start < end) {
            int mid = start + (end - start) / 2;
            // If mid element is greater than end element, minimum must be in the right half
            if (nums[mid] > nums[end]) {
                start = mid + 1;
            } else // If mid element is less than or equal to end element, minimum is in the left half
            if (nums[mid] < nums[end]) {
                end = mid;
            } else // If start, mid, and end are equal, we need to reduce the search space
            {
                end--;
            }
        }
        return nums[start];
    }
}
