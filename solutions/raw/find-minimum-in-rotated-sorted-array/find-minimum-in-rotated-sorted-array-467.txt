class Solution {

    public int findMin(int[] nums) {
        int pivot = findP(nums);
        if (pivot == -1) {
            return nums[0];
        }
        if (nums[pivot] > nums[pivot + 1]) {
            return nums[pivot + 1];
        }
        if (pivot == nums.length - 1) {
            return nums[0];
        }
        return -1;
    }

    public int findP(int[] nums) {
        int start = 0;
        int end = nums.length - 1;
        while (start < end) {
            int midl = start + (end - start) / 2;
            if (midl < end && nums[midl] > nums[midl + 1]) {
                return midl;
            }
            if (midl > 0 && nums[midl] < nums[midl - 1]) {
                return midl - 1;
            }
            if (nums.length == 1) {
                return 0;
            }
            if (nums[midl] == nums[end] && nums[midl] == nums[start]) {
                if (nums[start] > nums[start + 1]) {
                    return start;
                }
                start++;
                if (nums[end - 1] > nums[end] && nums.length > 1) {
                    return end - 1;
                }
                end--;
            } else if (nums[midl] == nums[start] && nums[midl] > nums[end] || nums[start] < nums[midl]) {
                start = midl + 1;
            } else {
                end = midl - 1;
            }
        }
        return -1;
    }
}
