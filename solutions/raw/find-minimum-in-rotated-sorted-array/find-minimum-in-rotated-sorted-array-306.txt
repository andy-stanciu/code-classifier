class Solution {

    public int findMin(int[] nums) {
        if (nums.length == 0)
            return 0;
        if (nums.length == 1)
            return nums[0];
        if (nums.length == 2)
            return Math.min(nums[0], nums[1]);
        if (nums.length == 3) {
            int min1 = Math.min(nums[0], nums[1]);
            return Math.min(min1, nums[2]);
        }
        int min = 5000;
        int i = 0;
        int left = 0;
        int right = nums.length - 1;
        int mid = (0 + nums.length - 1) / 2;
        if (nums[mid] > nums[right]) {
            while (left != right) {
                left = (mid + 1);
                mid += 1;
                int min1 = Math.min(nums[left], nums[right]);
                min = Math.min(min, min1);
            }
            return min;
        } else if (nums[mid] > nums[left]) {
            while (left != right) {
                right = (mid - 1);
                mid -= 1;
                int min1 = Math.min(nums[left], nums[right]);
                min = Math.min(min, min1);
            }
            return min;
        } else {
            while (left != mid) {
                int min1 = Math.min(nums[left], nums[mid]);
                min = Math.min(min, min1);
                mid -= 1;
            }
            return min;
        }
    }
}
