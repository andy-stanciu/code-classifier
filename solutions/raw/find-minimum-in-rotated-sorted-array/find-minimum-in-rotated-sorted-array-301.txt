class Solution {

    public int findMin(int[] nums) {
        int n = nums.length;
        int min = Integer.MAX_VALUE;
        int low = 0;
        int high = n - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            // if it contains dulplicate elements ...
            if (nums[low] == nums[mid] && nums[mid] == nums[high]) {
                min = Math.min(min, nums[low]);
                low++;
                high--;
                continue;
            }
            // if is divided in two halfs both are sorted then  do this condition
            if (nums[low] <= nums[high]) {
                min = Math.min(min, nums[low]);
                break;
            }
            // After breaking array in two parts checking btw low and mid
            if (nums[low] <= nums[mid]) {
                min = Math.min(min, nums[low]);
                low = mid + 1;
            } else // After breaking array in two parts checking btw mid and high
            {
                min = Math.min(min, nums[mid]);
                high = mid - 1;
            }
        }
        return min;
    }
}
