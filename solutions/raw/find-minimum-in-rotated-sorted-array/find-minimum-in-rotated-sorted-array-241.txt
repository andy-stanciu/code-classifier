class Solution {

    public int findMin(int[] nums) {
        // Initialize the starting index
        int low = 0;
        // Initialize the ending index
        int high = nums.length - 1;
        // If the array is not rotated (i.e., it\'s already sorted),  return the first element
        if (nums[low] < nums[high]) {
            return nums[low];
        }
        // Perform binary search to find the minimum element
        while (low < high) {
            int mid = low + (high - low) / 2;
            // If the middle element is greater than the last element,
            // it means the minimum element is in the right half.
            if (nums[mid] > nums[high]) {
                // Move the low pointer to the right half
                low = mid + 1;
            } else // Otherwise, the minimum element is in the left half (including mid).
            {
                // Narrow down the search to the left half (mid is included)
                high = mid;
            }
        }
        // After the loop, low and high will converge at the index of the minimum element
        return nums[low];
    }
}
