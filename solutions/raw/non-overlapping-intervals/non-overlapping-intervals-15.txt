class Solution {

    public int eraseOverlapIntervals(int[][] intervals) {
        List<Interval> intervalList = Arrays.stream(intervals).map(interval -> new Interval(interval[0], interval[1])).collect(Collectors.<Interval>toList());
        Interval interval = new Interval(Integer.MIN_VALUE, Integer.MIN_VALUE);
        while (interval != null) {
            interval = findSmallestInterval(interval, intervalList);
            intervalList.remove(interval);
        }
        return intervalList.size();
    }

    private Interval findSmallestInterval(Interval prevInterval, List<Interval> intervals) {
        return intervals.stream().filter(interval -> {
            if (prevInterval != null)
                return prevInterval.getEnd() <= interval.getStart();
            else
                return true;
        }).min(Comparator.comparingInt(Interval::getEnd)).orElse(null);
    }

    private class Interval {

        private final Integer start;

        private final Integer end;

        @Override
        public boolean equals(Object o) {
            if (this == o)
                return true;
            if (o == null || getClass() != o.getClass())
                return false;
            Interval interval = (Interval) o;
            return start.equals(interval.start) && end.equals(interval.end);
        }

        @Override
        public int hashCode() {
            return Objects.hash(start, end);
        }

        public Interval(Integer start, Integer end) {
            this.start = start;
            this.end = end;
        }

        public Integer getStart() {
            return start;
        }

        public Integer getEnd() {
            return end;
        }
    }
}
/**
 * 11111
 *  22
 *   3333333333
 *      44
 *        55
 *
 * \u0427\u0442\u043E \u0434\u0435\u043B\u0430\u0435\u043C:
 * 1. \u041D\u0430\u0445\u043E\u0434\u0438\u043C \u043A\u043E\u043D\u0435\u0446 \u0438\u043D\u0442\u0435\u0440\u0432\u0430\u043B\u0430, \u043A\u043E\u0442\u043E\u0440\u044B\u0439 \u0431\u043B\u0438\u0436\u0435 \u043A \u043D\u0430\u0447\u0430\u043B\u0443
 * 2. \u0421\u0440\u0435\u0434\u0438 \u043E\u0441\u0442\u0430\u0432\u0448\u0438\u0445\u0441\u044F \u0438\u043D\u0442\u0435\u0440\u0432\u0430\u043B\u043E\u0432 \u0432\u044B\u0431\u0438\u0440\u0430\u0435\u043C \u0442\u0430\u043A\u043E\u0439 \u0436\u0435 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439
 * 3. \u041A\u043E\u0433\u0434\u0430 \u0437\u0430\u043A\u043E\u043D\u0447\u0438\u043B\u0438\u0441\u044C \u0438\u043D\u0442\u0435\u0440\u0432\u0430\u043B\u044B, \u0441\u0447\u0438\u0442\u0430\u0435\u043C \u0441\u043A\u043E\u043B\u044C\u043A\u043E \u043D\u0435 \u043F\u043E\u043F\u0430\u043B\u0438
 */
