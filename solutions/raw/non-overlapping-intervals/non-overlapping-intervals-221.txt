//Sort based on End
class Solution {

    //nlogn + n ~ nlogn and SC  -O(1)
    public int eraseOverlapIntervals(int[][] intervals) {
        //nlogn
        Arrays.sort(intervals, (x, y) -> x[1] - y[1]);
        int count = 0;
        int prevEnd = intervals[0][1];
        for (int i = 1; i < intervals.length; i++) {
            // n times
            int[] next = intervals[i];
            if (next[0] < prevEnd) {
                count++;
            } else {
                prevEnd = next[1];
            }
        }
        return count;
    }
}

//Sort based on Start
class Solution {

    //nlogn + n ~ nlogn
    public int eraseOverlapIntervals(int[][] intervals) {
        //Sort based on start
        //nlogn
        Arrays.sort(intervals, (x, y) -> x[0] - y[0]);
        int count = 0;
        int prevEnd = intervals[0][1];
        for (int i = 1; i < intervals.length; i++) {
            // n times
            int[] next = intervals[i];
            if (next[0] < prevEnd) {
                count++;
                prevEnd = Math.min(next[1], prevEnd);
            } else {
                prevEnd = next[1];
            }
        }
        return count;
    }
}
