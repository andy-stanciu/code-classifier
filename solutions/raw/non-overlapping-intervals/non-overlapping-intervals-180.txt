class Solution {

    public int eraseOverlapIntervals(int[][] intervals) {
        return intervals.length - intervalSchedule(intervals);
    }

    //\u533A\u95F4\u8C03\u5EA6\u95EE\u9898 - \u8BA1\u7B97\u51FA\u4E0D\u76F8\u4EA4\u7684\u533A\u95F4\u4E2A\u6570
    private static int intervalSchedule(int[][] intervals) {
        //\u6839\u636Eend\u8FDB\u884C\u5347\u5E8F\u6392\u5E8F
        Arrays.sort(intervals, new Comparator<int[]>() {

            public int compare(int[] a, int[] b) {
                return a[1] - b[1];
            }
        });
        // \u62FF\u5230\u6700\u5C0Fend\u533A\u95F4\u7684\u6700\u5C0Fend
        int x_end = intervals[0][1];
        //\u8BA1\u7B97\u7684\u662F\u4E0D\u76F8\u4EA4\u7684\u533A\u95F4\u4E2A\u6570\uFF0C\u5373\u4F7F\u5168\u76F8\u4EA4\uFF0C\u90A3\u4E5F\u6709\u4E00\u4E2A\u4E0D\u76F8\u4EA4\uFF0C\u81F3\u5C11\u5C31\u4E00\u4E2A
        int count = 1;
        for (int i = 1; i < intervals.length; i++) {
            if (x_end <= intervals[i][0]) {
                count++;
                x_end = intervals[i][1];
            }
        }
        return count;
    }
}
