class Solution {

    public int eraseOverlapIntervals(int[][] intervals) {
        // sort by end of an interval [start, end]
        Arrays.sort(intervals, (i, j) -> i[1] - j[1]);
        int n = intervals.length;
        // count for the largest number of non-overlapping intervals
        // initilize count=1, as an arbitrary individual interval is non-overlapping itself
        int count = 1;
        // as we have sort the arrays by end, the intervals[0] is x, which has the smallest end
        int x_end = intervals[0][1];
        for (int[] i : intervals) {
            // check if current interval will overlap with x
            int start = i[0];
            if (start >= x_end) {
                // next interval x found
                // previous end equals current start is not overlap in this case
                x_end = i[1];
                count++;
            }
        }
        // since count is the largest number of non-overlapping intervals
        // n-count is the number of intervals we should remove from original intervals array
        return n - count;
    }
}
