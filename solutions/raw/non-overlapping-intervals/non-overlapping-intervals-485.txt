class Solution {

    public int eraseOverlapIntervals(int[][] intervals) {
        int intervalLen = intervals.length;
        if (intervals == null || intervalLen == 0) {
            return 0;
        }
        List<Interval> intervalList = new ArrayList<>();
        for (int i = 0; i < intervalLen; i++) {
            intervalList.add(new Interval(intervals[i][0], intervals[i][1]));
        }
        Collections.sort(intervalList, (firstInterval, secondInterval) -> firstInterval.start - secondInterval.start);
        int endTime = intervalList.get(0).end;
        int removedIntervalCount = 0;
        for (int i = 1; i < intervalLen; i++) {
            Interval currentInterval = intervalList.get(i);
            if (currentInterval.start >= endTime) {
                endTime = currentInterval.end;
            } else {
                removedIntervalCount = removedIntervalCount + 1;
                endTime = Math.min(endTime, currentInterval.end);
            }
        }
        return removedIntervalCount;
    }

    static class Interval {

        int start;

        int end;

        public Interval(int start, int end) {
            this.start = start;
            this.end = end;
        }
    }
}
