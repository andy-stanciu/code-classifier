class Solution {

    private void swap(int i, int j, int[] nums) {
        int t = nums[i];
        nums[i] = nums[j];
        nums[j] = t;
    }

    // using Extra Array Freq[]
    // private void recur(int[] nums,List<List<Integer>> ans,List<Integer> ds,boolean[] freq){
    //     if(ds.size() == nums.length){
    //         ans.add(new ArrayList<>(ds));
    //         return;
    //     }
    //     for(int i=0;i<nums.length;i++){
    //         if(!freq[i]){
    //             freq[i] = true;
    //             ds.add(nums[i]);
    //             recur(nums,ans,ds,freq);
    //             ds.remove(ds.size()-1);
    //             freq[i] = false;
    //         }
    //     }
    // }
    // without using extra array
    public void recur(int ind, int[] nums, List<List<Integer>> ans) {
        if (ind == nums.length) {
            List<Integer> ds = new ArrayList<>();
            for (int i = 0; i < nums.length; i++) {
                ds.add(nums[i]);
            }
            ans.add(new ArrayList<>(ds));
            return;
        }
        for (int i = ind; i < nums.length; i++) {
            swap(ind, i, nums);
            recur(ind + 1, nums, ans);
            swap(ind, i, nums);
        }
    }

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        // List<Integer> ds = new ArrayList<>();
        // boolean[] freq = new boolean[nums.length];
        // recur(nums,ans,ds,freq);
        recur(0, nums, ans);
        return ans;
    }
}
