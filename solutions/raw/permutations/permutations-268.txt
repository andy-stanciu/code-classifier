class Solution {

    public static void swap(int[] nums, int idx1, int idx2) {
        int temp = nums[idx1];
        nums[idx1] = nums[idx2];
        nums[idx2] = temp;
    }

    public static void helper(List<List<Integer>> ans, int[] nums, int index) {
        // base case:
        if (index == nums.length - 1) {
            List<Integer> list = new ArrayList<>();
            for (int num : nums) {
                list.add(num);
            }
            ans.add(list);
        } else {
            for (int i = index; i < nums.length; i++) {
                // current considered valu will be at start of the array
                swap(nums, i, index);
                // calling the recursive function for subarray
                helper(ans, nums, index + 1);
                // backtracking
                swap(nums, i, index);
            }
        }
    }

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        helper(ans, nums, 0);
        return ans;
    }
}
