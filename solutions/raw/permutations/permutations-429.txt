class Solution {

    int n;

    List<List<Integer>> res = new ArrayList<>();

    public List<List<Integer>> permute(int[] nums) {
        n = nums.length;
        backtracker(0, nums);
        return res;
    }

    public void backtracker(int index, int[] nums) {
        if (n <= index) {
            List<Integer> permutation = new ArrayList<>();
            for (int num : nums) {
                permutation.add(num);
            }
            res.add(permutation);
            return;
        }
        for (int i = index; i < n; i++) {
            swap(nums, i, index);
            backtracker(index + 1, nums);
            swap(nums, i, index);
        }
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
