class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> permutation = new ArrayList<>();
        boolean[] check = new boolean[nums.length];
        return recursive(nums, permutation, ans, check);
    }

    public List<List<Integer>> recursive(int[] nums, List<Integer> permutation, List<List<Integer>> ans, boolean[] check) {
        if (permutation.size() == nums.length) {
            ans.add(new ArrayList<>(permutation));
            return ans;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!check[i]) {
                permutation.add(nums[i]);
                check[i] = true;
                recursive(nums, permutation, ans, check);
                permutation.remove(permutation.size() - 1);
                check[i] = false;
            }
        }
        return ans;
    }
}
