class Solution {

    private List<List<Integer>> result = new ArrayList<>();

    private List<Integer> permutation = new ArrayList<>();

    private boolean[] used;

    private int[] nums;

    public List<List<Integer>> permute(int[] arr) {
        nums = arr;
        used = new boolean[arr.length];
        generatePermutations();
        return result;
    }

    private void generatePermutations() {
        if (permutation.size() == nums.length) {
            result.add(new ArrayList<>(permutation));
            return;
        }
        for (int ctr = 0; ctr < nums.length; ctr++) {
            if (!used[ctr]) {
                used[ctr] = true;
                permutation.add(nums[ctr]);
                generatePermutations();
                permutation.remove(permutation.size() - 1);
                used[ctr] = false;
            }
        }
    }
}
