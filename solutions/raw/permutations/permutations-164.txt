class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> permutations = new ArrayList();
        List<Integer> permutation = new ArrayList();
        solve(nums, permutation, permutations, new HashSet<>());
        return permutations;
    }

    public void solve(int[] nums, List<Integer> permutation, List<List<Integer>> permutations, HashSet<Integer> set) {
        if (permutation.size() == nums.length) {
            permutations.add(new ArrayList<>(permutation));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!set.contains(nums[i])) {
                permutation.add(nums[i]);
                set.add(nums[i]);
                solve(nums, permutation, permutations, set);
                permutation.remove(permutation.size() - 1);
                set.remove(nums[i]);
            }
        }
    }
}
