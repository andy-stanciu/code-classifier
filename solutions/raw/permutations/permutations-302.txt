class Solution {

    public List<List<Integer>> permute(int[] nums) {
        boolean[] isIncluded = new boolean[nums.length];
        List<List<Integer>> res = new ArrayList<>();
        getPermutations(nums, res, new ArrayList<>(), isIncluded);
        return res;
    }

    public void getPermutations(int[] nums, List<List<Integer>> res, List<Integer> temp, boolean[] isIncluded) {
        if (temp.size() == nums.length) {
            res.add(new ArrayList<>(temp));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!isIncluded[i]) {
                temp.add(nums[i]);
                isIncluded[i] = true;
                getPermutations(nums, res, temp, isIncluded);
                temp.remove(temp.size() - 1);
                isIncluded[i] = false;
            }
        }
    }
}
