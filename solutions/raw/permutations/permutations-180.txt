class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        backtrack(result, path, nums);
        return result;
    }

    private void backtrack(List<List<Integer>> result, List<Integer> path, int[] nums) {
        // Base case: if the path size is equal to nums length, we\'ve found a permutation
        if (path.size() == nums.length) {
            result.add(new ArrayList<>(path));
            return;
        }
        // Explore each number in nums
        for (int i = 0; i < nums.length; i++) {
            // Skip if the number is already in the current path
            if (path.contains(nums[i])) {
                continue;
            }
            // Include the number in the current path
            path.add(nums[i]);
            // Recur to explore further
            backtrack(result, path, nums);
            // Backtrack: remove the number from the current path
            path.remove(path.size() - 1);
        }
    }
}
