class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new LinkedList<>();
        backtrack(nums, new ArrayList<>(), ans);
        return ans;
    }

    private void backtrack(int[] nums, List<Integer> path, List<List<Integer>> ans) {
        if (path.size() == nums.length) {
            // Add a copy of the current path to the result list
            ans.add(new ArrayList<>(path));
            return;
        }
        for (int num : nums) {
            // Skip already used numbers
            if (path.contains(num))
                continue;
            // Choose the current number
            path.add(num);
            // Explore further with the current choice
            backtrack(nums, path, ans);
            // Undo the choice (backtrack)
            path.remove(path.size() - 1);
        }
    }
}
