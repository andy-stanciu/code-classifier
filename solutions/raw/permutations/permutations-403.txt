class Solution {

    public List<List<Integer>> permute(int[] nums) {
        //O(n.n!)- time complexity - n! for all permuntation of no and n for all numbers
        //o(n)- Space - extra space for res, list and recursion
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        backtrack(nums, res, list);
        return res;
    }

    private void backtrack(int[] nums, List<List<Integer>> res, List<Integer> list) {
        if (list.size() == nums.length) {
            res.add(new ArrayList<Integer>(list));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!list.contains(nums[i])) {
                //Pick up current index
                list.add(nums[i]);
                backtrack(nums, res, list);
                //Dont pick up the element
                list.remove(list.get(list.size() - 1));
            }
        }
    }
}
