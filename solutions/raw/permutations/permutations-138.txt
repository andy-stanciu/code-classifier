class Solution {

    public List<List<Integer>> permute(int[] nums) {
        // Lista para armazenar as permuta\xE7\xF5es
        List<List<Integer>> result = new ArrayList<>();
        // Iniciar o backtracking
        backtrack(result, new ArrayList<>(), nums);
        return result;
    }

    private void backtrack(List<List<Integer>> result, List<Integer> tempList, int[] nums) {
        if (tempList.size() == nums.length) {
            // Se a lista tempor\xE1ria tiver o mesmo tamanho do nums, temos uma permuta\xE7\xE3o completa
            // Adicionar a permuta\xE7\xE3o ao resultado
            result.add(new ArrayList<>(tempList));
        } else {
            for (int i = 0; i < nums.length; i++) {
                // Ignorar se o n\xFAmero j\xE1 est\xE1 na lista tempor\xE1ria
                if (tempList.contains(nums[i]))
                    continue;
                // Adicionar o n\xFAmero \xE0 lista tempor\xE1ria
                tempList.add(nums[i]);
                // Chamada recursiva
                backtrack(result, tempList, nums);
                // Remover o \xFAltimo elemento para voltar e tentar outra permuta\xE7\xE3o
                tempList.remove(tempList.size() - 1);
            }
        }
    }
}
