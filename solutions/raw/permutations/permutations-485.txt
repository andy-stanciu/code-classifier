class Solution {

    List<List<Integer>> retList;

    public void traverse(List<Integer> al, int size, int[] nums, int n) {
        if (size == n) {
            retList.add(al);
            return;
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] != -20) {
                List<Integer> tempAl = new ArrayList<>(al);
                tempAl.add(nums[i]);
                int temp = nums[i];
                nums[i] = -20;
                traverse(tempAl, size + 1, nums, n);
                nums[i] = temp;
            }
        }
    }

    public List<List<Integer>> permute(int[] nums) {
        retList = new ArrayList<>();
        int n = nums.length;
        for (int i = 0; i < nums.length; i++) {
            List<Integer> al = new ArrayList<>();
            al.add(nums[i]);
            int temp = nums[i];
            nums[i] = -20;
            traverse(al, 1, nums, n);
            nums[i] = temp;
        }
        return retList;
    }
}
