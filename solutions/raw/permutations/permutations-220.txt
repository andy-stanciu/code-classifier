class Solution {

    public static void swap(int[] nums, int idx1, int idx2) {
        int temp = nums[idx1];
        nums[idx1] = nums[idx2];
        nums[idx2] = temp;
    }

    public static void helper(int[] nums, List<List<Integer>> result, int startIdx) {
        if (startIdx == nums.length) {
            List<Integer> combination = new ArrayList<>();
            for (int i = 0; i < nums.length; i++) {
                combination.add(nums[i]);
            }
            result.add(combination);
        }
        for (int i = startIdx; i < nums.length; i++) {
            swap(nums, startIdx, i);
            helper(nums, result, startIdx + 1);
            swap(nums, startIdx, i);
        }
    }

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums.length == 0) {
            return result;
        }
        if (nums.length == 1) {
            List<Integer> combination = new ArrayList<>();
            combination.add(nums[0]);
            result.add(combination);
            return result;
        }
        helper(nums, result, 0);
        return result;
    }
}
