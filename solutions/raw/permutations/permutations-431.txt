class Solution {

    public List<List<Integer>> permute(int[] A) {
        //we will first consider a result list to store all our permutations
        List<List<Integer>> resultList = new ArrayList<>();
        //we are calling out backtracking method to generate our templists
        backtracking(A, resultList, new ArrayList<>());
        return resultList;
    }

    //we will create a backtracking method where we can call it to generate our lists
    public void backtracking(int[] A, List<List<Integer>> resultList, List<Integer> Templist) {
        //this is our base condition where the templists size becomes equal to the input array size
        if (Templist.size() == A.length) {
            //we will add the templists to our result list and then return
            resultList.add(new ArrayList<>(Templist));
            return;
        }
        //we will iterate through the array and generate our templist
        for (int n : A) {
            if (Templist.contains(n)) {
                continue;
            }
            //in each of our iteration, we will add, backtrack to the next element and then remove the current element
            Templist.add(n);
            backtracking(A, resultList, Templist);
            //we are removing the first element before adding the next
            Templist.remove(Templist.size() - 1);
            //to get this right, we will not be choosing the same element when we iterate the next time
            //so we put a base condition at the beginning that if the templist has the element, we will skip it
            //we will also put a condition to stop when the templists get the size of the input array at the
            //beginning
        }
    }
}
