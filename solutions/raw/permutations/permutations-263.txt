class Solution {

    //Without extra space , using swap
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        permuteArray(0, nums, ans);
        return ans;
    }

    public void permuteArray(int ind, int[] nums, List<List<Integer>> ans) {
        int n = nums.length;
        if (ind == n) {
            List<Integer> ds = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                ds.add(nums[i]);
            }
            ans.add(new ArrayList<>(ds));
            return;
        }
        for (int i = ind; i < n; i++) {
            swap(i, ind, nums);
            permuteArray(ind + 1, nums, ans);
            swap(i, ind, nums);
        }
    }

    public void swap(int i, int j, int[] nums) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    //Solution 2
    // public List<List<Integer>> permute(int[] nums) {
    //     List<List<Integer>> ans=new ArrayList<>();
    //     ArrayList<Integer> ds=new ArrayList<>();
    //     boolean flag[]=new boolean[nums.length];
    //     permute(nums,ans,ds,flag);
    //     return ans;
    // }
    // public void permute(int nums[], List<List<Integer>> ans, ArrayList<Integer> ds, boolean flag[]){
    //     if(ds.size()==nums.length){
    //         ans.add(new ArrayList<>(ds));
    //         return;
    //     }
    //     for(int i=0;i<nums.length;i++){
    //         if(!flag[i]){
    //             ds.add(nums[i]);
    //             flag[i]=true;
    //             permute(nums,ans,ds,flag);
    //             flag[i]=false;
    //             ds.remove(ds.size()-1);
    //         }
    //     }
    // }
}
