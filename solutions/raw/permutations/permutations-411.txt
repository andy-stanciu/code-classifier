class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> output = new ArrayList<>();
        permutation(nums, 0, ans, output);
        return ans;
    }

    public void permutation(int[] nums, int i, List<List<Integer>> ans, List<Integer> output) {
        if (i >= nums.length) {
            ans.add(new ArrayList(output));
            return;
        }
        for (int j = i; j < nums.length; j++) {
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
            output.add(nums[i]);
            // recursive call
            permutation(nums, i + 1, ans, output);
            output.remove(output.size() - 1);
            // backtrack
            int rev = nums[i];
            nums[i] = nums[j];
            nums[j] = rev;
        }
    }
}
