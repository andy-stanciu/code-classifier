class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        boolean[] isMapped = new boolean[nums.length];
        getAllPermutation(nums, ans, isMapped, new ArrayList<>());
        return ans;
    }

    private void getAllPermutation(int[] num, List<List<Integer>> ans, boolean[] isMapped, List<Integer> ds) {
        if (ds.size() == num.length) {
            ans.add(new ArrayList<>(ds));
            return;
        }
        for (int i = 0; i < num.length; i++) {
            if (!isMapped[i]) {
                isMapped[i] = true;
                ds.add(num[i]);
                getAllPermutation(num, ans, isMapped, ds);
                ds.remove(ds.size() - 1);
                isMapped[i] = false;
            }
        }
    }
}
