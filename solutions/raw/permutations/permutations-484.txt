class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> subset = new ArrayList<>();
        boolean[] vis = new boolean[nums.length];
        sub(nums, ans, subset, vis);
        return ans;
    }

    public void sub(int[] nums, List<List<Integer>> ans, List<Integer> subset, boolean[] vis) {
        if (subset.size() == nums.length) {
            ans.add(new ArrayList<>(subset));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!vis[i]) {
                vis[i] = true;
                subset.add(nums[i]);
                sub(nums, ans, subset, vis);
                subset.remove(subset.size() - 1);
                vis[i] = false;
            }
        }
    }
}
