// class Solution {
//     private void recurPermute(int index, int[] nums, List < List < Integer >> ans) {
//         if (index == nums.length) {
//             // copy the ds to ans
//             List < Integer > ds = new ArrayList < > ();
//             for (int i = 0; i < nums.length; i++) {
//                 ds.add(nums[i]);
//             }
//             ans.add(new ArrayList < > (ds));
//             return;
//         }
//         for (int i = index; i < nums.length; i++) {
//             swap(i, index, nums);
//             recurPermute(index + 1, nums, ans);
//             swap(i, index, nums);
//         }
//     }
//     private void swap(int i, int j, int[] nums) {
//         int t = nums[i];
//         nums[i] = nums[j];
//         nums[j] = t;
//     }
//     public List < List < Integer >> permute(int[] nums) {
//         List < List < Integer >> ans = new ArrayList < > ();
//         recurPermute(0, nums, ans);
//         return ans;
//     }
// }
class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        // Base case
        if (nums.length == 0)
            return ans;
        List<Integer> first = new ArrayList<>();
        first.add(nums[0]);
        ans.add(new ArrayList<>(first));
        for (int i = 1; i < nums.length; i++) {
            List<List<Integer>> newAns = new ArrayList<>();
            for (List<Integer> perm : ans) {
                for (int j = 0; j <= perm.size(); j++) {
                    List<Integer> permCopy = new ArrayList<>(perm);
                    permCopy.add(j, nums[i]);
                    newAns.add(permCopy);
                }
            }
            ans = newAns;
        }
        return ans;
    }
}
