class Solution {

    //swap function
    static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    static void getPermutations(int idx, int[] nums, List<List<Integer>> res) {
        // Base case: if the current permutation is the same length as nums,
        if (idx == nums.length) {
            //create a list to store the current permutation
            List<Integer> currPermu = new ArrayList<>();
            for (int i = 0; i < nums.length; i++) {
                currPermu.add(nums[i]);
            }
            //add the current permutation to the results
            res.add(new ArrayList<>(currPermu));
            return;
        }
        // Iterate through the numbers
        for (int i = idx; i < nums.length; i++) {
            //swap the current index with the iteration index
            swap(nums, idx, i);
            //Recursively generate permutations wtih the next index
            getPermutations(idx + 1, nums, res);
            //Backtrack:swap back to restore the original array
            swap(nums, idx, i);
        }
    }

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        // generate permutations starting with an empty list
        getPermutations(0, nums, res);
        return res;
    }
}
