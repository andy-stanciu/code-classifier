class Solution {

    List<List<Integer>> result;

    public List<List<Integer>> permute(int[] nums) {
        result = new ArrayList<>();
        permute(nums, nums.length, 0);
        return result;
    }

    public void permute(int[] nums, int N, int currentIndex) {
        if (currentIndex == N - 1) {
            List<Integer> permutation = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                permutation.add(nums[i]);
            }
            result.add(permutation);
            return;
        }
        for (int nextIndex = currentIndex; nextIndex < N; nextIndex++) {
            swap(nums, currentIndex, nextIndex);
            permute(nums, N, currentIndex + 1);
            swap(nums, currentIndex, nextIndex);
        }
    }

    private void swap(int[] nums, int first, int second) {
        int temp = nums[first];
        nums[first] = nums[second];
        nums[second] = temp;
    }
}
