class Solution {

    public void helper(int[] nums, List<Integer> empty, List<List<Integer>> ans, boolean[] isVisited) {
        if (empty.size() == nums.length) {
            List<Integer> list = new ArrayList<>();
            for (int i = 0; i < empty.size(); i++) {
                list.add(empty.get(i));
            }
            ans.add(list);
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (isVisited[i] == false) {
                empty.add(nums[i]);
                isVisited[i] = true;
                helper(nums, empty, ans, isVisited);
                isVisited[i] = false;
                empty.remove(empty.size() - 1);
            }
        }
    }

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        boolean[] isVisited = new boolean[nums.length];
        List<Integer> empty = new ArrayList<>();
        helper(nums, empty, ans, isVisited);
        return ans;
    }
}
