class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(nums, 0, result);
        return result;
    }

    private void backtrack(int[] nums, int start, List<List<Integer>> result) {
        // If we reach the end of the array, add the current permutation to the result list
        if (start == nums.length) {
            List<Integer> currentPermutation = new ArrayList<>();
            for (int num : nums) {
                currentPermutation.add(num);
            }
            result.add(currentPermutation);
            return;
        }
        // Try each possibility by swapping the current element with each other element
        for (int i = start; i < nums.length; i++) {
            // Swap the current element with element at index i
            swap(nums, start, i);
            // Recurse on the remaining elements
            backtrack(nums, start + 1, result);
            // Backtrack by undoing the swap
            swap(nums, start, i);
        }
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
