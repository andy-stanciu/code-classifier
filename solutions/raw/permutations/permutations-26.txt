class Solution {

    public List<List<Integer>> permute(int[] nums) {
        // Initialize the result list
        List<List<Integer>> result = new ArrayList<>();
        // Call the backtrack function to generate permutations
        backtrack(nums, 0, result);
        // Return the generated permutations
        return result;
    }

    // Backtracking function to generate permutations
    private void backtrack(int[] nums, int start, List<List<Integer>> result) {
        if (start == nums.length - 1) {
            // Check if the current index is at the last position
            // Create a new list for the permutation
            List<Integer> permutation = new ArrayList<>();
            for (int num : nums) {
                // Add each element of the array to the permutation list
                permutation.add(num);
            }
            // Add the permutation list to the result list
            result.add(permutation);
        } else {
            for (int i = start; i < nums.length; i++) {
                // Loop through the remaining elements
                // Swap the current element with the element at index i
                swap(nums, start, i);
                // Recursively call backtrack with the next index
                backtrack(nums, start + 1, result);
                // Swap the elements back to their original positions
                swap(nums, start, i);
            }
        }
    }

    // Utility function to swap two elements in the array
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
