class Solution {

    public List<List<Integer>> permute(int[] nums) {
        ArrayList<List<Integer>> result = new ArrayList<>();
        backtrack(result, nums, 0);
        return result;
    }

    private void backtrack(List<List<Integer>> result, int[] nums, int start) {
        if (start == nums.length) {
            // If we\'ve gone through all elements, add the current permutation
            List<Integer> currentPermutation = new ArrayList<>();
            for (int num : nums) {
                // Convert the array to a list
                currentPermutation.add(num);
            }
            result.add(currentPermutation);
        } else {
            for (int i = start; i < nums.length; i++) {
                // Swap the current element with the element at index i
                swap(nums, start, i);
                // Recurse for the next element
                backtrack(result, nums, start + 1);
                // Backtrack: undo the swap to try another permutation
                swap(nums, start, i);
            }
        }
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
