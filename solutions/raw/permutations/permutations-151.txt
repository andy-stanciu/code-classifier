class Solution {

    List<List<Integer>> res = new ArrayList<>();

    HashSet<Integer> set = new HashSet<>();

    public List<List<Integer>> permute(int[] nums) {
        choices(new ArrayList<>(), 0, nums);
        return res;
    }

    private void choices(ArrayList<Integer> temp, int index, int[] nums) {
        //base case:
        if (temp.size() == nums.length || index == nums.length) {
            res.add(new ArrayList<>(temp));
            return;
        }
        // if(index==nums.length)return;
        for (int i = 0; i < nums.length; i++) {
            if (!set.contains(nums[i])) {
                set.add(nums[i]);
                temp.add(nums[i]);
                choices(temp, index + 1, nums);
                temp.remove(temp.size() - 1);
                set.remove(nums[i]);
            } else {
                continue;
            }
        }
    }
}
