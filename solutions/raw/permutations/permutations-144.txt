class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<>(), nums);
        return result;
    }

    private void backtrack(List<List<Integer>> result, List<Integer> tempList, int[] nums) {
        if (tempList.size() == nums.length) {
            result.add(new ArrayList<>(tempList));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            // Skip duplicates
            if (tempList.contains(nums[i]))
                continue;
            //add a element
            tempList.add(nums[i]);
            //go back and try another element
            backtrack(result, tempList, nums);
            //remove an element
            // Backtrack
            tempList.remove(tempList.size() - 1);
        }
    }
}
