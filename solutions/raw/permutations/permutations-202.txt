class Solution {

    public static void find_permute(int[] ref, List<List<Integer>> res, int[] freq, List<Integer> lis1) {
        if (lis1.size() == ref.length) {
            res.add(new ArrayList<>(lis1));
            return;
        }
        for (// denotes position and choice
        // denotes position and choice
        // denotes position and choice
        int i = 0; i < ref.length; i++) {
            // note: this entire loop gets excecuted each time the rec is called
            if (freq[i] != 1) {
                freq[i] = 1;
                lis1.add(ref[i]);
                find_permute(ref, res, freq, lis1);
                // unmarking
                freq[i] = 0;
                // empty - so that it proceeds without matching the base case
                lis1.remove(lis1.size() - 1);
            }
        }
    }

    public List<List<Integer>> permute(int[] nums) {
        // for storing ans
        List<List<Integer>> res = new ArrayList<>();
        // frequency aray for marking
        int[] freq = new int[nums.length];
        // filled with 0
        Arrays.fill(freq, 0);
        // note: changes in void method reflects in ds
        // for temp storage
        List<Integer> temp = new ArrayList<>();
        find_permute(nums, res, freq, temp);
        return res;
    }
}
