class Solution {

    public List<List<Integer>> permute(int[] nums) {
        return perm(new ArrayList<>(), nums);
    }

    static List<List<Integer>> perm(List<Integer> p, int[] up) {
        if (up.length == 0) {
            List<List<Integer>> list = new ArrayList<>();
            list.add(new ArrayList<>(p));
            return list;
        }
        List<List<Integer>> ans = new ArrayList<>();
        for (int i = 0; i <= p.size(); i++) {
            List<Integer> f = new ArrayList<>(p.subList(0, i));
            List<Integer> s = new ArrayList<>(p.subList(i, p.size()));
            f.add(up[0]);
            f.addAll(s);
            int[] rem = Arrays.copyOfRange(up, 1, up.length);
            ans.addAll(perm(f, rem));
        }
        return ans;
    }
}
