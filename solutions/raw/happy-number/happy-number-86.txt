class Solution {

    static int sumOfSquares(int num) {
        int sum = 0;
        while (num > 0) {
            // Extract the last digit
            double last_diget = num % 10;
            // Add the square of the digit to the sum
            sum += Math.pow(last_diget, 2);
            // Remove the last digit
            num = Math.floorDiv(num, 10);
        }
        return sum;
    }

    public boolean isHappy(int n) {
        // Base case: 1 is a happy number
        if (n == 1)
            return true;
        // Initialize slow pointer with n
        int slow = n;
        // Initialize fast pointer with n
        int fast = n;
        while (true) {
            // Move slow pointer by one step and fast pointer by two steps
            slow = sumOfSquares(slow);
            fast = sumOfSquares(sumOfSquares(fast));
            // If the pointers meet, a cycle is detected
            if (slow == fast)
                break;
        }
        // If the cycle reaches 1, then n is a happy number
        return slow == 1;
    }
}
