class Solution {

    public boolean isHappy(int n) {
        int slow = n;
        int fast = n;
        // Use Floyd\'s Cycle Detection Algorithm
        do {
            // Move slow by 1 step
            slow = squareSum(slow);
            // Move fast by 2 steps
            fast = squareSum(squareSum(fast));
        } while (// If slow equals fast, a cycle is detected
        slow != fast);
        // If the fast pointer reaches 1, it\'s a happy number
        if (slow == 1) {
            return true;
        }
        // If slow == fast and it\'s not 1, then it\'s not a happy number
        return false;
    }

    // Helper method to calculate the sum of squares of digits
    public int squareSum(int n) {
        int sum = 0;
        while (n > 0) {
            // Extract last digit
            int digit = n % 10;
            // Square the digit and add to sum
            sum += digit * digit;
            // Remove last digit
            n = n / 10;
        }
        return sum;
    }
}
