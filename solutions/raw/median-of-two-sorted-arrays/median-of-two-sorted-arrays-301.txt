class Solution {

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int index1 = 0, index2 = 0;
        int totalLength = nums1.length + nums2.length;
        int[] ans = new int[totalLength];
        for (int i = 0; i < totalLength; i++) {
            // If nums1 reached its end, simply add nums2 element
            if (index1 == nums1.length) {
                ans[i] = nums2[index2];
                index2++;
                continue;
            } else // If nums2 reached its end, simply add nums1 element
            if (index2 == nums2.length) {
                ans[i] = nums1[index1];
                index1++;
                continue;
            }
            // Whichever array has smaller element, push that element
            if (nums1[index1] < nums2[index2]) {
                ans[i] = nums1[index1];
                index1++;
            } else {
                ans[i] = nums2[index2];
                index2++;
            }
        }
        // If length of concatenated array is odd, middle element is simply the median
        if (totalLength % 2 == 1) {
            return (double) ans[totalLength / 2];
        }
        // If the concatenated array\'s length is even, average of 2 middle elements would be the median
        double median = (double) (ans[totalLength / 2] + ans[totalLength / 2 - 1]) / 2;
        return median;
    }
}
