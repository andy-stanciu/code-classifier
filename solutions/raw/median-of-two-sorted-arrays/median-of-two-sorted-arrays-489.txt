class Solution {

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        //   int n1 = nums1.length;
        //   int n2= nums2.length;
        //   int n = n1+n2;
        //   int [] temp = new int [n];
        //  int left=0;
        //   int right=0;
        //   int j=0;
        //   while(left<n1&&right<n2){
        //   if(nums1[left]<nums2[right]){
        //   temp[j++]=nums1[left++];
        //   }else{
        //   temp[j++]=nums1[right++];
        //   }
        //   }
        //   while(left<n1){
        //   temp[j++]=nums1[left++];
        //   }
        //   while(right<n2){
        //   temp[j++]=nums1[right++];
        //   }
        //   if(n%2==1){
        //   return (double)temp[n/2];
        //  }else if (n%2==0){
        //   return (double)((temp[n/2]+(temp[n/2-1])/2));
        //   }
        //   return 0.0;
        int n1 = nums1.length;
        int n2 = nums2.length;
        if (n1 > n2) {
            return findMedianSortedArrays(nums2, nums1);
        }
        int n = n1 + n2;
        // int l1 = Integer.MIN_VALUE;
        // int l2 = Integer.MIN_VALUE;
        // int r1 = Integer.MAX_VALUE;
        // int r2 = Integer.MAX_VALUE;
        int low = 0;
        int high = n1;
        int left = (n1 + n2 + 1) / 2;
        while (low <= high) {
            int mid1 = (low + high) / 2;
            int mid2 = left - mid1;
            int l1 = (mid1 > 0) ? nums1[mid1 - 1] : Integer.MIN_VALUE;
            int l2 = (mid2 > 0) ? nums2[mid2 - 1] : Integer.MIN_VALUE;
            int r1 = (mid1 < n1) ? nums1[mid1] : Integer.MAX_VALUE;
            int r2 = (mid2 < n2) ? nums2[mid2] : Integer.MAX_VALUE;
            if (l1 <= r2 && l2 <= r1) {
                if (n % 2 == 0) {
                    return (double) (Math.max(l1, l2) + Math.min(r1, r2)) / 2.0;
                } else if (n % 2 == 1) {
                    return Math.max(l1, l2);
                }
            } else if (l1 > r2) {
                high = mid1 - 1;
            } else {
                low = mid1 + 1;
            }
        }
        return 0.0;
    }
}
