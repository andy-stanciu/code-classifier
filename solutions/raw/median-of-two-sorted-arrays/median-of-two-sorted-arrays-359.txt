class Solution {

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        if (m + n == 0) {
            return 0.00000;
        }
        if (m + n == 1 && m == 0) {
            return (double) nums2[0];
        } else if (m + n == 1 && n == 0) {
            return (double) nums1[0];
        }
        int mid = (m + n) / 2;
        double sum = 0;
        int[] merged = new int[m + n];
        int idx1 = 0;
        int idx2 = 0;
        int x = 0;
        while (idx1 < m && idx2 < n) {
            if (nums1[idx1] <= nums2[idx2]) {
                merged[x++] = nums1[idx1++];
            } else {
                merged[x++] = nums2[idx2++];
            }
        }
        while (idx1 < m) {
            merged[x++] = nums1[idx1++];
        }
        while (idx2 < n) {
            merged[x++] = nums2[idx2++];
        }
        if (merged.length % 2 == 0) {
            double ans = (double) (merged[mid - 1] + merged[mid]) / 2;
            return ans;
        } else {
            return (double) (merged[mid]);
        }
    }
}
