class Solution {

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        //         First create a new array to store the merged arrays
        int[] mergedNums = mergeSortedArray(nums1, nums2);
        //         Two conditions needs to be checked to determine the median to be returned
        //         Check if the length of the mergedNums is even or odd.
        //         If it is even, return (mergedNums[mid] + mergedNums[mid + 1]) / 2.0
        //         else, return mergedNums[mid]
        int mid = (mergedNums.length - 1) / 2;
        if (mergedNums.length % 2 == 0)
            return (mergedNums[mid] + mergedNums[mid + 1]) / 2.0;
        else
            return mergedNums[mid];
    }

    private int[] mergeSortedArray(int[] nums1, int[] nums2) {
        //         Since the arrays are sorted, a brute force method could be to
        //         merge the arrays using loops with O(n + m) time complexity.
        int[] mergedArray = new int[nums1.length + nums2.length];
        int i = 0, j = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] < nums2[j]) {
                mergedArray[i + j] = nums1[i];
                i++;
            } else {
                mergedArray[i + j] = nums2[j];
                j++;
            }
        }
        //         If i < nums1.length, add the remaining nums1 elements to the mergedArray
        if (i < nums1.length)
            for (i = i; i < nums1.length; i++) {
                mergedArray[i + j] = nums1[i];
            }
        //         If j < nums2.length, add the remaining nums2 elements to the mergedArray
        if (j < nums2.length)
            for (j = j; j < nums2.length; j++) {
                mergedArray[i + j] = nums2[j];
            }
        return mergedArray;
    }
}
