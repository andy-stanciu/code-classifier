class Solution {

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // 32 - 37
        int n = nums1.length, m = nums2.length;
        int mid = (n + m) / 2;
        // min(on the right) and max(on the left)
        if (n > m)
            return findMedianSortedArrays(nums2, nums1);
        int l = 0, r = n, p1, p2;
        double L1 = 0, L2 = 0, R1 = 0, R2 = 0;
        while (l <= r) {
            p1 = (l + r) / 2;
            p2 = mid - p1;
            L1 = p1 == 0 ? -1000002 : nums1[p1 - 1];
            L2 = p2 == 0 ? -1000002 : nums2[p2 - 1];
            R1 = p1 == n ? 1000002 : nums1[p1];
            R2 = p2 == m ? 1000002 : nums2[p2];
            if (L1 > R2) {
                r = p1 - 1;
            } else if (L2 > R1) {
                l = p1 + 1;
            } else {
                break;
            }
        }
        double res;
        if ((n + m) % 2 == 0) {
            return (Math.min(R1, R2) + Math.max(L1, L2)) / 2;
        } else {
            return Math.min(R1, R2);
        }
    }
}
