class Solution {

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length, n2 = nums2.length;
        int i = 0, j = 0;
        int n = n1 + n2;
        // index2
        int ind2 = n / 2;
        // index1
        int ind1 = ind2 - 1;
        // count
        int count = 0;
        // index element 1
        int ind1el = -1;
        // index element 2
        int ind2el = -1;
        // running loops
        while (i < n1 && j < n2) {
            // nums1 is less than nums2
            if (nums1[i] < nums2[j]) {
                // index1 is equalto  count
                if (count == ind1) {
                    ind1el = nums1[i];
                }
                // index1 is equato count
                if (count == ind2) {
                    ind2el = nums1[i];
                }
                count++;
                i++;
            } else // nums2 is less than nums1
            {
                // index1 is equalto  count
                if (count == ind1) {
                    ind1el = nums2[j];
                }
                // index1 is equato count
                if (count == ind2) {
                    ind2el = nums2[j];
                }
                count++;
                j++;
            }
        }
        while (i < n1) {
            // index1 is equalto  count
            if (count == ind1) {
                ind1el = nums1[i];
            }
            // index1 is equato count
            if (count == ind2) {
                ind2el = nums1[i];
            }
            count++;
            i++;
        }
        while (j < n2) {
            // index1 is equalto  count
            if (count == ind1) {
                ind1el = nums2[j];
            }
            // index1 is equato count
            if (count == ind2) {
                ind2el = nums2[j];
            }
            count++;
            j++;
        }
        if (n % 2 == 1) {
            return ind2el;
        }
        return (double) ((double) (ind1el + ind2el)) / 2.0;
    }
}
