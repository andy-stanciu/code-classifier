class Solution {

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        int n = n1 + n2;
        // Ensure that nums1 is the smaller array to optimize binary search
        if (n1 > n2)
            return findMedianSortedArrays(nums2, nums1);
        int low = 0;
        int high = n1;
        int totalLeft = (n1 + n2 + 1) / 2;
        while (low <= high) {
            // Partition nums1
            int mid1 = low + (high - low) / 2;
            // Partition nums2
            int mid2 = totalLeft - mid1;
            // Edge cases: left and right parts at the partitions
            int l1 = (mid1 == 0) ? Integer.MIN_VALUE : nums1[mid1 - 1];
            int r1 = (mid1 == n1) ? Integer.MAX_VALUE : nums1[mid1];
            int l2 = (mid2 == 0) ? Integer.MIN_VALUE : nums2[mid2 - 1];
            int r2 = (mid2 == n2) ? Integer.MAX_VALUE : nums2[mid2];
            // Check if we found the correct partition
            if (l1 <= r2 && l2 <= r1) {
                if (// If total number of elements is even
                n % 2 == 0)
                    // If total number of elements is even
                    return (Math.max(l1, l2) + Math.min(r1, r2)) / 2.0;
                else
                    // If total number of elements is odd
                    return Math.max(l1, l2);
            } else if (l1 > r2)
                high = mid1 - 1;
            else
                low = mid1 + 1;
        }
        return 0.0;
    }
}
