class Solution {

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // Pointer for traversing nums1
        int i = 0;
        // Pointer for traversing nums2
        int j = 0;
        // Pointer for the merged array
        int k = 0;
        // Length of nums1
        int m = nums1.length;
        // Length of nums2
        int n = nums2.length;
        // Array to hold the merged elements of nums1 and nums2
        int[] temp = new int[m + n];
        // Merge the two arrays until we reach the end of one of them
        while (i < m && j < n) {
            // Compare elements from both arrays and insert the smaller one
            if (nums1[i] < nums2[j]) {
                // Insert element from nums1
                temp[k] = nums1[i];
                // Move to next position in temp
                k++;
                // Move to next element in nums1
                i++;
            } else {
                // Insert element from nums2
                temp[k] = nums2[j];
                // Move to next position in temp
                k++;
                // Move to next element in nums2
                j++;
            }
        }
        // If there are remaining elements in nums1, add them to temp
        while (i < m) {
            temp[k] = nums1[i];
            k++;
            i++;
        }
        // If there are remaining elements in nums2, add them to temp
        while (j < n) {
            temp[k] = nums2[j];
            k++;
            j++;
        }
        // Calculate the length of the merged array
        // Total length of merged sorted array
        int l = m + n;
        // If the length is odd, return the middle element as the median
        if (l % 2 == 1) {
            return temp[l / 2];
        }
        // If the length is even, return the average of the two middle elements
        return (temp[l / 2] + temp[(l / 2 - 1)]) / 2.0;
    }
}
