class Solution {

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        int total = n + m;
        int mid1 = (total + 1) / 2;
        int mid2 = (total + 2) / 2;
        // Use a helper function to find the k-th smallest element
        return (findKth(nums1, nums2, mid1, 0, 0) + findKth(nums1, nums2, mid2, 0, 0)) / 2.0;
    }

    private int findKth(int[] nums1, int[] nums2, int k, int i, int j) {
        if (i >= nums1.length)
            return nums2[j + k - 1];
        if (j >= nums2.length)
            return nums1[i + k - 1];
        if (k == 1)
            return Math.min(nums1[i], nums2[j]);
        int mid1 = i + k / 2 - 1 < nums1.length ? nums1[i + k / 2 - 1] : Integer.MAX_VALUE;
        int mid2 = j + k / 2 - 1 < nums2.length ? nums2[j + k / 2 - 1] : Integer.MAX_VALUE;
        if (mid1 < mid2) {
            return findKth(nums1, nums2, k - k / 2, i + k / 2, j);
        } else {
            return findKth(nums1, nums2, k - k / 2, i, j + k / 2);
        }
    }
}
