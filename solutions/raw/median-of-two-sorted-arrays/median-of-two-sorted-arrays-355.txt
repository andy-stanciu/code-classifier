class Solution {

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int nSize = nums1.length;
        int mSize = nums2.length;
        int[] mergedArrays = getMergedArrays(nums1, nSize, nums2, mSize);
        int size = mergedArrays.length;
        if (size % 2 == 0) {
            int endOfMedian = (nSize - mSize) / 2 + mSize + 1;
            double startOfMedian = endOfMedian - 1;
            return startOfMedian == 0 && endOfMedian == 1 ? (double) (mergedArrays[(int) startOfMedian] + mergedArrays[(int) endOfMedian]) / 2 : (double) (mergedArrays[(int) startOfMedian - 1] + mergedArrays[(int) endOfMedian - 1]) / 2;
        } else {
            return mergedArrays[size / 2];
        }
    }

    private static int[] getMergedArrays(int[] nums1, int nSize, int[] nums2, int mSize) {
        int[] merged = new int[nSize + mSize];
        int k = 0;
        for (int i = 0; i < nSize; i++) {
            merged[k++] = nums1[i];
        }
        for (int i = 0; i < mSize; i++) {
            merged[k++] = nums2[i];
        }
        // Sort the merged array.
        Arrays.sort(merged);
        return merged;
    }
}
