class Solution {

    public double findMedianSortedArrays(int[] num1, int[] nums2) {
        int length = num1.length + nums2.length;
        int indexNum1 = 0;
        int indexNum2 = 0;
        int previous = 0;
        int current = 0;
        int resultIndex = 0;
        // we reach the middle of the total length
        while (resultIndex <= (length / 2)) {
            resultIndex++;
            previous = current;
            // handling the case when the first array has ended
            if (indexNum1 >= num1.length) {
                current = nums2[indexNum2];
                indexNum2++;
                continue;
            }
            // handling the case when the second array has ended
            if (indexNum2 >= nums2.length) {
                current = num1[indexNum1];
                indexNum1++;
                continue;
            }
            // we compare array elements one by one
            if (num1[indexNum1] < nums2[indexNum2]) {
                current = num1[indexNum1];
                indexNum1++;
            } else {
                current = nums2[indexNum2];
                indexNum2++;
            }
        }
        //we return the arithmetic mean of the elements from the middle, if there is an even number of elements
        if (length % 2 == 0)
            return (double) (previous + current) / 2;
        //otherwise the average element
        return (double) current;
    }
}
