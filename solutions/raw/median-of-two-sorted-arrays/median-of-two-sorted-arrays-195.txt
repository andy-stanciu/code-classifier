class Solution {

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // Get the lengths of the input arrays
        final int n1 = nums1.length, n2 = nums2.length;
        // Calculate the total number of elements in the merged array
        final int n = n1 + n2;
        // Create an array to store the merged result
        final int[] result = new int[n];
        // Initialize pointers for nums1 (i), nums2 (j), and result array (k)
        int i = 0, j = 0, k = 0;
        // Merge the two arrays into the result array with early termination
        while (i <= n1 && j <= n2) {
            if (i == n1) {
                // If nums1 is exhausted, add the remaining elements from nums2 to result and break
                while (j < n2) result[k++] = nums2[j++];
                break;
            }
            if (j == n2) {
                // If nums2 is exhausted, add the remaining elements from nums1 to result and break
                while (i < n1) result[k++] = nums1[i++];
                break;
            }
            if (nums1[i] < nums2[j]) {
                // Add the smaller element to the result and increment pointers
                result[k++] = nums1[i++];
            } else {
                result[k++] = nums2[j++];
            }
        }
        // Calculate the index where the median would be if the merged array was sorted
        final int mid = n / 2;
        // Check if the total number of elements in the merged array is even or odd
        if (n % 2 == 0) {
            // If even, return the average of elements at positions mid-1 and mid as a floating-point number
            return (double) (result[mid - 1] + result[mid]) / 2;
        } else {
            // If odd, return the element at position mid
            return result[mid];
        }
    }
}
