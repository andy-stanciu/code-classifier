class Solution {

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int nums1Len = nums1.length;
        int nums2Len = nums2.length;
        int[] resArr = new int[nums1Len + nums2Len];
        int p = 0;
        int k = 0;
        int c = 0;
        for (int i = 0; i < nums1Len; ) {
            if (i < nums1.length && k < nums2Len) {
                if (nums1[i] < nums2[k]) {
                    resArr[p] = nums1[i];
                    i += 1;
                    p += 1;
                } else if (nums2[k] < nums1[i]) {
                    resArr[p] = nums2[k];
                    k += 1;
                    p += 1;
                } else if (nums2[k] == nums1[i]) {
                    resArr[p] = nums2[k];
                    k += 1;
                    p += 1;
                    resArr[p] = nums1[i];
                    i += 1;
                    p += 1;
                }
                c = i;
            } else {
                break;
            }
        }
        if (c != nums1Len) {
            for (int i = c; i < nums1Len; i++) {
                resArr[p] = nums1[i];
                p += 1;
            }
        } else if (k != nums2Len) {
            for (int i = k; i < nums2Len; i++) {
                resArr[p] = nums2[i];
                p += 1;
            }
        }
        int arrLen = resArr.length;
        if (arrLen % 2 == 0) {
            double x = (resArr[arrLen / 2 - 1] + resArr[arrLen / 2]);
            x /= 2;
            return x;
        } else {
            double x = (resArr[arrLen / 2]);
            return x;
        }
    }
}
