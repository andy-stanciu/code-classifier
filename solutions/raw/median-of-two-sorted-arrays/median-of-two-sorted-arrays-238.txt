class Solution {

    /**
     * The median is the middle number in a sorted, ascending or descending array.
     * If there is an odd amount of numbers, the median value is the number that is in the middle, with the same amount of numbers below and above.
     * If there is an even amount of numbers in the list, the middle pair must be determined, added together, and divided by       two to find the median value.
     */
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] nums3 = mergeSortedArrays(nums1, nums2);
        int mid = nums3.length / 2;
        return nums3.length % 2 != 0 ? nums3[mid] : (nums3[mid] + nums3[mid - 1]) / 2.0;
    }

    /* Merge Two Sorted Array into one sorted array, eg:
     * [1,3]
     * [2,4]
     * -> [1,2,3,4]
     */
    private int[] mergeSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        int[] nums3 = new int[n1 + n2];
        int i = 0, j = 0, k = 0;
        while (i < n1 && j < n2) {
            if (nums1[i] < nums2[j]) {
                nums3[k++] = nums1[i++];
            } else {
                nums3[k++] = nums2[j++];
            }
        }
        // Store remaining elements of first array
        while (i < n1) nums3[k++] = nums1[i++];
        // Store remaining elements of second array
        while (j < n2) nums3[k++] = nums2[j++];
        return nums3;
    }
}
