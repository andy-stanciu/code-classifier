class Solution {

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // find the length of both arrays.
        int n1 = nums1.length;
        int n2 = nums2.length;
        // length of new array.
        int n = n1 + n2;
        //      create a new array to store all the elements.
        int[] res = new int[n];
        // i will point to num1.
        int i = 0;
        // j will point to num2.
        int j = 0;
        // k will point to res.
        int k = 0;
        while (// while num1 and num2 has elements.
        i < n1 && j < n2) {
            if (// if element is num1 is smaller than num2
            nums1[i] <= nums2[j]) {
                //              smaller element goes into new array and
                //              ONLY the index of that element is incremented.
                res[k] = nums1[i++];
            } else {
                res[k] = nums2[j++];
            }
            // finally, k is incremented. It is outside of if-else because it will be
            // incremented in both the cases.
            k++;
        }
        while (// it means nums2 has ended. So, add all elements of
        i < n1) {
            // nums1 in res.
            res[k++] = nums1[i++];
        }
        while (// it means nums1 has ended. So, add all elements of
        j < n2) {
            // num2 in res.
            res[k++] = nums2[j++];
        }
        // declaring median;
        double median;
        // n represents the last index.
        n--;
        if (// if the total elements are odd.
        n % 2 != 0) {
            median = (double) (res[n / 2] + res[(n / 2) + 1]) / 2;
        } else // if the total elements are even
        {
            median = res[n / 2];
        }
        //      finally, return the median.
        return median;
    }
}
