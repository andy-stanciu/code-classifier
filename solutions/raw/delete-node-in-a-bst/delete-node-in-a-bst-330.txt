/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
            return root;
        if (root.val == key) {
            return delete(root);
        }
        if (root.val > key) {
            root.left = deleteNode(root.left, key);
        } else {
            root.right = deleteNode(root.right, key);
        }
        return root;
    }

    public TreeNode delete(TreeNode root) {
        if (root == null || (root.left == null && root.right == null)) {
            return null;
        }
        if (root.left != null) {
            TreeNode prev = root.left, pred = root.left;
            while (pred.right != null) {
                prev = pred;
                pred = pred.right;
            }
            if (prev == pred) {
                pred.right = root.right;
                return pred;
            }
            prev.right = delete(pred);
            pred.left = root.left;
            pred.right = root.right;
            return pred;
        } else {
            TreeNode prev = root.right, pred = root.right;
            while (pred.left != null) {
                prev = pred;
                pred = pred.left;
            }
            if (prev == pred) {
                pred.left = root.left;
                return pred;
            } else {
                prev.left = delete(pred);
                pred.left = root.left;
                pred.right = root.right;
                return pred;
            }
        }
    }
}
