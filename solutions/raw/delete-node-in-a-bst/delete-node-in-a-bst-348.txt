/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    //left child containing values less than the parent node
    //and the right child containing values greater than the parent node
    //as a result, after deletion, we need to replace it with the min of the right sub tree
    //or max of the left subtree
    //replace takes two steps,
    //replace value of target
    //delete that min node in the right sub tree
    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
            return null;
        if (root.val == key) {
            if (root.left == null)
                return root.right;
            else if (root.right == null)
                return root.left;
            TreeNode minOfR = root.right;
            while (minOfR != null && minOfR.left != null) minOfR = minOfR.left;
            root.val = minOfR.val;
            root.right = deleteNode(root.right, minOfR.val);
        }
        if (root.val > key) {
            //key is on the left subtree
            root.left = deleteNode(root.left, key);
        }
        if (root.val < key) {
            //key is on the right subtree
            root.right = deleteNode(root.right, key);
        }
        return root;
    }
}
