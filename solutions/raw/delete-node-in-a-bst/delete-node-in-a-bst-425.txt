/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode rightt;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode rightt) {
 *         this.val = val;
 *         this.left = left;
 *         this.rightt = rightt;
 *     }
 * }
 */
class Solution {

    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
            return null;
        // Buoc 1: Di tim node can xoa.
        if (key < root.val) {
            root.left = deleteNode(root.left, key);
        } else if (key > root.val) {
            root.right = deleteNode(root.right, key);
        } else {
            // Buoc 2: Khi da tim duoc vi tri node can xoa.
            // TH1: key khong co node con (node la).
            if (root.left == null && root.right == null) {
                return null;
            } else // TH2: key co mot node con.
            if (root.left != null && root.right == null) {
                return root.left;
            } else if (root.left == null && root.right != null) {
                return root.right;
            }
            // TH3: KEY co 2 node con.
            // Su dung pp thay boi trai cung cua cay con ben phai.
            // 1. Di tim node trai cung truoc.
            TreeNode nodeTraiCungCayConPhai = timNodeTraiCung(root.right);
            // thay the key = val cua nodeTraiCungCayConPhai.
            root.val = nodeTraiCungCayConPhai.val;
            // cay van luu lai nodeTraiCungCayConPhai => xoa no di.
            // Dua ve th2.
            root.right = deleteNode(root.right, nodeTraiCungCayConPhai.val);
        }
        return root;
    }

    private TreeNode timNodeTraiCung(TreeNode root) {
        TreeNode nodeTraiCung = root;
        while (nodeTraiCung.left != null) {
            nodeTraiCung = nodeTraiCung.left;
        }
        return nodeTraiCung;
    }
}
