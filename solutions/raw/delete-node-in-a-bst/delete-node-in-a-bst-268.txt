/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
            return null;
        // if (root.left == null && root.right == null && root.val == key) return null;
        return deleteNodeHelperAgain(root, key);
    }

    private TreeNode deleteNodeHelperAgain(TreeNode node, int key) {
        if (node == null)
            return null;
        if (key < node.val)
            node.left = deleteNodeHelperAgain(node.left, key);
        else if (key > node.val)
            node.right = deleteNodeHelperAgain(node.right, key);
        else {
            if (node.right == null)
                return node.left;
            if (node.left == null)
                return node.right;
            TreeNode n = node;
            node = bstMin(n.right);
            node.right = bstDeleteMin(n.right);
            node.left = n.left;
        }
        return node;
    }

    private TreeNode bstMin(TreeNode node) {
        if (node.left == null)
            return node;
        else
            return bstMin(node.left);
    }

    private TreeNode bstDeleteMin(TreeNode node) {
        if (node.left == null)
            return node.right;
        node.left = bstDeleteMin(node.left);
        return node;
    }
}
