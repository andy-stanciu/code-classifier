/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
            return null;
        if (key > root.val) {
            root.right = deleteNode(root.right, key);
        } else if (key < root.val) {
            root.left = deleteNode(root.left, key);
        } else {
            //Found the node with the value to be deleted.
            //Case 1: When the node has no children
            if (root.right == null && root.left == null) {
                root = null;
            } else if (root.left == null) {
                // Case 2: Root has only one child.That is right child
                root = root.right;
            } else if (root.right == null) {
                // Case 2: Root has only one child. That is left child
                root = root.left;
            } else {
                final TreeNode node = findMinNode(root.right);
                root.val = node.val;
                root.right = deleteNode(root.right, node.val);
            }
        }
        return root;
    }

    private TreeNode findMinNode(TreeNode node) {
        TreeNode minNode = node;
        while (node != null) {
            minNode = node;
            node = node.left;
        }
        return minNode;
    }
}
