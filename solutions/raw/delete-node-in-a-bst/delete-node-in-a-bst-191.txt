/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null) {
            return null;
        }
        if (root.val == key) {
            return root = findSuccessorAndReplace(root);
        } else {
            if (root.val > key) {
                root.left = deleteNode(root.left, key);
                return root;
            } else {
                root.right = deleteNode(root.right, key);
                return root;
            }
        }
    }

    public TreeNode findSuccessorAndReplace(TreeNode root) {
        if (root.right != null) {
            TreeNode temp = root.right;
            TreeNode prev = root;
            while (temp.left != null) {
                prev = temp;
                temp = temp.left;
            }
            root.val = temp.val;
            if (prev != root) {
                prev.left = temp.right;
            } else {
                prev.right = temp.right;
            }
            return root;
        } else if (root.left != null) {
            TreeNode temp = root.left;
            TreeNode prev = root;
            while (temp.right != null) {
                prev = temp;
                temp = temp.right;
            }
            root.val = temp.val;
            if (prev != root) {
                prev.right = temp.left;
            } else {
                prev.left = temp.left;
            }
            return root;
        } else {
            return null;
        }
    }
}
