/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
            return null;
        // Rebalance BST if key found
        if (root.val == key) {
            if (root.right != null) {
                TreeNode temp = root.right;
                // find out left most node of right subtree to point to                 let subtree of matching node
                while (temp.left != null) temp = temp.left;
                temp.left = root.left;
                return root.right;
            } else
                return root.left;
        }
        // Search in left sub tree
        if (root.val > key)
            root.left = deleteNode(root.left, key);
        // Search in right sub tree
        if (root.val < key)
            root.right = deleteNode(root.right, key);
        return root;
    }
}
