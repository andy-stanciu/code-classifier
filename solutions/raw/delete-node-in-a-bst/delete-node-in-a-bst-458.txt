/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int lastNode = -123;

    public int temp = -123;

    public int successorRight(TreeNode node) {
        if (node.right == null && node.left == null) {
            lastNode = node.val;
            return node.val;
        }
        if (node.left == null && node.right != null) {
            int i = node.val;
            node.val = successorRight(node.right);
            return i;
        }
        return successorRight(node.left);
    }

    public int successorLeft(TreeNode node) {
        if (node.right == null && node.left == null) {
            lastNode = node.val;
            return node.val;
        }
        if (node.left != null && node.right == null) {
            int i = node.val;
            node.val = successorLeft(node.left);
            return i;
        }
        return successorLeft(node.right);
    }

    public void delete(TreeNode root, int key, int dkey, int i) {
        if (root == null) {
            return;
        }
        if (root.val == key) {
            i++;
        }
        if (root.right != null && root.right.val == dkey) {
            root.right = null;
            return;
        }
        if (root.left != null && root.left.val == dkey) {
            root.left = null;
            return;
        }
        if (root.right != null && root.right.val == key) {
            if (i > 0) {
                root.right = null;
                return;
            }
            i++;
        }
        if (root.left != null && root.left.val == key) {
            if (i > 0) {
                root.left = null;
                return;
            }
            i++;
        }
        delete(root.left, key, dkey, i);
        delete(root.right, key, dkey, i);
    }

    public void find(TreeNode root, int key) {
        if (root == null) {
            return;
        }
        if (key < root.val) {
            find(root.left, key);
        } else if (key > root.val) {
            find(root.right, key);
        } else {
            if (root.right != null) {
                root.val = successorRight(root.right);
            } else if (root.left != null) {
                root.val = successorLeft(root.left);
            } else {
                temp = root.val;
            }
            return;
        }
    }

    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null || (root.val == key && root.left == null && root.right == null)) {
            return null;
        }
        find(root, key);
        delete(root, lastNode, temp, 0);
        return root;
    }
}
