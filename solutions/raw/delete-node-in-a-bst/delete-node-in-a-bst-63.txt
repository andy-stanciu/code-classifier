/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    boolean left = true;

    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
            return root;
        if (key < root.val)
            root.left = deleteNode(root.left, key);
        if (key > root.val)
            root.right = deleteNode(root.right, key);
        if (key == root.val) {
            if (root.left == null && root.right == null)
                return null;
            if (root.right == null)
                return root.left;
            else {
                TreeNode sub = root.right;
                TreeNode tmp = sub;
                while (sub.left != null) {
                    if (sub.left.left == null)
                        tmp = sub;
                    sub = sub.left;
                }
                // Delete sub node
                tmp.left = sub.right;
                // Replace root with sub node
                sub.left = root.left;
                // Prevent pointing to itself
                if (sub != root.right)
                    sub.right = root.right;
                return sub;
            }
        }
        return root;
    }
}
