/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<Integer> l = new ArrayList<>();

    public TreeNode deleteNode(TreeNode root, int key) {
        inorder(root);
        if (l.indexOf(key) != -1)
            l.remove(l.indexOf(key));
        return construct(0, l.size() - 1);
    }

    public TreeNode construct(int start, int end) {
        if (start > end) {
            return null;
        }
        int mid = (start + end) / 2;
        TreeNode newroot = new TreeNode(l.get(mid));
        System.out.print(newroot.val);
        newroot.left = construct(start, mid - 1);
        newroot.right = construct(mid + 1, end);
        return newroot;
    }

    public void inorder(TreeNode root) {
        if (root == null) {
            return;
        }
        inorder(root.left);
        l.add(root.val);
        inorder(root.right);
    }
}
