class Solution {

    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
            return null;
        if (root.val > key) {
            root.left = deleteNode(root.left, key);
        } else if (root.val < key) {
            root.right = deleteNode(root.right, key);
        } else {
            return mergeBst(root.right, root.left);
        }
        return root;
    }

    private TreeNode mergeBst(TreeNode rightNode, TreeNode leftNode) {
        if (rightNode == null)
            return leftNode;
        if (leftNode == null)
            return rightNode;
        //  Since the leftNode is smaller than all nodes in rightNode
        //  We add the leftNode in the minor Node of rightNode
        TreeNode minRight = findMin(rightNode);
        minRight.left = leftNode;
        //  Return the merge
        return rightNode;
    }

    private TreeNode findMin(TreeNode node) {
        while (node.left != null) {
            node = node.left;
        }
        return node;
    }
}
