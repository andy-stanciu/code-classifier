/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode findNode(TreeNode root, int key) {
        if (root == null)
            return null;
        if (root.val == key) {
            System.out.println(root.val);
            return root;
        }
        if (key < root.val)
            return findNode(root.left, key);
        else
            return findNode(root.right, key);
    }

    public TreeNode deleteNode(TreeNode root, int key) {
        // once a node matches key:
        // 1. its left child becomes the left child of the left most node in the right subtree
        // 2. its right child becomes the new root.
        if (root == null)
            return null;
        if (findNode(root, key) == root) {
            if (root.right == null && root.left == null)
                return null;
            else if (root.right != null && root.left == null)
                return root.right;
            else if (root.left != null && root.right == null)
                return root.left;
            else {
                TreeNode sux = root.right;
                TreeNode orphan = root.left;
                TreeNode adopt = root.right;
                while (adopt.left != null) {
                    adopt = adopt.left;
                }
                adopt.left = orphan;
                root.val = sux.val;
                root.right = sux.right;
                root.left = sux.left;
            }
        }
        root.left = deleteNode(root.left, key);
        root.right = deleteNode(root.right, key);
        return root;
    }
}
