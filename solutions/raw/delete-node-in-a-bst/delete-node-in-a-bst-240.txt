/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    // iterative
    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
            return root;
        if (root.val == key)
            return deleteNode(root);
        TreeNode node = root;
        while (node != null) {
            if (node.left != null && node.left.val == key)
                node.left = deleteNode(node.left);
            else if (node.right != null && node.right.val == key)
                node.right = deleteNode(node.right);
            else
                node = key < node.val ? node.left : node.right;
        }
        return root;
    }

    private TreeNode deleteNode(TreeNode node) {
        TreeNode left = node.left;
        TreeNode right = node.right;
        if (right == null)
            return left;
        else if (left == null)
            return right;
        else {
            TreeNode leftMost = right;
            while (leftMost.left != null) leftMost = leftMost.left;
            leftMost.left = left;
            return right;
        }
    }

    // recursive
    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
            return root;
        if (root.val == key) {
            TreeNode left = root.left;
            TreeNode right = root.right;
            if (right == null)
                return left;
            else if (left == null)
                return right;
            else {
                TreeNode leftMost = right;
                while (leftMost.left != null) leftMost = leftMost.left;
                leftMost.left = left;
                return right;
            }
        } else {
            if (key < root.val)
                root.left = deleteNode(root.left, key);
            else
                root.right = deleteNode(root.right, key);
        }
        return root;
    }
}
