/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
            return root;
        if (root.val == key) {
            if (root.right == null)
                return root.left;
            if (root.left == null)
                return root.right;
            TreeNode temp = root.right;
            while (temp.left != null) {
                temp = temp.left;
            }
            temp.left = root.left;
            return root.right;
        }
        if (root.val < key)
            root.right = deleteNode(root.right, key);
        else
            root.left = deleteNode(root.left, key);
        return root;
    }
    // public TreeNode deleteNode(TreeNode root, int key) {
    //     if(root==null) return null;
    //     if(root.val < key) root.right = deleteNode(root.right, key);
    //     else if(root.val > key) root.left = deleteNode(root.left, key);
    //     else{
    //         if(root.left==null) return root.right;
    //         if(root.right==null) return root.left;
    //         root.val = minNode(root.right);
    //         root.right = deleteNode(root.right, root.val);
    //     }
    //     return root;
    // }
    // int minNode(TreeNode root){
    //     int min = root.val;
    //     while(root!=null){
    //         min = root.val;
    //         root = root.left;
    //     }
    //     return min;
    // }
}
