/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode deleteNode(TreeNode root, int key) {
        TreeNode current = root;
        TreeNode prev = null;
        while (current != null) {
            if (current.val == key) {
                break;
            }
            prev = current;
            if (key < current.val) {
                current = current.left;
            } else {
                current = current.right;
            }
        }
        if (current == null) {
            return root;
        }
        if (prev == null) {
            return delete(current);
        } else if (prev.left == current) {
            prev.left = delete(current);
        } else {
            prev.right = delete(current);
        }
        return root;
    }

    private static TreeNode delete(TreeNode node) {
        if (node == null || (node.left == null && node.right == null)) {
            return null;
        }
        if (node.left == null) {
            return node.right;
        }
        if (node.right == null) {
            return node.left;
        }
        TreeNode prev = node;
        TreeNode successor = node.right;
        while (successor != null && successor.left != null) {
            prev = successor;
            successor = successor.left;
        }
        if (successor == node.right) {
            successor.left = node.left;
        } else {
            prev.left = successor.right;
            successor.left = node.left;
            successor.right = node.right;
        }
        return successor;
    }
}
