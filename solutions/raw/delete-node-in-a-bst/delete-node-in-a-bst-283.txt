/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    private TreeNode findMin(TreeNode node) {
        if (node == null)
            return node;
        TreeNode runner = node;
        while (runner.left != null) {
            runner = runner.left;
        }
        return runner;
    }

    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
            return null;
        else if (key < root.val)
            root.left = deleteNode(root.left, key);
        else if (key > root.val)
            root.right = deleteNode(root.right, key);
        else {
            //found, delete now
            if (root.left == null)
                return root.right;
            else if (root.right == null)
                return root.left;
            else {
                TreeNode replace = findMin(root.right);
                root.val = replace.val;
                root.right = deleteNode(root.right, replace.val);
            }
        }
        return root;
    }
}
