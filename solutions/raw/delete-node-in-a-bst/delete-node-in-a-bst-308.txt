/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
            return root;
        // search the node
        if (root.val < key)
            root.right = deleteNode(root.right, key);
        else if (root.val > key)
            root.left = deleteNode(root.left, key);
        else {
            // check for null child node
            if (root.left == null)
                return root.right;
            else if (root.right == null)
                return root.left;
            // if it comes here, that means root node has children (both)
            // finding the min node on right sub tree - here you can also find on left sub tree, but then it has to be max val on left sub tree
            TreeNode curr = root.right;
            while (curr.left != null) {
                curr = curr.left;
            }
            //after finding it, replace that node\'s val with current root node and continue the same deletion process until you delele that node
            root.val = curr.val;
            root.right = deleteNode(root.right, root.val);
        }
        return root;
    }
}
