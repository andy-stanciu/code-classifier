/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
            return null;
        if (root.val == key) {
            if (root.left != null) {
                leftTra(root.left, root.right);
                return root.left;
            } else if (root.right != null) {
                rightTra(root.right, root.left);
                return root.right;
            } else
                return null;
        }
        root.left = deleteNode(root.left, key);
        root.right = deleteNode(root.right, key);
        return root;
    }

    public void leftTra(TreeNode root1, TreeNode root2) {
        while (root1.right != null) root1 = root1.right;
        root1.right = root2;
    }

    public void rightTra(TreeNode root1, TreeNode root2) {
        while (root1.left != null) root1 = root1.left;
        root1.left = root2;
    }
}
