/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
            return null;
        ArrayList<Integer> l = new ArrayList<>();
        preOrder(root, l, key);
        Collections.sort(l);
        return sortedListToBST(l, 0, l.size() - 1);
    }

    public void preOrder(TreeNode root, ArrayList<Integer> l, int key) {
        if (root == null)
            return;
        if (root.val != key)
            l.add(root.val);
        preOrder(root.left, l, key);
        preOrder(root.right, l, key);
    }

    public TreeNode sortedListToBST(ArrayList<Integer> l, int start, int end) {
        if (end < start)
            return null;
        int mid = (start + end) / 2;
        TreeNode root = new TreeNode(l.get(mid));
        root.left = sortedListToBST(l, start, mid - 1);
        root.right = sortedListToBST(l, mid + 1, end);
        return root;
    }
}
