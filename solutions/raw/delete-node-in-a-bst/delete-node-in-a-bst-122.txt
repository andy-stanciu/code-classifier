/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode deleteNode(TreeNode root, int key) {
        // Base case: if the root is null, return null
        if (root == null)
            return null;
        // Search for the node to be deleted
        if (key < root.val) {
            // Recur to the left subtree
            root.left = deleteNode(root.left, key);
        } else if (key > root.val) {
            // Recur to the right subtree
            root.right = deleteNode(root.right, key);
        } else {
            // Node to be deleted found
            // Case 1: No child
            if (root.left == null && root.right == null) {
                // Simply delete the node
                return null;
            } else // Case 2: One child
            if (root.left == null) {
                // Return the right subtree
                return root.right;
            } else if (root.right == null) {
                // Return the left subtree
                return root.left;
            } else // Case 3: Two children
            {
                // Find the inorder successor (smallest in the right subtree)
                TreeNode successor = findMin(root.right);
                // Replace the current node\'s value with the successor\'s value
                root.val = successor.val;
                // Delete the inorder successor
                root.right = deleteNode(root.right, successor.val);
            }
        }
        return root;
    }

    // Helper function to find the minimum value node (inorder successor)
    private TreeNode findMin(TreeNode node) {
        while (node.left != null) {
            node = node.left;
        }
        return node;
    }
}
