/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
            return null;
        if (root.val == key) {
            if (root.left == null && root.right == null) {
                return null;
            } else if (root.left == null && root.right != null) {
                return root.right;
            } else if (root.left != null && root.right == null) {
                return root.left;
            } else if (root.left != null && root.right != null) {
                reAttach(root.left, root.right);
                return root.left;
            }
        }
        delNode(root, key);
        return root;
    }

    public void delNode(TreeNode root, int key) {
        if (root.left != null && root.left.val == key) {
            if (root.left.left == null) {
                if (root.left.right != null)
                    root.left = root.left.right;
                else
                    root.left = null;
                return;
            } else if (root.left.right == null) {
                if (root.left.left != null)
                    root.left = root.left.left;
                else
                    root.left = null;
                return;
            } else {
                TreeNode connectee = new TreeNode();
                connectee = root.left.right;
                root.left = root.left.left;
                reAttach(root.left, connectee);
            }
        }
        if (root.right != null && root.right.val == key) {
            if (root.right.left == null) {
                if (root.right.right != null)
                    root.right = root.right.right;
                else
                    root.right = null;
                return;
            } else if (root.right.right == null) {
                if (root.right.left != null)
                    root.right = root.right.left;
                else
                    root.left = null;
                return;
            } else {
                TreeNode connectee = new TreeNode();
                connectee = root.right.right;
                root.right = root.right.left;
                reAttach(root.right, connectee);
            }
        }
        if (key > root.val && root.right != null)
            delNode(root.right, key);
        if (key < root.val && root.left != null)
            delNode(root.left, key);
    }

    public void reAttach(TreeNode connect, TreeNode connectee) {
        if (connect.right == null) {
            connect.right = connectee;
            return;
        }
        reAttach(connect.right, connectee);
    }
}
