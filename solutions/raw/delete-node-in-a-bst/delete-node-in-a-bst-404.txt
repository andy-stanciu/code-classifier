/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null) {
            return null;
        }
        if (root.val == key && root.left == null && root.right == null) {
            return null;
        } else if (root.val == key && root.left == null) {
            return root.right;
        } else if (root.val == key && root.right == null) {
            return root.left;
        } else if (root.val == key) {
            TreeNode left = root.left;
            TreeNode right = root.right;
            moveTo(right, left);
            return right;
        }
        if (find(root.left, key)) {
            root.left = deleteNode(root.left, key);
            return root;
        } else if (find(root.right, key)) {
            root.right = deleteNode(root.right, key);
            return root;
        }
        return root;
    }

    private void moveTo(TreeNode right, TreeNode left) {
        if (right == null) {
            return;
        }
        while (right.left != null) {
            right = right.left;
        }
        right.left = left;
    }

    private boolean find(TreeNode root, int key) {
        if (root == null) {
            return false;
        }
        if (root.val == key) {
            return true;
        }
        return find(root.left, key) || find(root.right, key);
    }
}
