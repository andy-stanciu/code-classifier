/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    ArrayList<Integer> elements;

    int deleteKey;

    TreeNode newRoot;

    void insert(int val) {
        if (newRoot == null) {
            newRoot = new TreeNode(val);
            return;
        }
        TreeNode tmp = newRoot;
        while (true) {
            if (val > tmp.val) {
                if (tmp.right != null) {
                    tmp = tmp.right;
                } else {
                    tmp.right = new TreeNode(val);
                    break;
                }
            } else if (val < tmp.val) {
                if (tmp.left != null) {
                    tmp = tmp.left;
                } else {
                    tmp.left = new TreeNode(val);
                    break;
                }
            }
        }
    }

    void preOrder(TreeNode root) {
        if (root != null) {
            if (root.val != deleteKey) {
                elements.add(Integer.valueOf(root.val));
            }
        } else {
            return;
        }
        if (root.left != null) {
            preOrder(root.left);
        }
        if (root.right != null) {
            preOrder(root.right);
        }
    }

    public TreeNode deleteNode(TreeNode root, int key) {
        elements = new ArrayList<Integer>();
        deleteKey = key;
        newRoot = null;
        preOrder(root);
        for (Integer intObj : elements) {
            insert(intObj.intValue());
        }
        return newRoot;
    }
}
