/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode deleteNode(TreeNode root, int key) {
        TreeNode newRoot = new TreeNode();
        newRoot.left = root;
        helper(newRoot, key);
        return newRoot.left;
    }

    private void helper(TreeNode node, int key) {
        if (node == null) {
            return;
        }
        if (node.left != null && node.left.val == key) {
            TreeNode toDelete = node.left;
            if (toDelete.right != null) {
                node.left = toDelete.right;
                if (toDelete.left != null) {
                    TreeNode temp = toDelete.right;
                    while (temp.left != null) {
                        temp = temp.left;
                    }
                    temp.left = toDelete.left;
                }
            } else if (toDelete.left != null) {
                node.left = toDelete.left;
            } else {
                node.left = null;
            }
        } else if (node.right != null && node.right.val == key) {
            TreeNode toDelete = node.right;
            if (toDelete.right != null) {
                node.right = toDelete.right;
                if (toDelete.left != null) {
                    TreeNode temp = toDelete.right;
                    while (temp.left != null) {
                        temp = temp.left;
                    }
                    temp.left = toDelete.left;
                }
            } else if (toDelete.left != null) {
                node.right = toDelete.left;
            } else {
                node.right = null;
            }
        }
        helper(node.left, key);
        helper(node.right, key);
    }
}
