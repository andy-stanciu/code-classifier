class Solution {

    public TreeNode findParent(TreeNode node, int target) {
        if ((node.left != null && node.left.val == target) || (node.right != null && node.right.val == target))
            return node;
        TreeNode ret = null;
        if (node.left != null)
            ret = findParent(node.left, target);
        if (ret == null && node.right != null)
            ret = findParent(node.right, target);
        return ret;
    }

    public TreeNode deleteNode(TreeNode root, int target) {
        // find parent of target
        if (root == null)
            return null;
        if (root.val == target) {
            TreeNode temp = root.left;
            if (temp == null)
                return root.right;
            while (temp.right != null) temp = temp.right;
            temp.right = root.right;
            return root.left;
        }
        TreeNode parent = findParent(root, target);
        if (parent == null || parent.val == target)
            return root;
        System.out.println(parent.val);
        if (parent.left != null && parent.left.val == target) {
            TreeNode temp = parent.left.left;
            if (parent.left.right == null) {
                parent.left = parent.left.left;
                return root;
            } else {
                parent.left = parent.left.right;
                while (parent.left != null) parent = parent.left;
                parent.left = temp;
                return root;
            }
        } else {
            TreeNode temp = parent.right.right;
            if (parent.right.left == null) {
                parent.right = parent.right.right;
                return root;
            } else {
                parent.right = parent.right.left;
                while (parent.right != null) parent = parent.right;
                parent.right = temp;
                return root;
            }
        }
    }
}
