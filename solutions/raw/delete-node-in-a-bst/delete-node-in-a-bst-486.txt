/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode findIS(TreeNode root) {
        while (root.left != null) {
            root = root.left;
        }
        return root;
    }

    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null) {
            return null;
        }
        if (root.val > key) {
            root.left = deleteNode(root.left, key);
        } else if (root.val < key) {
            root.right = deleteNode(root.right, key);
        } else {
            //the node to be deleted is leaf node
            if (root.left == null && root.right == null) {
                return null;
            }
            //the node only have its right or left subtree
            if (root.left == null) {
                return root.right;
            } else if (root.right == null) {
                return root.left;
            }
            //the node have its both right and left subtree
            //step 1 -> find its inorder succesor(i.e leftmost node in right subtree)
            //step 2 -> swap value of inorder succesor node and root node and delete the inorder Susccesor node
            TreeNode inOrderSuccessor = findIS(root.right);
            root.val = inOrderSuccessor.val;
            root.right = deleteNode(root.right, root.val);
        }
        return root;
    }
}
