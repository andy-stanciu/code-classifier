/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode findSuccessor(TreeNode node) {
        if (node.right == null)
            return node;
        return findSuccessor(node.right);
    }

    public TreeNode deleteNode(TreeNode root, int key) {
        //trace the node
        if (root == null)
            return null;
        if (root.val > key) {
            root.left = deleteNode(root.left, key);
        } else if (root.val < key) {
            root.right = deleteNode(root.right, key);
        } else //found the node
        {
            //2child
            if (root.left != null && root.right != null) {
                TreeNode suc = findSuccessor(root.left);
                root.val = suc.val;
                root.left = deleteNode(root.left, suc.val);
            } else //1child
            if (root.left != null || root.right != null) {
                if (root.left != null) {
                    return root.left;
                } else {
                    return root.right;
                }
            } else //leaf node
            {
                return null;
            }
        }
        return root;
    }
}
