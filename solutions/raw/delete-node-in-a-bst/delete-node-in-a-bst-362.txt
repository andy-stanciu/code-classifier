/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
            return root;
        if (root.val > key) {
            root.left = deleteNode(root.left, key);
        } else if (root.val < key) {
            root.right = deleteNode(root.right, key);
        } else // Reached at the key
        {
            // When we have just one right child
            if (root.left == null)
                return root.right;
            else // when we have just one left child
            if (root.right == null)
                return root.left;
            else // when we have both the child
            {
                TreeNode min = findMinNodeInRightSubtree(root.right);
                root.val = min.val;
                root.right = deleteNode(root.right, min.val);
            }
        }
        return root;
    }

    public TreeNode findMinNodeInRightSubtree(TreeNode root) {
        while (root.left != null) {
            root = root.left;
        }
        return root;
    }
}
