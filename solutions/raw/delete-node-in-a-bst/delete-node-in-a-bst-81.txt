/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    private TreeNode getMinNode(TreeNode root) {
        TreeNode cur = root;
        while (cur.left != null) {
            cur = cur.left;
        }
        return cur;
    }

    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
            return null;
        if (key < root.val)
            root.left = deleteNode(root.left, key);
        else if (key > root.val)
            root.right = deleteNode(root.right, key);
        else {
            if (// since only right child node is present we replace current with right child
            root.left == null)
                // since only right child node is present we replace current with right child
                return root.right;
            else if (// since only left child node is present we replace current with left child
            root.right == null)
                // since only left child node is present we replace current with left child
                return root.left;
            else {
                // getting min from right subtree to replace current node
                TreeNode min = getMinNode(root.right);
                // replcaing current node value
                root.val = min.val;
                //now we need to delete this min node from right sub tree
                root.right = deleteNode(root.right, min.val);
            }
        }
        return root;
    }
}
