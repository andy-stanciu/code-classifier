class Solution {

    public int removeDuplicates(int[] nums) {
        /*
            numbers are in array
            array is sorted in non decreasing . means increasing but not strict.
            there can be duplicate element. atmost 2 duplicates allowed

           maintain few counters
           last required no. position
           count of current element
           current pointer
         */
        int prevElement = nums[0], prevElemCount = 1, correctPos = 0;
        for (int i = 1; i < nums.length; i++) {
            // previous element is equal to current elemt
            /* increase the count of prev, current pos should not increase if prv count more than2
                if more than 2 then increase prev count and continue
             */
            // previous elem not equla to current then swap
            /*
                update prev elemt and swap with postion if prev count s less than 3. 
                swap only if i is greater than the current pos + 1
             */
            if (prevElement == nums[i]) {
                prevElemCount++;
            }
            if (prevElement != nums[i]) {
                prevElement = nums[i];
                prevElemCount = 1;
            }
            if (i > correctPos && prevElemCount < 3) {
                correctPos++;
                nums[correctPos] = nums[i];
            }
        }
        return correctPos + 1;
    }
}
