/*
Idea is to use 2 pointer technique. 
one would be a slow pointer which stays at dublicate to replaced and fast pointer which searches for the next unique element.
Then replace the dublicate with unique element.
*/
class Solution {

    public int removeDuplicates(int[] nums) {
        if (nums.length == 1) {
            return 1;
        }
        int p = 1;
        int fp = 1;
        int val = nums[0];
        int cnt = 1;
        int prev = nums[0];
        while (fp < nums.length && p < nums.length) {
            if (nums[fp] == val && cnt >= 2) {
                fp++;
            } else {
                val = nums[fp];
                nums[p] = nums[fp];
                p++;
                fp++;
            }
            if (nums[fp - 1] == prev) {
                cnt++;
            } else {
                cnt = 1;
                prev = nums[fp - 1];
            }
        }
        return p;
    }
}
