/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    private final List<String> result = new LinkedList<>();

    public List<String> binaryTreePaths(TreeNode root) {
        if (root.left == null && root.right == null) {
            return List.of(String.valueOf(root.val));
        }
        tree(root, new StringBuilder());
        return result;
    }

    public void tree(TreeNode node, StringBuilder sb) {
        if (node.left == null && node.right == null) {
            sb.append(node.val);
            result.add(sb.toString());
            return;
        }
        if (node.left != null) {
            tree(node.left, new StringBuilder(sb).append(node.val).append("->"));
        }
        if (node.right != null) {
            tree(node.right, new StringBuilder(sb).append(node.val).append("->"));
        }
    }
}
