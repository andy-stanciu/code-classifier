/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<String> results = new ArrayList();

    public List<String> binaryTreePaths(TreeNode root) {
        navigatePaths(root, new StringBuilder().append(root.val));
        return results;
    }

    private void navigatePaths(TreeNode root, StringBuilder leafPath) {
        if (root.left == null && root.right == null) {
            results.add(leafPath.toString());
            return;
        }
        if (root.left != null)
            navigatePaths(root.left, new StringBuilder(leafPath).append("->" + root.left.val));
        if (root.right != null)
            navigatePaths(root.right, new StringBuilder(leafPath).append("->" + root.right.val));
    }
}
