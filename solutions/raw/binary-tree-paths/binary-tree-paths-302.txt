/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> list = new ArrayList<>();
        if (root == null) {
            return list;
        }
        String currpath = Integer.toString(root.val);
        if (root.left == null && root.right == null)
            list.add(currpath);
        if (root.left != null)
            dfs(root.left, currpath, list);
        if (root.right != null)
            dfs(root.right, currpath, list);
        return list;
    }

    public void dfs(TreeNode node, String currpath, List<String> list) {
        currpath += "->" + node.val;
        if (node.left == null && node.right == null)
            list.add(currpath);
        if (node.left != null)
            dfs(node.left, currpath, list);
        if (node.right != null)
            dfs(node.right, currpath, list);
        return;
    }
}
