/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        ArrayList<String> paths = new ArrayList<>();
        binaryTreePaths(root, paths, "");
        return paths;
    }

    private void binaryTreePaths(TreeNode root, ArrayList<String> paths, String currentPath) {
        if (root == null) {
            return;
        }
        currentPath = getPath(root, currentPath);
        if (root.left == null && root.right == null) {
            paths.add(currentPath);
            currentPath = "";
        }
        binaryTreePaths(root.left, paths, currentPath);
        binaryTreePaths(root.right, paths, currentPath);
    }

    private static String getPath(TreeNode root, String currentPath) {
        if (Objects.equals(currentPath, "")) {
            currentPath = String.valueOf(root.val);
        } else {
            currentPath = currentPath + "->" + root.val;
        }
        return currentPath;
    }
}
