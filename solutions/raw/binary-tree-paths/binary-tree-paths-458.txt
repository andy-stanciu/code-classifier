/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<String> list = new ArrayList<>();

    StringBuilder sb = new StringBuilder();

    public void findPaths(TreeNode root) {
        if (root == null) {
            return;
        }
        int tmp = sb.length();
        if (root.left == null && root.right == null) {
            sb.append(root.val);
            list.add(sb.toString());
            sb.delete(tmp, sb.length());
            return;
        } else {
            sb.append(root.val + "->");
        }
        TreeNode leftNode = root.left;
        if (leftNode != null) {
            findPaths(leftNode);
        }
        TreeNode rightNode = root.right;
        if (rightNode != null) {
            findPaths(rightNode);
        }
        sb.delete(tmp, sb.length());
        return;
    }

    public List<String> binaryTreePaths(TreeNode root) {
        // great question
        findPaths(root);
        return list;
    }
}
