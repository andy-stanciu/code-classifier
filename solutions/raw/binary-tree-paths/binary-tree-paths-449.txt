/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> lst = new ArrayList<>();
        binaryTreePathsHelper(root, lst, new LinkedList<>());
        return lst;
    }

    public void binaryTreePathsHelper(TreeNode node, List<String> lst, Deque<String> dq) {
        if (node == null)
            return;
        dq.addLast(Integer.toString(node.val));
        if (node.left == null && node.right == null) {
            lst.add(toString(dq));
        } else {
            dq.addLast("->");
            binaryTreePathsHelper(node.left, lst, dq);
            binaryTreePathsHelper(node.right, lst, dq);
            dq.removeLast();
        }
        dq.removeLast();
    }

    public String toString(Deque<String> dq) {
        StringBuilder sb = new StringBuilder();
        for (String s : dq) {
            sb.append(s);
        }
        return sb.toString();
    }
}
