class Solution {

    List<List<Integer>> list = new ArrayList<>();

    public List<String> binaryTreePaths(TreeNode root) {
        helper(root, new ArrayList<>());
        List<String> ans = new ArrayList<>();
        for (int i = 0; i < list.size(); i++) {
            List<Integer> temp = list.get(i);
            StringBuilder str = new StringBuilder();
            for (int j = 0; j < temp.size(); j++) {
                if (j != temp.size() - 1) {
                    str.append(temp.get(j));
                    str.append("->");
                } else if (j == temp.size() - 1) {
                    str.append(temp.get(j));
                }
            }
            ans.add(str.toString());
        }
        return ans;
    }

    public void helper(TreeNode root, List<Integer> l) {
        if (root == null) {
            return;
        }
        l.add(root.val);
        if (root.left == null && root.right == null) {
            list.add(new ArrayList<>(l));
        }
        helper(root.left, l);
        helper(root.right, l);
        l.remove(l.size() - 1);
    }
}
