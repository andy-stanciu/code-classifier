/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<String> result = new ArrayList<String>();

    public List<String> binaryTreePaths(TreeNode root) {
        return dfs(root);
    }

    List<String> dfs(TreeNode root) {
        if (root == null) {
            return result;
        }
        Stack<TreeNode> st = new Stack<TreeNode>();
        Stack<String> paths = new Stack<String>();
        TreeNode node = root;
        paths.push(node.val + "");
        while (node != null) {
            String path = paths.pop();
            if (node.left == null && node.right == null) {
                result.add(path);
            }
            if (node.right != null) {
                st.push(node.right);
                paths.push(path + "->" + node.right.val);
            }
            if (node.left != null) {
                paths.push(path + "->" + node.left.val);
                node = node.left;
            } else {
                if (!st.isEmpty()) {
                    node = st.pop();
                } else {
                    node = null;
                }
            }
        }
        return result;
    }
}
