/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> paths = new ArrayList<>();
        if (root != null) {
            String currentPath = String.valueOf(root.val);
            if (root.left == null && root.right == null) {
                paths.add(currentPath);
                return paths;
            }
            addPaths(root.left, paths, new StringBuilder(currentPath));
            addPaths(root.right, paths, new StringBuilder(currentPath));
        }
        return paths;
    }

    private void addPaths(TreeNode root, List<String> paths, StringBuilder currentPath) {
        if (root == null) {
            return;
        }
        currentPath.append("->").append(root.val);
        if (root.left == null && root.right == null) {
            paths.add(currentPath.toString());
            return;
        }
        addPaths(root.left, paths, new StringBuilder(currentPath.toString()));
        addPaths(root.right, paths, currentPath);
        return;
    }
}
