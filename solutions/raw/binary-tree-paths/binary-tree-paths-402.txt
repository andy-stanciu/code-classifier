class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> allPaths = new ArrayList<>();
        if (root == null) {
            return allPaths;
        }
        List<String> leftPaths = binaryTreePaths(root.left);
        List<String> rightPaths = binaryTreePaths(root.right);
        StringBuilder sb = new StringBuilder();
        sb.append(root.val);
        int initialLength = sb.length();
        if (leftPaths.isEmpty() && rightPaths.isEmpty()) {
            allPaths.add(sb.toString());
            return allPaths;
        }
        for (String path : leftPaths) {
            sb.setLength(initialLength);
            sb.append("->");
            sb.append(path);
            allPaths.add(sb.toString());
        }
        for (String path : rightPaths) {
            sb.setLength(initialLength);
            sb.append("->");
            sb.append(path);
            allPaths.add(sb.toString());
        }
        return allPaths;
    }
}
