/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        //basic root to leaf dfs
        List<String> res = new ArrayList();
        if (root == null)
            return res;
        String currpath = Integer.toString(root.val);
        //no children check
        if (root.left == null && root.right == null)
            res.add(currpath);
        //if children are there
        if (root.left != null)
            dfshelp(root.left, currpath, res);
        if (root.right != null)
            dfshelp(root.right, currpath, res);
        return res;
    }

    public void dfshelp(TreeNode node, String currpath, List<String> res) {
        currpath += "->" + node.val;
        //if leaf found,add to current string
        if (node.left == null && node.right == null) {
            res.add(currpath);
            return;
        }
        //check if leaves have children nodes or not
        if (node.left != null)
            dfshelp(node.left, currpath, res);
        if (node.right != null)
            dfshelp(node.right, currpath, res);
    }
}
