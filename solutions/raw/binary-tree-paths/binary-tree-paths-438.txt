class Solution {

    List<String> res = new ArrayList<>();

    ArrayList<Integer> list = new ArrayList<>();

    public List<String> binaryTreePaths(TreeNode root) {
        inOrder(root);
        return res;
    }

    private void inOrder(TreeNode node) {
        if (node == null) {
            return;
        }
        if (node.left == null && node.right == null) {
            list.add(node.val);
            //convert list to string and add final result
            StringBuilder str = new StringBuilder();
            for (int i : list) {
                if (!str.isEmpty()) {
                    str.append("->").append(String.valueOf(i));
                } else {
                    str.append(String.valueOf(i));
                }
            }
            res.add(str.toString());
            list.remove(list.size() - 1);
        }
        list.add(node.val);
        inOrder(node.left);
        inOrder(node.right);
        list.remove(list.size() - 1);
    }
}
