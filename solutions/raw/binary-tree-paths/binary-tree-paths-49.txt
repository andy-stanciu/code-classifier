/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public void trace(TreeNode root, List<String> path, List<TreeNode> nodes) {
        if (root == null)
            return;
        if (root.left == null && root.right == null) {
            StringBuilder builder = new StringBuilder();
            for (TreeNode node : nodes) {
                builder.append(node.val);
                builder.append("->");
            }
            builder.append(root.val);
            path.add(builder.toString());
            return;
        }
        nodes.add(root);
        trace(root.left, path, nodes);
        trace(root.right, path, nodes);
        nodes.removeLast();
    }

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> path = new ArrayList<>();
        List<TreeNode> nodes = new ArrayList<>();
        trace(root, path, nodes);
        return path;
    }
}
