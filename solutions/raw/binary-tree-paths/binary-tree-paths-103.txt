/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        if (root == null) {
            return null;
        }
        ArrayList<String> array = new ArrayList<String>();
        if (root.left == null && root.right == null) {
            array.add(root.val + "");
            return array;
        }
        String currentPath = root.val + "";
        binaryTreePathsHelper(array, root.left, currentPath);
        binaryTreePathsHelper(array, root.right, currentPath);
        return array;
    }

    public void binaryTreePathsHelper(List<String> array, TreeNode root, String currentPath) {
        if (root == null) {
            return;
        } else // At a leaf
        if (root.left == null && root.right == null) {
            currentPath += "->" + root.val;
            array.add(currentPath);
            return;
        } else {
            currentPath += "->" + root.val;
            binaryTreePathsHelper(array, root.left, currentPath);
            binaryTreePathsHelper(array, root.right, currentPath);
        }
    }
}
