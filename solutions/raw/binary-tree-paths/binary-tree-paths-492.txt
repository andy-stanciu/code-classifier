class Solution {

    // Time Complexity : O(n)
    // Space Complexity : O(n)
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> paths = new ArrayList<>();
        // Now we can pass list or arrayv by reference in java...Hence
        paths = DFS(root);
        return paths;
    }

    // Depth First Search On Given Tree
    public static List<String> DFS(TreeNode root) {
        List<String> paths = new ArrayList<>();
        Stack<TreeNode> nStack = new Stack<>();
        Stack<String> sStack = new Stack<>();
        // Base Case
        if (root == null)
            return paths;
        // General Case
        nStack.push(root);
        sStack.push("");
        while (!nStack.isEmpty()) {
            TreeNode nTemp = nStack.pop();
            String sTemp = sStack.pop();
            if (nTemp.left == null && nTemp.right == null)
                paths.add(sTemp + nTemp.val);
            if (nTemp.left != null) {
                nStack.push(nTemp.left);
                sStack.push(sTemp + nTemp.val + "->");
            }
            if (nTemp.right != null) {
                nStack.push(nTemp.right);
                sStack.push(sTemp + nTemp.val + "->");
            }
        }
        return paths;
    }
}
