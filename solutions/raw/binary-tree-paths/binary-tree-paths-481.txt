class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> result = new ArrayList<>();
        travel(root, new ArrayList<>(), result);
        return result;
    }

    private void travel(TreeNode root, List<TreeNode> path, List<String> result) {
        if (root == null)
            return;
        path.add(root);
        if (root.left == null && root.right == null) {
            result.add(stringify(path));
        } else {
            travel(root.left, path, result);
            travel(root.right, path, result);
        }
        path.remove(path.size() - 1);
    }

    private String stringify(List<TreeNode> path) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < path.size(); i++) {
            TreeNode node = path.get(i);
            if (i == 0) {
                sb.append(node.val);
            } else {
                sb.append("->" + node.val);
            }
        }
        return sb.toString();
    }
}
