/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> result = new ArrayList();
        treePath(root, "", result);
        return result;
    }

    public void treePath(TreeNode node, String currentString, List<String> result) {
        if (node != null) {
            if (currentString.isEmpty())
                currentString += node.val;
            else
                currentString = currentString + "->" + node.val;
            if (node.left == null && node.right == null)
                result.add(currentString);
            treePath(node.left, currentString, result);
            treePath(node.right, currentString, result);
        }
    }
}
