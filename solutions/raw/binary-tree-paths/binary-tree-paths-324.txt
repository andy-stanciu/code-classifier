/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> paths = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        dfs(root, paths, path);
        return paths;
    }

    private void dfs(TreeNode root, List<String> paths, List<Integer> path) {
        if (root != null) {
            path.add(root.val);
            if (root.left == null && root.right == null)
                paths.add(pathAsString(path));
            else {
                dfs(root.left, paths, path);
                dfs(root.right, paths, path);
            }
            path.remove(path.size() - 1);
        }
    }

    private String pathAsString(List<Integer> path) {
        StringBuilder sb = new StringBuilder();
        sb.append(path.get(0));
        for (int i = 1; i < path.size(); i++) sb.append("->").append(path.get(i));
        return sb.toString();
    }
}
