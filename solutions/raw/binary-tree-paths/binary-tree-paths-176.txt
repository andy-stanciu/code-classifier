/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        ArrayList<String> result = new ArrayList<>();
        StringBuilder record = new StringBuilder();
        record_path(root, record, result);
        return result;
    }

    public void record_path(TreeNode parent, StringBuilder record, List<String> result) {
        // base case
        if (parent.left == null && parent.right == null) {
            record.append(Integer.toString(parent.val));
            result.add(record.toString());
            return;
        }
        // general case
        record.append(Integer.toString(parent.val) + "->");
        int record_length = record.length();
        if (parent.left != null)
            record_path(parent.left, record, result);
        // revert changes to the StringBuilder object
        record.setLength(record_length);
        if (parent.right != null)
            record_path(parent.right, record, result);
    }
}
