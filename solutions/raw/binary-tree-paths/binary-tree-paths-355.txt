/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> result = new ArrayList();
        StringBuilder sb = new StringBuilder();
        if (root != null)
            traverse(root, result, sb);
        return result;
    }

    public void traverse(TreeNode root, List<String> result, StringBuilder sb) {
        sb.append(root.val);
        int length = sb.length();
        if (root.left == null && root.right == null) {
            result.add(sb.toString());
            return;
        }
        if (root.left != null) {
            sb.append("->");
            traverse(root.left, result, sb);
            sb.setLength(length);
        }
        if (root.right != null) {
            sb.append("->");
            traverse(root.right, result, sb);
            sb.setLength(length);
        }
    }
}
