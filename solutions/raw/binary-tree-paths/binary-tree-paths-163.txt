/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        List<Integer> path = new ArrayList<>();
        List<List<Integer>> allPaths = new ArrayList<>();
        dfs(root, path, allPaths);
        List<String> result = new ArrayList<>();
        for (List<Integer> list : allPaths) {
            String str = list.stream().map(Objects::toString).collect(Collectors.joining("->"));
            result.add(str);
        }
        return result;
    }

    private void dfs(TreeNode root, List<Integer> path, List<List<Integer>> allPaths) {
        if (root == null) {
            return;
        }
        path.add(root.val);
        if (root.left == null && root.right == null) {
            allPaths.add(new ArrayList<>(path));
        } else {
            dfs(root.left, path, allPaths);
            dfs(root.right, path, allPaths);
        }
        path.remove(path.size() - 1);
    }
}
