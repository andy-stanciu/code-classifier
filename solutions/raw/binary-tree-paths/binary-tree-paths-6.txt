/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Pair {

    TreeNode node;

    List<Integer> list;

    public Pair(TreeNode node, List<Integer> list) {
        this.node = node;
        this.list = list;
    }
}

class Solution {

    private void getAllPaths(TreeNode node, List<Integer> path, List<List<Integer>> allPaths) {
        if (node.left == null && node.right == null) {
            path.add(node.val);
            allPaths.add(new ArrayList<>(path));
            path.remove(path.size() - 1);
            return;
        }
        path.add(node.val);
        if (node.left != null)
            getAllPaths(node.left, path, allPaths);
        if (node.right != null)
            getAllPaths(node.right, path, allPaths);
        path.remove(path.size() - 1);
    }

    private void lvlOrder(TreeNode node, List<List<Integer>> allPaths) {
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(node, new ArrayList<>()));
        while (!q.isEmpty()) {
            Pair ele = q.peek();
            q.remove();
            node = ele.node;
            if (node.left == null && node.right == null) {
                ele.list.add(node.val);
                allPaths.add(new ArrayList<>(ele.list));
            }
            ele.list.add(node.val);
            if (node.left != null)
                q.add(new Pair(node.left, new ArrayList<>(ele.list)));
            if (node.right != null)
                q.add(new Pair(node.right, new ArrayList<>(ele.list)));
        }
    }

    public List<String> binaryTreePaths(TreeNode root) {
        // List<Integer> path = new ArrayList<>();
        List<List<Integer>> allPaths = new ArrayList<>();
        List<String> ans = new ArrayList<>();
        lvlOrder(root, allPaths);
        for (List<Integer> arr : allPaths) {
            StringBuffer str = new StringBuffer();
            for (int i = 0; i < arr.size() - 1; i++) {
                str.append(String.valueOf(arr.get(i)) + "->");
            }
            str.append(String.valueOf(arr.get(arr.size() - 1)));
            ans.add(str.toString());
        }
        return ans;
    }
}
