/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        if (root == null) {
            return new ArrayList<>();
        }
        if ((root.left == null) && (root.right == null)) {
            List<String> result = new ArrayList<>();
            result.add(String.format("%d", root.val));
            return result;
        }
        List<String> listL = binaryTreePaths(root.left);
        List<String> listR = binaryTreePaths(root.right);
        listL.addAll(listR);
        return addStringToAll(listL, String.format("%d->", root.val));
    }

    private List<String> addStringToAll(List<String> list, String prefix) {
        List<String> result = new ArrayList<>();
        for (String s : list) {
            result.add(prefix + s);
        }
        return result;
    }
}
