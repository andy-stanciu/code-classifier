/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    ArrayList<String> finalPath = new ArrayList<String>();

    public List<String> binaryTreePaths(TreeNode root) {
        if (root == null) {
            return null;
        }
        helper(root, new ArrayList<String>());
        return finalPath;
    }

    public void helper(TreeNode root, ArrayList<String> path) {
        if (root == null) {
            return;
        }
        path.add(String.valueOf(root.val));
        if (root.left == null && root.right == null) {
            //System.out.println(path);
            addInFinal(path);
        } else {
            helper(root.left, path);
            helper(root.right, path);
        }
        path.remove(path.size() - 1);
    }

    public void addInFinal(ArrayList<String> path) {
        String s = "";
        for (String p : path) {
            s += p + "->";
        }
        s = s.substring(0, s.length() - 2);
        System.out.println(s);
        finalPath.add(s);
    }
}
