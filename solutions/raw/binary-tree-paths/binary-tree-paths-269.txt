/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<String> list = new ArrayList<>();

    private void BTpath(TreeNode root, String str) {
        // Base or Cornor Case......
        if (root == null)
            return;
        // preOrder Traversal.......
        str += root.val + "->";
        BTpath(root.left, str);
        BTpath(root.right, str);
        // when we reaches the LeafNode.........
        if (root.left == null && root.right == null)
            list.add(str.substring(0, str.length() - 2));
        return;
    }

    public List<String> binaryTreePaths(TreeNode root) {
        BTpath(root, "");
        return list;
    }
}
