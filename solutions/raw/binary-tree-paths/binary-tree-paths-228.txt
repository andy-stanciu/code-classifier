/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> paths = new ArrayList<>();
        if (root == null) {
            return paths;
        }
        Stack<TreeNode> stack = new Stack<>();
        Stack<String> pathStack = new Stack<>();
        stack.push(root);
        pathStack.push(Integer.toString(root.val));
        while (!stack.isEmpty()) {
            TreeNode current = stack.pop();
            String currentPath = pathStack.pop();
            if (current.right == null && current.left == null) {
                paths.add(currentPath);
            }
            if (current.right != null) {
                stack.push(current.right);
                pathStack.push(currentPath + "->" + current.right.val);
            }
            if (current.left != null) {
                stack.push(current.left);
                pathStack.push(currentPath + "->" + current.left.val);
            }
        }
        return paths;
    }
}
