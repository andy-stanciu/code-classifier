class Solution {

    // Each completed root-to-leaf path is appended to paths.
    private List<String> paths = new ArrayList<>();

    private void doDepth(TreeNode node, String path) {
        // Each call to doDepth() builds onto its own copy of the path (so far).
        if (path.length() > 0)
            // An arrow precedes every non-root node
            path += "->";
        // Current node\'s value goes in the path
        path += Integer.toString(node.val);
        if (node.left == null && node.right == null)
            // Leaf; save completed path to paths
            paths.add(path);
        else {
            // Descend until a leaf is found
            if (node.left != null)
                doDepth(node.left, path);
            if (node.right != null)
                doDepth(node.right, path);
        }
    }

    public List<String> binaryTreePaths(TreeNode root) {
        doDepth(root, "");
        return paths;
    }
}
