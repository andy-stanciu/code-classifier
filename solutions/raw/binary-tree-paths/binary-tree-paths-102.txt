/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        if (root.left == null && root.right == null) {
            return Arrays.asList(String.valueOf(root.val));
        }
        List<String> result = new LinkedList<>();
        helper(root, "", result);
        return result;
    }

    public void helper(TreeNode node, String aux, List<String> numbers) {
        if (node == null) {
            return;
        }
        aux += String.valueOf(node.val);
        aux += "#";
        if (node.left == null && node.right == null) {
            numbers.add(String.join("->", aux.split("#")));
        }
        helper(node.left, aux, numbers);
        helper(node.right, aux, numbers);
    }
}
