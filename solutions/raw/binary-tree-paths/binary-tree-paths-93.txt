/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> res = new ArrayList<>();
        if (root == null)
            return res;
        StringBuilder sb = new StringBuilder();
        getBTPaths(res, sb, root);
        return res;
    }

    private void getBTPaths(List<String> res, StringBuilder sb, TreeNode node) {
        if (node == null)
            return;
        sb.append(node.val);
        sb.append("->");
        if (node.left == null && node.right == null) {
            //Remove last arrow
            sb.setLength(sb.length() - 2);
            res.add(sb.toString());
            return;
        }
        int lengthBeforeAdding = sb.length();
        getBTPaths(res, sb, node.left);
        sb.setLength(lengthBeforeAdding);
        getBTPaths(res, sb, node.right);
    }
}
