/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> answer = new LinkedList<>();
        StringBuilder sb = new StringBuilder();
        helper(root, sb.append(root.val), answer);
        return answer;
    }

    private void helper(TreeNode node, StringBuilder sb, List<String> answer) {
        // is leaf
        if (node.left == null && node.right == null) {
            answer.add(sb.toString());
            return;
        }
        // has left child
        if (node.left != null) {
            int size = sb.length();
            sb.append("->");
            helper(node.left, sb.append(node.left.val), answer);
            sb.delete(size, sb.length());
        }
        // has right child
        if (node.right != null) {
            int size = sb.length();
            sb.append("->");
            helper(node.right, sb.append(node.right.val), answer);
            sb.delete(size, sb.length());
        }
    }
}
