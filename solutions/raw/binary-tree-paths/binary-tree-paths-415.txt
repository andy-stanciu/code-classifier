/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    private void treePaths(TreeNode root, String temp, List<String> result) {
        if (root == null) {
            return;
        }
        if (root.left == null && root.right == null) {
            result.add(new String(temp + String.valueOf(root.val)));
            return;
        }
        treePaths(root.left, temp + String.valueOf(root.val) + "->", result);
        treePaths(root.right, temp + String.valueOf(root.val) + "->", result);
    }

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> result = new ArrayList<>();
        treePaths(root, "", result);
        return result;
    }
}
