/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    private void solve(TreeNode root, List<Integer> list, List<String> result) {
        if (root == null)
            return;
        if (root.left == null && root.right == null) {
            list.add(root.val);
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < list.size(); i++) {
                if (i == 0)
                    sb.append("" + list.get(i));
                else
                    sb.append("->" + list.get(i));
            }
            result.add(sb.toString());
            list.remove(list.size() - 1);
            return;
        }
        list.add(root.val);
        solve(root.left, list, result);
        solve(root.right, list, result);
        list.remove(list.size() - 1);
    }

    public List<String> binaryTreePaths(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        List<String> result = new ArrayList<>();
        solve(root, list, result);
        return result;
    }
}
