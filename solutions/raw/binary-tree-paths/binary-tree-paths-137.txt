/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> s = new ArrayList<>();
        if (root != null)
            binaryTre("", root, s);
        return s;
    }

    public void binaryTre(String f, TreeNode root, List<String> s) {
        if (root.left == null && root.right == null) {
            f = f + root.val;
            s.add(f);
            f = "";
            return;
        }
        f = f + root.val + "->";
        if (root.left != null) {
            binaryTre(f, root.left, s);
        }
        if (root.right != null) {
            binaryTre(f, root.right, s);
        }
    }
}
