/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public static void binaryPath(TreeNode node, List<String> list, StringBuilder str) {
        if (node == null) {
            return;
        }
        int len = str.length();
        if (str.length() > 0) {
            str.append("->");
        }
        str.append(node.val);
        if (node.left == null && node.right == null) {
            list.add(str.toString());
        } else {
            binaryPath(node.left, list, str);
            binaryPath(node.right, list, str);
        }
        str.setLength(len);
    }

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> list = new ArrayList<>();
        if (root != null) {
            binaryPath(root, list, new StringBuilder());
        }
        return list;
    }
}
