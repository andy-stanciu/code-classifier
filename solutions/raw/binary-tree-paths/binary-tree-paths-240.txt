class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> res = new ArrayList<>();
        dfs(root, new ArrayList<>(), res);
        return res;
    }

    public void dfs(TreeNode root, List<Integer> curList, List<String> res) {
        if (root == null)
            return;
        if (root.left == null && root.right == null) {
            curList.add(root.val);
            res.add(formatArrayToString(curList));
            curList.remove(curList.size() - 1);
            return;
        }
        curList.add(root.val);
        dfs(root.left, curList, res);
        dfs(root.right, curList, res);
        curList.remove(curList.size() - 1);
    }

    public String formatArrayToString(List<Integer> list) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < list.size() - 1; i++) sb.append(list.get(i)).append("->");
        sb.append(list.get(list.size() - 1));
        return sb.toString();
    }
}
