/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> ans = new ArrayList<>();
        findPath(root, ans, "");
        return ans;
    }

    static boolean isLeaf(TreeNode node) {
        if (node.left == null && node.right == null)
            return true;
        else
            return false;
    }

    static void findPath(TreeNode t, List<String> ans, String st) {
        if (isLeaf(t)) {
            if (!st.isEmpty())
                ans.add(st + "->" + t.val);
            else
                ans.add(st + t.val);
            return;
        }
        if (t.left != null) {
            if (!st.isEmpty()) {
                findPath(t.left, ans, st + "->" + t.val);
            } else {
                findPath(t.left, ans, st + t.val);
            }
        }
        if (t.right != null) {
            if (!st.isEmpty()) {
                findPath(t.right, ans, st + "->" + t.val);
            } else {
                findPath(t.right, ans, st + t.val);
            }
        }
    }
}
