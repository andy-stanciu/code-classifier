/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        List<Integer> list = new ArrayList();
        List<List<Integer>> result = new ArrayList();
        traverse(root, list, result);
        StringBuilder sb = new StringBuilder();
        List<String> strings = new ArrayList<>();
        for (List<Integer> l : result) {
            for (int i = 0; i < l.size() - 1; i++) {
                sb.append(l.get(i)).append("->");
            }
            sb.append(l.get(l.size() - 1));
            strings.add(sb.toString());
            sb.setLength(0);
        }
        return strings;
    }

    public void traverse(TreeNode node, List<Integer> list, List<List<Integer>> result) {
        if (node == null)
            return;
        list.add(node.val);
        if (node.left == null && node.right == null)
            result.add(new ArrayList<>(list));
        traverse(node.left, list, result);
        traverse(node.right, list, result);
        list.remove(list.size() - 1);
    }
}
