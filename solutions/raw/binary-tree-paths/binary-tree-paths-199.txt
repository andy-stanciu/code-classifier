/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> result = new ArrayList<>();
        if (root == null)
            return result;
        binaryTreePathsUtil(root, result, "");
        return result;
    }

    public void binaryTreePathsUtil(TreeNode root, List<String> result, String str) {
        //Base case
        if (root == null)
            return;
        if (root.left == null && root.right == null) {
            result.add(new String(str + root.val));
            return;
        }
        //Recursion and processing
        if (root.left != null) {
            binaryTreePathsUtil(root.left, result, str + root.val + "->");
        }
        if (root.right != null) {
            binaryTreePathsUtil(root.right, result, str + root.val + "->");
        }
    }
}
