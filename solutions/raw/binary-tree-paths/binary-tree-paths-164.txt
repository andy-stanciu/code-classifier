/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    private List<String> ans = new ArrayList<>();

    private StringBuilder sb = new StringBuilder();

    public List<String> binaryTreePaths(TreeNode root) {
        path(root);
        return ans;
    }

    private void path(TreeNode root) {
        if (root == null) {
            return;
        }
        int n = sb.length();
        sb.append(root.val);
        if (root.left == null && root.right == null) {
            ans.add(sb.toString());
        }
        sb.append("->");
        path(root.left);
        path(root.right);
        // BackTracking
        sb.setLength(n);
    }
}
