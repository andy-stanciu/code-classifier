/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> list = new ArrayList<>();

    public StringBuilder str = new StringBuilder("");

    public List<String> binaryTreePaths(TreeNode root) {
        int temp = str.toString().length();
        if (root == null) {
            return null;
        }
        if (root.left == null && root.right == null) {
            str.append(root.val);
            list.add(str.toString());
        } else {
            str.append(root.val + "->");
        }
        binaryTreePaths(root.left);
        binaryTreePaths(root.right);
        // str.deleteCharAt(str.toString().length()-1);
        str.setLength(str.length() - (str.length() - temp));
        return list;
    }
}
