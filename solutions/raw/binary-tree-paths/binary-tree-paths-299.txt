/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        helper(root, new StringBuilder());
        return result;
    }

    List<String> result = new ArrayList<>();

    public void helper(TreeNode node, StringBuilder sb) {
        if (node == null) {
            return;
        }
        if (node.left == null && node.right == null) {
            if (sb.length() > 0) {
                sb.append("->");
            }
            sb.append(node.val);
            result.add(sb.toString());
            return;
        }
        if (sb.length() > 0) {
            sb.append("->");
        }
        sb.append(node.val);
        int len = sb.length();
        helper(node.left, sb);
        if (sb.length() > len) {
            sb.delete(len, sb.length());
        }
        helper(node.right, sb);
        if (sb.length() > len) {
            sb.delete(len, sb.length());
        }
    }
}
