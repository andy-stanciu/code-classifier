/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        LinkedList<String> result = new LinkedList<>();
        if (root == null) {
            return result;
        }
        Queue<TreeNode> nodesQueue = new LinkedList<>();
        nodesQueue.add(root);
        Queue<StringBuilder> pathsQueue = new LinkedList<>();
        pathsQueue.add(new StringBuilder().append(root.val));
        TreeNode currNode;
        StringBuilder currPath;
        while (!nodesQueue.isEmpty()) {
            currNode = nodesQueue.remove();
            currPath = pathsQueue.remove();
            if (currNode.left == null && currNode.right == null) {
                result.add(currPath.toString());
            }
            if (currNode.left != null) {
                nodesQueue.add(currNode.left);
                pathsQueue.add(new StringBuilder(currPath).append("->").append(currNode.left.val));
                ;
            }
            if (currNode.right != null) {
                nodesQueue.add(currNode.right);
                pathsQueue.add(new StringBuilder(currPath).append("->").append(currNode.right.val));
            }
        }
        return result;
    }
}
