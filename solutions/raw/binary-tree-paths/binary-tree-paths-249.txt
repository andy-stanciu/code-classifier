/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public static void findAllPaths(TreeNode root, List<String> paths, String path) {
        if (root == null) {
            return;
        }
        if (path.length() == 0) {
            path = path + root.val;
        } else {
            path = path + "->" + root.val;
        }
        if (root.left == null && root.right == null) {
            if (paths.isEmpty()) {
                paths.add(path);
            } else if (!path.equals(paths.get(paths.size() - 1))) {
                paths.add(path);
            }
            return;
        }
        findAllPaths(root.left, paths, path);
        path = path.substring(0, path.length());
        findAllPaths(root.right, paths, path);
    }

    public List<String> binaryTreePaths(TreeNode root) {
        String path = "";
        List<String> paths = new ArrayList<>();
        findAllPaths(root, paths, path);
        if (paths.size() == 1) {
            return paths;
        }
        return paths;
    }
}
