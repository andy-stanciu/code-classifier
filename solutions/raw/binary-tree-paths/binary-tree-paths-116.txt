/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public void generatePaths(List<String> res, TreeNode root, StringBuilder str) {
        int lenBefore = str.length();
        str.append(root.val);
        if (root.left == null && root.right == null) {
            res.add(str.toString());
        } else {
            str.append("->");
            if (root.left != null) {
                generatePaths(res, root.left, str);
            }
            if (root.right != null) {
                generatePaths(res, root.right, str);
            }
            str.setLength(lenBefore + String.valueOf(root.val).length());
        }
        str.setLength(lenBefore);
    }

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> res = new ArrayList<>();
        if (root != null) {
            generatePaths(res, root, new StringBuilder());
        }
        return res;
    }
}
