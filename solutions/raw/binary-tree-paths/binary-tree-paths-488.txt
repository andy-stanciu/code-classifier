class Solution {

    //DFS(preorder)
    //global ArrayList
    List<String> ans = new ArrayList<>();

    public List<String> binaryTreePaths(TreeNode root) {
        if (//base case for the null graph
        root == null)
            //returning the Empty ArrayList
            return ans;
        //we are passing the String because it has cyclic dependency on each recursive call
        add(root, "");
        //returning the ArrayList containing the path
        return ans;
    }

    public void add(TreeNode root, String str) {
        if (//base case when one of the subtree is null
        root == null)
            return;
        if (//when we reach the leaf node means that we have got one path
        root.left == null && root.right == null) {
            //adding the value to the String
            str += root.val;
            //adding the entire path to the String
            ans.add(str);
            //returning in order to backtrack and check that any subtree is left or not
            return;
        } else {
            //adding the value to the String
            str += root.val;
            if (//if the node has left or right child we are adding the arrow
            root.left != null || root.right != null)
                str += "->";
        }
        //traversing the left half recursively
        add(root.left, str);
        //traversing the right half recursively
        add(root.right, str);
        //all function completed and deleting the current activation block, going back to the calling function
        return;
    }
}
//Pleasse do Upvote, it helps a lot
