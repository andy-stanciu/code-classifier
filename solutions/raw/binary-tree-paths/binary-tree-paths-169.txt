/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> list = new ArrayList<>();
        List<Integer> tempList = new ArrayList<>();
        getBinaryTreePaths(list, tempList, root);
        return list;
    }

    public static void getBinaryTreePaths(List<String> list, List<Integer> tempList, TreeNode root) {
        if (root == null) {
            return;
        }
        tempList.add(root.val);
        if (root.left == null && root.right == null) {
            addTolist(list, tempList);
        } else {
            getBinaryTreePaths(list, tempList, root.left);
            getBinaryTreePaths(list, tempList, root.right);
        }
        tempList.remove(tempList.size() - 1);
    }

    public static void addTolist(List<String> list, List<Integer> tempList) {
        String str = "";
        System.out.println(tempList);
        for (int i = 0; i < tempList.size(); i++) {
            if (i == tempList.size() - 1) {
                str += String.valueOf(tempList.get(i));
            } else {
                str += String.valueOf(tempList.get(i)) + "->";
            }
        }
        list.add(str);
    }
}
