/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    private List<String> list = new ArrayList<>();

    public List<String> binaryTreePaths(TreeNode root) {
        if (root != null) {
            traverseBT(root, "");
        }
        return list;
    }

    private void traverseBT(TreeNode node, String str) {
        if (node == null) {
            return;
        }
        if (node.left == null && node.right == null) {
            list.add(str + node.val);
        }
        str += node.val + "->";
        traverseBT(node.left, str);
        traverseBT(node.right, str);
    }
}
