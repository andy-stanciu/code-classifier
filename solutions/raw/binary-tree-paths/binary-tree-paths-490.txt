class Solution {

    public static void fun(TreeNode root, List<String> store, String path) {
        if (root == null)
            return;
        TreeNode l = root.left, r = root.right;
        if (root.left == null && root.right == null)
            path += (Integer.toString(root.val));
        else
            path += (Integer.toString(root.val) + "->");
        if (root.left == null && root.right == null) {
            store.add(path);
            path = "";
        } else {
            fun(root.left, store, path);
            fun(root.right, store, path);
        }
    }

    // Time Complexity : O(n)
    public List<String> binaryTreePaths(TreeNode root) {
        String path = "";
        List<String> store = new ArrayList<>();
        // Base Case
        if (root == null)
            return store;
        fun(root, store, path);
        return store;
    }
    // Time Complexity : O(n)
    // Space Complexity : O(n)
}
