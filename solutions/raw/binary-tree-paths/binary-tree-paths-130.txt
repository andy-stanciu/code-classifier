/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<String> result = new ArrayList<String>();

    public List<String> binaryTreePaths(TreeNode root) {
        return levelOrderTreversal(root);
    }

    // level order traversal
    List<String> levelOrderTreversal(TreeNode root) {
        if (root == null) {
            return result;
        }
        Queue<TreeNode> treeNode = new LinkedList<TreeNode>();
        Queue<String> paths = new LinkedList<String>();
        treeNode.add(root);
        paths.add("");
        while (!treeNode.isEmpty()) {
            TreeNode node = treeNode.remove();
            String path = paths.remove();
            if (node.left == null && node.right == null) {
                result.add(path + node.val);
            }
            if (node.left != null) {
                treeNode.add(node.left);
                paths.add(path + node.val + "->");
            }
            if (node.right != null) {
                treeNode.add(node.right);
                paths.add(path + node.val + "->");
            }
        }
        return result;
    }
}
