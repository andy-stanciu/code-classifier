/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<String> answer = new ArrayList<>();

    public List<String> binaryTreePaths(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        dfs(root, sb);
        return answer;
    }

    void dfs(TreeNode root, StringBuilder sb) {
        if (root == null)
            return;
        int addedLength = 0;
        if (sb.length() == 0) {
            addedLength = String.valueOf(root.val).length();
        } else {
            addedLength = String.valueOf(root.val).length() + 2;
            sb.append("->");
        }
        sb.append(String.valueOf(root.val));
        //if leaf
        if (root.left == null && root.right == null) {
            answer.add(sb.toString());
            sb.setLength(sb.length() - addedLength);
            return;
        }
        dfs(root.left, sb);
        dfs(root.right, sb);
        sb.setLength(sb.length() - addedLength);
    }
}
