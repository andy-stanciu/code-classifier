/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    List<String> list = new ArrayList();

    public List<String> binaryTreePaths(TreeNode root) {
        if (root.left == null && root.right == null) {
            list.add(String.valueOf(root.val));
        } else {
            StringBuilder sb = new StringBuilder();
            sb.append(root.val);
            readTree(root.left, new StringBuilder(sb));
            readTree(root.right, new StringBuilder(sb));
        }
        return list;
    }

    private void readTree(TreeNode node, StringBuilder sb) {
        if (node == null) {
            return;
        }
        // s = s + "->" + node.val;
        sb.append("->");
        sb.append(node.val);
        if (node.left == null && node.right == null) {
            list.add(sb.toString());
        } else {
            readTree(node.left, new StringBuilder(sb));
            readTree(node.right, new StringBuilder(sb));
        }
    }
}
