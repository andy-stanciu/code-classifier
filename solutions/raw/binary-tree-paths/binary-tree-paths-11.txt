/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<String> ans = new ArrayList<>();

    public List<String> binaryTreePaths(TreeNode root) {
        ArrayList<Integer> arr = new ArrayList<>();
        solve(root, arr);
        return ans;
    }

    public Boolean solve(TreeNode root, ArrayList<Integer> arr) {
        if (root == null) {
            return false;
        }
        arr.add(root.val);
        Boolean left = solve(root.left, arr);
        Boolean right = solve(root.right, arr);
        if (left == true || right == true) {
            arr.remove(arr.size() - 1);
            return true;
        }
        if (left == false && right == false) {
            String s = "";
            for (int i = 0; i < arr.size(); i++) {
                s += arr.get(i) + "";
                if (i < arr.size() - 1) {
                    s += "->";
                }
            }
            ans.add(s);
            arr.remove(arr.size() - 1);
            return true;
        }
        return true;
    }
}
