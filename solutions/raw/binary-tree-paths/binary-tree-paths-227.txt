/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<String> binaryTreePaths(TreeNode root) {
        List<List<Integer>> arr = new ArrayList<>();
        paths(root, new ArrayList<>(), arr);
        List<String> ans = new ArrayList<>();
        for (List<Integer> list : arr) {
            String str = list.toString();
            str = str.replace("[", "");
            str = str.replace("]", "");
            str = str.replace(", ", "->");
            ans.add(str);
        }
        return ans;
    }

    public void paths(TreeNode root, List<Integer> subArr, List<List<Integer>> arr) {
        subArr.add(root.val);
        if (root.left == null && root.right == null) {
            arr.add(new ArrayList<>(subArr));
            subArr.remove(subArr.size() - 1);
            return;
        }
        if (root.left != null)
            paths(root.left, subArr, arr);
        if (root.right != null)
            paths(root.right, subArr, arr);
        subArr.remove(subArr.size() - 1);
    }
}
