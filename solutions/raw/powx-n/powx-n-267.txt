class Solution {

    public double myPow(double x, int n) {
        if (n == 0) {
            return 1.0;
        }
        // If n is negative, we must use the reciprocal of x
        if (n < 0) {
            if (n == Integer.MIN_VALUE) {
                // Special handling to prevent overflow when n = -2147483648
                // Reduce the problem to x^(-(n + 1)) and adjust at the end
                return 1 / (myPow(x, -(n + 1)) * x);
            } else {
                return 1 / myPow(x, -n);
            }
        }
        // Divide and conquer step
        double halfPow = myPow(x, n / 2);
        double result = halfPow * halfPow;
        // If n is odd, multiply by x once more
        if (n % 2 != 0) {
            result *= x;
        }
        return result;
    }
}
