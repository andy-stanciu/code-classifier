class Solution {

    private double helper(double x, int n) {
        //base case
        if (n == 0)
            return 1.0;
        //recursively call for x^n/2
        double half = helper(x, n / 2);
        //if n is even, return half * half
        //if n is odd, return x * (half * half)
        return (n % 2 == 0 ? half * half : half * half * x);
    }

    public double myPow(double x, int n) {
        //0 raised to anything is still 0 : 0^n = 0 for any positive n
        if (x == 0)
            return 0;
        //helper call
        double ans = helper(x, Math.abs(n));
        //if n is negative, return reciprocal of ans; otherwise return ans as is
        return (n < 0 ? (1 / ans) : ans);
    }
}
