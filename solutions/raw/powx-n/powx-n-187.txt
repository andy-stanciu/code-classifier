class Solution {

    // Helper method for recursive exponentiation
    public static double cal(double x, int n) {
        // Base cases
        // x^0 = 1
        if (n == 0)
            return 1;
        // x^1 = x
        if (n == 1)
            return x;
        // Recursive case: calculate the result for n / 2
        double t = cal(x, n / 2);
        // If n is even, return (x^(n/2))^2
        if (n % 2 == 0) {
            return t * t;
        } else {
            // If n is odd, return x * (x^(n/2))^2
            return x * t * t;
        }
    }

    // Main method for power calculation
    public double myPow(double x, int n) {
        // Calculate power using the helper function
        double ans = cal(x, Math.abs(n));
        // If n is positive, return the result, otherwise return the reciprocal
        if (n >= 0) {
            return ans;
        } else {
            return 1 / ans;
        }
    }
}
