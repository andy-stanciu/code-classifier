class Solution {

    public double myPow(double x, int n) {
        // x^n
        // return right the way without any calculation
        // 0^n is always 0
        if (x == 0)
            return 0;
        // x^0 is always 1
        if (n == 0)
            return 1.0;
        // this would take care of negative number
        if (n < 0) {
            x = 1 / x;
            n = -n;
        }
        return helper(x, n);
    }

    private double helper(double x, int n) {
        // base case
        if (n == 0) {
            return 1.0;
        }
        // recursive part
        // we try to divide the exponent by 2 everytime until it hit the base case
        double half = helper(x, n / 2);
        if (n % 2 == 0) {
            // the exponent is an even number
            return half * half;
        } else {
            // the exponent is an odd number
            return half * half * x;
        }
    }
}
