class Solution {

    public double myPow(double x, int n) {
        // Convert the exponent to a long to handle large negative numbers safely.
        long dividing = n;
        double ans = 1;
        // If n is negative, convert it to positive and track it by multiplying dividing by -1.
        if (n < 0)
            dividing *= -1;
        // Loop until dividing becomes zero
        while (dividing > 0) {
            // If dividing is even, square the base (x) and halve the exponent (dividing).
            if (dividing % 2 == 0) {
                x = x * x;
                dividing = dividing / 2;
            } else {
                // If dividing is odd, multiply the current answer by the base (x) and decrement dividing by 1.
                ans = ans * x;
                dividing = dividing - 1;
            }
        }
        // If the original exponent n was negative, take the reciprocal of the result.
        if (n < 0)
            ans = 1 / ans;
        return ans;
    }
}
