class Solution {

    public double myPow(double x, int n) {
        double result = 1.0;
        if (n == Integer.MIN_VALUE) {
            // adjusting x as Integer.MAX_VALUE is very big to represent
            x *= x;
            // reducing power to avoid any overflow.
            n /= 2;
        }
        if (n < 0) {
            // if the power is negative the we can make x inverse & -ve of power. {e.g. : 2^(-2) == (1/2)^2}
            x = 1 / x;
            // -ve power becoming +ve
            n = -n;
        }
        while (n > 0) {
            // Fast Exponentiation Logic to minimise the calculation.
            if ((n & 1) == 1) {
                result *= x;
            }
            x *= x;
            n >>= 1;
        }
        return result;
    }
}
