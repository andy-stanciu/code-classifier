class Solution {

    /**
     *          ***  No Extra Space  ****
     *
     * As we know The sum of n natural numbers is represented as [n(n+1)]/2
     * like
     * 1 + 2 + 3 + 4 + 5 + 6 = 21
     * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28
     *
     * n = (n * (n + 1) ) /2
     * 6 = (6 * 7) / 2 = 42 / 2 = 21
     * 7 = (7 * 8) / 2 = 28
     *
     * So, we can get the n natural numbers and also get the summation of the values of the array.
     * And if we will get the difference we can get the missing number.
     *
     * Time complexity - O(n)
     * Space complexity - O(1)
     */
    public int missingNumber(int[] nums) {
        int range = nums.length;
        // sum of n natural numbers
        int sumOfNNaturalNumbers = (range * (range + 1)) / 2;
        int sum = 0;
        for (int i = 0; i < range; i++) {
            sum += nums[i];
        }
        return sumOfNNaturalNumbers - sum;
    }

    /**
     *            ***  Using Extra Space  ****
     *  Creating a extra array to mark the if the value has occurred or not.
     *
     *  Time complexity - O(n)
     *  Space complexity - O(n)
     */
    public int missingNumber_extra_space(int[] nums) {
        int range = nums.length;
        // As one of the value is missing so, taking the length as range + 1
        boolean[] occurrenceFlag = new boolean[range + 1];
        for (int i = 0; i < range; i++) {
            occurrenceFlag[nums[i]] = true;
        }
        for (int i = 0; i < occurrenceFlag.length; i++) {
            if (!occurrenceFlag[i]) {
                return i;
            }
        }
        return -1;
    }
}
