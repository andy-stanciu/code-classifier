class Solution {

    // brute approach using sorting
    private int usingSorting(int[] nums, int n) {
        Arrays.sort(nums);
        int i = 0;
        for (i = 0; i < n; i++) {
            if (nums[i] != i) {
                return i;
            }
        }
        return i;
    }

    // better approach using hashing
    private int usingHashing(int[] nums, int n) {
        int[] hash = new int[n + 1];
        for (int i = 0; i < n; i++) {
            hash[nums[i]]++;
        }
        for (int i = 0; i < n + 1; i++) {
            if (hash[i] == 0) {
                return i;
            }
        }
        return -1;
    }

    // optimal approach using summation
    private int usingSummation(int[] nums, int n) {
        int consequtiveSum = (n * (n + 1)) / 2;
        int arrayElementsSum = 0;
        for (int i = 0; i < n; i++) {
            arrayElementsSum += nums[i];
        }
        return consequtiveSum - arrayElementsSum;
    }

    public int missingNumber(int[] nums) {
        return usingSummation(nums, nums.length);
    }
}
