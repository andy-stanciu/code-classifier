class Solution {

    public boolean isAnagram(String s, String t) {
        boolean value;
        if (s.length() > t.length()) {
            value = test(s, t);
        } else {
            value = test(t, s);
        }
        return value;
    }

    public static boolean test(String s, String t) {
        Map<Character, Integer> hm3 = new HashMap<Character, Integer>();
        for (int i = 0; i < s.length(); i++) {
            if (hm3.containsKey(s.charAt(i))) {
                hm3.put(s.charAt(i), hm3.get(s.charAt(i)) + 1);
            } else {
                hm3.put(s.charAt(i), 1);
            }
        }
        for (int i = 0; i < t.length(); i++) {
            if (hm3.containsKey(t.charAt(i))) {
                hm3.put(t.charAt(i), hm3.get(t.charAt(i)) - 1);
            } else {
                return false;
            }
        }
        Set<Character> keys = hm3.keySet();
        for (Character k : keys) {
            if (hm3.get(k) > 0)
                return false;
        }
        return true;
    }
    /*
     * <Character, Integer> hm1 = new HashMap<Character, Integer>();
     * Map<Character, Integer> hm2 = new HashMap<Character, Integer>();
     * 
     * hm1 = hash(s, hm1);
     * hm2 = hash(t, hm2);
     * if (hm1.equals(hm2))
     * return true;
     * else
     * return false;
     * }
     * public static Map<Character, Integer> hash(String s, Map<Character, Integer>
     * hm1) {
     * for (int i = 0; i < s.length(); i++) {
     * if (hm1.containsKey(s.charAt(i))) {
     * hm1.put(s.charAt(i), hm1.get(s.charAt(i)) + 1);
     * } else {
     * hm1.put(s.charAt(i), 1);
     * }
     * }
     * return hm1;
     */
}
