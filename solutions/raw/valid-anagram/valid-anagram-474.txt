class Solution {

    public static boolean isAnagram(String s, String t) {
        Map<String, Integer> map = new HashMap<>();
        char[] c1 = s.toCharArray();
        char[] c2 = t.toCharArray();
        //s ab sorted ho gya not like string immutable
        Arrays.sort(c1);
        Arrays.sort(c2);
        //sorted arr to str
        String sorted_s = new String(c1);
        //sorted arr to str
        String sorted_t = new String(c2);
        System.out.println(sorted_s + "#" + sorted_t);
        //System.out.println(c1+"#"+c2);--garbage values
        if (//arr we can\'t compare//rem == compares reference not values
        sorted_s.equals(sorted_t))
            return true;
        else
            return false;
    }
}
//SOLUTION:-
//         if(s.length()!=t.length())
//         {
//             return false;
//         }
//         Map<Character,Integer> mapy=new HashMap<>();
//         for(char c : s.toCharArray())//c=each letter/key
//         {
//             mapy.put(c, mapy.getOrDefault(c,0)+1);//at 1st only 1 as freq =1 pehle na!!!
//         }
//         for(char c : t.toCharArray())//This function converts to string to array to play with it
//         {
//             if(!mapy.containsKey(c) || mapy.get(c)==0)
//             {
//                 return false;
//             }
//             mapy.put(c,mapy.get(c)-1);//c=arr[i]
//         }
//         for(int count : mapy.values())
//         {
//             if(count!=0)
//             return false;
//         }
//         return true;
//     }
// }
// class Solution {
//     public static boolean isAnagram(String s, String t) {
//         //hashmap
//         if (s.length() != t.length()) {
//             return false; // Anagrams must have the same length
//         }
//         Map<Character, Integer> charCount = new HashMap<>();
//         //REM CHARCOUNT IS A MAP NOT FUNCTION ;)
//         // Count occurrences in the first string
//         for (char c : s.toCharArray())
//         {
//             //System.out.println(c);
//             charCount.put(c, charCount.getOrDefault(c, 0) + 1);//map_name.put(k,v);
//         }//map_name.getOrDefault(k,val to return if key \'c\' is not present)...same as get function................so no need of else put(key,1)line very intelligent
//         // Decrement occurrences in the second string
//         for (char c : t.toCharArray()) {
//             if (!charCount.containsKey(c) || charCount.get(c) == 0) {
//                 return false; // Character not in the first string or count is already 0
//             }
//             charCount.put(c, charCount.get(c) - 1);
//         }
//         // Check if all counts are zero
//         for (int count : charCount.values()) {//mapname.values return values in array form
//             if (count != 0) {
//                 return false;
//             }
//         }
//         return true;
//     }
// }
