/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseList(ListNode head) {
        // 1st Approach --------> Solve with Stack
        // ListNode temp = head;
        // Stack<Integer> st = new Stack<>();
        // while(temp != null){
        //     st.push(temp.val);
        //     temp = temp.next;
        // }
        // temp = head;
        // while(temp!=null){
        //     temp.val = st.peek();
        //     st.pop();
        //     temp = temp.next;
        // }
        // return head;
        //  2st Approach -----> ITERATIVE SOLUTION --------------------------
        // ListNode prev = null; // Intitally the prev node is null.
        // ListNode current = head; // Start with the head as the currentNode
        // while(current!=null){
        //     ListNode tempNode = current.next; // Temporarily store the next node.
        //     current.next = prev;
        //     prev = current;
        //     current = tempNode;
        // }
        // return prev;
        // 3rd Approach --------->  RECURSIVE SOLUTION. ------------------------
        if (head == null || head.next == null) {
            return head;
        }
        // Recursively reverse the rest of the list
        ListNode newHead = reverseList(head.next);
        // Reverse the current node\'s pointer
        head.next.next = head;
        // Set the current node\'s next to null
        head.next = null;
        // Return the new head of the reversed list
        return newHead;
    }
}
