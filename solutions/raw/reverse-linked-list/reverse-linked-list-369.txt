/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    // //
    // public ListNode reverse(ListNode tempHead, ListNode head){
    //         if(tempHead.next==null){
    //             head.next = tempHead;
    //             return tempHead;
    //         }
    //         ListNode temp = tempHead;
    //         tempHead = tempHead.next;
    //         ListNode node = reverse(tempHead,head);
    //         node.next = temp;
    //         return temp;
    //     }
    public ListNode reverseList(ListNode head) {
        // ------------Using recursion---------------
        // if(head==null){
        //     return null;
        // }
        // ListNode endNode = reverse(head,head);
        // ListNode newHead = head.next;
        // head.next = null;
        // return newHead;
        // ------------------without recursion----------------
        if (head == null) {
            return null;
        }
        ListNode backNode = head;
        ListNode currentNode = head.next;
        // temporary
        ListNode frontNode = new ListNode(0);
        while (currentNode != null) {
            frontNode = currentNode.next;
            currentNode.next = backNode;
            backNode = currentNode;
            currentNode = frontNode;
        }
        head.next = null;
        return backNode;
    }
}
