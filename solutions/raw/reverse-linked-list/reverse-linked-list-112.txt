/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseList(ListNode head) {
        // Initialize current node as the head node and previous node as null
        ListNode curr = head;
        ListNode prev = null;
        // Iterate through the list until the current node becomes null
        while (curr != null) {
            // Store the next node of the current node in a temporary variable
            //We are storing the next node in temp because the link of curr will broke from the curr.next
            ListNode temp = curr.next;
            // Make the current node point to the previous node
            //Basically we are reversing the direction of the links
            curr.next = prev;
            // Update the previous node to the current node
            prev = curr;
            // Move to the next node in the list
            curr = temp;
        }
        // Return the new head of the reversed list
        return prev;
    }
}
