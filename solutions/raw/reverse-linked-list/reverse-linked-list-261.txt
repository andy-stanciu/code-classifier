/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseList(ListNode head) {
        //handle edge case - if list is null
        if (head == null)
            return null;
        // else create 3 pointers to keep track of curr, prev and next
        ListNode prev = null;
        ListNode next = null;
        // curr points to head
        ListNode curr = head;
        // while we have elements in LL
        // make the curr point to its prev iteratively till you are at the end of the list, without losing the next node in the intermediate steps
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        // at the end prev points to the new head
        return prev;
    }
}
