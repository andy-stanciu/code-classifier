/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/*3 var, curr = current node in linked list
         prev = previous node of current node
         right = right side node of current node, to keep track of linked list
         
         **logic**
         assign right = curr.next // to keep track of right side remaining linked list after current assign to previous
         cure.next = prev //reversing the linked
         prev = curr // move prev to the current node to keep track of last node in reverse linked
         curr = right //Move current to right, which is the next node which linked to reverse
         //keep doing that until current become null, at that time prev poinitinng to last node
         return prev

*/
class Solution {

    public ListNode reverseList(ListNode head) {
        ListNode prev = null, curr = head, right;
        while (curr != null) {
            right = curr.next;
            curr.next = prev;
            prev = curr;
            curr = right;
        }
        return prev;
    }
}
