/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseList(ListNode head) {
        ListNode temp = head;
        ListNode front = head;
        ListNode prev = null;
        while (temp != null) {
            // move front to point to next node
            front = temp.next;
            //point the current node to the node behind it
            temp.next = prev;
            // move the "prev" pointer to next node so that it can be pointed in the next iteration
            prev = temp;
            // update the temp, so that the next node\'s pointer can be reversed
            temp = front;
        }
        //new head will be "prev" because at last both temp and front will point to null and
        head = prev;
        // prev will be pointing to last element.
        return head;
    }
}
