/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseList(ListNode head) {
        // Check if the list is empty or has only one element
        if (head == null || head.next == null) {
            // If so, it\'s already reversed, return the head
            return head;
        }
        // Initialize pointers for previous, current, and next nodes
        ListNode prev = null;
        ListNode curr = head;
        ListNode nextNode = curr.next;
        // Traverse the list and reverse pointers
        while (curr != null) {
            // Reverse the pointer of the current node to point to the previous node
            curr.next = prev;
            // Move the pointer
            prev = curr;
            // Move the pointer
            curr = nextNode;
            if (nextNode != null) {
                // Move the pointer
                nextNode = curr.next;
            }
        }
        // Now, the \'curr\' node is pointing to \'null\'
        // Update the head to point to the new first node (which was the last node of the original list)
        head = prev;
        return head;
    }
}
