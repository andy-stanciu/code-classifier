/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    static int c = 0;

    List<Integer> list = new ArrayList<>();

    public List<Integer> postorderTraversal(TreeNode root) {
        //calling a another function to store the postorder in list array
        printtree(root);
        return list;
    }

    public void printtree(TreeNode node) {
        //return if reached the end of the tree
        if (node == null)
            return;
        // To  print the left side of the binary tree first
        printtree(node.left);
        // To print the right side of the binary tree
        printtree(node.right);
        list.add(node.val);
    }
}
