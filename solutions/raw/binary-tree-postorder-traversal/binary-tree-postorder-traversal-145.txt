/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    // Recursive solution :-----
    //  public static  void postOrder(TreeNode n ,List<Integer> temp) {
    //     if (n == null)
    //         return;
    //     postOrder(n.left , temp);
    //     postOrder(n.right  , temp);
    //     temp.add(n.val);
    // }
    public List<Integer> postorderTraversal(TreeNode r) {
        Stack<TreeNode> st = new Stack<>();
        //      Stack<TreeNode> s2 = new Stack<>();
        List<Integer> ans = new ArrayList<>();
        if (r == null)
            return ans;
        //      s1.push(r);
        //      while(!s1.isEmpty()){
        //      TreeNode root = s1.peek();
        //         s2.push(s1.pop());
        //        if(root.left != null) s1.push(root.left);
        //        if(root.right != null) s1.push(root.right);
        //      }
        //      while(!s2.isEmpty()){
        //         TreeNode root = s2.peek();
        //         ans.add(root.val);
        //         s2.pop();
        //      }
        TreeNode cur = r;
        TreeNode lastVisited = null;
        while (cur != null || !st.isEmpty()) {
            if (cur != null) {
                st.push(cur);
                cur = cur.left;
            } else {
                TreeNode peekNode = st.peek();
                // If right is not processed and exists, go to right
                if (peekNode.right != null && lastVisited != peekNode.right) {
                    cur = peekNode.right;
                } else {
                    // Process the node, because either right is processed or does not exist
                    ans.add(peekNode.val);
                    lastVisited = st.pop();
                }
            }
        }
        return ans;
    }
}
