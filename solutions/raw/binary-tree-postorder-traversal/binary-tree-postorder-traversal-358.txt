/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Integer> postorderTraversal(TreeNode root) {
        Stack<TreeNode> s = new Stack<>();
        ArrayList<Integer> ans = new ArrayList<>();
        if (root == null)
            return ans;
        TreeNode lastvisited = null;
        TreeNode temp = root;
        while (temp != null || s.size() > 0) {
            if (temp != null) {
                s.add(temp);
                temp = temp.left;
            } else {
                temp = s.peek();
                if (temp.right != null && lastvisited != temp.right) {
                    temp = temp.right;
                } else {
                    lastvisited = s.pop();
                    ans.add(temp.val);
                    temp = null;
                }
            }
        }
        return ans;
    }
}
