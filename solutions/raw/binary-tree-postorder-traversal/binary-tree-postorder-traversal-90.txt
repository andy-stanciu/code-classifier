class Solution {

    // for recursion need to declare it global
    ArrayList<Integer> a = new ArrayList<>();

    public List<Integer> postorderTraversal(TreeNode root) {
        // using recursion
        if (root == null) {
            return a;
        }
        postorderTraversal(root.left);
        postorderTraversal(root.right);
        a.add(root.val);
        return a;
        //below is the non recursion approach using Stack
        //      ArrayList<Integer> a = new ArrayList<>();
        //	if (root == null) {
        //			return a;
        //		}
        // 		Stack<TreeNode> s = new Stack<>();
        // 		s.push(root);
        // 		while(!s.empty()){
        //             TreeNode temp = s.peek();
        //             if(temp.right!=null) s.push(temp.right);
        //             if(temp.left!=null) s.push(temp.left);
        //             if(temp.left == null && temp.right == null){
        //                 a.add(temp.val);
        //                 s.pop();
        //             }
        /*  basically marking a node as null/visited, because 
			  when we come again across this node then it should not be 
			  processed again, so making its children null. */
        //            temp.left = null;
        //            temp.right = null;
        // 		}
        //         return a;
    }
}
