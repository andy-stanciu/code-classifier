/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Pair {

    TreeNode node;

    boolean flag;

    public Pair(TreeNode node, boolean flag) {
        this.node = node;
        this.flag = flag;
    }
}

class Solution {

    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> postorder = new ArrayList<>();
        if (root == null) {
            return postorder;
        }
        Stack<Pair> stack = new Stack<>();
        stack.push(new Pair(root, false));
        Pair pair = null;
        TreeNode node = null;
        boolean flag = false;
        while (!stack.isEmpty()) {
            pair = stack.pop();
            node = pair.node;
            flag = pair.flag;
            if (flag == true) {
                postorder.add(node.val);
                continue;
            }
            stack.push(new Pair(node, true));
            if (node.right != null) {
                stack.push(new Pair(node.right, false));
            }
            if (node.left != null) {
                stack.push(new Pair(node.left, false));
            }
        }
        return postorder;
    }
}
