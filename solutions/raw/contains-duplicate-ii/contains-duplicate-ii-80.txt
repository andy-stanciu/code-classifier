class Solution {

    public boolean containsNearbyDuplicate(int[] nums, int k) {
        // return false if k=0 since we can\'t compare the numder with itself
        if (k == 0) {
            return false;
        }
        // create a hashset to store k values
        HashSet<Integer> hs = new HashSet<>();
        int i = 0;
        int j = 0;
        // iterate till end of nums
        while (j < nums.length) {
            // return true if value is already present in hashset
            if (hs.contains(nums[j])) {
                return true;
            }
            // populate hashset with the first k values
            if (j - i < k) {
                hs.add(nums[j]);
                j++;
            } else // after reaching k, remove first value, add current value and move the window
            if (j - i == k) {
                hs.remove(nums[i]);
                hs.add(nums[j]);
                i++;
                j++;
            }
        }
        // return false if no match is found during traversal
        return false;
    }
}
