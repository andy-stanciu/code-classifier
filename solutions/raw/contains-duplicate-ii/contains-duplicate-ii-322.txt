class Solution {

    public boolean containsNearbyDuplicate(int[] nums, int k) {
        int low = 0, high = 0;
        if (nums.length == 1) {
            if (k <= 1) {
                return false;
            }
            return true;
        }
        // first get to the k size
        HashMap<Integer, Boolean> m = new HashMap<>();
        while (high < nums.length && high - low <= k) {
            if (m.containsKey(nums[high]) == true) {
                return true;
            }
            m.put(nums[high], true);
            high++;
        }
        // now apply sliding window
        while (high < nums.length) {
            m.put(nums[low], false);
            low++;
            if (m.containsKey(nums[high]) == true && m.get(nums[high]) == true) {
                return true;
            }
            m.put(nums[high], true);
            high++;
        }
        return false;
    }
}
