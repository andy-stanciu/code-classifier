class Solution {

    public boolean containsNearbyDuplicate(int[] nums, int k) {
        // Initialize a HashMap to store the value and its latest index in the array.
        HashMap<Integer, Integer> map = new HashMap<>();
        // Loop through the array `nums`.
        for (int i = 0; i < nums.length; i++) {
            // Check if the current number is already present in the HashMap.
            if (!map.containsKey(nums[i])) {
                // If it\'s not in the map, add the number and its index.
                map.put(nums[i], i);
            } else {
                // If it\'s already in the map, calculate the absolute difference
                // between the current index `i` and the stored index of this number.
                if (Math.abs(map.get(nums[i]) - i) <= k) {
                    // If the difference is less than or equal to `k`, return `true`.
                    return true;
                } else {
                    // If the difference is greater than `k`, update the index of the number
                    // to the current index `i`.
                    map.replace(nums[i], i);
                }
            }
        }
        // If no such pair is found, return `false`.
        return false;
    }
}
