public class Solution {

    public ListNode detectCycle(ListNode head) {
        if (head == null || head.next == null)
            return null;
        // STEP-1 : reach inside the cycle
        ListNode fast = head;
        ListNode slow = head;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            // we are in the cycle now
            if (fast == slow)
                break;
        }
        // if(fast != slow), it means there was no cycle, then it means we do not have the cycle node
        if (fast != slow)
            return null;
        // STEP-2 : move the head node and slow until the meet
        ListNode firstPointer = head;
        ListNode secondPointer = slow;
        while (firstPointer != secondPointer) {
            firstPointer = firstPointer.next;
            secondPointer = secondPointer.next;
        }
        return firstPointer;
    }
}
