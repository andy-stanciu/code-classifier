/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode detectCycle(ListNode head) {
        if (head == null || head.next == null || head.next.next == null) {
            return null;
        }
        ListNode slow = head.next;
        ListNode fast = head.next.next;
        while (slow != fast) {
            if (slow == null || slow.next == null || fast == null || fast.next == null || fast.next.next == null) {
                return null;
            }
            slow = slow.next;
            fast = fast.next.next;
        }
        // now we have slow = fast
        // now to detect first position of cycle start x = z-y
        ListNode curr = head;
        ListNode prev = slow;
        while (curr != slow) {
            prev = slow;
            slow = slow.next;
            curr = curr.next;
        }
        // now slw == curr
        return slow;
    }
}
