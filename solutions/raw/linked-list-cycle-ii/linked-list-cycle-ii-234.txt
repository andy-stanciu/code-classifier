/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode detectCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                ListNode temp = head;
                while (temp != slow) {
                    temp = temp.next;
                    slow = slow.next;
                }
                return slow;
            }
        }
        return null;
    }
}
//Brute Force O(N)
// public class Solution {
//     public ListNode detectCycle(ListNode head) {
//         List<ListNode> list = new ArrayList();
//         ListNode temp = head;
//         while(temp!=null){
//             if(!list.contains(temp)){
//                 list.add(temp);
//             }
//             else{
//                 return temp;
//             }
//             temp = temp.next;
//         }
//         return null;
//     }
// }
