/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode detectCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            // If fast meets slow, there is a cycle
            if (// Find the starting node of the cycle
            fast == slow)
                return findreturnee(fast, slow, head);
        }
        // No cycle found, return null
        return null;
    }

    public ListNode findreturnee(ListNode fast, ListNode slow, ListNode head) {
        ListNode returnee = head;
        // Move both pointers until they meet
        while (slow != returnee) {
            slow = slow.next;
            returnee = returnee.next;
        }
        // Return the starting node of the cycle
        return returnee;
    }
}
