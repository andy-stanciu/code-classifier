public class Solution {

    public ListNode detectCycle(ListNode head) {
        // slow and fast, both starting at the head
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            // move slow by 1 step and fast by 2 steps to detect a cycle
            slow = slow.next;
            fast = fast.next.next;
            // if slow and fast meet, a cycle is detected
            if (slow == fast) {
                // reset slow to head to find cycle start
                slow = head;
                // optional: count steps to track cycle length
                int pos = 0;
                // move both slow and fast one step at a time until they meet again
                while (slow != fast) {
                    // slow moves 1 step
                    slow = slow.next;
                    // fast moves 1 step
                    fast = fast.next;
                    // increment the count (optional)
                    pos++;
                }
                // the meeting point is the start of the cycle
                return slow;
            }
        }
        // if no cycle exists, return null
        return null;
    }
}
