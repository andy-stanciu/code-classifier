/**
 * Definition for singly-linked list.
 * class ListNode {
 * int val;
 * ListNode next;
 * ListNode(int x) {
 * val = x;
 * next = null;
 * }
 * }
 */
public class Solution {

    public ListNode detectCycle(ListNode head) {
        // slow pointer that will move one node at a time
        ListNode slow = head;
        // fast pointer that will move two node at a time
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            // breaking the loop as they meet for the first time
            if (fast == slow) {
                break;
            }
        }
        // if fast pointer or fast pointers next reached null means no loop is present
        if (fast == null || fast.next == null) {
            return null;
        }
        while (head != slow) {
            slow = slow.next;
            head = head.next;
        }
        return slow;
    }
}
