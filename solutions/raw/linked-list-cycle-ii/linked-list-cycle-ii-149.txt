/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode detectCycle(ListNode head) {
        if (head == null) {
            return null;
        }
        ListNode fast = head;
        ListNode slow = head;
        ListNode third = head;
        boolean started = false;
        while (fast != null && fast.next != null && slow != null && (fast != slow || !started)) {
            fast = fast.next.next;
            slow = slow.next;
            started = true;
        }
        if (fast == null || fast.next == null || slow == null) {
            return null;
        }
        while (third != slow) {
            slow = slow.next;
            third = third.next;
        }
        return third;
    }
}
