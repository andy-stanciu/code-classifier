/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
/*                       
                            b
       a:                  ______
  head----> start of cycle     intersection
                          ------   
                           c  

    slow = a + b 
    fast = a + b + k(b + c)
    2 (a + b) = a + b + k(b + c)
    2a + 2b = a + b + k(b + c)
    2a + 2b = a + b + (k - 1)(b+c) + b + c
    a - c = (k-1)(b+c)
    a = c + (k-1)(b+c)


1. define slow && fast pointer
2. find the intersection of slow && fast
3. when at intersection, iterate from both head and slow, where they meet will be 
the start of the cycle accroding to math calculation
  */
public class Solution {

    public ListNode detectCycle(ListNode head) {
        ListNode slow = head, fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                while (slow != head) {
                    head = head.next;
                    slow = slow.next;
                }
                return head;
            }
        }
        return null;
    }
}
