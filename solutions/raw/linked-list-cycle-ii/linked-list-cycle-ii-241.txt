/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode detectCycle(ListNode head) {
        // Edge case: If the list is empty or has only one node, there can\'t be a cycle
        if (head == null || head.next == null) {
            return null;
        }
        ListNode slow = head;
        ListNode fast = head;
        // Step 1: Detect if a cycle exists using the two-pointer approach
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            // Cycle detected
            if (slow == fast) {
                // Step 2: Find the start of the cycle
                slow = head;
                while (slow != fast) {
                    slow = slow.next;
                    fast = fast.next;
                }
                // The start of the cycle
                return slow;
            }
        }
        // No cycle found
        return null;
    }
}
