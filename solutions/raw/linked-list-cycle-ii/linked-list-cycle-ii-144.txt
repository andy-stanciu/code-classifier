public class Solution {

    public ListNode detectCycle(ListNode head) {
        //first of all we initiate new pointers such as fast and slow in our list
        //slow is the start (head)
        //fast is also the start(head)
        ListNode slow = head, fast = head;
        //unless fast is NOT equal to null AND fast.next is NOT equal to null this loop will run
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            //if my FAST meets SLOW then the loop breaks
            if (slow == fast) {
                break;
            }
        }
        //now if FAST = NULL OR FAST.NEXT = NULL THEN we would return NULL that means NOTHING //that means NO CYCLE that means -1
        if (fast == null || fast.next == null) {
            return null;
        }
        //while my head is NOt equal to slow
        while (head != slow) {
            //increment both
            head = head.next;
            slow = slow.next;
        }
        return head;
    }
}
