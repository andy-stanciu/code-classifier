/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode detectCycle(ListNode head) {
        int length = lenCycle(head);
        if (length == 0) {
            return null;
        }
        ListNode first = head;
        ListNode second = head;
        while (length > 0) {
            second = second.next;
            length--;
        }
        //now keep moving both forward and they will meet at cycle start
        while (first != second) {
            first = first.next;
            second = second.next;
        }
        return second;
    }

    public int lenCycle(ListNode node) {
        //
        ListNode fast = node;
        //
        ListNode slow = node;
        while (fast != null && fast.next != null) {
            //
            //
            fast = fast.next.next;
            //
            slow = slow.next;
            if (fast == slow) {
                //
                //considering a temporary variable equal to slow (or fast anyone as they are equal only)
                ListNode temp = slow;
                //initially the length of the loop is 0
                int length = 0;
                do {
                    //now the temporary variable will make a rotation and come back to the starting (i.e. slow/fast)
                    temp = temp.next;
                    //we increment the length each time and then return it.
                    length += 1;
                } while (//once the temp variable is equal to starting point again (which means again there is an //increment), we exit the loop and return the length
                temp != slow);
                return length;
            }
        }
        return 0;
    }
}
