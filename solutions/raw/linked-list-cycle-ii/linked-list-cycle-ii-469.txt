/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public static ListNode detectCycle(ListNode head) {
        // first we detect the cycle
        // ListNode slow = head;
        // ListNode fast = head;
        // boolean detect = false;
        // while (fast != null && fast.next != null) {
        //     slow = slow.next;
        //     fast = fast.next.next;
        //     if (fast == slow) {
        //         detect = true;
        //         break;
        //     }
        // }
        // if (detect == false) {
        //     return null;
        // }
        // ListNode prev = null;
        // slow = head;
        // while (slow != fast) {
        //     prev = fast;
        //     slow = slow.next;
        //     fast = fast.next;
        // }
        // // prev.next = null;
        // // System.out.println(fast.val);
        // return fast;
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                slow = head;
                while (slow != fast) {
                    slow = slow.next;
                    fast = fast.next;
                }
                return slow;
            }
        }
        return null;
    }
}
