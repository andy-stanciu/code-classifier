/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode detectCycle(ListNode head) {
        if (head == null)
            return null;
        ListNode slowPointer = head;
        ListNode fastPointer = head;
        while (fastPointer != null && fastPointer.next != null) {
            slowPointer = slowPointer.next;
            fastPointer = fastPointer.next.next;
            if (slowPointer == fastPointer) {
                // at start they are equal so need to check after moving their positions
                ListNode headRef = head;
                while (head != slowPointer) {
                    head = head.next;
                    slowPointer = slowPointer.next;
                }
                return slowPointer;
            }
        }
        return null;
    }
}
