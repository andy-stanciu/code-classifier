/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode detectCycle(ListNode head) {
        // //Approach 1: Using HashMap
        // ListNode temp = head;
        // Map<ListNode, Integer> map = new HashMap<>();
        // while(temp!=null){
        //     if(map.containsKey(temp)){
        //         return temp;
        //     }
        //     map.put(temp,1);
        //     temp=temp.next;
        // }
        // return null;
        // //Approach 2: Using hare tortoise approach:
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast)
                break;
        }
        if (fast == null || fast.next == null)
            return null;
        while (slow != head) {
            head = head.next;
            slow = slow.next;
        }
        return head;
    }
}
