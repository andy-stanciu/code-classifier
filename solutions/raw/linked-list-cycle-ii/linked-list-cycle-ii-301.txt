/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode detectCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        ListNode f = head;
        ListNode s = head;
        while (fast != null) {
            if (fast.next == null) {
                return fast.next;
            }
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow) {
                int count = 1;
                slow = slow.next;
                while (slow != fast) {
                    count++;
                    slow = slow.next;
                }
                while (count > 0) {
                    count--;
                    s = s.next;
                }
                while (s != f) {
                    s = s.next;
                    f = f.next;
                }
                return s;
            }
        }
        return fast;
    }
}
