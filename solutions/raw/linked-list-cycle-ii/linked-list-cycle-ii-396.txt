/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode detectCycle(ListNode head) {
        // step-1: we need to find whether the LL has a loop or not.
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                // LL contains a loop, collision happens
                // step-2 : find the starting point of loop
                // reassigning slow to head.
                slow = head;
                while (slow != fast) {
                    // moving slow by 1 step from head.
                    slow = slow.next;
                    // moving fast by 1 step from point of collision.
                    fast = fast.next;
                    // this loop runs until they collide again
                    // when they collide that\'ll be the starting point of the LL
                }
                // both are same because they are collided.
                return slow;
            }
        }
        // LL doesn\'t contain any loop
        return null;
    }
}
