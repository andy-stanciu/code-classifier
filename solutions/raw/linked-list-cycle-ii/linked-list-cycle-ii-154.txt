public class Solution {

    public ListNode detectCycle(ListNode head) {
        if (head == null) {
            return null;
        }
        ListNode slow = head;
        ListNode fast = head;
        int length = 0;
        // detect cycle is present or nor
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow) {
                length = getCycleLength(slow);
                break;
            }
        }
        if (length == 0) {
            return null;
        }
        ListNode f = head;
        ListNode s = head;
        while (length > 0) {
            s = s.next;
            length--;
        }
        while (f != s) {
            f = f.next;
            s = s.next;
        }
        return s;
    }

    private int getCycleLength(ListNode temp) {
        ListNode node = temp;
        int count = 0;
        do {
            node = node.next;
            count++;
        } while (temp != node);
        return count;
    }
}
