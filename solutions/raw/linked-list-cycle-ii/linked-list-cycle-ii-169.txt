/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode detectCycle(ListNode head) {
        if (head == null || head.next == null) {
            return null;
        }
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                ListNode entry = head;
                int count = 0;
                while (entry != slow) {
                    entry = entry.next;
                    slow = slow.next;
                }
                return entry;
            }
        }
        return null;
        //brute force\\U0001f447
        // HashSet<ListNode> set=new HashSet<>();
        // ListNode current=head;
        // while(current!=null){
        //     if(set.contains(current)){
        //         return current;
        //     }
        //     set.add(current);
        //     current=current.next;
        // }
        // return null;
    }
}
