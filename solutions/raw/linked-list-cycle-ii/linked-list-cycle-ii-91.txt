/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode detectCycle(ListNode head) {
        ListNode fptr = head;
        ListNode sptr = head;
        //Move the slow pointer one step and the fast pointer two steps at a time
        //through the linked list,
        // until they either meet or the fast pointer reaches the end of the list.
        while (fptr != null && fptr.next != null) {
            fptr = fptr.next.next;
            sptr = sptr.next;
            // If the pointers meet, there is a cycle in the linked list.
            // Reset the slow pointer to the head of the linked list, and now move both
            // pointers one step at a time at same speed,
            // until they meet again. The node where they meet is the starting point of
            // the cycle.
            if (fptr == sptr) {
                sptr = head;
                while (sptr != fptr) {
                    fptr = fptr.next;
                    sptr = sptr.next;
                }
                return sptr;
            }
        }
        // If the fast pointer reaches the end of the list without meeting the slow
        //pointer,
        // there is no cycle in the linked list. Return null.
        return null;
    }
}
