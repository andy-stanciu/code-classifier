/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode detectCycle(ListNode head) {
        ListNode Fast = head;
        ListNode Slow = head;
        int length = 0;
        while (Fast != null && Fast.next != null) {
            Fast = Fast.next.next;
            Slow = Slow.next;
            if (Slow == Fast) {
                ListNode temp = Slow;
                do {
                    length++;
                    temp = temp.next;
                } while (temp != Slow);
                break;
            }
        }
        if (length == 0)
            return null;
        ListNode first = head;
        ListNode second = head;
        //move forward second till len gets zero
        while (length > 0) {
            length--;
            second = second.next;
        }
        //move forward both util they meet
        while (first != second) {
            first = first.next;
            second = second.next;
        }
        return first;
    }
}
