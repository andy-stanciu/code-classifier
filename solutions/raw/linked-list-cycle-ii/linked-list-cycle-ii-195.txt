/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    public ListNode detectCycle(ListNode head) {
        ListNode temp = head;
        HashSet<ListNode> hash = new HashSet<ListNode>();
        while (temp != null) {
            if (hash.contains(temp))
                return temp;
            hash.add(temp);
            temp = temp.next;
        }
        return null;
        //    ListNode slow = head, fast = head;
        //     while (fast != null && fast.next != null) {
        //         slow = slow.next;
        //         fast = fast.next.next;
        //         if (slow == fast)
        //             break;
        //     }
        //     if (fast == null || fast.next == null)
        //         return null;
        //     while (head != slow) {
        //         head = head.next;
        //         slow = slow.next;
        //     }
        //     return head;
        // }
    }
}
