/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {

    // public ListNode detectCycle(ListNode head) {
    //     HashSet<ListNode> set=new HashSet<>();
    //     ListNode temp=head;
    //     while(temp!=null){
    //         if(set.contains(temp.next)){
    //             return temp.next;
    //         }else{
    //             set.add(temp);
    //         }
    //         temp=temp.next;
    //     }
    //     return null;
    // }
    public ListNode detectCycle(ListNode head) {
        if (head == null)
            return null;
        ListNode slow = head;
        ListNode fast = intersectionPointInCycle(head);
        if (fast == null)
            return null;
        while (slow != fast) {
            slow = slow.next;
            fast = fast.next;
        }
        return slow;
    }

    public ListNode intersectionPointInCycle(ListNode head) {
        if (head == null)
            return null;
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                return slow;
            }
        }
        return null;
    }
}
