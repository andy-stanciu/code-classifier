// class Solution {
//     public int[] plusOne(int[] digits) {
//         List<Integer> al = new ArrayList<>();
//         int carry = 1;
//         for(int i=digits.length-1;i>=0;i--){
//             int sum = digits[i] + carry;
//             if(sum > 9){
//                 carry = 1;
//                 digits[i] = sum%10;
//             }
//             else{
//                 digits[i] = sum;
//                 carry = 0;
//             }
//         }
//         int[] newResult = new int[digits.length+1];
//         if(carry == 1){
//             newResult[0] = 1;
//         }
//         else
//             return digits;
//         for(int i=1;i<digits.length;i++)
//             newResult[i] = digits[i];
//         return newResult;
//     }
// }
class Solution {

    public int[] plusOne(int[] digits) {
        int n = digits.length;
        for (int i = n - 1; i >= 0; i--) {
            if (digits[i] < 9) {
                digits[i]++;
                return digits;
            }
            // Reset to 0 and move carry to the next digit
            digits[i] = 0;
        }
        // If we\'re here, all digits were 9, and we need an extra space for a new leading \'1\'
        int[] newResult = new int[n + 1];
        newResult[0] = 1;
        return newResult;
    }
}
