class Solution {

    public int[] plusOne(int[] digits) {
        // Start from the last digit
        int n = digits.length - 1;
        // Initial increment by one
        int ans = 1;
        while (ans != 0 && n >= 0) {
            // Add the carry to the current digit
            ans = ans + digits[n];
            if (ans > 9) {
                // If sum is greater than 9, set current digit to 0
                digits[n] = 0;
                // Carry over the excess
                ans = ans / 10;
                if (n == 0) {
                    // Handle carry at the first digit
                    digits = firstPlace(digits);
                    break;
                }
            } else {
                // Update the current digit with the sum
                digits[n] = ans;
                // Reset carry to zero
                ans = ans / 10;
            }
            // Move to the previous digit
            n--;
        }
        // Return the updated array
        return digits;
    }

    public int[] firstPlace(int[] digits) {
        // Create a new array with an extra digit
        int[] newAry = new int[digits.length + 1];
        // Set the first digit to 1
        newAry[0] = 1;
        for (int i = 0; i < digits.length; i++) {
            // Copy the original digits to the new array
            newAry[i + 1] = digits[i];
        }
        // Return the new array
        return newAry;
    }
}
