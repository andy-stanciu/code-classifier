class Solution {

    public int canCompleteCircuit(int[] gas, int[] cost) {
        //comments are precious.....is\'t it ?
        // we can do this without using an array but for the sake of simplicity we are using an extra array..
        //first of all we need to check if there is enough gas to get a full circle and as the problem statement states that we have only one or unique sol so it is pritty simple to check it out...
        if (sum(gas) < sum(cost))
            return -1;
        //if this condition does\'t hit we can say there is a possible unique solution
        int[] diff = new int[cost.length];
        // filling the diff array..
        for (int i = 0; i < cost.length; i++) {
            diff[i] = (gas[i] - cost[i]);
        }
        //we got our diff array....
        //->keeps track of the fuel oh i mean gas
        int total = 0;
        //it resolves the greedy property
        int start = 0;
        for (int i = 0; i < diff.length; i++) {
            total += diff[i];
            if (total < 0) {
                // if we get a neg number that means we can\'t start from here
                //so make the total = zero and check again
                total = 0;
                start = i + 1;
            }
        }
        return start;
    }

    private //noting just returns the sum of an array..
    //noting just returns the sum of an array..
    int //noting just returns the sum of an array..
    sum(int[] arr) {
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        return sum;
    }
}
