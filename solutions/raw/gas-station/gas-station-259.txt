class Solution {

    public int canCompleteCircuit(int[] gas, int[] cost) {
        // Approach
        // For completing a round trip total gas collected should be greater than equal to total gas spent. -- condition 1
        // Now let us consider total gas spent and total gas collected at each station and store their resultant in an array called temp.
        // Now that temp should be divided into two subarrays whose overall sum is either zero or positive.
        // Now for achieving it I have used kadane\'s algo here, using kadane\'s algo I have found max sum subarray in the temp array and starting index of that subarray would be our ans if total sum is >=0;
        // The intuition behind finding max sum subarray is that, as we are dividing the array into two parts, and one part is max sum subarray, if the other part could either be equal to this sum or less than this, we can say that the starting index of our max sum subarray would be the answer. and that array is nothing but our temp array which stores info of the fuel collected - fuel spent, i.e total fuel in the car.
        //Optimization :
        // Instead of storing the fuel in our temp array, we can directly calculate it using
        //gas[i] - cost[i] at each index;
        int filled = 0;
        int spent = 0;
        int ind = 0;
        int sum = 0;
        // int[] temp = new int[gas.length];
        // for(int i=0;i<gas.length;i++)
        // {
        //     temp[i] = gas[i] - cost[i];
        // }
        for (int i = 0; i < gas.length; i++) {
            filled = filled + gas[i];
            spent = spent + cost[i];
            // sum = sum + temp[i];
            sum = sum + gas[i] - cost[i];
            if (sum < 0) {
                ind = i + 1;
                sum = 0;
            }
        }
        if (filled < spent) {
            return -1;
        }
        return ind;
    }
}
