class Solution {

    public int canCompleteCircuit(int[] gas, int[] cost) {
        // \'sum\' will keep track of the net gas balance as we iterate through the stations
        // \'max\' will store the maximum gas balance encountered during the iteration
        // \'ans\' will store the index of the gas station where the journey can start
        int sum = 0, max = 0, ans = -1;
        // Traverse the gas stations in reverse order (from last to first)
        for (int i = gas.length - 1; i >= 0; i--) {
            // Update the net gas balance at each station
            // gas[i] - cost[i] is the net gas gained (or lost) at station i
            sum = sum + (gas[i] - cost[i]);
            // If the current gas balance is greater than or equal to the maximum balance,
            // update \'ans\' to the current station index i, as this may be a possible start point
            if (sum >= max) {
                ans = i;
                max = sum;
            }
        }
        // After iterating through all the stations, if the net sum of gas is non-negative,
        // it means it\'s possible to complete the circuit, and \'ans\' contains the starting station.
        // Otherwise, return -1 indicating it\'s not possible.
        return sum >= 0 ? ans : -1;
    }
}
