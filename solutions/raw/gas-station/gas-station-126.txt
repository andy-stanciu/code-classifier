class Solution {

    public int canCompleteCircuit(int[] gas, int[] cost) {
        int startIndex = -1;
        int[] dp = new int[gas.length];
        Arrays.fill(dp, -1);
        for (int i = 0; i < gas.length; i++) {
            if (gas[i] < cost[i]) {
                continue;
            }
            int next = (i + 1 == cost.length) ? 0 : i + 1;
            if (circularReachPossible(gas, cost, 0, i, next, i, dp))
                return i;
        }
        return startIndex;
    }

    public boolean circularReachPossible(int[] gas, int[] cost, int tank, int current, int next, int startIndex, int[] dp) {
        if (tank == 0 && dp[current] != -1)
            return dp[current] == 1;
        int index = current;
        int remainingTank = tank + gas[current] - cost[current];
        if (remainingTank >= 0) {
            if (next == startIndex) {
                dp[index] = 1;
            } else {
                if (next == cost.length - 1)
                    next = -1;
                if (current == cost.length - 1)
                    current = -1;
                dp[index] = (circularReachPossible(gas, cost, remainingTank, current + 1, next + 1, startIndex, dp)) ? 1 : 0;
            }
        } else {
            dp[index] = 0;
        }
        return dp[index] == 1;
    }
}
