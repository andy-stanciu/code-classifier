class Solution {

    public int canCompleteCircuit(int[] gas, int[] cost) {
        int n = gas.length;
        List<Node> myStack = new LinkedList<>();
        int[] netGas = new int[n];
        for (int i = n - 1; i != -1; i--) netGas[i] = gas[i] - cost[i];
        myStack.addLast(new Node(netGas[0], 0));
        for (int i = 1; i != n; i++) {
            Node last = myStack.removeLast();
            if (last.val >= 0) {
                last.val += netGas[i];
                if (last.val < 0 && myStack.size() != 0) {
                    Node secondLast = myStack.removeLast();
                    secondLast.val += last.val;
                    myStack.addLast(secondLast);
                } else {
                    myStack.addLast(last);
                }
            } else {
                if (netGas[i] < 0) {
                    last.val += netGas[i];
                    myStack.addLast(last);
                } else {
                    myStack.addLast(last);
                    myStack.addLast(new Node(netGas[i], i));
                }
            }
        }
        Node last = myStack.removeLast();
        if (last.val < 0)
            return -1;
        else if (myStack.size() == 0)
            return last.pos;
        else if (myStack.size() == 1 && myStack.removeLast().val + last.val >= 0)
            return last.pos;
        else
            return -1;
    }
}

public class Node {

    public int val;

    public int pos;

    public Node(int val, int pos) {
        this.val = val;
        this.pos = pos;
    }
}
