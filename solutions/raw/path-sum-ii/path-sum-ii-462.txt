class Solution {

    List<List<Integer>> result;

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        result = new ArrayList<>();
        List<TreeNode> l1 = new ArrayList<>();
        preorder(root, targetSum, 0, l1);
        return result;
    }

    public void preorder(TreeNode root, int targetSum, int temp, List<TreeNode> l1) {
        if (root == null) {
            return;
        }
        temp += root.val;
        l1.add(root);
        if (temp == targetSum && l1.get(l1.size() - 1).left == null && l1.get(l1.size() - 1).right == null) {
            List<Integer> path = new ArrayList<>();
            for (TreeNode n : l1) {
                path.add(n.val);
            }
            result.add(path);
        }
        preorder(root.left, targetSum, temp, l1);
        preorder(root.right, targetSum, temp, l1);
        //  Backtracking (restoring the previous state)
        l1.remove(l1.size() - 1);
    }
}
