/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    Map<TreeNode, List<Integer>> tmap = new HashMap<>();

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> intList = new ArrayList<>();
        findPath(root, result, intList, targetSum);
        return result;
    }

    public void findPath(TreeNode root, List<List<Integer>> result, List<Integer> intList, Integer target) {
        if (root == null) {
            return;
        }
        int value = root.val;
        intList.add(value);
        if (root.left == null && root.right == null && target == value) {
            result.add(new ArrayList(intList));
        }
        findPath(root.left, result, intList, target - value);
        findPath(root.right, result, intList, target - value);
        intList.remove(intList.size() - 1);
    }
}
