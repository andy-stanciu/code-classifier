class Solution {

    static List<List<Integer>> res;

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        res = new ArrayList<>();
        findPath(root, targetSum, new ArrayList<>());
        return res;
    }

    public void findPath(TreeNode curr, int remSum, List<Integer> list) {
        if (curr == null)
            return;
        if (curr.left == null && curr.right == null && remSum - curr.val == 0) {
            List<Integer> l = new ArrayList<>(list);
            l.add(curr.val);
            res.add(l);
        } else {
            list.add(curr.val);
            if (curr.left != null)
                findPath(curr.left, remSum - curr.val, list);
            if (curr.right != null)
                findPath(curr.right, remSum - curr.val, list);
            list.removeLast();
        }
    }
}
