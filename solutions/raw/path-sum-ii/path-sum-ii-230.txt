/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<List<Integer>> arr = new ArrayList<List<Integer>>();

    List<Integer> res = new ArrayList<>();

    int t;

    private void traverse(TreeNode root) {
        if (root == null) {
            return;
        }
        res.add(root.val);
        if (root.left == null && root.right == null) {
            List<Integer> res1 = new ArrayList<>();
            int s = 0;
            for (int j = 0; j < res.size(); j++) {
                s += res.get(j);
                res1.add(res.get(j));
            }
            if (s == t)
                arr.add(res1);
            return;
        }
        if (root.left != null) {
            traverse(root.left);
            res.remove(res.size() - 1);
        }
        if (root.right != null) {
            traverse(root.right);
            res.remove(res.size() - 1);
        }
    }

    public List<List<Integer>> pathSum(TreeNode root, int target) {
        t = target;
        traverse(root);
        return arr;
    }
}
