/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<List<Integer>> ans = new ArrayList<>();

    public void getPathSum(TreeNode root, int targetSum, List<Integer> path, int sum) {
        if (root.left == null && root.right == null) {
            // System.out.println(sum);
            if (root.val + sum == targetSum) {
                // System.out.println(root.val+sum);
                path.add(root.val);
                List<Integer> pathCopy = new ArrayList<>(path);
                ans.add(pathCopy);
                path.remove(path.size() - 1);
                // return;
            }
            return;
        }
        if (root.left != null) {
            path.add(root.val);
            getPathSum(root.left, targetSum, path, sum + root.val);
            path.remove(path.size() - 1);
        }
        if (root.right != null) {
            path.add(root.val);
            getPathSum(root.right, targetSum, path, sum + root.val);
            path.remove(path.size() - 1);
        }
    }

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        if (root == null) {
            return new ArrayList<>();
        }
        getPathSum(root, targetSum, new ArrayList<>(), 0);
        return ans;
    }
}
