class Solution {

    List<Integer> singlePath = new ArrayList<>();

    List<List<Integer>> allPaths = new ArrayList<>();

    public List<List<Integer>> pathSum(TreeNode root, int target) {
        if (root == null)
            return allPaths;
        helper(root, target);
        return allPaths;
    }

    void helper(TreeNode root, int target) {
        // Base case
        if (root == null)
            return;
        singlePath.add(root.val);
        // Check if it\'s a leaf node and the target is met
        if (root.left == null && root.right == null && target == root.val) {
            // Add a copy of singlePath to allPaths
            allPaths.add(new ArrayList<>(singlePath));
        }
        helper(root.left, target - root.val);
        helper(root.right, target - root.val);
        // Backtrack to explore other paths
        singlePath.remove(singlePath.size() - 1);
    }
}
