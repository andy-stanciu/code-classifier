/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<List<Integer>> res = new ArrayList<>();

    public void DFS(TreeNode root, int sum, int target, List<Integer> list) {
        if (root == null)
            return;
        list.add(root.val);
        // if node is leaf node and previous sum + root value == target
        // Add list to the result
        if (root.left == null && root.right == null && sum + root.val == target) {
            res.add(new ArrayList<Integer>(list));
        } else {
            DFS(root.left, sum + root.val, target, list);
            DFS(root.right, sum + root.val, target, list);
        }
        // remove the leaf node from list
        list.remove(list.size() - 1);
    }

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        if (root == null)
            return res;
        List<Integer> list = new ArrayList<>();
        DFS(root, 0, targetSum, list);
        return res;
    }
}
