class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> sum = new ArrayList<>();
        List<Integer> singleSum = new ArrayList<>();
        if (root == null)
            return sum;
        // helper function
        hf(sum, singleSum, targetSum, root);
        return sum;
    }

    public void hf(List<List<Integer>> sum, List<Integer> singleSum, int target, TreeNode root) {
        // base case
        if (root == null)
            return;
        singleSum.add(root.val);
        if (root.right == null && root.left == null && root.val == target) {
            sum.add(new ArrayList<>(singleSum));
        }
        hf(sum, singleSum, target - root.val, root.left);
        hf(sum, singleSum, target - root.val, root.right);
        // backtracking
        singleSum.remove(singleSum.size() - 1);
    }
}
