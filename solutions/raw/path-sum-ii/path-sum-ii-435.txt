/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<List<Integer>> listOfList;

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        listOfList = new ArrayList<List<Integer>>();
        List<Integer> list = new ArrayList<Integer>();
        if (root == null) {
            return listOfList;
        }
        pathSumHelp(root, targetSum, 0, list);
        return listOfList;
    }

    public void pathSumHelp(TreeNode root, int targetSum, int sum, List<Integer> list) {
        if (root == null) {
            return;
        }
        if (root.left == null && root.right == null) {
            int lc = sum + root.val;
            if (lc == targetSum) {
                List<Integer> l = new ArrayList<Integer>();
                l.addAll(list);
                l.add(root.val);
                listOfList.add(l);
            }
        }
        list.add(root.val);
        pathSumHelp(root.left, targetSum, sum + root.val, list);
        pathSumHelp(root.right, targetSum, sum + root.val, list);
        list.remove(list.size() - 1);
    }
}
