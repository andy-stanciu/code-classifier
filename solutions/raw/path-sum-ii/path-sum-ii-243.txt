/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<List<Integer>> li = new ArrayList<>();

    public List<List<Integer>> list(TreeNode root, int sum, int target, List<Integer> ans) {
        if (root == null)
            return li;
        // List<Integer> l = new ArrayList<>();
        sum += root.val;
        ans.add(root.val);
        if (root.left == null && root.right == null) {
            if (sum == target) {
                li.add(new ArrayList<>(ans));
            } else //backtracking
            {
                sum -= root.val;
            }
        }
        list(root.left, sum, target, ans);
        list(root.right, sum, target, ans);
        ans.remove(ans.size() - 1);
        //to move to other values recursively
        return li;
    }

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        if (root == null)
            return li;
        return list(root, 0, targetSum, new ArrayList<>());
    }
}
