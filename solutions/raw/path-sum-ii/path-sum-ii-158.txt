/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<List<Integer>> lli = new ArrayList<List<Integer>>();

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<Integer> li = new ArrayList<Integer>();
        recursive(root, targetSum, 0, "");
        return lli;
    }

    void recursive(TreeNode root, int targetSum, int sum, String str) {
        if (root == null) {
            return;
        }
        if (root.left == null && root.right == null) {
            if ((sum + root.val) == targetSum) {
                str = str + root.val;
                List<Integer> li = new ArrayList<Integer>();
                String[] arrOfStr = str.split("->");
                for (String a : arrOfStr) {
                    int val = Integer.parseInt(a);
                    li.add(val);
                }
                lli.add(li);
            }
            return;
        }
        recursive(root.left, targetSum, sum + root.val, str + root.val + "->");
        recursive(root.right, targetSum, sum + root.val, str + root.val + "->");
    }
}
