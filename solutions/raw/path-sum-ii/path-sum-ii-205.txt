/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        boolean a = solve(root, 0, targetSum, res, temp);
        return res;
    }

    public boolean solve(TreeNode root, int sum, int target, List<List<Integer>> res, List<Integer> temp) {
        if (root == null)
            return false;
        if (root.left == null && root.right == null) {
            sum += root.val;
            temp.add(root.val);
            if (sum == target) {
                res.add(new ArrayList<>(temp));
                temp.remove(temp.size() - 1);
                return true;
            } else {
                temp.remove(temp.size() - 1);
                return false;
            }
        }
        temp.add(root.val);
        boolean left = solve(root.left, sum + root.val, target, res, temp);
        boolean right = solve(root.right, sum + root.val, target, res, temp);
        temp.remove(temp.size() - 1);
        return left || right;
    }
}
