class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> pathList = new ArrayList<>();
        pathSumHelper(root, targetSum, 0, pathList, result);
        return result;
    }

    private void pathSumHelper(TreeNode root, int targetSum, int valueTillParent, List<Integer> pathList, List<List<Integer>> result) {
        if (root == null)
            return;
        pathList.add(root.val);
        pathSumHelper(root.left, targetSum, root.val + valueTillParent, pathList, result);
        pathSumHelper(root.right, targetSum, root.val + valueTillParent, pathList, result);
        if (root.left == null && root.right == null && root.val + valueTillParent == targetSum) {
            //add path to result
            List<Integer> innerList = new ArrayList<Integer>(pathList);
            result.add(innerList);
        }
        pathList.remove(pathList.size() - 1);
    }
}
