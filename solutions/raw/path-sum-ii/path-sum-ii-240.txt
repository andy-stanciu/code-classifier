class Solution {

    // TC: O(2^n + k)
    // SC: O(H)
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> paths = new ArrayList<>();
        pathSumHelper(root, targetSum, new ArrayList<>(), paths);
        return paths;
    }

    private void pathSumHelper(TreeNode node, int target, List<Integer> currPath, List<List<Integer>> paths) {
        if (node == null) {
            return;
        }
        currPath.add(node.val);
        if (node.left == null && node.right == null) {
            if (target == node.val) {
                paths.add(new ArrayList<>(currPath));
            }
        } else {
            pathSumHelper(node.left, target - node.val, currPath, paths);
            pathSumHelper(node.right, target - node.val, currPath, paths);
        }
        currPath.remove(currPath.size() - 1);
    }
}
