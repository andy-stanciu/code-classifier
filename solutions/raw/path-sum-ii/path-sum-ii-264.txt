/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        ArrayList<Integer> results = new ArrayList<Integer>();
        List<List<Integer>> finalResults = new ArrayList<List<Integer>>();
        return pathSumHelper(root, targetSum, 0, results, finalResults);
    }

    public List<List<Integer>> pathSumHelper(TreeNode root, int targetSum, int sumSoFar, ArrayList<Integer> results, List<List<Integer>> finalResults) {
        if (root == null) {
            return new ArrayList<List<Integer>>();
        }
        results.add(root.val);
        sumSoFar += root.val;
        if (sumSoFar == targetSum && root.left == null && root.right == null) {
            finalResults.add(new ArrayList<Integer>(results));
        }
        pathSumHelper(root.left, targetSum, sumSoFar, new ArrayList<Integer>(results), finalResults);
        pathSumHelper(root.right, targetSum, sumSoFar, new ArrayList<Integer>(results), finalResults);
        return finalResults;
    }
}
