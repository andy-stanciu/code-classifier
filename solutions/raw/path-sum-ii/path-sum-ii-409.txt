class Solution {

    class Triple {

        TreeNode node;

        int sum;

        LinkedList<Integer> path;

        public Triple(TreeNode node, int sum, LinkedList<Integer> path) {
            this.node = node;
            this.sum = sum;
            this.path = path;
        }
    }

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        ArrayList<List<Integer>> res = new ArrayList<>();
        if (root == null) {
            return res;
        }
        LinkedList<Triple> queue = new LinkedList<>();
        queue.add(new Triple(root, root.val, new LinkedList<Integer>(Arrays.asList(root.val))));
        while (!queue.isEmpty()) {
            Triple triple = queue.poll();
            boolean isLeaf = true;
            if (triple.node.left != null) {
                LinkedList<Integer> newPath = (LinkedList) triple.path.clone();
                newPath.add(triple.node.left.val);
                queue.add(new Triple(triple.node.left, triple.sum + triple.node.left.val, newPath));
                isLeaf = false;
            }
            if (triple.node.right != null) {
                LinkedList<Integer> newPath = (LinkedList) triple.path.clone();
                newPath.add(triple.node.right.val);
                queue.add(new Triple(triple.node.right, triple.sum + triple.node.right.val, newPath));
                isLeaf = false;
            }
            if (isLeaf && triple.sum == targetSum) {
                res.add(triple.path);
            }
        }
        return res;
    }
}
