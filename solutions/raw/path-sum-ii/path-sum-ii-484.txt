class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null)
            return res;
        targetSum -= root.val;
        if (root.left == null && root.right == null) {
            // leaf reached
            if (targetSum == 0) {
                // valid path, add the val of the current node to the list
                List curr = new ArrayList<>();
                curr.add(root.val);
                res.add(curr);
            }
            return res;
        }
        // get all valid paths in the left subtree
        res.addAll(pathSum(root.left, targetSum));
        // get all valid paths in the right subtree
        res.addAll(pathSum(root.right, targetSum));
        for (// add the val of the current node to the valid paths
        // add the val of the current node to the valid paths
        List l : res) l.add(0, root.val);
        return res;
    }
}
