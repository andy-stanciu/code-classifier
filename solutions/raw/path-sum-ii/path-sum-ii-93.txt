/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null)
            return ans;
        pathSum(root, ans, new ArrayList<>(), targetSum);
        return ans;
    }

    public void pathSum(TreeNode root, List<List<Integer>> ans, List<Integer> tempSet, int targetSum) {
        if (root == null)
            return;
        // Add current node\'s value to the temporary path list
        tempSet.add(root.val);
        // Check if it\'s a leaf node and the sum equals targetSum
        if (root.left == null && root.right == null && root.val == targetSum) {
            // Add a copy of tempSet to the answer
            ans.add(new ArrayList<>(tempSet));
        } else {
            // Continue searching in the left and right subtrees
            pathSum(root.left, ans, tempSet, targetSum - root.val);
            pathSum(root.right, ans, tempSet, targetSum - root.val);
        }
        // Backtrack by removing the last added element
        tempSet.remove(tempSet.size() - 1);
    }
}
