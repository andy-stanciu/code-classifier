/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<List<Integer>> answer = new ArrayList<>();

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        helper(root, targetSum, 0, new ArrayList<>());
        return answer;
    }

    void helper(TreeNode root, int targetSum, int curSum, List<Integer> path) {
        //base case
        if (root == null)
            return;
        //backtracking logic
        //1. action
        curSum += root.val;
        path.add(root.val);
        if (root.left == null && root.right == null && targetSum == curSum) {
            answer.add(new ArrayList<>(path));
        }
        //2. recurse
        helper(root.left, targetSum, curSum, path);
        helper(root.right, targetSum, curSum, path);
        //3. backtrack
        path.remove(path.size() - 1);
    }
}
