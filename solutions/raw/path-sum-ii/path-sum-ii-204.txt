/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> list = new ArrayList<>();

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        if (root == null)
            return list;
        List<Integer> paths = new ArrayList<>();
        dfs(root, paths, targetSum, 0);
        return list;
    }

    public void dfs(TreeNode root, List<Integer> paths, int targetSum, int curSum) {
        paths.add(root.val);
        curSum += root.val;
        if (curSum == targetSum && root.left == null & root.right == null) {
            list.add(new ArrayList<>(paths));
        }
        if (root.right != null)
            dfs(root.right, paths, targetSum, curSum);
        if (root.left != null)
            dfs(root.left, paths, targetSum, curSum);
        curSum -= paths.get(paths.size() - 1);
        paths.remove(paths.size() - 1);
    }
}
