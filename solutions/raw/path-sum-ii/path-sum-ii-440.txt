/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    static List<List<Integer>> ans = new ArrayList<>();

    public void nextSum(List<Integer> list, TreeNode root, int sum, int targetSum) {
        sum += root.val;
        list.add(root.val);
        if (root.left == null && root.right == null) {
            if (sum == targetSum) {
                List<Integer> list1 = new ArrayList<>();
                list1.addAll(list);
                ans.add(list1);
                //list.remove(list.size()-1);
                return;
            } else {
                return;
            }
        }
        if (root.left != null) {
            nextSum(list, root.left, sum, targetSum);
            if (list.size() > 0) {
                list.remove(list.size() - 1);
            }
        }
        if (root.right != null) {
            nextSum(list, root.right, sum, targetSum);
            if (list.size() > 0) {
                list.remove(list.size() - 1);
            }
        }
    }

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        ans.clear();
        List<Integer> list = new ArrayList<>();
        if (root == null) {
            return ans;
        }
        int sum = 0;
        nextSum(list, root, sum, targetSum);
        return ans;
    }
}
