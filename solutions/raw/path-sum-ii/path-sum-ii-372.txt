/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        var allPaths = new ArrayList<List<Integer>>();
        depthFirstSearch(root, targetSum, new ArrayList<>(), allPaths);
        return allPaths;
    }

    private static void depthFirstSearch(TreeNode root, int remainingSum, List<Integer> currentPath, List<List<Integer>> allPaths) {
        if (root == null) {
            return;
        }
        currentPath.add(root.val);
        if (root.left == null && root.right == null) {
            if (remainingSum - root.val == 0) {
                allPaths.add(currentPath.stream().toList());
            }
            currentPath.remove(currentPath.size() - 1);
            return;
        }
        depthFirstSearch(root.left, remainingSum - root.val, currentPath, allPaths);
        depthFirstSearch(root.right, remainingSum - root.val, currentPath, allPaths);
        currentPath.remove(currentPath.size() - 1);
    }
}
