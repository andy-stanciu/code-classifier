class Solution {

    List<List<Integer>> list = new ArrayList<>();

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<Integer> path = new ArrayList<>();
        //DFS function
        dsfPathSum(root, targetSum, 0, path);
        return list;
    }

    public void dsfPathSum(TreeNode root, int t, int sum, List<Integer> path) {
        if (root == null) {
            return;
        }
        //Adding the root value to our path list
        path.add(root.val);
        // Storing the sum of the current path
        sum += root.val;
        // TO check if it is a leaf node or not
        if (root.left == null && root.right == null) {
            if (sum == t) {
                list.add(new ArrayList<>(path));
            }
            path.remove((path.size() - 1));
            return;
        }
        dsfPathSum(root.left, t, sum, path);
        dsfPathSum(root.right, t, sum, path);
        path.remove((path.size() - 1));
    }
}
