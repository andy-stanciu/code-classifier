/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<List<Integer>> result = new LinkedList<List<Integer>>();

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        if (root == null)
            return result;
        helper(root, targetSum, 0, new LinkedList<Integer>());
        return result;
    }

    public void helper(TreeNode root, int targetSum, int currentSum, LinkedList<Integer> current) {
        if (root == null)
            return;
        currentSum += root.val;
        current.add(root.val);
        if (targetSum == currentSum && root.left == null && root.right == null) {
            List<Integer> newItem = new LinkedList<>(current);
            result.add(newItem);
        } else {
            helper(root.left, targetSum, currentSum, current);
            helper(root.right, targetSum, currentSum, current);
        }
        currentSum -= current.getLast();
        current.removeLast();
    }
}
