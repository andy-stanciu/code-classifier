/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        helper(root, targetSum, 0, new ArrayList<>());
        return result;
    }

    List<List<Integer>> result = new ArrayList<>();

    public void helper(TreeNode node, int targetSum, int partialSum, List<Integer> nodes) {
        if (node == null) {
            return;
        }
        if (node.left == null && node.right == null) {
            if (partialSum + node.val == targetSum) {
                List<Integer> ls = new ArrayList<>();
                ls.addAll(nodes);
                ls.add(node.val);
                result.add(ls);
            }
        }
        if (node.left != null) {
            nodes.add(node.val);
            helper(node.left, targetSum, partialSum + node.val, nodes);
            nodes.remove(nodes.size() - 1);
        }
        if (node.right != null) {
            nodes.add(node.val);
            helper(node.right, targetSum, partialSum + node.val, nodes);
            nodes.remove(nodes.size() - 1);
        }
    }
}
