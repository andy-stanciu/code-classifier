/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        final List<List<Integer>> allSumPaths = new ArrayList();
        processPathSum(root, targetSum, 0, allSumPaths, new ArrayList<Integer>());
        return allSumPaths;
    }

    private void processPathSum(TreeNode root, int targetSum, int currentSum, List<List<Integer>> allSumPaths, List<Integer> currentList) {
        if (root == null)
            return;
        currentSum += root.val;
        currentList.add(root.val);
        if (root.left == null && root.right == null && targetSum == currentSum) {
            allSumPaths.add(currentList);
        } else {
            processPathSum(root.left, targetSum, currentSum, allSumPaths, new ArrayList<Integer>(currentList));
            processPathSum(root.right, targetSum, currentSum, allSumPaths, new ArrayList<Integer>(currentList));
        }
    }
}
