/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> ans = new ArrayList<>();
        dfs(root, targetSum, new ArrayList<>(), 0, ans);
        return ans;
    }

    private void dfs(TreeNode root, int targetSum, List<Integer> path, int pathSum, List<List<Integer>> ans) {
        if (root == null)
            return;
        pathSum += root.val;
        path.add(root.val);
        if (root.left == null && root.right == null) {
            if (pathSum == targetSum)
                ans.add(new ArrayList<>(path));
            return;
        }
        if (root.left != null) {
            dfs(root.left, targetSum, path, pathSum, ans);
            path.remove(path.size() - 1);
        }
        if (root.right != null) {
            dfs(root.right, targetSum, path, pathSum, ans);
            path.remove(path.size() - 1);
        }
    }
}
