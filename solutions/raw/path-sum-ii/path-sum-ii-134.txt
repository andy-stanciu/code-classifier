class TreeNode {

    int val;

    TreeNode left;

    TreeNode right;

    TreeNode(int x) {
        val = x;
    }
}

class Solution {

    public static List<List<Integer>> result;

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        result = new ArrayList<>();
        fill(root, 0, new ArrayList<>(), targetSum);
        return result;
    }

    public static void fill(TreeNode root, int sum, List<Integer> temp, int targetSum) {
        if (root == null) {
            return;
        }
        sum += root.val;
        temp.add(root.val);
        if (root.left == null && root.right == null) {
            if (sum == targetSum) {
                result.add(new ArrayList<>(temp));
            }
        } else {
            fill(root.left, sum, temp, targetSum);
            fill(root.right, sum, temp, targetSum);
        }
        // Remove the current node from the path to backtrack
        temp.remove(temp.size() - 1);
    }
}
