/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<String> list = new ArrayList<>();
        List<List<Integer>> listOfLists = new ArrayList<>();
        pathSum(root, targetSum, 0, "", list);
        for (int i = 0; i < list.size(); i++) {
            List<Integer> integers = new ArrayList<>();
            String[] temp = list.get(i).split(" ");
            for (int j = 0; j < temp.length; j++) {
                integers.add(Integer.parseInt(temp[j]));
            }
            listOfLists.add(integers);
        }
        System.out.println(list);
        return listOfLists;
    }

    public void pathSum(TreeNode root, int targetSum, int curSum, String s, List<String> list) {
        if (root == null)
            return;
        curSum += root.val;
        if (root.left == null && root.right == null && curSum == targetSum) {
            s += root.val;
            list.add(s);
            return;
        }
        pathSum(root.left, targetSum, curSum, s + root.val + " ", list);
        pathSum(root.right, targetSum, curSum, s + root.val + " ", list);
    }
}
