/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<List<Integer>> res;

    int targetSum;

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        this.targetSum = targetSum;
        this.res = new ArrayList<>();
        if (root != null) {
            List<Integer> list = new ArrayList<>();
            list.add(root.val);
            dfs(root, list, root.val);
        }
        return res;
    }

    private void dfs(TreeNode root, List<Integer> list, int sum) {
        if (root.left == null && root.right == null) {
            if (sum == targetSum) {
                res.add(new ArrayList<>(list));
            }
            return;
        }
        if (root.left != null) {
            list.add(root.left.val);
            dfs(root.left, list, sum + root.left.val);
            list.remove(list.size() - 1);
        }
        if (root.right != null) {
            list.add(root.right.val);
            dfs(root.right, list, sum + root.right.val);
            list.remove(list.size() - 1);
        }
    }
}
