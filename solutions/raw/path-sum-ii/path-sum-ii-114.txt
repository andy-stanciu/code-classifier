class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> allPath = new ArrayList<>();
        List<Integer> singlePath = new ArrayList<>();
        dfs(root, targetSum, singlePath, allPath);
        return allPath;
    }

    public void dfs(TreeNode root, int targetSum, List<Integer> singlePath, List<List<Integer>> allPath) {
        if (root == null)
            return;
        singlePath.add(root.val);
        targetSum -= root.val;
        if (root.left == null && root.right == null && targetSum == 0)
            allPath.add(new ArrayList<>(singlePath));
        dfs(root.left, targetSum, singlePath, allPath);
        dfs(root.right, targetSum, singlePath, allPath);
        singlePath.remove(singlePath.size() - 1);
        targetSum += root.val;
    }
}
