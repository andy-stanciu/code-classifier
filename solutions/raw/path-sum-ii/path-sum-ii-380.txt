/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (root == null)
            return result;
        dfs(root, targetSum, result, new ArrayList<Integer>());
        return result;
    }

    private void dfs(TreeNode node, int targetSum, List<List<Integer>> result, List<Integer> slate) {
        //Base case
        if (node.left == null && node.right == null) {
            if (node.val == targetSum) {
                //copy the slate
                List<Integer> newSlate = new ArrayList<Integer>(slate);
                newSlate.add(node.val);
                result.add(newSlate);
                return;
            }
        }
        //intermediate nodes
        slate.add(node.val);
        if (node.left != null) {
            dfs(node.left, targetSum - node.val, result, slate);
        }
        if (node.right != null) {
            dfs(node.right, targetSum - node.val, result, slate);
        }
        slate.remove(slate.size() - 1);
    }
}
