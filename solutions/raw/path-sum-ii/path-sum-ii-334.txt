/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<Integer> currList = new ArrayList<>();
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        findPathSum(root, targetSum, 0, currList, result);
        return result;
    }

    private void findPathSum(TreeNode root, int targetSum, int sum, List<Integer> currList, List<List<Integer>> result) {
        sum += root.val;
        currList.add(root.val);
        if (isLeaf(root)) {
            if (sum == targetSum) {
                result.add(new ArrayList(currList));
            }
            currList.remove(currList.size() - 1);
            return;
        }
        if (root.left != null)
            findPathSum(root.left, targetSum, sum, currList, result);
        if (root.right != null)
            findPathSum(root.right, targetSum, sum, currList, result);
        currList.remove(currList.size() - 1);
    }

    private boolean isLeaf(TreeNode root) {
        return root.left == null && root.right == null;
    }
}
