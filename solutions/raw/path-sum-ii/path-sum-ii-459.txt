class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        dfs(root, targetSum, res, new ArrayList<>());
        return res;
    }

    private void dfs(TreeNode root, int targetSum, List<List<Integer>> res, List<Integer> tempList) {
        if (root == null) {
            return;
        }
        targetSum = targetSum - root.val;
        if (root.left == null && root.right == null) {
            if (targetSum == 0) {
                tempList.add(root.val);
                res.add(new ArrayList<>(tempList));
                tempList.remove(tempList.size() - 1);
            }
        }
        tempList.add(root.val);
        dfs(root.left, targetSum, res, tempList);
        dfs(root.right, targetSum, res, tempList);
        tempList.remove(tempList.size() - 1);
    }
}
