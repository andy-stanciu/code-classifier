class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> list1 = new ArrayList<>();
        List<Integer> list2 = new ArrayList<>();
        find_valid_path(root, targetSum, 0, list1, list2);
        return list1;
    }

    public void find_valid_path(TreeNode nn, int targetSum, int sum, List<List<Integer>> list1, List<Integer> list2) {
        if (nn == null)
            return;
        if (nn.left == null && nn.right == null) {
            if (sum + nn.val == targetSum) {
                list2.add(nn.val);
                list1.add(new ArrayList<>(list2));
                list2.remove(list2.size() - 1);
                return;
            }
            return;
        }
        list2.add(nn.val);
        find_valid_path(nn.left, targetSum, sum + nn.val, list1, list2);
        find_valid_path(nn.right, targetSum, sum + nn.val, list1, list2);
        list2.remove(list2.size() - 1);
    }
}
