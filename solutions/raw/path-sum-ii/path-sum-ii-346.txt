class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> currentPath = new ArrayList<>();
        helper(root, targetSum, 0, currentPath, result);
        return result;
    }

    private void helper(TreeNode root, int targetSum, int currentSum, List<Integer> currentPath, List<List<Integer>> result) {
        if (root == null) {
            return;
        }
        currentSum += root.val;
        currentPath.add(root.val);
        if (root.left == null && root.right == null) {
            if (currentSum == targetSum) {
                result.add(new ArrayList<>(currentPath));
            }
        }
        helper(root.left, targetSum, currentSum, currentPath, result);
        helper(root.right, targetSum, currentSum, currentPath, result);
        // Remove the last added element when backtracking
        currentPath.remove(currentPath.size() - 1);
    }
}
