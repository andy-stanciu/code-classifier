class Solution {

    List<List<Integer>> res = new ArrayList<>();

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        if (root == null)
            return res;
        List<Integer> curr = new ArrayList<>();
        backtrack(root, curr, targetSum);
        return res;
    }

    void backtrack(TreeNode root, List<Integer> curr, int targetSum) {
        if (root.left == null && root.right == null && targetSum - root.val == 0) {
            curr.add(root.val);
            res.add(new ArrayList<>(curr));
            curr.remove(curr.size() - 1);
            return;
        }
        curr.add(root.val);
        if (root.left != null)
            backtrack(root.left, curr, targetSum - root.val);
        if (root.right != null)
            backtrack(root.right, curr, targetSum - root.val);
        curr.remove(curr.size() - 1);
    }
}
