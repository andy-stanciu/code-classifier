/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    private List<List<Integer>> result;

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        this.result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        var arr = new ArrayList<Integer>();
        dfs(root, arr, targetSum, 0);
        return result;
    }

    private void dfs(TreeNode node, List<Integer> list, int targetSum, int valueSoFar) {
        if (node == null) {
            return;
        }
        valueSoFar += node.val;
        list.add(node.val);
        if (targetSum == valueSoFar && node.left == null && node.right == null) {
            var tmp = new ArrayList<Integer>();
            for (var elem : list) {
                tmp.add(elem);
            }
            this.result.add(tmp);
        }
        dfs(node.left, list, targetSum, valueSoFar);
        dfs(node.right, list, targetSum, valueSoFar);
        list.remove(list.size() - 1);
    }
}
