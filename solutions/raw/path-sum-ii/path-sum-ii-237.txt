/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public void getPath(List<List<Integer>> list, List<Integer> subList, TreeNode root, int target) {
        if (root == null)
            return;
        subList.add(root.val);
        // Checking if the target == current node\'s value and the current node is leaf node
        if (target == root.val && root.left == null && root.right == null) {
            list.add(new ArrayList<>(subList));
        } else //else we will move left or right subtree
        {
            getPath(list, subList, root.left, target - root.val);
            getPath(list, subList, root.right, target - root.val);
        }
        // backtracking step, removing the last element from the list
        subList.remove(subList.size() - 1);
    }

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> list = new ArrayList<>();
        List<Integer> subList = new ArrayList<>();
        getPath(list, subList, root, targetSum);
        return list;
    }
}
