/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        return intertive(root, targetSum);
    }

    List<List<Integer>> intertive(TreeNode root, int targetSum) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        Stack<TreeNode> stack = new Stack<>();
        Stack<List<Integer>> pathStack = new Stack<>();
        Stack<Integer> sumStack = new Stack<>();
        stack.push(root);
        pathStack.push(new ArrayList<>());
        sumStack.push(0);
        while (!stack.isEmpty()) {
            TreeNode node = stack.pop();
            List<Integer> currentPath = pathStack.pop();
            int currentSum = sumStack.pop();
            currentPath.add(node.val);
            currentSum += node.val;
            if (node.left == null && node.right == null) {
                if (currentSum == targetSum) {
                    result.add(new ArrayList<>(currentPath));
                }
            } else {
                if (node.right != null) {
                    stack.push(node.right);
                    pathStack.push(new ArrayList<>(currentPath));
                    sumStack.push(currentSum);
                }
                if (node.left != null) {
                    stack.push(node.left);
                    pathStack.push(new ArrayList<>(currentPath));
                    sumStack.push(currentSum);
                }
            }
        }
        return result;
    }
}
