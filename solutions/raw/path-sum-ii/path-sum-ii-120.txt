/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    private void solve(TreeNode root, int targetSum, List<List<Integer>> ans, List<Integer> path, int[] currSum) {
        if (root == null) {
            return;
        }
        path.add(root.val);
        currSum[0] += root.val;
        if (root.left == null && root.right == null) {
            if (targetSum == currSum[0]) {
                ans.add(new ArrayList<>(path));
            }
            path.remove(path.size() - 1);
            currSum[0] -= root.val;
            return;
        }
        solve(root.left, targetSum, ans, path, currSum);
        solve(root.right, targetSum, ans, path, currSum);
        //Backtrack
        path.remove(path.size() - 1);
        currSum[0] -= root.val;
    }

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        int[] sum = { 0 };
        solve(root, targetSum, ans, list, sum);
        return ans;
    }
}
