class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> paths = new ArrayList<>();
        findPaths(root, targetSum, new ArrayList<Integer>(), paths);
        return paths;
    }

    // The magical function that will populate our paths
    public void findPaths(TreeNode root, int targetSum, List<Integer> current, List<List<Integer>> paths) {
        // Recursive functions require two things, i.e. A base case and the recursive call
        // The base case
        if (root == null)
            return;
        current.add(root.val);
        // the answer case
        if (root.val == targetSum && root.right == null && root.left == null) {
            paths.add(current);
        }
        // The recursive paths
        findPaths(root.left, targetSum - root.val, new ArrayList<Integer>(current), paths);
        findPaths(root.right, targetSum - root.val, new ArrayList<Integer>(current), paths);
    }
}
