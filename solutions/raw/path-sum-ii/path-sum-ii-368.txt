/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    boolean hasPathSum(TreeNode root, int targetSum, List<Integer> list, List<List<Integer>> ans) {
        if (root == null)
            return true;
        if (root.val == targetSum && root.left == null && root.right == null) {
            list.add(root.val);
            ans.add(new ArrayList<>(list));
            list.remove(list.size() - 1);
            return true;
        }
        list.add(root.val);
        boolean left = hasPathSum(root.left, targetSum - root.val, list, ans);
        boolean right = hasPathSum(root.right, targetSum - root.val, list, ans);
        list.remove(list.size() - 1);
        return left || right;
    }

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null)
            return ans;
        List<Integer> list = new ArrayList<Integer>();
        boolean result = hasPathSum(root, targetSum, list, ans);
        return ans;
    }
}
