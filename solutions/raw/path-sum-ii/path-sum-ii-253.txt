class Solution {

    List<List<Integer>> results = new LinkedList<>();

    int targetSum;

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        this.targetSum = targetSum;
        dfs(root, 0, new LinkedList<>());
        return results;
    }

    private void dfs(TreeNode node, int currentSum, List<Integer> values) {
        if (node == null) {
            return;
        }
        currentSum += node.val;
        values.add(node.val);
        if (currentSum == targetSum && isLeaf(node)) {
            results.add(values);
        } else {
            dfs(node.left, currentSum, new LinkedList<>(values));
            dfs(node.right, currentSum, new LinkedList<>(values));
        }
    }

    private boolean isLeaf(TreeNode node) {
        return node.left == null && node.right == null;
    }
}
