/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        if (root == null) {
            return new ArrayList<>();
        }
        return pathSumHelper(root, targetSum, new ArrayList<>());
    }

    static List<List<Integer>> pathSumHelper(TreeNode root, int target, List<Integer> list) {
        if (root == null) {
            return new ArrayList<>();
        }
        if (root.left == null && root.right == null && target - root.val == 0) {
            list.add(root.val);
            List<List<Integer>> temp = new ArrayList<>();
            temp.add(new ArrayList<>(list));
            list.remove(list.size() - 1);
            return temp;
        }
        List<List<Integer>> ans = new ArrayList<>();
        list.add(root.val);
        ans.addAll(pathSumHelper(root.left, target - root.val, list));
        ans.addAll(pathSumHelper(root.right, target - root.val, list));
        list.remove(list.size() - 1);
        return ans;
    }
}
