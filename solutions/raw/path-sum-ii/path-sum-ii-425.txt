class Solution {

    List<List<Integer>> result = new ArrayList<>();

    LinkedList<Integer> path = new LinkedList<>();

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        if (root == null) {
            return result;
        }
        dfs(root, 0, targetSum);
        return result;
    }

    private void dfs(TreeNode root, int sum, int targetSum) {
        sum += root.val;
        path.add(root.val);
        //print the path for your understanding
        // for (int i = 0; i < path.size(); i++) {
        //     System.out.print(path.get(i) + " ");
        // }
        // System.out.println(" ");
        if (sum == targetSum && root.left == null && root.right == null) {
            result.add(new ArrayList<>(path));
            //do not return here
        }
        if (root.left != null) {
            dfs(root.left, sum, targetSum);
        }
        if (root.right != null) {
            dfs(root.right, sum, targetSum);
        }
        sum -= root.val;
        path.removeLast();
    }
}
