/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    List<List<Integer>> ans = new ArrayList<>();

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        pathSumHelper(root, targetSum);
        return ans;
    }

    int tempSum;

    List<Integer> path = new ArrayList<>();

    private void pathSumHelper(TreeNode node, int targetSum) {
        if (node == null) {
            return;
        }
        tempSum += node.val;
        path.add(node.val);
        if (node.left == null && node.right == null) {
            // leaf node
            if (tempSum == targetSum) {
                List<Integer> neww = new ArrayList<>(path);
                ans.add(neww);
            }
        }
        pathSumHelper(node.left, targetSum);
        pathSumHelper(node.right, targetSum);
        tempSum -= node.val;
        path.remove(path.size() - 1);
    }
}
