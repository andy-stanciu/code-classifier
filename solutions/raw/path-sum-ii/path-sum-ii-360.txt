/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> ans = new ArrayList<>();

    ArrayList<Integer> currentList = new ArrayList<Integer>();

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        if (root == null)
            return ans;
        ArrayList<Integer> currentList = new ArrayList<Integer>();
        dfs(root, targetSum);
        return ans;
    }

    public void dfs(TreeNode cur, int val) {
        currentList.add(cur.val);
        if (cur.left == null && cur.right == null) {
            if (val == cur.val) {
                ArrayList<Integer> addList = new ArrayList<>(currentList);
                this.ans.add(addList);
            }
        }
        if (cur.left != null) {
            dfs(cur.left, val - cur.val);
        }
        if (cur.right != null) {
            dfs(cur.right, val - cur.val);
        }
        currentList.remove(currentList.size() - 1);
    }
}
