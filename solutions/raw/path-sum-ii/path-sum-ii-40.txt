/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public static void paths(TreeNode root, int sum, List<List<Integer>> ans, List<Integer> temp) {
        // if root==null return...
        if (root == null)
            return;
        temp.add(root.val);
        if (root.left == null && root.right == null && root.val == sum)
            ans.add(new ArrayList<>(temp));
        // checking on the left subtree of the tree...
        paths(root.left, sum - root.val, ans, temp);
        // checking on the right subtree of the tree...
        paths(root.right, sum - root.val, ans, temp);
        // backtracking step...
        temp.remove(temp.size() - 1);
    }

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        // calling the paths function to get all the answers...
        paths(root, targetSum, ans, temp);
        return ans;
        // Time Complexity : O(N)
        // Space Complexity : O(N)
    }
}
