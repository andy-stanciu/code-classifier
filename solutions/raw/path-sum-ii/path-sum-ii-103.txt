class Solution {

    private List<List<Integer>> result;

    private int t;

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        t = targetSum;
        List<Integer> lst = new ArrayList<Integer>();
        dfs(root, 0, lst);
        return result;
    }

    public void dfs(TreeNode root, int currentSum, List<Integer> currPath) {
        if (root == null) {
            return;
        }
        currentSum += root.val;
        boolean isMatchingSum = currentSum == t;
        boolean isLeafNode = (root.left == null && root.right == null);
        currPath.add(root.val);
        if (isMatchingSum && isLeafNode) {
            result.add(new ArrayList<Integer>(currPath));
        }
        dfs(root.left, currentSum, currPath);
        dfs(root.right, currentSum, currPath);
        if (currPath.size() > 0) {
            currPath.remove(currPath.size() - 1);
        }
    }
}
