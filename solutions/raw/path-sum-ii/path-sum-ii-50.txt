class Solution {

    List<List<Integer>> list = new ArrayList<>();

    List<Integer> path = new ArrayList<>();

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        dfs(root, targetSum);
        return list;
    }

    public void dfs(TreeNode root, int targetSum) {
        //Code tp execute during recurssive function call
        if (root == null) {
            return;
        }
        targetSum = targetSum - root.val;
        path.add(root.val);
        if (targetSum == 0 && root.left == null && root.right == null) {
            list.add(new ArrayList<>(path));
        }
        //Recurssive function calls
        dfs(root.left, targetSum);
        dfs(root.right, targetSum);
        //Operation to perform while backtracking
        path.remove(path.size() - 1);
    }
}
