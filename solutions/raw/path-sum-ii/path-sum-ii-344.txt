/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    private List<List<Integer>> allPathList = new ArrayList<>();

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        int currSum = 0;
        List<Integer> pathList = new ArrayList<>();
        getPaths(root, currSum, targetSum, pathList);
        return allPathList;
    }

    private void getPaths(TreeNode root, int currSum, int targetSum, List<Integer> pathList) {
        if (root == null) {
            return;
        }
        pathList.add(root.val);
        if (root.left == null && root.right == null && currSum + root.val == targetSum) {
            allPathList.add(new ArrayList<>(pathList));
        }
        getPaths(root.left, currSum + root.val, targetSum, pathList);
        getPaths(root.right, currSum + root.val, targetSum, pathList);
        pathList.remove(pathList.size() - 1);
    }
}
