/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<List<Integer>> result = new ArrayList<>();

    public void dfs(TreeNode root, int targetSum, List<Integer> pathNode) {
        if (root == null) {
            return;
        }
        pathNode.add(root.val);
        if (root.left == null && root.right == null && targetSum == root.val) {
            result.add(new ArrayList<>(pathNode));
        } else {
            dfs(root.left, targetSum - root.val, pathNode);
            dfs(root.right, targetSum - root.val, pathNode);
        }
        pathNode.remove(pathNode.size() - 1);
    }

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        if (root == null) {
            return result;
        }
        List<Integer> pathNode = new ArrayList<>();
        dfs(root, targetSum, pathNode);
        return result;
    }
}
