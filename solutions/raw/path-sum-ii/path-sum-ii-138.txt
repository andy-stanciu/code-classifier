/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public void getAns(TreeNode root, int t, int sum, List<Integer> ls, List<List<Integer>> list) {
        if (root.left == null && root.right == null) {
            sum += root.val;
            ls.add(root.val);
            if (sum == t) {
                list.add(new ArrayList<>(ls));
            }
            ls.remove(ls.size() - 1);
            return;
        }
        if (root.left != null) {
            ls.add(root.val);
            getAns(root.left, t, sum + root.val, ls, list);
            ls.remove(ls.size() - 1);
        }
        if (root.right != null) {
            ls.add(root.val);
            getAns(root.right, t, sum + root.val, ls, list);
            ls.remove(ls.size() - 1);
        }
    }

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> list = new ArrayList<>();
        if (root == null)
            return list;
        getAns(root, targetSum, 0, new ArrayList<>(), list);
        return list;
    }
}
