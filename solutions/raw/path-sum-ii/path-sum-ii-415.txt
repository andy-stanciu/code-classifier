/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<List<Integer>> result;

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        result = new ArrayList<>();
        dfs(root, targetSum, new ArrayList<>());
        return result;
    }

    void dfs(TreeNode root, int targetSum, List<Integer> currPath) {
        if (root == null)
            return;
        //Add current node in the path
        currPath.add(root.val);
        //If the current node is leaf node and value of this node is equal to remaining sum then this is the valid path
        if (root.left == null && root.right == null && root.val == targetSum) {
            result.add(new ArrayList<>(currPath));
        }
        //Go to both the childrens
        dfs(root.left, targetSum - root.val, currPath);
        dfs(root.right, targetSum - root.val, currPath);
        //Backtrack and remove current node
        currPath.remove(currPath.size() - 1);
    }
}
