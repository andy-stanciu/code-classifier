/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    private List<List<Integer>> list;

    private int sum = 0;

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        list = new ArrayList();
        sum = 0;
        leafPath(root, new LinkedList<Integer>(), targetSum);
        return list;
    }

    private void leafPath(TreeNode root, List<Integer> paths, int target) {
        if (root == null)
            return;
        sum += root.val;
        paths.add(root.val);
        if (root.left == null && root.right == null && target == sum) {
            List<Integer> l = new ArrayList();
            for (int k : paths) l.add(k);
            list.add(l);
        }
        leafPath(root.left, paths, target);
        leafPath(root.right, paths, target);
        sum -= root.val;
        paths.remove(paths.size() - 1);
    }
}
