/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public void dfs(TreeNode root, List<List<Integer>> ans, LinkedList<Integer> v, int t, int sum) {
        if (root == null)
            return;
        sum += root.val;
        if (root.left == null && root.right == null) {
            if (sum == t) {
                v.add(root.val);
                ans.add(new ArrayList<>(v));
                v.removeLast();
            }
            return;
        }
        v.add(root.val);
        dfs(root.left, ans, v, t, sum);
        dfs(root.right, ans, v, t, sum);
        v.removeLast();
    }

    public List<List<Integer>> pathSum(TreeNode root, int t) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null)
            return ans;
        List<Integer> v = new LinkedList<>();
        dfs(root, ans, new LinkedList<>(), t, 0);
        return ans;
    }
}
// please upvote if u like the solution -Saketh
