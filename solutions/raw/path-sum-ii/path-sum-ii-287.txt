/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        if (root == null)
            return new ArrayList<>();
        List<List<Integer>> list = new ArrayList<>();
        traverse(root, 0, targetSum, list, new ArrayList<>());
        return list;
    }

    private void traverse(TreeNode root, int sum, int targetSum, List<List<Integer>> result, ArrayList<Integer> list) {
        if (root == null) {
            return;
        }
        sum = sum + root.val;
        if (root.left == null && root.right == null) {
            if (sum == targetSum) {
                list.add(root.val);
                result.add(new ArrayList<>(list));
                list.remove(list.size() - 1);
            }
        } else {
            list.add(root.val);
            traverse(root.left, sum, targetSum, result, list);
            traverse(root.right, sum, targetSum, result, list);
            list.remove(list.size() - 1);
        }
    }
}
