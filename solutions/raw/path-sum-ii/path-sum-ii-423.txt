/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> result = new ArrayList<>();
        LinkedList<Integer> comb = new LinkedList<>();
        dfs(result, comb, root, targetSum);
        return result;
    }

    private void dfs(List<List<Integer>> result, LinkedList<Integer> comb, TreeNode root, int targetSum) {
        if (root == null) {
            return;
        }
        if (root.left == null && root.right == null) {
            if (targetSum == root.val) {
                comb.add(root.val);
                result.add(new ArrayList<>(comb));
                comb.removeLast();
            }
            return;
        }
        comb.add(root.val);
        dfs(result, comb, root.left, targetSum - root.val);
        dfs(result, comb, root.right, targetSum - root.val);
        comb.removeLast();
    }
}
