/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public void dfs(TreeNode root, int targetSum, ArrayList<Integer> cur, List<List<Integer>> res) {
        if (root == null) {
            return;
        }
        if (root.left == null && root.right == null) {
            if (targetSum == root.val) {
                cur.add(root.val);
                // System.out.println(cur);
                List<Integer> temp = (List<Integer>) cur.clone();
                res.add(temp);
                cur.remove(cur.size() - 1);
            }
            return;
        }
        cur.add(root.val);
        dfs(root.left, targetSum - root.val, cur, res);
        dfs(root.right, targetSum - root.val, cur, res);
        cur.remove(cur.size() - 1);
    }

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        ArrayList<Integer> cur = new ArrayList<>();
        dfs(root, targetSum, cur, res);
        return res;
    }
}
