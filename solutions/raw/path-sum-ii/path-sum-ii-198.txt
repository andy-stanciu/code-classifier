/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        if (root == null) {
            return new ArrayList<List<Integer>>();
        }
        List<Integer> paths = new ArrayList<Integer>();
        List<List<Integer>> out = new ArrayList<List<Integer>>();
        helper(root, targetSum, paths, out);
        return out;
    }

    private void helper(TreeNode root, int targetSum, List<Integer> path, List<List<Integer>> out) {
        if (root == null) {
            return;
        }
        if (root.left == null && root.right == null && targetSum - root.val == 0) {
            path.add(root.val);
            out.add(path);
            return;
        }
        path.add(root.val);
        List<Integer> copy = new ArrayList<>();
        copy.addAll(path);
        helper(root.left, targetSum - root.val, path, out);
        helper(root.right, targetSum - root.val, copy, out);
    }
}
