/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> result = new ArrayList();
        pathSumUtil(root, targetSum, result, new ArrayList<>());
        return result;
    }

    public void pathSumUtil(TreeNode root, int targetSum, List<List<Integer>> result, List<Integer> path) {
        if (root == null) {
            return;
        }
        path.add(root.val);
        if (isLeaf(root) && targetSum == root.val) {
            result.add(new ArrayList<>(path));
        } else {
            pathSumUtil(root.left, targetSum - root.val, result, path);
            pathSumUtil(root.right, targetSum - root.val, result, path);
        }
        path.remove(path.size() - 1);
    }

    boolean isLeaf(TreeNode root) {
        return root.left == null && root.right == null;
    }
}
