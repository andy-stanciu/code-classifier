/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        dfs(root, targetSum, res, temp);
        return res;
    }

    void dfs(TreeNode node, int targetSum, List<List<Integer>> res, List<Integer> temp) {
        if (node == null)
            return;
        targetSum -= node.val;
        temp.add(node.val);
        if (node.left == null && node.right == null) {
            if (targetSum == 0) {
                res.add(new ArrayList<>(temp));
                temp.remove(temp.size() - 1);
                targetSum += node.val;
                return;
            } else {
                temp.remove(temp.size() - 1);
                targetSum += node.val;
                return;
            }
        }
        if (node.left != null)
            dfs(node.left, targetSum, res, temp);
        if (node.right != null)
            dfs(node.right, targetSum, res, temp);
        targetSum += node.val;
        if (temp.size() > 1) {
            temp.remove(temp.size() - 1);
        }
    }
}
