class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int totalSum = 0;
        for (int num : nums) {
            totalSum += num;
        }
        // they adjust the negative and odd value also thats why we calculate separately.
        int diff = totalSum - target;
        if (diff < 0 || diff % 2 != 0) {
            return 0;
        }
        int sum = diff / 2;
        return countSubsetsWithSum(nums, sum);
    }

    private int countSubsetsWithSum(int[] nums, int sum) {
        int n = nums.length;
        int[] dp = new int[sum + 1];
        dp[0] = 1;
        for (int num : nums) {
            for (int j = sum; j >= num; j--) {
                dp[j] += dp[j - num];
            }
        }
        return dp[sum];
    }
}
