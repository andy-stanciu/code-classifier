class Solution {

    int memo(int[] a, int[][] dp, int ind, int t) {
        // memoization
        if (ind == 0) {
            if (t == 0 && a[0] == 0)
                return 2;
            if (t == 0 || a[0] == t)
                return 1;
            return 0;
        }
        if (dp[ind][t] != -1)
            return dp[ind][t];
        int not = memo(a, dp, ind - 1, t);
        int take = 0;
        if (t >= a[ind])
            take = memo(a, dp, ind - 1, t - a[ind]);
        return dp[ind][t] = not + take;
    }

    public int findTargetSumWays(int[] nums, int t) {
        int len = nums.length;
        int total = 0;
        for (int e : nums) total += e;
        if (total - t < 0 || (total - t) % 2 == 1)
            return 0;
        int s2 = (total - t) / 2;
        int[][] dp = new int[len][s2 + 1];
        for (int i = 0; i < len; i++) {
            for (int j = 0; j <= s2; j++) dp[i][j] = -1;
        }
        return memo(nums, dp, len - 1, s2);
    }
}
