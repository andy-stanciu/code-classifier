class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int n = nums.length;
        return countPartitions(n, target, nums);
    }

    private int countPartitions(int n, int d, int[] arr) {
        int totSum = 0;
        for (int ele : arr) {
            totSum += ele;
        }
        // totSum - d is negative
        // totSum - d is odd
        if (totSum - d < 0 || ((totSum - d) & 1) == 1) {
            return 0;
        }
        int target = (totSum - d) / 2;
        return f(n - 1, target, arr);
    }

    private int f(int ind, int target, int[] arr) {
        // Base case
        if (ind == 0) {
            if (target == 0 && arr[0] == 0)
                return 2;
            if (target == 0 || target == arr[0])
                return 1;
            return 0;
        }
        int notTake = f(ind - 1, target, arr);
        int take = 0;
        if (arr[ind] <= target) {
            take = f(ind - 1, target - arr[ind], arr);
        }
        return notTake + take;
    }
}
