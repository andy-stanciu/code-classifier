class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        // time complexity:- O(2^n);- 674ms
        // return recursion(nums,0,target,0);
        // memoization
        Integer[][] memo = new Integer[nums.length + 1][2 * 1001 + 1];
        return memoization(nums, 0, target, 0, memo);
    }

    private int recursion(int[] nums, int currSum, int target, int indx) {
        if (currSum == target && indx == nums.length)
            return 1;
        if (indx >= nums.length)
            return 0;
        return recursion(nums, currSum + nums[indx], target, indx + 1) + recursion(nums, currSum - nums[indx], target, indx + 1);
    }

    private int memoization(int[] nums, int currSum, int target, int indx, Integer[][] memo) {
        if (currSum == target && indx == nums.length)
            return 1;
        if (indx >= nums.length)
            return 0;
        if (memo[indx][currSum + 1001] != null)
            return memo[indx][currSum + 1001];
        return memo[indx][currSum + 1001] = memoization(nums, currSum + nums[indx], target, indx + 1, memo) + memoization(nums, currSum - nums[indx], target, indx + 1, memo);
    }
}
