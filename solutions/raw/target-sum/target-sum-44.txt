class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int totalSum = 0;
        for (int num : nums) {
            totalSum += num;
        }
        if (Math.abs(target) > totalSum) {
            return 0;
        }
        if ((totalSum + target) % 2 == 1) {
            return 0;
        }
        int subsetSumTotal = (totalSum + target) / 2;
        int[][] dpSubsetSumTable = new int[nums.length + 1][subsetSumTotal + 1];
        for (int i = 0; i <= nums.length; i++) {
            dpSubsetSumTable[i][0] = 1;
        }
        for (int i = 1; i <= nums.length; i++) {
            for (int sum = 0; sum <= subsetSumTotal; sum++) {
                if (sum >= nums[i - 1]) {
                    dpSubsetSumTable[i][sum] = dpSubsetSumTable[i - 1][sum - nums[i - 1]] + dpSubsetSumTable[i - 1][sum];
                } else {
                    dpSubsetSumTable[i][sum] = dpSubsetSumTable[i - 1][sum];
                }
            }
        }
        return dpSubsetSumTable[nums.length][subsetSumTotal];
    }
}
