class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        int[][] dp = new int[nums.length + 1][sum + 1];
        // for(int i=0;i<dp.length;i++)
        // {
        //     Arrays.fill(dp[i],-1);
        //     }
        // return TS1(nums,nums.length,target,0,dp);
        //return PSV11(nums,target,0,nums.length,sum,dp);
        return PSV111(nums, target, 0, nums.length, sum, dp);
    }

    public int TS(int[] nums, int i, int target, int sum) {
        if (i < 0 && sum == target) {
            return 1;
        } else if (i < 0) {
            return 0;
        } else {
            int a = TS(nums, i - 1, target, sum - nums[i]);
            int b = TS(nums, i - 1, target, sum + nums[i]);
            return a + b;
        }
    }

    public int TS1(int[] nums, int i, int target, int sum, int[][] dp, int total) {
        if (dp[i][sum + total] == -1) {
            if (i == 0 && sum == target) {
                dp[i][sum + total] = 1;
            } else if (i == 0) {
                dp[i][sum + total] = 0;
            } else {
                int a = 0;
                int b = 0;
                a = TS1(nums, i - 1, target, sum - nums[i - 1], dp, total);
                b = TS1(nums, i - 1, target, sum + nums[i - 1], dp, total);
                dp[i][sum + total] = a + b;
            }
        }
        return dp[i][sum + total];
    }

    // approach 1 for bottom up approach
    // min diff between two sets
    // make two sets such that
    //set1-set2=target
    //for ex:- -1+1+1+1+1
    //(4)-(1)=3
    public int PSV1(int[] nums, int target, int sum, int i, int total) {
        if (i < 0 && (2 * sum) - total == target) {
            return 1;
        } else if (i < 0) {
            return 0;
        } else {
            return PSV1(nums, target, sum + nums[i], i - 1, total) + PSV1(nums, target, sum, i - 1, total);
        }
    }

    public int PSV11(int[] nums, int target, int sum, int i, int total, int[][] dp) {
        if (dp[i][sum] == -1) {
            if (i == 0 && (2 * sum) - total == target) {
                dp[i][sum] = 1;
            } else if (i == 0) {
                dp[i][sum] = 0;
            } else {
                dp[i][sum] = PSV11(nums, target, sum + nums[i - 1], i - 1, total, dp) + PSV11(nums, target, sum, i - 1, total, dp);
            }
        }
        return dp[i][sum];
    }

    public int PSV111(int[] nums, int target, int sum, int i1, int total, int[][] dp) {
        for (int i = 0; i < dp.length; i++) {
            for (int j = 0; j < dp[0].length; j++) {
                if (i == 0 && (2 * j) - total == target) {
                    dp[i][j] = 1;
                } else if (i == 0) {
                    dp[i][j] = 0;
                } else {
                    int a = 0;
                    if (j + nums[i - 1] < dp[0].length) {
                        a = dp[i - 1][j + nums[i - 1]];
                    }
                    dp[i][j] = a + dp[i - 1][j];
                }
            }
        }
        return dp[i1][sum];
    }
}
