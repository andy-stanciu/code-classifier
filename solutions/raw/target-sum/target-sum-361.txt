class Solution {

    public int findways(int[] nums, int target, int i, int[][] dp) {
        if (target == 0 && i == 0) {
            return 1;
        }
        if (i == 0) {
            return 0;
        }
        if (dp[target][i] != -1) {
            return dp[target][i];
        }
        if (nums[i - 1] <= target) {
            int include = findways(nums, target - nums[i - 1], i - 1, dp);
            int exclude = findways(nums, target, i - 1, dp);
            dp[target][i] = include + exclude;
            return dp[target][i];
        } else {
            dp[target][i] = findways(nums, target, i - 1, dp);
            return dp[target][i];
        }
    }

    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        int n = nums.length;
        for (int i = 0; i < nums.length; i++) {
            sum = sum + nums[i];
        }
        if (Math.abs(target) > sum || (sum - target) % 2 != 0 || sum - target < 0) {
            return 0;
        }
        int tr = (target + sum) / 2;
        int[][] dp = new int[tr + 1][n + 1];
        for (int i = 0; i < dp.length; i++) {
            Arrays.fill(dp[i], -1);
        }
        return findways(nums, tr, n, dp);
    }
}
