class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int n = nums.length;
        int total = 0;
        for (int i = 0; i < n; i++) {
            total += nums[i];
        }
        if (total - target < 0 || (total - target) % 2 == 1) {
            return 0;
        }
        int k = (total - target) / 2;
        int[][] dp = new int[n + 1][k + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= k; j++) {
                dp[i][j] = -1;
            }
        }
        return solve(nums, n, k, 0, dp);
    }

    public static int solve(int[] arr, int n, int k, int index, int[][] dp) {
        if (index == n) {
            if (k == 0) {
                return 1;
            }
            return 0;
        }
        if (dp[index][k] != -1) {
            return dp[index][k];
        }
        //pick
        int pick = 0;
        if (arr[index] <= k) {
            pick = solve(arr, n, k - arr[index], index + 1, dp);
        }
        //not pick
        int notpick = solve(arr, n, k, index + 1, dp);
        return dp[index][k] = pick + notpick;
    }
}
