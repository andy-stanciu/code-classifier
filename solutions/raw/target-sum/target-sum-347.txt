class Solution {

    public int noOfSubsetsWithGivenSum(int[] nums, int n, int sum) {
        int[][] t = new int[n + 1][sum + 1];
        for (int i = 0; i < n + 1; i++) {
            for (int j = 0; j < sum + 1; j++) {
                if (i == 0) {
                    t[i][j] = 0;
                }
                if (j == 0) {
                    t[i][j] = 1;
                }
            }
        }
        for (int i = 1; i < n + 1; i++) {
            for (int j = 0; j < sum + 1; j++) {
                if (nums[i - 1] <= j) {
                    t[i][j] = t[i - 1][j - nums[i - 1]] + t[i - 1][j];
                } else {
                    t[i][j] = t[i - 1][j];
                }
            }
        }
        return t[n][sum];
    }

    public int findTargetSumWays(int[] nums, int target) {
        // s1 + s2 = sum
        // s1 - s2 = diff
        // s1 = (sum+diff)/2
        int n = nums.length;
        int sum = Arrays.stream(nums).reduce((a, b) -> a + b).orElse(-1);
        if (Math.abs(target) > sum || (sum + target) % 2 != 0) {
            return 0;
        }
        int s = (sum + target) / 2;
        return noOfSubsetsWithGivenSum(nums, n, s);
    }
}
