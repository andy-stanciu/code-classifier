class Solution {

    HashMap<Integer, Integer> hm;

    int sum;

    public int findTargetSumWays(int[] nums, int target) {
        hm = new HashMap<>();
        hm.put(-1, 0);
        for (int i = 0; i < nums.length; i++) hm.put(i, hm.get(i - 1) + nums[i]);
        sum = hm.get(nums.length - 1);
        int[][] dp = new int[nums.length][2 * sum + 2];
        for (int[] i : dp) Arrays.fill(i, -1);
        return recur(nums.length - 1, nums, target, dp);
    }

    public int recur(int ind, int[] nums, int target, int[][] dp) {
        if (ind == -1) {
            return target == 0 ? 1 : 0;
        }
        if (target > hm.get(ind) || Math.abs(target) > sum)
            return 0;
        if (dp[ind][sum + target] != -1)
            return dp[ind][sum + target];
        return dp[ind][sum + target] = recur(ind - 1, nums, target + nums[ind], dp) + recur(ind - 1, nums, target - nums[ind], dp);
    }
}
