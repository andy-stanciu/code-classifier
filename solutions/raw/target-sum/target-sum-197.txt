class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            nums[i] = Math.abs(nums[i]);
        }
        target = Math.abs(target);
        int n = nums.length;
        int sum = 0;
        for (Integer i : nums) {
            sum += i;
        }
        if (target > sum)
            return 0;
        if ((target + sum) % 2 != 0)
            return 0;
        int newSum = (target + sum) / 2;
        int[][] dp = new int[n + 1][newSum + 1];
        // we created a matrix which has false representing where we have i representing n and j representing sum
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= newSum; j++) {
                if (i == 0)
                    dp[i][j] = 0;
                if (j == 0)
                    dp[i][j] = 1;
            }
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= newSum; j++) {
                if (nums[i - 1] <= j) {
                    dp[i][j] = (dp[i - 1][j - nums[i - 1]] + dp[i - 1][j]);
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[n][newSum];
    }
}
