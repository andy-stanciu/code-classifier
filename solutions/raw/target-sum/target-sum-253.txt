class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        if (target < 0)
            target = -target;
        int sum = 0;
        for (int num : nums) sum += num;
        if (target > sum)
            return 0;
        int n = nums.length;
        int[][] dp = new int[n][2 * sum + 1];
        if (nums[n - 1] == 0)
            dp[n - 1][sum] = 2;
        else {
            dp[n - 1][nums[n - 1] + sum] = 1;
            dp[n - 1][-nums[n - 1] + sum] = 1;
        }
        for (int i = n - 2; i >= 0; i--) for (int k = 0; k < 2 * sum + 1; k++) {
            if (dp[i + 1][k] == 0)
                continue;
            dp[i][k + nums[i]] += dp[i + 1][k];
            dp[i][k - nums[i]] += dp[i + 1][k];
        }
        return dp[0][target + sum];
    }
}
