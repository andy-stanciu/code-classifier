//dfs + memo
class Solution {

    Map<String, Integer> memo = new HashMap<>();

    public int findTargetSumWays(int[] nums, int target) {
        return dfs(nums, 0, 0, target);
    }

    private int dfs(int[] nums, int index, int sum, int target) {
        if (index == nums.length) {
            if (sum == target)
                return 1;
            return 0;
        }
        if (memo.containsKey(index + "," + sum))
            return memo.get(index + "," + sum);
        int count = 0;
        int option1 = dfs(nums, index + 1, sum + nums[index], target);
        int option2 = dfs(nums, index + 1, sum - nums[index], target);
        memo.put(index + "," + sum, count + option1 + option2);
        return count + option1 + option2;
    }
}
/*
class Solution {
    int count= 0;
    public int findTargetSumWays(int[] nums, int target) {
        backtrack(nums, 0, 0, target);
        return count;
    }
    
    private void backtrack(int[] nums, int index, int sum, int target) {
        if (index == nums.length) {
            if (sum == target) count++;
            return;
        }
        sum = sum + nums[index];
        backtrack(nums, index + 1, sum, target);
        sum = sum - nums[index];
        
        sum = sum - nums[index];
        backtrack(nums, index + 1, sum, target);
        sum = sum + nums[index];
        
    }
}
*/
