class Solution {

    private static int findTargetSumWaysHelper(int[] arr, int target) {
        int n = arr.length;
        int[][] dp = new int[n + 1][target + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= arr.length; i++) {
            for (int j = 0; j <= target; j++) {
                if (arr[i - 1] <= j) {
                    dp[i][j] = dp[i - 1][j - arr[i - 1]] + dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[n][target];
    }

    public int findTargetSumWays(int[] arr, int target) {
        int sum = 0;
        for (int i = 0; i < arr.length; i++) sum += arr[i];
        int val = Math.abs(target);
        if ((sum + target) % 2 != 0 || sum < val || sum < 0)
            return 0;
        return findTargetSumWaysHelper(arr, (sum - target) / 2);
    }
}
