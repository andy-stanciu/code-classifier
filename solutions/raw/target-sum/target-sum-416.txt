class Solution {

    //O(n*sum) time | O(sum) space - where n is the length of the nums,
    // and sum is the amout of the nums
    public int findTargetSumWays(int[] nums, int target) {
        int n = nums.length;
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        if (target > sum || target < -sum)
            return 0;
        int[][] dp = new int[n][2 * sum + 1];
        // base case, dp[idx][sum] means at sum idx, current sum is 0
        dp[0][sum - nums[0]] += 1;
        dp[0][sum + nums[0]] += 1;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < 2 * sum + 1; j++) {
                if (dp[i][j] != 0) {
                    dp[i + 1][j - nums[i + 1]] += dp[i][j];
                    dp[i + 1][j + nums[i + 1]] += dp[i][j];
                }
            }
        }
        return dp[n - 1][sum + target];
    }
}
