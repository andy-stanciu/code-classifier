class Solution {

    static int mod = (int) Math.pow(10, 9);

    public int findTargetSumWays(int[] arr, int target) {
        int n = arr.length;
        int totSum = 0;
        for (int i = 0; i < n; i++) {
            totSum += arr[i];
        }
        //Checking for edge cases
        if (totSum - target < 0 || (totSum - target) % 2 == 1)
            return 0;
        return findWays(arr, (totSum - target) / 2);
    }

    static int findWays(int[] nums, int tar) {
        int n = nums.length;
        int[] prev = new int[tar + 1];
        if (// 2 cases -pick and not pick
        nums[0] == 0)
            // 2 cases -pick and not pick
            prev[0] = 2;
        else
            // 1 case - not pick
            prev[0] = 1;
        // 1 case -pick
        if (nums[0] != 0 && nums[0] <= tar)
            prev[nums[0]] = 1;
        for (int ind = 1; ind < n; ind++) {
            int[] cur = new int[tar + 1];
            for (int target = 0; target <= tar; target++) {
                int notTaken = prev[target];
                int taken = 0;
                if (nums[ind] <= target)
                    taken = prev[target - nums[ind]];
                cur[target] = (notTaken + taken) % mod;
            }
            prev = cur;
        }
        return prev[tar];
    }
}
