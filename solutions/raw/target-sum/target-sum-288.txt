class Solution {

    public static int fun(int ind, int target, int[] arr, int[][] dp) {
        if (ind == 0) {
            if (target == 0 && arr[0] == 0)
                return 2;
            if (target == 0 || target == arr[0])
                return 1;
            return 0;
        }
        if (dp[ind][target] != -1)
            return dp[ind][target];
        int notTaken = fun(ind - 1, target, arr, dp);
        int taken = 0;
        if (arr[ind] <= target)
            taken = fun(ind - 1, target - arr[ind], arr, dp);
        return dp[ind][target] = (notTaken + taken);
    }

    public int findTargetSumWays(int[] nums, int target) {
        int n = nums.length;
        int totSum = 0;
        int d = target;
        for (int i = 0; i < n; i++) {
            totSum += nums[i];
        }
        //Checking for edge cases
        if (totSum - d < 0)
            return 0;
        if ((totSum - d) % 2 == 1)
            return 0;
        int s2 = (totSum - d) / 2;
        int[][] dp = new int[n][s2 + 1];
        for (int[] row : dp) Arrays.fill(row, -1);
        return fun(n - 1, s2, nums, dp);
    }
}
