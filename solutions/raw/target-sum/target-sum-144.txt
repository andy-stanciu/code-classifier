class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum = sum + nums[i];
        }
        int sbsum = 0;
        sbsum = (target + sum) / 2;
        //(sum + target) % 2 != 0
        //this check because we are calculating 2s1=(difference+target)
        //s1= (difference+target)/2
        //here s1 is the sum of 1 subset s2 is the sum of second subset
        //sum can not be in decimal so we have added this check to ensure that the sum is even or not
        if (target > sum || (sum + target) % 2 != 0 || (target + sum) < 0)
            return 0;
        else
            return subsetsumcount(nums.length, nums, sbsum);
    }

    public int subsetsumcount(int n, int[] arr, int sum) {
        int[][] dp = new int[n + 1][sum + 1];
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }
        for (int j = 1; j <= sum; j++) {
            dp[0][j] = 0;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= sum; j++) {
                if (arr[i - 1] <= j) {
                    dp[i][j] = (dp[i - 1][j - arr[i - 1]] + dp[i - 1][j]);
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[n][sum];
    }
}
