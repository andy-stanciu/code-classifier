class Solution {

    private int subset(int[] nums, int n, int sum) {
        int[][] dp = new int[n + 1][sum + 1];
        for (int i = 0; i < n + 1; i++) {
            dp[i][0] = 1;
        }
        for (int j = 1; j < sum + 1; j++) {
            dp[0][j] = 0;
        }
        for (int i = 1; i < n + 1; i++) {
            for (int j = 0; j < sum + 1; j++) {
                if (nums[i - 1] <= j) {
                    dp[i][j] = dp[i - 1][j - nums[i - 1]] + dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[n][sum];
    }

    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for (int k : nums) {
            sum += k;
        }
        if (sum < target)
            return 0;
        if ((sum + target) < 0 || ((sum + target) % 2) != 0)
            return 0;
        int s1 = (target + sum) / 2;
        return subset(nums, nums.length, s1);
    }
}
