class Solution {

    int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for (int n : nums) sum += n;
        // \u8FD9\u4E24\u79CD\u60C5\u51B5\uFF0C\u4E0D\u53EF\u80FD\u5B58\u5728\u5408\u6CD5\u7684\u5B50\u96C6\u5212\u5206
        if (sum < Math.abs(target) || (sum + target) % 2 == 1) {
            return 0;
        }
        return subsets(nums, (sum + target) / 2);
    }

    //     int subsets(int[] nums, int target) {
    //         int n = nums.length;
    //         int dp[][] = new int[n+1][target+1];
    //         dp[0][0] = 1;
    //         // for( int i = 1; i <= n; i++ ) dp[i][0] = 1;
    //         for(int i = 1; i <= n; i++) {
    //             for( int j = 0; j <= target; j++) {
    //                 if( j - nums[i-1] < 0) {
    //                     dp[i][j] = dp[i-1][j];
    //                 } else{
    //                     dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i-1]];
    //                 }
    //             }
    //         }
    //         return dp[n][target];
    //     }
    int subsets(int[] nums, int target) {
        int[] dp = new int[target + 1];
        dp[0] = 1;
        for (int i = 0; i < nums.length; i++) {
            for (int j = target; j >= 0; j--) {
                if (j - nums[i] < 0) {
                    dp[j] = dp[j];
                } else {
                    dp[j] = dp[j] + dp[j - nums[i]];
                }
                // if( j - nums[i] >= 0) {
                //     dp[j] = dp[j] + dp[j-nums[i]];
                // }
            }
        }
        return dp[target];
    }
}
