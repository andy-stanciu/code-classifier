class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        int n = nums.length;
        // calculate sum of numbers
        for (int num : nums) {
            sum += num;
        }
        // Case 1 : target is not possible, if it is greater than the total sum itself
        // Case 2 : (sum - target) should be odd, since (sum + target) will also be odd, which results in
        // (sum + target) / 2 to be decimal num, for which it isn\'t possible find subset, since all nums are ints
        if (target > sum || (sum - target) % 2 != 0) {
            return 0;
        }
        // Calculate s1
        // s1 + s2 = sum
        // s1 - s2 = target
        // Adding both equations
        // s1 + s2 + s1 - s2 = (sum + target)
        int s1 = (sum + Math.abs((target))) / 2;
        // create array of appropriate size
        int[][] dp = new int[n + 1][s1 + 1];
        dp[0][0] = 1;
        // iterate with nums on y axis and s2 on x axis
        for (int row = 1; row < n + 1; row++) {
            for (int col = 0; col < s1 + 1; col++) {
                // nums[row - 1] because we start from index 1 because of base case row at index 0
                if (col >= nums[row - 1]) {
                    // previous value (top) + previous row and col of difference between current target and current num
                    dp[row][col] = dp[row - 1][col] + dp[row - 1][col - nums[row - 1]];
                } else {
                    // just copy the previous value (top)
                    dp[row][col] = dp[row - 1][col];
                }
            }
        }
        return dp[n][s1];
    }
}
