class Solution {

    public static int findWays(int[] num, int tar) {
        int n = num.length;
        int[][] dp = new int[n][tar + 1];
        if (num[0] == 0)
            dp[0][0] = 2;
        else
            dp[0][0] = 1;
        if (num[0] != 0 && num[0] <= tar)
            dp[0][num[0]] = 1;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j <= tar; j++) {
                int npick = dp[i - 1][j];
                int pick = 0;
                if (num[i] <= j)
                    pick = dp[i - 1][j - num[i]];
                dp[i][j] = (pick + npick);
            }
        }
        return dp[n - 1][tar];
    }

    public static int countPartitions(int n, int d, int[] arr) {
        int total = 0;
        for (int i : arr) total += i;
        if (total - d < 0)
            return 0;
        if ((total - d) % 2 == 1)
            return 0;
        int s2 = (total - d) / 2;
        return findWays(arr, s2);
    }

    public int findTargetSumWays(int[] nums, int target) {
        int n = nums.length;
        return countPartitions(n, target, nums);
    }
}
