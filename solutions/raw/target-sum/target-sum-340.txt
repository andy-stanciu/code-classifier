class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        //same as number of subsets with given difference
        int sum = 0;
        int zeroes = 0;
        for (int num : nums) {
            sum += num;
            if (num == 0)
                zeroes++;
        }
        if (sum < target || (sum + target) % 2 == 1)
            return 0;
        sum = (sum + target) / 2;
        if (sum < 0)
            return 0;
        int[][] dp = new int[nums.length + 1][sum + 1];
        for (int i = 0; i <= sum; i++) {
            dp[0][i] = 0;
        }
        for (int i = 0; i <= nums.length; i++) {
            dp[i][0] = 1;
        }
        for (int i = 1; i <= nums.length; i++) {
            for (int j = 1; j <= sum; j++) {
                if (nums[i - 1] > j || nums[i - 1] == 0) {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]];
                }
            }
        }
        return (int) (Math.pow(2, zeroes) * dp[nums.length][sum]);
    }
}
