class Solution {

    // public static int help(int nums[],int target,int idx)
    // {
    //     // Approach 1 :: using recursion
    //    if(idx <-1 )
    //    return 0;
    //    if(idx==-1 && target==0)
    //    return 1;
    //    if(idx==-1 && target!=0)
    //    return 0;
    //    return help(nums,target-nums[idx],idx-1)+help(nums,target+nums[idx],idx-1);
    // }
    // public int findTargetSumWays(int[] nums, int target)
    // {
    //     return help(nums,target,nums.length-1);
    // //    return c;
    // }
    // Approach 2: using dynammic programming
    public int findTargetSumWays(int[] nums, int s) {
        Map<String, Integer> map = new HashMap();
        return find(nums.length - 1, s, nums, map);
    }

    static int find(int n, int s, int[] ar, Map<String, Integer> map) {
        if (n == -1 && s == 0)
            return 1;
        if (n <= -1)
            return 0;
        if (map.containsKey(n + " " + s))
            return map.get(n + " " + s);
        int ans1 = find(n - 1, s - ar[n], ar, map);
        int ans2 = find(n - 1, s + ar[n], ar, map);
        map.put(n + " " + s, (ans1 + ans2));
        return (ans1 + ans2);
    }
}
