class Solution {

    int total = 0;

    public int helper(int[] nums, int i, int curr, int target, int[][] dp) {
        if (i == nums.length) {
            if (curr == target) {
                return 1;
            }
            return 0;
        }
        if (dp[i][curr + total] != Integer.MIN_VALUE)
            return dp[i][curr + total];
        int sum = 0;
        sum += helper(nums, i + 1, curr + nums[i], target, dp);
        sum += helper(nums, i + 1, curr - nums[i], target, dp);
        return dp[i][curr + total] = sum;
    }

    public int findTargetSumWays(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            total += (nums[i]);
        }
        int[][] dp = new int[nums.length][2 * total + 1];
        for (int[] row : dp) {
            Arrays.fill(row, Integer.MIN_VALUE);
        }
        return helper(nums, 0, 0, target, dp);
    }
}
