class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for (int i : nums) {
            sum += i;
        }
        if (Math.abs(target) > sum)
            return 0;
        int[][] dp = new int[nums.length][target + 2 * sum + 1];
        for (int i = 0; i < nums.length; i++) {
            Arrays.fill(dp[i], -1);
        }
        return solve(nums.length, 0, target, sum, nums, dp);
    }

    public int solve(int n, int ind, int target, int sum, int[] nums, int[][] dp) {
        if (ind == n) {
            if (target == 0)
                return 1;
            else
                return 0;
        }
        if (dp[ind][target + sum] != -1)
            return dp[ind][target + sum];
        return dp[ind][target + sum] = solve(n, ind + 1, target - nums[ind], sum, nums, dp) + solve(n, ind + 1, target + nums[ind], sum, nums, dp);
    }
}
