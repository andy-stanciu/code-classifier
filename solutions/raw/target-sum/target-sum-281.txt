class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for (int i : nums) sum += i;
        int t = (target + sum) / 2;
        int[][] dp = new int[nums.length][t + 1];
        return countNumberOfWays(nums, t, nums.length - 1, dp);
    }

    public int countNumberOfWays(int[] nums, int target, int index, int[][] dp) {
        if (index == 0) {
            if (nums[0] == 0 && target == 0)
                return 2;
            if (target == 0)
                return 1;
            if (nums[0] == target)
                return 1;
            return 0;
        }
        if (dp[index][target] != 0)
            return dp[index][target];
        //not pick
        int notPick = countNumberOfWays(nums, target, index - 1, dp);
        //pick
        int pick = 0;
        if (nums[index] <= target)
            pick = countNumberOfWays(nums, target - nums[index], index - 1, dp);
        return dp[index][target] = pick + notPick;
    }
}
