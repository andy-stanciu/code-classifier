class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int n = nums.length;
        return countPartitions(n, target, nums);
    }

    public static int countPartitions(int n, int target, int[] nums) {
        //Similar problem to find partition with given diffreence
        int totSum = 0;
        for (int i : nums) {
            totSum += i;
        }
        if (totSum - target < 0 || (totSum - target) % 2 == 1)
            return 0;
        int s2 = (totSum - target) / 2;
        int[][] dp = new int[n][s2 + 1];
        //Base case
        //We have to find the no. of subsets possible with the sum s2
        //If the target is 0 and nums[0] also 0 the pick and notPick both gives the corrct ans
        if (nums[0] == 0) {
            dp[0][0] = 2;
        } else //I am at index 0 but the nums[0] is not 0
        //There is only one way which is notTake
        {
            dp[0][0] = 1;
        }
        if (nums[0] != 0 && nums[0] <= s2)
            dp[0][nums[0]] = 1;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j <= s2; j++) {
                int notPick = dp[i - 1][j];
                int pick = 0;
                if (nums[i] <= j) {
                    pick = dp[i - 1][j - nums[i]];
                }
                dp[i][j] = pick + notPick;
            }
        }
        return dp[n - 1][s2];
    }
}
