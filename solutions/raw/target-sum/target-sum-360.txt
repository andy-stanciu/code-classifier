class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for (int x : nums) {
            sum += x;
        }
        if (sum - target < 0 || (sum - target) % 2 != 0)
            return 0;
        int s2 = (sum - target) / 2;
        int[][] dp = new int[nums.length][s2 + 1];
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j <= s2; j++) {
                dp[i][j] = -1;
            }
        }
        return helper(nums.length - 1, s2, nums, sum, dp);
    }

    int helper(int idx, int target, int[] nums, int sum, int[][] dp) {
        if (idx == 0) {
            if (target == nums[idx] && target == 0)
                return 2;
            else if (target == nums[idx] || target == 0)
                return 1;
            else
                return 0;
        }
        if (dp[idx][target] != -1)
            return dp[idx][target];
        int notTake = helper(idx - 1, target, nums, sum, dp);
        int take = 0;
        if (nums[idx] <= target) {
            take = helper(idx - 1, target - nums[idx], nums, sum, dp);
        }
        return dp[idx][target] = take + notTake;
    }
}
