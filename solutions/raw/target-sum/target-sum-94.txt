class Solution {

    private int solve(int[] nums, int target, int start, HashMap dp) {
        if (start == nums.length && target == 0)
            return 1;
        if (start == nums.length && target != 0)
            return 0;
        String key = target + "," + start;
        if (dp.containsKey(key))
            return (int) dp.get(key);
        int ans = 0;
        ans = solve(nums, target - nums[start], start + 1, dp) + solve(nums, target + nums[start], start + 1, dp);
        dp.put(key, ans);
        return ans;
    }

    public int findTargetSumWays(int[] nums, int target) {
        HashMap<String, Integer> dp = new HashMap<>();
        return solve(nums, target - nums[0], 1, dp) + solve(nums, target + nums[0], 1, dp);
    }
}
