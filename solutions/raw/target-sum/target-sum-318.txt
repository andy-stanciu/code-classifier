class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum = sum + nums[i];
        }
        //Edge case
        if (target > sum || (sum - target) % 2 != 0) {
            return 0;
        }
        int[][] dp = new int[nums.length][((sum - target) / 2) + 1];
        return memo(nums, nums.length - 1, (sum - target) / 2, dp);
    }

    public int memo(int[] nums, int index, int sum, int[][] dp) {
        if (index == 0) {
            if (sum == 0 && nums[0] == 0) {
                return 2;
            }
            if (sum == 0 || nums[0] == sum) {
                return 1;
            }
            return 0;
        }
        int notpick = memo(nums, index - 1, sum, dp);
        int pick = 0;
        if (nums[index] <= sum) {
            pick = memo(nums, index - 1, sum - nums[index], dp);
        }
        return dp[index][sum] = pick + notpick;
    }
}
