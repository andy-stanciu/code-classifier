class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        int n = nums.length;
        int count0 = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (nums[i] == 0)
                count0++;
        }
        if (Math.abs(target) > sum || (sum + target) % 2 == 1)
            return 0;
        sum = (target + sum) / 2;
        int[][] dp = new int[n][sum + 1];
        for (int i = 0; i < n; i++) {
            dp[i][0] = 1;
        }
        for (int s = 0; s <= sum; s++) {
            if (nums[0] == s) {
                dp[0][s] = 1;
            }
        }
        for (int i = 1; i < n; i++) {
            for (int s = 1; s <= sum; s++) {
                dp[i][s] = dp[i - 1][s];
                if (s - nums[i] >= 0 && nums[i] != 0) {
                    dp[i][s] += dp[i - 1][s - nums[i]];
                }
            }
        }
        return (int) Math.pow(2, count0) * dp[n - 1][sum];
    }
}
