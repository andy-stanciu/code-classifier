class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        // p
        //(s-p) -- sum of nums to be neg
        // t = p - (s-p)
        // 2p-s = t
        // p = (s+t)/2 -- how many p to be selected
        int s = 0;
        int n = nums.length;
        for (int num : nums) s += num;
        target += s;
        // s+t must be non neg, or cannot reach target
        if (target < 0 || target % 2 != 0)
            return 0;
        target /= 2;
        // flatten to one dimension
        int[] dp = new int[target + 1];
        dp[0] = 1;
        for (int i = 0; i < n; ++i) {
            for (int c = target; c >= 0; --c) {
                // if(c < nums[i]){ don\'t need this part \'
                // dp[c] = dp[c];
                if (c >= nums[i]) {
                    dp[c] = dp[c] + dp[c - nums[i]];
                }
            }
        }
        return dp[target];
    }
}
