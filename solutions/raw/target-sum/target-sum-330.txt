class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        // s2 - s1 = target
        // s2 + s1 = totalSum
        // s1 = (totalSum - target) / 2
        // s1 : 0 --> totalSum / 2
        int n = nums.length;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        // If the difference between the total sum of nums and the target is odd,
        // there is no way to partition the array to get the target sum.
        if ((sum - target) % 2 == 1)
            return 0;
        // If the target is greater than the total sum of nums, there is no way
        // to partition the array to get the target sum.
        if (target > sum)
            return 0;
        int s1 = (sum - target) / 2;
        return f(nums, s1);
    }

    public int f(int[] nums, int target) {
        int n = nums.length;
        // int[][] dp = new int[n][target + 1];
        // We only need to keep track of the previous row of the DP table.
        // Therefore, we can use an array instead of a matrix to store the values.
        int[] prev = new int[target + 1];
        for (int i = 0; i < n; i++) {
            int[] curr = new int[target + 1];
            for (int tar = 0; tar <= target; tar++) {
                // base-case
                if (i == 0) {
                    // If there is only one element in the array, there is only
                    // one way to get the target sum (by adding or subtracting the
                    // element depending on its value).
                    if (tar == 0) {
                        if (nums[0] == 0)
                            curr[tar] = 2;
                        else
                            curr[tar] = 1;
                    } else {
                        if (nums[0] == tar)
                            curr[tar] = 1;
                    }
                    continue;
                }
                int pick = 0;
                if (nums[i] <= tar) {
                    pick = prev[tar - nums[i]];
                }
                int notPick = prev[tar];
                curr[tar] = pick + notPick;
            }
            prev = curr.clone();
        }
        // The result is the value in the last column of the DP table.
        return prev[target];
    }
}
