class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        int[][] dp = new int[nums.length + 1][sum + 1];
        for (int[] d : dp) {
            Arrays.fill(d, -1);
        }
        return call(nums.length, 0, sum, nums, target, dp);
    }

    public int call(int i, int s, int sum, int[] nums, int t, int[][] dp) {
        if (i <= 0) {
            if (sum - (2 * s) == t)
                return 1;
            return 0;
        }
        if (dp[i][s] != -1) {
            return dp[i][s];
        }
        int take = call(i - 1, s + nums[i - 1], sum, nums, t, dp);
        int nottake = call(i - 1, s, sum, nums, t, dp);
        return dp[i][s] = take + nottake;
    }
}
