class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        //IMPORTANT: ALL NUMBERS IN NUMS ARE NON NON-NEGATIVE
        //two subsets s1 + s2 = sum
        //s1 - s2 = target
        //2 * s1 = (sum + target)
        //s1 = (sum + target) / 2
        //find the number of subsets with targetSum == (sum + target) / 2
        //base case: nums can not be divided into targetSum
        int n = nums.length;
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        if ((sum + target) % 2 != 0)
            return 0;
        //DID NOT CONSIDER THIS
        if (Math.abs(target) > sum)
            return 0;
        int targetSum = (sum + target) / 2;
        int[][] dp = new int[n + 1][targetSum + 1];
        //dp[i][j] up to the first i numbers in nums, number of subsets with sum == j
        //base case
        //targetSum = 0, dp == 1
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= targetSum; j++) {
                if (nums[i - 1] <= j) {
                    dp[i][j] = dp[i - 1][j - nums[i - 1]] + dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[n][targetSum];
    }
}
