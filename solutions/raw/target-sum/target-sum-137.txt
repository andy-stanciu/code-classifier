class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int maxSum = 0;
        for (int i = 0; i < nums.length; i++) maxSum += nums[i];
        Integer[][] dp = new Integer[nums.length][maxSum * 2 + 1];
        return solve(nums, dp, target, 0, 0, maxSum);
    }

    private static int solve(int[] nums, Integer[][] dp, int target, int index, int sum, int maxSum) {
        if (index == nums.length) {
            if (target == sum)
                return 1;
            return 0;
        }
        if (dp[index][sum + maxSum] != null)
            return dp[index][sum + maxSum];
        int positive = 0, negative = 0;
        positive += solve(nums, dp, target, index + 1, sum + nums[index], maxSum);
        negative += solve(nums, dp, target, index + 1, sum - nums[index], maxSum);
        dp[index][sum + maxSum] = negative + positive;
        return dp[index][sum + maxSum];
    }
}
