class Solution {

    private int findTargetSumWays(int[] nums, int index, int target, HashMap<String, Integer> dpMap) {
        if (index == nums.length && target == 0)
            return 1;
        if (index >= nums.length)
            return 0;
        String key = index + "#" + target;
        if (dpMap.containsKey(key))
            return dpMap.get(key);
        int result = findTargetSumWays(nums, index + 1, target - nums[index], dpMap) + findTargetSumWays(nums, index + 1, target + nums[index], dpMap);
        dpMap.put(key, result);
        return result;
    }

    public int findTargetSumWays(int[] nums, int target) {
        /**
         *            approach: DP with memoization
         *
         *            1. either add the current element to target
         *            2. either subtract the current element from target
         *
         *            time complexity: O(n * m), where n is the length of array and m is the target
         *
         *            space complexity: O(n * m), where n is the length of array and m is the target
         */
        HashMap<String, Integer> dpMap = new HashMap();
        return findTargetSumWays(nums, 0, target, dpMap);
    }
}
