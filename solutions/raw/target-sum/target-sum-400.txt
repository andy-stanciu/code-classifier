class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        HashMap<Integer, Integer> sums = new HashMap<>();
        sums.put(nums[0], 1);
        sums.merge(-nums[0], 1, (old, v) -> v + 1);
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == 0) {
                // each sum doesn\'t change with adding or substracting zero
                // but number of times it appears doubles since we can use + and - for each possible way
                sums.replaceAll((k, v) -> 2 * v);
            } else {
                HashMap<Integer, Integer> newSums = new HashMap<>();
                for (Map.Entry<Integer, Integer> entry : sums.entrySet()) {
                    newSums.merge(entry.getKey() + nums[i], entry.getValue(), Integer::sum);
                    newSums.merge(entry.getKey() - nums[i], entry.getValue(), Integer::sum);
                }
                sums = newSums;
            }
        }
        return sums.getOrDefault(target, 0);
    }
}
