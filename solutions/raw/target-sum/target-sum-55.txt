class Solution {

    public int func(int[][] dp, int[] nums, int target, int ind) {
        if (target < 0)
            return 0;
        if (ind == 0) {
            if (target == 0 && nums[0] == 0)
                return 2;
            if (target == 0 || nums[0] == target)
                return 1;
            return 0;
        }
        if (dp[ind][target] != -1) {
            return dp[ind][target];
        }
        int notTake = func(dp, nums, target, ind - 1);
        int take = 0;
        if (target >= nums[ind]) {
            take += func(dp, nums, target - nums[ind], ind - 1);
        }
        return dp[ind][target] = (take + notTake);
    }

    public int findTargetSumWays(int[] nums, int target) {
        int n = nums.length;
        int totSum = 0;
        for (int x : nums) {
            totSum += x;
        }
        if (totSum - target < 0 || (totSum - target) % 2 == 1)
            return 0;
        int s2 = (totSum - target) / 2;
        int[][] dp = new int[n][s2 + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return func(dp, nums, s2, n - 1);
    }
}
