class Solution {

    public int perfectSum(int[] arr, int n, int sum) {
        // Your code goes here
        int[][] dp = new int[n][sum + 1];
        // for(int i = 0;i<n;i++){
        //     Arrays.fill(dp[i] , -1);
        // }
        int[] prev = new int[sum + 1];
        int[] cur = new int[sum + 1];
        cur[0] = 1;
        prev[0] = 1;
        if (arr[0] <= sum)
            prev[arr[0]] = 1;
        if (arr[0] == 0)
            prev[0] = 2;
        for (int i = 1; i < n; i++) {
            for (int summ = sum; summ >= 0; summ--) {
                int notPick = prev[summ] % (int) (1e9 + 7);
                int pick = 0;
                if (arr[i] <= summ)
                    pick = prev[summ - arr[i]] % (int) (1e9 + 7);
                cur[summ] = (pick + notPick) % (int) (1e9 + 7);
            }
            prev = cur;
        }
        return prev[sum];
    }

    public int countPartitions(int n, int d, int[] arr) {
        // Code here
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum = sum + arr[i];
        }
        if (sum - d < 0 || (sum - d) % 2 == 1)
            return 0;
        return perfectSum(arr, n, (sum - d) / 2);
    }

    public int findTargetSumWays(int[] nums, int target) {
        int n = nums.length;
        return countPartitions(n, target, nums);
    }
}
