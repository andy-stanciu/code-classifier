class Solution {

    public int countSubsets(int[] nums, int n, int sum) {
        int[][] t = new int[n + 1][sum + 1];
        for (int i = 1; i < sum + 1; i++) t[0][i] = 0;
        for (int i = 0; i < n + 1; i++) t[i][0] = 1;
        for (int i = 1; i < n + 1; i++) {
            for (int j = 0; j < sum + 1; j++) {
                if (nums[i - 1] <= j) {
                    t[i][j] = t[i - 1][j - nums[i - 1]] + t[i - 1][j];
                } else {
                    t[i][j] = t[i - 1][j];
                }
            }
        }
        return t[n][sum];
    }

    public int findTargetSumWays(int[] nums, int target) {
        int arrSum = Arrays.stream(nums).sum();
        if (target > arrSum || target < (-arrSum) || (arrSum + target) % 2 != 0)
            return 0;
        int positiveSum = (target + arrSum) / 2;
        int negativeSum = positiveSum - target;
        if (positiveSum + negativeSum < arrSum)
            return 0;
        return countSubsets(nums, nums.length, positiveSum);
    }
}
