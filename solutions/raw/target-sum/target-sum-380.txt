class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int total = Arrays.stream(nums).sum();
        int[] dp = new int[2 * total + 1];
        dp[nums[0] + total] = 1;
        dp[-nums[0] + total] += 1;
        for (int i = 1; i < nums.length; i++) {
            int[] next = new int[2 * total + 1];
            for (int sum = -total; sum <= total; sum++) {
                if (dp[sum + total] > 0) {
                    int index1 = sum + nums[i] + total;
                    int index2 = sum - nums[i] + total;
                    if (index1 >= 0 && index1 <= 2 * total) {
                        next[index1] += dp[sum + total];
                    }
                    if (index2 >= 0 && index2 <= 2 * total) {
                        next[index2] += dp[sum + total];
                    }
                }
            }
            dp = next;
        }
        return Math.abs(target) > total ? 0 : dp[target + total];
    }
}
