class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int sum = SoA(nums);
        if (sum < Math.abs(target))
            return 0;
        // if(sum==target)
        //     return 1;
        if ((target + sum) % 2 != 0)
            return 0;
        target = Math.abs((target + sum) / 2);
        int[][] t = new int[nums.length + 1][target + 1];
        for (int j = 0; j < t[0].length; j++) {
            t[0][j] = 0;
        }
        int flag = 0;
        for (int i = 0; i < t.length; i++) {
            if (i != 0 && nums[i - 1] == 0)
                flag++;
            t[i][0] = (int) Math.pow(2, flag);
        }
        for (int i = 1; i < t.length; i++) {
            for (int j = 1; j < t[0].length; j++) {
                if (nums[i - 1] <= j) {
                    t[i][j] = t[i - 1][j] + t[i - 1][j - nums[i - 1]];
                } else
                    t[i][j] = t[i - 1][j];
            }
        }
        return t[t.length - 1][t[0].length - 1];
    }

    int SoA(int[] arr) {
        int sum = 0;
        for (int num : arr) {
            sum += num;
        }
        return sum;
    }
}
