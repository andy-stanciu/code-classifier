class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int totalsum = 0;
        for (int num : nums) {
            totalsum += num;
        }
        if (totalsum - target < 0 || (totalsum - target) % 2 == 1)
            return 0;
        int s2 = (totalsum - target) / 2;
        return findways(nums, s2);
    }

    private int findways(int[] nums, int target) {
        int n = nums.length;
        int[] prev = new int[target + 1];
        if (nums[0] == 0)
            prev[0] = 2;
        else
            prev[0] = 1;
        if (nums[0] != 0 && nums[0] <= target)
            prev[nums[0]] = 1;
        for (int ind = 1; ind < n; ind++) {
            int[] curr = new int[target + 1];
            for (int tar = 0; tar <= target; tar++) {
                int notTaken = prev[tar];
                int taken = 0;
                if (nums[ind] <= tar)
                    taken = prev[tar - nums[ind]];
                curr[tar] = notTaken + taken;
            }
            prev = curr;
        }
        return prev[target];
    }
}
