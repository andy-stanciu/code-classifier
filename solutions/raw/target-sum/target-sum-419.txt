class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int n = nums.length;
        System.out.println(n);
        if (n == 1) {
            if (nums[0] == Math.abs(target))
                return 1;
            else
                return 0;
        }
        int range = 0;
        for (int x : nums) range += x;
        if ((range + target) % 2 != 0)
            return 0;
        if (range % 2 != 0 && target == 0)
            return 0;
        if (range == 0) {
            return (int) Math.pow(2, n);
        }
        if (range == target) {
            int power = nums.length - 1;
            double exp = Math.pow(2, power);
            return (int) exp;
        }
        int subsetSum = (range + target) / 2;
        int[][] dp = new int[n + 1][subsetSum + 1];
        for (int i = 0; i <= n; i++) dp[i][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= subsetSum; j++) {
                if (nums[i - 1] <= j) {
                    dp[i][j] = dp[i - 1][j - nums[i - 1]] + dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[n][subsetSum];
    }
}
