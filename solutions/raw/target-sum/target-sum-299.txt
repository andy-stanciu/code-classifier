class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int totalSum = 0;
        for (int i = 0; i < nums.length; i++) {
            totalSum += nums[i];
        }
        if (totalSum - target < 0 || (totalSum - target) % 2 == 1) {
            //  *
            return 0;
        }
        int k = (totalSum + target) / 2;
        if (k < 0) {
            return 0;
        }
        return subsetSumToK(nums, k);
    }

    public int subsetSumToK(int[] nums, int k) {
        int n = nums.length;
        int[][] dp = new int[n][k + 1];
        if (nums[0] == 0) {
            dp[0][0] = 2;
        } else {
            dp[0][0] = 1;
        }
        if (nums[0] != 0 && nums[0] <= k) {
            dp[0][nums[0]] = 1;
        }
        for (int i = 1; i < dp.length; i++) {
            for (int j = 0; j < dp[0].length; j++) {
                int notPick = dp[i - 1][j];
                int pick = 0;
                if (nums[i] <= j) {
                    pick = dp[i - 1][j - nums[i]];
                }
                dp[i][j] = (pick + notPick);
            }
        }
        return dp[n - 1][k];
    }
}
