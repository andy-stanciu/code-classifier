class Solution {

    public int findTargetSumWays(int[] nums, int n, int target, Map<Integer, Integer>[] memo) {
        if (n == 0) {
            return (target == 0) ? 1 : 0;
        }
        if (memo[n].containsKey(target)) {
            return memo[n].get(target);
        }
        int assignPlus = findTargetSumWays(nums, n - 1, target - nums[n - 1], memo);
        int assignSub = findTargetSumWays(nums, n - 1, target + nums[n - 1], memo);
        memo[n].put(target, assignPlus + assignSub);
        return memo[n].get(target);
    }

    public int findTargetSumWays(int[] nums, int target) {
        Map<Integer, Integer>[] memo = new Map[nums.length + 1];
        for (int i = 0; i <= nums.length; i++) {
            memo[i] = new HashMap<>();
        }
        return findTargetSumWays(nums, nums.length, target, memo);
    }
}
