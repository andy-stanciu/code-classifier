class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int n = nums.length;
        // int[][] dp = new int[n][target+1];
        int totsum = 0;
        for (int i = 0; i < n; i++) {
            totsum += nums[i];
        }
        int newt = (totsum - target) / 2;
        if (totsum < Math.abs(target) || (totsum - target) % 2 != 0)
            return 0;
        int[][] dp = new int[n][newt + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return solve(n - 1, newt, nums, dp);
    }

    static int solve(int ind, int target, int[] nums, int[][] dp) {
        if (ind == 0) {
            if (target == 0 && nums[0] == 0)
                return 2;
            if (target == 0 || target == nums[0])
                return 1;
            return 0;
        }
        if (dp[ind][target] != -1)
            return dp[ind][target];
        int nottake = solve(ind - 1, target, nums, dp);
        int take = 0;
        if (target >= nums[ind]) {
            take = solve(ind - 1, target - nums[ind], nums, dp);
        }
        return dp[ind][target] = take + nottake;
    }
}
