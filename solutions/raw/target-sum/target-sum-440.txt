class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        if (sum - target < 0 || (sum - target) % 2 != 0) {
            return 0;
        }
        int a = (sum - target) / 2;
        int[][] dp = new int[nums.length][a + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return solve(nums, a, nums.length - 1, dp);
    }

    private int solve(int[] nums, int sum, int i, int[][] dp) {
        if (i == 0) {
            if (nums[0] == 0 && sum == 0) {
                return 2;
            }
            if (sum == 0 || sum == nums[0]) {
                return 1;
            }
            return 0;
        }
        if (dp[i][sum] != -1) {
            return dp[i][sum];
        }
        int notTake = solve(nums, sum, i - 1, dp);
        int take = 0;
        if (nums[i] <= sum) {
            take = solve(nums, sum - nums[i], i - 1, dp);
        }
        return dp[i][sum] = notTake + take;
    }
}
