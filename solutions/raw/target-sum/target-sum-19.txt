class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        if (sum < Math.abs(target) || (sum + target) % 2 == 1) {
            return 0;
        }
        // sum(A) - sum(B) = target
        // sum(A) = target + sum(B)
        // sum(A) + sum(A) = target + sum(B) + sum(A)
        // 2 * sum(A) = target + sum(nums)
        return subsets(nums, (sum + target) / 2);
    }

    private int subsets(int[] nums, int sum) {
        int n = nums.length;
        // int[][] dp = new int[n + 1][sum + 1];
        // dp[0][0] = 1;
        // for (int i = 1; i <= n; i++) {
        //     for (int j = 0; j <= sum; j++) {
        //             if (j >= nums[i - 1]) {
        //                 dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]];
        //             } else {
        //                 dp[i][j] = dp[i - 1][j];
        //             }
        //     }
        // }
        // return dp[n][sum];
        int[] dp = new int[sum + 1];
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = sum; j >= 0; j--) {
                if (j >= nums[i - 1]) {
                    dp[j] = dp[j] + dp[j - nums[i - 1]];
                } else {
                    dp[j] = dp[j];
                }
            }
        }
        return dp[sum];
    }
}
// class Solution {
//     int result = 0;
//     public int findTargetSumWays(int[] nums, int target) {
//         backtracking(nums, 0, target, 0);
//         return result;
//     }
//     private void backtracking(int[] nums, int index, int target, int currentSum) {
//         if (index == nums.length) {
//             if (currentSum == target) {
//                 result++;
//             }
//             return;
//         }
//         backtracking(nums, index + 1, target, currentSum + nums[index]);
//         backtracking(nums, index + 1, target, currentSum - nums[index]);
//     }
// }
