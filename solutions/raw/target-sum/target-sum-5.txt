class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        if (sum < target || (sum - target) % 2 != 0) {
            return 0;
        }
        //refer problem DP - 21 => DP 18 DP17 from striver
        int newTarget = (sum - target) / 2;
        int[][] dp = new int[n + 1][newTarget + 1];
        dp[0][0] = 1;
        // If idx is 0 and newTarget is not 0, there are no ways to achieve a non-zero sum
        // for(int j=1;j<=newTarget;j++){
        // dp[0][j] = 0;
        // }
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= newTarget; j++) {
                dp[i][j] = dp[i - 1][j];
                if (j - nums[i - 1] >= 0) {
                    dp[i][j] += dp[i - 1][j - nums[i - 1]];
                }
            }
        }
        return dp[n][newTarget];
    }
}
