class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int N = nums.length;
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum = sum + nums[i];
        }
        if ((target + sum) % 2 != 0 || (target + sum) < 0)
            return 0;
        // there will be two subsets/partitions such that diffrence = target
        return isSubsetSum(nums.length, nums, (target + sum) / 2);
    }

    static int isSubsetSum(int N, int[] arr, int sum) {
        // code here
        int[][] t = new int[N + 1][sum + 1];
        for (int i = 0; i <= N; i++) {
            for (int j = 0; j <= sum; j++) {
                if (i == 0)
                    t[i][j] = 0;
                if (j == 0)
                    t[i][j] = 1;
            }
        }
        for (int i = 1; i <= N; i++) {
            for (int j = 0; j <= sum; j++) {
                if (arr[i - 1] > j)
                    t[i][j] = t[i - 1][j];
                else
                    t[i][j] = (t[i - 1][j] + t[i - 1][j - arr[i - 1]]);
            }
        }
        return t[N][sum];
    }
}
