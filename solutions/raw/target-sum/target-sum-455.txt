class Solution {

    public int findTargetSumWays(int[] nums, int d) {
        int n = nums.length;
        int total = 0;
        for (int a : nums) {
            total += a;
        }
        int target = (total - d) / 2;
        if (total - d < 0 || ((total - d) % 2) == 1) {
            return 0;
        }
        int[][] dp = new int[n][target + 1];
        if (nums[0] == 0) {
            dp[0][0] = 2;
        } else {
            dp[0][0] = 1;
        }
        if (nums[0] != 0 && nums[0] <= target) {
            dp[0][nums[0]] = 1;
        }
        for (int i = 1; i < nums.length; i++) {
            for (int j = 0; j <= target; j++) {
                int take = 0;
                if (nums[i] <= j) {
                    take = dp[i - 1][j - nums[i]];
                }
                int nottake = dp[i - 1][j];
                dp[i][j] = take + nottake;
            }
        }
        return dp[n - 1][target];
    }
}
