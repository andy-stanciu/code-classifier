class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int sum = Arrays.stream(nums).sum();
        if (target > sum || (sum + target) % 2 != 0 || target < -sum) {
            return 0;
        }
        int columnLength = 2 * sum + 1;
        int[][] dp = new int[nums.length][columnLength];
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < columnLength; j++) {
                if (i == 0) {
                    if (j == sum + nums[i] || j == sum - nums[i]) {
                        if (nums[i] == 0) {
                            dp[i][j] = 2;
                        } else {
                            dp[i][j] = 1;
                        }
                    } else {
                        dp[i][j] = 0;
                    }
                } else {
                    if (j - nums[i] >= 0) {
                        dp[i][j] += dp[i - 1][j - nums[i]];
                    }
                    if (j + nums[i] < columnLength) {
                        dp[i][j] += dp[i - 1][j + nums[i]];
                    }
                }
            }
        }
        if (target >= 0) {
            return dp[nums.length - 1][target + sum];
        } else {
            int absTarget = Math.abs(target);
            return dp[nums.length - 1][absTarget - sum];
        }
    }
}
