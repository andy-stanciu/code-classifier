class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int sum = Arrays.stream(nums).sum();
        // if target is out of bound, return 0
        if (target > sum || target < -1 * sum) {
            return 0;
        }
        int[][] dp = new int[nums.length + 1][sum * 2 + 1];
        // we can use 0 number to add up to 0
        dp[0][sum] = 1;
        // actual ranget we can add up to is [-sum, sum]
        // convert this range to array index, +sum
        for (int i = 1; i < nums.length + 1; i++) {
            for (int j = 0; j < sum * 2 + 1; j++) {
                // out of lower bound
                if (j - nums[i - 1] < 0) {
                    dp[i][j] = dp[i - 1][j + nums[i - 1]];
                } else // out of higher bound
                if (j + nums[i - 1] > sum * 2) {
                    dp[i][j] = dp[i - 1][j - nums[i - 1]];
                } else // normal recursion formula
                {
                    dp[i][j] = dp[i - 1][j - nums[i - 1]] + dp[i - 1][j + nums[i - 1]];
                }
            }
        }
        /*
        for(int i=0; i<nums.length+1; i++){
            for(int j=0; j<sum*2+1; j++){
                System.out.print(dp[i][j] + " ");
            }
            System.out.println();
        }
        */
        return dp[nums.length][target + sum];
    }
}
