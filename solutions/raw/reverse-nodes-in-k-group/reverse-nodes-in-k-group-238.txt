/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        if (k == 1 || head == null)
            return head;
        ListNode temp = head;
        int i = 0;
        while (i < k && temp != null) {
            i++;
            // System.out.println(temp.val);
            temp = temp.next;
        }
        if (i != k)
            return head;
        // System.out.println("we will swap starting from " +head.val + " until before "+ temp.val );
        Stack<ListNode> st = new Stack<ListNode>();
        i = 0;
        ListNode it = head;
        while (i < k) {
            i++;
            st.push(it);
            it = it.next;
        }
        head = st.pop();
        // System.out.println(" head is " + head.val);
        it = head;
        while (!st.isEmpty()) {
            // System.out.println(" value of it is " + it.val);
            it.next = st.pop();
            it = it.next;
        }
        // System.out.println(" value of it is here" + it.val);
        // System.out.println( " value of current temp is " + temp.val);
        it.next = reverseKGroup(temp, k);
        // temp = ;temp
        return head;
    }
}
