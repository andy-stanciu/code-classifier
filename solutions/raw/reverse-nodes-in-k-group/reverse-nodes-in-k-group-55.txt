/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseBetween(ListNode head, int l, int r) {
        int c = 1;
        ListNode l1 = head;
        while (c < l) {
            l1 = l1.next;
            c++;
        }
        ListNode l2 = l1;
        while (true) {
            while (c < r) {
                l2 = l2.next;
                c++;
            }
            if (l1 != l2) {
                int temp = l1.val;
                l1.val = l2.val;
                l2.val = temp;
            } else {
                break;
            }
            l1 = l1.next;
            l++;
            r--;
            c = l;
            l2 = l1;
        }
        return head;
    }

    static int countNodes(ListNode head) {
        int count = 0;
        ListNode current = head;
        while (current != null) {
            count++;
            current = current.next;
        }
        return count;
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        int n = countNodes(head);
        ListNode current = head;
        if (n < k) {
            return head;
        }
        int i = 1;
        int j = k;
        while (n >= k) {
            head = reverseBetween(current, i, j);
            current = head;
            i = j + 1;
            j = j + k;
            n = n - k;
        }
        return head;
    }
}
