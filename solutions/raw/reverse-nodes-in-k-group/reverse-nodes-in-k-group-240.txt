/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || head.next == null)
            return head;
        ListNode result = null;
        ListNode temp = head;
        int c = 0;
        ListNode temp1 = null;
        while (temp != null) {
            c++;
            ListNode left = temp;
            ListNode right = temp;
            if (left != head) {
                temp1 = head;
                while (temp1.next != left) {
                    temp1 = temp1.next;
                }
            }
            for (int x = 0; x < k; x++) {
                if (right == null)
                    return result;
                right = right.next;
            }
            ListNode curr = left;
            ListNode agla = null;
            ListNode prev = null;
            while (curr != right) {
                agla = curr.next;
                curr.next = prev;
                prev = curr;
                curr = agla;
            }
            if (left != head) {
                temp1.next = prev;
            }
            left.next = right;
            temp = curr;
            if (c == 1)
                result = prev;
        }
        return result;
    }
}
