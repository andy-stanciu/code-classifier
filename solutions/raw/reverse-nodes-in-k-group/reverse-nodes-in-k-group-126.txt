/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        int i = 0;
        ListNode temp = head;
        while (temp != null) {
            temp = temp.next;
            i++;
        }
        return reverse(head, k, i);
    }

    private ListNode reverse(ListNode head, int k, int len) {
        if (head == null || head.next == null || len < k) {
            return head;
        }
        ListNode prev = null;
        ListNode join = head;
        ListNode cur = join;
        int i = 0;
        while (i != k) {
            i++;
            ListNode nxt = cur.next;
            cur.next = prev;
            prev = cur;
            cur = nxt;
            if (nxt != null) {
                nxt = nxt.next;
            }
        }
        join.next = reverse(cur, k, len - i);
        return prev;
    }
}
