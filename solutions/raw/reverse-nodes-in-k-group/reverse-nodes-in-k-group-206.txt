/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    private ListNode reverse(ListNode head) {
        ListNode prev = null;
        while (head != null) {
            ListNode temp = head.next;
            head.next = prev;
            prev = head;
            head = temp;
        }
        return prev;
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode dummy = new ListNode(0, head);
        ListNode temp = head;
        int l = 0;
        while (temp != null) {
            temp = temp.next;
            l++;
        }
        int t = l / k;
        ListNode prev = null;
        ListNode prevend = dummy;
        temp = head;
        for (int i = 0; i < t; i++) {
            ListNode start = temp;
            for (int j = 0; j < k; j++) {
                prev = temp;
                temp = temp.next;
            }
            prev.next = null;
            ListNode t1 = reverse(start);
            prevend.next = t1;
            prevend = start;
            start.next = temp;
        }
        return dummy.next;
    }
}
