class Solution {

    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode front = head;
        while (head != null) {
            front = head.next;
            head.next = prev;
            prev = head;
            head = front;
        }
        return prev;
    }

    public ListNode findKthNode(ListNode head, int k) {
        while (k > 1) {
            head = head.next;
            k--;
            if (head == null) {
                return null;
            }
        }
        return head;
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode newHead = new ListNode(-1);
        ListNode prev = newHead;
        newHead.next = head;
        while (head != null) {
            ListNode kNode = findKthNode(head, k);
            if (kNode == null) {
                prev.next = head;
                break;
            }
            ListNode front = kNode.next;
            kNode.next = null;
            ListNode reversedHead = reverseList(head);
            prev.next = reversedHead;
            prev = head;
            head = front;
        }
        return newHead.next;
    }
}
