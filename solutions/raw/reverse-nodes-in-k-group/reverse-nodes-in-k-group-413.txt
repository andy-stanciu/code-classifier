/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public static int flength(ListNode head) {
        ListNode temp = head;
        int length = 0;
        while (temp != null) {
            temp = temp.next;
            length++;
        }
        return length;
    }

    public static ListNode reverse(ListNode head, int k, int length) {
        if (length < k)
            return head;
        ListNode bef = null;
        ListNode curr = head;
        ListNode after = head;
        int count = 0;
        while (count < k && curr != null) {
            after = curr.next;
            curr.next = bef;
            bef = curr;
            curr = after;
            count++;
        }
        if (after != null)
            head.next = reverse(after, k, length - k);
        return bef;
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        int length = flength(head);
        return reverse(head, k, length);
    }
}
