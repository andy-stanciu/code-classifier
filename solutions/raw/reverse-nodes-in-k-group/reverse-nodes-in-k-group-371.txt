/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || k == 1)
            return head;
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prevGroupEnd = dummy;
        ListNode start = head;
        ListNode tail = head;
        while (true) {
            int c = 0;
            while (c < k && tail != null) {
                tail = tail.next;
                c++;
            }
            if (c == k) {
                ListNode newGroupStart = reverse(start, tail);
                prevGroupEnd.next = newGroupStart;
                prevGroupEnd = start;
                start = tail;
            } else {
                prevGroupEnd.next = start;
                break;
            }
        }
        return dummy.next;
    }

    public ListNode reverse(ListNode start, ListNode tail) {
        ListNode cur = start;
        ListNode prev = null;
        while (cur != tail) {
            ListNode nxt = cur.next;
            cur.next = prev;
            prev = cur;
            cur = nxt;
        }
        return prev;
    }
}
