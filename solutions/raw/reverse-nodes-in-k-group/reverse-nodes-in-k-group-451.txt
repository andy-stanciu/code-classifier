/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode dummy = new ListNode();
        dummy.next = recur(head, k);
        return dummy.next;
    }

    public ListNode recur(ListNode head, int k) {
        //1, 2, 3, 4
        // No swap for this base case
        if (head == null || head.next == null) {
            return head;
        }
        // Break the list at k size
        //1
        ListNode curr = head;
        //1
        ListNode prev = head;
        for (int i = 0; i < k - 1; i++) {
            // *** i < k-1 as our curr will move to next before condition check
            curr = curr.next;
            if (curr == null) {
                return head;
            }
        }
        //2
        prev = curr;
        //3 - head 1, prev 2, curr 3
        curr = curr.next;
        prev.next = null;
        // we will need this head to point to next node
        ListNode reverse = reverseList(head);
        head.next = recur(curr, k);
        return reverse;
    }

    private ListNode reverseList(ListNode head) {
        ListNode curr = head;
        if (curr == null || curr.next == null) {
            return curr;
        }
        ListNode prev = reverseList(curr.next);
        curr.next.next = curr;
        curr.next = null;
        return prev;
    }
}
