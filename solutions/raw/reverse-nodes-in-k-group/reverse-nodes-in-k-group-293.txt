/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        if (head.next == null || head == null || k == 1)
            return head;
        int length = 0;
        for (ListNode cur = head; cur != null; cur = cur.next) {
            length++;
        }
        ListNode curr = head;
        int count = 0;
        ListNode dummySend = new ListNode(0);
        ListNode Send = dummySend;
        ListNode dummy = new ListNode(0);
        ListNode res = dummy;
        while (curr != null) {
            dummySend.next = new ListNode(curr.val);
            dummySend = dummySend.next;
            curr = curr.next;
            count++;
            if (count == k) {
                dummy.next = revers(Send.next);
                while (dummy.next != null) {
                    dummy = dummy.next;
                }
                dummySend = new ListNode(0);
                Send = dummySend;
                count = 0;
            }
        }
        if (count > 0)
            dummy.next = Send.next;
        return res.next;
    }

    public ListNode revers(ListNode head) {
        ListNode curr = head, next = null, prev = null;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}
