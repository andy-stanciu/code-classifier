/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode pre = dummy;
        ListNode temp = head;
        Stack<ListNode> st = new Stack<>();
        while (temp != null) {
            int count = 0;
            ListNode curr = temp;
            while (count < k && temp != null) {
                st.push(temp);
                temp = temp.next;
                count++;
            }
            if (count == k) {
                while (!st.isEmpty()) {
                    pre.next = st.pop();
                    pre = pre.next;
                }
                pre.next = temp;
            } else {
                pre.next = curr;
            }
        }
        return dummy.next;
    }
}
