/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode runner = head;
        for (int i = 0; i < k; i++) {
            if (runner == null) {
                return head;
            }
            runner = runner.next;
        }
        // now start reverse the first part.
        ListNode dummyHead = new ListNode();
        dummyHead.next = head;
        ListNode preNode = dummyHead;
        ListNode curNode = head;
        int count = 0;
        while (count < k) {
            ListNode nextNode = curNode.next;
            curNode.next = preNode;
            preNode = curNode;
            curNode = nextNode;
            count++;
        }
        dummyHead.next.next = reverseKGroup(curNode, k);
        dummyHead.next = preNode;
        return dummyHead.next;
    }
}
