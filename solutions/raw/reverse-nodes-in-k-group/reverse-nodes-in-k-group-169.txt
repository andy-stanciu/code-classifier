/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    private int sizeOfList(ListNode head) {
        int size = 0;
        ListNode current = head;
        while (current != null) {
            size++;
            current = current.next;
        }
        return size;
    }

    private ListNode reverse(ListNode head, int k) {
        ListNode curr = head;
        ListNode prev = null;
        ListNode next = null;
        for (int i = 0; i < k; i++) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || k == 1)
            return head;
        int size = sizeOfList(head);
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prevGroupEnd = dummy;
        ListNode current = head;
        while (size >= k) {
            ListNode groupStart = current;
            ListNode groupEnd = prevGroupEnd;
            for (int i = 0; i <= k; i++) {
                groupEnd = groupEnd.next;
            }
            current = groupEnd;
            ListNode reversedGroupHead = reverse(groupStart, k);
            prevGroupEnd.next = reversedGroupHead;
            groupStart.next = current;
            prevGroupEnd = groupStart;
            size -= k;
        }
        return dummy.next;
    }
}
