/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        int c = 0;
        ArrayList<ListNode> al = new ArrayList<>();
        ListNode curr = head;
        while (curr != null) {
            al.add(curr);
            curr = curr.next;
        }
        int size = al.size();
        int start = size - size % k - 1;
        for (; start > 0; start -= k) {
            int ind = start - k + 1;
            int ind2 = start;
            while (ind < ind2) {
                ListNode temp = al.get(ind);
                ListNode t2 = al.get(ind2);
                al.set(ind, t2);
                al.set(ind2, temp);
                ind++;
                ind2--;
            }
        }
        al.get(al.size() - 1).next = null;
        for (int i = 0; i < al.size() - 1; i++) al.get(i).next = al.get(i + 1);
        return al.get(0);
    }
}
