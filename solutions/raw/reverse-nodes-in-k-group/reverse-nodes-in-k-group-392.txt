class Solution {

    public static ListNode reverse(ListNode headN, ListNode tailN) {
        ListNode prev = tailN.next;
        ListNode curr = headN;
        while (curr != tailN) {
            ListNode nex = curr.next;
            curr.next = prev;
            //System.out.println(curr.val+" "+prev.val );
            prev = curr;
            curr = nex;
        }
        if (curr != null) {
            //System.out.println(curr.val+" "+prev.val );
            curr.next = prev;
        }
        return tailN;
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode start = head;
        boolean first = true;
        ListNode prevHead = null;
        while (start != null) {
            ListNode headN = start;
            for (int i = 0; start != null && i < k - 1; i++) {
                start = start.next;
            }
            if (start == null)
                break;
            ListNode tailN = start;
            ListNode nex = start.next;
            if (prevHead != null) {
                prevHead.next = tailN;
            }
            //System.out.println(headN.val+" "+tailN.val);
            if (first == true) {
                head = reverse(headN, tailN);
                first = false;
            } else {
                reverse(headN, tailN);
            }
            start = nex;
            prevHead = headN;
        }
        return head;
    }
}
