/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        // dummy node to keep track of the Head
        ListNode dummy = new ListNode(0);
        // \'predecessor\' pointer to keep track of the already reversed list\'s end.
        ListNode predecessor = dummy;
        // \'tail\' pointer at the start of the reversal list as its head will become tail after reversal
        ListNode tail = head;
        // \'successor\' pointer to keep track of the staring node of next reversal list
        ListNode successor = null;
        // current pointer for the traversal
        ListNode curr = head;
        for (int i = 1; curr != null; i++) {
            if (i % k == 0) {
                successor = curr.next;
                ListNode reversedHead = reverseList(tail, k);
                predecessor.next = reversedHead;
                // predecessor -> reversedHead....tail-> successor
                tail.next = successor;
                // Moving predecessor to the end of the already reversed list.
                predecessor = tail;
                // Moving curr and tail to the start of the next reversal list.
                curr = tail = successor;
                continue;
            }
            curr = curr.next;
        }
        return dummy.next;
    }

    private ListNode reverseList(ListNode head, int k) {
        ListNode prevHead = null;
        ListNode curr = head;
        for (int i = 1; i <= k; i++) {
            ListNode recordNext = curr.next;
            curr.next = prevHead;
            prevHead = curr;
            curr = recordNext;
        }
        // NewHead of the reversed list
        return prevHead;
    }
}
