/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode curr = head;
        ListNode prev = null;
        ListNode nextN = curr.next;
        int count = k;
        int rNodes = 0;
        while (curr != null) {
            rNodes++;
            curr = curr.next;
        }
        curr = head;
        int n = 0;
        while (rNodes >= k) {
            count = k;
            ListNode newlastNode = curr;
            ListNode lastNode = prev;
            int flag = 0;
            while (count > 0 && curr != null) {
                flag = 1;
                nextN = curr.next;
                curr.next = prev;
                prev = curr;
                curr = nextN;
                count--;
            }
            if (n == 0) {
                head = prev;
            }
            if (flag == 1)
                n = n + 1;
            rNodes = (rNodes - (k));
            if (lastNode != null)
                lastNode.next = prev;
            prev = newlastNode;
            if (prev != null)
                prev.next = curr;
        }
        return head;
    }
}
