/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode slow = head, fast = head;
        int idx = 0;
        ListNode prev = null, newNode = head;
        while (fast != null) {
            int j = idx, limit = idx + k;
            while (fast != null && j != limit) {
                j++;
                fast = fast.next;
            }
            if (j % k != 0)
                return newNode;
            ListNode curr = slow;
            ListNode newTail = reverse(curr, fast);
            if (prev != null) {
                prev.next = newTail;
            } else {
                newNode = newTail;
            }
            prev = slow;
            slow.next = fast;
            slow = fast;
        }
        return newNode;
    }

    public ListNode reverse(ListNode head, ListNode fast) {
        if (head.next == fast) {
            return head;
        }
        ListNode newNode = reverse(head.next, fast);
        ListNode temp = head.next;
        temp.next = head;
        head.next = null;
        return newNode;
    }
}
