/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode temp = head;
        int count = 0;
        while (temp != null) {
            temp = temp.next;
            count++;
        }
        int remain = 0;
        if (count % k != 0) {
            remain = count % k;
        }
        List<Integer> ans = new ArrayList<>();
        ListNode pn = head;
        while (count >= k) {
            List<Integer> list = new ArrayList<>();
            int traver = k;
            while (traver != 0) {
                list.add(pn.val);
                pn = pn.next;
                traver--;
            }
            Collections.reverse(list);
            ans.addAll(list);
            count = count - k;
        }
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        for (int num : ans) {
            ListNode node = new ListNode(num);
            current.next = node;
            current = current.next;
        }
        if (remain != 0) {
            while (pn != null) {
                ListNode node = new ListNode(pn.val);
                current.next = node;
                current = current.next;
                pn = pn.next;
            }
        }
        return dummy.next;
    }
}
