/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    private ListNode reverse(ListNode head) {
        if (head == null || head.next == null)
            return head;
        ListNode curr = head, prev = null, next = head.next;
        while (next != null) {
            curr.next = prev;
            prev = curr;
            curr = next;
            next = next.next;
        }
        curr.next = prev;
        return curr;
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || head.next == null)
            return head;
        ListNode currHead = head, currTail = head;
        for (int i = 1; i < k; i++) {
            if (currTail.next == null && i < k)
                return currHead;
            currTail = currTail.next;
        }
        ListNode nextHead = currTail.next;
        currTail.next = null;
        // bec head will be the new tail after reversing.
        currTail = currHead;
        currHead = reverse(currHead);
        currTail.next = reverseKGroup(nextHead, k);
        return currHead;
    }
}
