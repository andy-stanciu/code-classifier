/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null) {
            return head;
        }
        //count if k nodes are there or not;
        ListNode temp = head;
        int count = 0;
        while (temp != null && count < k) {
            temp = temp.next;
            count += 1;
        }
        //if count is less than k then there are insufficient nodes so we return them
        if (count < k) {
            return head;
        } else {
            //reverse all the nodes upto k;
            ListNode prev = null;
            temp = head;
            while (temp != null && count > 0) {
                ListNode front = temp.next;
                temp.next = prev;
                prev = temp;
                temp = front;
                count--;
            }
            if (temp != null) {
                head.next = reverseKGroup(temp, k);
            }
            return prev;
        }
    }
}
