/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    ListNode nodeHead = null;

    ListNode nodeHeadNextAdd = null;

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode curr = head;
        ListNode prev = null;
        ListNode newHead = head;
        while (curr != null) {
            nodeHead = null;
            ListNode kHead = reverseKNode(curr, k);
            if (nodeHead != null) {
                if (null == prev) {
                    newHead = nodeHead;
                } else {
                    prev.next = nodeHead;
                }
                prev = kHead;
                curr = nodeHeadNextAdd;
            } else {
                prev.next = kHead;
                break;
            }
        }
        return newHead;
    }

    public ListNode reverseKNode(ListNode head, int k) {
        if (k == 1) {
            nodeHead = head;
            nodeHeadNextAdd = head.next;
            return head;
        }
        if (head.next == null) {
            nodeHead = null;
            return head;
        }
        ListNode ret = reverseKNode(head.next, k - 1);
        if (nodeHead != null) {
            ret.next = head;
            head.next = null;
        }
        return head;
    }
}
