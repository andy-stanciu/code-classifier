/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode temp = head;
        ListNode prevNode = null;
        while (temp != null) {
            ListNode kthNode = getKthNode(temp, k);
            if (kthNode == null) {
                if (prevNode != null)
                    prevNode.next = temp;
                break;
            }
            ListNode nextNode = kthNode.next;
            kthNode.next = null;
            ListNode reverseHead = reverse(temp);
            if (temp == head) {
                head = reverseHead;
            } else {
                prevNode.next = reverseHead;
            }
            prevNode = temp;
            temp = nextNode;
        }
        return head;
    }

    public ListNode getKthNode(ListNode head, int k) {
        ListNode temp = head;
        int i = 1;
        while (temp != null && i < k) {
            temp = temp.next;
            i++;
        }
        return temp;
    }

    public ListNode reverse(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode newHead = reverse(head.next);
        ListNode front = head.next;
        front.next = head;
        head.next = null;
        return newHead;
    }
}
