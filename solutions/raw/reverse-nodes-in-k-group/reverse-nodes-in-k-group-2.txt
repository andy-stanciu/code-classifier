/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverse(ListNode head) {
        if (head == null || head.next == null)
            return head;
        ListNode newHead = reverse(head.next);
        ListNode front = head.next;
        front.next = head;
        head.next = null;
        return newHead;
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        if (head.next == null || k == 1)
            return head;
        if (head.next.next == null) {
            ListNode newHead = reverse(head);
            return newHead;
        }
        ListNode curr = head.next;
        ListNode dummyNode = new ListNode(-1);
        ListNode h1 = head;
        ListNode temp = dummyNode;
        int cnt = 2;
        while (curr != null) {
            ListNode prev = curr;
            curr = curr.next;
            if (cnt % k == 0) {
                prev.next = null;
                ListNode newHead = reverse(h1);
                temp.next = newHead;
                temp = h1;
                h1.next = curr;
                h1 = curr;
            }
            cnt++;
        }
        return dummyNode.next;
    }
}
