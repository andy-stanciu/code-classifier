/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    ListNode reverse(ListNode head) {
        ListNode temp = head, prev = null, front;
        while (temp != null) {
            front = temp.next;
            temp.next = prev;
            prev = temp;
            temp = front;
        }
        return prev;
    }

    ListNode findKth(ListNode head, int k) {
        int count = 1;
        ListNode temp = head;
        while (temp != null) {
            temp = temp.next;
            count++;
            if (count == k)
                return temp;
        }
        return temp;
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode temp = head, kth, nextnode, newnode, prev = null;
        while (temp != null) {
            kth = findKth(temp, k);
            if (kth == null) {
                if (prev != null)
                    prev.next = temp;
                break;
            }
            nextnode = kth.next;
            kth.next = null;
            newnode = reverse(temp);
            if (temp == head)
                head = newnode;
            else
                prev.next = newnode;
            prev = temp;
            temp = nextnode;
        }
        return head;
    }
}
