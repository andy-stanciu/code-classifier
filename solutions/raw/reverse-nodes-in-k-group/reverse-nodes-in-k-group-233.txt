/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    ListNode lead = null;

    ListNode end = null;

    ListNode ret = null;

    public ListNode reverseKGroup(ListNode head, int k) {
        reverseK(head, k);
        while (end.next != null) {
            ListNode prevGroupEnd = end;
            reverseK(end.next, k);
            prevGroupEnd.next = lead;
        }
        return ret;
    }

    public void reverseK(ListNode head, int k) {
        ListNode prev = null;
        ListNode end = null;
        ListNode lead = null;
        while (head != null && k > 0) {
            if (end == null) {
                end = head;
            }
            lead = head;
            ListNode temp = head.next;
            head.next = prev;
            prev = head;
            head = temp;
            k--;
            if (k == 0 && head != null) {
                end.next = head;
            }
        }
        if (k > 0) {
            if (ret == null) {
                ret = end;
            }
            prev = null;
            ListNode ptr = lead;
            while (ptr != null) {
                ListNode temp = ptr.next;
                ptr.next = prev;
                prev = ptr;
                ptr = temp;
            }
            this.lead = end;
            this.end = lead;
        } else {
            if (ret == null) {
                ret = lead;
            }
            this.lead = lead;
            this.end = end;
        }
    }
}
