/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        if (k <= 1 || head == null) {
            return head;
        }
        ListNode c = head;
        ListNode prev = null;
        while (true) {
            ListNode last = prev;
            ListNode newbie = c;
            ListNode next = c.next;
            ListNode newOne = c;
            for (int i = 0; newOne != null && i < k - 1; i++) {
                newOne = newOne.next;
            }
            if (newOne == null) {
                break;
            }
            for (int i = 0; c != null && i < k; i++) {
                c.next = prev;
                prev = c;
                c = next;
                if (next != null) {
                    next = next.next;
                }
            }
            if (last != null) {
                last.next = prev;
            } else {
                head = prev;
            }
            newbie.next = c;
            if (c == null) {
                break;
            }
            prev = newbie;
        }
        return head;
    }
}
