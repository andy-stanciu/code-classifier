/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    private static ListNode reverseList(ListNode head) {
        if (head == null || head.next == null)
            return head;
        ListNode newHead = reverseList(head.next);
        ListNode front = head.next;
        front.next = head;
        head.next = null;
        return newHead;
    }

    public static ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || head.next == null || k == 1)
            return head;
        ListNode temp = head;
        int cnt = 1;
        ListNode ptr = head;
        ListNode rem = head;
        int noOfReversals = 0;
        while (temp != null) {
            if (cnt == k) {
                ListNode temp1 = temp.next;
                temp.next = null;
                cnt = 1;
                temp = reverseList(ptr);
                ptr.next = temp1;
                noOfReversals++;
                if (noOfReversals == 1)
                    head = temp;
                else {
                    rem.next = temp;
                    rem = ptr;
                }
                temp = temp1;
                ptr = temp1;
            } else {
                cnt++;
                temp = temp.next;
            }
        }
        return head;
    }
}
