/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode ptr = head;
        ListNode res = null;
        ListNode tail = null;
        while (ptr != null) {
            ListNode currHead = ptr;
            for (int i = 0; i < k - 1 && ptr != null; i++) {
                ptr = ptr.next;
            }
            if (ptr == null)
                break;
            ListNode next = ptr.next;
            ptr.next = null;
            ListNode reversed = reverse(currHead);
            if (res == null) {
                res = reversed;
                tail = currHead;
            } else {
                tail.next = reversed;
                tail = currHead;
            }
            currHead.next = next;
            ptr = currHead.next;
        }
        return res;
    }

    public ListNode reverse(ListNode head) {
        ListNode prev = null;
        while (head != null) {
            ListNode temp = head.next;
            head.next = prev;
            prev = head;
            head = temp;
        }
        return prev;
    }
}
