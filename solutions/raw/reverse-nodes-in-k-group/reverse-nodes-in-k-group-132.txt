/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    ListNode reverse(ListNode head) {
        ListNode current = head, next, prev = null;
        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        int i;
        ListNode current, hold, previous = null, temphead = head;
        if (k <= 1)
            return head;
        while (temphead != null) {
            current = temphead;
            i = 1;
            while (i < k && current.next != null) {
                current = current.next;
                i++;
            }
            if (i < k && current.next == null)
                return head;
            hold = current.next;
            current.next = null;
            if (head == temphead) {
                head = reverse(temphead);
                temphead.next = hold;
                previous = temphead;
                temphead = hold;
            } else {
                previous.next = reverse(temphead);
                previous = temphead;
                temphead.next = hold;
                temphead = hold;
            }
        }
        return head;
    }
}
