/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        // 1) base condition
        if (head == null)
            return null;
        // 2) base condition,because 7,8 should not be reversed for k = 3
        int count = 0;
        ListNode t = head;
        while (t != null) {
            count++;
            t = t.next;
        }
        if (count < k)
            return head;
        int cnt = 0;
        ListNode prev = null;
        ListNode curr = head;
        ListNode temp = null;
        while (cnt < k && curr != null) {
            temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
            cnt++;
        }
        if (curr != null)
            head.next = reverseKGroup(curr, k);
        return prev;
    }
}
