/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        return reverse(head, k);
    }

    public ListNode reverse(ListNode head, int k) {
        ListNode current = head;
        ListNode next = null;
        ListNode prev = null;
        ListNode temp = head;
        int count = 0;
        while (count < k && temp != null) {
            temp = temp.next;
            count++;
        }
        if (count == k) {
            count = 0;
            while (k > count && current != null) {
                next = current.next;
                current.next = prev;
                prev = current;
                current = next;
                count++;
            }
            if (next != null) {
                head.next = reverse(next, k);
            }
            return prev;
        }
        return head;
    }
}
