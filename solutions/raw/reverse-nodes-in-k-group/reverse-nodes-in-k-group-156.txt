/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverse(ListNode head, ListNode stop) {
        ListNode start = head.next;
        ListNode prev = head;
        prev.next = null;
        while (start != stop) {
            ListNode n = start.next;
            start.next = prev;
            prev = start;
            start = n;
        }
        return prev;
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode finalHead = null;
        ListNode start = null;
        ListNode end = null;
        ListNode prev = null;
        while (head != null) {
            start = head;
            int i = 0;
            for (i = 0; i < k && head != null; i++) {
                head = head.next;
            }
            end = head;
            ListNode rev = null;
            if (i == k) {
                rev = reverse(start, end);
            } else {
                rev = start;
            }
            if (finalHead == null) {
                finalHead = rev;
                prev = start;
            } else {
                prev.next = rev;
                prev = start;
            }
        }
        return finalHead;
    }
}
