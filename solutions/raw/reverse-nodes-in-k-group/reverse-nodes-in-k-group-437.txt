/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || head.next == null)
            return head;
        ListNode curr = head;
        int n = 0;
        while (curr != null) {
            n++;
            curr = curr.next;
        }
        curr = head;
        int d = n / k;
        int g = k;
        ListNode prevTail = null;
        ListNode newNode = null;
        ListNode newHead = null;
        ListNode prev = null;
        ListNode currTail = null;
        while (d > 0) {
            prev = null;
            currTail = curr;
            g = k;
            while (g > 0) {
                newNode = curr.next;
                curr.next = prev;
                prev = curr;
                curr = newNode;
                g--;
            }
            if (newHead == null) {
                newHead = prev;
                prevTail = currTail;
            } else {
                prevTail.next = prev;
                prevTail = currTail;
            }
            d--;
        }
        prevTail.next = curr;
        return newHead;
    }
}
