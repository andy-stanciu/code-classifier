/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    // \u63D0\u4EA4\u5982\u4E0B\u7684\u65B9\u6CD5
    public static ListNode reverseKGroup(ListNode head, int k) {
        ListNode start = head;
        ListNode end = teamEnd(start, k);
        if (end == null) {
            //\u4E0D\u8DB3\u591Fk\u4E2A\u53EF\u4EE5\u76F4\u63A5\u8FD4\u56DE
            return head;
        }
        // \u7B2C\u4E00\u7EC4\u5F88\u7279\u6B8A\u56E0\u4E3A\u7275\u626F\u5230\u6362\u5934\u7684\u95EE\u9898
        head = end;
        // \u7B2C\u4E00\u7EC4reverse\u4E86
        reverse(start, end);
        // \u7FFB\u8F6C\u4E4B\u540Estart\u53D8\u6210\u4E86\u4E0A\u4E00\u7EC4\u7684\u7ED3\u5C3E\u8282\u70B9
        ListNode lastTeamEnd = start;
        while (lastTeamEnd.next != null) {
            start = lastTeamEnd.next;
            end = teamEnd(start, k);
            if (end == null) {
                return head;
            }
            reverse(start, end);
            lastTeamEnd.next = end;
            lastTeamEnd = start;
        }
        return head;
    }

    // \u5F53\u524D\u7EC4\u7684\u5F00\u59CB\u8282\u70B9\u662Fs\uFF0C\u5F80\u4E0B\u6570k\u4E2A\u627E\u5230\u5F53\u524D\u7EC4\u7684\u7ED3\u675F\u8282\u70B9\u8FD4\u56DE
    public static ListNode teamEnd(ListNode s, int k) {
        while (--k != 0 && s != null) {
            s = s.next;
        }
        return s;
    }

    // s -> a -> b -> c -> e -> \u4E0B\u4E00\u7EC4\u7684\u5F00\u59CB\u8282\u70B9
    // \u4E0A\u9762\u7684\u94FE\u8868\u901A\u8FC7\u5982\u4E0B\u7684reverse\u65B9\u6CD5\u8C03\u6574\u6210 : e -> c -> b -> a -> s -> \u4E0B\u4E00\u7EC4\u7684\u5F00\u59CB\u8282\u70B9
    public static void reverse(ListNode s, ListNode e) {
        e = e.next;
        ListNode pre = null, cur = s, next = null;
        while (cur != e) {
            next = cur.next;
            cur.next = pre;
            pre = cur;
            cur = next;
        }
        s.next = e;
    }
}
