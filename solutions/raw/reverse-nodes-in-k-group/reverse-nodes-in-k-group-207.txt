/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    static ListNode reverseNodes(ListNode head, int k, int count, int current, int pointer) {
        if (count - current < k) {
            return head;
        }
        ListNode node = head;
        ListNode next = null;
        ListNode prev = null;
        while (pointer < k && head != null) {
            next = node.next;
            node.next = prev;
            prev = node;
            node = next;
            pointer++;
        }
        if (next != null) {
            head.next = reverseNodes(next, k, count, current + pointer, 0);
        }
        return prev;
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode temp = head;
        int count = 0;
        while (temp != null) {
            temp = temp.next;
            count++;
        }
        return reverseNodes(head, k, count, 0, 0);
    }
}
