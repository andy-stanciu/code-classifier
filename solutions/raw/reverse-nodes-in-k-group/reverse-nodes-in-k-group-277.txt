/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        if (k <= 1 || head == null)
            return head;
        ListNode prev = null;
        ListNode curr = head;
        ListNode temp = head;
        int count = 0;
        while (temp != null) {
            temp = temp.next;
            count++;
        }
        while (true) {
            if (count < k)
                return head;
            ListNode last = prev;
            ListNode newEnd = curr;
            ListNode next = curr.next;
            for (int i = 0; i < k && curr != null; i++) {
                curr.next = prev;
                prev = curr;
                curr = next;
                if (next != null)
                    next = next.next;
                count--;
            }
            if (last != null)
                last.next = prev;
            else
                head = prev;
            newEnd.next = curr;
            if (curr == null)
                break;
            prev = newEnd;
        }
        return head;
    }
}
