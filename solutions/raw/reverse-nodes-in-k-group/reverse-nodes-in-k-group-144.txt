public class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || k <= 1)
            return head;
        int length = getLength(head);
        ListNode dummy = new ListNode(-1);
        dummy.next = head;
        ListNode prevGroupEnd = dummy;
        while (length >= k) {
            ListNode groupStart = prevGroupEnd.next;
            ListNode nextGroupStart = groupStart;
            for (int i = 0; i < k - 1; i++) {
                nextGroupStart = nextGroupStart.next;
            }
            ListNode nextGroupHead = nextGroupStart.next;
            reverse(groupStart, k);
            prevGroupEnd.next = nextGroupStart;
            groupStart.next = nextGroupHead;
            prevGroupEnd = groupStart;
            length -= k;
        }
        return dummy.next;
    }

    private int getLength(ListNode head) {
        int length = 0;
        while (head != null) {
            length++;
            head = head.next;
        }
        return length;
    }

    private void reverse(ListNode head, int k) {
        ListNode prev = null, curr = head;
        while (k-- > 0) {
            ListNode nextNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextNode;
        }
    }
}
