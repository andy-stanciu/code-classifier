/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || head.next == null)
            return head;
        ListNode current = head;
        ListNode prev = null;
        int count = 0;
        while (current != null && count < k) {
            current = current.next;
            count++;
        }
        if (count == k) {
            // Reverse k nodes
            current = head;
            ListNode next = null;
            int i = 0;
            while (i < k && current != null) {
                next = current.next;
                current.next = prev;
                prev = current;
                current = next;
                i++;
            }
            ListNode restNode = reverseKGroup(current, k);
            head.next = restNode;
            return prev;
        } else {
            return head;
        }
    }
}
