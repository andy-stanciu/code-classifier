/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public static int length(ListNode head) {
        // it gives the length of list
        int count = 0;
        while (head != null) {
            count++;
            head = head.next;
        }
        return count;
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        int n = length(head);
        int group = n / k;
        ListNode preHead = null;
        ListNode curHead = head;
        ListNode ansNode = null;
        for (int i = 0; i < group; i++) {
            ListNode pre = null;
            ListNode cur = curHead;
            ListNode nextnode = null;
            for (int j = 0; j < k; j++) {
                nextnode = cur.next;
                cur.next = pre;
                pre = cur;
                cur = nextnode;
            }
            if (preHead == null) {
                ansNode = pre;
            } else
                preHead.next = pre;
            preHead = curHead;
            curHead = cur;
        }
        preHead.next = curHead;
        return ansNode;
    }
}
