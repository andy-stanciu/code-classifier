/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode temp = head;
        if (head == null) {
            return head;
        }
        ListNode prev = null;
        for (int i = 1; i <= k; i++) {
            if (temp != null) {
                prev = temp;
                temp = temp.next;
            } else {
                return head;
            }
        }
        prev.next = null;
        ListNode[] rev = reverse(head);
        ListNode small = reverseKGroup(temp, k);
        rev[1].next = small;
        return rev[0];
    }

    public ListNode[] reverse(ListNode node) {
        ListNode[] ans = new ListNode[2];
        if (node.next == null) {
            ans[0] = ans[1] = node;
            return ans;
        }
        ListNode[] smallRev = reverse(node.next);
        smallRev[1].next = node;
        node.next = null;
        ans[0] = smallRev[0];
        ans[1] = node;
        return ans;
    }
}
