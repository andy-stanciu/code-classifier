/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public int len(ListNode h) {
        int cnt = 0;
        while (h != null) {
            h = h.next;
            cnt++;
        }
        return cnt;
    }

    public ListNode reverse(ListNode head, int k) {
        if (len(head) != k)
            return head;
        if (head == null || head.next == null)
            return head;
        ListNode a = head;
        ListNode temp = null;
        while (a != null) {
            ListNode b = a.next;
            a.next = temp;
            temp = a;
            a = b;
        }
        return temp;
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || k == 0)
            return head;
        List<ListNode> al = new ArrayList<>();
        ListNode temp = head;
        while (temp != null) {
            al.add(temp);
            for (int i = 1; i < k; i++) {
                if (temp == null)
                    break;
                temp = temp.next;
            }
            if (temp == null)
                break;
            ListNode curr = temp;
            temp = temp.next;
            curr.next = null;
        }
        for (int i = 0; i < al.size(); i++) {
            ListNode h = al.get(i);
            al.set(i, reverse(h, k));
        }
        for (int i = 0; i < al.size() - 1; i++) {
            ListNode ln = al.get(i);
            while (ln.next != null) {
                ln = ln.next;
            }
            ln.next = al.get(i + 1);
        }
        return al.get(0);
    }
}
