/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    private int findLen(ListNode head) {
        int len = 0;
        while (head != null) {
            head = head.next;
            len++;
        }
        return len;
    }

    private ListNode reverse(ListNode head, int k) {
        ListNode dummyHead = null;
        ListNode temp = null;
        ListNode end = head;
        for (int i = 0; i < k; i++) {
            temp = head;
            head = head.next;
            temp.next = dummyHead;
            dummyHead = temp;
        }
        end.next = head;
        return dummyHead;
    }

    private void print(ListNode head) {
        while (head != null) {
            System.out.print(head.val + "->");
            head = head.next;
        }
        System.out.println();
    }

    private ListNode reverseK(ListNode head, int len, int k) {
        ListNode temp = head;
        if (len >= k) {
            head = reverse(head, k);
        } else {
            // print(head);
            return head;
        }
        // print(head);
        temp.next = reverseK(temp.next, len - k, k);
        return head;
    }

    ListNode start;

    public ListNode reverseKGroup(ListNode head, int k) {
        int len = findLen(head);
        start = head;
        ListNode res = reverseK(head, len, k);
        // print(res);
        return res;
    }
}
