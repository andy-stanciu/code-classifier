/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public static ListNode reverseKGroup(ListNode head, int k) {
        ListNode temp = head;
        ListNode prevNode = null;
        while (temp != null) {
            ListNode KthNode = findKthNode(temp, k);
            if (KthNode == null) {
                if (prevNode != null) {
                    prevNode.next = temp;
                }
                break;
            }
            ListNode nextNode = KthNode.next;
            KthNode.next = null;
            reverseLists(temp);
            if (temp == head) {
                head = KthNode;
            } else {
                prevNode.next = KthNode;
            }
            prevNode = temp;
            temp = nextNode;
        }
        return head;
    }

    public static ListNode findKthNode(ListNode head, int k) {
        ListNode temp = head;
        while (temp != null && k > 1) {
            k--;
            temp = temp.next;
        }
        return temp;
    }

    public static ListNode reverseLists(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode newhead = reverseLists(head.next);
        ListNode front = head.next;
        head.next = null;
        front.next = head;
        return newhead;
    }
}
