class Solution {

    public int[] twoSum(int[] nums, int target) {
        //\u043D\u0430\u0439\u0434\u0435\u043D\u043D\u044B\u0435 \u0417\u041D\u0410\u0427\u0415\u041D\u0418\u042F, \u043A\u043E\u0442\u043E\u0440\u044B\u0435 \u0432 \u0441\u0443\u043C\u043C\u0435 \u0434\u0430\u044E\u0442 9(target)
        int[] searchNumbers = new int[2];
        // \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442, \u043A\u043E\u0442\u043E\u0440\u044B\u0439 \u0434\u043E\u043B\u0436\u0435\u043D \u0441\u043E\u0434\u0435\u0440\u0436\u0430\u0442\u044C \u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u044D\u0442\u0438\u0445 \u043D\u0430\u0439\u0434\u0435\u043D\u043D\u044B\u0445 \u0417\u041D\u0410\u0427\u0415\u041D\u0418\u0419
        int[] result = new int[2];
        // \u043F\u0435\u0440\u0435\u043C\u0435\u043D\u043D\u0430\u044F, \u043A\u043E\u0442\u043E\u0440\u0430\u044F \u043C\u0435\u043D\u044F\u0435\u0442\u0441\u044F \u043D\u0430 true, \u043A\u043E\u0433\u0434\u0430 \u043D\u0430\u0445\u043E\u0434\u044F\u0442\u0441\u044F \u043D\u0443\u0436\u043D\u044B\u0435 \u0417\u041D\u0410\u0427\u0415\u041D\u0418\u042F
        boolean running = false;
        for (int i = 0; i < nums.length; i++) {
            int firstNumber = nums[i];
            for (int j = 0; j < nums.length; j++) {
                int secondNumber = nums[j];
                int sum = firstNumber + secondNumber;
                if (sum == target && i != j) {
                    searchNumbers[0] = firstNumber;
                    searchNumbers[1] = secondNumber;
                    running = true;
                    break;
                }
                if (running) {
                    break;
                }
            }
        }
        //int [] resultSort = new int[2];
        //\u0434\u0435\u043B\u0430\u044E \u0441\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u043A\u0443 \u043F\u043E \u0432\u043E\u0437\u0440\u0430\u0441\u0442\u0430\u043D\u0438\u044E \u043D\u0430 searchNumber (\u041F\u0443\u0437\u044B\u0440\u044C\u043A\u043E\u043C)
        bubbleSort(searchNumbers);
        if (running) {
            int count = 0;
            for (int i = 0; i < nums.length; i++) {
                for (int j = 0; j < searchNumbers.length; j++) {
                    //\u043F\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u044E \u043F\u043E\u0437\u0438\u0446\u0438\u0438 \u043D\u0430\u0439\u0434\u0435\u043D\u043D\u044B\u043C \u0417\u041D\u0410\u0427\u0415\u041D\u0418\u042F\u041C \u0438 \u0437\u0430\u043D\u043E\u0448\u0443 \u0438\u0445 \u0432 result
                    if (nums[i] == searchNumbers[j]) {
                        result[count] = i;
                        count++;
                        break;
                    }
                }
            }
        }
        return bubbleSort(result);
    }

    public static int[] bubbleSort(int[] array) {
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array.length; j++) {
                if (array[i] < array[j]) {
                    int test = array[i];
                    array[i] = array[j];
                    array[j] = test;
                }
            }
        }
        return array;
    }
}
