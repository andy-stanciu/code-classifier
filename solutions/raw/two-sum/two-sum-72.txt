class Solution {

    public int[] twoSum(int[] nums, int target) {
        /* for(int i=0;i<nums.length;i++){
        for(int j=i+1;j<nums.length;j++){
          if(nums[i]+nums[j]==target){
            int f[]={i,j};
            
           return f;
          }
        }
      }
      return null;
       int[] c = Arrays.copyOf(nums, nums.length);
    Arrays.sort(c);

      int l=0,r=c.length-1;
      while(l<r){
          int a=c[l]+c[r];
          if(a==target){
              break;
          }
         else if(a>target){
              r--;
          }
         else{
              l++;
          }

      }
      int num1=c[l];
      int num2=c[r];
     /* int[] t=new int[2];
      for(int i=0;i<nums.length;i++){
         if(nums[i]==p){
             t[0]=i;
         }
         else if(nums[i]==y){
             t[1]=i;
         }
      }
      return t;
       int[] result = new int[2];
       int j=0;
       while(j<nums.length){
            if (nums[j] == num1){
                 result[0] = j;
                 break;
            }
       }
    for (int i = j+1; i < nums.length; i++) {
      if (nums[i] == num2){
           result[1] = i;
      }
     //else if (nums[i] == num2) result[1] = i;
    }
    return result;*/
        Map<Integer, Integer> m = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (!m.containsKey(target - nums[i]))
                m.put(nums[i], i);
            else
                return new int[] { i, m.get(target - nums[i]) };
        }
        return new int[2];
    }
}
