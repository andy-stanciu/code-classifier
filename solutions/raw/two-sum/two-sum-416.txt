class Solution {

    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            map.put(nums[i], i);
        }
        for (int i = 0; i < nums.length; i++) {
            int number = nums[i];
            int remainder = target - number;
            if (map.containsKey(remainder)) {
                int index = map.get(remainder);
                if (index == i)
                    continue;
                return new int[] { i, index };
            }
        }
        return new int[] {};
    }
}
// Output -
/*
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
*/
// Algorithm -
/*
1. Create a HashMap to store the elements in nums and their indices.
2. Loop through nums and store each element and its index in the HashMap.
3. Loop through nums again and find the remainder of target - nums[i].
4. If remainder is in the HashMap, find the index of the remainder.
5. If the index is not the same as i, than skip the iteration (because not use the same element twice.)
6. Return the indices.
*/
// Time & Space Complexity -
/*
Time - O(n)
Space - O(n) because we using HashMap
*/
