class Solution {

    public int maxSubArray(int[] nums) {
        //Approach 1 Brute force
        /*
        int sum=0;
        int max=Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++)
        { 
            sum=0;
            for(int j=i;j<nums.length;j++)
            {
                sum=sum+nums[j];
                max=Math.max(sum,max);
            }
        }
        return max;
    }*/
        //Approach 2 Prefix sum
        /* int pre[]=new int[nums.length];
    int sum=0;
    int max=Integer.MIN_VALUE;

    pre[0]=nums[0];
    for(int i=1;i<nums.length;i++)
    {
        pre[i]=pre[i-1]+nums[i];
    }

    for(int i=0;i<nums.length;i++)
    {
        for(int j=i;j<nums.length;j++)
        {
            sum=(i==0)?pre[j]:pre[j]-pre[i-1];
            max=Math.max(sum,max);
        }
    }
    return max;
    */
        //Approach 3 Kadanes algo
        int sum = 0;
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < nums.length; i++) {
            sum = sum + nums[i];
            max = Math.max(sum, max);
            if (sum < 0)
                sum = 0;
        }
        return max;
    }
}
