class Solution {

    public boolean wordPattern(String pattern, String s) {
        Map<Character, String> wordMap = new HashMap<>();
        String[] s2 = s.split(" ");
        char[] charArray = pattern.toCharArray();
        // return false if size of pattern is not same as size of string(after split)
        if (charArray.length != s2.length) {
            return false;
        }
        for (int i = 0; i < charArray.length; i++) {
            char character = charArray[i];
            String word = s2[i];
            // if the map do not have the character, add it.
            // also, check if map already contains the word(this is required only for edge cases)
            if (!wordMap.containsKey(character)) {
                if (wordMap.containsValue(word))
                    return false;
                wordMap.put(character, word);
            } else //  if the map already has the charecter as key, then check whether the word in the iteration is different from already saved word as value.
            {
                if (!wordMap.get(character).equals(word)) {
                    return false;
                }
            }
        }
        return true;
    }
}
