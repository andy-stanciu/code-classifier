class Solution {

    public boolean wordPattern(String pattern, String s) {
        // Create a HashMap to store the mapping between characters in \'pattern\' and words in \'s\'
        HashMap<Character, String> map = new HashMap();
        // Split the string \'s\' by spaces to get each word as an element in an array
        String[] a = s.split(" ");
        // If the length of \'pattern\' and the number of words in \'s\' do not match, return false immediately
        // because each character in \'pattern\' should correspond to one word in \'s\'
        if (pattern.length() != a.length) {
            return false;
        }
        // Iterate through each character in \'pattern\' and the corresponding word in the array \'a\'
        for (int i = 0; i < pattern.length(); i++) {
            // Check if the character in \'pattern\' already has a mapped word
            if (map.containsKey(pattern.charAt(i))) {
                // If the mapped word does not match the current word in \'s\', return false
                if (!a[i].equals(map.get(pattern.charAt(i)))) {
                    return false;
                }
            } else // If the word is already associated with a different character in \'pattern\', return false
            if (map.containsValue(a[i])) {
                return false;
            } else // If the character is not in the map, add it with the current word as its value
            {
                map.put(pattern.charAt(i), a[i]);
            }
        }
        // If no conflicts in mapping were found, return true
        return true;
    }
}
