class Solution {

    public boolean wordPattern(String pattern, String s) {
        String[] word = s.split(" ");
        //Edge-case to check if length of the input  string and pattern is not equal then retrun false;
        if (word.length != pattern.length())
            return false;
        //Hashmap to store Char- word pair
        HashMap<Character, String> charToWordMap = new HashMap();
        for (int i = 0; i < pattern.length(); i++) {
            //iterate through the pattern
            //get the char of the pattern at the current iteration
            char c = pattern.charAt(i);
            if (charToWordMap.containsKey(c)) {
                //check if char is there in the map already
                if (!charToWordMap.get(c).equals(word[i]))
                    //return \'false\' if the value of the char doesnt match the value of the word Array.
                    return false;
            } else //if char is not there in the Hashmap
            {
                if (charToWordMap.containsValue(word[i])) {
                    return false;
                }
                //we do check with value is there in the map, might be mapped to someother key then also return false;
                //else add the Char-word pair to the map.
                charToWordMap.put(c, word[i]);
            }
        }
        return true;
    }
}
