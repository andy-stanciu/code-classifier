class Solution {

    public boolean wordPattern(String pattern, String s) {
        String[] arr = s.split(" ");
        if (pattern.length() != arr.length)
            return false;
        HashMap<Character, String> characterToString = new HashMap<>();
        HashMap<String, Character> stringToCharacter = new HashMap<>();
        int n = pattern.length();
        for (int i = 0; i < n; i++) {
            if (characterToString.containsKey(pattern.charAt(i))) {
                String value = characterToString.get(pattern.charAt(i));
                // System.out.println(value + "--> " + pattern.charAt(i));
                if (stringToCharacter.containsKey(arr[i])) {
                    if (stringToCharacter.get(arr[i]) != pattern.charAt(i))
                        return false;
                } else {
                    return false;
                }
                // if(! stringToCharacter.containsKey(value) || tringToCharacter.get(value) != pattern.charAt(i))
                // return false;
            } else if (stringToCharacter.containsKey(arr[i])) {
                char element = stringToCharacter.get(arr[i]);
                if (pattern.charAt(i) != element) {
                    return false;
                }
            } else {
                // System.out.println("putting values  " +pattern.charAt(i) + "-->" +arr[i] );
                characterToString.put(pattern.charAt(i), arr[i]);
                stringToCharacter.put(arr[i], pattern.charAt(i));
            }
        }
        return true;
    }
}
