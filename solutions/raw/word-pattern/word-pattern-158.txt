class Solution {

    public boolean wordPattern(String pattern, String s) {
        // Create a map to associate characters in the pattern with corresponding words
        Map<Character, String> map = new HashMap<>();
        // Split the string \'s\' into words using space as the delimiter
        String[] a = s.split(" ");
        // Check if the number of characters in the pattern matches the number of words
        if (pattern.length() != a.length) {
            // If not, the pattern cannot match the string
            return false;
        }
        // Iterate over each character in the pattern and corresponding word in the
        // split string
        for (int i = 0; i < pattern.length(); i++) {
            // Current character from the pattern
            char currentChar = pattern.charAt(i);
            // Corresponding word from the split string
            String currentWord = a[i];
            // If the current character is not in the map, attempt to add it
            if (!map.containsKey(currentChar)) {
                // Check if the current word is already mapped to a different character
                if (!map.containsValue(currentWord)) {
                    // If not, map the current character to the current word
                    map.put(currentChar, currentWord);
                } else {
                    // If the word is already mapped to another character, the pattern does not
                    // match
                    return false;
                }
            } else {
                // If the current character is already in the map, check if it maps to the
                // correct word
                if (map.get(currentChar).equals(currentWord)) {
                    // The mapping is correct, continue with the next character and word
                    continue;
                } else {
                    // The mapping does not match the current word, so the pattern does not match
                    return false;
                }
            }
        }
        // If all characters and words are correctly mapped, return true
        return true;
    }
}
