class Solution {

    public boolean wordPattern(String pattern, String s) {
        HashMap<Character, String> pToSMap = new HashMap<Character, String>();
        HashMap<String, Character> sToPMap = new HashMap<String, Character>();
        String[] words = s.split(" ");
        if (pattern.length() != words.length) {
            return false;
        }
        for (int i = 0; i < pattern.length(); i++) {
            Character pChar = pattern.charAt(i);
            if (!pToSMap.containsKey(pChar)) {
                pToSMap.put(pChar, words[i]);
            }
        }
        for (int i = 0; i < pattern.length(); i++) {
            Character pChar = pattern.charAt(i);
            String word = words[i];
            if (!sToPMap.containsKey(word)) {
                sToPMap.put(word, pChar);
            }
        }
        for (int i = 0; i < pattern.length(); i++) {
            Character p = pattern.charAt(i);
            String word = words[i];
            String mappedWord = pToSMap.get(p);
            Character mappedChar = sToPMap.get(word);
            if (!word.equals(mappedWord)) {
                return false;
            }
            if (!p.equals(mappedChar)) {
                return false;
            }
        }
        return true;
    }
}
