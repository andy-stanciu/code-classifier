class Solution {

    public boolean wordPattern(String pattern, String s) {
        String[] sr = s.split(" ");
        Map<String, String> h = new HashMap<>();
        Map<String, String> r = new HashMap<>();
        System.out.println(pattern.length());
        System.out.println(sr.length);
        if (pattern.length() != sr.length) {
            return false;
        }
        for (int i = 0; i <= pattern.length() - 1; i++) {
            String key = String.valueOf(pattern.charAt(i)).trim();
            System.out.println("key :" + key);
            if (h.containsKey(key)) {
                if (!h.get(key).equalsIgnoreCase(sr[i])) {
                    System.out.println(h);
                    return false;
                }
            } else {
                if (h.containsValue(sr[i])) {
                    return false;
                } else {
                    h.put(String.valueOf(pattern.charAt(i)).trim(), sr[i]);
                }
            }
        }
        System.out.println(h);
        /*for (int i=0;i<=sr.length-1;i++) {
			String key = String.valueOf(sr[i]).trim();
			System.out.println("key :"+key);
			if (r.containsKey(key)) {
				if (!r.get(key).equalsIgnoreCase(String.valueOf(pattern.charAt(i)).trim())) {
					System.out.println(r);
					return false;
				}
			} else {
				r.put(sr[i],String.valueOf(pattern.charAt(i)).trim());
			}
		}
 
		
		System.out.println(r);*/
        return true;
    }
}
