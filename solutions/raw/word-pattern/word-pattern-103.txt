class Solution {

    public boolean wordPattern(String pattern, String s) {
        String[] words = s.split(" ");
        // Check if pattern length matches the number of words in the string
        if (pattern.length() != words.length)
            return false;
        HashMap<Character, String> charToWord = new HashMap<>();
        HashMap<String, Character> wordToChar = new HashMap<>();
        for (int i = 0; i < words.length; i++) {
            char c = pattern.charAt(i);
            String word = words[i];
            // Check if there\'s a different word mapped to the current pattern character
            if (charToWord.containsKey(c) && !charToWord.get(c).equals(word))
                return false;
            // Check if there\'s a different pattern character mapped to the current word
            if (wordToChar.containsKey(word) && wordToChar.get(word) != c)
                return false;
            // Map the pattern character to the word and the word to the character
            charToWord.put(c, word);
            wordToChar.put(word, c);
        }
        return true;
    }
}
