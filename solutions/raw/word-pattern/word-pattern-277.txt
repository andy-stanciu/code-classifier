class Solution {

    public boolean wordPattern(String pattern, String s) {
        // Split the input string into words
        String[] split = s.split(" ");
        // If the number of characters in the pattern and the number of words in the string do not match, return false
        if (pattern.length() != split.length) {
            return false;
        }
        // Create a HashMap to store the mapping from pattern characters to words
        HashMap<Character, String> map = new HashMap<>();
        // Iterate over the pattern characters
        for (int i = 0; i < pattern.length(); i++) {
            char currentP = pattern.charAt(i);
            // If the current character is already in the map
            if (map.containsKey(currentP)) {
                // Check if the mapped word matches the current word in the split array
                if (!map.get(currentP).equals(split[i])) {
                    // If not, return false
                    return false;
                }
            } else {
                // If the current word is already mapped to another character, return false
                if (map.containsValue(split[i])) {
                    return false;
                } else {
                    // Otherwise, add the current character and word to the map
                    map.put(currentP, split[i]);
                }
            }
        }
        // If all checks pass, return true
        return true;
    }
}
