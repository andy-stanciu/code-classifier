class Solution {

    public boolean wordPattern(String pattern, String s) {
        String[] arr = s.split(" ");
        if (pattern.length() != arr.length)
            return false;
        //save both character to string and string to char mappings
        HashMap<Character, String> characterToString = new HashMap<>();
        HashMap<String, Character> stringToCharacter = new HashMap<>();
        //iterate
        int n = pattern.length();
        for (int i = 0; i < n; i++) {
            // if character is already mapped
            if (characterToString.containsKey(pattern.charAt(i))) {
                //string should be mapped and it should be equal.
                if (!stringToCharacter.containsKey(arr[i]) || stringToCharacter.get(arr[i]) != pattern.charAt(i))
                    return false;
            } else // if String is mapped but not the character
            if (stringToCharacter.containsKey(arr[i])) {
                //  char element = stringToCharacter.get(arr[i]);
                //  if(pattern.charAt(i) != element){
                return false;
            } else {
                //no character and string are present
                characterToString.put(pattern.charAt(i), arr[i]);
                stringToCharacter.put(arr[i], pattern.charAt(i));
            }
        }
        return true;
    }
}
