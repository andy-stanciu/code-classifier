class Solution {

    public boolean wordPattern(String pattern, String s) {
        String[] arrayStrings = s.split(" ");
        if (pattern.length() != arrayStrings.length) {
            return false;
        }
        Map<Character, String> charToWord = new HashMap<>();
        Map<String, Character> wordToChar = new HashMap<>();
        for (int i = 0; i < arrayStrings.length; i++) {
            char charCurrent = pattern.charAt(i);
            String wordCurrent = arrayStrings[i];
            if (!charToWord.containsKey(charCurrent)) {
                charToWord.put(charCurrent, wordCurrent);
            } else {
                if (!charToWord.get(charCurrent).equals(wordCurrent)) {
                    return false;
                }
            }
            if (!wordToChar.containsKey(wordCurrent)) {
                wordToChar.put(wordCurrent, charCurrent);
            } else {
                if (!wordToChar.get(wordCurrent).equals(charCurrent)) {
                    return false;
                }
            }
        }
        return true;
    }
}
