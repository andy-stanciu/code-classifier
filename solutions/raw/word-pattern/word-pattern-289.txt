class Solution {

    public boolean wordPattern(String pattern, String s) {
        String[] words = s.split(" ");
        if (pattern.length() != words.length) {
            return false;
        }
        Map<Character, String> map1 = new HashMap<>();
        Map<String, Character> map2 = new HashMap<>();
        int patternIndex = 0;
        for (String word : words) {
            if (!map1.containsKey(pattern.charAt(patternIndex))) {
                map1.put(pattern.charAt(patternIndex), word);
            } else {
                if (!word.equals(map1.get(pattern.charAt(patternIndex)))) {
                    return false;
                }
            }
            patternIndex++;
        }
        int sIndex = 0;
        for (Character str : pattern.toCharArray()) {
            if (!map2.containsKey(words[sIndex])) {
                map2.put(words[sIndex], str);
            } else {
                if (str != (map2.get(words[sIndex]))) {
                    return false;
                }
            }
            sIndex++;
        }
        return true;
    }
}
