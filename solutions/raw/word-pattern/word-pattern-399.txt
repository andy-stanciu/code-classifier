class Solution {

    public boolean wordPattern(String pattern, String s) {
        String[] arr = s.split(" ");
        if (pattern.length() != arr.length) {
            return false;
        }
        HashMap<Character, String> hm = new HashMap<Character, String>();
        HashMap<String, Character> reverseMap = new HashMap<String, Character>();
        for (int i = 0; i < pattern.length(); i++) {
            char ch = pattern.charAt(i);
            String word = arr[i];
            if (hm.containsKey(ch)) {
                // If the character exists in the map, check if it maps to the same word
                if (!hm.get(ch).equals(word)) {
                    return false;
                }
            } else {
                // If the character doesn\'t exist in the map, check if the word is already mapped to another character
                if (reverseMap.containsKey(word)) {
                    return false;
                }
                hm.put(ch, word);
                reverseMap.put(word, ch);
            }
        }
        return true;
    }
}
