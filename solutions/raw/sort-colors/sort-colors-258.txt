// Brute force solution
// TC: O(nlogn), SC O(1);
class Solution1 {

    public void sortColors(int[] nums) {
        Arrays.sort(nums);
    }
}

// better approach, counting sort solution
// TC = O(2N), SC = O(1)
class Solution2 {

    public void sortColors(int[] nums) {
        int zero = 0, one = 0, two = 0;
        for (int i : nums) {
            if (i == 0)
                zero++;
            if (i == 1)
                one++;
            if (i == 2)
                two++;
        }
        for (int i = 0; i < nums.length; i++) {
            if (zero != 0) {
                nums[i] = 0;
                zero--;
            } else if (one != 0) {
                nums[i] = 1;
                one--;
            } else {
                nums[i] = 2;
                two--;
            }
        }
    }
}

// optimal approach, dutch national flag algorithm/solution
// TC = O(N), SC = O(1);
class Solution {

    public void sortColors(int[] nums) {
        int low = 0;
        int mid = 0;
        int high = nums.length - 1;
        int temp = 0;
        while (mid <= high) {
            switch(nums[mid]) {
                case 0:
                    {
                        temp = nums[low];
                        nums[low] = nums[mid];
                        nums[mid] = temp;
                        low++;
                        mid++;
                        break;
                    }
                case 1:
                    {
                        mid++;
                        break;
                    }
                case 2:
                    {
                        temp = nums[mid];
                        nums[mid] = nums[high];
                        nums[high] = temp;
                        high--;
                        break;
                    }
            }
        }
    }
}
