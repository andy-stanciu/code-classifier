class Solution {

    public int firstMissingPositive(int[] nums) {
        //cyclic sort alogrithms
        int i = 0;
        while (i < nums.length) {
            int correct = nums[i] - 1;
            if (correct >= 0 && correct <= nums.length - 1 && nums[i] != nums[correct]) {
                swap(nums, i, correct);
            } else {
                i++;
            }
        }
        //while iertating checking the missing number
        for (int j = 0; j <= nums.length - 1; j++) {
            if (nums[j] != j + 1) {
                return j + 1;
            }
        }
        //if array contains all the num then the first postive num will be num.length+1
        return nums.length + 1;
    }

    static void swap(int[] nums, int i, int correct) {
        int temp = nums[i];
        nums[i] = nums[correct];
        nums[correct] = temp;
    }
}
