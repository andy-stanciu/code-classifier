//below beats 100%
//Time complexity: o(n)
//Space complexity:o(1)
class Solution {

    public int firstMissingPositive(int[] nums) {
        int n = nums.length;
        //travser the array to its length
        for (int i = 0; i < n; i++) {
            //place each +ve integer i to i-1 index
            //if num is +ve integer and it exists in the range [1,n]
            // then we will put this value to the correct index in array
            // and loop braking condition is when we nums[i]!=nums[nums[i]-1]
            // it means our value is alreay at correct index
            while (nums[i] > 0 && nums[i] <= n && nums[i] != nums[nums[i] - 1]) {
                int j = nums[i] - 1;
                //swap the number
                int temp = nums[j];
                nums[j] = nums[i];
                nums[i] = temp;
            }
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] != i + 1) {
                return i + 1;
            }
        }
        //if all +ve integer exists in the range [1,n] then we need to retun next integer which is n+1;
        return n + 1;
    }
}
