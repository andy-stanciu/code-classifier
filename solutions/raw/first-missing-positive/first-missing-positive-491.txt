class Solution {

    public int firstMissingPositive(int[] nums) {
        return cyclicSort(nums);
    }

    public int cyclicSort(int[] nums) {
        int pointer = 0;
        while (pointer < nums.length) {
            int correct = nums[pointer] - 1;
            if (nums[pointer] > 0 && nums[pointer] <= nums.length && nums[pointer] != nums[correct]) {
                swap(pointer, correct, nums);
            } else {
                pointer++;
            }
        }
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != i + 1) {
                return i + 1;
            }
        }
        return nums.length + 1;
    }

    public void swap(int start, int end, int[] arr) {
        int temp = arr[start];
        arr[start] = arr[end];
        arr[end] = temp;
    }
}
