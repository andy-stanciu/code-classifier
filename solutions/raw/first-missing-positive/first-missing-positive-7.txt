class Solution {

    public int firstMissingPositive(int[] nums) {
        int n = nums.length;
        /**
         *            As we only need to look into range of 1 to n + 1
         *
         *            we can mark all numbers which are outside this range as n + 2
         *            After this we will not have any negative integers in our array
         */
        for (int i = 0; i < n; i++) {
            if (nums[i] <= 0 || nums[i] > n) {
                nums[i] = n + 2;
            }
        }
        /**
         *            for every integer we find, convert the value present at the index as negative
         *            so if we find nums[i] = 4
         *            then we will mark the 4th number as negative, and so on
         *
         *            after finishing this loop all the values we found will be marked as negative
         *            and only the values which are missing will be still positive
         */
        for (int i = 0; i < n; i++) {
            // without abs a number which was converted to negative value once before might become positive again.
            int num = Math.abs(nums[i]);
            if (num <= n) {
                // without abs a number which was converted to negative value once before might become positive again.
                nums[num - 1] = -1 * Math.abs(nums[num - 1]);
            }
        }
        /**
         *        return the index (+ 1) of the first positive value
         */
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) {
                return i + 1;
            }
        }
        /**
         *        if all the values are negative, that means the array had all the values from 1 to n
         *        So we return n + 1
         */
        return n + 1;
    }
}
