class Solution {

    public int firstMissingPositive(int[] nums) {
        int n = nums.length;
        int i = 0;
        // Step 1: Place each positive number in its correct position (1-based index).
        while (i < n) {
            // Calculate the target index for nums[i]
            int currentIndex = nums[i] - 1;
            // Check if nums[i] is within the range [1, n] and if it\'s not already in the correct position
            if (nums[i] > 0 && nums[i] <= n && nums[currentIndex] != nums[i]) {
                // Swap nums[i] with nums[currentIndex] to place nums[i] in the correct position
                int temp = nums[i];
                nums[i] = nums[currentIndex];
                nums[currentIndex] = temp;
            } else {
                i++;
            }
        }
        // Step 2: Find the first missing positive integer by checking each index
        for (i = 0; i < n; i++) {
            // If nums[i] is not equal to i + 1, then i + 1 is the missing positive integer
            if (nums[i] != i + 1) {
                return i + 1;
            }
        }
        // If all positions are filled correctly, then the missing integer is n + 1
        return n + 1;
    }
}
