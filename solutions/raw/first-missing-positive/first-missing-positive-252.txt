class Solution {

    public int firstMissingPositive(int[] nums) {
        //     Arrays.sort(nums);
        //     int mis=-1;
        //     ArrayList<Integer> arr=new ArrayList<>();
        //     for(int i=0;i<nums.length;i++){
        //         if(nums[i]>0){
        //             arr.add(nums[i]);
        //         }
        //     }
        //     for(int i=1;i<=arr.size();i++){
        //         if(!arr.contains(i)){
        //             mis=i;
        //             break;
        //         }
        //     }
        //     if(mis==-1){
        //         mis=arr.size()+1;
        //     }
        //    return mis;
        int n = nums.length;
        // First pass: Place each number in its correct position
        for (int i = 0; i < n; i++) {
            while (nums[i] > 0 && nums[i] <= n && nums[nums[i] - 1] != nums[i]) {
                // Swap nums[i] with nums[nums[i] - 1]
                int temp = nums[i];
                nums[i] = nums[temp - 1];
                nums[temp - 1] = temp;
            }
        }
        // Second pass: Find the first missing positive
        for (int i = 0; i < n; i++) {
            if (nums[i] != i + 1) {
                // The first missing positive integer
                return i + 1;
            }
        }
        // If all numbers from 1 to n are present
        // The first missing positive integer
        return n + 1;
    }
}
