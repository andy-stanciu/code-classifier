class Solution {

    public int firstMissingPositive(int[] nums) {
        /**
         *        With O(N*Long(N)) time and O(1) space
         */
        // Arrays.sort(nums);
        // int val=1;
        // for(int i=0;i<nums.length;i++){
        //     if(nums[i]>0){
        //         if(nums[i]!=val){
        //             if(val-1==nums[i]){
        //                 continue;
        //             }
        //             return val;
        //         }else{
        //             val++;
        //         }
        //     }
        // }
        // return nums[nums.length-1]<0?1:nums[nums.length-1]+1;
        /**
         *        With O(N) time and O(N) space
         */
        // int n=nums.length;
        // int[] arr=new int[n+1];
        // for(int i=0;i<nums.length;i++){
        //     if(nums[i]<n+1 && nums[i]>0){
        //         arr[nums[i]]=nums[i];
        //     }
        // }
        // for(int i=1;i<n+1;i++){
        //   if(arr[i]==0){
        //     return i;
        //   }
        // }
        // return nums.length+1;
        /**
         *        With O(N) time and O(1) space
         */
        boolean isOne = false;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 1) {
                isOne = true;
            }
            if (nums[i] <= 0 || nums[i] > nums.length) {
                nums[i] = 1;
            }
        }
        if (!isOne) {
            return 1;
        }
        for (int i = 0; i < nums.length; i++) {
            int val = Math.abs(nums[i]);
            int temp = Math.abs(nums[val - 1]);
            nums[val - 1] = -temp;
        }
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > 0) {
                return i + 1;
            }
        }
        return nums.length + 1;
    }
}
