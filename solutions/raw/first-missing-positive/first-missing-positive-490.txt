class Solution {

    public int firstMissingPositive(int[] nums) {
        sort(nums, 0, nums.length - 1);
        int n = 1;
        for (int num : nums) {
            if (n == num) {
                n++;
            }
        }
        return n;
    }

    private static void sort(int[] arr, int l, int h) {
        if (l >= h) {
            return;
        }
        int m = l + (h - l) / 2;
        sort(arr, l, m);
        sort(arr, m + 1, h);
        merge(arr, l, m, h);
    }

    private static void merge(int[] arr, int low, int mid, int high) {
        int[] temp = new int[high - low + 1];
        int i = low, j = mid + 1, k = 0;
        while (i <= mid && j <= high) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            } else {
                temp[k++] = arr[j++];
            }
        }
        while (i <= mid) {
            temp[k++] = arr[i++];
        }
        while (j <= high) {
            temp[k++] = arr[j++];
        }
        System.arraycopy(temp, 0, arr, low, temp.length);
    }
}
