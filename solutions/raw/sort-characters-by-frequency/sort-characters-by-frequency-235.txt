class Solution {

    public class Freq implements Comparable<Freq> {

        char c;

        int f;

        Freq(char c, int f) {
            this.c = c;
            this.f = f;
        }

        @Override
        public int compareTo(Freq f2) {
            return f2.f - this.f;
        }
    }

    public String frequencySort(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
        }
        PriorityQueue<Freq> pq = new PriorityQueue<>();
        for (char ch : map.keySet()) {
            pq.add(new Freq(ch, map.get(ch)));
        }
        StringBuilder sb = new StringBuilder();
        while (!pq.isEmpty()) {
            int fr = pq.peek().f;
            while (fr > 0) {
                sb.append(pq.peek().c);
                fr--;
            }
            pq.remove();
        }
        return sb.toString();
    }
}
