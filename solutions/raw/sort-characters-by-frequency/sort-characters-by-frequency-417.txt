class Solution {

    public String frequencySort(String s) {
        Map<Character, Integer> frequencyCounter = new HashMap<>();
        PriorityQueue<Character> charsInSortedOrder = new PriorityQueue<>((firstElem, secondElem) -> frequencyCounter.get(secondElem) - frequencyCounter.get(firstElem) != 0 ? frequencyCounter.get(secondElem) - frequencyCounter.get(firstElem) : firstElem - secondElem);
        int len = s.length();
        StringBuilder output = new StringBuilder();
        for (int idx = 0; idx < len; idx++) {
            if (frequencyCounter.containsKey(s.charAt(idx))) {
                int freq = frequencyCounter.get(s.charAt(idx));
                frequencyCounter.put(s.charAt(idx), freq + 1);
            } else {
                frequencyCounter.put(s.charAt(idx), 1);
            }
        }
        for (int idx = 0; idx < len; idx++) {
            charsInSortedOrder.offer(s.charAt(idx));
        }
        while (!charsInSortedOrder.isEmpty()) {
            output.append(charsInSortedOrder.poll());
        }
        return output.toString();
    }
}
