class Solution {

    class // class working as hashmap which store ch and it\'s freq.
    Pair {

        char ch;

        int count;

        Pair(char ch, int count) {
            this.ch = ch;
            this.count = count;
        }
    }

    public String frequencySort(String s) {
        // containing 48-122 digits , upper and lower case
        int[] arr = new int[125];
        for (char ch : s.toCharArray()) {
            // if ch == 1, then 48th idx it will incremented
            arr[ch]++;
        }
        // linked list take more storage
        ArrayList<Pair> freq_list = new ArrayList();
        // insert the freq_list character and it\'s count in Pair\'s obj then add obj to
        // arraylist
        for (int i = 48; i < 123; i++) {
            //at 48th - digit 1 and 122 is the last character
            if (arr[i] > 0) {
                // which character is present
                // charcter val of i ,and frequency
                freq_list.add(new Pair((char) i, arr[i]));
            }
        }
        Collections.sort(freq_list, new Comparator<Pair>() {

            public int compare(Pair obj1, Pair obj2) {
                // overriding the compare method
                // this will sort is decending order
                return obj2.count - obj1.count;
            }
        });
        // new compartor
        // append these freq_list character to string , source = array list
        StringBuilder sb = new StringBuilder();
        for (Pair p : freq_list) {
            // as object to pair class ka hai na in freq_list
            int count = p.count;
            while (count-- > 0) {
                // freq>0
                sb.append(p.ch);
            }
        }
        // now convert sb to string
        return sb.toString();
    }
}
