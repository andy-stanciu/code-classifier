class Solution {

    class Pair implements Comparable<Pair> {

        char ch;

        int ct;

        Pair(char ch, int ct) {
            this.ch = ch;
            this.ct = ct;
        }

        @Override
        public int compareTo(Pair other) {
            return Integer.compare(other.ct, this.ct);
        }
    }

    public String frequencySort(String s) {
        int n = s.length();
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            char ch = s.charAt(i);
            map.put(ch, map.getOrDefault(ch, 0) + 1);
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            pq.add(new Pair(entry.getKey(), entry.getValue()));
        }
        StringBuilder ans = new StringBuilder();
        while (!pq.isEmpty()) {
            Pair p = pq.poll();
            for (int i = 0; i < p.ct; i++) {
                ans.append(p.ch);
            }
        }
        return ans.toString();
    }
}
