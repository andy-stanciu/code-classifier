class Solution {

    public String frequencySort(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
        }
        StringBuilder sb = new StringBuilder();
        // Call the method to sort the map in reverse order
        Map<Character, Integer> sortedMap = sortByValueInReverseOrder(map);
        // Iterate through the sorted map
        for (Map.Entry<Character, Integer> entry : sortedMap.entrySet()) {
            for (int i = 0; i < entry.getValue(); i++) {
                sb.append(entry.getKey());
            }
        }
        return new String(sb);
    }

    public static Map<Character, Integer> sortByValueInReverseOrder(Map<Character, Integer> map) {
        // Convert the map entries to a list
        List<Map.Entry<Character, Integer>> list = new ArrayList<>(map.entrySet());
        // Sort the list by value using a comparator in reverse order
        list.sort(Map.Entry.<Character, Integer>comparingByValue().reversed());
        // Create a new LinkedHashMap to store the sorted entries
        Map<Character, Integer> sortedMap = new LinkedHashMap<>();
        for (Map.Entry<Character, Integer> entry : list) {
            sortedMap.put(entry.getKey(), entry.getValue());
        }
        return sortedMap;
    }
}
