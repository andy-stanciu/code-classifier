class Solution {

    public static class neww implements Comparable<neww> {

        int f;

        Character c;

        public neww(int f, Character c) {
            this.f = f;
            this.c = c;
        }

        @Override
        public int compareTo(neww n2) {
            return n2.f - this.f;
        }
    }

    public String frequencySort(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
        }
        PriorityQueue<neww> pq = new PriorityQueue<>();
        for (char c : map.keySet()) {
            pq.add(new neww(map.get(c), c));
        }
        StringBuilder sb = new StringBuilder();
        while (!pq.isEmpty()) {
            int f = pq.peek().f;
            char c = pq.remove().c;
            for (int i = 0; i < f; i++) {
                sb.append(c);
            }
        }
        return sb.toString();
    }
}
