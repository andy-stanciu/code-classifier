class Solution {

    public String frequencySort(String s) {
        // Comparator for the priority queue
        Comparator<Map.Entry<Character, Integer>> cmp = (a, b) -> a.getValue() - b.getValue();
        // Priority queue to store characters based on their frequencies
        PriorityQueue<Map.Entry<Character, Integer>> pq = new PriorityQueue<>(cmp.reversed());
        // HashMap to store character frequencies
        Map<Character, Integer> hm = new HashMap<>();
        // Counting character frequencies
        for (char c : s.toCharArray()) {
            hm.put(c, hm.getOrDefault(c, 0) + 1);
        }
        // Adding entries to the priority queue
        for (Map.Entry<Character, Integer> entry : hm.entrySet()) {
            pq.add(entry);
        }
        // Constructing the result string
        StringBuilder result = new StringBuilder();
        while (!pq.isEmpty()) {
            Map.Entry<Character, Integer> entry = pq.poll();
            for (int i = 0; i < entry.getValue(); i++) {
                result.append(entry.getKey());
            }
        }
        return result.toString();
    }
}
