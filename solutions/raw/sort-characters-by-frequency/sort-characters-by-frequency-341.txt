class Solution {

    class // Changed class name from \'pair\' to \'Pair\'
    Pair {

        char ch;

        int count;

        // Added constructor
        Pair(char ch, int count) {
            this.ch = ch;
            this.count = count;
        }
    }

    public String frequencySort(String s) {
        // Changed array size to 256 to accommodate all possible characters
        int[] arr = new int[256];
        for (char ch : s.toCharArray()) {
            arr[ch]++;
        }
        LinkedList<Pair> freq = new LinkedList<>();
        for (int i = 0; i < 256; i++) {
            // Changed loop range to accommodate all possible characters
            if (arr[i] > 0) {
                // Corrected class name and type casting
                freq.add(new Pair((char) i, arr[i]));
            }
        }
        Collections.sort(freq, new // Corrected class name
        Comparator<Pair>() {

            public int compare(Pair a, Pair b) {
                // Corrected class name
                return b.count - a.count;
            }
        });
        StringBuilder sb = new StringBuilder();
        for (Pair p : freq) {
            // Corrected class name
            int count = p.count;
            while (count-- > 0) sb.append(p.ch);
        }
        return sb.toString();
    }
}
