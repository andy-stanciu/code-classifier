class Solution {

    public class pair {

        char ch;

        int count;

        pair(char ch, int count) {
            this.ch = ch;
            this.count = count;
        }
    }

    public String frequencySort(String s) {
        PriorityQueue<pair> pq = new PriorityQueue<>((a, b) -> b.count - a.count);
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
        }
        for (Map.Entry<Character, Integer> it : map.entrySet()) {
            pair p = new pair(it.getKey(), it.getValue());
            pq.add(p);
        }
        StringBuilder result = new StringBuilder();
        while (!pq.isEmpty()) {
            pair p1 = pq.poll();
            int cnt = p1.count;
            while (cnt > 0) {
                result.append(p1.ch);
                cnt--;
            }
        }
        return result.toString();
    }
}
