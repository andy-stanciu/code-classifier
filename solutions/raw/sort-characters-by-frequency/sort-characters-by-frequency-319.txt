class Solution {

    public String frequencySort(String s) {
        if (s.length() == 0)
            return "";
        final Map<Character, Integer> map = new HashMap<Character, Integer>();
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            if (map.containsKey(ch)) {
                map.put(ch, map.get(ch) + 1);
            } else {
                map.put(ch, 1);
            }
        }
        Set<Character> characters = map.keySet();
        Character[] chArray = characters.toArray(new Character[characters.size()]);
        Arrays.sort(chArray, new Comparator<Character>() {

            @Override
            public int compare(Character ch1, Character ch2) {
                int c1 = map.get(ch1);
                int c2 = map.get(ch2);
                return c2 - c1;
            }
        });
        char[] chars = new char[s.length()];
        int j = 0;
        for (Character ch : chArray) {
            int count = map.get(ch);
            Arrays.fill(chars, j, j + count, ch);
            j = j + count;
        }
        return new String(chars);
    }
}
