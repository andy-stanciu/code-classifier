class Solution {

    public String frequencySort(String s) {
        // String Builder to easily append the string.
        StringBuilder result = new StringBuilder();
        // HashMap to store each character as a key.
        Map<Character, Integer> map = new HashMap<>();
        // \'s\' is a String thus it is converted to Array using s.toCharArray().
        // Iterating through each character in the array \'s\'.
        // In HashMap incrementing frequency of each key.
        for (char ch : s.toCharArray()) {
            map.put(ch, map.getOrDefault(ch, 0) + 1);
        }
        // Initializing a List to store the keys of HashMap.
        List<Character> list = new ArrayList(map.keySet());
        // --------LIST SORTING LAMBDA FUNCTIONS--------
        // Using Lambda-functions to sort the keys based on their frequency.
        // Key with higher freqncy comes first.
        list.sort((ob1, ob2) -> map.get(ob2) - map.get(ob1));
        // Iterating through each key of the List.
        for (char ch : list) {
            // Fetching the characters based on their frequencies.
            for (int i = 0; i < map.get(ch); i++) {
                // Appending the StringBuilder \'result\'.
                result.append(ch);
            }
        }
        // Converting StringBuilder into String.
        // Returning the string as the output.
        return result.toString();
    }
}
