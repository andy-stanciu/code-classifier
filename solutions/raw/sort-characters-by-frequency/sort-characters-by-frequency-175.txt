class Solution {

    class Pair implements Comparable<Pair> {

        char x;

        int freq;

        public Pair(char x, int freq) {
            this.x = x;
            this.freq = freq;
        }

        public int compareTo(Pair p2) {
            return this.freq - p2.freq;
        }
    }

    public String frequencySort(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>(Comparator.reverseOrder());
        for (char c : map.keySet()) {
            pq.add(new Pair(c, map.get(c)));
        }
        StringBuilder sb = new StringBuilder();
        while (!pq.isEmpty()) {
            Pair p = pq.poll();
            for (int i = 0; i < p.freq; i++) {
                sb.append(p.x);
            }
        }
        String str = sb.toString();
        return str;
    }
}
