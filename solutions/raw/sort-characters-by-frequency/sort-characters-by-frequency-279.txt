class Solution {

    public static HashMap<Character, Integer> sortByValue(HashMap<Character, Integer> hm) {
        List<Map.Entry<Character, Integer>> list = new LinkedList<Map.Entry<Character, Integer>>(hm.entrySet());
        Collections.sort(list, new Comparator<Map.Entry<Character, Integer>>() {

            public int compare(Map.Entry<Character, Integer> o1, Map.Entry<Character, Integer> o2) {
                return (o2.getValue()).compareTo(o1.getValue());
            }
        });
        HashMap<Character, Integer> temp = new LinkedHashMap<Character, Integer>();
        for (Map.Entry<Character, Integer> aa : list) {
            temp.put(aa.getKey(), aa.getValue());
        }
        return temp;
    }

    public String frequencySort(String s) {
        String str = "";
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
        }
        map = sortByValue(map);
        for (Map.Entry<Character, Integer> ele : map.entrySet()) {
            str += String.valueOf(ele.getKey()).repeat(ele.getValue());
        }
        return str;
    }
}
