/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length == 0) {
            return null;
        }
        int bestIndex = -1;
        // let\'s iterate once to find the new head and save it so we can return it
        for (int i = 0; i < lists.length; i++) {
            if (null != lists[i]) {
                if (bestIndex < 0 || lists[i].val < lists[bestIndex].val) {
                    bestIndex = i;
                }
            }
        }
        if (bestIndex < 0) {
            return null;
        }
        ListNode head = lists[bestIndex];
        lists[bestIndex] = lists[bestIndex].next;
        ListNode current = head;
        current.next = null;
        do {
            bestIndex = -1;
            for (int i = 0; i < lists.length; i++) {
                if (null != lists[i]) {
                    if (bestIndex < 0 || lists[i].val < lists[bestIndex].val) {
                        bestIndex = i;
                    }
                }
            }
            if (bestIndex >= 0) {
                ListNode nodeToMove = lists[bestIndex];
                lists[bestIndex] = lists[bestIndex].next;
                current.next = nodeToMove;
                current = current.next;
                current.next = null;
            }
        } while (bestIndex >= 0);
        return head;
    }
}
