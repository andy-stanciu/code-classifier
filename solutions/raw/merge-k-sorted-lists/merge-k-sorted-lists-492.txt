/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        // Divide the problem as, merge 2 linked list first and then the others
        if (lists.length == 0)
            return null;
        if (lists.length == 1)
            return lists[0];
        ListNode initialMerge = merge2SortedList(lists[0], lists[1]);
        for (int i = 2; i < lists.length; i++) {
            initialMerge = merge2SortedList(initialMerge, lists[i]);
        }
        return initialMerge;
    }

    private ListNode merge2SortedList(ListNode l1, ListNode l2) {
        if (l1 == null)
            return l2;
        if (l2 == null)
            return l1;
        if (l1.val < l2.val) {
            l1.next = merge2SortedList(l1.next, l2);
            return l1;
        } else {
            l2.next = merge2SortedList(l2.next, l1);
            return l2;
        }
    }
}
