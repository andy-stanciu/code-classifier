/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    class Pair {

        ListNode node;

        int listNum;

        Pair(ListNode n, int num) {
            node = n;
            listNum = num;
        }
    }

    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<Pair> pq = new PriorityQueue<>((x, y) -> x.node.val - y.node.val);
        ListNode dummy = new ListNode(0);
        ListNode ptr = dummy;
        for (int i = 0; i < lists.length; i++) {
            if (lists[i] != null) {
                ListNode temp = lists[i];
                lists[i] = temp.next;
                temp.next = null;
                pq.add(new Pair(temp, i));
            }
        }
        while (!pq.isEmpty()) {
            Pair temp = pq.remove();
            int listIdx = temp.listNum;
            ptr.next = temp.node;
            ptr = ptr.next;
            if (lists[listIdx] != null) {
                ListNode t = lists[listIdx];
                lists[listIdx] = t.next;
                t.next = null;
                pq.add(new Pair(t, listIdx));
            }
        }
        return dummy.next;
    }
}
