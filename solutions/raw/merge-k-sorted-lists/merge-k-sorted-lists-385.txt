/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {

    private ListNode[] lists;

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0)
            return null;
        else if (lists.length == 1)
            return lists[0];
        this.lists = lists;
        return sort(0, lists.length - 1);
    }

    private ListNode sort(int low, int high) {
        if (low == high)
            return this.lists[low];
        int mid = low + (high - low) / 2;
        ListNode l1 = sort(low, mid);
        ListNode l2 = sort(mid + 1, high);
        return merge(l1, l2);
    }

    private ListNode merge(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0), cur = dummy;
        while (l1 != null || l2 != null) {
            if (l1 != null && l2 != null) {
                cur.next = l1.val < l2.val ? l1 : l2;
                if (l1.val < l2.val)
                    l1 = l1.next;
                else
                    l2 = l2.next;
            } else if (l1 != null) {
                cur.next = l1;
                l1 = l1.next;
            } else {
                cur.next = l2;
                l2 = l2.next;
            }
            cur = cur.next;
        }
        return dummy.next;
    }
}
