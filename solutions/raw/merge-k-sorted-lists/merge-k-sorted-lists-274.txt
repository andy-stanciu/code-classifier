/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) {
            return null;
        }
        return mergeKList(lists, 0, lists.length - 1);
    }

    public static ListNode mergeKList(ListNode[] lists, int s, int e) {
        if (s == e)
            return lists[s];
        if (s + 1 == e)
            return merge(lists[s], lists[e]);
        int m = s + (e - s) / 2;
        ListNode l = mergeKList(lists, s, m);
        ListNode r = mergeKList(lists, m + 1, e);
        return merge(l, r);
    }

    public static ListNode merge(ListNode l1, ListNode l2) {
        if (l1 == null)
            return l2;
        if (l2 == null)
            return l1;
        if (l1.val < l2.val) {
            l1.next = merge(l1.next, l2);
            return l1;
        } else {
            l2.next = merge(l2.next, l1);
            return l2;
        }
    }
}
