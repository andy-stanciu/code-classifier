/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<ListNode> pq = new PriorityQueue<>(new Comparator<ListNode>() {

            public int compare(ListNode node1, ListNode node2) {
                return node1.val - node2.val;
            }
        });
        for (int i = 0; i < lists.length; i++) {
            ListNode temp = lists[i];
            while (temp != null) {
                pq.add(temp);
                temp = temp.next;
            }
        }
        if (pq.size() == 0)
            return null;
        ListNode firstNode = pq.remove();
        ListNode temp = firstNode;
        while (pq.size() > 0) {
            temp.next = pq.remove();
            temp = temp.next;
        }
        temp.next = null;
        return firstNode;
    }
}
