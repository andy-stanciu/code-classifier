/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0)
            return null;
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;
        PriorityQueue<ListNode> min = new PriorityQueue<>((a, b) -> a.val - b.val);
        for (int i = 0; i < lists.length; ++i) {
            if (lists[i] != null) {
                min.offer(lists[i]);
            }
        }
        while (!min.isEmpty()) {
            ListNode sort = min.poll();
            curr.next = sort;
            curr = curr.next;
            if (sort.next != null) {
                min.offer(sort.next);
            }
        }
        return dummy.next;
    }
}
