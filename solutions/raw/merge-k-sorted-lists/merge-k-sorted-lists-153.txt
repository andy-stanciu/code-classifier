/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        // Definir a fila de prioridade (min-heap) com base no valor dos n\xF3s
        PriorityQueue<ListNode> pq = new PriorityQueue<>((a, b) -> a.val - b.val);
        // Adicionar o primeiro n\xF3 de cada lista na min-heap
        for (ListNode list : lists) {
            if (list != null) {
                pq.offer(list);
            }
        }
        // N\xF3 cabe\xE7a para a lista resultante
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        // Enquanto houver elementos na min-heap
        while (!pq.isEmpty()) {
            // Obter o n\xF3 com o menor valor
            ListNode node = pq.poll();
            current.next = node;
            current = current.next;
            // Se o n\xF3 tiver um pr\xF3ximo, adicion\xE1-lo \xE0 min-heap
            if (node.next != null) {
                pq.offer(node.next);
            }
        }
        // Retorna a lista resultante
        return dummy.next;
    }
}
