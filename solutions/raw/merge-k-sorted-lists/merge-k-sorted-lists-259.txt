/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Info implements Comparable<Info> {

    ListNode head;

    Info(ListNode head) {
        this.head = head;
    }

    @Override
    public int compareTo(Info n) {
        return this.head.val - n.head.val;
    }
}

class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<Info> pq = new PriorityQueue<>();
        ListNode ans = new ListNode(-1);
        ListNode finalAns = ans;
        for (int i = 0; i < lists.length; i++) {
            if (lists[i] != null) {
                Info temp = new Info(lists[i]);
                pq.add(temp);
            }
        }
        while (!pq.isEmpty()) {
            ListNode temp = pq.remove().head;
            ans.next = temp;
            if (temp.next != null) {
                temp = temp.next;
                Info next = new Info(temp);
                pq.add(next);
            }
            ans = ans.next;
        }
        return finalAns.next;
    }
}
