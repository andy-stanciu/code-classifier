/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length == 0) {
            return null;
        }
        ListNode mergeList = null;
        ListNode mergeListC = null;
        int minIndex = -1;
        int minVal = Integer.MAX_VALUE;
        int notLeft = 0;
        while (true) {
            int x = -1;
            minVal = Integer.MAX_VALUE;
            for (int i = 0; i < lists.length; i++) {
                // System.out.println(lists[i].val);
                if (lists[i] != null) {
                    if (lists[i].val < minVal) {
                        x = i;
                        minVal = lists[i].val;
                    }
                }
            }
            if (x == -1) {
                break;
            }
            if (mergeList == null) {
                mergeList = new ListNode(lists[x].val);
                mergeListC = mergeList;
                lists[x] = lists[x].next;
            } else {
                mergeListC.next = new ListNode(lists[x].val);
                mergeListC = mergeListC.next;
                lists[x] = lists[x].next;
            }
        }
        return mergeList;
    }
}
