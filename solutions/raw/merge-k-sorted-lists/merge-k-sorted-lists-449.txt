/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null) {
            return null;
        }
        Queue<ListNode> pq = new PriorityQueue<>((node1, node2) -> Integer.compare(node1.val, node2.val));
        for (int i = 0; i < lists.length; i++) {
            if (lists[i] != null) {
                pq.add(lists[i]);
            }
        }
        ListNode resultList = new ListNode();
        ListNode cur = resultList;
        while (!pq.isEmpty()) {
            ListNode elem = pq.poll();
            cur.next = new ListNode(elem.val);
            cur = cur.next;
            if (elem.next != null) {
                pq.add(elem.next);
            }
        }
        return resultList.next;
    }
}
