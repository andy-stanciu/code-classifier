/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<ListNode> pq = new PriorityQueue<>(1, new Comparator<ListNode>() {

            public int compare(ListNode one, ListNode two) {
                return one.val - two.val;
            }
        });
        ListNode[] temp = new ListNode[lists.length];
        for (int i = 0; i < lists.length; i++) {
            temp[i] = lists[i];
            if (temp[i] != null)
                pq.offer(temp[i]);
        }
        ListNode head = null;
        ListNode curr = null;
        while (!pq.isEmpty()) {
            ListNode tempo = pq.poll();
            if (head == null) {
                head = tempo;
                curr = head;
            } else {
                curr.next = tempo;
                curr = curr.next;
            }
            if (tempo.next != null) {
                pq.offer(tempo.next);
            }
        }
        return head;
    }
}
