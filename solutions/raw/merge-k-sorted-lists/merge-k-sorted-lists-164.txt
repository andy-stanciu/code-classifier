/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        int k = lists.length;
        ListNode[] start_point = new ListNode[k];
        for (int i = 0; i < k; i++) {
            start_point[i] = lists[i];
        }
        ListNode cur_node = new ListNode(0);
        ListNode start = cur_node;
        while (true) {
            boolean judger = false;
            for (int i = 0; i < k; i++) {
                if (start_point[i] != null) {
                    judger = true;
                }
            }
            if (!judger) {
                return start.next;
            }
            int pos = 0;
            int minValue = Integer.MAX_VALUE;
            for (int i = 0; i < k; i++) {
                if (start_point[i] != null && start_point[i].val < minValue) {
                    minValue = start_point[i].val;
                    pos = i;
                }
            }
            cur_node.next = start_point[pos];
            cur_node = cur_node.next;
            start_point[pos] = start_point[pos].next;
        }
        //return dummy_node.next;
    }
}
