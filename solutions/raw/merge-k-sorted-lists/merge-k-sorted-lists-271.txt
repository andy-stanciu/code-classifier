/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    static class Pair implements Comparable<Pair> {

        int val, index;

        public Pair(int val, int index) {
            this.val = val;
            this.index = index;
        }

        @Override
        public int compareTo(Pair o) {
            // TODO Auto-generated method stub
            return this.val - o.val;
        }
    }

    public ListNode mergeKLists(ListNode[] lists) {
        ListNode head = null;
        ListNode tail = null;
        PriorityQueue<Pair> pq = new PriorityQueue();
        //get the first item from all the list in the queue
        for (int i = 0; i < lists.length; i++) {
            if (lists[i] != null) {
                pq.add(new Pair(lists[i].val, i));
            }
        }
        int minIndex;
        while (pq.isEmpty() == false) {
            minIndex = pq.peek().index;
            pq.poll();
            if (head == null) {
                head = lists[minIndex];
                tail = lists[minIndex];
            } else {
                tail.next = lists[minIndex];
                tail = tail.next;
            }
            lists[minIndex] = lists[minIndex].next;
            tail.next = null;
            if (lists[minIndex] != null) {
                pq.add(new Pair(lists[minIndex].val, minIndex));
            }
        }
        return head;
    }
}
