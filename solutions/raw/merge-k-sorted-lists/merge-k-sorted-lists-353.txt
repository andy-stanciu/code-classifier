/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<Integer> queue = new PriorityQueue<>();
        for (int i = 0; i < lists.length; i++) {
            while (lists[i] != null) {
                queue.add(lists[i].val);
                lists[i] = lists[i].next;
            }
        }
        // queue to ListNode
        ListNode root = new ListNode();
        ListNode currentNode = root;
        while (queue.peek() != null) {
            currentNode.next = new ListNode(queue.poll());
            currentNode = currentNode.next;
        }
        return root.next;
    }

    public ListNode mergeKListsByMap(ListNode[] lists) {
        Map<Integer, Integer> map = new TreeMap<>();
        for (int i = 0; i < lists.length; i++) {
            while (lists[i] != null) {
                int val = lists[i].val;
                if (map.containsKey(lists[i].val)) {
                    map.put(val, map.get(val) + 1);
                } else {
                    map.put(val, 1);
                }
                lists[i] = lists[i].next;
            }
        }
        // map to ListNode
        ListNode root = new ListNode();
        ListNode currentNode = root;
        for (Map.Entry<Integer, Integer> element : map.entrySet()) {
            for (int i = 0; i < element.getValue(); i++) {
                currentNode.next = new ListNode(element.getKey());
                currentNode = currentNode.next;
            }
        }
        return root.next;
    }
}
