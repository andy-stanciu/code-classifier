/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0)
            return null;
        if (lists.length == 1)
            return lists[0];
        return mergeKListsHelper(lists, 0, lists.length - 1);
    }

    public static ListNode mergeKListsHelper(ListNode[] lists, int start, int end) {
        if (start == end)
            return lists[start];
        if (start + 1 == end)
            return merge(lists[start], lists[end]);
        var middlePointer = start + (end - start) / 2;
        var leftPart = mergeKListsHelper(lists, start, middlePointer);
        var rightPart = mergeKListsHelper(lists, middlePointer + 1, end);
        return merge(rightPart, leftPart);
    }

    private static ListNode merge(ListNode node1, ListNode node2) {
        ListNode init = new ListNode();
        ListNode head = init;
        while (node1 != null && node2 != null) {
            if (node1.val > node2.val) {
                init.next = new ListNode(node2.val);
                node2 = node2.next;
            } else {
                init.next = new ListNode(node1.val);
                node1 = node1.next;
            }
            init = init.next;
        }
        init.next = node1 == null ? node2 : node1;
        return head.next;
    }
}
