/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    int nullLists = 0;

    public ListNode mergeKLists(ListNode[] lists) {
        nullLists = 0;
        int minIndex = minimum(lists);
        if (nullLists == lists.length)
            return null;
        ListNode head = lists[minIndex];
        lists[minIndex] = lists[minIndex].next;
        head.next = mergeKLists(lists);
        return head;
    }

    public int minimum(ListNode[] lists) {
        int min = Integer.MAX_VALUE, index = 0;
        for (int i = 0; i < lists.length; i++) {
            if (lists[i] == null) {
                nullLists++;
                continue;
            }
            if (lists[i].val < min) {
                min = lists[i].val;
                index = i;
            }
        }
        return index;
    }
}
