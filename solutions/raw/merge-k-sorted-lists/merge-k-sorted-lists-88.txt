/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0)
            return null;
        return mergeSort(lists, 0, lists.length - 1);
    }

    private ListNode mergeSort(ListNode[] lists, int start, int end) {
        if (start == end)
            return lists[start];
        int middle = start + (end - start) / 2;
        ListNode left = mergeSort(lists, start, middle);
        ListNode right = mergeSort(lists, middle + 1, end);
        return merger(left, right);
    }

    private ListNode merger(ListNode left, ListNode right) {
        ListNode list = new ListNode(0);
        ListNode current = list;
        while (left != null && right != null) {
            if (left.val < right.val) {
                current.next = left;
                left = left.next;
            } else {
                current.next = right;
                right = right.next;
            }
            current = current.next;
        }
        current.next = (left != null) ? left : right;
        return list.next;
    }
}
