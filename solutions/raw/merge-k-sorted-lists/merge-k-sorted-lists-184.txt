/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    // Time Complexity: K * log(N), N = size of lists, K = number of elements.
    // Space Comlexity: K;
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length == 0)
            return null;
        return mergeLists(lists, 0, lists.length - 1);
    }

    ListNode mergeLists(ListNode[] lists, int left, int right) {
        if (left < right) {
            int mid = left + (right - left) / 2;
            ListNode leftNode = mergeLists(lists, left, mid);
            ListNode rightNode = mergeLists(lists, mid + 1, right);
            return merge2Lists(leftNode, rightNode);
        }
        return lists[left];
    }

    ListNode merge2Lists(ListNode list1, ListNode list2) {
        ListNode vHead = new ListNode();
        ListNode prev = vHead;
        while (list1 != null || list2 != null) {
            if (list1 == null) {
                prev.next = list2;
                break;
            } else if (list2 == null) {
                prev.next = list1;
                break;
            } else if (list1.val <= list2.val) {
                prev.next = list1;
                prev = prev.next;
                list1 = list1.next;
            } else {
                prev.next = list2;
                prev = prev.next;
                list2 = list2.next;
            }
        }
        return vHead.next;
    }
}
