class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        // Create a priority queue with a comparator to sort nodes by their values
        PriorityQueue<ListNode> pq = new PriorityQueue<>((a, b) -> a.val - b.val);
        // Add the head nodes of all the lists to the priority queue, skip nulls
        for (ListNode list : lists) {
            if (list != null) {
                pq.add(list);
            }
        }
        // Dummy node to help with the result list construction
        ListNode dummy = new ListNode(-1);
        ListNode temp = dummy;
        // Merge the lists
        while (!pq.isEmpty()) {
            // Get the node with the smallest value
            ListNode node = pq.poll();
            // Add this node to the result list
            temp.next = node;
            temp = temp.next;
            // If there is a next node in the list, add it to the priority queue
            if (node.next != null) {
                pq.add(node.next);
            }
        }
        return dummy.next;
    }
}
