class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length == 0)
            return null;
        // In ascending order of values
        PriorityQueue<ListNode> pq = new PriorityQueue<>((o1, o2) -> o1.val - o2.val);
        for (ListNode l : lists) if (l != null)
            pq.add(l);
        // Added first three values, which also hold address to next value
        ListNode dummy = new ListNode();
        ListNode prev = dummy;
        while (// While it contains nodes
        !pq.isEmpty()) {
            // We get the smallest value
            ListNode pop = pq.poll();
            // we set dummy to the node
            dummy.next = pop;
            if (pop.next != null)
                // added the next node into the queue
                pq.add(pop.next);
            dummy = pop;
            // set the node\'s next address null
            pop.next = null;
        }
        return prev.next;
    }
}
