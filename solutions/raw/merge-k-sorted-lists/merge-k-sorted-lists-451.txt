/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0)
            return null;
        ListNode head = new ListNode();
        ListNode tail = head;
        Integer min = null;
        while ((min = getMinIndex(lists)) != null) {
            tail.next = lists[min];
            tail = tail.next;
            lists[min] = lists[min].next;
        }
        return head.next;
    }

    //Time Complexity of getMinIndex O(K)
    public Integer getMinIndex(ListNode[] lists) {
        Integer minIndex = null;
        for (int i = 0; i < lists.length; i++) {
            if (lists[i] != null && (minIndex == null || lists[i].val < lists[minIndex].val)) {
                minIndex = i;
            }
        }
        return minIndex;
    }
}
