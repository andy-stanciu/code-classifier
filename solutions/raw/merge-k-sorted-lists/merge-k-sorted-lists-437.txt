/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) {
            return null;
        }
        return mergeKListsHelper(lists, 0, lists.length - 1);
    }

    private ListNode mergeKListsHelper(ListNode[] lists, int start, int end) {
        if (start == end) {
            return lists[start];
        }
        int mid = start + (end - start) / 2;
        ListNode left = mergeKListsHelper(lists, start, mid);
        ListNode right = mergeKListsHelper(lists, mid + 1, end);
        return mergeTwoLists(left, right);
    }

    private ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode(-1);
        ListNode cur = dummy;
        ListNode curone = list1;
        ListNode curtwo = list2;
        while (curone != null && curtwo != null) {
            if (curone.val <= curtwo.val) {
                cur.next = curone;
                curone = curone.next;
            } else {
                cur.next = curtwo;
                curtwo = curtwo.next;
            }
            cur = cur.next;
        }
        if (curone != null) {
            cur.next = curone;
        }
        if (curtwo != null) {
            cur.next = curtwo;
        }
        return dummy.next;
    }
}
