/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0)
            return null;
        if (lists.length == 1)
            return lists[0];
        int height = 1;
        while (height < lists.length) {
            for (int i = 0; i + height < lists.length; i += 2 * height) {
                lists[i] = merge2List(lists[i], lists[i + height]);
            }
            height *= 2;
        }
        return lists[0];
    }

    private ListNode merge2List(ListNode first, ListNode second) {
        if (first == null)
            return second;
        if (second == null)
            return first;
        ListNode head, tail;
        if (first.val <= second.val) {
            head = tail = first;
            first = first.next;
        } else {
            head = tail = second;
            second = second.next;
        }
        while (first != null && second != null) {
            if (first.val <= second.val) {
                tail.next = first;
                first = first.next;
            } else {
                tail.next = second;
                second = second.next;
            }
            tail = tail.next;
        }
        if (first != null)
            tail.next = first;
        else
            tail.next = second;
        return head;
    }
}
