/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        // 1. [] \uB610\uB294
        if (lists == null || lists.length == 0)
            return null;
        // 2.
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        // 3. \uC6B0\uC120\uC21C\uC704 \uD050\uC5D0 \uAC12\uC744 \uD558\uB098\uC529 \uC0BD\uC785
        for (ListNode currentNode : lists) {
            // ex. currentNode = list1([1,4,5])\uC758 \uC2DC\uC791\uB178\uB4DC
            while (currentNode != null) {
                // ex. currentNode.val = 1
                pq.add(currentNode.val);
                // ex. currentNode.next = list1.next(\uC989, 4)
                currentNode = currentNode.next;
            }
        }
        // 4. [[], [1]]\uACFC \uAC19\uC740 \uC608\uC678 \uCF00\uC774\uC2A4 \uACE0\uB824
        if (pq.size() < 1)
            return null;
        ListNode dummy = new ListNode(0);
        ListNode temp = dummy;
        while (pq.size() > 0) {
            temp.next = new ListNode(pq.poll());
            temp = temp.next;
        }
        return dummy.next;
    }
}
