/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        int k = lists.length;
        PriorityQueue<ListNode> minHeap = new PriorityQueue<ListNode>((e1, e2) -> e1.val - e2.val);
        ListNode resultHead = null, resultTail = null;
        for (ListNode head : lists) {
            if (head != null)
                minHeap.add(head);
        }
        while (!minHeap.isEmpty()) {
            ListNode temp = minHeap.poll();
            if (resultHead == null) {
                resultHead = resultTail = temp;
            } else {
                resultTail.next = temp;
                resultTail = resultTail.next;
            }
            if (temp.next != null) {
                minHeap.add(temp.next);
            }
        }
        return resultHead;
    }
}
