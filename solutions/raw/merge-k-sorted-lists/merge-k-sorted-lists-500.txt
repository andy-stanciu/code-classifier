/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        int k = lists.length;
        ListNode head = null;
        PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>() {

            public int compare(Integer i1, Integer i2) {
                return i2 - i1;
            }
        });
        int idx, min;
        for (int i = 0; i < k; i++) while (lists[i] != null) {
            pq.add(lists[i].val);
            lists[i] = lists[i].next;
        }
        while (!pq.isEmpty()) {
            head = new ListNode(pq.poll(), head);
        }
        return head;
    }
}
