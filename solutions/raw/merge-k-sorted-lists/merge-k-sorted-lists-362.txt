/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length == 0)
            return null;
        return divideLists(lists, 0, lists.length - 1);
    }

    // Divide the lists into 2 halves
    private ListNode divideLists(ListNode[] lists, int low, int high) {
        if (low == high)
            return lists[low];
        int mid = low + (high - low) / 2;
        ListNode first = divideLists(lists, low, mid);
        ListNode second = divideLists(lists, mid + 1, high);
        return mergeListNodes(first, second);
    }

    // Merge 2 Linked List Nodes based on their values
    private ListNode mergeListNodes(ListNode first, ListNode second) {
        if (null == first)
            return second;
        if (null == second)
            return first;
        if (first.val < second.val) {
            first.next = mergeListNodes(first.next, second);
            return first;
        } else {
            second.next = mergeListNodes(first, second.next);
            return second;
        }
    }
}
