/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        // Check inputs and base condition
        if (lists == null || lists.length < 1)
            return null;
        ListNode l1 = lists[0];
        int i = 1;
        while (i < lists.length) {
            ListNode l2 = lists[i];
            l1 = merge(l1, l2);
            i++;
        }
        return l1;
    }

    ListNode merge(ListNode l1, ListNode l2) {
        if (l1 == null)
            return l2;
        if (l2 == null)
            return l1;
        ListNode ans = new ListNode();
        ListNode cur = ans;
        while (l1 != null && l2 != null) {
            if (l1.val <= l2.val) {
                cur.next = l1;
                l1 = l1.next;
            } else {
                cur.next = l2;
                l2 = l2.next;
            }
            cur = cur.next;
        }
        if (l1 != null)
            cur.next = l1;
        else if (l2 != null)
            cur.next = l2;
        return ans.next;
    }
}
