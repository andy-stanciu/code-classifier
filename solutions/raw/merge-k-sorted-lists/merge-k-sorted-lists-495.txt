/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        int k = lists.length;
        if (k == 1)
            return lists[0];
        ListNode res = null;
        ListNode head = null;
        ListNode list1head = null;
        int val = 0;
        for (int i = 0; i < k; i++) {
            while (lists[i] != null && list1head != null) {
                if (lists[i].val < list1head.val) {
                    val = lists[i].val;
                    lists[i] = lists[i].next;
                } else {
                    val = list1head.val;
                    list1head = list1head.next;
                }
                if (res == null) {
                    res = new ListNode(val);
                    head = res;
                } else {
                    res.next = new ListNode(val);
                    res = res.next;
                }
            }
            while (lists[i] != null) {
                if (res == null) {
                    res = new ListNode(lists[i].val);
                    head = res;
                } else {
                    res.next = new ListNode(lists[i].val);
                    res = res.next;
                }
                lists[i] = lists[i].next;
            }
            while (list1head != null) {
                if (res == null) {
                    res = new ListNode(list1head.val);
                    head = res;
                } else {
                    res.next = new ListNode(list1head.val);
                    res = res.next;
                }
                list1head = list1head.next;
            }
            list1head = head;
            head = null;
            res = null;
        }
        return list1head;
    }
}
