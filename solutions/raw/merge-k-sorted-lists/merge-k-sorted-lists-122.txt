// class ListNode {
//     int val;
//     ListNode next;
//     ListNode(int x) { val = x; }
// }
public class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0)
            return null;
        // Priority queue to store nodes by their values in ascending order
        PriorityQueue<ListNode> pq = new PriorityQueue<>((a, b) -> a.val - b.val);
        // Add the head of each list to the priority queue
        for (ListNode list : lists) {
            if (list != null) {
                pq.add(list);
            }
        }
        // Dummy head for the result list
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        // Process the queue until empty
        while (!pq.isEmpty()) {
            // Get the smallest element from the heap
            ListNode smallest = pq.poll();
            tail.next = smallest;
            tail = tail.next;
            // If there\'s a next node in this list, add it to the heap
            if (smallest.next != null) {
                pq.add(smallest.next);
            }
        }
        return dummy.next;
    }
}
