class Solution {

    private ListNode helper(ListNode[] lists, int s, int e) {
        if (s == e) {
            return lists[s];
        }
        int mid = (s + e) / 2;
        ListNode list1 = helper(lists, s, mid);
        ListNode list2 = helper(lists, mid + 1, e);
        ListNode temp1 = list1, temp2 = list2;
        ListNode head = new ListNode(-1), tail = head;
        while (temp1 != null && temp2 != null) {
            if (temp1.val < temp2.val) {
                tail.next = temp1;
                tail = temp1;
                temp1 = temp1.next;
            } else {
                tail.next = temp2;
                tail = temp2;
                temp2 = temp2.next;
            }
        }
        if (temp1 != null) {
            tail.next = temp1;
        }
        if (temp2 != null) {
            tail.next = temp2;
        }
        return head.next;
    }

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length == 0) {
            return null;
        }
        return helper(lists, 0, lists.length - 1);
    }
}
