/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<Integer> queue = new PriorityQueue<>();
        ListNode head = null;
        if (lists.length == 0) {
            return null;
        }
        for (int i = 0; i < lists.length; i++) {
            ListNode t = lists[i];
            while (t != null) {
                queue.offer(t.val);
                t = t.next;
            }
        }
        if (!queue.isEmpty())
            head = new ListNode(queue.poll());
        ListNode temp = head;
        while (!queue.isEmpty()) {
            temp.next = new ListNode(queue.poll());
            temp = temp.next;
        }
        return head;
    }
}
