/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0)
            return null;
        if (lists.length == 1)
            return lists[0];
        return mergeListhelper(lists, 0, lists.length - 1);
    }

    ListNode mergeListhelper(ListNode[] lists, int start, int end) {
        if (start == end) {
            return lists[start];
        }
        if (start + 1 == end) {
            return merge(lists[start], lists[end]);
        }
        int mid = (start + end) / 2;
        ListNode left = mergeListhelper(lists, start, mid);
        ListNode right = mergeListhelper(lists, mid + 1, end);
        return merge(left, right);
    }

    ListNode merge(ListNode l, ListNode r) {
        ListNode res = new ListNode();
        ListNode curr = res;
        while (l != null && r != null) {
            if (l.val <= r.val) {
                curr.next = l;
                l = l.next;
            } else {
                curr.next = r;
                r = r.next;
            }
            curr = curr.next;
        }
        curr.next = l == null ? r : l;
        return res.next;
    }
}
