/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode merge(ListNode first, ListNode second) {
        ListNode dummy = new ListNode(-1);
        ListNode temp = dummy;
        while (first != null && second != null) {
            if (first.val <= second.val) {
                temp.next = first;
                temp = temp.next;
                first = first.next;
            } else {
                temp.next = second;
                temp = temp.next;
                second = second.next;
            }
        }
        if (first != null) {
            temp.next = first;
        } else {
            temp.next = second;
        }
        return dummy.next;
    }

    public ListNode devide(ListNode[] list, int l, int h) {
        if (l > h) {
            return null;
        }
        if (l == h) {
            return list[h];
        }
        int mid = (l + h) / 2;
        ListNode first = devide(list, l, mid);
        ListNode second = devide(list, mid + 1, h);
        ListNode finalList = merge(first, second);
        return finalList;
    }

    public ListNode mergeKLists(ListNode[] lists) {
        return devide(lists, 0, lists.length - 1);
    }
}
