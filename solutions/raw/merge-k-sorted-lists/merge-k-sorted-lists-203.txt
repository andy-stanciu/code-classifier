/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    private ListNode merge(ListNode list1, ListNode list2) {
        ListNode mergell = new ListNode(0);
        ListNode temp = mergell;
        while (list1 != null && list2 != null) {
            if (list1.val < list2.val) {
                temp.next = list1;
                list1 = list1.next;
            } else {
                temp.next = list2;
                list2 = list2.next;
            }
            temp = temp.next;
        }
        if (list1 != null) {
            temp.next = list1;
        } else {
            temp.next = list2;
        }
        return mergell.next;
    }

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) {
            return null;
        }
        while (lists.length > 1) {
            List<ListNode> listsk = new ArrayList<>();
            for (int i = 0; i + 1 < lists.length; i += 2) {
                ListNode l1 = lists[i];
                ListNode l2 = lists[i + 1];
                listsk.add(merge(l1, l2));
            }
            if (lists.length % 2 != 0) {
                listsk.add(lists[lists.length - 1]);
            }
            lists = listsk.toArray(new ListNode[0]);
        }
        return lists.length == 0 ? null : lists[0];
    }
}
