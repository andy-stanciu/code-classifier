/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<ListNode> a = new PriorityQueue<>((x, y) -> x.val - y.val);
        //offering the head of each node to min-heap
        for (ListNode b : lists) {
            if (b != null) {
                a.offer(b);
            }
        }
        //initializing a new node set to 0
        ListNode ans = new ListNode(0);
        ListNode cur = ans;
        while (!a.isEmpty()) {
            //smallest node of priority queue
            ListNode z = a.poll();
            cur.next = z;
            cur = cur.next;
            if (z.next != null) {
                //offering the next node of the smallest element to priority queue
                a.offer(z.next);
            }
        }
        return ans.next;
    }
}
