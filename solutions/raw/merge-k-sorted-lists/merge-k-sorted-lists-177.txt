/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        int n = lists.length;
        ListNode root = null;
        PriorityQueue<ListNode> pq = new PriorityQueue<ListNode>((a, b) -> a.val - b.val);
        for (int i = 0; i < n; i++) {
            if (lists[i] != null)
                pq.add(lists[i]);
        }
        root = pq.peek();
        pq.poll();
        if (root != null && root.next != null)
            pq.add(root.next);
        ListNode temp = root;
        while (!pq.isEmpty()) {
            temp.next = pq.peek();
            temp = pq.peek();
            pq.poll();
            if (temp.next != null)
                pq.add(temp.next);
        }
        return root;
    }
}
