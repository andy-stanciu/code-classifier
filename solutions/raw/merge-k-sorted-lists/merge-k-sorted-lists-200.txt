/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0)
            return null;
        return helper(lists, 0, lists.length - 1);
    }

    private ListNode helper(ListNode[] lists, int left, int right) {
        if (left == right)
            return lists[left];
        int mid = left + (right - left) / 2;
        ListNode l1 = helper(lists, left, mid);
        ListNode l2 = helper(lists, mid + 1, right);
        return merge(l1, l2);
    }

    private ListNode merge(ListNode headA, ListNode headB) {
        if (headA == null)
            return headB;
        if (headB == null)
            return headA;
        ListNode ans = new ListNode(-1);
        ListNode tail = ans;
        while (headA != null && headB != null) {
            if (headA.val < headB.val) {
                tail.next = headA;
                tail = headA;
                headA = headA.next;
            } else {
                tail.next = headB;
                tail = headB;
                headB = headB.next;
            }
        }
        if (headA != null)
            tail.next = headA;
        if (headB != null)
            tail.next = headB;
        return ans.next;
    }
}
