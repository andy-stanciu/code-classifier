/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        ListNode head = new ListNode(), tmp;
        int k = lists.length;
        PriorityQueue<ListNode> pq = new PriorityQueue<>((ListNode n1, ListNode n2) -> n1.val - n2.val);
        for (int i = 0; i < k; i++) {
            if (lists[i] != null)
                pq.add(lists[i]);
        }
        tmp = head;
        while (!pq.isEmpty()) {
            ListNode tp = pq.poll();
            head.next = tp;
            head = head.next;
            if (tp.next != null)
                pq.add(tp.next);
        }
        return tmp.next;
    }
}
