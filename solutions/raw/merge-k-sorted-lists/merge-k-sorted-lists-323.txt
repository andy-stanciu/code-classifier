/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0)
            return null;
        Queue<ListNode> queue = new PriorityQueue<>(new Comparator<ListNode>() {

            @Override
            public int compare(ListNode o1, ListNode o2) {
                return o1.val - o2.val;
            }
        });
        for (int i = 0; i < lists.length; i++) {
            if (lists[i] != null)
                queue.offer(lists[i]);
        }
        ListNode cur = queue.poll();
        ListNode pre = cur;
        ListNode head = cur;
        if (cur != null && cur.next != null)
            queue.offer(cur.next);
        while (!queue.isEmpty()) {
            cur = queue.poll();
            pre.next = cur;
            if (cur.next != null)
                queue.offer(cur.next);
            pre = cur;
        }
        return head;
    }
}
