/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    static class Merge implements Comparable<Merge> {

        int idx;

        int val;

        public Merge(int idx, int val) {
            this.idx = idx;
            this.val = val;
        }

        @Override
        public int compareTo(Merge m2) {
            return this.val - m2.val;
        }
    }

    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<Merge> pq = new PriorityQueue<>();
        for (int i = 0; i < lists.length; i++) {
            ListNode head = lists[i];
            while (head != null) {
                pq.add(new Merge(i, head.val));
                head = head.next;
            }
        }
        ListNode mergedll = new ListNode(-1);
        ListNode curr = mergedll;
        while (!pq.isEmpty()) {
            curr.next = new ListNode(pq.remove().val);
            curr = curr.next;
        }
        return mergedll.next;
    }
}
