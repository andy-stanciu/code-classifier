class Solution {

    public int[] asteroidCollision(int[] asteroids) {
        Stack<Integer> s = new Stack<>();
        for (int i = 0; i < asteroids.length; i++) {
            while (!s.isEmpty() && (s.peek() > 0 && asteroids[i] < 0)) {
                if (Math.abs(s.peek()) < Math.abs(asteroids[i])) {
                    s.pop();
                } else {
                    break;
                }
            }
            if (!s.isEmpty() && (s.peek() > 0 && asteroids[i] < 0) && Math.abs(s.peek()) == Math.abs(asteroids[i])) {
                s.pop();
            } else if (!s.isEmpty() && (s.peek() > 0 && asteroids[i] < 0) && Math.abs(s.peek()) > Math.abs(asteroids[i])) {
            } else {
                s.push(asteroids[i]);
            }
        }
        int[] ans = new int[s.size()];
        int k = s.size() - 1;
        while (!s.isEmpty()) {
            ans[k] = s.pop();
            k--;
        }
        return ans;
    }
}
