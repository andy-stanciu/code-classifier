class Solution {

    public int[] asteroidCollision(int[] asteroids) {
        int n = asteroids.length;
        Stack<Integer> st = new Stack<>();
        for (int aster : asteroids) {
            if (aster >= 0) {
                st.push(aster);
            } else if (aster < 0) {
                boolean pushTheCurrentAster = true;
                while (!st.isEmpty()) {
                    int prevAster = st.peek();
                    if (prevAster < 0) {
                        break;
                    } else if (Math.abs(prevAster) > Math.abs(aster)) {
                        pushTheCurrentAster = false;
                        break;
                    } else if (Math.abs(prevAster) < Math.abs(aster)) {
                        st.pop();
                        pushTheCurrentAster = true;
                    } else if (Math.abs(prevAster) == Math.abs(aster)) {
                        st.pop();
                        pushTheCurrentAster = false;
                        break;
                    }
                }
                if (pushTheCurrentAster == true) {
                    st.push(aster);
                }
            }
        }
        int[] res = new int[st.size()];
        for (int i = st.size() - 1; i >= 0; i--) {
            res[i] = st.pop();
        }
        return res;
    }
}
