class Solution {

    boolean goingAwayFromEachOther(int top, int num) {
        return top < 0 && num > 0;
    }

    boolean goingInSameDirection(int top, int num) {
        return top * num > 0;
    }

    boolean currentAsteroidSizeIsBigger(int top, int num) {
        return top < Math.abs(num);
    }

    public int[] asteroidCollision(int[] a) {
        int n = a.length;
        Stack<Integer> st = new Stack<>();
        for (int i = 0; i < n; i++) {
            if (st.isEmpty() || goingAwayFromEachOther(st.peek(), a[i]) || goingInSameDirection(st.peek(), a[i])) {
                st.push(a[i]);
            } else {
                //coming towards each other.i.e a[i] < 0. check its abs value.
                while (!st.isEmpty() && st.peek() > 0 && currentAsteroidSizeIsBigger(st.peek(), Math.abs(a[i]))) {
                    st.pop();
                }
                if (st.isEmpty() || st.peek() < 0) {
                    //same direction
                    st.push(a[i]);
                } else if (st.peek() == Math.abs(a[i])) {
                    // same size
                    st.pop();
                }
            }
        }
        int[] ans = new int[st.size()];
        int i = st.size() - 1;
        while (!st.isEmpty()) {
            ans[i] = st.peek();
            i--;
            st.pop();
        }
        return ans;
    }
}
