class Solution {

    public int[] asteroidCollision(int[] asteroids) {
        Stack<Integer> s = new Stack<>();
        for (int i = 0; i < asteroids.length; i++) {
            if (asteroids[i] < 0) {
                System.out.println("Zero");
                while (!s.isEmpty() && s.peek() > 0 && Math.abs(asteroids[i]) > s.peek()) {
                    System.out.println("First");
                    s.pop();
                }
                if (s.isEmpty()) {
                    s.push(asteroids[i]);
                    System.out.println(asteroids[i] + " , " + s.peek() + " ," + i);
                } else if (s.peek() < 0 || Math.abs(asteroids[i]) > s.peek()) {
                    s.push(asteroids[i]);
                } else if (!s.isEmpty() && s.peek() > 0 && Math.abs(asteroids[i]) == s.peek()) {
                    System.out.println("Second");
                    s.pop();
                }
            } else {
                s.push(asteroids[i]);
            }
        }
        List<Integer> list = new ArrayList<>();
        while (!s.isEmpty()) {
            list.add(s.pop());
        }
        int[] arr = new int[list.size()];
        int index = 0;
        for (int i = list.size() - 1; i >= 0; i--) {
            arr[index++] = list.get(i);
        }
        return arr;
    }
}
