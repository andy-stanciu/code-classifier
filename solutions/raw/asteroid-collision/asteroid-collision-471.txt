class Solution {

    public int[] asteroidCollision(int[] asteroids) {
        Stack<Integer> stack = new Stack<>();
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < asteroids.length; i++) {
            // if it\'s positive, push to stack
            if (asteroids[i] > 0)
                stack.push(asteroids[i]);
            else // check collision if it\'s negative
            {
                // pop from stack while it\'s positive and smaller
                while (!stack.empty() && stack.peek() > 0 && stack.peek() < Math.abs(asteroids[i])) {
                    stack.pop();
                }
                // stack is empty and it\'s going on other direction
                if (stack.empty() || stack.peek() < 0)
                    stack.push(asteroids[i]);
                else if (stack.peek() == Math.abs(asteroids[i]))
                    stack.pop();
            }
        }
        int[] remainingAsteroids = new int[stack.size()];
        for (int i = remainingAsteroids.length - 1; i >= 0; i--) {
            remainingAsteroids[i] = stack.peek();
            stack.pop();
        }
        return remainingAsteroids;
    }
}
