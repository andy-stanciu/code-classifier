class Solution {

    public int[] asteroidCollision(int[] asteroids) {
        //n length
        int n = asteroids.length;
        //stack created
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            //traverse
            if (asteroids[i] > 0 || stack.isEmpty()) {
                stack.push(asteroids[i]);
            } else {
                while (!stack.isEmpty() && stack.peek() > 0 && stack.peek() < Math.abs(asteroids[i])) {
                    stack.pop();
                }
                if (!stack.isEmpty() && stack.peek() == Math.abs(asteroids[i])) {
                    stack.pop();
                } else {
                    if (stack.isEmpty() || stack.peek() < 0) {
                        stack.push(asteroids[i]);
                    }
                }
            }
        }
        //create an array
        int[] ans = new int[stack.size()];
        for (int i = stack.size() - 1; i >= 0; i--) {
            //des order
            //add stack elements to array
            ans[i] = stack.pop();
        }
        return ans;
    }
}
