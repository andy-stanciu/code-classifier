class Solution {

    public int[] asteroidCollision(int[] asteroids) {
        int[] result = new int[asteroids.length];
        // Index to track the top of the stack in result array
        int index = -1;
        for (int asteroid : asteroids) {
            if (index == -1 || asteroid > 0 || result[index] < 0) {
                // If result array is empty, or current asteroid is positive,
                // or top of stack is negative, just push the asteroid onto the stack
                result[++index] = asteroid;
            } else {
                // Handle collision with negative asteroid
                while (index >= 0 && result[index] > 0 && result[index] < -asteroid) {
                    // Pop asteroids that are destroyed by current negative asteroid
                    index--;
                }
                if (index >= 0 && result[index] == -asteroid) {
                    // If current negative asteroid destroys asteroid at top of stack
                    index--;
                } else if (index < 0 || result[index] < 0) {
                    // If result array is empty or top of stack is negative,
                    // push current negative asteroid onto the stack
                    result[++index] = asteroid;
                }
            }
        }
        int[] finalResult = new int[index + 1];
        System.arraycopy(result, 0, finalResult, 0, index + 1);
        return finalResult;
    }
}
