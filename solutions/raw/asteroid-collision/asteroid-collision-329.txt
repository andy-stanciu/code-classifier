class Solution {

    public int[] asteroidCollision(int[] asteroids) {
        Stack<Integer> stck = new Stack<Integer>();
        int i;
        for (i = 0; i < asteroids.length; i++) {
            if (stck.isEmpty()) {
                stck.push(asteroids[i]);
            } else {
                // If the current asteroid is -ve and the previous is +ve such that size/magnuitude of current > previous, then keep popping/removing asteroids from the stack until this condition satisfies.
                if (asteroids[i] < 0 && stck.peek() > 0 && Math.abs(asteroids[i]) > stck.peek()) {
                    while (!stck.isEmpty() && asteroids[i] < 0 && stck.peek() > 0 && Math.abs(asteroids[i]) > stck.peek()) {
                        stck.pop();
                    }
                    // If stack is empty, simply push astroids[i]
                    if (stck.isEmpty()) {
                        stck.push(asteroids[i]);
                    } else {
                        // We do i-- because i++ will happen in the next iteration. And before pushing asteroids[i] we should check if the below last else-if condition satisfies or not. If it does, only then we can push asteroids[i] on the stack.
                        i--;
                    }
                } else if (asteroids[i] < 0 && stck.peek() > 0 && Math.abs(asteroids[i]) == stck.peek()) {
                    // If new is -ve and previous +ve and both have same magnitude then pop the previous and don\'t push current, because both will cancel each other.
                    stck.pop();
                } else if (asteroids[i] > 0 || asteroids[i] < 0 && stck.peek() < 0) {
                    // If new asteroid is +ve OR it is -ve as well as previous is -ve then push the current
                    stck.push(asteroids[i]);
                }
            }
        }
        // In the reverse order, get the final asteroids that weren\'t destroyed
        int[] ans = new int[stck.size()];
        int k = stck.size() - 1;
        while (!stck.isEmpty()) {
            ans[k--] = stck.peek();
            stck.pop();
        }
        return ans;
    }
}
