class Solution {

    public int[] asteroidCollision(int[] in) {
        int head = 0;
        stack = in;
        while (head < in.length) {
            if (isEmpty()) {
                push(in[head++]);
            } else {
                if (peek() / Math.abs(peek()) != in[head] / Math.abs(in[head]) && peek() > in[head]) {
                    if (Math.abs(peek()) > Math.abs(in[head])) {
                        head++;
                    } else if (Math.abs(peek()) < Math.abs(in[head])) {
                        pop();
                    } else {
                        head++;
                        pop();
                    }
                } else {
                    push(in[head++]);
                }
            }
        }
        if (offset < 0)
            return new int[] {};
        return Arrays.copyOfRange(stack, 0, offset + 1);
    }

    int[] stack;

    int offset = -1;

    void push(int val) {
        stack[++offset] = val;
    }

    void pop() {
        if (isEmpty()) {
            return;
        }
        offset--;
    }

    int peek() {
        return stack[offset];
    }

    boolean isEmpty() {
        return offset < 0;
    }
}
