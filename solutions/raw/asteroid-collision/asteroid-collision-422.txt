class Solution {

    public int[] asteroidCollision(int[] asteroids) {
        // first we apply stack to solved this problem
        Stack<Integer> st = new Stack<>();
        int n = asteroids.length - 1;
        int i = 0;
        while (i <= n) {
            // using while loop because we modifiead the iteration
            if (asteroids[i] < 0) {
                // if asteroids is less then zero // run in -ve
                if (st.size() == 0 || st.peek() < 0) {
                    // checking in  stack  the peek ()
                    st.push(asteroids[i]);
                    i++;
                } else if (st.peek() == Math.abs(asteroids[i])) {
                    // if this condation is true we can remove the element
                    st.pop();
                    i++;
                } else if (st.peek() > Math.abs(asteroids[i])) {
                    // we can\'t add this into stack directly remove by iteration
                    i++;
                } else if (st.peek() < Math.abs(asteroids[i])) {
                    // here we check in the stack and pop the value one by one
                    st.pop();
                }
            } else {
                // add the postive values run in +ve
                // add in  stack
                st.push(asteroids[i]);
                i++;
            }
        }
        // here we are store the stack value in array and return the ans
        int[] ans = new int[st.size()];
        for (int j = ans.length - 1; j >= 0; j--) {
            ans[j] = st.pop();
        }
        return ans;
    }
}
