class Solution {

    public int[] asteroidCollision(int[] asteroids) {
        Stack<Integer> stk = new Stack<>();
        for (int i = 0; i < asteroids.length; i++) {
            int x = asteroids[i];
            if (stk.isEmpty()) {
                stk.push(x);
            } else {
                if (x >= 0) {
                    stk.push(x);
                } else {
                    if (stk.peek() >= 0 && Math.abs(x) < Math.abs(stk.peek()))
                        continue;
                    else if (stk.peek() >= 0 && Math.abs(x) == Math.abs(stk.peek())) {
                        stk.pop();
                        continue;
                    }
                    while (!stk.isEmpty() && stk.peek() >= 0 && Math.abs(x) > Math.abs(stk.peek())) {
                        stk.pop();
                    }
                    if (!stk.isEmpty() && stk.peek() >= 0 && Math.abs(x) < Math.abs(stk.peek()))
                        continue;
                    if (!stk.isEmpty() && stk.peek() >= 0 && Math.abs(x) == Math.abs(stk.peek())) {
                        stk.pop();
                        continue;
                    }
                    stk.push(x);
                }
            }
        }
        int[] ans = new int[stk.size()];
        int j = 0;
        for (Integer i : stk) {
            ans[j++] = i;
        }
        return ans;
    }
}
