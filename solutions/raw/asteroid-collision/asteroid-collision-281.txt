class Solution {

    public int[] asteroidCollision(int[] asteroids) {
        //[10,2,-5,8]
        //loop through asteroids array
        //if num is positive, add to list
        //if num is negative, loop through list and collide astroids
        //collide asteroids only if they have different signs
        //stop collisions when same sign is encountered
        //repeat for all asteroids
        List<Integer> spaceRocks = new ArrayList<>();
        for (int i = 0; i < asteroids.length; i++) {
            if (asteroids[i] > 0) {
                spaceRocks.add(asteroids[i]);
            } else {
                spaceRocks.add(asteroids[i]);
                collide(spaceRocks);
            }
        }
        int[] result = new int[spaceRocks.size()];
        for (int i = 0; i < spaceRocks.size(); i++) {
            result[i] = spaceRocks.get(i);
        }
        return result;
    }

    private void collide(List<Integer> spaceRocks) {
        //[3,1, -2] -2
        // System.out.println(spaceRocks);
        int i = spaceRocks.size() - 2;
        int asteroid = spaceRocks.get(spaceRocks.size() - 1);
        while (i >= 0) {
            // System.out.println("i: " + i);
            // System.out.println(spaceRocks);
            if (spaceRocks.get(i) < 0)
                break;
            if (spaceRocks.get(i) < Math.abs(asteroid)) {
                //remove smaller but continue with collisions
                spaceRocks.remove(i);
            } else if (spaceRocks.get(i) == Math.abs(asteroid)) {
                //remove both and stop if equal
                spaceRocks.remove(i);
                spaceRocks.remove(spaceRocks.size() - 1);
                break;
            } else {
                //remove smaller one and stop
                spaceRocks.remove(spaceRocks.size() - 1);
                break;
            }
            i = spaceRocks.size() - 2;
        }
    }
}
