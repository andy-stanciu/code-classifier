class Solution {

    public int[] asteroidCollision(int[] asteroids) {
        Stack<Integer> stack = new Stack<>();
        for (int asteroid : asteroids) {
            if (stack.isEmpty() || asteroid > 0) {
                // Positive asteroid or stack is empty, no collision, push to stack
                stack.push(asteroid);
            } else {
                // Negative asteroid, check for collisions with positive asteroids in the stack
                while (!stack.isEmpty() && stack.peek() > 0 && stack.peek() < Math.abs(asteroid)) {
                    // Smaller positive asteroid explodes
                    stack.pop();
                }
                if (stack.isEmpty() || stack.peek() < 0) {
                    // Negative asteroid survives collision or stack is empty
                    stack.push(asteroid);
                } else if (stack.peek() == Math.abs(asteroid)) {
                    // Both asteroids explode
                    stack.pop();
                }
            }
        }
        int[] result = new int[stack.size()];
        for (int i = stack.size() - 1; i >= 0; i--) {
            result[i] = stack.pop();
        }
        return result;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] asteroids1 = { 5, 10, -5 };
        int[] result1 = solution.asteroidCollision(asteroids1);
        // Output: [5, 10]
        System.out.println(Arrays.toString(result1));
        int[] asteroids2 = { 8, -8 };
        int[] result2 = solution.asteroidCollision(asteroids2);
        // Output: []
        System.out.println(Arrays.toString(result2));
        int[] asteroids3 = { 10, 2, -5 };
        int[] result3 = solution.asteroidCollision(asteroids3);
        // Output: [10]
        System.out.println(Arrays.toString(result3));
    }
}
