class Solution {

    public int[] asteroidCollision(int[] asteroids) {
        Stack<Integer> s = new Stack<>();
        s.push(asteroids[0]);
        for (int i = 1; i < asteroids.length; i++) {
            if (s.isEmpty() == true) {
                s.push(asteroids[i]);
                continue;
            }
            while (!s.isEmpty()) {
                if ((s.peek() > 0 && asteroids[i] > 0) || (s.peek() < 0 && asteroids[i] < 0)) {
                    s.push(asteroids[i]);
                    break;
                } else {
                    if (s.peek() < 0 && asteroids[i] > 0) {
                        s.push(asteroids[i]);
                        break;
                    } else if (s.peek() > 0 && asteroids[i] < 0) {
                        if (Math.abs(s.peek()) > Math.abs(asteroids[i])) {
                            break;
                        } else if (Math.abs(s.peek()) < Math.abs(asteroids[i])) {
                            s.pop();
                            if (s.isEmpty() == true) {
                                s.push(asteroids[i]);
                                break;
                            }
                        } else {
                            s.pop();
                            break;
                        }
                    }
                }
            }
        }
        int[] ans = new int[s.size()];
        int size = s.size();
        for (int i = size - 1; i >= 0; i--) {
            ans[i] = s.pop();
        }
        return ans;
    }
}
