class Solution {

    public int[] asteroidCollision(int[] asteroids) {
        Deque<Integer> dq = new LinkedList<>();
        for (int i = 0; i < asteroids.length; i++) {
            if (asteroids[i] > 0) {
                dq.addLast(i);
            } else {
                if (dq.isEmpty()) {
                    dq.addLast(i);
                    continue;
                }
                while (!dq.isEmpty()) {
                    // System.out.println(dq + " " + i);
                    int t1 = asteroids[dq.getLast()];
                    int t2 = Math.abs(asteroids[i]);
                    if (t1 < 0) {
                        dq.addLast(i);
                        break;
                    }
                    if (t1 == t2) {
                        dq.removeLast();
                        break;
                    } else if (t1 < t2) {
                        dq.removeLast();
                        if (dq.isEmpty()) {
                            dq.addLast(i);
                            break;
                        }
                    } else {
                        break;
                    }
                }
            }
        }
        int n = dq.size();
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            ans[i] = asteroids[dq.removeFirst()];
        }
        return ans;
    }
}
