// class Solution {
//     int tar(int[] nums , int target){
//         int peak = pivot(nums);
//         if(peak == -1){
//             return binarysearch(nums , target , 0 , nums.length-1 );
//         }
//         if(nums[peak] == target){
//             return peak;
//         }
//         if(target >= nums[0]){
//             return binarysearch(nums  , target  , 0 , peak-1);
//         }
//         else{
//             return binarysearch(nums , target , peak+1 , nums.length-1 );
//         }
//     }
//     int binarysearch(int[] nums , int target , int start , int end ){
//         while(start <= end){
//             int mid = start + (end - start) /2;
//             if(target<nums[mid]){
//                 end=mid-1;
//             }else if (target>nums[mid]){
//                 start = mid+1;
//             }else{
//                 return mid;
//             }
//         }
//         return -1;
//     }
//     int pivot(int[] nums ){
//         int start = 0 ;
//         int end = nums.length-1;
//         while(start <= end){
//             int mid = start+(end - start)/2;
//             if(mid < end && nums[mid] > nums[mid+1]){
//                 return mid;
//             }
// //            case2
//             if(nums[mid] <nums[mid-1]){
//                 return mid -1;
//             }
//             if(nums[mid] <= nums[start]){
//                 end = mid - 1;
//             }else{
//                 start = mid + 1;
//             }
//         }
//         return -1;
//     }
// }
class Solution {

    public int search(int[] nums, int target) {
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            if (nums[i] == target) {
                return i;
            }
        }
        return -1;
    }
}
