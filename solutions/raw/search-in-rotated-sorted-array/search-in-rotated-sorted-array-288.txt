class Solution {

    public int search(int[] nums, int target) {
        // O(log n): \uBC14\uC774\uB108\uB9AC \uC11C\uCE58 \uC0AC\uC6A9
        int left = 0, right = nums.length - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (nums[mid] == target) {
                return mid;
            }
            // \uC815\uB82C\uB41C \uBC94\uC704 \uAD6C\uBD84
            // left ~ mid\uC758 \uBC94\uC704\uAC00 \uC815\uB82C\uB41C \uC0C1\uD0DC
            if (nums[left] <= nums[mid]) {
                // \uC67C\uCABD \uBC94\uC704\uC5D0 target\uC774 \uC788\uB294\uC9C0 \uD655\uC778
                if (nums[mid] >= target && nums[left] <= target) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            } else // mid ~ right\uC758 \uBC94\uC704\uAC00 \uC815\uB82C\uB41C \uC0C1\uD0DC
            if (nums[right] >= nums[mid]) {
                if (nums[mid] <= target && nums[right] >= target) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }
        return -1;
    }
}
