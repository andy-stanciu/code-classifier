class Solution {

    public int binSearchRotated(int[] nums, int l, int r, int target) {
        // 10
        // 1 2 3 4 5 6 7 8 9 10
        // Sorted Array
        // 5 6 7 8 9 10 1 2 3 4
        // Sorted, then Rotated Array
        while (l <= r) {
            int mid = l + (r - l) / 2;
            // System.out.println(l+", "+r);
            if (nums[mid] == target)
                return mid;
            if (l == r) {
                // System.out.println(l);
                return -1;
            }
            if (l == mid || nums[l] < nums[mid]) {
                // 5 6 7 8 9 10 1 2 3 4
                // 0 1 2 3 4 5  6 7 8 9
                // l     m      r
                //       l  m   r
                //          l m r
                if (nums[l] <= target && target < nums[mid])
                    r = mid - 1;
                else
                    l = mid + 1;
            } else if (mid == r || nums[mid] < nums[r]) {
                // 5 6 7 8 9 10 1 2 3 4
                // 0 1 2 3 4 5  6 7 8 9
                //           l  m r
                //       l  m   r
                //          l m r
                if (nums[mid] < target && target <= nums[r])
                    l = mid + 1;
                else
                    r = mid - 1;
            }
        }
        return -1;
    }

    public int search(int[] nums, int target) {
        return binSearchRotated(nums, 0, nums.length - 1, target);
    }
}
