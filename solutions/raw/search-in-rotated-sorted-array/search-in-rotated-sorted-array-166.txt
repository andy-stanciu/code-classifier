class Solution {

    int pivot = 0;

    int want = 0;

    public int search(int[] nums, int target) {
        want = target;
        findpivot(nums, 0, nums.length - 1);
        int res = binary(nums, 0, pivot - 1);
        if (res != -1) {
            return res;
        }
        res = binary(nums, pivot, nums.length - 1);
        return res;
    }

    public int binary(int[] nums, int start, int end) {
        int mid = 0;
        while (start <= end) {
            mid = ((end - start) / 2) + start;
            if (nums[mid] == want) {
                return mid;
            }
            if (nums[mid] > want) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return -1;
    }

    public void findpivot(int[] nums, int start, int end) {
        if (start >= end) {
            return;
        }
        int mid = ((end - start) / 2) + start;
        if (mid + 1 < nums.length && nums[mid] > nums[mid + 1]) {
            pivot = mid + 1;
            return;
        }
        findpivot(nums, mid + 1, end);
        findpivot(nums, start, mid);
    }
}
