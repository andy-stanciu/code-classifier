class Solution {

    public int search(int[] arr, int target) {
        // Edge case: empty array
        if (arr == null || arr.length == 0) {
            return -1;
        }
        int pivotIndex = findPivot(arr);
        // If no pivot found, perform binary search on the entire array
        if (pivotIndex == -1) {
            return binarySearch(arr, target, 0, arr.length - 1);
        }
        // If the target is the pivot element
        if (arr[pivotIndex] == target) {
            return pivotIndex;
        }
        // Determine which side to search
        if (target >= arr[0]) {
            return binarySearch(arr, target, 0, pivotIndex - 1);
        } else {
            return binarySearch(arr, target, pivotIndex + 1, arr.length - 1);
        }
    }

    // Method to find the pivot index
    public int findPivot(int[] arr) {
        int start = 0;
        int end = arr.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            // Check if mid is the pivot
            if (mid < end && arr[mid] > arr[mid + 1]) {
                return mid;
            }
            if (mid > start && arr[mid] < arr[mid - 1]) {
                return mid - 1;
            }
            // Decide which side to continue searching
            if (arr[start] >= arr[mid]) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        // No pivot found
        return -1;
    }

    // Standard binary search method
    public int binarySearch(int[] arr, int target, int start, int end) {
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (target < arr[mid]) {
                end = mid - 1;
            } else if (target > arr[mid]) {
                start = mid + 1;
            } else {
                // Return the index of the found target
                return mid;
            }
        }
        // Target not found
        return -1;
    }
}
