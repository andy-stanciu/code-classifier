class Solution {

    private int bin_search(int target, int[] nums, int l, int r) {
        int mid;
        while (l <= r) {
            mid = (l + r) / 2;
            if (nums[mid] > target)
                r = mid - 1;
            else if (nums[mid] < target)
                l = mid + 1;
            else
                return mid;
        }
        return -1;
    }

    private int find_highest(int[] nums) {
        int n = nums.length;
        int l = 1, r = n - 1, mid;
        int ans = 0;
        while (l <= r) {
            mid = (l + r) / 2;
            if (nums[mid] >= nums[0]) {
                l = mid + 1;
                ans = mid;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }

    public int search(int[] nums, int target) {
        int n = nums.length;
        int high = find_highest(nums);
        System.out.println(high);
        int id = bin_search(target, nums, 0, high);
        if (id == -1) {
            id = bin_search(target, nums, high + 1, n - 1);
            if (id == -1)
                return -1;
        }
        return id;
    }
}
