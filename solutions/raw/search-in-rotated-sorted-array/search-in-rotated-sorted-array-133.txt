class Solution {

    int search(int[] A, int l, int h, int key) {
        // l: The starting index
        // h: The ending index, you have to search the key in this range
        // Complete this function
        l = 0;
        h = A.length - 1;
        while (l <= h) {
            int mid = (l + h) / 2;
            if (A[mid] == key) {
                return mid;
            }
            //search for the sorted parts
            //1. if lo to mid is sorted
            if (A[l] <= A[mid]) {
                //check if the key/target lies in the sorted range(lo to mid)
                if (key >= A[l] && key < A[mid]) {
                    // we check key < mid ele because if we have mid ele as key we already returned
                    h = mid - 1;
                } else {
                    l = mid + 1;
                }
            }
            //2. if mid to high is sorted
            if (A[mid] <= A[h]) {
                //check if key/target lies in the sorted range of mid to high.
                if (key > A[mid] && key <= A[h]) {
                    l = mid + 1;
                } else {
                    h = mid - 1;
                }
            }
        }
        return -1;
    }
}
