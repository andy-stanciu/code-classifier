class Solution {

    public int findsSortedAsc(int[] a, int v, int s, int e) {
        while (s <= e && s >= 0 && e < a.length) {
            int mid = (s + e) / 2;
            if (a[mid] == v)
                return mid;
            else if (a[mid] > v) {
                e = mid - 1;
            } else
                s = mid + 1;
        }
        return -1;
    }

    public int finds(int[] a, int v, int s, int e) {
        if (s > e)
            return -1;
        int index;
        int mid = (s + e) / 2;
        if (a[mid] == v) {
            index = mid;
            return mid;
        }
        if (a[e] > a[mid] && v > a[mid] && v <= a[e])
            return findsSortedAsc(a, v, mid + 1, e);
        if (a[e] > a[mid] && v > a[e])
            return finds(a, v, s, mid - 1);
        if (a[s] < a[mid] && v >= a[s] && v < a[mid])
            return findsSortedAsc(a, v, s, mid - 1);
        if (a[s] < a[mid] && v < a[s])
            return finds(a, v, mid + 1, e);
        int a1 = finds(a, v, s, mid - 1);
        if (a1 != -1)
            return a1;
        int a2 = finds(a, v, mid + 1, e);
        if (a2 != -1)
            return a2;
        return -1;
    }

    public int search(int[] nums, int target) {
        return finds(nums, target, 0, nums.length - 1);
    }
}
