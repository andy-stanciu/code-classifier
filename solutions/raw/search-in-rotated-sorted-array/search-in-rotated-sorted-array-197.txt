class Solution {

    static int search(int[] nums, int target) {
        int pivot = findPivot(nums);
        // if you did not find the pivot then array is not rotatated
        if (pivot == -1) {
            // just return binary search
            return binarySearch(nums, target, 0, nums.length - 1);
        }
        // if pivot is forund then you have found two ascending arrays
        if (nums[pivot] == target) {
            return pivot;
        }
        //
        if (target >= nums[0]) {
            return binarySearch(nums, target, 0, pivot - 1);
        }
        return binarySearch(nums, target, pivot + 1, nums.length - 1);
    }

    static int binarySearch(int[] arr1, int target, int start, int end) {
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (target < arr1[mid]) {
                end = mid - 1;
            } else if (target > arr1[mid]) {
                start = mid + 1;
            } else {
                return mid;
            }
        }
        return -1;
    }

    static int findPivot(int[] arr) {
        int start = 0;
        int end = arr.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            // case 1
            if (mid < end && arr[mid] > arr[mid + 1]) {
                return mid;
            }
            // case 2
            if (mid > start && arr[mid] < arr[mid - 1]) {
                return mid - 1;
            }
            //case 3
            if (arr[mid] <= arr[start]) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return -1;
    }
}
