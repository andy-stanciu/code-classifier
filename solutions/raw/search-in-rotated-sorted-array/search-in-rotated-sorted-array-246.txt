class Solution {

    public int search(int[] nums, int target) {
        int start = 0;
        int end = nums.length - 1;
        while (start <= end) {
            // Calculate mid to avoid overflow
            int mid = start + (end - start) / 2;
            // Check if the mid element is the target
            if (nums[mid] == target) {
                return mid;
            }
            // Determine which half is sorted
            if (nums[start] <= nums[mid]) {
                // Left half is sorted
                if (nums[start] <= target && target < nums[mid]) {
                    // Target is in the left half
                    end = mid - 1;
                } else {
                    // Target is in the right half
                    start = mid + 1;
                }
            } else {
                // Right half is sorted
                if (nums[mid] < target && target <= nums[end]) {
                    // Target is in the right half
                    start = mid + 1;
                } else {
                    // Target is in the left half
                    end = mid - 1;
                }
            }
        }
        // Target not found
        return -1;
    }
}
