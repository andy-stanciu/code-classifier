class Solution {

    public int search(int[] nums, int target) {
        return binarySearch(nums, target, 0, nums.length - 1);
    }

    public static int binarySearch(int[] nums, int target, int s, int e) {
        if (s > e) {
            return -1;
        }
        int mid = s + (e - s) / 2;
        if (nums[mid] == target) {
            return mid;
        }
        if (nums[s] <= nums[mid]) {
            if ((nums[s] <= target && target <= nums[mid])) {
                return binarySearch(nums, target, s, mid - 1);
            } else {
                return binarySearch(nums, target, mid + 1, e);
            }
        } else {
            if ((nums[mid] <= target && target <= nums[e])) {
                return binarySearch(nums, target, mid + 1, e);
            } else {
                return binarySearch(nums, target, s, mid - 1);
            }
        }
    }
}
//Important : consider all the 4 cases in order to find the pivot
