class Solution {

    int getPivotElement(int[] nums, int left, int right) {
        if (nums.length == 1) {
            return 0;
        }
        if (nums[right] > nums[0]) {
            return 0;
        }
        while (right >= left) {
            int mid = left + (right - left) / 2;
            if (nums[mid] > nums[mid + 1]) {
                return mid + 1;
            }
            if (nums[mid - 1] > nums[mid]) {
                return mid;
            }
            if (nums[mid] > nums[0]) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return Integer.MAX_VALUE;
    }

    int binarySearch(int begin, int end, int[] nums, int target) {
        int mid = 0;
        while (begin <= end) {
            mid = (begin + end) / 2;
            if (target == nums[mid])
                return mid;
            else if (target > nums[mid])
                begin = mid + 1;
            else
                end = mid - 1;
        }
        return -1;
    }

    public int search(int[] nums, int target) {
        int p = getPivotElement(nums, 0, nums.length - 1);
        int l = binarySearch(0, p - 1, nums, target);
        int h = binarySearch(p, nums.length - 1, nums, target);
        return (l != -1) ? l : h;
    }
}
