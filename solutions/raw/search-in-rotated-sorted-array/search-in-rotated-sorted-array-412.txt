class Solution {

    public int search(int[] nums, int target) {
        //find the minVal index
        int minIndex = findMinIndex(nums);
        int n = nums.length;
        int left;
        int right;
        // divide the array based on target value
        if (target > nums[n - 1]) {
            left = 0;
            right = minIndex - 1;
        } else {
            left = minIndex;
            right = n - 1;
        }
        // Binary Search in the divided array;
        while (right >= left) {
            int mid = (left + right) / 2;
            if (nums[mid] == target) {
                return mid;
            }
            if (nums[mid] > target) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return -1;
    }

    // funtion to find the minValue index
    public int findMinIndex(int[] nums) {
        int left = 0;
        int right = nums.length - 1;
        int minIndex;
        int minVal;
        if (nums[left] > nums[right]) {
            minVal = nums[right];
            minIndex = right;
        } else {
            minVal = nums[left];
            minIndex = left;
        }
        while (right >= left) {
            int mid = (left + right) / 2;
            if (minVal > nums[mid]) {
                minVal = nums[mid];
                minIndex = mid;
            }
            if (nums[mid] > nums[right]) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return minIndex;
    }
}
