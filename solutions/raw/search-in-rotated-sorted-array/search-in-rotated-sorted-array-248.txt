class Solution {

    public int bst(int start, int end, int[] nums, int target) {
        if (start > end) {
            // Base case: target not found
            return -1;
        }
        int mid = start + (end - start) / 2;
        if (nums[mid] == target) {
            return mid;
        }
        // Check if the left half is sorted
        if (nums[start] <= nums[mid]) {
            if (nums[start] <= target && target < nums[mid]) {
                // Search in the left half
                return bst(start, mid - 1, nums, target);
            } else {
                // Search in the right half
                return bst(mid + 1, end, nums, target);
            }
        } else // Right half is sorted
        {
            if (nums[mid] < target && target <= nums[end]) {
                // Search in the right half
                return bst(mid + 1, end, nums, target);
            } else {
                // Search in the left half
                return bst(start, mid - 1, nums, target);
            }
        }
    }

    public int search(int[] nums, int target) {
        return bst(0, nums.length - 1, nums, target);
    }
}
