class Solution {

    public int search(int[] nums, int target) {
        int pivot = 0, isPresent = -1;
        if (nums.length == 1) {
            if (target == nums[0])
                return 0;
            else
                return isPresent;
        }
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < nums[i - 1]) {
                pivot = i - 1;
                break;
            }
        }
        if (target <= nums[pivot] && target >= nums[0]) {
            isPresent = binarySearch(nums, 0, pivot, target);
        } else {
            isPresent = binarySearch(nums, pivot + 1, nums.length - 1, target);
        }
        return isPresent;
    }

    public int binarySearch(int[] nums, int st, int end, int target) {
        while (st <= end) {
            int mid = st + (end - st) / 2;
            if (target == nums[mid])
                return mid;
            else if (target < nums[mid]) {
                end = mid - 1;
            } else {
                st = mid + 1;
            }
        }
        return -1;
    }
}
