class Solution {

    public int search(int[] nums, int target) {
        // Initialize starting index
        int start = 0;
        // Initialize ending index
        int end = nums.length - 1;
        while (start <= end) {
            // Continue while the search range is valid
            // Calculate mid-point
            int mid = (start + end) / 2;
            // Check if mid element is the target
            if (nums[mid] == target)
                return mid;
            if (nums[start] <= nums[mid]) {
                // Check if left half is sorted
                if (// Target in left half
                target >= nums[start] && target < nums[mid])
                    // Target in left half
                    end = mid - 1;
                else
                    // Target in right half
                    start = mid + 1;
            } else {
                // Right half must be sorted
                if (// Target in right half
                target <= nums[end] && target > nums[mid])
                    // Target in right half
                    start = mid + 1;
                else
                    // Target in left half
                    end = mid - 1;
            }
        }
        // Return -1 if target is not found
        return -1;
    }
}
