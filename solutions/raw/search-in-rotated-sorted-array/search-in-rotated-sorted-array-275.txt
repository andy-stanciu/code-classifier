class Solution {

    public int search(int[] nums, int target) {
        int low = 0;
        int high = nums.length - 1;
        int pivot = -1;
        while (low <= high) {
            int check = low + (high - low) / 2;
            if (nums[low] > nums[check]) {
                high = check;
            } else if (nums[high] < nums[check]) {
                low = check + 1;
            } else {
                pivot = low;
                break;
            }
        }
        if (pivot == -1) {
            pivot = low;
        }
        if (pivot > 0 && nums[0] <= target && target <= nums[pivot - 1]) {
            int min = 0;
            int max = pivot - 1;
            while (min <= max) {
                int mid = min + (max - min) / 2;
                if (nums[mid] < target) {
                    min = mid + 1;
                } else if (nums[mid] > target) {
                    max = mid - 1;
                } else {
                    return mid;
                }
            }
        } else if (pivot < nums.length && nums[pivot] <= target && target <= nums[nums.length - 1]) {
            int min = pivot;
            int max = nums.length - 1;
            while (min <= max) {
                int mid = min + (max - min) / 2;
                if (nums[mid] < target) {
                    min = mid + 1;
                } else if (nums[mid] > target) {
                    max = mid - 1;
                } else {
                    return mid;
                }
            }
        }
        return -1;
    }
}
