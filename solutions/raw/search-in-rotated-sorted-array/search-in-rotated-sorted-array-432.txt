class Solution {

    //index of pivot
    int pivot = 0;

    //index of target
    int tarIdx = -1;

    public int search(int[] nums, int target) {
        if (nums.length == 1) {
            if (nums[0] == target) {
                return 0;
            } else {
                return -1;
            }
        }
        findPivot(nums, 0, nums.length - 1);
        //System.out.println("pivot:" + pivot);
        if (pivot == 0) {
            //is fully ascended
            findTarget(nums, 0, nums.length - 1, target);
        } else {
            if (nums[0] <= target && target <= nums[pivot - 1]) {
                findTarget(nums, 0, pivot - 1, target);
            } else {
                findTarget(nums, pivot, nums.length - 1, target);
            }
        }
        return tarIdx;
    }

    public void findTarget(int[] nums, int start, int end, int target) {
        if (start > end)
            return;
        int mid = (start + end) / 2;
        if (nums[mid] == target) {
            tarIdx = mid;
            return;
        }
        if (target < nums[mid]) {
            findTarget(nums, start, mid - 1, target);
        } else {
            findTarget(nums, mid + 1, end, target);
        }
    }

    public void findPivot(int[] nums, int start, int end) {
        if (start >= end)
            return;
        if (end - start == 1) {
            if (nums[start] > nums[end]) {
                pivot = end;
                return;
            } else {
                return;
            }
        }
        if (nums[start] > nums[(start + end) / 2]) {
            findPivot(nums, start, (start + end) / 2);
        } else {
            findPivot(nums, (start + end) / 2, end);
        }
    }
}
