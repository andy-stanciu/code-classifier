class Solution {

    public int search(int[] nums, int target) {
        int pivot = findPivot(nums);
        if (pivot == -1) {
            return binary(nums, target, 0, nums.length - 1);
        }
        int ans = binary(nums, target, 0, pivot);
        if (ans == -1) {
            int ans1 = binary(nums, target, pivot + 1, nums.length - 1);
            return ans1;
        }
        return ans;
    }

    static int findPivot(int[] a) {
        int start = 0, end = a.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (mid < end && a[mid] > a[mid + 1]) {
                return mid;
            } else if (mid > start && a[mid - 1] > a[mid]) {
                return mid - 1;
            } else if (a[start] >= a[mid]) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return -1;
    }

    static int binary(int[] nums, int x, int start, int end) {
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] == x) {
                return mid;
            } else if (nums[mid] < x) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return -1;
    }
}
