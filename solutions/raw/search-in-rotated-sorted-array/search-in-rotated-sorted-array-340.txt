class Solution {

    int binarySearch(int low, int high, int[] a, int target) {
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (a[mid] == target) {
                return mid;
            } else if (a[mid] > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return -1;
    }

    int findPivot(int low, int high, int[] a) {
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (a[mid] > a[mid + 1]) {
                return mid;
            }
            if (a[mid] >= a[low]) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return high;
    }

    public int search(int[] nums, int target) {
        int n = nums.length;
        int pivot = n - 1;
        if (nums[0] > nums[n - 1]) {
            pivot = findPivot(0, n - 1, nums);
        }
        if (target >= nums[0]) {
            return binarySearch(0, pivot, nums, target);
        } else {
            return binarySearch(pivot + 1, n - 1, nums, target);
        }
    }
}
