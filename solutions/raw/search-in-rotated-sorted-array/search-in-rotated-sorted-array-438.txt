class Solution {

    public int search(int[] nums, int target) {
        int ans = pivot(nums);
        if (ans == -1) {
            return binary(nums, target, 0, nums.length - 1);
        }
        if (nums[ans] == target)
            return ans;
        if (target >= nums[0]) {
            return binary(nums, target, 0, ans - 1);
        }
        return binary(nums, target, ans + 1, nums.length - 1);
    }

    static int binary(int[] arr, int target, int s, int e) {
        while (s <= e) {
            int mid = s + (e - s) / 2;
            if (target < arr[mid]) {
                e = mid - 1;
            } else if (target > arr[mid]) {
                s = mid + 1;
            } else {
                return mid;
            }
        }
        return -1;
    }

    static int pivot(int[] nums) {
        int s = 0;
        int e = nums.length - 1;
        while (s <= e) {
            int mid = s + (e - s) / 2;
            if (mid < e && nums[mid] > nums[mid + 1]) {
                return mid;
            } else if (mid > s && nums[mid] < nums[mid - 1]) {
                return mid - 1;
            } else if (nums[s] >= nums[mid])
                e = mid - 1;
            else
                s = mid + 1;
        }
        return -1;
    }
}
