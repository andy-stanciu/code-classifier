class Solution {

    public int climbStairs(int n) {
        // Create a dp array to store the number of ways for each step
        int[] dp = new int[n + 1];
        // Initialize all values to -1 (uncomputed state)
        Arrays.fill(dp, -1);
        // Call the helper function
        return climbStairsHelper(n, dp);
    }

    public int climbStairsHelper(int n, int[] dp) {
        // Base cases: If we have only 1 or 2 steps, we return the number of ways directly
        if (n == 1 || n == 2) {
            return n;
        }
        // If the result for this step is already computed, return it
        if (dp[n] != -1) {
            return dp[n];
        }
        // Recursively calculate the number of ways for n-1 and n-2 steps
        int x = climbStairsHelper(n - 1, dp);
        int y = climbStairsHelper(n - 2, dp);
        // Store the result in dp array
        dp[n] = x + y;
        // Return the total number of ways to reach the n-th step
        return x + y;
    }
}
