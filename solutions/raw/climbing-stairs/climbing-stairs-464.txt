class Solution {

    public int climbStairs(int n) {
        int[] dp = new int[n + 1];
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            if (i == 1)
                dp[i] = dp[i - 1];
            else {
                dp[i] = dp[i - 1] + dp[i - 2];
            }
        }
        return dp[n];
    }
    // public int climbStairs(int n){
    //     int a = memoization(n , new int[n+1]);
    //     return a;
    // }
    // public static int memoization(int n , int[] dp){
    //     if(n < 0){
    //         return 0;
    //     }
    //     if(n == 0) return 1;
    //     if(dp[n] != 0) return dp[n];
    //     int res1 = memoization(n-1 , dp);
    //     int res2 = memoization(n-2 , dp);
    //     return res1+res2;
    // }
}
