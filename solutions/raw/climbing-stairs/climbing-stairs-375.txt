class Solution {

    public int climbStairs(int n) {
        int[] array = { 1, 2 };
        Map<Integer, Integer> dp = new HashMap<>();
        return recurr(n, array, n, dp);
    }

    private int recurr(int n, int[] array, int remainingSum, Map<Integer, Integer> dp) {
        if (remainingSum == 0) {
            return 1;
        } else if (remainingSum < 0) {
            return 0;
        }
        int times = 0;
        for (int i = 0; i < array.length; i++) {
            if (!dp.containsKey(remainingSum - array[i])) {
                times += recurr(n, array, remainingSum - array[i], dp);
            } else {
                times += dp.get(remainingSum - array[i]);
            }
        }
        dp.put(remainingSum, times);
        return times;
    }
}
