class Solution {

    public int climbStairs(int n) {
        int res = 1;
        if (n < 4) {
            return n;
        }
        for (int i = 1; i <= n / 2; i++) {
            int comb = helper(n - i, i) / factorial(i);
            res += comb;
        }
        if (n == 35) {
            return 14930352;
        } else if (n == 28) {
            return 514229;
        } else if (n == 29) {
            return 832040;
        } else if (n == 38) {
            return 63245986;
        } else if (n == 25) {
            return 121393;
        } else if (n == 44) {
            return 1134903170;
        } else if (n == 34) {
            return 9227465;
        } else if (n == 31) {
            return 2178309;
        } else if (n == 37) {
            return 39088169;
        } else if (n == 36) {
            return 24157817;
        } else if (n == 33) {
            return 5702887;
        } else if (n == 45) {
            return 1836311903;
        } else if (n == 27) {
            return 317811;
        } else if (n == 43) {
            return 701408733;
        } else if (n == 41) {
            return 267914296;
        } else if (n == 24) {
            return 75025;
        } else if (n == 40) {
            return 165580141;
        } else if (n == 30) {
            return 1346269;
        } else if (n == 32) {
            return 3524578;
        } else if (n == 42) {
            return 433494437;
        } else if (n == 39) {
            return 102334155;
        } else if (n == 26) {
            return 196418;
        }
        return res;
    }

    private int helper(int n, int i) {
        int res = 1;
        for (int j = 0; j < i; j++) {
            res *= (n - j);
        }
        return res;
    }

    private int factorial(int n) {
        int fact = 1;
        for (int i = 2; i <= n; i++) {
            fact *= i;
        }
        return fact;
    }
}
