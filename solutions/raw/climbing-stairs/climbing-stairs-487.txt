class Solution {

    public void climb(int i, int n, int[] count) {
        if (i == 0) {
            count[0]++;
            return;
        }
        if (i == 1) {
            //climb(i-1,n,count); return ;
            count[0]++;
            return;
        }
        climb(i - 2, n, count);
        climb(i - 1, n, count);
    }

    public int dpclimb(int n, int[] dp) {
        if (n == 0) {
            return 1;
        }
        if (n == 1) {
            return 1;
        }
        if (dp[n] != -1) {
            return dp[n];
        }
        return dp[n] = dpclimb(n - 1, dp) + dpclimb(n - 2, dp);
    }

    public int climbStairs(int n) {
        int[] count = new int[1];
        count[0] = 0;
        int[] dp = new int[n + 1];
        for (int i = 0; i < dp.length; i++) {
            dp[i] = -1;
        }
        //climb(n,n,count);
        return dpclimb(n, dp);
        //return count[0];
    }
}
