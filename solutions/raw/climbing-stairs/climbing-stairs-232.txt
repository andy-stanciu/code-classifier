class Solution {

    public int climbStairs(int n) {
        /* Since we can go either 1 or 2 steps
        // for each step there are 2 ways of going forward
        // so we can go to i\'th step either take 2 steps form (i-2)\'th step 
        // or take 1 step from (i-1)\'th step so if we add total number of ways 
        // to get to (i-1)th step and (i-2)th step we are good.
        // so F(i) = F(i-1)+F(i-2);
        */
        int[] dp = new int[Math.max(n + 1, 3)];
        dp[1] = 1;
        dp[2] = 2;
        for (int i = 3; i <= n; ++i) dp[i] = dp[i - 1] + dp[i - 2];
        return dp[n];
    }
}
