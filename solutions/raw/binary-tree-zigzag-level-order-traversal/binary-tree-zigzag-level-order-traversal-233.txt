/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> levelorderlist = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        if (root == null) {
            return levelorderlist;
        }
        queue.add(root);
        boolean reverse = false;
        while (!queue.isEmpty()) {
            int queuesize = queue.size();
            List<Integer> sublist = new ArrayList<>();
            for (int i = 0; i < queuesize; i++) {
                if (queue.peek().left != null) {
                    queue.add(queue.peek().left);
                }
                if (queue.peek().right != null) {
                    queue.add(queue.peek().right);
                }
                TreeNode node = queue.remove();
                sublist.add(node.val);
            }
            if (reverse == false) {
                levelorderlist.add(sublist);
                reverse = !reverse;
            } else {
                Collections.reverse(sublist);
                levelorderlist.add(sublist);
                reverse = !reverse;
            }
        }
        return levelorderlist;
    }
}
