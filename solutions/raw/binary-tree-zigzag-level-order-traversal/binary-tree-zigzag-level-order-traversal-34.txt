/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<>();
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        int lvl = 0;
        if (root != null) {
            List<Integer> level = new ArrayList<Integer>();
            level.add(root.val);
            list.add(level);
            queue.add(root);
            while (!queue.isEmpty()) {
                level = new ArrayList<Integer>();
                int Qlength = queue.size();
                for (int i = 0; i < Qlength; i++) {
                    TreeNode current = queue.remove();
                    if (current.left != null) {
                        level.add(current.left.val);
                        queue.add(current.left);
                    }
                    if (current.right != null) {
                        level.add(current.right.val);
                        queue.add(current.right);
                    }
                }
                if (!level.isEmpty()) {
                    if (lvl % 2 == 0)
                        Collections.reverse(level);
                    list.add(level);
                    lvl++;
                }
            }
        }
        return list;
    }
}
