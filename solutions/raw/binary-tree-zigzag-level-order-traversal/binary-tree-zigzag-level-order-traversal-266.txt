/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> zigzag = new ArrayList<>();
        if (root == null) {
            return zigzag;
        }
        Deque<TreeNode> dq = new LinkedList<>();
        dq.add(root);
        boolean flag = true;
        while (!dq.isEmpty()) {
            int n = dq.size();
            List<Integer> level = new ArrayList<>();
            if (flag) {
                for (int i = 0; i < n; i++) {
                    TreeNode curr = dq.pollFirst();
                    if (curr.left != null) {
                        dq.addLast(curr.left);
                    }
                    if (curr.right != null) {
                        dq.addLast(curr.right);
                    }
                    level.add(curr.val);
                }
            } else {
                for (int i = 0; i < n; i++) {
                    TreeNode curr = dq.pollLast();
                    if (curr.right != null) {
                        dq.addFirst(curr.right);
                    }
                    if (curr.left != null) {
                        dq.addFirst(curr.left);
                    }
                    level.add(curr.val);
                }
            }
            zigzag.add(level);
            flag = !flag;
        }
        return zigzag;
    }
}
