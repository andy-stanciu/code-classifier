/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if (root == null)
            return new ArrayList<>();
        List<List<Integer>> I = new ArrayList<>();
        Deque<TreeNode> d = new ArrayDeque<>(Arrays.asList(root));
        Boolean isLtor = true;
        while (!d.isEmpty()) {
            List<Integer> currentlevel = new ArrayList<>();
            for (int s = d.size(); s > 0; --s) if (isLtor) {
                TreeNode node = d.pollFirst();
                currentlevel.add(node.val);
                if (node.left != null)
                    d.addLast(node.left);
                if (node.right != null)
                    d.addLast(node.right);
            } else {
                TreeNode node = d.pollLast();
                currentlevel.add(node.val);
                if (node.right != null)
                    d.addFirst(node.right);
                if (node.left != null)
                    d.addFirst(node.left);
            }
            I.add(currentlevel);
            isLtor = !isLtor;
        }
        return I;
    }
}
