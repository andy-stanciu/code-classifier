/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<List<Integer>> ans = new ArrayList<>();

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if (root == null)
            return new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        boolean LeftToRight = true;
        while (!q.isEmpty()) {
            int size = q.size();
            List<Integer> list = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                TreeNode removeEle = q.remove();
                if (LeftToRight) {
                    list.add(removeEle.val);
                } else {
                    list.add(0, removeEle.val);
                }
                if (removeEle.left != null) {
                    q.add(removeEle.left);
                }
                if (removeEle.right != null) {
                    q.add(removeEle.right);
                }
            }
            ans.add(list);
            LeftToRight = !LeftToRight;
        }
        return ans;
    }
}
