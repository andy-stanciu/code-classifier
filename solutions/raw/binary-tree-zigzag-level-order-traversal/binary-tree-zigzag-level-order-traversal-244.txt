/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        return levelOrder(root);
    }

    List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) {
            return res;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        boolean leftToRight = true;
        queue.add(root);
        while (!queue.isEmpty()) {
            int len = queue.size();
            List<Integer> li = new ArrayList<>();
            // To reverse order for zigzag
            Stack<Integer> stack = new Stack<>();
            for (int i = 0; i < len; i++) {
                TreeNode node = queue.remove();
                if (leftToRight) {
                    li.add(node.val);
                } else {
                    // Add to stack if zigzag is false
                    stack.push(node.val);
                }
                if (node.left != null) {
                    queue.add(node.left);
                }
                if (node.right != null) {
                    queue.add(node.right);
                }
            }
            // Add elements to li from stack if not left to right
            if (!leftToRight) {
                while (!stack.isEmpty()) {
                    li.add(stack.pop());
                }
            }
            res.add(li);
            // Toggle direction
            leftToRight = !leftToRight;
        }
        return res;
    }
}
