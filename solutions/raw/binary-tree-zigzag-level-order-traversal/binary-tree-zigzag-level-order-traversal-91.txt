/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        if (root == null)
            return list;
        Deque<TreeNode> deque = new LinkedList<>();
        deque.offerFirst(root);
        boolean reverse = false;
        while (!deque.isEmpty()) {
            int levelSize = deque.size();
            List<Integer> smallList = new ArrayList<>();
            for (int i = 0; i < levelSize; i++) {
                if (!reverse) {
                    TreeNode curNode = deque.pollFirst();
                    smallList.add(curNode.val);
                    if (curNode.left != null) {
                        deque.offerLast(curNode.left);
                    }
                    if (curNode.right != null) {
                        deque.offerLast(curNode.right);
                    }
                } else {
                    TreeNode curNode = deque.pollLast();
                    smallList.add(curNode.val);
                    if (curNode.right != null) {
                        deque.offerFirst(curNode.right);
                    }
                    if (curNode.left != null) {
                        deque.offerFirst(curNode.left);
                    }
                }
            }
            reverse = !reverse;
            list.add(smallList);
        }
        return list;
    }
}
