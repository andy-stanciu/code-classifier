/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null) {
            return ans;
        }
        Deque<TreeNode> q1 = new LinkedList<>();
        boolean zig = false;
        q1.offer(root);
        while (!q1.isEmpty()) {
            int size = q1.size();
            List<Integer> l1 = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                if (!zig) {
                    TreeNode curr = q1.pollFirst();
                    if (curr.left != null) {
                        q1.addLast(curr.left);
                    }
                    if (curr.right != null) {
                        q1.addLast(curr.right);
                    }
                    l1.add(curr.val);
                } else {
                    TreeNode curr = q1.pollLast();
                    if (curr.right != null) {
                        q1.addFirst(curr.right);
                    }
                    if (curr.left != null) {
                        q1.addFirst(curr.left);
                    }
                    l1.add(curr.val);
                }
            }
            zig = !zig;
            ans.add(new ArrayList<>(l1));
        }
        return ans;
    }
}
