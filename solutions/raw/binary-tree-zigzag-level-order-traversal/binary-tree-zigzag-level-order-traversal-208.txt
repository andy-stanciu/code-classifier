class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null)
            return result;
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        boolean flag = false;
        while (!q.isEmpty()) {
            int levelSize = q.size();
            Stack<Integer> revStack = new Stack<>();
            List<Integer> level = new ArrayList<>();
            for (int i = 0; i < levelSize; i++) {
                TreeNode curr = q.poll();
                if (flag) {
                    //for reverse order levels add in stack
                    revStack.push(curr.val);
                } else {
                    //for normal order levels add in list
                    level.add(curr.val);
                }
                if (curr.left != null)
                    q.offer(curr.left);
                if (curr.right != null)
                    q.offer(curr.right);
            }
            flag = !flag;
            while (!revStack.isEmpty()) {
                //add the elements of stack to the list
                level.add(revStack.pop());
            }
            result.add(level);
        }
        return result;
    }
}
