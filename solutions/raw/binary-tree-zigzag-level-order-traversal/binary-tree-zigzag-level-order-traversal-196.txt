/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if (root == null)
            return new ArrayList<>();
        List<List<Integer>> finalList = new ArrayList<>();
        levelOrderTraversal(root, finalList, 0);
        return finalList;
    }

    public void levelOrderTraversal(TreeNode node, List<List<Integer>> finalList, int level) {
        if (node == null)
            return;
        if (finalList.size() <= level) {
            LinkedList<Integer> list = new LinkedList<>();
            if (level % 2 == 0)
                list.addLast(node.val);
            else
                list.addFirst(node.val);
            finalList.add(list);
        } else {
            List<Integer> list = finalList.get(level);
            if (level % 2 == 0)
                list.addLast(node.val);
            else
                list.addFirst(node.val);
        }
        levelOrderTraversal(node.left, finalList, level + 1);
        levelOrderTraversal(node.right, finalList, level + 1);
    }
}
