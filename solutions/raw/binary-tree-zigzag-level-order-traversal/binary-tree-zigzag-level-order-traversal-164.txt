/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        // Queue<TreeNode> q=new LinkedList<>();
        Stack<TreeNode> st = new Stack<>();
        List<List<Integer>> res = new ArrayList<>();
        if (root == null)
            return new ArrayList<>();
        // int level=1;
        st.push(root);
        zigzag(st, 1, res);
        return res;
    }

    public void zigzag(Stack<TreeNode> st, int level, List<List<Integer>> res) {
        Stack<TreeNode> temp = new Stack<>();
        List<Integer> l = new ArrayList<>();
        while (!st.isEmpty()) {
            TreeNode curr = st.pop();
            if (curr == null)
                continue;
            // System.out.println(curr.val);
            l.add(curr.val);
            if (level % 2 != 0) {
                if (curr.left != null)
                    temp.push(curr.left);
                if (curr.right != null)
                    temp.push(curr.right);
            } else {
                if (curr.right != null)
                    temp.push(curr.right);
                if (curr.left != null)
                    temp.push(curr.left);
            }
        }
        res.add(l);
        if (!temp.isEmpty())
            zigzag(temp, level + 1, res);
    }
    // }
}
