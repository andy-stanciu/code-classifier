/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> wraplist = new LinkedList<>();
        if (root == null) {
            return wraplist;
        }
        Deque<TreeNode> q = new LinkedList<>();
        q.offer(root);
        boolean reverse = false;
        while (!q.isEmpty()) {
            int levelSize = q.size();
            List<Integer> currentLevel = new ArrayList<>(levelSize);
            for (int i = 0; i < levelSize; i++) {
                if (reverse) {
                    TreeNode node = q.pollLast();
                    currentLevel.add(node.val);
                    if (node.right != null) {
                        q.offerFirst(node.right);
                    }
                    if (node.left != null) {
                        q.offerFirst(node.left);
                    }
                } else {
                    TreeNode node = q.pollFirst();
                    currentLevel.add(node.val);
                    if (node.left != null) {
                        q.offerLast(node.left);
                    }
                    if (node.right != null) {
                        q.offerLast(node.right);
                    }
                }
            }
            reverse = !reverse;
            wraplist.add(currentLevel);
        }
        return wraplist;
    }
}
