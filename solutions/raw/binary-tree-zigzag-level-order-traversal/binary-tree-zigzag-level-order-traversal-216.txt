/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        if (root == null) {
            return list;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        boolean dir = false;
        while (!queue.isEmpty()) {
            int level = queue.size();
            List<Integer> currrentLevel = new ArrayList<>();
            for (int i = 0; i < level; i++) {
                TreeNode temp = queue.remove();
                currrentLevel.add(temp.val);
                System.out.println(dir);
                if (temp.left != null) {
                    queue.add(temp.left);
                }
                if (temp.right != null) {
                    queue.add(temp.right);
                }
            }
            if (!dir) {
                list.add(currrentLevel);
            } else {
                Collections.reverse(currrentLevel);
                list.add(currrentLevel);
            }
            dir = !dir;
        }
        return list;
    }
}
