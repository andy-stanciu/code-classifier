/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        //base case
        if (root == null)
            return new ArrayList<>();
        //create a List<List<>> store the result
        List<List<Integer>> result = new ArrayList<>();
        //create a que to traversal the bst
        Queue<TreeNode> que = new ArrayDeque<>();
        //add root to the que
        que.add(root);
        //intilize level
        int level = 0;
        //start traversing the tree
        while (que.size() > 0) {
            int size = que.size();
            //create a temp array list to store the values
            List<Integer> tempList = new ArrayList<>();
            while (size > 0) {
                TreeNode rnode = que.remove();
                tempList.add(rnode.val);
                //check for the lst
                if (rnode.left != null) {
                    que.add(rnode.left);
                }
                //check for rst
                if (rnode.right != null) {
                    que.add(rnode.right);
                }
                //decrease the size
                size--;
            }
            //if the level is even add the elements to resutl from left to right
            if (level % 2 == 0) {
                result.add(tempList);
            }
            //if the level is odd add the elements to result from right to left
            if (level % 2 != 0) {
                Collections.reverse(tempList);
                result.add(tempList);
            }
            //increase the level
            level = level + 1;
        }
        return result;
    }
}
