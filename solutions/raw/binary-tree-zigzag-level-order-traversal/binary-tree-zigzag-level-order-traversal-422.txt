/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        Deque<TreeNode> q = new LinkedList<>();
        boolean flag = false;
        q.offer(root);
        while (!q.isEmpty()) {
            int sizeOfLevel = q.size();
            List<Integer> innerList = new ArrayList<>(sizeOfLevel);
            for (int i = 0; i < sizeOfLevel; i++) {
                if (!flag) {
                    TreeNode node = q.pollFirst();
                    innerList.add(node.val);
                    if (node.left != null)
                        q.addLast(node.left);
                    if (node.right != null)
                        q.addLast(node.right);
                } else {
                    TreeNode node = q.pollLast();
                    innerList.add(node.val);
                    if (node.right != null)
                        q.addFirst(node.right);
                    if (node.left != null)
                        q.addFirst(node.left);
                }
            }
            flag = !flag;
            result.add(innerList);
        }
        return result;
    }
}
