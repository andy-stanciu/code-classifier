/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();
        List<List<Integer>> list = new ArrayList<>();
        if (root == null)
            return list;
        q.add(root);
        int level = 0;
        while (!q.isEmpty()) {
            int nodeCount = q.size();
            List<Integer> subList = new ArrayList<>();
            Stack<Integer> st = new Stack<>();
            for (int i = 0; i < nodeCount; i++) {
                TreeNode curr = q.poll();
                if (level % 2 == 0) {
                    // Add in normal order for even levels
                    subList.add(curr.val);
                } else {
                    // Add to stack for odd levels to reverse later
                    st.push(curr.val);
                }
                if (curr.left != null) {
                    q.add(curr.left);
                }
                if (curr.right != null) {
                    q.add(curr.right);
                }
            }
            // If the current level is odd, we need to pop from stack to reverse the order
            if (level % 2 != 0) {
                while (!st.isEmpty()) {
                    subList.add(st.pop());
                }
            }
            // Add the sublist to the result
            list.add(subList);
            // Move to the next level
            level++;
        }
        return list;
    }
}
