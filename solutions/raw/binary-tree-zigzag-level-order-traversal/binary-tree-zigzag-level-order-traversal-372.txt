/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null) {
            return ans;
        }
        TreeNode node = root;
        Deque<TreeNode> deque = new LinkedList<>();
        deque.add(node);
        int level = 0;
        while (!deque.isEmpty()) {
            int loop = deque.size();
            List<Integer> list = new ArrayList<>();
            for (int i = 0; i < loop; i++) {
                if (level % 2 == 0) {
                    //left --> right
                    TreeNode delete = deque.removeFirst();
                    list.add(delete.val);
                    if (delete.left != null) {
                        deque.addLast(delete.left);
                    }
                    if (delete.right != null) {
                        deque.addLast(delete.right);
                    }
                } else {
                    //right --> left
                    TreeNode delete = deque.removeLast();
                    list.add(delete.val);
                    if (delete.right != null) {
                        deque.addFirst(delete.right);
                    }
                    if (delete.left != null) {
                        deque.addFirst(delete.left);
                    }
                }
            }
            ans.add(list);
            level++;
        }
        return ans;
    }
}
