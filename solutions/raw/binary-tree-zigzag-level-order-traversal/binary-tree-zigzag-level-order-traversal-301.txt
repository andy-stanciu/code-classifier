/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null)
            return result;
        ArrayList<TreeNode> currentLevel = new ArrayList<>();
        currentLevel.add(root);
        boolean l_t_r = true;
        while (!currentLevel.isEmpty()) {
            ArrayList<TreeNode> nextLevel = new ArrayList<>();
            ArrayList<Integer> levelValues = new ArrayList<>();
            for (int i = 0; i < currentLevel.size(); i++) {
                TreeNode node = currentLevel.get(i);
                if (l_t_r)
                    levelValues.add(node.val);
                else
                    levelValues.add(0, node.val);
                if (node.left != null)
                    nextLevel.add(node.left);
                if (node.right != null)
                    nextLevel.add(node.right);
            }
            result.add(levelValues);
            currentLevel = nextLevel;
            l_t_r = !l_t_r;
        }
        return result;
    }
}
