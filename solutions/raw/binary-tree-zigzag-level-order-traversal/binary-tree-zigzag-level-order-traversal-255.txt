/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        Deque<TreeNode> q = new LinkedList<>();
        q.addFirst(root);
        boolean reverse = false;
        while (!q.isEmpty()) {
            List<Integer> levellist = new ArrayList<>();
            int n = q.size();
            for (int i = 0; i < n; i++) {
                if (reverse == true) {
                    TreeNode temp = q.removeLast();
                    levellist.add(temp.val);
                    if (temp.right != null) {
                        q.addFirst(temp.right);
                    }
                    if (temp.left != null) {
                        q.addFirst(temp.left);
                    }
                } else {
                    TreeNode temp = q.removeFirst();
                    levellist.add(temp.val);
                    if (temp.left != null) {
                        q.addLast(temp.left);
                    }
                    if (temp.right != null) {
                        q.addLast(temp.right);
                    }
                }
            }
            reverse = !reverse;
            result.add(levellist);
        }
        return result;
    }
}
