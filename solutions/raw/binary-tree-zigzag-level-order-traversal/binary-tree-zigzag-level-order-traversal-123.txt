/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null)
            return result;
        // init bfs
        Deque<TreeNode> queue = new ArrayDeque<>();
        queue.offer(root);
        // bfs
        int depth = 0;
        while (!queue.isEmpty()) {
            int len = queue.size();
            List<Integer> level = new LinkedList<>();
            for (int i = 0; i < len; i++) {
                TreeNode node = queue.pollFirst();
                boolean reverse = depth % 2 != 0;
                if (!reverse) {
                    level.add(node.val);
                } else {
                    level.add(0, node.val);
                }
                if (node.left != null)
                    queue.offer(node.left);
                if (node.right != null)
                    queue.offer(node.right);
            }
            result.add(level);
            depth++;
        }
        return result;
    }
}
