/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) {
            return res;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            List<Integer> current = new ArrayList<>();
            for (int i = 0; i < levelSize; i++) {
                TreeNode currNode = queue.poll();
                current.add(currNode.val);
                if (currNode.left != null) {
                    queue.offer(currNode.left);
                }
                if (currNode.right != null) {
                    queue.offer(currNode.right);
                }
            }
            res.add(current);
        }
        for (int i = 0; i < res.size(); i++) {
            if (i % 2 == 1) {
                res.set(i, rev(res.get(i)));
            }
        }
        return res;
    }

    public List<Integer> rev(List<Integer> a) {
        List<Integer> res = new ArrayList<>();
        for (int i = a.size() - 1; i >= 0; i--) {
            res.add(a.get(i));
        }
        return res;
    }
    // private static List<Integer> reverseList(List<Integer> list) {
    //     List<Integer> reversedList = new ArrayList<>(list.size());
    //     for (int i = list.size() - 1; i >= 0; i--) {
    //         reversedList.add(list.get(i));
    //     }
    //     return reversedList;
    // }
}
