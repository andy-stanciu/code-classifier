/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> x = new ArrayList<List<Integer>>();
        if (root == null)
            return x;
        int k = 0;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        q.add(null);
        int m = 0;
        x.add(new ArrayList<Integer>());
        while (!q.isEmpty()) {
            TreeNode curr = q.remove();
            if (curr == null) {
                x.add(new ArrayList<Integer>());
                k++;
                m = 0;
                if (q.isEmpty()) {
                    break;
                } else {
                    q.add(null);
                }
            } else {
                x.get(k).add(m++, curr.val);
                if (curr.left != null) {
                    q.add(curr.left);
                }
                if (curr.right != null) {
                    q.add(curr.right);
                }
            }
        }
        x.remove(x.size() - 1);
        List<List<Integer>> y = new ArrayList<List<Integer>>();
        for (int i = 0; i < x.size(); i++) {
            if (i % 2 != 0) {
                Collections.reverse(x.get(i));
                y.add(x.get(i));
            } else {
                y.add(x.get(i));
            }
        }
        return y;
    }
}
