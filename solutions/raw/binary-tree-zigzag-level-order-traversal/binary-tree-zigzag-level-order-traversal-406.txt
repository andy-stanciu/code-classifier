class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        // Create a list to store the result (list of lists of integers)
        List<List<Integer>> ans = new ArrayList<>();
        // Check if the root is null
        if (root == null) {
            // If root is null, return the empty result list
            return ans;
        }
        // Create a queue to perform level order traversal
        Queue<TreeNode> q = new LinkedList<>();
        // Add the root node to the queue
        q.add(root);
        // Initialize a flag to control the direction of traversal
        boolean flag = false;
        // Perform level order traversal
        while (!q.isEmpty()) {
            // Get the size of the current level
            int size = q.size();
            // Create a temporary list to store the values of the current level
            List<Integer> temp = new ArrayList<>();
            // Iterate through all the nodes at the current level
            for (int i = 0; i < size; i++) {
                // Remove the current node from the queue
                TreeNode curr = q.remove();
                // Add the value of the current node to the temporary list
                temp.add(curr.val);
                // Add the left child of the current node to the queue if it exists
                if (curr.left != null) {
                    q.add(curr.left);
                }
                // Add the right child of the current node to the queue if it exists
                if (curr.right != null) {
                    q.add(curr.right);
                }
            }
            // If flag is true, reverse the order of elements in the temporary list
            if (flag)
                Collections.reverse(temp);
            // Toggle the flag for the next level
            flag = !flag;
            // Add the temporary list to the result list
            ans.add(temp);
        }
        // Return the result list
        return ans;
    }
}
