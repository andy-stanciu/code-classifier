class Solution {

    ArrayList<List<Integer>> result = new ArrayList<>();

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        // Start the recursive traversal from the root at level 0
        traverseTree(root, 0);
        // Return the filled list of lists containing level order traversal
        return result;
    }

    void traverseTree(TreeNode node, int level) {
        if (node == null)
            // Base case: if the node is null, just return
            return;
        // Ensure the result list is large enough to include this level
        int direction = level % 2;
        if (level >= result.size())
            // Add a new level to the result list
            result.add(new ArrayList<>());
        // Add the current node\'s value to its corresponding level
        if (direction == 0)
            //add left to right
            result.get(level).add(node.val);
        else
            //add right to left
            result.get(level).add(0, node.val);
        // Recurse to the left and right children, increasing the level by 1
        traverseTree(node.left, level + 1);
        traverseTree(node.right, level + 1);
    }
}
