/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        // corner case
        if (root == null)
            return ans;
        // r to l
        Stack<TreeNode> s1 = new Stack<>();
        // l to r
        Stack<TreeNode> s2 = new Stack<>();
        // push root first in r to l stack
        s1.push(root);
        while (!s1.empty() || !s2.empty()) {
            if (!s1.empty()) {
                List<Integer> res = new ArrayList<>();
                while (!s1.empty()) {
                    int size1 = s1.size();
                    for (int i = 0; i < size1; i++) {
                        // for r to l stack
                        TreeNode t1 = s1.peek();
                        s1.pop();
                        if (t1 != null) {
                            res.add(t1.val);
                            // push its right and left children in l to r stack
                            if (t1.left != null)
                                s2.push(t1.left);
                            if (t1.right != null)
                                s2.push(t1.right);
                        }
                    }
                }
                ans.add(res);
            } else {
                List<Integer> res = new ArrayList<>();
                while (!s2.empty()) {
                    int size2 = s2.size();
                    for (int i = 0; i < size2; i++) {
                        TreeNode t2 = s2.peek();
                        s2.pop();
                        if (t2 != null) {
                            res.add(t2.val);
                            // push its left and right children in r to l stack
                            if (t2.right != null)
                                s1.push(t2.right);
                            if (t2.left != null)
                                s1.push(t2.left);
                        }
                    }
                }
                ans.add(res);
            }
        }
        return ans;
    }
}
