/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        /*
This question is same as the Level Order Traversal. In this I just need to take care that if we go on the even level then I need to traverse from left to right and If we traverse on odd level then I need to traverse from right to left!. So simply I have simply traversed same in the same order level traversal, and we made a check if I\'m on even 
level traversal then I have added that list into ans(2d) list as it is otherwise I have added the reversed list of level order traversal into ans(2d) list simple and got submitted
 */
        if (root == null) {
            return new ArrayList<>();
        }
        List<List<Integer>> ans = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        int level = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> ls = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                TreeNode t = queue.poll();
                ls.add(t.val);
                if (t.left != null) {
                    queue.offer(t.left);
                }
                if (t.right != null) {
                    queue.offer(t.right);
                }
            }
            if (level % 2 == 0) {
                ans.add(ls);
            } else {
                ans.add(ls.reversed());
            }
            level += 1;
        }
        return ans;
    }
}
