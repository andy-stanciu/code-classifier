/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> li = new ArrayList<List<Integer>>();
        LinkedHashMap<Integer, List<Integer>> nodeMap = new LinkedHashMap<Integer, List<Integer>>();
        BinaryTreePreOrder(root, 0, nodeMap);
        int counter = 0;
        for (Map.Entry<Integer, List<Integer>> e : nodeMap.entrySet()) {
            List<Integer> temp = e.getValue();
            if (counter % 2 != 0) {
                Collections.reverse(temp);
            }
            li.add(temp);
            counter++;
        }
        return li;
    }

    public static void BinaryTreePreOrder(TreeNode root, int level, HashMap<Integer, List<Integer>> nodeMap) {
        if (root == null) {
            return;
        }
        List<Integer> temp = new ArrayList<Integer>();
        if (nodeMap.get(level) != null) {
            temp = nodeMap.get(level);
        }
        temp.add(root.val);
        nodeMap.put(level, temp);
        BinaryTreePreOrder(root.left, level + 1, nodeMap);
        BinaryTreePreOrder(root.right, level + 1, nodeMap);
    }
}
