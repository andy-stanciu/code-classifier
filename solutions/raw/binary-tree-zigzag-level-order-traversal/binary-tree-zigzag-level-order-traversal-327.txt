/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null) {
            return ans;
        }
        Deque<TreeNode> level = new LinkedList<>();
        level.offer(root);
        boolean rev = false;
        while (!level.isEmpty()) {
            int levelSize = level.size();
            List<Integer> inner = new ArrayList<>(levelSize);
            for (int i = 0; i < levelSize; i++) {
                if (!rev) {
                    TreeNode node = level.pollFirst();
                    inner.add(node.val);
                    if (node.left != null) {
                        level.addLast(node.left);
                    }
                    if (node.right != null) {
                        level.addLast(node.right);
                    }
                } else {
                    TreeNode node = level.pollLast();
                    inner.add(node.val);
                    if (node.right != null) {
                        level.addFirst(node.right);
                    }
                    if (node.left != null) {
                        level.addFirst(node.left);
                    }
                }
            }
            rev = !rev;
            ans.add(inner);
        }
        return ans;
    }
}
