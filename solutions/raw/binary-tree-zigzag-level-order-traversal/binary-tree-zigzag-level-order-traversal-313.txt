/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        List<Integer> list1 = new ArrayList<Integer>();
        if (root == null)
            return list;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        Stack<TreeNode> stack = new Stack<TreeNode>();
        queue.add(root);
        queue.add(null);
        int level = 1;
        while (queue.size() > 1) {
            TreeNode element = queue.remove();
            if (element == null) {
                if (level % 2 == 0)
                    while (!stack.isEmpty()) list1.add(stack.pop().val);
                List<Integer> list2 = new ArrayList<Integer>(list1);
                list.add(list2);
                list1.clear();
                level++;
                queue.add(null);
            } else {
                if (level % 2 == 1)
                    list1.add(element.val);
                else
                    stack.push(element);
                if (element.left != null)
                    queue.add(element.left);
                if (element.right != null)
                    queue.add(element.right);
            }
        }
        if (list1.size() != 0)
            list.add(list1);
        else {
            while (!stack.isEmpty()) list1.add(stack.pop().val);
            list.add(list1);
        }
        return list;
    }
}
