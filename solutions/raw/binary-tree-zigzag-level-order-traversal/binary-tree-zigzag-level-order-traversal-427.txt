/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if (root == null) {
            return List.of();
        }
        List<TreeNode> nodes = new ArrayList<>();
        nodes.add(root);
        List<List<Integer>> result = new ArrayList();
        traversal(nodes, result, false);
        return result;
    }

    private void traversal(List<TreeNode> nodes, List<List<Integer>> result, boolean direct) {
        if (nodes.isEmpty()) {
            return;
        }
        LinkedList<Integer> res = new LinkedList<>();
        List<TreeNode> nextNodes = new ArrayList<>();
        for (TreeNode node : nodes) {
            if (direct) {
                res.offerFirst(node.val);
            } else {
                res.offerLast(node.val);
            }
            if (node.left != null) {
                nextNodes.add(node.left);
            }
            if (node.right != null) {
                nextNodes.add(node.right);
            }
        }
        result.add(res);
        traversal(nextNodes, result, !direct);
    }
}
