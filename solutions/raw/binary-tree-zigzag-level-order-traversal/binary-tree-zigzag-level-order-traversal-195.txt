/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null)
            return result;
        Deque<TreeNode> q = new LinkedList<>();
        q.offer(root);
        boolean reverseOrder = false;
        while (!q.isEmpty()) {
            ArrayList<Integer> levelvals = new ArrayList<>();
            int levelsize = q.size();
            for (int i = 0; i < levelsize; i++) {
                if (reverseOrder) {
                    TreeNode currentnode = q.pollLast();
                    levelvals.add(currentnode.val);
                    if (currentnode.right != null) {
                        q.addFirst(currentnode.right);
                    }
                    if (currentnode.left != null) {
                        q.addFirst(currentnode.left);
                    }
                } else {
                    TreeNode currentnode = q.pollFirst();
                    levelvals.add(currentnode.val);
                    if (currentnode.left != null) {
                        q.addLast(currentnode.left);
                    }
                    if (currentnode.right != null) {
                        q.addLast(currentnode.right);
                    }
                }
            }
            reverseOrder = !reverseOrder;
            result.add(levelvals);
        }
        return result;
    }
}
