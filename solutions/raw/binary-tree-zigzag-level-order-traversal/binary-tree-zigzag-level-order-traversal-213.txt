/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> zigzagTraversal = new ArrayList<>();
        if (root == null) {
            return zigzagTraversal;
        }
        int orderFlag = 1;
        Queue<List<TreeNode>> queue = new LinkedList<>();
        queue.offer(Collections.singletonList(root));
        while (!queue.isEmpty()) {
            List<TreeNode> nodes = queue.remove();
            List<TreeNode> toPush = new ArrayList<>();
            List<Integer> valuesToAdd = new ArrayList<>();
            for (TreeNode node : nodes) {
                valuesToAdd.add(node.val);
                if (node.left != null) {
                    toPush.add(node.left);
                }
                if (node.right != null) {
                    toPush.add(node.right);
                }
            }
            if (orderFlag == -1) {
                Collections.reverse(valuesToAdd);
            }
            zigzagTraversal.add(valuesToAdd);
            if (toPush.isEmpty()) {
                break;
            }
            queue.offer(toPush);
            orderFlag *= -1;
        }
        return zigzagTraversal;
    }

    private void display(List<List<Integer>> ans) {
        for (List<Integer> list : ans) {
            for (Integer val : list) {
                System.out.print(" " + val);
            }
            System.out.println("");
        }
    }
}
