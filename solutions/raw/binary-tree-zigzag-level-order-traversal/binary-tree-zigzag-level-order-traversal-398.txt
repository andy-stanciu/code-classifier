/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        Queue<TreeNode> cache = new LinkedList<>();
        boolean flag = true;
        if (root != null)
            cache.add(root);
        while (!cache.isEmpty()) {
            int count = cache.size();
            ArrayList<Integer> currL = new ArrayList<>();
            while (count-- > 0) {
                TreeNode curr = cache.remove();
                if (flag)
                    currL.add(curr.val);
                else
                    currL.addFirst(curr.val);
                if (curr.left != null)
                    cache.add(curr.left);
                if (curr.right != null)
                    cache.add(curr.right);
            }
            flag = !flag;
            result.add(currL);
        }
        return result;
    }
}
