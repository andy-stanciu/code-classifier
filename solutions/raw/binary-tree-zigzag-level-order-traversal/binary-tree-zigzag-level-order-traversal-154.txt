/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null)
            return result;
        Deque<TreeNode> q = new LinkedList<>();
        boolean rightToLeft = false;
        q.offer(root);
        while (!q.isEmpty()) {
            int size = q.size();
            List<Integer> list = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                TreeNode node;
                if (rightToLeft) {
                    node = q.removeFirst();
                    System.out.println("node = " + node.val);
                    if (node.right != null)
                        q.addLast(node.right);
                    if (node.left != null)
                        q.addLast(node.left);
                } else {
                    node = q.removeLast();
                    // System.out.println("node = "+node.val);
                    if (node.left != null)
                        q.addFirst(node.left);
                    if (node.right != null)
                        q.addFirst(node.right);
                }
                list.add(node.val);
            }
            result.add(list);
            rightToLeft = !rightToLeft;
        }
        return result;
    }
}
