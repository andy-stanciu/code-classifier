/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    // 3,9,30 // [1]
    List<List<Integer>> result;

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        result = new ArrayList<List<Integer>>();
        if (root == null)
            return result;
        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.add(root);
        boolean isRight = true;
        while (!queue.isEmpty()) {
            List<Integer> subLst = new ArrayList<Integer>();
            //9 30
            int qSize = queue.size();
            for (int i = 0; i < qSize; i++) {
                //3 -> 9
                TreeNode node = queue.poll();
                subLst.add(node.val);
                if (node.left != null)
                    queue.add(node.left);
                if (node.right != null)
                    queue.add(node.right);
            }
            if (!isRight) {
                Collections.reverse(subLst);
            }
            result.add(subLst);
            isRight = isRight == true ? false : true;
        }
        return result;
    }
}
//time comp: O(nk) - sublist of size k
//space com: O(D)
