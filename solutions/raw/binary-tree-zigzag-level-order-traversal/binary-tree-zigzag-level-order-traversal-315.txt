/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        Queue<Pair<TreeNode, Integer>> queue = new LinkedList<>();
        if (root == null)
            return list;
        queue.offer(new Pair<>(root, 0));
        while (!queue.isEmpty()) {
            Pair<TreeNode, Integer> pair = queue.poll();
            TreeNode node = pair.getKey();
            int index = pair.getValue();
            if (index == list.size()) {
                List<Integer> temp = new LinkedList<>();
                temp.add(node.val);
                list.add(temp);
            } else {
                if (index % 2 == 1)
                    list.get(index).addFirst(node.val);
                else
                    list.get(index).add(node.val);
            }
            if (node.left != null)
                queue.offer(new Pair<>(node.left, index + 1));
            if (node.right != null)
                queue.offer(new Pair<>(node.right, index + 1));
        }
        return list;
    }
}
