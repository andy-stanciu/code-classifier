/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    class pair {

        int level;

        TreeNode node;

        public pair(TreeNode n, int l) {
            level = l;
            node = n;
        }
    }

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if (root == null)
            return new ArrayList<>();
        Queue<pair> q = new LinkedList<>();
        Map<Integer, List<Integer>> map = new TreeMap<>();
        q.add(new pair(root, 0));
        while (!q.isEmpty()) {
            pair curr = q.poll();
            int level = curr.level;
            TreeNode node = curr.node;
            if (!map.containsKey(level)) {
                map.put(level, new ArrayList());
            }
            map.get(level).add(node.val);
            if (node.left != null) {
                q.add(new pair(node.left, level + 1));
            }
            if (node.right != null) {
                q.add(new pair(node.right, level + 1));
            }
        }
        List<List<Integer>> list = new ArrayList<>();
        for (int i = 0; i < map.size(); i++) {
            List<Integer> x = map.get(i);
            if (i % 2 != 0) {
                Collections.reverse(x);
            }
            list.add(x);
        }
        return list;
    }
}
