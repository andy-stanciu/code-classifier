/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null)
            return res;
        Deque<TreeNode> q = new LinkedList<>();
        q.addLast(root);
        q.addLast(null);
        List<Integer> temp = new ArrayList<>();
        int direction = 0;
        while (!q.isEmpty()) {
            TreeNode curr = direction == 0 ? q.pollFirst() : q.pollLast();
            if (curr != null) {
                temp.add(curr.val);
                if (direction == 0) {
                    if (curr.left != null)
                        q.addLast(curr.left);
                    if (curr.right != null)
                        q.addLast(curr.right);
                } else {
                    if (curr.right != null)
                        q.addFirst(curr.right);
                    if (curr.left != null)
                        q.addFirst(curr.left);
                }
            } else {
                res.add(new ArrayList<>(temp));
                temp.clear();
                direction ^= 1;
                if (!q.isEmpty()) {
                    if (direction == 0)
                        q.addLast(null);
                    else
                        q.addFirst(null);
                }
            }
        }
        return res;
    }
}
