/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// YOU CAN DO USING LEVELS TOO AND BY USING COLLECTIONS.REVERSE(CURRENTLEVEL)  ALSO. KEEP GOING!!!
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        int level = 0;
        while (!queue.isEmpty()) {
            int levelsize = queue.size();
            List<Integer> currentlevel = new ArrayList<>(levelsize);
            for (int i = 0; i < levelsize; i++) {
                TreeNode currentnode = queue.poll();
                currentlevel.add(currentnode.val);
                if (currentnode.left != null) {
                    queue.add(currentnode.left);
                }
                if (currentnode.right != null) {
                    queue.add(currentnode.right);
                }
            }
            if (level % 2 == 1) {
                Collections.reverse(currentlevel);
            }
            result.add(currentlevel);
            level++;
        }
        return result;
        // ORRRRRRRRRRRRRRRRR
        //  List<List<Integer>> result = new ArrayList<>();
        // if (root == null) {
        //     return result;
        // }
        // Queue<TreeNode> queue = new LinkedList<>();
        // queue.offer(root);
        // boolean leftToRight = true; // Indicates the direction of traversal
        // while (!queue.isEmpty()) {
        //     int levelSize = queue.size();
        //     List<Integer> currentLevel = new ArrayList<>(levelSize);
        //     for (int i = 0; i < levelSize; i++) {
        //         TreeNode currentNode = queue.poll();
        //         currentLevel.add(currentNode.val);
        //         if (currentNode.left != null) {
        //             queue.offer(currentNode.left);
        //         }
        //         if (currentNode.right != null) {
        //             queue.offer(currentNode.right);
        //         }
        //     }
        //     if (!leftToRight) {
        //         Collections.reverse(currentLevel); // Reverse the list for even levels
        //     }
        //     result.add(currentLevel);
        //     leftToRight = !leftToRight; // Change direction for the next level
        // }
        // return result;
    }
}
