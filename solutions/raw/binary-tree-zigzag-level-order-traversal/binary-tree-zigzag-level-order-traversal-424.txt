/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> balla = new ArrayList<>();
        if (root == null) {
            return balla;
        }
        Queue<TreeNode> q = new LinkedList<>();
        ArrayList<Integer> kaaki = new ArrayList<>();
        kaaki.add(root.val);
        q.add(root);
        balla.add(kaaki);
        int cnt = 0;
        while (!q.isEmpty()) {
            int levelNum = q.size();
            kaaki = new ArrayList<>();
            for (int i = 0; i < levelNum; i++) {
                TreeNode temp = q.remove();
                if (temp.left != null) {
                    q.add(temp.left);
                    kaaki.add(temp.left.val);
                }
                if (temp.right != null) {
                    q.add(temp.right);
                    kaaki.add(temp.right.val);
                }
            }
            if (cnt % 2 == 0) {
                Collections.reverse(kaaki);
            }
            if (!kaaki.isEmpty()) {
                balla.add(kaaki);
            }
            cnt++;
        }
        return balla;
    }
}
