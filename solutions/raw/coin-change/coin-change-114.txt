class Solution {

    public int coinChange(int[] coins, int amount) {
        Map<Integer, Integer> dp = new HashMap<Integer, Integer>();
        return coinChange(coins, amount, dp);
    }

    //1, 2, 5 v/s 3
    public int coinChange(int[] coins, int amount, Map<Integer, Integer> dp) {
        if (dp.containsKey(amount))
            return dp.get(amount);
        if (amount < 0)
            return -1;
        if (amount == 0)
            return 0;
        int min = Integer.MAX_VALUE;
        for (int coin : coins) {
            //2 1 0
            int remain = amount - coin;
            if (remain >= 0) {
                int newPath = coinChange(coins, remain, dp) + 1;
                if (newPath > 0 && newPath < min)
                    min = newPath;
            }
        }
        if (min == Integer.MAX_VALUE)
            dp.put(amount, -1);
        else
            dp.put(amount, min);
        return dp.get(amount);
    }
}
