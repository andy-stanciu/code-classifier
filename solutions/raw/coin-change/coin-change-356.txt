class Solution {

    public static int spaceOptimization(int[] coin, int amount) {
        int[] dp = new int[amount + 1];
        for (int i = 0; i < dp.length; i++) {
            if (i % coin[0] == 0) {
                dp[i] = i / coin[0];
            } else {
                dp[i] = Integer.MAX_VALUE;
            }
        }
        for (int index = 1; index < coin.length; index++) {
            int[] temp = new int[dp.length];
            for (int amountIdx = 0; amountIdx <= amount; amountIdx++) {
                int take = Integer.MAX_VALUE;
                if (coin[index] <= amountIdx) {
                    take = temp[amountIdx - coin[index]];
                    take = (take == Integer.MAX_VALUE) ? take : take + 1;
                }
                int ntake = dp[amountIdx];
                temp[amountIdx] = Math.min(take, ntake);
            }
            for (int i = 0; i < dp.length; i++) dp[i] = temp[i];
        }
        return dp[dp.length - 1];
    }

    public int coinChange(int[] num, int x) {
        int ans = spaceOptimization(num, x);
        if (ans >= Integer.MAX_VALUE)
            return -1;
        return ans;
    }
}
