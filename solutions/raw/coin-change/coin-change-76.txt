class Solution {

    public int coinChange(int[] coins, int amount) {
        Integer[] dp = new Integer[amount + 1];
        dp[0] = 0;
        // Building the dp array for each possible amount combination
        for (int i = 1; i <= amount; i++) {
            // Checking for each possible combination of coin
            for (int coin : coins) {
                // If the current coin >= the current amount (i)
                // And we have already found a way to reach i - current coin
                // Then we update the current position with the min amount
                if (i >= coin && dp[i - coin] != null) {
                    if (dp[i] != null)
                        dp[i] = Math.min(dp[i], 1 + dp[i - coin]);
                    else
                        dp[i] = 1 + dp[i - coin];
                }
            }
        }
        return dp[amount] == null ? -1 : dp[amount];
    }
}
