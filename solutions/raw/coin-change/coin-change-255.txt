class Solution {

    // public int minCoinChange(int[] coins, int amount) {
    //     int[] dp = new int[amount+1];
    //     Arrays.fill(dp, -1);
    //     int ans = minCoins(coins, amount, dp);
    //     return ans == Integer.MAX_VALUE ? -1: ans;
    // }
    // public static int minCoins(int[] coins, int amount, int[] dp) {
    //     if(amount == 0) {
    //         return 0;
    //     }
    //     if(dp[amount] != -1) {
    //         return dp[amount];
    //     }
    //     int ans = Integer.MAX_VALUE;
    //     for(int i = 0; i < coins.length; i++) {
    //         if(amount - coins[i] >= 0) {
    //             int subAnswer = minCoins(coins, amount - coins[i], dp);
    //             if(subAnswer != Integer.MAX_VALUE && subAnswer + 1 < ans) {
    //                 ans = subAnswer + 1;
    //             }
    //         }
    //     }
    //     dp[amount] = ans;
    //     return dp[amount];
    // }
    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, amount + 1);
        dp[0] = 0;
        for (int i = 1; i < amount + 1; i++) {
            for (int coin : coins) {
                if (i - coin >= 0) {
                    dp[i] = Math.min(dp[i], dp[i - coin] + 1);
                }
            }
        }
        //return dp[amount];
        return dp[amount] > amount ? -1 : dp[amount];
    }
}
