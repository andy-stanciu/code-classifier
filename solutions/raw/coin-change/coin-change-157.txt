class Solution {

    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int[][] dp = new int[n + 1][amount + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= amount; j++) {
                dp[i][j] = -1;
            }
        }
        int result = coi(coins, n, amount, dp);
        if (result >= 100000) {
            return -1;
        } else {
            return result;
        }
    }

    static int coi(int[] coins, int n, int amount, int[][] dp) {
        if (amount == 0) {
            return 0;
        }
        if (n == 0) {
            return 100000;
        }
        if (dp[n][amount] != -1) {
            return dp[n][amount];
        }
        int take = 100000;
        if (coins[n - 1] <= amount) {
            take = coi(coins, n, amount - coins[n - 1], dp);
        }
        int nottake = coi(coins, n - 1, amount, dp);
        dp[n][amount] = Math.min(take + 1, nottake);
        return dp[n][amount];
    }
}
