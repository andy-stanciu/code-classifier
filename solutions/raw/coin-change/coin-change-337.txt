class Solution {

    public int coinChange(int[] coins, int amount) {
        int[][] dp = new int[coins.length][amount + 1];
        for (int[] arr : dp) {
            Arrays.fill(arr, -1);
        }
        return coin(coins.length - 1, coins, amount, dp) == (int) (1e9) ? -1 : coin(coins.length - 1, coins, amount, dp);
    }

    int coin(int index, int[] coins, int amount, int[][] dp) {
        if (index == 0) {
            if (amount % coins[index] == 0)
                return amount / coins[index];
            return (int) (1e9);
        }
        if (dp[index][amount] != -1)
            return dp[index][amount];
        int notTake = 0 + coin(index - 1, coins, amount, dp);
        int take = (int) (1e9);
        if (amount >= coins[index]) {
            take = 1 + coin(index, coins, amount - coins[index], dp);
        }
        return dp[index][amount] = Math.min(notTake, take);
    }
}
