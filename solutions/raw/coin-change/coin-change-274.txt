// Approach  - 2 Tabulation
class Solution {

    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int[][] dp = new int[n][amount + 1];
        for (int i = 0; i <= amount; i++) {
            // like knapsack base case
            if (i % coins[0] == 0)
                dp[0][i] = i / coins[0];
            else {
                // NOTE
                dp[0][i] = (int) Math.pow(10, 9);
            }
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j <= amount; j++) {
                int pick = Integer.MAX_VALUE;
                if (coins[i] <= j)
                    pick = 1 + dp[i][j - coins[i]];
                int notPick = 0 + dp[i - 1][j];
                dp[i][j] = Math.min(pick, notPick);
            }
        }
        int ans = dp[n - 1][amount];
        if (ans >= (int) Math.pow(10, 9)) {
            return -1;
        }
        return ans;
    }
}
