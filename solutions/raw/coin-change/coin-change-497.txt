// consider the example [1,3,4,5] target=7
// refer this diagram https://i.postimg.cc/9MzxqT5p/IMG-20230801-190148701.jpg
class Solution {

    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        // array that stores the shortest paths from 0 to 7
        int[] dp = new int[amount + 1];
        // the shortest path to 0 is 0
        dp[0] = 0;
        // inistially all the values are infinity (as the number of values can\'t\' go beyond 7 we can put it as 7)
        for (int i = 1; i < amount + 1; i++) {
            dp[i] = amount + 1;
        }
        // calculating all the values of dp
        for (int i = 1; i < amount + 1; i++) {
            // for each c to see if the path is possible
            for (int c : coins) {
                // if i=2 we cant consider 3,4,5 as they are greater than 2 only 1 is considered
                if (i - c >= 0) {
                    // path to 2 =1+dp[2-1] means c=1 is selected(+1) and the other value is d[i-c] that is dp[1] 1 so two ways
                    dp[i] = Math.min(dp[i], 1 + dp[i - c]);
                }
            }
            for (int k = 0; k < amount + 1; k++) {
                System.out.print(dp[k] + " ");
            }
            System.out.println();
        }
        // if the dp[amount] is infinity there is no way to reach the amount
        if (dp[amount] > amount) {
            return -1;
        }
        return dp[amount];
    }
}
