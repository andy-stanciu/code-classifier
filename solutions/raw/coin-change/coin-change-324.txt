class Solution {

    private static int recurse(int index, int currAmount, int[] coins, int[][] matrix) {
        if (index >= 0 && currAmount >= 0 && matrix[currAmount][index] != -1) {
            return matrix[currAmount][index];
        }
        if (currAmount == 0) {
            return 0;
        }
        if (index == -1) {
            return Integer.MAX_VALUE;
        }
        if (currAmount < 0) {
            return Integer.MAX_VALUE;
        }
        int first = recurse(index - 1, currAmount, coins, matrix);
        int second = recurse(index, currAmount - coins[index], coins, matrix);
        if (second != Integer.MAX_VALUE) {
            second = second + 1;
        }
        matrix[currAmount][index] = Math.min(first, second);
        return matrix[currAmount][index];
    }

    public static int coinChange(int[] coins, int amount) {
        if (amount == 0) {
            return 0;
        }
        int[][] matrix = new int[amount + 1][coins.length + 1];
        for (int i = 0; i <= amount; i++) {
            for (int j = 0; j <= coins.length; j++) {
                matrix[i][j] = -1;
            }
        }
        recurse(coins.length - 1, amount, coins, matrix);
        return matrix[amount][coins.length - 1] == Integer.MAX_VALUE ? -1 : matrix[amount][coins.length - 1];
    }

    public static void main(String[] args) {
        int[] coins = { 1, 2, 5 };
        int amount = 11;
        System.out.println(coinChange(coins, amount));
    }
}
