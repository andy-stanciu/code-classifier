class Solution {

    public int coinChange(int[] coins, int amount) {
        // dp(i) = 1 + dp(amount - c) for all c in coins
        int[] numCoins = new int[amount + 1];
        // Initialize the array with a value greater than \'amount\' to represent infinity.
        for (int i = 0; i < numCoins.length; i++) {
            numCoins[i] = amount + 1;
        }
        numCoins[0] = 0;
        for (int a = 1; a <= amount; a++) {
            for (int c : coins) {
                // Calculate the minimum number of coins required for the current amount.
                // It\'s 1 (the current coin) + the minimum number of coins required for (amount - c).
                // We take the minimum of the existing value and the newly calculated value.
                if (a - c >= 0) {
                    numCoins[a] = Math.min(numCoins[a], 1 + numCoins[a - c]);
                }
            }
        }
        return numCoins[amount] > amount ? -1 : numCoins[amount];
    }
}
