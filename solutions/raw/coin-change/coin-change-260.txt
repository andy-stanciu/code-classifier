class Solution {

    int[][] dp;

    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        dp = new int[n][amount + 1];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        int ans = f(n - 1, amount, coins);
        if (ans >= 100000)
            return -1;
        return ans;
    }

    public int f(int idx, int target, int[] coins) {
        if (idx == 0) {
            if (target % coins[idx] == 0) {
                return target / coins[idx];
            } else {
                return 100000;
            }
        }
        if (dp[idx][target] != -1)
            return dp[idx][target];
        int nottake = 0 + f(idx - 1, target, coins);
        int take = 100000;
        if (coins[idx] <= target) {
            take = 1 + f(idx, target - coins[idx], coins);
        }
        return dp[idx][target] = Math.min(take, nottake);
    }
}
