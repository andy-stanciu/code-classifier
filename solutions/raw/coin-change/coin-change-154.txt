class Solution {

    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int[][] dp = new int[n][amount + 1];
        for (int[] it : dp) {
            Arrays.fill(it, -1);
        }
        int ans = fun(n - 1, coins, amount, dp);
        return (ans >= (int) Math.pow(10, 9)) ? -1 : ans;
    }

    static int fun(int idx, int[] coins, int amount, int[][] dp) {
        if (idx == 0) {
            if (amount % coins[idx] == 0)
                return amount / coins[idx];
            else
                return (int) Math.pow(10, 9);
        }
        if (dp[idx][amount] != -1)
            return dp[idx][amount];
        int nt = fun(idx - 1, coins, amount, dp);
        int t = (int) Math.pow(10, 9);
        if (amount >= coins[idx])
            t = 1 + fun(idx, coins, amount - coins[idx], dp);
        return dp[idx][amount] = Math.min(nt, t);
    }
}
