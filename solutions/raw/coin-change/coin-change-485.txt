class Solution {

    int[] memo;

    public int coinChange(int[] coins, int amount) {
        memo = new int[amount + 1];
        Arrays.fill(memo, -1000);
        return dp(coins, amount);
    }

    private int dp(int[] coins, int amount) {
        //the min coin to get to target amount
        if (amount == 0)
            return 0;
        if (amount < 0)
            return -1;
        //the current amount has been computed, get directly from memo
        if (memo[amount] != -1000)
            return memo[amount];
        int res = Integer.MAX_VALUE;
        for (int coin : coins) {
            int sub = dp(coins, amount - coin);
            if (sub == -1)
                continue;
            res = Math.min(res, sub + 1);
        }
        memo[amount] = (res == Integer.MAX_VALUE) ? -1 : res;
        return memo[amount];
    }
}
