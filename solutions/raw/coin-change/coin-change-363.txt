class Solution {

    static long find(int n, int[] coins, int sum, long[][] dp) {
        // System.out.println("sum="+sum);
        if (sum < 0)
            return Integer.MAX_VALUE;
        if (sum == 0)
            return 0;
        if (n <= 0)
            return Integer.MAX_VALUE;
        if (dp[n][sum] != -1)
            return dp[n][sum];
        long taken = Integer.MAX_VALUE, notTaken = Integer.MAX_VALUE;
        if (coins[n - 1] <= sum)
            taken = 1 + find(n, coins, sum - coins[n - 1], dp);
        notTaken = find(n - 1, coins, sum, dp);
        return dp[n][sum] = Math.min(taken, notTaken);
    }

    public int coinChange(int[] coins, int amount) {
        long[][] dp = new long[coins.length + 1][amount + 1];
        for (int i = 0; i < dp.length; i++) Arrays.fill(dp[i], -1);
        // System.out.println("find value is "+find(coins.length,coins,amount,dp));
        if (find(coins.length, coins, amount, dp) >= Integer.MAX_VALUE)
            return -1;
        else
            return (int) find(coins.length, coins, amount, dp);
    }
}
