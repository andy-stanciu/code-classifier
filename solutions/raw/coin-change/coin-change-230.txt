class Solution {

    public int coinChange(int[] coins, int W) {
        int N = coins.length;
        int[][] dp = new int[N + 1][W + 1];
        for (int i = 0; i <= N; i++) dp[i][0] = 0;
        for (int i = 0; i <= W; i++) // did this \'-1\' because on line number 12 we did +1. That will overflow.
        dp[0][i] = Integer.MAX_VALUE - 1;
        for (int i = 1; i <= N; i++) {
            for (int j = 1; j <= W; j++) {
                if (coins[i - 1] <= j)
                    dp[i][j] = Math.min(1 + dp[i][j - coins[i - 1]], dp[i - 1][j]);
                else
                    dp[i][j] = dp[i - 1][j];
            }
        }
        return dp[N][W] == Integer.MAX_VALUE - 1 ? -1 : dp[N][W];
    }
}
