//DP ARRAY APPROACH
class Solution {

    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, amount + 1);
        dp[0] = 0;
        for (int coin : coins) {
            for (int i = coin; i <= amount; i++) {
                dp[i] = Math.min(dp[i], dp[i - coin] + 1);
            }
        }
        return dp[amount] > amount ? -1 : dp[amount];
    }
}
//HASHMAP APPROACH
// class Solution {
//     public int coinChange(int[] coins, int amount) {
//        return coinChange(coins,amount,new HashMap<>());
//     }
//     public int coinChange(int[] coins, int amount, HashMap<Integer,Integer> memo) {
//         if(amount == 0) return 0;
//         if(amount < 0) return -1;
//         if(memo.containsKey(amount)) return memo.get(amount);
//         int minCoins = -1;
//         for(int coin : coins){
//             int subAmount = amount - coin;
//             int subCoins = coinChange(coins,subAmount,memo);
//             if(subCoins != -1){
//                 int numCoins = subCoins+1;
//                 if(numCoins < minCoins || minCoins == -1){
//                     minCoins = numCoins;
//                 }
//             }
//         }
//         memo.put(amount,minCoins);
//         return minCoins;
//     }
// }
