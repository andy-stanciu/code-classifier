class Solution {

    public int coinChange(int[] coins, int amount) {
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        return coinChangeHelper(coins, amount, map);
    }

    /**
     * Dp Top Down Memorisation
     */
    public int coinChangeHelper(int[] coins, int amount, Map<Integer, Integer> map) {
        if (amount == 0)
            return 0;
        if (amount < 0)
            return -1;
        if (map.containsKey(amount)) {
            return map.get(amount);
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < coins.length; i++) {
            int num = coinChangeHelper(coins, amount - coins[i], map);
            if (num != -1) {
                res = Math.min(res, 1 + num);
            }
        }
        res = res == Integer.MAX_VALUE ? -1 : res;
        map.put(amount, res);
        return res;
    }

    /**
     * Dp bottom up Tabularisation
     */
    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, amount + 1);
        dp[0] = 0;
        for (int i = 1; i <= amount; i++) {
            for (int j = 0; j < coins.length; j++) {
                if (coins[j] <= i) {
                    dp[i] = Math.min(dp[i], 1 + dp[i - coins[j]]);
                }
            }
        }
        return dp[amount] > amount ? -1 : dp[amount];
    }
}
