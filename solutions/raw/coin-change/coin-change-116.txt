class Solution {

    public int coinChange(int[] coins, int amount) {
        if (coins.length == 1) {
            if (amount % coins[0] != 0)
                return -1;
            else
                return amount / coins[0];
        }
        int[][] dp = new int[amount + 1][coins.length];
        for (int[] e : dp) {
            Arrays.fill(e, Integer.MAX_VALUE);
        }
        int ans = helper(coins, amount, coins.length - 1, dp);
        if (ans == Integer.MAX_VALUE - 1)
            return -1;
        return ans;
    }

    public int helper(int[] arr, int amt, int idx, int[][] dp) {
        if (idx < 0 || amt < 0) {
            return Integer.MAX_VALUE - 1;
        }
        if (amt == 0) {
            return 0;
        }
        if (dp[amt][idx] != Integer.MAX_VALUE) {
            return dp[amt][idx];
        }
        // pick
        int x = helper(arr, amt - arr[idx], idx, dp) + 1;
        // skip
        int y = helper(arr, amt, idx - 1, dp);
        dp[amt][idx] = Math.min(x, y);
        return Math.min(x, y);
    }
}
