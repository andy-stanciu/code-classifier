class Solution {

    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int[][] dp = new int[n][amount + 1];
        for (int[] rows : dp) {
            Arrays.fill(rows, -1);
        }
        int ans = helper(coins, n - 1, amount, dp);
        if (ans >= Math.pow(10, 9)) {
            return -1;
        }
        return ans;
    }

    int helper(int[] coins, int idx, int target, int[][] dp) {
        if (idx == 0) {
            if (target % coins[idx] == 0) {
                return target / coins[idx];
            } else {
                return (int) Math.pow(10, 9);
            }
        }
        if (dp[idx][target] != -1) {
            return dp[idx][target];
        }
        int notTake = helper(coins, idx - 1, target, dp);
        int take = (int) Math.pow(10, 9);
        if (coins[idx] <= target) {
            take = 1 + helper(coins, idx, target - coins[idx], dp);
        }
        dp[idx][target] = Math.min(notTake, take);
        return dp[idx][target];
    }
}
