class Solution {

    int[][] dp;

    public int coinChange(int[] arr, int target) {
        Arrays.sort(arr);
        dp = new int[target + 1][arr.length];
        for (int i = 0; i < dp.length; i++) {
            Arrays.fill(dp[i], -2);
        }
        return fun(arr, target, 0);
    }

    int fun(int[] arr, int target, int i) {
        if (target == 0)
            return 0;
        if (i == arr.length - 1) {
            if (target == arr[i])
                return dp[target][i] = 1;
            else if (target < arr[i])
                return dp[target][i] = -1;
            else {
                int temp = fun(arr, target - arr[i], 0);
                if (temp != -1)
                    return dp[target][i] = 1 + temp;
                else
                    return dp[target][i] = -1;
            }
        }
        if (dp[target][i] != -2)
            return dp[target][i];
        int ans = Integer.MAX_VALUE;
        if (arr[i] == target)
            return dp[target][i] = 1;
        if (arr[i] > target)
            return dp[target][i] = -1;
        if (arr[i] < target) {
            int temp = fun(arr, target - arr[i], 0);
            if (temp != -1)
                ans = Math.min(ans, 1 + temp);
        }
        int temp2 = fun(arr, target, i + 1);
        if (temp2 != -1)
            ans = Math.min(ans, temp2);
        if (ans == Integer.MAX_VALUE)
            return dp[target][i] = -1;
        return dp[target][i] = ans;
    }
}
