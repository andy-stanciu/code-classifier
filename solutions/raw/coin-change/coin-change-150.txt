class Solution {

    // bottom up dp
    public int coinChange(int[] coins, int amount) {
        int maxValue = amount * 2 + 1;
        int[] dp = new int[amount + 1];
        for (int i = 1; i <= amount; ++i) {
            int count = maxValue;
            for (int coin : coins) {
                if (i - coin < 0)
                    continue;
                count = Math.min(count, 1 + dp[i - coin]);
            }
            dp[i] = count;
        }
        return dp[amount] >= maxValue ? -1 : dp[amount];
    }

    // top down dp
    private int maxValue = 0;

    public int coinChange(int[] coins, int amount) {
        maxValue = amount * 2 + 1;
        int ret = dp(coins, amount, new Integer[amount + 1]);
        return ret >= maxValue ? -1 : ret;
    }

    private int dp(int[] coins, int remaining, Integer[] memo) {
        if (remaining == 0)
            return 0;
        if (remaining < 0)
            return maxValue;
        if (memo[remaining] != null)
            return memo[remaining];
        int count = maxValue;
        for (int coin : coins) {
            count = Math.min(count, 1 + dp(coins, remaining - coin, memo));
        }
        return memo[remaining] = count;
    }
}
