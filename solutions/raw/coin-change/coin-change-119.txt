class Solution {

    public int coinChange(int[] coins, int amount) {
        // DP
        // indexn == number last index is our aim
        long[] dp = new long[amount + 1];
        // before that breaking the problem into small problem
        // looking for smaller problem to solve in order to solve the bigger one
        for (int i = 1; i < dp.length; i++) {
            // min amounbt of coin required to be the amount
            long l = Integer.MAX_VALUE;
            for (int m = 0; m < coins.length; m++) {
                // ignore if the coind bigger then current amount
                if (coins[m] <= i) {
                    l = Math.min(l, dp[i - coins[m]] + 1);
                }
            }
            // got the min l and insertingin dp
            dp[i] = l;
        }
        if ((int) dp[amount] == Integer.MAX_VALUE)
            return -1;
        return (int) dp[amount];
    }
}
