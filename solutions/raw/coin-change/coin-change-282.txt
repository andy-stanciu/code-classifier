class Solution {

    public int coinChange(int[] coins, int amount) {
        // Create an array to store the minimum number of coins needed to make each amount.
        int[] dp = new int[amount + 1];
        // Initialize the array with a value larger than any possible solution.
        Arrays.fill(dp, amount + 1);
        // Base case: 0 coins are needed to make amount 0.
        dp[0] = 0;
        // Iterate over each amount from 1 to the target amount.
        for (int i = 1; i <= amount; i++) {
            // For each amount, iterate over each coin denomination.
            for (int coin : coins) {
                // Check if the coin can be used to make the current amount.
                if (coin <= i) {
                    // Update the minimum number of coins needed for the current amount.
                    dp[i] = Math.min(dp[i], dp[i - coin] + 1);
                }
            }
        }
        // If dp[amount] is still greater than amount, it means no solution exists.
        // Otherwise, return the minimum number of coins needed.
        return dp[amount] > amount ? -1 : dp[amount];
    }
}
