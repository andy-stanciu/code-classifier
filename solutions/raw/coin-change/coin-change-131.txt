class Solution {

    public int coinChange(int[] coins, int amount) {
        int[] memo = new int[amount + 1];
        // -1 indicates that the amount has not been solved yet
        Arrays.fill(memo, -1);
        // Solve the problem using a helper function with memoization
        int result = coinChangeHelper(coins, amount, memo);
        // If result is Integer.MAX_VALUE, it means no solution was found, return -1
        return result == Integer.MAX_VALUE ? -1 : result;
    }

    private int coinChangeHelper(int[] coins, int amount, int[] memo) {
        // Base case: if amount is 0, no coins are needed
        if (amount == 0) {
            return 0;
        }
        // Base case: if amount is negative, return a large number indicating impossible
        if (amount < 0) {
            return Integer.MAX_VALUE;
        }
        // Check if this subproblem has already been solved
        if (memo[amount] != -1) {
            return memo[amount];
        }
        // Initialize the minimum coins needed to be a large value
        int minCoins = Integer.MAX_VALUE;
        // Try every coin and compute the minimum number of coins required
        for (int coin : coins) {
            int result = coinChangeHelper(coins, amount - coin, memo);
            if (result != Integer.MAX_VALUE) {
                // +1 because we used one coin
                minCoins = Math.min(minCoins, result + 1);
            }
        }
        // Memoize the result for the current amount
        memo[amount] = minCoins;
        return minCoins;
    }
}
