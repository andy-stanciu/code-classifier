class Solution {

    public int coinChange(int[] coins, int amount) {
        // this problem is slight change of unbounded knapsack problem
        // in this we have two choices
        // we can include a coin to make a amount or we exclude a coin
        // time complexity is same as knapsack problem i.e O(N.W)
        int n = coins.length;
        int[][] dp = new int[n + 1][amount + 1];
        // take min of exclude and include
        // exclude is from previous row and same col
        // include is 1 + dp[i][j - coins[i]];
        // exclude is dp[i -1][j];
        // here 1 is that we are telling that we are including that particular coin
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= amount; j++) {
                if (j == 0)
                    dp[i][j] = 0;
                else if (i == 0)
                    dp[i][j] = 100000;
                else if (coins[i - 1] > j)
                    dp[i][j] = dp[i - 1][j];
                else
                    dp[i][j] = Math.min(1 + dp[i][j - coins[i - 1]], dp[i - 1][j]);
            }
        }
        return dp[n][amount] > 1e4 ? -1 : dp[n][amount];
    }
}
