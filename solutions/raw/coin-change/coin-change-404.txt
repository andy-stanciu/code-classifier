class Solution {

    public int coinChange(int[] coins, int amount) {
        // int[][] dp = new int[2][amount+1];
        // for(int i=0; i<=coins.length; i++){
        //     for(int j=0; j<dp[0].length; j++){
        //         if(i==0){
        //             dp[i][j]= j==0? 0: -1;
        //         } else if(j==0){
        //             dp[i%2][j]=0;
        //         } else {
        //             int r= i%2;
        //             dp[r][j]=dp[(r+1)%2][j];
        //             if((j-coins[i-1])>=0 && dp[r][j-coins[i-1]]>=0){
        //                 dp[r][j]= dp[r][j]!=-1 ? Math.min(dp[r][j], 1+dp[r][j-coins[i-1]]): dp[r][j-coins[i-1]]+1;
        //             }
        //         }
        //     }
        // }
        // return dp[(coins.length%2)][amount];
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, -1);
        dp[0] = 0;
        for (int i = 0; i < coins.length; i++) {
            for (int j = 1; j <= amount; j++) {
                if (j - coins[i] >= 0 && dp[j - coins[i]] >= 0) {
                    dp[j] = dp[j] != -1 ? Math.min(dp[j], 1 + dp[j - coins[i]]) : 1 + dp[j - coins[i]];
                }
            }
        }
        return dp[amount];
    }
    // public int coinChange(int[] coins, int amount) {
    //     int[][] dp = new int[coins.length][amount+1];
    //     int nas =helper(coins, amount, 0, dp);
    //     if(nas==Integer.MAX_VALUE) {
    //         return -1;
    //     }
    //     return nas;
    // }
    // public int helper(int[] coins, int amount, int index, int[][] dp) {
    //     if(amount==0){
    //         return 0;
    //     }
    //     if(index>=coins.length || amount<0){
    //         return Integer.MAX_VALUE;
    //     }
    //     if(dp[index][amount]!=0){
    //         return dp[index][amount];
    //     }
    //     int include = helper(coins, amount-coins[index], index, dp);
    //     int notInclude= helper(coins, amount, index+1, dp);
    //     dp[index][amount] =  Math.min(include==Integer.MAX_VALUE ? Integer.MAX_VALUE:1+include, notInclude);
    //     return dp[index][amount];
    // }
}
