class Solution {

    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, -1);
        int k = an(amount, coins, dp);
        if (k == Integer.MAX_VALUE) {
            return -1;
        }
        return k;
    }

    static int an(int n, int[] a, int[] dp) {
        if (n <= 0) {
            return 0;
        }
        if (dp[n] != -1) {
            return dp[n];
        }
        int count = Integer.MAX_VALUE;
        for (int i = 0; i < a.length; i++) {
            if (n - a[i] >= 0) {
                int p = an(n - a[i], a, dp);
                if (p != Integer.MAX_VALUE && p + 1 < count) {
                    count = p + 1;
                }
            }
        }
        return dp[n] = count;
    }
}
