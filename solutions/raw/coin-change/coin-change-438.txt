class Solution {

    int[] coins;

    Integer[] cache;

    public int coinChange(int[] coins, int amount) {
        this.coins = coins;
        cache = new Integer[amount + 1];
        return dfs(amount);
    }

    public int dfs(int amount) {
        if (amount == 0)
            return 0;
        if (amount < 0)
            return -1;
        if (cache[amount] != null)
            return cache[amount];
        int minCoinsForChange = Integer.MAX_VALUE;
        for (int coin : coins) {
            int curMin = dfs(amount - coin);
            if (curMin != -1) {
                minCoinsForChange = Math.min(minCoinsForChange, curMin);
            }
        }
        //couldn\'t find a combination of coins
        if (minCoinsForChange == Integer.MAX_VALUE) {
            minCoinsForChange = -1;
        } else
            minCoinsForChange += 1;
        return cache[amount] = minCoinsForChange;
    }
}
