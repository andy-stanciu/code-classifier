class Solution {

    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int[][] dp = new int[n][amount + 1];
        // for(int row[] : dp){
        //     Arrays.fill(row,-1);
        // }
        // int ans=helper(coins.length-1,amount,coins,dp);
        // if(ans>=1e9){
        //     return -1;
        // }
        for (int i = 0; i <= amount; i++) {
            if (i % coins[0] == 0) {
                dp[0][i] = i / coins[0];
            } else {
                dp[0][i] = (int) 1e9;
            }
        }
        for (int ind = 1; ind < n; ind++) {
            for (int target = 0; target <= amount; target++) {
                int notTake = 0 + dp[ind - 1][target];
                int take = Integer.MAX_VALUE;
                if (coins[ind] <= target) {
                    take = 1 + dp[ind][target - coins[ind]];
                }
                dp[ind][target] = Math.min(notTake, take);
            }
        }
        if (dp[n - 1][amount] >= (int) 1e9) {
            return -1;
        } else {
            return dp[n - 1][amount];
        }
    }
    // public int helper(int ind,int target,int coins[], int dp[][]){
    //     //base case
    //     if(ind==0){
    //         if(target % coins[ind]==0){
    //             return target/coins[ind];
    //         }else{
    //             return (int)1e9;
    //         }
    //     }
    //     if(dp[ind][target]!=-1){
    //         return dp[ind][target];
    //     }
    //     int notTake=0+helper(ind-1,target,coins,dp);
    //     int take=Integer.MAX_VALUE;
    //     if(coins[ind]<=target){
    //         take=1+helper(ind,target-coins[ind],coins,dp);
    //     }
    //     return dp[ind][target]=Math.min(notTake,take);
    // }
}
