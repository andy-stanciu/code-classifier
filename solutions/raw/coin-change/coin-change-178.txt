class Solution {

    public int coinChange(int[] coins, int amount) {
        // Initialize a dp array with a size of amount + 1 and fill it with a value greater than the amount
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, amount + 1);
        // Base case: no coins are needed to make up an amount of 0
        dp[0] = 0;
        // Loop through all amounts from 1 to amount
        for (int i = 1; i <= amount; i++) {
            // Loop through all coins
            for (int coin : coins) {
                // If the coin is less than or equal to the current amount
                if (coin <= i) {
                    // Update the dp array with the minimum number of coins needed
                    dp[i] = Math.min(dp[i], dp[i - coin] + 1);
                }
            }
        }
        // If dp[amount] is still greater than the amount, it means we cannot make up the amount with the given coins
        return dp[amount] > amount ? -1 : dp[amount];
    }
}
