class Solution {

    public int coinChange(int[] coins, int amount) {
        int index = coins.length - 1;
        int[][] dp = new int[coins.length][amount + 1];
        for (int[] i : dp) {
            Arrays.fill(i, -1);
        }
        int n = formCoin(coins, amount, index, dp);
        if (n == (int) Math.pow(10, 9)) {
            return -1;
        }
        return n;
    }

    public int formCoin(int[] coins, int amount, int index, int[][] dp) {
        if (amount == 0) {
            return 0;
        }
        if (index == 0) {
            if (amount % coins[index] == 0) {
                return dp[index][amount] = amount / coins[index];
            } else {
                return (int) Math.pow(10, 9);
            }
        }
        if (dp[index][amount] != -1) {
            return dp[index][amount];
        }
        int sum = -1;
        if (coins[index] > amount) {
            int nottake = formCoin(coins, amount, index - 1, dp);
            sum = nottake;
        } else {
            int take = 1 + formCoin(coins, amount - coins[index], index, dp);
            int nottake = formCoin(coins, amount, index - 1, dp);
            sum = Math.min(take, nottake);
        }
        return dp[index][amount] = sum;
    }
}
