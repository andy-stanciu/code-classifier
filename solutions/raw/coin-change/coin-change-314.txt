class Solution {

    public int coinChange(int[] coins, int amount) {
        int[][] dp = new int[coins.length][amount + 1];
        for (int[] a : dp) Arrays.fill(a, -1);
        int ans = coinChangeRec(0, coins, amount, dp);
        if (ans >= (int) 1e9)
            return -1;
        return ans;
    }

    public int coinChangeRec(int i, int[] coins, int target, int[][] dp) {
        if (target == 0)
            return 0;
        if (i >= coins.length)
            return (int) 1e9;
        if (coins[i] > target)
            return coinChangeRec(i + 1, coins, target, dp);
        if (dp[i][target] != -1)
            return dp[i][target];
        // taken and called for same i as infinite supply
        int l = 1 + coinChangeRec(i, coins, target - coins[i], dp);
        // not take
        int r = coinChangeRec(i + 1, coins, target, dp);
        return dp[i][target] = Math.min(l, r);
    }
}
