class Solution {

    int[][] dp;

    public int coinChange(int[] coins, int amount) {
        if (amount == 0)
            return 0;
        //create dp array and fill eerything in it with -1
        dp = new int[coins.length][amount + 1];
        for (int[] row : dp) Arrays.fill(row, -1);
        int ans = countMinCoins(coins, amount, coins.length - 1);
        if (ans == Integer.MAX_VALUE)
            return -1;
        else
            return ans;
    }

    public int countMinCoins(int[] coins, int sum, int i) {
        if (i < 0 || sum < 0)
            return Integer.MAX_VALUE;
        if (sum == 0)
            return 0;
        //if dp val isnt -1 means we have filled it already to return it
        if (dp[i][sum] != -1)
            return dp[i][sum];
        int countOne = countMinCoins(coins, sum - coins[i], i);
        if (countOne != Integer.MAX_VALUE)
            countOne += 1;
        int countTwo = countMinCoins(coins, sum, i - 1);
        //store the min val at our current position (i, sum) and return it.
        return dp[i][sum] = Math.min(countOne, countTwo);
    }
}
