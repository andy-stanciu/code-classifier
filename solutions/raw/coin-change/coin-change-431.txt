class Solution {

    public int coinChange(int[] coins, int amount) {
        int result = coinChangeM(coins, amount);
        if (result == Integer.MAX_VALUE) {
            return -1;
        }
        return result;
    }

    public int coinChangeM(int[] coins, int sum) {
        return coinChangeTabular(coins, coins.length, sum);
    }

    public static int coinChangeTabular(int[] coins, int n, int sum) {
        int[] dp = new int[sum + 1];
        //For sum 0 minimum coin needed is zero ;
        dp[0] = 0;
        for (int i = 1; i <= sum; i++) {
            int res = Integer.MAX_VALUE;
            for (int j = 0; j < n; j++) {
                if (coins[j] <= i) {
                    int pre_min = dp[i - coins[j]];
                    if (pre_min != Integer.MAX_VALUE) {
                        res = Math.min(res, pre_min + 1);
                    }
                }
            }
            dp[i] = res;
        }
        return dp[sum];
    }
}
