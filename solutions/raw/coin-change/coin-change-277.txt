class Solution {

    public int coinChange(int[] coins, int amount) {
        if (amount == 0)
            return 0;
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();
        queue.add(amount);
        visited.add(amount);
        int steps = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int currentAmount = queue.poll();
                if (currentAmount == 0)
                    return steps;
                for (int coin : coins) {
                    int nextAmount = currentAmount - coin;
                    if (nextAmount >= 0 && !visited.contains(nextAmount)) {
                        visited.add(nextAmount);
                        queue.add(nextAmount);
                    }
                }
            }
            steps++;
        }
        return -1;
    }
}
