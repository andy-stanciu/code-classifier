class Solution {

    public int coinChange(int[] coins, int amount) {
        // int dp[][]=new int[coins.length][Integer.MAX_VALUE];
        Map<String, Integer> res = new HashMap<>();
        int ans = coinChange(coins, amount, 0, 0, res);
        return ans == Integer.MAX_VALUE - 1 ? -1 : ans;
    }

    public int coinChange(int[] coins, int amount, int index, int sum, Map<String, Integer> res) {
        if (amount == sum) {
            return 0;
        }
        if (index >= coins.length || sum > amount) {
            if (amount == sum) {
                return 0;
            }
            return Integer.MAX_VALUE - 1;
        }
        if (res.containsKey(String.valueOf(index) + String.valueOf(sum))) {
            return res.get(String.valueOf(index) + String.valueOf(sum));
        }
        int include = 1 + coinChange(coins, amount, index, sum + coins[index], res);
        int exclude = coinChange(coins, amount, index + 1, sum, res);
        res.put(String.valueOf(index) + String.valueOf(sum), Math.min(include, exclude));
        return Math.min(include, exclude);
    }
}
