class Solution {

    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        // Arrays.sort(coins);
        int[][] dp = new int[n + 1][amount + 1];
        //Initialize first row with Integer.MAX_VALUE-1, since mathematically its infinite to achieve the row values.
        Arrays.fill(dp[0], Integer.MAX_VALUE - 1);
        //Initialize first column with 0, since there are 0 coins required to acheive this.
        for (int i = 0; i < n + 1; i++) {
            dp[i][0] = 0;
        }
        // Intialize the second row starting from 1,1
        // for(int j=1; j<amount+1; j++) {
        //     if(j%coins[0] == 0){ //when size of coins array is 1
        //         dp[1][j] = j/coins[0];
        //     } else {
        //         dp[1][j] = Integer.MAX_VALUE-1;
        //     }
        // }
        for (int i = 1; i < n + 1; i++) {
            for (int j = 1; j < amount + 1; j++) {
                if (coins[i - 1] <= j) {
                    dp[i][j] = Math.min(1 + dp[i][j - coins[i - 1]], dp[i - 1][j]);
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[n][amount] == Integer.MAX_VALUE - 1 ? -1 : dp[n][amount];
    }
}
