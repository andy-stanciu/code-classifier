class Solution {

    public int countChange(int[] coins, int amount, int[][] dp, int idx) {
        // base case
        if (idx == 0) {
            if (amount % coins[0] == 0) {
                return amount / coins[0];
            }
            return (int) 1e9;
        }
        if (dp[idx][amount] != -1) {
            return dp[idx][amount];
        }
        int pickVal = (int) 1e9;
        // Fix here
        int notPick = countChange(coins, amount, dp, idx - 1);
        if (coins[idx] <= amount) {
            pickVal = 1 + countChange(coins, amount - coins[idx], dp, idx);
        }
        dp[idx][amount] = Math.min(pickVal, notPick);
        return dp[idx][amount];
    }

    public int coinChange(int[] coins, int amount) {
        // We will make a 2-D DP
        int[][] dp = new int[coins.length][amount + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        int n = coins.length;
        int ans = countChange(coins, amount, dp, n - 1);
        if (ans == (int) 1e9) {
            return -1;
        }
        return ans;
    }
}
