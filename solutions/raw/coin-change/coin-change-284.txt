class Solution {

    public int coinChange(int[] A, int amount) {
        //base condition
        if (amount < 1) {
            return 0;
        }
        //create an array to store to calculate the choices
        //(since the arrays beging with index 0, we gotta take an extra space)
        int[] sample = new int[amount + 1];
        //iterate through the input array beginning 1
        for (int i = 1; i <= amount; i++) {
            //we will take some unreachable value(infinite coin choices) and assign it to the ith element
            sample[i] = Integer.MAX_VALUE;
            //again iterate through the array
            for (int coin : A) {
                //we have to calculate if the coin choice is less than index value and
                //it should be possible to find the coin choices for the remainder (coin choice - i)
                if (coin <= i && sample[i - coin] != Integer.MAX_VALUE) {
                    //choose the minimum number of coin choices and fill out the array
                    sample[i] = Math.min(sample[i], 1 + sample[i - coin]);
                }
            }
        }
        //if we are unable to choose the choices, we will return -1 as per the problem statement
        if (sample[amount] == Integer.MAX_VALUE) {
            return -1;
        } else //return our element at the amountth position
        {
            return sample[amount];
        }
    }
}
