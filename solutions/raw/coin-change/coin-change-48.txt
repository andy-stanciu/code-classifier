class Solution {

    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int[][] dp = new int[n + 1][amount + 1];
        /* j here is amount, and i is size of coins array, now when size of array is 0 
            whats the minimum element we will need to make amount 1,2... etc , answer is we                 cannot make as there is no element present or we will need infinite number of elements
            so just add Integer.MAX_VALUE;
         */
        for (int j = 0; j <= amount; j++) {
            dp[0][j] = Integer.MAX_VALUE;
        }
        /* Now, when we need amount 0, and if we have array size 0,1,2,3... etc. can we make 
            amount 0 ? Yes we can make by not adding any element. So just add 0 in them.
        */
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 0;
        }
        //From above we have base cases and now we need to fill other subproblems so loop from [1][1]
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= amount; j++) {
                if (coins[i - 1] <= j) {
                    if (//check this because we cannot add 1 to MAXVAL.
                    dp[i][j - coins[i - 1]] != Integer.MAX_VALUE)
                        dp[i][j] = Math.min(1 + dp[i][j - coins[i - 1]], dp[i - 1][j]);
                    else
                        //if the above condition is maxVal obvio we our dp[i-1][j] will be smaller.
                        dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[n][amount] == Integer.MAX_VALUE ? -1 : dp[n][amount];
    }
}
