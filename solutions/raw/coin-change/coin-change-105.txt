class Solution {

    public int coinChange(int[] coins, int amount) {
        int[][] dp = new int[coins.length + 1][amount + 1];
        for (int i = 0; i < coins.length + 1; i++) {
            for (int j = 0; j < amount + 1; j++) {
                if (i == 0) {
                    dp[i][j] = Integer.MAX_VALUE - 1;
                }
                if (j == 0) {
                    dp[i][j] = 0;
                }
            }
        }
        for (int i = 1; i < coins.length + 1; i++) {
            for (int j = 1; j < amount + 1; j++) {
                if (coins[i - 1] > j) {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = Math.min(dp[i - 1][j], 1 + dp[i][j - coins[i - 1]]);
                }
            }
        }
        int result = dp[coins.length][amount];
        return result == Integer.MAX_VALUE - 1 ? -1 : result;
    }

    private int minCoin(int[] coins, int amount, int n) {
        if (amount == 0) {
            return 0;
        }
        if (n == 0) {
            return Integer.MAX_VALUE - 1;
        }
        if (coins[n - 1] > amount) {
            return (minCoin(coins, amount, n - 1));
        } else {
            return (Math.min(minCoin(coins, amount, n - 1), 1 + minCoin(coins, amount - coins[n - 1], n)));
        }
    }
}
