class Solution {

    public int coinChange(int[] coins, int amount) {
        // int[] mem = new int[amount+1];
        // Arrays.fill(mem, Integer.MAX_VALUE);
        // return memoization(coins, amount, mem);
        return tabulation(coins, amount);
    }

    private int tabulation(int[] coins, int amt) {
        int[] dp = new int[amt + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 0; i <= amt; i++) {
            if (dp[i] != Integer.MAX_VALUE) {
                for (int c : coins) {
                    int next = i + c;
                    if (next >= 0 && next <= amt) {
                        dp[next] = Math.min(dp[next], dp[i] + 1);
                    }
                }
            }
        }
        return (dp[amt] == Integer.MAX_VALUE) ? -1 : dp[amt];
    }

    private int memoization(int[] coins, int amt, int[] mem) {
        if (amt == 0) {
            return 0;
        }
        if (mem[amt] != Integer.MAX_VALUE) {
            //if memo\'d before:
            return mem[amt];
        }
        int min = Integer.MAX_VALUE;
        for (int c : coins) {
            int rem = amt - c;
            if (rem >= 0) {
                int next = memoization(coins, rem, mem);
                if (next != -1) {
                    //if the remainder can be constructed:
                    min = Math.min(min, next + 1);
                }
            }
        }
        mem[amt] = (min == Integer.MAX_VALUE) ? -1 : min;
        return mem[amt];
    }

    private int bruteForce(int[] coins, int amt) {
        if (amt == 0) {
            return 0;
        }
        int min = Integer.MAX_VALUE;
        for (int c : coins) {
            int rem = amt - c;
            if (rem >= 0) {
                int next = bruteForce(coins, rem);
                if (next != -1) {
                    min = Math.min(min, next + 1);
                }
            }
        }
        return (min == Integer.MAX_VALUE) ? -1 : min;
    }
}
