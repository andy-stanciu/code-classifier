class Solution {

    public long cointCount(int i, int[] coins, int amount, long[][] dp) {
        if (i == -1) {
            if (// no more coint neeedeed
            amount == 0)
                // no more coint neeedeed
                return 0;
            else
                // not a valid compbination
                return Integer.MAX_VALUE;
        }
        if (dp[i][amount] != -1)
            return dp[i][amount];
        long skip = cointCount(i - 1, coins, amount, dp);
        if (amount - coins[i] < 0)
            return dp[i][amount] = skip;
        long pick = 1 + cointCount(i, coins, amount - coins[i], dp);
        return dp[i][amount] = Math.min(skip, pick);
    }

    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        long[][] dp = new long[n][amount + 1];
        for (int i = 0; i < dp.length; i++) for (int j = 0; j < dp[0].length; j++) dp[i][j] = -1;
        int ans = (int) cointCount(n - 1, coins, amount, dp);
        if (ans == Integer.MAX_VALUE)
            return -1;
        return ans;
    }
}
