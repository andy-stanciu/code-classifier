class Solution {

    public int coinChange(int[] coins, int amount) {
        int[][] dp = new int[coins.length][amount + 1];
        for (int i = 0; i < dp.length; i++) {
            Arrays.fill(dp[i], -1);
        }
        int ans = helper(0, coins, amount, dp);
        return ans >= (int) 1e9 ? -1 : ans;
    }

    int helper(int index, int[] coins, int amount, int[][] dp) {
        if (index == coins.length - 1) {
            if (amount % coins[index] == 0)
                return amount / coins[index];
            return (int) 1e9;
        }
        if (dp[index][amount] != -1)
            return dp[index][amount];
        int pick = Integer.MAX_VALUE;
        if (amount - coins[index] >= 0) {
            pick = 1 + helper(index, coins, amount - coins[index], dp);
        }
        int notPick = 0 + helper(index + 1, coins, amount, dp);
        return dp[index][amount] = Math.min(pick, notPick);
    }
}
