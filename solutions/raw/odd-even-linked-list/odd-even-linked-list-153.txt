/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode oddEvenList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        // Pehle, odd aur even pointers set karte hain: odd pehle node ko point karta hai aur even doosre node ko. Ek evenHead pointer ko use karke even list ka start track karte hain.
        ListNode odd = head;
        ListNode even = head.next;
        ListNode evenHead = even;
        //Phir loop me odd aur even nodes ko update karte hain: odd nodes ko ek saath link karte hain aur even nodes ko alag chain me. Jab loop khatam hota hai, odd list ke end me even list ko attach karte hain.
        while (even != null && even.next != null) {
            odd.next = odd.next.next;
            odd = odd.next;
            even.next = even.next.next;
            even = even.next;
        }
        odd.next = evenHead;
        return head;
    }
}
