class Solution {

    public ListNode oddEvenList(ListNode head) {
        // Edge case: if the list is empty or has only one node, return head
        if (head == null || head.next == null) {
            return head;
        }
        // Start with the first node (odd)
        ListNode odd = head;
        // Start with the second node (even)
        ListNode even = head.next;
        // Save the head of the even list
        ListNode evenHead = even;
        while (even != null && even.next != null) {
            // Connect current odd node to the next odd node
            odd.next = even.next;
            // Move odd pointer forward
            odd = odd.next;
            // Connect current even node to the next even node
            even.next = odd.next;
            // Move even pointer forward
            even = even.next;
        }
        // Connect the end of the odd list to the head of the even list
        odd.next = evenHead;
        return head;
    }
}
