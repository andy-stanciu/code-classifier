/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode oddEvenList(ListNode head) {
        if (head == null) {
            return null;
        }
        ListNode oddHead = new ListNode(-1);
        ListNode evenHead = new ListNode(-1);
        ListNode odd = oddHead;
        ListNode even = evenHead;
        ListNode cur = head;
        int counter = 1;
        while (cur != null) {
            if (counter % 2 == 1) {
                // Odd position
                odd.next = cur;
                odd = odd.next;
            } else {
                // Even position
                even.next = cur;
                even = even.next;
            }
            cur = cur.next;
            counter++;
        }
        // Combine odd and even lists
        odd.next = evenHead.next;
        // End the even list
        even.next = null;
        // Skip the dummy node
        return oddHead.next;
    }
}
