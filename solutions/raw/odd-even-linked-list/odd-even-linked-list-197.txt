/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode oddEvenList(ListNode head) {
        if (head == null) {
            // If list is empty, return null
            return null;
        }
        // Odd nodes start from head
        ListNode odd = head;
        // Even nodes start from second node
        ListNode even = head.next;
        // We store the head of even nodes
        ListNode evenHead = even;
        // Loop to separate the odd and even nodes
        while (even != null && even.next != null) {
            // Link current odd to the next odd
            odd.next = even.next;
            // Move odd pointer to the next odd node
            odd = odd.next;
            // Link current even to the next even
            even.next = odd.next;
            // Move even pointer to the next even node
            even = even.next;
        }
        // Connect the last odd node to the first even node
        odd.next = evenHead;
        // Return the reordered list
        return head;
    }
}
