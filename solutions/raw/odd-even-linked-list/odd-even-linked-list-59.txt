/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode oddEvenList(ListNode head) {
        if (head == null) {
            return head;
        }
        //store null to make the dummy.next as null to avoid the cycle,store previous node if the no. of nodes are even
        ListNode h = head, n = null, pre = null;
        //create a dummy node to point all the even indexed nodes
        ListNode dummy = new ListNode();
        ListNode d = dummy;
        while (head != null && head.next != null) {
            pre = head;
            dummy.next = head.next;
            head.next = head.next.next;
            head = head.next;
            dummy = dummy.next;
            dummy.next = n;
        }
        if (head == null) {
            //if the total nodes are even
            pre.next = d.next;
        } else {
            //if the total nodes are odd
            head.next = d.next;
        }
        return h;
    }
}
