class Solution {

    public ListNode oddEvenList(ListNode head) {
        if (head == null)
            return null;
        ListNode odd = head;
        ListNode even = head.next;
        ListNode evenHead = even;
        // Traverse the list, segregating odd and even nodes
        while (even != null && even.next != null) {
            odd.next = odd.next.next;
            even.next = even.next.next;
            odd = odd.next;
            even = even.next;
        }
        // Connect the end of the odd list to the start of the even list
        odd.next = evenHead;
        // Return the modified list starting from the head
        return head;
    }
}
