class Solution {

    int listLength = 0;

    public ListNode lastNode(ListNode head) {
        int currLength = 1;
        ListNode prev = null;
        ListNode curr = head;
        while (curr.next != null) {
            prev = curr;
            currLength++;
            curr = curr.next;
        }
        listLength = currLength;
        if (currLength % 2 == 0) {
            return prev;
        }
        return curr;
    }

    public ListNode oddEvenList(ListNode head) {
        if (head == null)
            return null;
        ListNode last = lastNode(head);
        boolean isEvenLength = false;
        ListNode lastNext = last.next;
        if (listLength % 2 == 0) {
            lastNext = last.next;
            last.next = null;
            listLength--;
            isEvenLength = true;
        }
        ListNode prev = null;
        ListNode curr = head;
        for (int i = 1; i <= listLength; i++) {
            if (i % 2 != 0) {
                prev = curr;
                curr = curr.next;
            } else {
                ListNode nextNode = curr.next;
                prev.next = nextNode;
                curr.next = null;
                last.next = curr;
                last = last.next;
                curr = prev.next;
            }
        }
        if (isEvenLength) {
            last.next = lastNext;
        }
        return head;
    }
}
