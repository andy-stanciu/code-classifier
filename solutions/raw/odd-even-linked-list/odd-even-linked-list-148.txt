/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode oddEvenList(ListNode head) {
        // Step 1: Handle edge cases where the list is too short
        if (head == null || head.next == null) {
            return head;
        }
        // Step 2: Initialize pointers
        // Pointer to the first odd node
        ListNode odd = head;
        // Pointer to the first even node
        ListNode even = head.next;
        // Store the first even node
        ListNode firstEven = head.next;
        // Step 3: Rearrange nodes while there are more even-indexed nodes
        while (even != null && even.next != null) {
            // Connect current odd node to the next odd node
            odd.next = even.next;
            // Move odd pointer forward
            odd = odd.next;
            // Connect current even node to the next even node
            even.next = odd.next;
            // Move even pointer forward
            even = even.next;
        }
        // Step 4: Connect the last odd node to the first even node
        odd.next = firstEven;
        // Step 5: Return the modified head of the linked list
        return head;
    }
}
