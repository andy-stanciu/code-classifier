/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode oddEvenList(ListNode head) {
        // if no node or one node or two nodes we dont need to change anything
        if (head == null || head.next == null || head.next.next == null)
            return head;
        // start at head, point newhead to the second node.
        ListNode curr = head, next = head, newhead = head.next;
        // count is to keep track of the count of nodes. Start with 1 because we are starting at head
        int count = 1;
        while (curr.next != null) {
            // until we reach last node
            // preserve the next node
            next = curr.next;
            if (next.next == null) {
                // now we are on the last but one node.
                if ((count & 1) == 0) {
                    // if it is even index node put its next to next.next which is null.
                    curr.next = next.next;
                } else {
                    // if it is odd index node point it to the newhead
                    curr.next = newhead;
                }
            } else
                // we are not on the last but one node.
                curr.next = next.next;
            curr = next;
            count++;
        }
        // we are on the last node
        if (// if it is even index node point its next to null
        (count & 1) == 0)
            // if it is even index node point its next to null
            curr.next = null;
        else
            // if it is odd index node point its next to newhead
            curr.next = newhead;
        return head;
    }
}
