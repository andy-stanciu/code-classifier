/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode oddEvenList(ListNode head) {
        if (head == null || head.next == null || head.next.next == null) {
            return head;
        }
        ListNode odd = new ListNode(head.val);
        ;
        ListNode even = new ListNode(head.next.val);
        ;
        ListNode oddPtr = odd;
        ListNode evenPtr = even;
        ListNode ptr = head.next.next;
        int count = 2;
        while (ptr != null) {
            count++;
            if (count % 2 == 0) {
                ListNode n = new ListNode(ptr.val);
                evenPtr.next = n;
                evenPtr = evenPtr.next;
            } else {
                ListNode n = new ListNode(ptr.val);
                oddPtr.next = n;
                oddPtr = oddPtr.next;
            }
            if (ptr.next == null) {
                oddPtr.next = even;
            }
            ptr = ptr.next;
        }
        return odd;
    }
}
