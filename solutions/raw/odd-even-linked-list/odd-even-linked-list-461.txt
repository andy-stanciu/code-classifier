/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode oddEvenList(ListNode head) {
        // If the list is empty or has less than 3 nodes,we\'ll return it as it is.
        if (head == null || head.next == null || head.next.next == null)
            return head;
        // ListNode temp2=head.next;
        //--------------------------> Pointer for odd-indexed nodes
        ListNode odd = head;
        //--------------------> Pointer for even-indexed nodes
        ListNode even = head.next;
        //-------------------------> Pointer for even head
        ListNode temp = even;
        while (odd.next != null && temp.next != null) {
            odd.next = temp.next;
            odd = temp.next;
            temp.next = odd.next;
            temp = odd.next;
        }
        //------------------------------> Connect the end of odd list to the start of even list
        odd.next = even;
        return head;
    }
}
