/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode oddEvenList(ListNode head) {
        if (head == null)
            return null;
        ListNode node = head;
        List<Integer> oddList = new LinkedList<>();
        List<Integer> evenList = new LinkedList<>();
        int index = 1;
        while (node != null) {
            if (index % 2 == 1) {
                oddList.add(node.val);
            } else {
                evenList.add(node.val);
            }
            index++;
            node = node.next;
        }
        ListNode res = head;
        while (res != null) {
            while (!oddList.isEmpty()) {
                res.val = oddList.removeFirst();
                res = res.next;
            }
            while (!evenList.isEmpty()) {
                res.val = evenList.removeFirst();
                res = res.next;
            }
        }
        return head;
    }
}
