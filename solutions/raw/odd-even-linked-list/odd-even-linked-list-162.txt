/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode oddEvenList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode currentOddNode = head;
        ListNode currentEvenNode = head.next;
        ListNode oddFirstNode = head;
        ListNode evenFirstNode = head.next;
        ListNode oddLastNode = new ListNode();
        ListNode evenLastNode = new ListNode();
        while (true) {
            // if(currentOddNode.next == null){
            //     oddLastNode = currentOddNode;
            //     evenLastNode = currentEvenNode;
            //     currentEvenNode.next = currentEvenNode.next.next;
            //     break;
            // }
            if (currentEvenNode.next == null) {
                evenLastNode = currentEvenNode;
                oddLastNode = currentOddNode;
                currentOddNode.next = currentOddNode.next.next;
                System.out.println(currentOddNode.val + " " + currentEvenNode.val);
                break;
            } else if (currentEvenNode.next.next == null) {
                evenLastNode = currentEvenNode;
                currentOddNode.next = currentOddNode.next.next;
                currentOddNode = currentOddNode.next;
                oddLastNode = currentOddNode;
                currentEvenNode.next = currentEvenNode.next.next;
                System.out.println(currentOddNode.val + " " + currentEvenNode.val);
                break;
            }
            System.out.println(currentOddNode.val + " " + currentEvenNode.val);
            currentOddNode.next = currentOddNode.next.next;
            currentEvenNode.next = currentEvenNode.next.next;
            currentOddNode = currentOddNode.next;
            System.out.println(currentOddNode.val);
            currentEvenNode = currentEvenNode.next;
        }
        oddLastNode.next = evenFirstNode;
        ListNode currentNode = head;
        while (currentNode.next != null) {
            System.out.println(currentNode.val);
            currentNode = currentNode.next;
        }
        return oddFirstNode;
    }
}
