public class Solution {

    public ListNode oddEvenList(ListNode head) {
        if (head == null || head.next == null) {
            // If the list is empty or has only one node, return it as is.
            return head;
        }
        // Initialize pointers for odd and even nodes
        ListNode odd = head;
        ListNode even = head.next;
        // Keep the head of the even list
        ListNode evenHead = even;
        while (even != null && even.next != null) {
            // Link the next odd node
            odd.next = even.next;
            // Move the odd pointer
            odd = odd.next;
            // Link the next even node
            even.next = odd.next;
            // Move the even pointer
            even = even.next;
        }
        // Connect the end of the odd list to the head of the even list
        odd.next = evenHead;
        return head;
    }

    public static void main(String[] args) {
        // Example usage
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);
        Solution solution = new Solution();
        ListNode result = solution.oddEvenList(head);
        // Print result
        while (result != null) {
            System.out.print(result.val + " ");
            result = result.next;
        }
        // Output: 1 3 5 2 4
    }
}
