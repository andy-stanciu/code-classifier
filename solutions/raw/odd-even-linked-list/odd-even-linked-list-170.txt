/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode oddEvenList(ListNode head) {
        // Edge case: If the list is empty or has only one node
        if (head == null || head.next == null) {
            // Return the head as is
            return head;
        }
        // Start with the first node (odd indexed)
        ListNode odd = head;
        // Start with the second node (even indexed)
        ListNode even = head.next;
        // Store the head of the even list
        ListNode evenHead = even;
        // Traverse the list and rearrange the nodes
        while (even != null && even.next != null) {
            // Link the next odd indexed node
            odd.next = even.next;
            // Move to the next odd node
            odd = odd.next;
            // Link the next even indexed node
            even.next = odd.next;
            // Move to the next even node
            even = even.next;
        }
        // Connect the last odd node to the head of the even list
        odd.next = evenHead;
        // Return the rearranged list
        return head;
    }
}
