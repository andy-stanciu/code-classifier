/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode oddEvenList(ListNode current) {
        if (current == null)
            return null;
        int index = 1;
        ListNode next = null;
        ListNode prevEven = null;
        ListNode prevOdd = null;
        ListNode evenList = null;
        ListNode oddList = null;
        ListNode startEvenList = null;
        ListNode startOddList = null;
        while (current != null) {
            next = current.next;
            current.next = null;
            if (index % 2 == 0) {
                if (evenList == null) {
                    prevEven = current;
                    evenList = current;
                    startEvenList = current;
                } else {
                    prevEven.next = current;
                    prevEven = current;
                    evenList.next = current;
                    evenList = evenList.next;
                }
            } else {
                if (oddList == null) {
                    prevOdd = current;
                    oddList = current;
                    startOddList = current;
                } else {
                    prevOdd.next = current;
                    prevOdd = current;
                    oddList.next = current;
                    oddList = oddList.next;
                }
            }
            current = next;
            index++;
        }
        oddList.next = startEvenList;
        return startOddList;
    }
}
