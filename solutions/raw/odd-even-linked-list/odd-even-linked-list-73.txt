/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    static int countNodes(ListNode head) {
        int count = 0;
        ListNode current = head;
        while (current != null) {
            count++;
            current = current.next;
        }
        return count;
    }

    public ListNode oddEvenList(ListNode head) {
        int n = countNodes(head);
        if (n == 0 || n == 1) {
            return head;
        }
        ListNode start = new ListNode();
        ListNode head2 = start;
        while (n != 1) {
            head2.next = new ListNode();
            head2 = head2.next;
            n--;
        }
        ListNode current = head;
        head2 = start;
        while (current != null) {
            head2.val = current.val;
            if (head2.next == null) {
                break;
            }
            head2 = head2.next;
            if (current.next == null || current.next.next == null) {
                break;
            }
            current = current.next.next;
        }
        current = head;
        current = current.next;
        while (current != null) {
            head2.val = current.val;
            if (head2.next == null) {
                break;
            }
            head2 = head2.next;
            if (current.next == null || current.next.next == null) {
                break;
            }
            current = current.next.next;
        }
        return start;
    }
}
