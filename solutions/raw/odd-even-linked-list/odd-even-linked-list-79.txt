/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode oddEvenList(ListNode head) {
        // Head of odd list
        ListNode odd = null;
        // Tail of odd list
        ListNode oddTail = null;
        // Head of even list
        ListNode even = null;
        // Tail of even list
        ListNode evenTail = null;
        // Pointer to traverse the original list
        ListNode curr = head;
        // Counter for tracking the position in the list
        int i = 1;
        while (curr != null) {
            if (i % 2 != 0) {
                // Odd position
                if (odd == null) {
                    odd = curr;
                    oddTail = curr;
                } else {
                    oddTail.next = curr;
                    oddTail = oddTail.next;
                }
            } else {
                // Even position
                if (even == null) {
                    even = curr;
                    evenTail = curr;
                } else {
                    evenTail.next = curr;
                    evenTail = evenTail.next;
                }
            }
            // Move to the next node
            curr = curr.next;
            // Increment the position counter
            i++;
        }
        if (even != null) {
            // Terminate the even list
            evenTail.next = null;
        }
        if (odd == null) {
            // If there are no odd nodes, return the even list
            return even;
        } else {
            // Connect the odd and even lists
            oddTail.next = even;
            // Return the head of the odd list
            return odd;
        }
    }
}
