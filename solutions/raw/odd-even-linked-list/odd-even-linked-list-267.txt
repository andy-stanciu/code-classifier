/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode oddEvenList(ListNode head) {
        // Handle edge case where the list is empty
        if (head == null)
            return null;
        ArrayList<Integer> arr = new ArrayList<>();
        ListNode temp = head;
        // Adding all odd-indexed nodes into the array
        while (temp != null) {
            arr.add(temp.val);
            if (temp.next != null) {
                temp = temp.next.next;
            } else {
                break;
            }
        }
        // Adding all even-indexed nodes into the array
        temp = head.next;
        while (temp != null) {
            arr.add(temp.val);
            if (temp.next != null) {
                temp = temp.next.next;
            } else {
                break;
            }
        }
        // Replacing all the nodes with the required form
        temp = head;
        int i = 0;
        while (temp != null) {
            temp.val = arr.get(i);
            i++;
            temp = temp.next;
        }
        return head;
    }
}
