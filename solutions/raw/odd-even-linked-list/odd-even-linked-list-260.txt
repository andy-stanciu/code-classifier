public class Solution {

    public ListNode oddEvenList(ListNode head) {
        // Base cases: if list is empty or has only one node
        if (head == null || head.next == null) {
            return head;
        }
        // Initialize pointers for odd and even lists
        ListNode odd = head;
        ListNode even = head.next;
        // Save the start of the even list
        ListNode evenHead = even;
        // Traverse the list, rearranging nodes
        while (even != null && even.next != null) {
            // Skip to the next odd node
            odd.next = odd.next.next;
            // Skip to the next even node
            even.next = even.next.next;
            // Move to the next odd node
            odd = odd.next;
            // Move to the next even node
            even = even.next;
        }
        // Attach the even list to the end of the odd list
        odd.next = evenHead;
        // Return the modified list
        return head;
    }
}
