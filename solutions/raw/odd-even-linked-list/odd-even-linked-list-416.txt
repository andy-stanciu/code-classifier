/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode oddEvenList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode oddHead = null, evenHead = null, oddTail = null, evenTail = null;
        int position = 1;
        ListNode current = head;
        while (current != null) {
            if (position % 2 == 1) {
                // Odd position
                if (oddHead == null) {
                    oddHead = current;
                    oddTail = current;
                } else {
                    oddTail.next = current;
                    oddTail = current;
                }
            } else {
                // Even position
                if (evenHead == null) {
                    evenHead = current;
                    evenTail = current;
                } else {
                    evenTail.next = current;
                    evenTail = current;
                }
            }
            current = current.next;
            position++;
        }
        // Connect the last node of the odd list to the first node of the even list
        if (oddTail != null) {
            oddTail.next = evenHead;
        }
        // Set the head of the rearranged list to the head of the odd list
        head = oddHead;
        // Set the next of the last node of the even list to null
        if (evenTail != null) {
            evenTail.next = null;
        }
        return oddHead;
    }
}
