class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        //Return TopoSort using BFS and Detect Cycle in Direceted Graph
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) adj.add(new ArrayList<>());
        for (int[] edge : prerequisites) {
            int x = edge[1];
            int y = edge[0];
            adj.get(x).add(y);
        }
        int[] indegree = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            for (int node : adj.get(i)) indegree[node] += 1;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0)
                q.add(i);
        }
        List<Integer> topoList = new ArrayList<>();
        int[] topoSort = new int[numCourses];
        while (!q.isEmpty()) {
            int node = q.poll();
            topoList.add(node);
            for (int neighbour : adj.get(node)) {
                indegree[neighbour] -= 1;
                if (indegree[neighbour] == 0)
                    q.add(neighbour);
            }
        }
        if (topoList.size() < numCourses)
            return new int[0];
        for (int i = 0; i < numCourses; i++) topoSort[i] = topoList.get(i);
        return topoSort;
    }
}
