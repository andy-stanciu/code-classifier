class Solution {

    int[] indegree = null;

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        List<Integer>[] adjMatrix = makeAdjMatrix(numCourses, prerequisites);
        int[] taskOrder = topSort(numCourses, adjMatrix, indegree);
        return taskOrder;
    }

    int[] topSort(int numCourses, List<Integer>[] adjMatrix, int[] indegree) {
        int[] topo = new int[numCourses];
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        int ind = 0;
        while (!q.isEmpty()) {
            int v = q.poll();
            topo[ind++] = v;
            List<Integer> nbrs = adjMatrix[v];
            if (nbrs != null) {
                for (int i : nbrs) {
                    indegree[i]--;
                    if (indegree[i] == 0) {
                        q.add(i);
                    }
                }
            }
        }
        if (ind != numCourses) {
            return new int[] {};
        }
        return topo;
    }

    //Creates the adjacency matrix and indegree array
    List<Integer>[] makeAdjMatrix(int numCourses, int[][] prerequisites) {
        List<Integer>[] adjMatrix = new List[numCourses];
        indegree = new int[numCourses];
        for (int[] c : prerequisites) {
            if (adjMatrix[c[1]] != null) {
                adjMatrix[c[1]].add(c[0]);
                indegree[c[0]]++;
            } else {
                List<Integer> neighbors = new ArrayList<>();
                neighbors.add(c[0]);
                indegree[c[0]]++;
                adjMatrix[c[1]] = neighbors;
            }
        }
        return adjMatrix;
    }
}
