class Solution {

    public static int[] findOrder(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i <= numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        int[] indegree = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            for (int k : adj.get(i)) {
                indegree[k]++;
            }
        }
        int[] ans = new int[numCourses], i = { 0 }, vis = new int[numCourses];
        for (int k = 0; k < numCourses; k++) {
            if (indegree[k] == 0 && vis[k] == 0)
                dfs(i, ans, adj, indegree, k, vis);
        }
        if (i[0] == numCourses)
            return ans;
        int[] a = {};
        return a;
    }

    public static void dfs(int[] x, int[] ans, ArrayList<ArrayList<Integer>> adj, int[] indegree, int temp, int[] vis) {
        ans[x[0]++] = temp;
        vis[temp] = 1;
        for (int k : adj.get(temp)) {
            indegree[k]--;
            if (indegree[k] == 0 && vis[k] == 0)
                dfs(x, ans, adj, indegree, k, vis);
        }
    }
}
