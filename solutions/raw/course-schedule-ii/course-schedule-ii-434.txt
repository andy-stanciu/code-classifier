class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            graph.add(new ArrayList<>());
        }
        int n = prerequisites.length;
        for (int i = 0; i < n; i++) {
            graph.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        boolean[] check = new boolean[numCourses];
        boolean[] res = new boolean[numCourses];
        for (int i = 0; i < numCourses; i++) {
            check[i] = false;
            res[i] = false;
        }
        Stack<Integer> s = new Stack<>();
        for (int i = 0; i < numCourses; i++) {
            if (!check[i]) {
                boolean t = isCycle(graph, i, check, res);
                if (t) {
                    int[] emptyArray = {};
                    return emptyArray;
                }
            }
        }
        for (int i = 0; i < numCourses; i++) {
            check[i] = false;
            res[i] = false;
        }
        for (int i = 0; i < numCourses; i++) {
            if (!check[i]) {
                topSort(graph, i, check, s);
            }
        }
        int[] ans = new int[numCourses];
        int j = 0;
        while (!s.isEmpty()) {
            if (j < numCourses)
                ans[j++] = s.pop();
        }
        return ans;
    }

    public void topSort(ArrayList<ArrayList<Integer>> graph, int curr, boolean[] check, Stack<Integer> s) {
        check[curr] = true;
        for (int i = 0; i < graph.get(curr).size(); i++) {
            int p = graph.get(curr).get(i);
            if (!check[p]) {
                topSort(graph, p, check, s);
            }
        }
        s.push(curr);
    }

    public boolean isCycle(ArrayList<ArrayList<Integer>> graph, int curr, boolean[] check, boolean[] res) {
        res[curr] = check[curr] = true;
        for (int i = 0; i < graph.get(curr).size(); i++) {
            int p = graph.get(curr).get(i);
            if (res[p]) {
                return true;
            }
            if (!check[p]) {
                if (isCycle(graph, p, check, res)) {
                    return true;
                }
            }
        }
        res[curr] = false;
        return false;
    }
}
