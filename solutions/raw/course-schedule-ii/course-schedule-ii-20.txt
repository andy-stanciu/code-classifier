class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        boolean[] visited = new boolean[numCourses];
        boolean[] dfsVisited = new boolean[numCourses];
        Stack stack = new Stack<>();
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adjList.add(new ArrayList<>());
        }
        for (int[] edge : prerequisites) {
            int u = edge[0];
            int v = edge[1];
            adjList.get(u).add(v);
        }
        int[] ans = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (!visited[i]) {
                if (topSort(i, adjList, visited, dfsVisited, stack)) {
                    return new int[0];
                }
            }
        }
        for (int i = ans.length - 1; i >= 0; i--) {
            ans[i] = stack.pop();
        }
        return ans;
    }

    public boolean topSort(int node, List<List<Integer>> adjList, boolean[] visited, boolean[] dfsVisited, Stack<Integer> stack) {
        if (dfsVisited[node])
            return true;
        if (visited[node])
            return false;
        visited[node] = true;
        dfsVisited[node] = true;
        for (int nbr : adjList.get(node)) {
            if (topSort(nbr, adjList, visited, dfsVisited, stack))
                return true;
        }
        dfsVisited[node] = false;
        stack.push(node);
        return false;
    }
}
