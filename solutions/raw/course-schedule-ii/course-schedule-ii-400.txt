class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] indegree = new int[numCourses];
        List<Integer>[] graph = new List[numCourses];
        int[] order = new int[numCourses];
        Arrays.fill(order, -1);
        for (int[] pair : prerequisites) {
            int course = pair[0];
            int prereq = pair[1];
            if (graph[prereq] == null) {
                graph[prereq] = new ArrayList<>();
            }
            graph[prereq].add(course);
            indegree[course]++;
        }
        int counter = 0;
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        while (!q.isEmpty()) {
            int pre = q.poll();
            order[counter] = pre;
            counter++;
            if (graph[pre] != null) {
                for (Integer course : graph[pre]) {
                    indegree[course]--;
                    if (indegree[course] == 0)
                        q.add(course);
                }
            }
        }
        return order[numCourses - 1] == -1 ? new int[0] : order;
    }
}
