class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        int m = prerequisites.length;
        for (int i = 0; i < m; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        int[] inDegree = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            for (int it : adj.get(i)) {
                inDegree[it]++;
            }
        }
        Queue<Integer> que = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (inDegree[i] == 0) {
                que.add(i);
            }
        }
        // topological
        ArrayList<Integer> list = new ArrayList<>();
        // O(V+E)
        while (que.size() > 0) {
            int node = que.peek();
            que.remove();
            list.add(node);
            for (int it : adj.get(node)) {
                inDegree[it]--;
                if (inDegree[it] == 0)
                    que.add(it);
            }
        }
        if (list.size() == numCourses) {
            int[] ans = new int[numCourses];
            for (int i = 0; i < numCourses; i++) {
                ans[i] = list.get(i);
            }
            return ans;
        }
        return new int[0];
    }
}
