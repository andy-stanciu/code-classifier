class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        int[] vis = new int[numCourses];
        int[] pathvis = new int[numCourses];
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < numCourses; i++) {
            if (vis[i] == 0) {
                if (topoOrder(i, vis, pathvis, adj, stack)) {
                    return new int[0];
                }
            }
        }
        int n = stack.size();
        int[] res = new int[n];
        for (int i = 0; i < n; i++) {
            res[i] = stack.pop();
        }
        return res;
    }

    public boolean topoOrder(int node, int[] vis, int[] pathvis, List<List<Integer>> adj, Stack<Integer> stack) {
        vis[node] = 1;
        pathvis[node] = 1;
        for (int n : adj.get(node)) {
            if (vis[n] == 0) {
                if (topoOrder(n, vis, pathvis, adj, stack)) {
                    return true;
                }
            }
            if (pathvis[n] == 1) {
                return true;
            }
        }
        pathvis[node] = 0;
        stack.push(node);
        return false;
    }
}
