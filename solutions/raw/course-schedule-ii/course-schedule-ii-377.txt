class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        List<List<Integer>> g = new ArrayList<>();
        int cnt = 0;
        int[] result = new int[numCourses];
        int[] indegree = new int[numCourses];
        // both side queue;
        Deque<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) g.add(new ArrayList<>());
        for (int[] p : prerequisites) {
            int a = p[1], b = p[0];
            // a -> b;
            g.get(a).add(b);
            indegree[b]++;
        }
        for (int i = 0; i < numCourses; i++) if (indegree[i] == 0)
            q.offer(i);
        while (!q.isEmpty()) {
            int top = q.poll();
            result[cnt++] = top;
            for (int e : g.get(top)) if (--indegree[e] == 0)
                q.offer(e);
        }
        return cnt == numCourses ? result : new int[0];
    }
}
