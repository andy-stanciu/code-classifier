class Solution {

    public int[] findOrder(int n, int[][] prerequisites) {
        ArrayList<Integer> result = new ArrayList<>();
        ArrayList<ArrayList<Integer>> adj = buildGraph(prerequisites, n);
        System.out.println(adj);
        int[] indegree = calculateInDegree(adj, n);
        topologicalSortKahn(adj, indegree, result);
        System.out.println(Arrays.toString(indegree));
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] != 0 && adj.get(i).size() != 0)
                return new int[] {};
        }
        return result.stream().mapToInt(i -> i).toArray();
    }

    public void topologicalSortKahn(ArrayList<ArrayList<Integer>> adj, int[] indegree, ArrayList<Integer> result) {
        // int[] indegree = calculateInDegree(adj);
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        while (!q.isEmpty()) {
            System.out.println("Queue " + q);
            int u = q.poll();
            result.add(u);
            System.out.print(u + " ");
            if (u < adj.size() && adj.get(u).size() != 0) {
                for (int v : adj.get(u)) {
                    indegree[v]--;
                    if (indegree[v] == 0) {
                        q.add(v);
                    }
                }
            }
        }
    }

    public ArrayList<ArrayList<Integer>> buildGraph(int[][] pre, int n) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>(n);
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] u : pre) {
            adj.get(u[1]).add(u[0]);
        }
        return adj;
    }

    public int[] calculateInDegree(ArrayList<ArrayList<Integer>> adj, int n) {
        int[] indegree = new int[n];
        for (ArrayList<Integer> ad : adj) {
            for (int u : ad) {
                indegree[u]++;
            }
        }
        return indegree;
    }
}
