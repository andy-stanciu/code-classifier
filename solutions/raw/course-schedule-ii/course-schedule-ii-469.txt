class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        //Topological Sort using BFS(Kahn\'s algorithm)
        Map<Integer, List<Integer>> adjMap = new HashMap<>();
        Queue<Integer> bfsQ = new LinkedList<>();
        int[] indegrees = new int[numCourses];
        List<Integer> topoSortList = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adjMap.put(i, new ArrayList<>());
        }
        for (int[] pre : prerequisites) {
            adjMap.get(pre[1]).add(pre[0]);
        }
        for (int i = 0; i < numCourses; i++) {
            for (Integer adjNode : adjMap.get(i)) {
                indegrees[adjNode]++;
            }
        }
        for (int i = 0; i < indegrees.length; i++) {
            if (indegrees[i] == 0) {
                bfsQ.offer(i);
            }
        }
        while (!bfsQ.isEmpty()) {
            int currNode = bfsQ.poll();
            topoSortList.add(currNode);
            for (Integer adjNode : adjMap.get(currNode)) {
                indegrees[adjNode]--;
                if (indegrees[adjNode] == 0) {
                    bfsQ.offer(adjNode);
                }
            }
        }
        return topoSortList.size() == numCourses ? topoSortList.stream().mapToInt(Integer::intValue).toArray() : new int[] {};
    }
}
