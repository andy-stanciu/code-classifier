//There are a total of numCourses courses you have to take, labeled from 0 to
//numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai,
// bi] indicates that you must take course bi first if you want to take course ai.
//
//
//
// For example, the pair [0, 1], indicates that to take course 0 you have to
//first take course 1.
//
//
// Return true if you can finish all courses. Otherwise, return false.
//
//
// Example 1:
//
//
//Input: numCourses = 2, prerequisites = [[1,0]]
//Output: true
//Explanation: There are a total of 2 courses to take.
//To take course 1 you should have finished course 0. So it is possible.
//
//
// Example 2:
//
//
//Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
//Output: false
//Explanation: There are a total of 2 courses to take.
//To take course 1 you should have finished course 0, and to take course 0 you
//should also have finished course 1. So it is impossible.
//
//
//
// Constraints:
//
//
// 1 <= numCourses <= 2000
// 0 <= prerequisites.length <= 5000
// prerequisites[i].length == 2
// 0 <= ai, bi < numCourses
// All the pairs prerequisites[i] are unique.
//
// Related Topics Depth-First Search Breadth-First Search Graph Topological
//Sort \\U0001f44d 10872 \\U0001f44e 428//leetcode submit region begin(Prohibit modification and deletion)
class Solution {

    class Vertex {

        public int val;

        public List<Vertex> neighbors;

        public Vertex() {
            val = 0;
            neighbors = new ArrayList<Vertex>();
        }

        public Vertex(int _val) {
            val = _val;
            neighbors = new ArrayList<Vertex>();
        }

        public Vertex(int _val, ArrayList<Vertex> _neighbors) {
            val = _val;
            neighbors = _neighbors;
        }
    }

    private Vertex[] instantiateGraph(int v, int[][] edges) {
        // instantiate graph by adjacency list
        Vertex[] vertices = new Vertex[v];
        for (int i = 0; i != vertices.length; ++i) {
            vertices[i] = new Vertex(i);
        }
        for (var e : edges) {
            vertices[e[0]].neighbors.add(vertices[e[1]]);
        }
        return vertices;
    }

    public static void main(String[] args) {
        int numCourses = 2;
        int[][] prerequisites = new int[][] { new int[] { 0, 1 }, new int[] { 1, 0 } };
        var s = new Solution();
        System.out.println(!s.cyclic(numCourses, s.instantiateGraph(numCourses, prerequisites)));
    }

    private boolean cyclic(int numCourses, Vertex[] vertices) {
        // find if there is a cycle
        boolean[] marked = new boolean[numCourses];
        for (int i = 0; i != numCourses; ++i) {
            if (!marked[i]) {
                if (cyclicHelper(new boolean[numCourses], marked, vertices[i]))
                    return true;
            }
        }
        return false;
    }

    /**
     * Visiting a visited vertex results in finding a cycle.
     * there is a cycle iff a node in the call stack is searched again.
     * @param visited visited in the current call stack
     * @param marked if this vertex is marked as searched(and it\'s not on a cycle),
     *              there\'s no need to be DFSed in future runs
     * @param v current
     * @return if there is a cycle
     */
    private boolean cyclicHelper(boolean[] visited, boolean[] marked, Vertex v) {
        if (marked[v.val])
            return false;
        if (visited[v.val])
            return true;
        visited[v.val] = true;
        for (var w : v.neighbors) {
            if (cyclicHelper(visited, marked, w)) {
                return true;
            }
        }
        marked[v.val] = true;
        // if the vertex leaves the call stack, mark it as unvisited
        visited[v.val] = false;
        return false;
    }

    /**
     * If there is no cycle, return the toposort.
     * @param numCourses number of vertices
     * @param prerequisites edges
     * @return topological sort
     */
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        var vertices = instantiateGraph(numCourses, prerequisites);
        if (cyclic(numCourses, vertices))
            return new int[0];
        var list = new ArrayList<Integer>();
        var visited = new boolean[numCourses];
        for (var v : vertices) DFS(v, visited, list);
        int[] array = new int[numCourses];
        for (int i = 0; i != numCourses; ++i) array[i] = list.get(i);
        return array;
    }

    private void DFS(Vertex v, boolean[] visited, ArrayList<Integer> postOrder) {
        if (visited[v.val])
            return;
        visited[v.val] = true;
        for (var w : v.neighbors) DFS(w, visited, postOrder);
        postOrder.add(v.val);
    }
}
//leetcode submit region end(Prohibit modification and deletion)
