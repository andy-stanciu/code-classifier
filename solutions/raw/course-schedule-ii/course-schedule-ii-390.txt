class Solution {

    List<Integer> list;

    boolean[] vis;

    boolean[] onPath;

    boolean cycle;

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        //\u540E\u7EED\u904D\u5386\u7684reverse\u5C31\u662F\u62D3\u6251\u6392\u5E8F
        vis = new boolean[numCourses];
        onPath = new boolean[numCourses];
        list = new ArrayList<>();
        List<Integer>[] graph = new List[numCourses];
        for (int i = 0; i < numCourses; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] p : prerequisites) {
            graph[p[1]].add(p[0]);
        }
        for (int i = 0; i < numCourses; i++) {
            //\u53EF\u6709\u53EF\u65E0
            if (!vis[i]) {
                traverse(graph, i);
            }
        }
        Collections.reverse(list);
        if (cycle) {
            return new int[] {};
        }
        int[] res = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            res[i] = list.get(i);
        }
        return res;
    }

    public void traverse(List<Integer>[] graph, int start) {
        if (onPath[start]) {
            cycle = true;
            return;
        }
        //\u5FC5\u987B\u8981\u5224\u65AD\u7B2C\u4E00\u4E2A\u6761\u4EF6
        //\u5426\u5219\u4F1A\u5141\u8BB8\u4E00\u4E2A\u4EE5\u4E0Apath\u904D\u5386\u540C\u4E00\u4E2A\u8282\u70B9\uFF0C\u8FD9\u4E2A\u8282\u70B9\u4F1A\u88AB\u91CD\u590D\u7B97\u8FDBlist
        if (vis[start] || cycle) {
            return;
        }
        vis[start] = true;
        onPath[start] = true;
        for (int n : graph[start]) {
            traverse(graph, n);
        }
        list.add(start);
        onPath[start] = false;
    }
}
