class Solution {

    public int[] findOrder(int v, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < v; i++) {
            adj.add(new ArrayList<>());
        }
        for (int j = 0; j < prerequisites.length; j++) {
            adj.get(prerequisites[j][1]).add(prerequisites[j][0]);
        }
        int[] indeg = new int[v];
        for (int i = 0; i < v; i++) {
            for (int dest : adj.get(i)) {
                indeg[dest]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < v; i++) {
            if (indeg[i] == 0) {
                q.add(i);
            }
        }
        ArrayList<Integer> ans = new ArrayList<>();
        while (!q.isEmpty()) {
            int cur = q.remove();
            ans.add(cur);
            for (int des : adj.get(cur)) {
                indeg[des]--;
                if (indeg[des] == 0) {
                    q.add(des);
                }
            }
        }
        if (ans.size() == v) {
            int[] res = new int[ans.size()];
            for (int i = 0; i < ans.size(); i++) {
                res[i] = ans.get(i);
            }
            return res;
        } else {
            return new int[0];
        }
    }
}
