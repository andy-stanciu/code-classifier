class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        HashMap<Integer, List<Integer>> map = new HashMap<>();
        int[] grades = new int[numCourses];
        int[] result = new int[numCourses];
        int index = 0;
        Queue<Integer> queue = new LinkedList<>();
        for (int[] array : prerequisites) {
            int a = array[0];
            int b = array[1];
            if (!map.containsKey(b)) {
                map.put(b, new ArrayList<>());
            }
            map.get(b).add(a);
        }
        for (int i = 0; i < numCourses; i++) {
            for (int n : map.getOrDefault(i, new ArrayList<>())) {
                grades[n]++;
            }
        }
        for (int i = 0; i < numCourses; i++) {
            if (grades[i] == 0) {
                queue.add(i);
            }
        }
        while (!queue.isEmpty()) {
            int node = queue.remove();
            result[index++] = node;
            for (int n : map.getOrDefault(node, new ArrayList<>())) {
                grades[n]--;
                if (grades[n] == 0) {
                    queue.add(n);
                }
            }
        }
        if (index < numCourses - 1) {
            return new int[0];
        }
        return result;
    }
}
