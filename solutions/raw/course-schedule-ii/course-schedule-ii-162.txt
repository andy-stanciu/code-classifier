class Solution {

    boolean[] visiting;

    boolean[] visited;

    int[] res;

    int index = 0;

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        visiting = new boolean[numCourses];
        visited = new boolean[numCourses];
        res = new int[numCourses];
        List<Integer>[] list = new ArrayList[numCourses];
        for (int[] arr : prerequisites) {
            if (list[arr[0]] == null)
                list[arr[0]] = new ArrayList<Integer>();
            list[arr[0]].add(arr[1]);
        }
        for (int i = 0; i < numCourses; i++) {
            if (!visited[i]) {
                if (!goOverTheCourses(list, i))
                    return new int[] {};
            }
        }
        return res;
    }

    public boolean goOverTheCourses(List<Integer>[] list, int courseNum) {
        if (visited[courseNum])
            return true;
        if (visiting[courseNum])
            return false;
        List<Integer> l = list[courseNum];
        visiting[courseNum] = true;
        if (l != null)
            for (int i = 0; i < l.size(); i++) {
                if (!visited[l.get(i)]) {
                    if (!goOverTheCourses(list, l.get(i)))
                        return false;
                }
            }
        visiting[courseNum] = false;
        visited[courseNum] = true;
        res[index++] = courseNum;
        return true;
    }
}
