class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        boolean[] visited = new boolean[numCourses];
        boolean[] inRecursion = new boolean[numCourses];
        Stack<Integer> stack = new Stack<>();
        List<List<Integer>> graph = new ArrayList<>();
        // Initialize the adjacency list
        for (int i = 0; i < numCourses; i++) {
            graph.add(new ArrayList<>());
        }
        // Build the graph
        for (int[] pair : prerequisites) {
            int a = pair[0];
            int b = pair[1];
            graph.get(b).add(a);
        }
        // Perform DFS for each course
        for (int i = 0; i < numCourses; i++) {
            if (!visited[i] && dfs(i, graph, visited, inRecursion, stack)) {
                // Cycle detected
                return new int[] {};
            }
        }
        // No cycles detected
        int[] ans = new int[numCourses];
        int i = 0;
        while (!stack.isEmpty()) {
            ans[i++] = stack.pop();
        }
        return ans;
    }

    public boolean dfs(int course, List<List<Integer>> graph, boolean[] visited, boolean[] inRecursion, Stack<Integer> stack) {
        visited[course] = true;
        inRecursion[course] = true;
        for (int next : graph.get(course)) {
            if (!visited[next] && dfs(next, graph, visited, inRecursion, stack)) {
                // Cycle detected
                return true;
            } else if (inRecursion[next]) {
                // Cycle detected
                return true;
            }
        }
        stack.push(course);
        // Backtrack
        inRecursion[course] = false;
        // No cycle found
        return false;
    }
}
