class Solution {

    public boolean dfs(List<List<Integer>> graph, boolean[] visited, int curr, Stack<Integer> stack, boolean[] recStack) {
        visited[curr] = true;
        recStack[curr] = true;
        for (int i = 0; i < graph.get(curr).size(); i++) {
            int tmp = graph.get(curr).get(i);
            if (recStack[tmp]) {
                return false;
            }
            if (!visited[tmp]) {
                if (!dfs(graph, visited, tmp, stack, recStack)) {
                    return false;
                }
            }
        }
        recStack[curr] = false;
        stack.push(curr);
        return true;
    }

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] res = new int[0];
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            graph.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            graph.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        Stack<Integer> stack = new Stack<>();
        boolean[] visited = new boolean[numCourses];
        boolean[] recStac = new boolean[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (!visited[i]) {
                if (!dfs(graph, visited, i, stack, recStac)) {
                    return res;
                }
            }
        }
        res = new int[stack.size()];
        int index = numCourses - 1;
        while (stack.size() != 0) {
            res[index--] = stack.pop();
        }
        return res;
    }
}
