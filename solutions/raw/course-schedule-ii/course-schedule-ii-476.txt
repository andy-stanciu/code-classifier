class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] row : prerequisites) {
            adj.get(row[1]).add(row[0]);
        }
        System.out.println(adj);
        //using cycle detection in directed graph
        //topological sort
        int[] indegree = new int[numCourses];
        for (int[] row : prerequisites) {
            indegree[row[0]]++;
        }
        System.out.println(Arrays.toString(indegree));
        Queue<Integer> queue = new LinkedList<>();
        int[] topoOrder = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0)
                queue.add(i);
        }
        int index = 0;
        while (!queue.isEmpty()) {
            int node = queue.poll();
            topoOrder[index++] = node;
            for (Integer it : adj.get(node)) {
                indegree[it]--;
                if (indegree[it] == 0)
                    queue.add(it);
            }
        }
        return index == numCourses ? topoOrder : new int[0];
    }
}
