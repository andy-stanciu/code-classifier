class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        // first we have to make a graph with the given
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        int[] indegree = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        // adjacency list is done
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
            indegree[prerequisites[i][1]]++;
        }
        Queue<Integer> q = new LinkedList<>();
        int[] ans = new int[numCourses];
        Arrays.fill(ans, Integer.MAX_VALUE);
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        int k = numCourses - 1;
        while (!q.isEmpty()) {
            int val = q.poll();
            ans[k--] = val;
            for (int el : adj.get(val)) {
                indegree[el]--;
                if (indegree[el] == 0) {
                    q.add(el);
                }
            }
        }
        for (int i = 0; i < ans.length; i++) {
            if (ans[i] == Integer.MAX_VALUE) {
                return new int[] {};
            }
        }
        return ans;
    }
}
