class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        HashMap<Integer, List<Integer>> graph = new HashMap<>();
        for (int[] i : prerequisites) {
            if (!graph.containsKey(i[0]))
                graph.put(i[0], new ArrayList<>());
            graph.get(i[0]).add(i[1]);
        }
        boolean[] visited = new boolean[numCourses];
        boolean[] rec_stack = new boolean[numCourses];
        Stack<Integer> st = new Stack<>();
        boolean iscycle = false;
        for (int i = 0; i < numCourses; i++) {
            if (!visited[i])
                if (isCyclic(graph, visited, rec_stack, i)) {
                    iscycle = true;
                    break;
                }
        }
        if (!iscycle) {
            visited = new boolean[numCourses];
            for (int i = 0; i < numCourses; i++) {
                if (!visited[i])
                    topo(graph, visited, st, i);
            }
            int[] ans = new int[st.size()];
            int k = st.size();
            while (!st.isEmpty()) {
                ans[--k] = st.pop();
            }
            return ans;
        }
        return new int[] {};
    }

    public boolean isCyclic(HashMap<Integer, List<Integer>> graph, boolean[] visited, boolean[] rec_stack, int curr) {
        visited[curr] = true;
        rec_stack[curr] = true;
        if (graph.containsKey(curr)) {
            for (int nei : graph.get(curr)) {
                if (rec_stack[nei] == true)
                    return true;
                else if (!visited[nei]) {
                    if (isCyclic(graph, visited, rec_stack, nei))
                        return true;
                }
            }
        }
        rec_stack[curr] = false;
        return false;
    }

    public void topo(HashMap<Integer, List<Integer>> graph, boolean[] visited, Stack<Integer> st, int curr) {
        visited[curr] = true;
        if (graph.containsKey(curr)) {
            for (int nei : graph.get(curr)) {
                if (!visited[nei])
                    topo(graph, visited, st, nei);
            }
        }
        st.add(curr);
    }
}
