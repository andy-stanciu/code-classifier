class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int n = numCourses;
        //create graph
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        //array for dependencies
        int[] inDegree = new int[n];
        //initialize graph
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }
        //add prerequisites in graph
        for (int[] edge : prerequisites) {
            int ai = edge[0];
            int bi = edge[1];
            //ai is dependent on bi
            graph.get(bi).add(ai);
            inDegree[ai]++;
        }
        //answer containing arrayList
        ArrayList<Integer> topological = new ArrayList<>();
        //queue honding nodes with 0 dependencies
        //q will maintain all the people having 0 dependencies.
        Queue<Integer> que = new LinkedList<>();
        //add all 0 dependencies nodes
        for (int i = 0; i < n; i++) {
            if (inDegree[i] == 0)
                que.add(i);
        }
        //start BFS
        while (que.size() > 0) {
            //remove
            int curr = que.remove();
            //add to answer array topological
            topological.add(curr);
            //now decrease the dependencies of neighbour nodes
            for (int nbr : graph.get(curr)) {
                //decrease dependency
                inDegree[nbr]--;
                //if dependency is become 0, then add to queue
                if (inDegree[nbr] == 0)
                    que.add(nbr);
            }
        }
        //if topological array does not contain all \'n\' nodes, then return empty array
        if (topological.size() < n) {
            //directed graph is  having a cycle
            //topo sort is not possible
            return new int[0];
        }
        //else return answer
        //we have to return answer in array
        //so connert ArrayList into Array and then return that array
        int[] ans = new int[n];
        for (int i : topological) {
            ans[i] = topological.get(i);
        }
        return ans;
    }
}
