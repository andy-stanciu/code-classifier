class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> arr = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            arr.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            arr.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        int V = numCourses;
        int[] top = new int[V];
        int[] indegree = new int[V];
        for (int i = 0; i < V; i++) {
            for (int it : arr.get(i)) {
                indegree[it]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0)
                q.add(i);
        }
        int i = 0;
        while (!q.isEmpty()) {
            int x = q.poll();
            top[i++] = x;
            for (int it : arr.get(x)) {
                indegree[it]--;
                if (indegree[it] == 0)
                    q.add(it);
            }
        }
        if (i == numCourses) {
            return top;
        } else {
            // Return empty array if there\'s a cycle
            return new int[0];
        }
    }
}
