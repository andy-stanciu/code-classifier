class Solution {

    //Topological Sort
    public int[] findOrder(int n, int[][] p) {
        int[] indeg = new int[n];
        //calculating the indeg of each elements
        for (int i = 0; i < p.length; ++i) {
            ++indeg[p[i][0]];
        }
        ArrayList<Integer>[] graph = new ArrayList[n];
        //storing the neighbours for each vertices
        for (int i = 0; i < graph.length; ++i) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < p.length; ++i) {
            graph[p[i][1]].add(p[i][0]);
        }
        Queue<Integer> q = new LinkedList<>();
        //adding the vertices in queue with in-degree 0
        for (int i = 0; i < n; ++i) {
            if (indeg[i] == 0) {
                q.add(i);
            }
        }
        int curr, k = 0;
        int[] res = new int[n];
        Arrays.fill(res, -1);
        while (!q.isEmpty()) {
            curr = q.remove();
            res[k++] = curr;
            for (int i = 0; i < graph[curr].size(); ++i) {
                int e = graph[curr].get(i);
                --indeg[e];
                if (indeg[e] == 0) {
                    q.add(e);
                }
            }
        }
        //checking for invalid case
        for (int i = 0; i < n; ++i) {
            if (res[i] == -1) {
                return new int[0];
            }
        }
        return res;
    }
}
