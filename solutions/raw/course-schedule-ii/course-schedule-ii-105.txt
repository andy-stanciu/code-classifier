class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        Map<Integer, List<Integer>> courseMap = new HashMap<>();
        for (int i = 0; i < numCourses; i++) {
            courseMap.put(i, new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            int course = prerequisites[i][0];
            int prereq = prerequisites[i][1];
            courseMap.get(course).add(prereq);
        }
        List<Integer> resultList = new ArrayList<>();
        Set<Integer> visited = new HashSet<>();
        Set<Integer> cycle = new HashSet<>();
        for (int i = 0; i < numCourses; i++) {
            if (!dfs(i, courseMap, visited, resultList, cycle))
                return new int[0];
        }
        int[] res = new int[resultList.size()];
        for (int i = 0; i < resultList.size(); i++) {
            res[i] = resultList.get(i);
        }
        return res;
    }

    public boolean dfs(int course, Map<Integer, List<Integer>> cMap, Set<Integer> visited, List<Integer> resultList, Set<Integer> cycle) {
        if (cycle.contains(course))
            return false;
        if (visited.contains(course))
            return true;
        List<Integer> prereqs = cMap.getOrDefault(course, Collections.emptyList());
        cycle.add(course);
        for (int prereq : prereqs) {
            if (!dfs(prereq, cMap, visited, resultList, cycle))
                return false;
        }
        cycle.remove(course);
        visited.add(course);
        resultList.add(course);
        return true;
    }
}
