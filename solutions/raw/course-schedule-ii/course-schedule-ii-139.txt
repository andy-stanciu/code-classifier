class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> li = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            li.add(new ArrayList<Integer>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            li.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        int[] indegree = new int[numCourses];
        for (int i = 0; i < li.size(); i++) {
            for (int j = 0; j < li.get(i).size(); j++) {
                indegree[li.get(i).get(j)]++;
            }
        }
        Queue<Integer> qu = new LinkedList<Integer>();
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                qu.add(i);
            }
        }
        List<Integer> ans = new ArrayList<Integer>();
        while (qu.size() > 0) {
            int ele = qu.poll();
            ans.add(ele);
            for (int j = 0; j < li.get(ele).size(); j++) {
                indegree[li.get(ele).get(j)]--;
                if (indegree[li.get(ele).get(j)] == 0) {
                    qu.add(li.get(ele).get(j));
                }
            }
        }
        if (ans.size() == numCourses) {
            int[] ans1 = new int[numCourses];
            for (int i = 0; i < numCourses; i++) {
                ans1[i] = ans.get(i);
            }
            return ans1;
        } else
            return new int[] {};
    }
}
