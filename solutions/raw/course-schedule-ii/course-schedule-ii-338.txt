class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        int[] inDegree = new int[numCourses];
        for (List<Integer> list : adj) {
            for (int i : list) {
                inDegree[i]++;
            }
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < inDegree.length; i++) {
            if (inDegree[i] == 0) {
                queue.offer(i);
            }
        }
        List<Integer> ans = new ArrayList<>();
        while (!queue.isEmpty()) {
            int node = queue.poll();
            ans.add(node);
            for (int ele : adj.get(node)) {
                inDegree[ele]--;
                if (inDegree[ele] == 0) {
                    queue.offer(ele);
                }
            }
        }
        Collections.reverse(ans);
        int m = ans.size();
        int[] ansArr = new int[m];
        int k = 0;
        for (int i = 0; i < m; i++) {
            ansArr[k++] = ans.get(i);
        }
        if (m != numCourses)
            return new int[0];
        return ansArr;
    }
}
