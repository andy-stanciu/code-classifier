class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        // Create a Adjacency List
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) adj.add(new ArrayList<>());
        for (int i = 0; i < prerequisites.length; i++) {
            int u = prerequisites[i][0];
            int v = prerequisites[i][1];
            adj.get(u).add(v);
        }
        // Kahn\'s Algorithm
        int[] indegree = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            for (int it : adj.get(i)) indegree[it]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0)
                q.offer(i);
        }
        int[] topo = new int[numCourses];
        int idx = topo.length - 1;
        while (!q.isEmpty()) {
            int node = q.poll();
            topo[idx--] = node;
            for (int it : adj.get(node)) {
                indegree[it]--;
                if (indegree[it] == 0)
                    q.offer(it);
            }
        }
        // Edge Cases
        int countZero = 0;
        for (int i = 0; i < topo.length; i++) {
            if (topo[i] == 0)
                countZero++;
        }
        if (countZero > 1 && numCourses > 1)
            return new int[] {};
        // Return
        return topo;
    }
}
