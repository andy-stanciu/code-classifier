class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        List<Integer> result = new ArrayList<>();
        List<List<Integer>> list = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            list.add(new ArrayList<>());
        }
        int[] indegree = new int[numCourses];
        for (int[] arr : prerequisites) {
            int course = arr[0];
            int preR = arr[1];
            list.get(preR).add(course);
            indegree[course]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0)
                q.add(i);
        }
        int count = 0;
        while (!q.isEmpty()) {
            int v = q.poll();
            count++;
            result.add(v);
            for (int u : list.get(v)) {
                indegree[u]--;
                if (indegree[u] == 0)
                    q.add(u);
            }
        }
        int[] resultArr = new int[result.size()];
        if (count != numCourses)
            return new int[0];
        for (int i = 0; i < result.size(); i++) {
            resultArr[i] = result.get(i);
        }
        return resultArr;
    }
}
