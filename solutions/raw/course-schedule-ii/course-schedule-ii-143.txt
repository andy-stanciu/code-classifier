class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] indegree = new int[numCourses];
        List<Integer>[] nextCourses = new List[numCourses];
        for (int i = 0; i < numCourses; i++) {
            nextCourses[i] = new ArrayList<>();
        }
        for (int[] p : prerequisites) {
            indegree[p[0]]++;
            nextCourses[p[1]].add(p[0]);
        }
        List<Integer> result = new ArrayList<>();
        Deque<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                queue.add(i);
            }
        }
        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size > 0) {
                int cur = queue.poll();
                result.add(cur);
                for (int next : nextCourses[cur]) {
                    indegree[next]--;
                    if (indegree[next] == 0) {
                        queue.add(next);
                    }
                }
                size--;
            }
        }
        return result.size() == numCourses ? result.stream().mapToInt(Integer::intValue).toArray() : new int[0];
    }
}
