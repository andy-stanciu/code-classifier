class Solution {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] ans = new int[numCourses];
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        int[] indegree = new int[numCourses];
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < prerequisites.length; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        for (int i = 0; i < numCourses; i++) {
            for (int n : adj.get(i)) {
                indegree[n]++;
            }
        }
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                queue.add(i);
            }
        }
        int counter = 0;
        while (!queue.isEmpty()) {
            int polled = queue.poll();
            ans[counter++] = polled;
            for (int el : adj.get(polled)) {
                indegree[el]--;
                if (indegree[el] == 0) {
                    queue.add(el);
                }
            }
        }
        if (counter < numCourses)
            return new int[] {};
        if (counter == numCourses)
            return ans;
        return new int[numCourses];
    }
}
