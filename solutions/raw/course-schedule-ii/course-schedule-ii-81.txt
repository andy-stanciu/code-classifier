class Solution {

    public static void dfs(ArrayList<ArrayList<Integer>> graph, int node, Stack stack, int[] vis) {
        if (vis[node] == 1) {
            stack.add(-1);
            return;
        }
        if (vis[node] == 2)
            return;
        vis[node] = 1;
        for (int a : graph.get(node)) {
            dfs(graph, a, stack, vis);
        }
        vis[node] = 2;
        stack.add(node);
    }

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        if (numCourses == 1) {
            return new int[1];
        }
        int[] result = new int[numCourses];
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] arr : prerequisites) {
            graph.get(arr[1]).add(arr[0]);
        }
        int[] vis = new int[numCourses];
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < numCourses; i++) {
            dfs(graph, i, stack, vis);
        }
        if (stack.size() != numCourses) {
            return new int[0];
        }
        int t = 0;
        while (!stack.isEmpty()) {
            int a = stack.pop();
            if (a == -1) {
                return new int[0];
            }
            result[t++] = a;
        }
        return result;
    }
}
