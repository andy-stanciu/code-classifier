class Solution {

    public int[] findOrder(int numCourses, int[][] prq) {
        List<List<Integer>> adj = new ArrayList<>(numCourses);
        int[] dependencies = new int[numCourses];
        for (int i = 0; i < numCourses; i++) adj.add(new ArrayList());
        for (int[] node : prq) {
            dependencies[node[0]]++;
            adj.get(node[1]).add(node[0]);
        }
        return bfs(adj, dependencies, prq);
    }

    private int[] bfs(List<List<Integer>> adj, int[] dependencies, int[][] prq) {
        int[] ans = new int[dependencies.length];
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < dependencies.length; i++) {
            if (dependencies[i] == 0)
                q.add(i);
        }
        int visited = 0;
        while (!q.isEmpty()) {
            int from = q.poll();
            ans[visited++] = from;
            for (int to : adj.get(from)) {
                dependencies[to]--;
                if (dependencies[to] == 0)
                    q.add(to);
            }
        }
        return visited == dependencies.length ? ans : new int[] {};
    }
}
